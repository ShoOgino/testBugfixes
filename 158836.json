{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Map<String,String> atts = si.attributes();\n      int numAtts = atts == null ? 0 : atts.size();\n      SimpleTextUtil.write(output, SI_NUM_ATTS);\n      SimpleTextUtil.write(output, Integer.toString(numAtts), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numAtts > 0) {\n        for (Map.Entry<String,String> entry : atts.entrySet()) {\n          SimpleTextUtil.write(output, SI_ATT_KEY);\n          SimpleTextUtil.write(output, entry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_ATT_VALUE);\n          SimpleTextUtil.write(output, entry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Map<String,String> atts = si.attributes();\n      int numAtts = atts == null ? 0 : atts.size();\n      SimpleTextUtil.write(output, SI_NUM_ATTS);\n      SimpleTextUtil.write(output, Integer.toString(numAtts), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numAtts > 0) {\n        for (Map.Entry<String,String> entry : atts.entrySet()) {\n          SimpleTextUtil.write(output, SI_ATT_KEY);\n          SimpleTextUtil.write(output, entry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_ATT_VALUE);\n          SimpleTextUtil.write(output, entry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe477802db71d0d317a1ad076d96516bb191be4","date":1349307715,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Map<String,String> atts = si.attributes();\n      int numAtts = atts == null ? 0 : atts.size();\n      SimpleTextUtil.write(output, SI_NUM_ATTS);\n      SimpleTextUtil.write(output, Integer.toString(numAtts), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numAtts > 0) {\n        for (Map.Entry<String,String> entry : atts.entrySet()) {\n          SimpleTextUtil.write(output, SI_ATT_KEY);\n          SimpleTextUtil.write(output, entry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_ATT_VALUE);\n          SimpleTextUtil.write(output, entry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          dir.deleteFile(segFileName);\n        } catch (Throwable t) {\n        }\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Map<String,String> atts = si.attributes();\n      int numAtts = atts == null ? 0 : atts.size();\n      SimpleTextUtil.write(output, SI_NUM_ATTS);\n      SimpleTextUtil.write(output, Integer.toString(numAtts), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numAtts > 0) {\n        for (Map.Entry<String,String> entry : atts.entrySet()) {\n          SimpleTextUtil.write(output, SI_ATT_KEY);\n          SimpleTextUtil.write(output, entry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_ATT_VALUE);\n          SimpleTextUtil.write(output, entry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77f264c55cbf75404f8601ae7290d69157273a56","date":1380484282,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          dir.deleteFile(segFileName);\n        } catch (Throwable t) {\n        }\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Map<String,String> atts = si.attributes();\n      int numAtts = atts == null ? 0 : atts.size();\n      SimpleTextUtil.write(output, SI_NUM_ATTS);\n      SimpleTextUtil.write(output, Integer.toString(numAtts), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numAtts > 0) {\n        for (Map.Entry<String,String> entry : atts.entrySet()) {\n          SimpleTextUtil.write(output, SI_ATT_KEY);\n          SimpleTextUtil.write(output, entry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_ATT_VALUE);\n          SimpleTextUtil.write(output, entry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          dir.deleteFile(segFileName);\n        } catch (Throwable t) {\n        }\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      String checksum = Long.toString(output.getChecksum());\n      SimpleTextUtil.write(output, SI_CHECKSUM);\n      SimpleTextUtil.write(output, checksum, scratch);\n      SimpleTextUtil.writeNewline(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          dir.deleteFile(segFileName);\n        } catch (Throwable t) {\n        }\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          dir.deleteFile(segFileName);\n        } catch (Throwable t) {\n        }\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["caf65fa364fcf8ea8ef1032c1247622933af3b04"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      String checksum = Long.toString(output.getChecksum());\n      SimpleTextUtil.write(output, SI_CHECKSUM);\n      SimpleTextUtil.write(output, checksum, scratch);\n      SimpleTextUtil.writeNewline(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          dir.deleteFile(segFileName);\n        } catch (Throwable t) {\n        }\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName,  ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          dir.deleteFile(segFileName);\n        } catch (Throwable t) {\n        }\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"caf65fa364fcf8ea8ef1032c1247622933af3b04","date":1397057745,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          dir.deleteFile(segFileName);\n        } catch (Throwable t) {\n        }\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      String checksum = Long.toString(output.getChecksum());\n      SimpleTextUtil.write(output, SI_CHECKSUM);\n      SimpleTextUtil.write(output, checksum, scratch);\n      SimpleTextUtil.writeNewline(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          dir.deleteFile(segFileName);\n        } catch (Throwable t) {\n        }\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRefBuilder scratch = new BytesRefBuilder();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          dir.deleteFile(segFileName);\n        } catch (Throwable t) {\n        }\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRef scratch = new BytesRef();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          dir.deleteFile(segFileName);\n        } catch (Throwable t) {\n        }\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":["352763be0465236f8e2ac188aa1b761cb3e1c9ee"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRefBuilder scratch = new BytesRefBuilder();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion().toString(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          dir.deleteFile(segFileName);\n        } catch (Throwable t) {\n        }\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRefBuilder scratch = new BytesRefBuilder();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          dir.deleteFile(segFileName);\n        } catch (Throwable t) {\n        }\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3cc329405ce41b8ef462b4cd30611eca1567620","date":1408661910,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRefBuilder scratch = new BytesRefBuilder();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion().toString(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      SimpleTextUtil.write(output, SI_ID);\n      SimpleTextUtil.write(output, si.getId(), scratch);\n      SimpleTextUtil.writeNewline(output);\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          dir.deleteFile(segFileName);\n        } catch (Throwable t) {\n        }\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRefBuilder scratch = new BytesRefBuilder();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion().toString(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          dir.deleteFile(segFileName);\n        } catch (Throwable t) {\n        }\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRefBuilder scratch = new BytesRefBuilder();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion().toString(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      SimpleTextUtil.write(output, SI_ID);\n      SimpleTextUtil.write(output, si.getId(), scratch);\n      SimpleTextUtil.writeNewline(output);\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        IOUtils.deleteFilesIgnoringExceptions(dir, segFileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRefBuilder scratch = new BytesRefBuilder();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion().toString(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      SimpleTextUtil.write(output, SI_ID);\n      SimpleTextUtil.write(output, si.getId(), scratch);\n      SimpleTextUtil.writeNewline(output);\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          dir.deleteFile(segFileName);\n        } catch (Throwable t) {\n        }\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503","date":1411708843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRefBuilder scratch = new BytesRefBuilder();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion().toString(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      SimpleTextUtil.write(output, SI_ID);\n      SimpleTextUtil.write(output, new BytesRef(si.getId()));\n      SimpleTextUtil.writeNewline(output);\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        IOUtils.deleteFilesIgnoringExceptions(dir, segFileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRefBuilder scratch = new BytesRefBuilder();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion().toString(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      SimpleTextUtil.write(output, SI_ID);\n      SimpleTextUtil.write(output, si.getId(), scratch);\n      SimpleTextUtil.writeNewline(output);\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        IOUtils.deleteFilesIgnoringExceptions(dir, segFileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRefBuilder scratch = new BytesRefBuilder();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion().toString(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      SimpleTextUtil.write(output, SI_ID);\n      SimpleTextUtil.write(output, new BytesRef(si.getId()));\n      SimpleTextUtil.writeNewline(output);\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        IOUtils.deleteFilesIgnoringExceptions(dir, segFileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRefBuilder scratch = new BytesRefBuilder();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion().toString(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      SimpleTextUtil.write(output, SI_ID);\n      SimpleTextUtil.write(output, si.getId(), scratch);\n      SimpleTextUtil.writeNewline(output);\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        IOUtils.deleteFilesIgnoringExceptions(dir, segFileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":["e3cc329405ce41b8ef462b4cd30611eca1567620"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051","date":1412632911,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRefBuilder scratch = new BytesRefBuilder();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion().toString(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      SimpleTextUtil.write(output, SI_ID);\n      SimpleTextUtil.write(output, new BytesRef(si.getId()));\n      SimpleTextUtil.writeNewline(output);\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        IOUtils.deleteFilesIgnoringExceptions(dir, segFileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRefBuilder scratch = new BytesRefBuilder();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion().toString(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      SimpleTextUtil.write(output, SI_ID);\n      SimpleTextUtil.write(output, new BytesRef(si.getId()));\n      SimpleTextUtil.writeNewline(output);\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        IOUtils.deleteFilesIgnoringExceptions(dir, segFileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRefBuilder scratch = new BytesRefBuilder();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion().toString(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      SimpleTextUtil.write(output, SI_ID);\n      SimpleTextUtil.write(output, new BytesRef(si.getId()));\n      SimpleTextUtil.writeNewline(output);\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        IOUtils.deleteFilesIgnoringExceptions(dir, segFileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n\n    String segFileName = IndexFileNames.segmentFileName(si.name, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(segFileName);\n\n    boolean success = false;\n    IndexOutput output = dir.createOutput(segFileName, ioContext);\n\n    try {\n      BytesRefBuilder scratch = new BytesRefBuilder();\n    \n      SimpleTextUtil.write(output, SI_VERSION);\n      SimpleTextUtil.write(output, si.getVersion().toString(), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_DOCCOUNT);\n      SimpleTextUtil.write(output, Integer.toString(si.getDocCount()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      SimpleTextUtil.write(output, SI_USECOMPOUND);\n      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      Map<String,String> diagnostics = si.getDiagnostics();\n      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();\n      SimpleTextUtil.write(output, SI_NUM_DIAG);\n      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);\n      SimpleTextUtil.writeNewline(output);\n    \n      if (numDiagnostics > 0) {\n        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {\n          SimpleTextUtil.write(output, SI_DIAG_KEY);\n          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        \n          SimpleTextUtil.write(output, SI_DIAG_VALUE);\n          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n      \n      Set<String> files = si.files();\n      int numFiles = files == null ? 0 : files.size();\n      SimpleTextUtil.write(output, SI_NUM_FILES);\n      SimpleTextUtil.write(output, Integer.toString(numFiles), scratch);\n      SimpleTextUtil.writeNewline(output);\n\n      if (numFiles > 0) {\n        for(String fileName : files) {\n          SimpleTextUtil.write(output, SI_FILE);\n          SimpleTextUtil.write(output, fileName, scratch);\n          SimpleTextUtil.writeNewline(output);\n        }\n      }\n\n      SimpleTextUtil.write(output, SI_ID);\n      SimpleTextUtil.write(output, new BytesRef(si.getId()));\n      SimpleTextUtil.writeNewline(output);\n      \n      SimpleTextUtil.writeChecksum(output, scratch);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        IOUtils.deleteFilesIgnoringExceptions(dir, segFileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["77f264c55cbf75404f8601ae7290d69157273a56","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["77f264c55cbf75404f8601ae7290d69157273a56"],"55980207f1977bd1463465de1659b821347e2fa8":["a5d957b3a23cce91c77a2c9971ecf0c9f99dd503","2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","a5d957b3a23cce91c77a2c9971ecf0c9f99dd503"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["e3cc329405ce41b8ef462b4cd30611eca1567620"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["caf65fa364fcf8ea8ef1032c1247622933af3b04"],"057a1793765d068ea9302f1a29e21734ee58d41e":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"caf65fa364fcf8ea8ef1032c1247622933af3b04":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"e3cc329405ce41b8ef462b4cd30611eca1567620":["057a1793765d068ea9302f1a29e21734ee58d41e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77f264c55cbf75404f8601ae7290d69157273a56":["bbe477802db71d0d317a1ad076d96516bb191be4"],"bbe477802db71d0d317a1ad076d96516bb191be4":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","caf65fa364fcf8ea8ef1032c1247622933af3b04"],"55980207f1977bd1463465de1659b821347e2fa8":[],"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503":["55980207f1977bd1463465de1659b821347e2fa8","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["bbe477802db71d0d317a1ad076d96516bb191be4"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["a5d957b3a23cce91c77a2c9971ecf0c9f99dd503","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["057a1793765d068ea9302f1a29e21734ee58d41e"],"caf65fa364fcf8ea8ef1032c1247622933af3b04":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"057a1793765d068ea9302f1a29e21734ee58d41e":["e3cc329405ce41b8ef462b4cd30611eca1567620"],"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3cc329405ce41b8ef462b4cd30611eca1567620":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"77f264c55cbf75404f8601ae7290d69157273a56":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"bbe477802db71d0d317a1ad076d96516bb191be4":["77f264c55cbf75404f8601ae7290d69157273a56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}