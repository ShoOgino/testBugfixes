{"path":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(int).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(int).mjava","sourceNew":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader, String)\n   */\n  public String[] retrieveInterestingTerms(int docNum) throws IOException {\n    ArrayList<Object> al = new ArrayList<Object>(maxQueryTerms);\n    PriorityQueue<Object[]> pq = retrieveTerms(docNum);\n    Object cur;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((cur = pq.pop()) != null) && lim-- > 0) {\n      Object[] ar = (Object[]) cur;\n      al.add(ar[0]); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","sourceOld":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader, String)\n   */\n  public String[] retrieveInterestingTerms(int docNum) throws IOException {\n    ArrayList<Object> al = new ArrayList<Object>(maxQueryTerms);\n    PriorityQueue<Object[]> pq = retrieveTerms(docNum);\n    Object cur;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((cur = pq.pop()) != null) && lim-- > 0) {\n      Object[] ar = (Object[]) cur;\n      al.add(ar[0]); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(int).mjava","sourceNew":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader, String)\n   */\n  public String[] retrieveInterestingTerms(int docNum) throws IOException {\n    ArrayList<Object> al = new ArrayList<>(maxQueryTerms);\n    PriorityQueue<Object[]> pq = retrieveTerms(docNum);\n    Object cur;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((cur = pq.pop()) != null) && lim-- > 0) {\n      Object[] ar = (Object[]) cur;\n      al.add(ar[0]); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","sourceOld":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader, String)\n   */\n  public String[] retrieveInterestingTerms(int docNum) throws IOException {\n    ArrayList<Object> al = new ArrayList<Object>(maxQueryTerms);\n    PriorityQueue<Object[]> pq = retrieveTerms(docNum);\n    Object cur;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((cur = pq.pop()) != null) && lim-- > 0) {\n      Object[] ar = (Object[]) cur;\n      al.add(ar[0]); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d","date":1405005344,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(int).mjava","sourceNew":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader, String)\n   */\n  public String[] retrieveInterestingTerms(int docNum) throws IOException {\n    ArrayList<Object> al = new ArrayList<>(maxQueryTerms);\n    PriorityQueue<ScoreTerm> pq = retrieveTerms(docNum);\n    ScoreTerm scoreTerm;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((scoreTerm = pq.pop()) != null) && lim-- > 0) {\n      al.add(scoreTerm.word); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","sourceOld":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader, String)\n   */\n  public String[] retrieveInterestingTerms(int docNum) throws IOException {\n    ArrayList<Object> al = new ArrayList<>(maxQueryTerms);\n    PriorityQueue<Object[]> pq = retrieveTerms(docNum);\n    Object cur;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((cur = pq.pop()) != null) && lim-- > 0) {\n      Object[] ar = (Object[]) cur;\n      al.add(ar[0]); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a2ec5c4aea62b49cb9b5986524f8aee431470a3","date":1506692092,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(int).mjava","sourceNew":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader, String)\n   */\n  public String[] retrieveInterestingTerms(int docNum) throws IOException {\n    ArrayList<String> al = new ArrayList<>(maxQueryTerms);\n    PriorityQueue<ScoreTerm> pq = retrieveTerms(docNum);\n    ScoreTerm scoreTerm;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((scoreTerm = pq.pop()) != null) && lim-- > 0) {\n      al.add(scoreTerm.word); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","sourceOld":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader, String)\n   */\n  public String[] retrieveInterestingTerms(int docNum) throws IOException {\n    ArrayList<Object> al = new ArrayList<>(maxQueryTerms);\n    PriorityQueue<ScoreTerm> pq = retrieveTerms(docNum);\n    ScoreTerm scoreTerm;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((scoreTerm = pq.pop()) != null) && lim-- > 0) {\n      al.add(scoreTerm.word); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveInterestingTerms(int).mjava","sourceNew":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader, String)\n   */\n  public String[] retrieveInterestingTerms(int docNum) throws IOException {\n    ArrayList<String> al = new ArrayList<>(maxQueryTerms);\n    PriorityQueue<ScoreTerm> pq = retrieveTerms(docNum);\n    ScoreTerm scoreTerm;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((scoreTerm = pq.pop()) != null) && lim-- > 0) {\n      al.add(scoreTerm.word); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","sourceOld":"  /**\n   * @see #retrieveInterestingTerms(java.io.Reader, String)\n   */\n  public String[] retrieveInterestingTerms(int docNum) throws IOException {\n    ArrayList<Object> al = new ArrayList<>(maxQueryTerms);\n    PriorityQueue<ScoreTerm> pq = retrieveTerms(docNum);\n    ScoreTerm scoreTerm;\n    int lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n    // we just want to return the top words\n    while (((scoreTerm = pq.pop()) != null) && lim-- > 0) {\n      al.add(scoreTerm.word); // the 1st entry is the interesting word\n    }\n    String[] res = new String[al.size()];\n    return al.toArray(res);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d","6a2ec5c4aea62b49cb9b5986524f8aee431470a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a2ec5c4aea62b49cb9b5986524f8aee431470a3":["2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a2ec5c4aea62b49cb9b5986524f8aee431470a3"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d":["6240b74b884c5587f2a4062dd27d6c32bf228889","6a2ec5c4aea62b49cb9b5986524f8aee431470a3"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6a2ec5c4aea62b49cb9b5986524f8aee431470a3":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}