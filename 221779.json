{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getLastTokenQuery(String).mjava","commits":[{"id":"33ba398fa7984fdcb45fd76b87504d5adf7ca5e3","date":1373907993,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getLastTokenQuery(String).mjava","pathOld":"/dev/null","sourceNew":"  /** This is called if the last token isn't ended\n   *  (e.g. user did not type a space after it).  Return an\n   *  appropriate Query clause to add to the BooleanQuery. */\n  protected Query getLastTokenQuery(String token) throws IOException {\n    if (token.length() < minPrefixChars) {\n      // The leading ngram was directly indexed:\n      return new TermQuery(new Term(\"textgrams\", token));\n    }\n\n    return new PrefixQuery(new Term(TEXT_FIELD_NAME, token));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getLastTokenQuery(String).mjava","pathOld":"/dev/null","sourceNew":"  /** This is called if the last token isn't ended\n   *  (e.g. user did not type a space after it).  Return an\n   *  appropriate Query clause to add to the BooleanQuery. */\n  protected Query getLastTokenQuery(String token) throws IOException {\n    if (token.length() < minPrefixChars) {\n      // The leading ngram was directly indexed:\n      return new TermQuery(new Term(\"textgrams\", token));\n    }\n\n    return new PrefixQuery(new Term(TEXT_FIELD_NAME, token));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d31848ef598c839e93829db4cbab650e1b59430a","date":1498810024,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getLastTokenQuery(String).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getLastTokenQuery(String).mjava","sourceNew":"  /** This is called if the last token isn't ended\n   *  (e.g. user did not type a space after it).  Return an\n   *  appropriate Query clause to add to the BooleanQuery. */\n  protected Query getLastTokenQuery(String token) throws IOException {\n    if (token.length() < minPrefixChars) {\n      // The leading ngram was directly indexed:\n      return new TermQuery(new Term(TEXTGRAMS_FIELD_NAME, token));\n    }\n\n    return new PrefixQuery(new Term(TEXT_FIELD_NAME, token));\n  }\n\n","sourceOld":"  /** This is called if the last token isn't ended\n   *  (e.g. user did not type a space after it).  Return an\n   *  appropriate Query clause to add to the BooleanQuery. */\n  protected Query getLastTokenQuery(String token) throws IOException {\n    if (token.length() < minPrefixChars) {\n      // The leading ngram was directly indexed:\n      return new TermQuery(new Term(\"textgrams\", token));\n    }\n\n    return new PrefixQuery(new Term(TEXT_FIELD_NAME, token));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182384b20c064aa16998ddebe9f36e649279c5a6","date":1503596494,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getLastTokenQuery(String).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getLastTokenQuery(String).mjava","sourceNew":"  /** This is called if the last token isn't ended\n   *  (e.g. user did not type a space after it).  Return an\n   *  appropriate Query clause to add to the BooleanQuery. */\n  protected Query getLastTokenQuery(String token) throws IOException {\n    if (token.length() < minPrefixChars) {\n      // The leading ngram was directly indexed:\n      return new TermQuery(new Term(TEXTGRAMS_FIELD_NAME, token));\n    }\n\n    return new PrefixQuery(new Term(TEXT_FIELD_NAME, token));\n  }\n\n","sourceOld":"  /** This is called if the last token isn't ended\n   *  (e.g. user did not type a space after it).  Return an\n   *  appropriate Query clause to add to the BooleanQuery. */\n  protected Query getLastTokenQuery(String token) throws IOException {\n    if (token.length() < minPrefixChars) {\n      // The leading ngram was directly indexed:\n      return new TermQuery(new Term(\"textgrams\", token));\n    }\n\n    return new PrefixQuery(new Term(TEXT_FIELD_NAME, token));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getLastTokenQuery(String).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getLastTokenQuery(String).mjava","sourceNew":"  /** This is called if the last token isn't ended\n   *  (e.g. user did not type a space after it).  Return an\n   *  appropriate Query clause to add to the BooleanQuery. */\n  protected Query getLastTokenQuery(String token) throws IOException {\n    if (token.length() < minPrefixChars) {\n      // The leading ngram was directly indexed:\n      return new TermQuery(new Term(TEXTGRAMS_FIELD_NAME, token));\n    }\n\n    return new PrefixQuery(new Term(TEXT_FIELD_NAME, token));\n  }\n\n","sourceOld":"  /** This is called if the last token isn't ended\n   *  (e.g. user did not type a space after it).  Return an\n   *  appropriate Query clause to add to the BooleanQuery. */\n  protected Query getLastTokenQuery(String token) throws IOException {\n    if (token.length() < minPrefixChars) {\n      // The leading ngram was directly indexed:\n      return new TermQuery(new Term(\"textgrams\", token));\n    }\n\n    return new PrefixQuery(new Term(TEXT_FIELD_NAME, token));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d31848ef598c839e93829db4cbab650e1b59430a":["33ba398fa7984fdcb45fd76b87504d5adf7ca5e3"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["33ba398fa7984fdcb45fd76b87504d5adf7ca5e3","182384b20c064aa16998ddebe9f36e649279c5a6"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33ba398fa7984fdcb45fd76b87504d5adf7ca5e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"182384b20c064aa16998ddebe9f36e649279c5a6":["33ba398fa7984fdcb45fd76b87504d5adf7ca5e3","d31848ef598c839e93829db4cbab650e1b59430a"],"33ba398fa7984fdcb45fd76b87504d5adf7ca5e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["182384b20c064aa16998ddebe9f36e649279c5a6"]},"commit2Childs":{"d31848ef598c839e93829db4cbab650e1b59430a":["182384b20c064aa16998ddebe9f36e649279c5a6"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"182384b20c064aa16998ddebe9f36e649279c5a6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","33ba398fa7984fdcb45fd76b87504d5adf7ca5e3"],"33ba398fa7984fdcb45fd76b87504d5adf7ca5e3":["d31848ef598c839e93829db4cbab650e1b59430a","3a7809d1d753b67f48b1a706e17034bf8b624ea3","37a0f60745e53927c4c876cfe5b5a58170f0646c","182384b20c064aa16998ddebe9f36e649279c5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}