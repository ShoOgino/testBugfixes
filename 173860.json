{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getReplicaInfo(Replica).mjava","commits":[{"id":"6b55cd711a129fb7fc4c3c4672d652149c9a4faa","date":1528813320,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getReplicaInfo(Replica).mjava","pathOld":"/dev/null","sourceNew":"  private ReplicaInfo getReplicaInfo(Replica r) {\n    List<ReplicaInfo> list = nodeReplicaMap.get(r.getNodeName());\n    if (list == null) {\n      return null;\n    }\n    for (ReplicaInfo ri : list) {\n      if (r.getName().equals(ri.getName())) {\n        return ri;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getReplicaInfo(Replica).mjava","pathOld":"/dev/null","sourceNew":"  private ReplicaInfo getReplicaInfo(Replica r) {\n    List<ReplicaInfo> list = nodeReplicaMap.get(r.getNodeName());\n    if (list == null) {\n      return null;\n    }\n    for (ReplicaInfo ri : list) {\n      if (r.getName().equals(ri.getName())) {\n        return ri;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getReplicaInfo(Replica).mjava","pathOld":"/dev/null","sourceNew":"  private ReplicaInfo getReplicaInfo(Replica r) {\n    List<ReplicaInfo> list = nodeReplicaMap.get(r.getNodeName());\n    if (list == null) {\n      return null;\n    }\n    for (ReplicaInfo ri : list) {\n      if (r.getName().equals(ri.getName())) {\n        return ri;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getReplicaInfo(Replica).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getReplicaInfo(Replica).mjava","sourceNew":"  private ReplicaInfo getReplicaInfo(Replica r) {\n    List<ReplicaInfo> list = nodeReplicaMap.get(r.getNodeName());\n    if (list == null) {\n      return null;\n    }\n    for (ReplicaInfo ri : list) {\n      if (r.getCoreName().equals(ri.getCore())) {\n        return ri;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private ReplicaInfo getReplicaInfo(Replica r) {\n    List<ReplicaInfo> list = nodeReplicaMap.get(r.getNodeName());\n    if (list == null) {\n      return null;\n    }\n    for (ReplicaInfo ri : list) {\n      if (r.getName().equals(ri.getName())) {\n        return ri;\n      }\n    }\n    return null;\n  }\n\n","bugFix":["6b55cd711a129fb7fc4c3c4672d652149c9a4faa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b87d86427dfa19b2ef36b66de83aa9655cea33","date":1552627668,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getReplicaInfo(Replica).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getReplicaInfo(Replica).mjava","sourceNew":"  private ReplicaInfo getReplicaInfo(Replica r) {\n    final List<ReplicaInfo> list = nodeReplicaMap.computeIfAbsent\n      (r.getNodeName(), Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    synchronized (list) {\n      for (ReplicaInfo ri : list) {\n        if (r.getCoreName().equals(ri.getCore())) {\n          return ri;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private ReplicaInfo getReplicaInfo(Replica r) {\n    List<ReplicaInfo> list = nodeReplicaMap.get(r.getNodeName());\n    if (list == null) {\n      return null;\n    }\n    for (ReplicaInfo ri : list) {\n      if (r.getCoreName().equals(ri.getCore())) {\n        return ri;\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getReplicaInfo(Replica).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getReplicaInfo(Replica).mjava","sourceNew":"  private ReplicaInfo getReplicaInfo(Replica r) {\n    final List<ReplicaInfo> list = nodeReplicaMap.computeIfAbsent\n      (r.getNodeName(), Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    synchronized (list) {\n      for (ReplicaInfo ri : list) {\n        if (r.getCoreName().equals(ri.getCore())) {\n          return ri;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private ReplicaInfo getReplicaInfo(Replica r) {\n    final List<ReplicaInfo> list = nodeReplicaMap.computeIfAbsent\n      (r.getNodeName(), Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    synchronized (list) {\n      for (ReplicaInfo ri : list) {\n        if (r.getCoreName().equals(ri.getCore())) {\n          return ri;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["6b55cd711a129fb7fc4c3c4672d652149c9a4faa"],"6b55cd711a129fb7fc4c3c4672d652149c9a4faa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6b55cd711a129fb7fc4c3c4672d652149c9a4faa"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6b55cd711a129fb7fc4c3c4672d652149c9a4faa"]},"commit2Childs":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"6b55cd711a129fb7fc4c3c4672d652149c9a4faa":["042b92cf48996255bedb0c3c4bf772d7e06e4dea","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b55cd711a129fb7fc4c3c4672d652149c9a4faa","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}