{"path":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#checkSpans(Spans,PayloadSpanCollector,int,int[]).mjava","commits":[{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#checkSpans(Spans,PayloadSpanCollector,int,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","sourceNew":"  private void checkSpans(Spans spans, PayloadSpanCollector collector, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if(VERBOSE)\n          System.out.println(\"\\nSpans Dump --\");\n        collector.reset();\n        spans.collect(collector);\n\n        Collection<byte[]> payload = collector.getPayloads();\n        if(VERBOSE) {\n          System.out.println(\"payloads for span:\" + payload.size());\n          for (final byte [] bytes : payload) {\n            System.out.println(\"doc:\" + spans.docID() + \" s:\" + spans.startPosition() + \" e:\" + spans.endPosition() + \" \"\n                + new String(bytes, StandardCharsets.UTF_8));\n          }\n        }\n        assertEquals(\"payload size\", numPayloads[cnt], payload.size());\n\n        cnt++;\n      }\n    }\n\n    assertEquals(\"expected numSpans\", numSpans, cnt);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if(VERBOSE)\n          System.out.println(\"\\nSpans Dump --\");\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          if(VERBOSE) {\n            System.out.println(\"payloads for span:\" + payload.size());\n            for (final byte [] bytes : payload) {\n              System.out.println(\"doc:\" + spans.docID() + \" s:\" + spans.startPosition() + \" e:\" + spans.endPosition() + \" \"\n                + new String(bytes, StandardCharsets.UTF_8));\n            }\n          }\n          assertEquals(\"payload size\", numPayloads[cnt], payload.size());\n        } else { // no payload available\n          assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\", numPayloads.length > 0 && numPayloads[cnt] > 0 );\n        }\n        cnt++;\n      }\n    }\n\n    assertEquals(\"expected numSpans\", numSpans, cnt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#checkSpans(Spans,PayloadSpanCollector,int,int[]).mjava","sourceNew":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n    VerifyingCollector collector = new VerifyingCollector();\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if(VERBOSE)\n          System.out.println(\"\\nSpans Dump --\");\n        collector.reset();\n        spans.collect(collector);\n        assertEquals(\"payload size\", numPayloads[cnt], collector.payloads.size());\n\n        cnt++;\n      }\n    }\n\n    assertEquals(\"expected numSpans\", numSpans, cnt);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, PayloadSpanCollector collector, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        if(VERBOSE)\n          System.out.println(\"\\nSpans Dump --\");\n        collector.reset();\n        spans.collect(collector);\n\n        Collection<byte[]> payload = collector.getPayloads();\n        if(VERBOSE) {\n          System.out.println(\"payloads for span:\" + payload.size());\n          for (final byte [] bytes : payload) {\n            System.out.println(\"doc:\" + spans.docID() + \" s:\" + spans.startPosition() + \" e:\" + spans.endPosition() + \" \"\n                + new String(bytes, StandardCharsets.UTF_8));\n          }\n        }\n        assertEquals(\"payload size\", numPayloads[cnt], payload.size());\n\n        cnt++;\n      }\n    }\n\n    assertEquals(\"expected numSpans\", numSpans, cnt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}