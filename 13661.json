{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","commits":[{"id":"9ee663728a95682ffb5dee37517ac9e863cd0820","date":1352758633,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,BytesRef).mjava","sourceNew":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int compressedLength = in.readVInt();\n      if (compressedLength > compressed.length) {\n        compressed = new byte[ArrayUtil.oversize(compressedLength, 1)];\n      }\n      in.readBytes(compressed, 0, compressedLength);\n\n      decompressor.reset();\n      decompressor.setInput(compressed, 0, compressedLength);\n\n      bytes.offset = bytes.length = 0;\n      while (true) {\n        final int count;\n        try {\n          final int remaining = bytes.bytes.length - bytes.length;\n          count = decompressor.inflate(bytes.bytes, bytes.length, remaining);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        bytes.length += count;\n        if (decompressor.finished()) {\n          break;\n        } else {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes);\n        }\n      }\n      if (bytes.length != originalLength) {\n        throw new CorruptIndexException(\"Lengths mismatch: \" + bytes.length + \" != \" + originalLength);\n      }\n      bytes.offset = offset;\n      bytes.length = length;\n    }\n\n","sourceOld":"    @Override\n    public void decompress(DataInput in, BytesRef bytes) throws IOException {\n      bytes.offset = bytes.length = 0;\n\n      final int compressedLength = in.readVInt();\n      if (compressedLength > compressed.length) {\n        compressed = ArrayUtil.grow(compressed, compressedLength);\n      }\n      in.readBytes(compressed, 0, compressedLength);\n\n      decompressor.reset();\n      decompressor.setInput(compressed, 0, compressedLength);\n      if (decompressor.needsInput()) {\n        return;\n      }\n\n      while (true) {\n        final int count;\n        try {\n          final int remaining = bytes.bytes.length - bytes.length;\n          count = decompressor.inflate(bytes.bytes, bytes.length, remaining);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        bytes.length += count;\n        if (decompressor.finished()) {\n          break;\n        } else {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateDecompressor#decompress(DataInput,int,int,int,BytesRef).mjava","sourceNew":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int compressedLength = in.readVInt();\n      if (compressedLength > compressed.length) {\n        compressed = new byte[ArrayUtil.oversize(compressedLength, 1)];\n      }\n      in.readBytes(compressed, 0, compressedLength);\n\n      decompressor.reset();\n      decompressor.setInput(compressed, 0, compressedLength);\n\n      bytes.offset = bytes.length = 0;\n      while (true) {\n        final int count;\n        try {\n          final int remaining = bytes.bytes.length - bytes.length;\n          count = decompressor.inflate(bytes.bytes, bytes.length, remaining);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        bytes.length += count;\n        if (decompressor.finished()) {\n          break;\n        } else {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes);\n        }\n      }\n      if (bytes.length != originalLength) {\n        throw new CorruptIndexException(\"Lengths mismatch: \" + bytes.length + \" != \" + originalLength);\n      }\n      bytes.offset = offset;\n      bytes.length = length;\n    }\n\n","sourceOld":"    @Override\n    public void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException {\n      assert offset + length <= originalLength;\n      if (length == 0) {\n        bytes.length = 0;\n        return;\n      }\n      final int compressedLength = in.readVInt();\n      if (compressedLength > compressed.length) {\n        compressed = new byte[ArrayUtil.oversize(compressedLength, 1)];\n      }\n      in.readBytes(compressed, 0, compressedLength);\n\n      decompressor.reset();\n      decompressor.setInput(compressed, 0, compressedLength);\n\n      bytes.offset = bytes.length = 0;\n      while (true) {\n        final int count;\n        try {\n          final int remaining = bytes.bytes.length - bytes.length;\n          count = decompressor.inflate(bytes.bytes, bytes.length, remaining);\n        } catch (DataFormatException e) {\n          throw new IOException(e);\n        }\n        bytes.length += count;\n        if (decompressor.finished()) {\n          break;\n        } else {\n          bytes.bytes = ArrayUtil.grow(bytes.bytes);\n        }\n      }\n      if (bytes.length != originalLength) {\n        throw new CorruptIndexException(\"Lengths mismatch: \" + bytes.length + \" != \" + originalLength);\n      }\n      bytes.offset = offset;\n      bytes.length = length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9ee663728a95682ffb5dee37517ac9e863cd0820":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["9ee663728a95682ffb5dee37517ac9e863cd0820"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"]},"commit2Childs":{"9ee663728a95682ffb5dee37517ac9e863cd0820":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ee663728a95682ffb5dee37517ac9e863cd0820"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}