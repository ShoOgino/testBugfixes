{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer#addShardLeadersWatch(String).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#addShardLeadersWatch(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a watch for node containing shard leaders for a collection\n   * @param collection\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  private void addShardLeadersWatch(final String collection) throws KeeperException,\n      InterruptedException {\n    \n    zkCmdExecutor.ensureExists(ZkStateReader.getShardLeadersPath(collection, null), zkClient);\n    \n    final List<String> leaderNodes = zkClient.getChildren(\n        ZkStateReader.getShardLeadersPath(collection, null), new Watcher() {\n          \n          @Override\n          public void process(WatchedEvent event) {\n            try {\n              List<String> leaderNodes = zkClient.getChildren(\n                  ZkStateReader.getShardLeadersPath(collection, null), this, true);\n              \n              processLeaderNodesChanged(collection, leaderNodes);\n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              SolrException.log(log, \"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n            }\n          }\n        }, true);\n    \n    processLeaderNodesChanged(collection, leaderNodes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#addShardLeadersWatch(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a watch for node containing shard leaders for a collection\n   * @param collection\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  private void addShardLeadersWatch(final String collection) throws KeeperException,\n      InterruptedException {\n    \n    zkCmdExecutor.ensureExists(ZkStateReader.getShardLeadersPath(collection, null), zkClient);\n    \n    final List<String> leaderNodes = zkClient.getChildren(\n        ZkStateReader.getShardLeadersPath(collection, null), new Watcher() {\n          \n          @Override\n          public void process(WatchedEvent event) {\n            try {\n              List<String> leaderNodes = zkClient.getChildren(\n                  ZkStateReader.getShardLeadersPath(collection, null), this, true);\n              \n              processLeaderNodesChanged(collection, leaderNodes);\n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              SolrException.log(log, \"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n            }\n          }\n        }, true);\n    \n    processLeaderNodesChanged(collection, leaderNodes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#addShardLeadersWatch(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a watch for node containing shard leaders for a collection\n   * @param collection\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  private void addShardLeadersWatch(final String collection) throws KeeperException,\n      InterruptedException {\n    \n    zkCmdExecutor.ensureExists(ZkStateReader.getShardLeadersPath(collection, null), zkClient);\n    \n    final List<String> leaderNodes = zkClient.getChildren(\n        ZkStateReader.getShardLeadersPath(collection, null), new Watcher() {\n          \n          @Override\n          public void process(WatchedEvent event) {\n            try {\n              List<String> leaderNodes = zkClient.getChildren(\n                  ZkStateReader.getShardLeadersPath(collection, null), this, true);\n              \n              processLeaderNodesChanged(collection, leaderNodes);\n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              SolrException.log(log, \"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n            }\n          }\n        }, true);\n    \n    processLeaderNodesChanged(collection, leaderNodes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":4,"author":"Sami Siren","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#addShardLeadersWatch(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Add a watch for node containing shard leaders for a collection\n   * @param collection\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  private void addShardLeadersWatch(final String collection) throws KeeperException,\n      InterruptedException {\n    \n    zkCmdExecutor.ensureExists(ZkStateReader.getShardLeadersPath(collection, null), zkClient);\n    \n    final List<String> leaderNodes = zkClient.getChildren(\n        ZkStateReader.getShardLeadersPath(collection, null), new Watcher() {\n          \n          @Override\n          public void process(WatchedEvent event) {\n            try {\n              List<String> leaderNodes = zkClient.getChildren(\n                  ZkStateReader.getShardLeadersPath(collection, null), this, true);\n              \n              processLeaderNodesChanged(collection, leaderNodes);\n            } catch (KeeperException e) {\n              if (e.code() == KeeperException.Code.SESSIONEXPIRED\n                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {\n                log.warn(\"ZooKeeper watch triggered, but Solr cannot talk to ZK\");\n                return;\n              }\n              SolrException.log(log, \"\", e);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n            } catch (InterruptedException e) {\n              // Restore the interrupted status\n              Thread.currentThread().interrupt();\n            }\n          }\n        }, true);\n    \n    processLeaderNodesChanged(collection, leaderNodes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a5093a9e893633cc091cf2f729d7863671c2b715"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a5093a9e893633cc091cf2f729d7863671c2b715":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a5093a9e893633cc091cf2f729d7863671c2b715","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}