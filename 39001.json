{"path":"src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","commits":[{"id":"1d641dec5113c43039c3579658bc1ca65d492f91","date":1043285328,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","pathOld":"/dev/null","sourceNew":"    public void testBoost()\n        throws Exception\n    {\n        StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(new String[]{\"on\"});\n        QueryParser qp = new QueryParser(\"field\", oneStopAnalyzer);\n        Query q = qp.parse(\"on^1.0\");\n        assertNotNull(q);\n        q = qp.parse(\"\\\"hello\\\"^2.0\");\n        assertNotNull(q);\n        assertEquals(q.getBoost(), (float)2.0, (float)0.5);\n        q = qp.parse(\"hello^2.0\");\n        assertNotNull(q);\n        assertEquals(q.getBoost(), (float)2.0, (float)0.5);\n        q = qp.parse(\"\\\"on\\\"^1.0\");\n        assertNotNull(q);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"105b8c63d8ae43de76f14005b62a5657a4b8d9ce","date":1064896862,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(new String[]{\"on\"});\n    QueryParser qp = new QueryParser(\"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n  }\n\n","sourceOld":"    public void testBoost()\n        throws Exception\n    {\n        StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(new String[]{\"on\"});\n        QueryParser qp = new QueryParser(\"field\", oneStopAnalyzer);\n        Query q = qp.parse(\"on^1.0\");\n        assertNotNull(q);\n        q = qp.parse(\"\\\"hello\\\"^2.0\");\n        assertNotNull(q);\n        assertEquals(q.getBoost(), (float)2.0, (float)0.5);\n        q = qp.parse(\"hello^2.0\");\n        assertNotNull(q);\n        assertEquals(q.getBoost(), (float)2.0, (float)0.5);\n        q = qp.parse(\"\\\"on\\\"^1.0\");\n        assertNotNull(q);\n    }\n\n","bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b2051f77a93054d780bf0d532a556ff786edc64e","date":1069844610,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(new String[]{\"on\"});\n    QueryParser qp = new QueryParser(\"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    q = QueryParser.parse(\"the^3\", \"field\", new StandardAnalyzer());\n    assertNotNull(q);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(new String[]{\"on\"});\n    QueryParser qp = new QueryParser(\"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"772506f9863c8378488eb0cce3d71462e047ab5b","date":1125141625,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(new String[]{\"on\"});\n    QueryParser qp = new QueryParser(\"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(\"field\", new StandardAnalyzer());\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(new String[]{\"on\"});\n    QueryParser qp = new QueryParser(\"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    q = QueryParser.parse(\"the^3\", \"field\", new StandardAnalyzer());\n    assertNotNull(q);\n  }\n\n","bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c881464041e282c06fdb34e91f883b83b8d97968","date":1247607562,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    Set stopWords = new HashSet(1);\n    stopWords.add(\"on\");\n    StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(stopWords);\n    QueryParser qp = new QueryParser(\"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(\"field\", new StandardAnalyzer());\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(new String[]{\"on\"});\n    QueryParser qp = new QueryParser(\"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(\"field\", new StandardAnalyzer());\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    Set stopWords = new HashSet(1);\n    stopWords.add(\"on\");\n    StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, stopWords);\n    QueryParser qp = new QueryParser(\"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(\"field\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    Set stopWords = new HashSet(1);\n    stopWords.add(\"on\");\n    StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(stopWords);\n    QueryParser qp = new QueryParser(\"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(\"field\", new StandardAnalyzer());\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    Set stopWords = new HashSet(1);\n    stopWords.add(\"on\");\n    StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, stopWords);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(Version.LUCENE_CURRENT, \"field\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    Set stopWords = new HashSet(1);\n    stopWords.add(\"on\");\n    StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, stopWords);\n    QueryParser qp = new QueryParser(\"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(\"field\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    Set<Object> stopWords = new HashSet<Object>(1);\n    stopWords.add(\"on\");\n    StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, stopWords);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(Version.LUCENE_CURRENT, \"field\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    Set stopWords = new HashSet(1);\n    stopWords.add(\"on\");\n    StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, stopWords);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(Version.LUCENE_CURRENT, \"field\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    Set<Object> stopWords = new HashSet<Object>(1);\n    stopWords.add(\"on\");\n    StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, stopWords);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    Set<Object> stopWords = new HashSet<Object>(1);\n    stopWords.add(\"on\");\n    StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, stopWords);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(Version.LUCENE_CURRENT, \"field\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    Set<Object> stopWords = new HashSet<Object>(1);\n    stopWords.add(\"on\");\n    StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, stopWords);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    Set<Object> stopWords = new HashSet<Object>(1);\n    stopWords.add(\"on\");\n    StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, stopWords);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"772506f9863c8378488eb0cce3d71462e047ab5b":["b2051f77a93054d780bf0d532a556ff786edc64e"],"b2051f77a93054d780bf0d532a556ff786edc64e":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce"],"1d641dec5113c43039c3579658bc1ca65d492f91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c881464041e282c06fdb34e91f883b83b8d97968":["772506f9863c8378488eb0cce3d71462e047ab5b"],"105b8c63d8ae43de76f14005b62a5657a4b8d9ce":["1d641dec5113c43039c3579658bc1ca65d492f91"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["c881464041e282c06fdb34e91f883b83b8d97968"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["ba1116b3450a9c1642c89445d131b37344055245"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"]},"commit2Childs":{"772506f9863c8378488eb0cce3d71462e047ab5b":["c881464041e282c06fdb34e91f883b83b8d97968"],"b2051f77a93054d780bf0d532a556ff786edc64e":["772506f9863c8378488eb0cce3d71462e047ab5b"],"1d641dec5113c43039c3579658bc1ca65d492f91":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d641dec5113c43039c3579658bc1ca65d492f91"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c881464041e282c06fdb34e91f883b83b8d97968":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"105b8c63d8ae43de76f14005b62a5657a4b8d9ce":["b2051f77a93054d780bf0d532a556ff786edc64e"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"ba1116b3450a9c1642c89445d131b37344055245":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}