{"path":"solr/solr-ref-guide/tools/CheckLinksAndAnchors#validateHtmlStructure(File,Element).mjava","commits":[{"id":"7bbe6dd460caa5613fcc7c7f752288b495f01503","date":1510699634,"type":0,"author":"Cassandra Targett","isMerge":false,"pathNew":"solr/solr-ref-guide/tools/CheckLinksAndAnchors#validateHtmlStructure(File,Element).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * returns the number of problems found with this file\n   */\n  private static int validateHtmlStructure(final File f, final Element mainContent) {\n    final String file = f.toURI().toString();\n    int problems = 0;\n\n    for (Element tab : mainContent.select(\".dynamic-tabs\")) {\n      // must be at least two tab-pane decendents of each dynamic-tabs\n      final Elements panes = tab.select(\".tab-pane\");\n      final int numPanes = panes.size();\n      if (numPanes < 2) {\n        System.err.println(file + \" contains a 'dynamic-tabs' with \"+ numPanes+\" 'tab-pane' decendents -- must be at least 2\");\n        problems++;\n      }\n\n      // must not have any decendents of a dynamic-tabs that are not part of tab-pane\n      //\n      // this is kind of tricky, because asciidoctor creates wrapper divs around the tab-panes\n      // so we can't make assumptions about direct children\n      //\n      final Elements elementsToIgnore = panes.parents();\n      for (Element pane : panes) {\n        elementsToIgnore.addAll(pane.select(\"*\"));\n      }\n      final Elements nonPaneDecendents = tab.select(\"*\");\n      nonPaneDecendents.removeAll(elementsToIgnore);\n      if (0 != nonPaneDecendents.size()) {\n        System.err.println(file + \" contains a 'dynamic-tabs' with content outside of a 'tab-pane': \" +\n                           shortStr(nonPaneDecendents.text()));\n        problems++;\n      }\n    }\n\n    // Now fetch all tab-panes, even if they aren't in a dynamic-tabs instance\n    // (that's a type of error we want to check for)\n    final Elements validPanes = mainContent.select(\".dynamic-tabs .tab-pane\");\n    final Elements allPanes = mainContent.select(\".tab-pane\");\n\n    for (Element pane : allPanes) {\n      // every tab-pane must have an id\n      if (pane.id().trim().isEmpty()) {\n        System.err.println(file + \" contains a 'tab-pane' that does not have a (unique) '#id'\");\n        problems++;\n      }\n      final String debug = \"'tab-pane\" + (pane.id().isEmpty() ? \"\" : \"#\" + pane.id()) + \"'\";\n\n      // no 'active' class on any tab-pane\n      if (pane.classNamesâ€‹().contains(\"active\")) {\n        System.err.println(file + \" contains \" + debug + \" with 'active' defined -- this must be removed\");\n        problems++;\n      }\n\n      // every tab-pane must be a decendent of a dynamic-tabs\n      if (! validPanes.contains(pane)) {\n        System.err.println(file + \" contains \" + debug + \" that is not a decendent of a 'dynamic-tabs'\");\n        problems++;\n      }\n\n      // every tab-pane must have exactly 1 tab-label which is <strong>\n      Elements labels = pane.select(\".tab-label\");\n      if (1 != labels.size()) {\n        System.err.println(file + \" contains \" + debug + \" with \" + labels.size() + \" 'tab-label' decendents -- must be exactly 1\");\n        problems++;\n      } else {\n        Element label = labels.first();\n        if (! label.tagName().equals(\"strong\")) {\n          System.err.println(file + \" contains \" + debug + \" with a 'tab-label' using <\"\n                             + labels.first().tagName() + \"> -- each 'tab-label' must be <strong> (example: '[.tab-label]*Text*')\");\n          problems++;\n        }\n        final String labelText = label.text().trim();\n        // if the tab-label is the empty string, asciidoctor should optimize it away -- but let's check for it anyway\n        if (labelText.isEmpty()) {\n          System.err.println(file + \" contains \" + debug + \" with a blank 'tab-label'\");\n          problems++;\n        }\n        // validate label must be first paragraph? first text content?\n        if (! pane.text().trim().startsWith(labelText)) {\n          System.err.println(file + \" contains \" + debug + \" with text before the 'tab-label' ('\" + labelText + \"')\");\n          problems++;\n        }\n\n      }\n\n    }\n\n    return problems;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4dde270045d1289c129b1a1257a79a4e9de9c6e3","date":1510716650,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/solr-ref-guide/tools/CheckLinksAndAnchors#validateHtmlStructure(File,Element).mjava","pathOld":"solr/solr-ref-guide/tools/CheckLinksAndAnchors#validateHtmlStructure(File,Element).mjava","sourceNew":"  /**\n   * returns the number of problems found with this file\n   */\n  private static int validateHtmlStructure(final File f, final Element mainContent) {\n    final String file = f.toURI().toString();\n    int problems = 0;\n\n    for (Element tab : mainContent.select(\".dynamic-tabs\")) {\n      // must be at least two tab-pane decendents of each dynamic-tabs\n      final Elements panes = tab.select(\".tab-pane\");\n      final int numPanes = panes.size();\n      if (numPanes < 2) {\n        System.err.println(file + \" contains a 'dynamic-tabs' with \"+ numPanes+\" 'tab-pane' decendents -- must be at least 2\");\n        problems++;\n      }\n\n      // must not have any decendents of a dynamic-tabs that are not part of tab-pane\n      //\n      // this is kind of tricky, because asciidoctor creates wrapper divs around the tab-panes\n      // so we can't make assumptions about direct children\n      //\n      final Elements elementsToIgnore = panes.parents();\n      for (Element pane : panes) {\n        elementsToIgnore.addAll(pane.select(\"*\"));\n      }\n      final Elements nonPaneDecendents = tab.select(\"*\");\n      nonPaneDecendents.removeAll(elementsToIgnore);\n      if (0 != nonPaneDecendents.size()) {\n        System.err.println(file + \" contains a 'dynamic-tabs' with content outside of a 'tab-pane': \" +\n                           shortStr(nonPaneDecendents.text()));\n        problems++;\n      }\n    }\n\n    // Now fetch all tab-panes, even if they aren't in a dynamic-tabs instance\n    // (that's a type of error we want to check for)\n    final Elements validPanes = mainContent.select(\".dynamic-tabs .tab-pane\");\n    final Elements allPanes = mainContent.select(\".tab-pane\");\n\n    for (Element pane : allPanes) {\n      // every tab-pane must have an id\n      if (pane.id().trim().isEmpty()) {\n        System.err.println(file + \" contains a 'tab-pane' that does not have a (unique) '#id'\");\n        problems++;\n      }\n      final String debug = \"'tab-pane\" + (pane.id().isEmpty() ? \"\" : \"#\" + pane.id()) + \"'\";\n\n      // no 'active' class on any tab-pane\n      if (pane.classNames().contains(\"active\")) {\n        System.err.println(file + \" contains \" + debug + \" with 'active' defined -- this must be removed\");\n        problems++;\n      }\n\n      // every tab-pane must be a decendent of a dynamic-tabs\n      if (! validPanes.contains(pane)) {\n        System.err.println(file + \" contains \" + debug + \" that is not a decendent of a 'dynamic-tabs'\");\n        problems++;\n      }\n\n      // every tab-pane must have exactly 1 tab-label which is <strong>\n      Elements labels = pane.select(\".tab-label\");\n      if (1 != labels.size()) {\n        System.err.println(file + \" contains \" + debug + \" with \" + labels.size() + \" 'tab-label' decendents -- must be exactly 1\");\n        problems++;\n      } else {\n        Element label = labels.first();\n        if (! label.tagName().equals(\"strong\")) {\n          System.err.println(file + \" contains \" + debug + \" with a 'tab-label' using <\"\n                             + labels.first().tagName() + \"> -- each 'tab-label' must be <strong> (example: '[.tab-label]*Text*')\");\n          problems++;\n        }\n        final String labelText = label.text().trim();\n        // if the tab-label is the empty string, asciidoctor should optimize it away -- but let's check for it anyway\n        if (labelText.isEmpty()) {\n          System.err.println(file + \" contains \" + debug + \" with a blank 'tab-label'\");\n          problems++;\n        }\n        // validate label must be first paragraph? first text content?\n        if (! pane.text().trim().startsWith(labelText)) {\n          System.err.println(file + \" contains \" + debug + \" with text before the 'tab-label' ('\" + labelText + \"')\");\n          problems++;\n        }\n\n      }\n\n    }\n\n    return problems;\n  }\n\n","sourceOld":"  /**\n   * returns the number of problems found with this file\n   */\n  private static int validateHtmlStructure(final File f, final Element mainContent) {\n    final String file = f.toURI().toString();\n    int problems = 0;\n\n    for (Element tab : mainContent.select(\".dynamic-tabs\")) {\n      // must be at least two tab-pane decendents of each dynamic-tabs\n      final Elements panes = tab.select(\".tab-pane\");\n      final int numPanes = panes.size();\n      if (numPanes < 2) {\n        System.err.println(file + \" contains a 'dynamic-tabs' with \"+ numPanes+\" 'tab-pane' decendents -- must be at least 2\");\n        problems++;\n      }\n\n      // must not have any decendents of a dynamic-tabs that are not part of tab-pane\n      //\n      // this is kind of tricky, because asciidoctor creates wrapper divs around the tab-panes\n      // so we can't make assumptions about direct children\n      //\n      final Elements elementsToIgnore = panes.parents();\n      for (Element pane : panes) {\n        elementsToIgnore.addAll(pane.select(\"*\"));\n      }\n      final Elements nonPaneDecendents = tab.select(\"*\");\n      nonPaneDecendents.removeAll(elementsToIgnore);\n      if (0 != nonPaneDecendents.size()) {\n        System.err.println(file + \" contains a 'dynamic-tabs' with content outside of a 'tab-pane': \" +\n                           shortStr(nonPaneDecendents.text()));\n        problems++;\n      }\n    }\n\n    // Now fetch all tab-panes, even if they aren't in a dynamic-tabs instance\n    // (that's a type of error we want to check for)\n    final Elements validPanes = mainContent.select(\".dynamic-tabs .tab-pane\");\n    final Elements allPanes = mainContent.select(\".tab-pane\");\n\n    for (Element pane : allPanes) {\n      // every tab-pane must have an id\n      if (pane.id().trim().isEmpty()) {\n        System.err.println(file + \" contains a 'tab-pane' that does not have a (unique) '#id'\");\n        problems++;\n      }\n      final String debug = \"'tab-pane\" + (pane.id().isEmpty() ? \"\" : \"#\" + pane.id()) + \"'\";\n\n      // no 'active' class on any tab-pane\n      if (pane.classNamesâ€‹().contains(\"active\")) {\n        System.err.println(file + \" contains \" + debug + \" with 'active' defined -- this must be removed\");\n        problems++;\n      }\n\n      // every tab-pane must be a decendent of a dynamic-tabs\n      if (! validPanes.contains(pane)) {\n        System.err.println(file + \" contains \" + debug + \" that is not a decendent of a 'dynamic-tabs'\");\n        problems++;\n      }\n\n      // every tab-pane must have exactly 1 tab-label which is <strong>\n      Elements labels = pane.select(\".tab-label\");\n      if (1 != labels.size()) {\n        System.err.println(file + \" contains \" + debug + \" with \" + labels.size() + \" 'tab-label' decendents -- must be exactly 1\");\n        problems++;\n      } else {\n        Element label = labels.first();\n        if (! label.tagName().equals(\"strong\")) {\n          System.err.println(file + \" contains \" + debug + \" with a 'tab-label' using <\"\n                             + labels.first().tagName() + \"> -- each 'tab-label' must be <strong> (example: '[.tab-label]*Text*')\");\n          problems++;\n        }\n        final String labelText = label.text().trim();\n        // if the tab-label is the empty string, asciidoctor should optimize it away -- but let's check for it anyway\n        if (labelText.isEmpty()) {\n          System.err.println(file + \" contains \" + debug + \" with a blank 'tab-label'\");\n          problems++;\n        }\n        // validate label must be first paragraph? first text content?\n        if (! pane.text().trim().startsWith(labelText)) {\n          System.err.println(file + \" contains \" + debug + \" with text before the 'tab-label' ('\" + labelText + \"')\");\n          problems++;\n        }\n\n      }\n\n    }\n\n    return problems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7bbe6dd460caa5613fcc7c7f752288b495f01503":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4dde270045d1289c129b1a1257a79a4e9de9c6e3":["7bbe6dd460caa5613fcc7c7f752288b495f01503"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4dde270045d1289c129b1a1257a79a4e9de9c6e3"]},"commit2Childs":{"7bbe6dd460caa5613fcc7c7f752288b495f01503":["4dde270045d1289c129b1a1257a79a4e9de9c6e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bbe6dd460caa5613fcc7c7f752288b495f01503"],"4dde270045d1289c129b1a1257a79a4e9de9c6e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}