{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer.NormMap#optimizeOrdinals().mjava","commits":[{"id":"0c3fae32338d82a0710e1756793faba13dcb598b","date":1414786590,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer.NormMap#optimizeOrdinals().mjava","pathOld":"/dev/null","sourceNew":"    // reassign ordinals so higher frequencies have lower ordinals\n    public void optimizeOrdinals() {\n      new InPlaceMergeSorter() {\n        @Override\n        protected int compare(int i, int j) {\n          return freqs[j] - freqs[i]; // sort descending\n        }\n        @Override\n        protected void swap(int i, int j) {\n          // swap ordinal i with ordinal j\n          ords[(int)values[i] + 128] = (short)j;\n          ords[(int)values[j] + 128] = (short)i;\n\n          int tmpFreq = freqs[i];\n          byte tmpValue = values[i];\n          freqs[i] = freqs[j];\n          values[i] = values[j];\n          freqs[j] = tmpFreq;\n          values[j] = tmpValue;\n        }\n      }.sort(0, size);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer.NormMap#optimizeOrdinals().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer.NormMap#optimizeOrdinals().mjava","sourceNew":"    // reassign ordinals so higher frequencies have lower ordinals\n    public void optimizeOrdinals() {\n      new InPlaceMergeSorter() {\n        @Override\n        protected int compare(int i, int j) {\n          return freqs[j] - freqs[i]; // sort descending\n        }\n        @Override\n        protected void swap(int i, int j) {\n          // swap ordinal i with ordinal j\n          ords[(int)values[i] + 128] = (short)j;\n          ords[(int)values[j] + 128] = (short)i;\n\n          int tmpFreq = freqs[i];\n          byte tmpValue = values[i];\n          freqs[i] = freqs[j];\n          values[i] = values[j];\n          freqs[j] = tmpFreq;\n          values[j] = tmpValue;\n        }\n      }.sort(0, size);\n    }\n\n","sourceOld":"    // reassign ordinals so higher frequencies have lower ordinals\n    public void optimizeOrdinals() {\n      new InPlaceMergeSorter() {\n        @Override\n        protected int compare(int i, int j) {\n          return freqs[j] - freqs[i]; // sort descending\n        }\n        @Override\n        protected void swap(int i, int j) {\n          // swap ordinal i with ordinal j\n          ords[(int)values[i] + 128] = (short)j;\n          ords[(int)values[j] + 128] = (short)i;\n\n          int tmpFreq = freqs[i];\n          byte tmpValue = values[i];\n          freqs[i] = freqs[j];\n          values[i] = values[j];\n          freqs[j] = tmpFreq;\n          values[j] = tmpValue;\n        }\n      }.sort(0, size);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["0c3fae32338d82a0710e1756793faba13dcb598b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0c3fae32338d82a0710e1756793faba13dcb598b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"]},"commit2Childs":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0c3fae32338d82a0710e1756793faba13dcb598b"],"0c3fae32338d82a0710e1756793faba13dcb598b":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}