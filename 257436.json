{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.ShardHealth#getShardState().mjava","commits":[{"id":"709714c6ee47950678dd2d2ef4e0473886909226","date":1407339661,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ShardHealth#getShardState().mjava","pathOld":"/dev/null","sourceNew":"    public ShardState getShardState() {\n      boolean healthy = true;\n      boolean hasLeader = false;\n      boolean atLeastOneActive = false;\n      for (ReplicaHealth replicaHealth : replicas) {\n        if (replicaHealth.isLeader) \n          hasLeader = true;\n        \n        if (!\"active\".equals(replicaHealth.status)) {\n          healthy = false;\n        } else {\n          atLeastOneActive = true;\n        }\n      }\n      \n      if (!hasLeader)\n        return ShardState.no_leader;\n      \n      return healthy ? ShardState.healthy : (atLeastOneActive ? ShardState.degraded : ShardState.down);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","date":1427866967,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ShardHealth#getShardState().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ShardHealth#getShardState().mjava","sourceNew":"    public ShardState getShardState() {\n      boolean healthy = true;\n      boolean hasLeader = false;\n      boolean atLeastOneActive = false;\n      for (ReplicaHealth replicaHealth : replicas) {\n        if (replicaHealth.isLeader) \n          hasLeader = true;\n        \n        if (!ZkStateReader.ACTIVE.equals(replicaHealth.status)) {\n          healthy = false;\n        } else {\n          atLeastOneActive = true;\n        }\n      }\n      \n      if (!hasLeader)\n        return ShardState.no_leader;\n      \n      return healthy ? ShardState.healthy : (atLeastOneActive ? ShardState.degraded : ShardState.down);\n    }\n\n","sourceOld":"    public ShardState getShardState() {\n      boolean healthy = true;\n      boolean hasLeader = false;\n      boolean atLeastOneActive = false;\n      for (ReplicaHealth replicaHealth : replicas) {\n        if (replicaHealth.isLeader) \n          hasLeader = true;\n        \n        if (!\"active\".equals(replicaHealth.status)) {\n          healthy = false;\n        } else {\n          atLeastOneActive = true;\n        }\n      }\n      \n      if (!hasLeader)\n        return ShardState.no_leader;\n      \n      return healthy ? ShardState.healthy : (atLeastOneActive ? ShardState.degraded : ShardState.down);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ShardHealth#getShardState().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ShardHealth#getShardState().mjava","sourceNew":"    public ShardState getShardState() {\n      boolean healthy = true;\n      boolean hasLeader = false;\n      boolean atLeastOneActive = false;\n      for (ReplicaHealth replicaHealth : replicas) {\n        if (replicaHealth.isLeader) \n          hasLeader = true;\n        \n        if (!ZkStateReader.ACTIVE.equals(replicaHealth.status)) {\n          healthy = false;\n        } else {\n          atLeastOneActive = true;\n        }\n      }\n      \n      if (!hasLeader)\n        return ShardState.no_leader;\n      \n      return healthy ? ShardState.healthy : (atLeastOneActive ? ShardState.degraded : ShardState.down);\n    }\n\n","sourceOld":"    public ShardState getShardState() {\n      boolean healthy = true;\n      boolean hasLeader = false;\n      boolean atLeastOneActive = false;\n      for (ReplicaHealth replicaHealth : replicas) {\n        if (replicaHealth.isLeader) \n          hasLeader = true;\n        \n        if (!\"active\".equals(replicaHealth.status)) {\n          healthy = false;\n        } else {\n          atLeastOneActive = true;\n        }\n      }\n      \n      if (!hasLeader)\n        return ShardState.no_leader;\n      \n      return healthy ? ShardState.healthy : (atLeastOneActive ? ShardState.degraded : ShardState.down);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ShardHealth#getShardState().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ShardHealth#getShardState().mjava","sourceNew":"    public ShardState getShardState() {\n      boolean healthy = true;\n      boolean hasLeader = false;\n      boolean atLeastOneActive = false;\n      for (ReplicaHealth replicaHealth : replicas) {\n        if (replicaHealth.isLeader) \n          hasLeader = true;\n        \n        if (!Replica.State.ACTIVE.toString().equals(replicaHealth.status)) {\n          healthy = false;\n        } else {\n          atLeastOneActive = true;\n        }\n      }\n      \n      if (!hasLeader)\n        return ShardState.no_leader;\n      \n      return healthy ? ShardState.healthy : (atLeastOneActive ? ShardState.degraded : ShardState.down);\n    }\n\n","sourceOld":"    public ShardState getShardState() {\n      boolean healthy = true;\n      boolean hasLeader = false;\n      boolean atLeastOneActive = false;\n      for (ReplicaHealth replicaHealth : replicas) {\n        if (replicaHealth.isLeader) \n          hasLeader = true;\n        \n        if (!ZkStateReader.ACTIVE.equals(replicaHealth.status)) {\n          healthy = false;\n        } else {\n          atLeastOneActive = true;\n        }\n      }\n      \n      if (!hasLeader)\n        return ShardState.no_leader;\n      \n      return healthy ? ShardState.healthy : (atLeastOneActive ? ShardState.degraded : ShardState.down);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ShardHealth#getShardState().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ShardHealth#getShardState().mjava","sourceNew":"    public ShardState getShardState() {\n      boolean healthy = true;\n      boolean hasLeader = false;\n      boolean atLeastOneActive = false;\n      for (ReplicaHealth replicaHealth : replicas) {\n        if (replicaHealth.isLeader) \n          hasLeader = true;\n        \n        if (!Replica.State.ACTIVE.toString().equals(replicaHealth.status)) {\n          healthy = false;\n        } else {\n          atLeastOneActive = true;\n        }\n      }\n      \n      if (!hasLeader)\n        return ShardState.no_leader;\n      \n      return healthy ? ShardState.healthy : (atLeastOneActive ? ShardState.degraded : ShardState.down);\n    }\n\n","sourceOld":"    public ShardState getShardState() {\n      boolean healthy = true;\n      boolean hasLeader = false;\n      boolean atLeastOneActive = false;\n      for (ReplicaHealth replicaHealth : replicas) {\n        if (replicaHealth.isLeader) \n          hasLeader = true;\n        \n        if (!Replica.State.ACTIVE.toString().equals(replicaHealth.status)) {\n          healthy = false;\n        } else {\n          atLeastOneActive = true;\n        }\n      }\n      \n      if (!hasLeader)\n        return ShardState.no_leader;\n      \n      return healthy ? ShardState.healthy : (atLeastOneActive ? ShardState.degraded : ShardState.down);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ShardHealth#getShardState().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ShardHealth#getShardState().mjava","sourceNew":"    public ShardState getShardState() {\n      boolean healthy = true;\n      boolean hasLeader = false;\n      boolean atLeastOneActive = false;\n      for (ReplicaHealth replicaHealth : replicas) {\n        if (replicaHealth.isLeader) \n          hasLeader = true;\n        \n        if (!Replica.State.ACTIVE.toString().equals(replicaHealth.status)) {\n          healthy = false;\n        } else {\n          atLeastOneActive = true;\n        }\n      }\n      \n      if (!hasLeader)\n        return ShardState.no_leader;\n      \n      return healthy ? ShardState.healthy : (atLeastOneActive ? ShardState.degraded : ShardState.down);\n    }\n\n","sourceOld":"    public ShardState getShardState() {\n      boolean healthy = true;\n      boolean hasLeader = false;\n      boolean atLeastOneActive = false;\n      for (ReplicaHealth replicaHealth : replicas) {\n        if (replicaHealth.isLeader) \n          hasLeader = true;\n        \n        if (!Replica.State.ACTIVE.toString().equals(replicaHealth.status)) {\n          healthy = false;\n        } else {\n          atLeastOneActive = true;\n        }\n      }\n      \n      if (!hasLeader)\n        return ShardState.no_leader;\n      \n      return healthy ? ShardState.healthy : (atLeastOneActive ? ShardState.degraded : ShardState.down);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ShardHealth#getShardState().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ShardHealth#getShardState().mjava","sourceNew":"    public ShardState getShardState() {\n      boolean healthy = true;\n      boolean hasLeader = false;\n      boolean atLeastOneActive = false;\n      for (ReplicaHealth replicaHealth : replicas) {\n        if (replicaHealth.isLeader) \n          hasLeader = true;\n        \n        if (!Replica.State.ACTIVE.toString().equals(replicaHealth.status)) {\n          healthy = false;\n        } else {\n          atLeastOneActive = true;\n        }\n      }\n      \n      if (!hasLeader)\n        return ShardState.no_leader;\n      \n      return healthy ? ShardState.healthy : (atLeastOneActive ? ShardState.degraded : ShardState.down);\n    }\n\n","sourceOld":"    public ShardState getShardState() {\n      boolean healthy = true;\n      boolean hasLeader = false;\n      boolean atLeastOneActive = false;\n      for (ReplicaHealth replicaHealth : replicas) {\n        if (replicaHealth.isLeader) \n          hasLeader = true;\n        \n        if (!Replica.State.ACTIVE.toString().equals(replicaHealth.status)) {\n          healthy = false;\n        } else {\n          atLeastOneActive = true;\n        }\n      }\n      \n      if (!hasLeader)\n        return ShardState.no_leader;\n      \n      return healthy ? ShardState.healthy : (atLeastOneActive ? ShardState.degraded : ShardState.down);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ShardHealth#getShardState().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ShardHealth#getShardState().mjava","sourceNew":"    public ShardState getShardState() {\n      boolean healthy = true;\n      boolean hasLeader = false;\n      boolean atLeastOneActive = false;\n      for (ReplicaHealth replicaHealth : replicas) {\n        if (replicaHealth.isLeader)\n          hasLeader = true;\n\n        if (!Replica.State.ACTIVE.toString().equals(replicaHealth.status)) {\n          healthy = false;\n        } else {\n          atLeastOneActive = true;\n        }\n      }\n\n      if (!hasLeader)\n        return ShardState.no_leader;\n\n      return healthy ? ShardState.healthy : (atLeastOneActive ? ShardState.degraded : ShardState.down);\n    }\n\n","sourceOld":"    public ShardState getShardState() {\n      boolean healthy = true;\n      boolean hasLeader = false;\n      boolean atLeastOneActive = false;\n      for (ReplicaHealth replicaHealth : replicas) {\n        if (replicaHealth.isLeader) \n          hasLeader = true;\n        \n        if (!Replica.State.ACTIVE.toString().equals(replicaHealth.status)) {\n          healthy = false;\n        } else {\n          atLeastOneActive = true;\n        }\n      }\n      \n      if (!hasLeader)\n        return ShardState.no_leader;\n      \n      return healthy ? ShardState.healthy : (atLeastOneActive ? ShardState.degraded : ShardState.down);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a219f1dcad1700e84807666bdbd2b573e8de7021","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["709714c6ee47950678dd2d2ef4e0473886909226"],"709714c6ee47950678dd2d2ef4e0473886909226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a219f1dcad1700e84807666bdbd2b573e8de7021","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"0c924d4069ef5a5bc479a493befe0121aada6896":["709714c6ee47950678dd2d2ef4e0473886909226","d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b79a5db147a1c6f95d1625ddbc3561ef56955225","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["a219f1dcad1700e84807666bdbd2b573e8de7021","0c924d4069ef5a5bc479a493befe0121aada6896"],"709714c6ee47950678dd2d2ef4e0473886909226":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","0c924d4069ef5a5bc479a493befe0121aada6896"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["709714c6ee47950678dd2d2ef4e0473886909226"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"0c924d4069ef5a5bc479a493befe0121aada6896":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","0c924d4069ef5a5bc479a493befe0121aada6896"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}