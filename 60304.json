{"path":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean).mjava","commits":[{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"  // called from parser\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws SyntaxError {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_' && parser != null) {\n      MagicFieldName magic = MagicFieldName.get(field);\n      if (null != magic) {\n        QParser nested = parser.subQuery(queryText, magic.subParser);\n        return nested.getQuery();\n      }\n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized()) {\n        return newFieldQuery(analyzer, field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(analyzer, field, queryText, quoted);\n  }\n\n","sourceOld":"  @Override\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws ParseException {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_' && parser != null) {\n      MagicFieldName magic = MagicFieldName.get(field);\n      if (null != magic) {\n        QParser nested = parser.subQuery(queryText, magic.subParser);\n        return nested.getQuery();\n      } \n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized()) {\n        return super.getFieldQuery(field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return super.getFieldQuery(field, queryText, quoted);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // called from parser\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws SyntaxError {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_' && parser != null) {\n      MagicFieldName magic = MagicFieldName.get(field);\n      if (null != magic) {\n        QParser nested = parser.subQuery(queryText, magic.subParser);\n        return nested.getQuery();\n      }\n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized()) {\n        return newFieldQuery(analyzer, field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(analyzer, field, queryText, quoted);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffced88b5e83e2ec0a42723404a647e766d96b8c","date":1361398349,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean).mjava","sourceNew":"  // called from parser\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws SyntaxError {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_' && parser != null) {\n      MagicFieldName magic = MagicFieldName.get(field);\n      if (null != magic) {\n        QParser nested = parser.subQuery(queryText, magic.subParser);\n        return nested.getQuery();\n      }\n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        return newFieldQuery(analyzer, field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(analyzer, field, queryText, quoted);\n  }\n\n","sourceOld":"  // called from parser\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws SyntaxError {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_' && parser != null) {\n      MagicFieldName magic = MagicFieldName.get(field);\n      if (null != magic) {\n        QParser nested = parser.subQuery(queryText, magic.subParser);\n        return nested.getQuery();\n      }\n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized()) {\n        return newFieldQuery(analyzer, field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(analyzer, field, queryText, quoted);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"759d2c8462a6935ee9b8e23c16cc0a096fb329b7","date":1363901479,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean).mjava","sourceNew":"  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws SyntaxError {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_' && parser != null) {\n      MagicFieldName magic = MagicFieldName.get(field);\n      if (null != magic) {\n        subQParser = parser.subQuery(queryText, magic.subParser);\n        return subQParser.getQuery();\n      }\n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        return newFieldQuery(analyzer, field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(analyzer, field, queryText, quoted);\n  }\n\n","sourceOld":"  // called from parser\n  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws SyntaxError {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_' && parser != null) {\n      MagicFieldName magic = MagicFieldName.get(field);\n      if (null != magic) {\n        QParser nested = parser.subQuery(queryText, magic.subParser);\n        return nested.getQuery();\n      }\n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        return newFieldQuery(analyzer, field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(analyzer, field, queryText, quoted);\n  }\n\n","bugFix":["3cdb67100dc016748799a77218aa409478372d79","e48ed0466fe2d4f8ba58a47caef1174d9e856d13","b53e1fdeb877dfb9c1aba24b343170ae7ffe7108"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1c1dd5dce93e4fa48898dabc7e012560acda425","date":1381334364,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean).mjava","sourceNew":"  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws SyntaxError {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_' && parser != null) {\n      MagicFieldName magic = MagicFieldName.get(field);\n      if (null != magic) {\n        subQParser = parser.subQuery(queryText, magic.subParser);\n        return subQParser.getQuery();\n      }\n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted);\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws SyntaxError {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_' && parser != null) {\n      MagicFieldName magic = MagicFieldName.get(field);\n      if (null != magic) {\n        subQParser = parser.subQuery(queryText, magic.subParser);\n        return subQParser.getQuery();\n      }\n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        return newFieldQuery(analyzer, field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(analyzer, field, queryText, quoted);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68c354ba50abc8ed5c5fe98901e61d68f93952bb","date":1479836000,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean).mjava","sourceNew":"  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws SyntaxError {\n    return getFieldQuery(field, queryText, quoted, false);\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws SyntaxError {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_' && parser != null) {\n      MagicFieldName magic = MagicFieldName.get(field);\n      if (null != magic) {\n        subQParser = parser.subQuery(queryText, magic.subParser);\n        return subQParser.getQuery();\n      }\n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getFieldQuery(String,String,boolean).mjava","sourceNew":"  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws SyntaxError {\n    return getFieldQuery(field, queryText, quoted, false);\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, String queryText, boolean quoted) throws SyntaxError {\n    checkNullField(field);\n    // intercept magic field name of \"_\" to use as a hook for our\n    // own functions.\n    if (field.charAt(0) == '_' && parser != null) {\n      MagicFieldName magic = MagicFieldName.get(field);\n      if (null != magic) {\n        subQParser = parser.subQuery(queryText, magic.subParser);\n        return subQParser.getQuery();\n      }\n    }\n    SchemaField sf = schema.getFieldOrNull(field);\n    if (sf != null) {\n      FieldType ft = sf.getType();\n      // delegate to type for everything except tokenized fields\n      if (ft.isTokenized() && sf.indexed()) {\n        return newFieldQuery(getAnalyzer(), field, queryText, quoted || (ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries()));\n      } else {\n        return sf.getType().getFieldQuery(parser, sf, queryText);\n      }\n    }\n\n    // default to a normal field query\n    return newFieldQuery(getAnalyzer(), field, queryText, quoted);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"727bb765ff2542275f6d31f67be18d7104bae148":["c1c1dd5dce93e4fa48898dabc7e012560acda425","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"c1c1dd5dce93e4fa48898dabc7e012560acda425":["759d2c8462a6935ee9b8e23c16cc0a096fb329b7"],"3cdb67100dc016748799a77218aa409478372d79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb67100dc016748799a77218aa409478372d79"],"ffced88b5e83e2ec0a42723404a647e766d96b8c":["3cdb67100dc016748799a77218aa409478372d79"],"759d2c8462a6935ee9b8e23c16cc0a096fb329b7":["ffced88b5e83e2ec0a42723404a647e766d96b8c"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["c1c1dd5dce93e4fa48898dabc7e012560acda425"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"]},"commit2Childs":{"727bb765ff2542275f6d31f67be18d7104bae148":[],"c1c1dd5dce93e4fa48898dabc7e012560acda425":["727bb765ff2542275f6d31f67be18d7104bae148","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","ffced88b5e83e2ec0a42723404a647e766d96b8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"ffced88b5e83e2ec0a42723404a647e766d96b8c":["759d2c8462a6935ee9b8e23c16cc0a096fb329b7"],"759d2c8462a6935ee9b8e23c16cc0a096fb329b7":["c1c1dd5dce93e4fa48898dabc7e012560acda425"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}