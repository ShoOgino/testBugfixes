{"path":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequest(ResponseBuilder,String[]).mjava","commits":[{"id":"27270b721a573cf4b774ce70b062078ef490388e","date":1329092012,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequest(ResponseBuilder,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private ShardRequest[] createRequest(ResponseBuilder rb, String[] shards)\n  {\n    ShardRequest sreq = new ShardRequest();\n    sreq.shards = shards;\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if (rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START, rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if (rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS, rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(\"group.distributed.second\", \"true\");\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n          String rawGroupValue = searchGroup.groupValue.utf8ToString();\n          FieldType fieldType = rb.req.getSearcher().getSchema().getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(rawGroupValue);\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(\"group.topgroups.\" + entry.getKey(), groupValue);\n      }\n    }\n\n    if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b83283b2e5ac002ef83f3f5972fa40fb0bc24ed3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a250ecd3e83b1c6595bcae0474f5b258df42021b","date":1330943490,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequest(ResponseBuilder,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequest(ResponseBuilder,String[]).mjava","sourceNew":"  private ShardRequest[] createRequest(ResponseBuilder rb, String[] shards)\n  {\n    ShardRequest sreq = new ShardRequest();\n    sreq.shards = shards;\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if (rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START, rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if (rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS, rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(\"group.distributed.second\", \"true\");\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n          String rawGroupValue = searchGroup.groupValue.utf8ToString();\n          FieldType fieldType = rb.req.getSearcher().getSchema().getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(rawGroupValue);\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(\"group.topgroups.\" + entry.getKey(), groupValue);\n      }\n    }\n\n    if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n    \n    int origTimeAllowed = sreq.params.getInt(CommonParams.TIME_ALLOWED, -1);\n    if (origTimeAllowed > 0) {\n      sreq.params.set(CommonParams.TIME_ALLOWED, Math.max(1,origTimeAllowed - rb.firstPhaseElapsedTime));\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","sourceOld":"  private ShardRequest[] createRequest(ResponseBuilder rb, String[] shards)\n  {\n    ShardRequest sreq = new ShardRequest();\n    sreq.shards = shards;\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if (rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START, rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if (rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS, rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(\"group.distributed.second\", \"true\");\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n          String rawGroupValue = searchGroup.groupValue.utf8ToString();\n          FieldType fieldType = rb.req.getSearcher().getSchema().getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(rawGroupValue);\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(\"group.topgroups.\" + entry.getKey(), groupValue);\n      }\n    }\n\n    if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequest(ResponseBuilder,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequest(ResponseBuilder,String[]).mjava","sourceNew":"  private ShardRequest[] createRequest(ResponseBuilder rb, String[] shards)\n  {\n    ShardRequest sreq = new ShardRequest();\n    sreq.shards = shards;\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if (rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START, rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if (rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS, rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(\"group.distributed.second\", \"true\");\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n          String rawGroupValue = searchGroup.groupValue.utf8ToString();\n          FieldType fieldType = rb.req.getSearcher().getSchema().getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(rawGroupValue);\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(\"group.topgroups.\" + entry.getKey(), groupValue);\n      }\n    }\n\n    if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n    \n    int origTimeAllowed = sreq.params.getInt(CommonParams.TIME_ALLOWED, -1);\n    if (origTimeAllowed > 0) {\n      sreq.params.set(CommonParams.TIME_ALLOWED, Math.max(1,origTimeAllowed - rb.firstPhaseElapsedTime));\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","sourceOld":"  private ShardRequest[] createRequest(ResponseBuilder rb, String[] shards)\n  {\n    ShardRequest sreq = new ShardRequest();\n    sreq.shards = shards;\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if (rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START, rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if (rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS, rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(\"group.distributed.second\", \"true\");\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n          String rawGroupValue = searchGroup.groupValue.utf8ToString();\n          FieldType fieldType = rb.req.getSearcher().getSchema().getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(rawGroupValue);\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(\"group.topgroups.\" + entry.getKey(), groupValue);\n      }\n    }\n\n    if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b83283b2e5ac002ef83f3f5972fa40fb0bc24ed3","date":1332285979,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequest(ResponseBuilder,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequest(ResponseBuilder,String[]).mjava","sourceNew":"  private ShardRequest[] createRequest(ResponseBuilder rb, String[] shards)\n  {\n    ShardRequest sreq = new ShardRequest();\n    sreq.shards = shards;\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if (rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START, rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if (rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS, rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_SECOND, \"true\");\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n          String rawGroupValue = searchGroup.groupValue.utf8ToString();\n          FieldType fieldType = rb.req.getSearcher().getSchema().getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(rawGroupValue);\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + entry.getKey(), groupValue);\n      }\n    }\n\n    if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n    \n    int origTimeAllowed = sreq.params.getInt(CommonParams.TIME_ALLOWED, -1);\n    if (origTimeAllowed > 0) {\n      sreq.params.set(CommonParams.TIME_ALLOWED, Math.max(1,origTimeAllowed - rb.firstPhaseElapsedTime));\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","sourceOld":"  private ShardRequest[] createRequest(ResponseBuilder rb, String[] shards)\n  {\n    ShardRequest sreq = new ShardRequest();\n    sreq.shards = shards;\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if (rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START, rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if (rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS, rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(\"group.distributed.second\", \"true\");\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n          String rawGroupValue = searchGroup.groupValue.utf8ToString();\n          FieldType fieldType = rb.req.getSearcher().getSchema().getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(rawGroupValue);\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(\"group.topgroups.\" + entry.getKey(), groupValue);\n      }\n    }\n\n    if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n    \n    int origTimeAllowed = sreq.params.getInt(CommonParams.TIME_ALLOWED, -1);\n    if (origTimeAllowed > 0) {\n      sreq.params.set(CommonParams.TIME_ALLOWED, Math.max(1,origTimeAllowed - rb.firstPhaseElapsedTime));\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","bugFix":["27270b721a573cf4b774ce70b062078ef490388e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequest(ResponseBuilder,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequest(ResponseBuilder,String[]).mjava","sourceNew":"  private ShardRequest[] createRequest(ResponseBuilder rb, String[] shards)\n  {\n    ShardRequest sreq = new ShardRequest();\n    sreq.shards = shards;\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if (rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START, rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if (rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS, rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_SECOND, \"true\");\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n          String rawGroupValue = searchGroup.groupValue.utf8ToString();\n          FieldType fieldType = schema.getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(rawGroupValue);\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + entry.getKey(), groupValue);\n      }\n    }\n\n    if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName());\n    }\n    \n    int origTimeAllowed = sreq.params.getInt(CommonParams.TIME_ALLOWED, -1);\n    if (origTimeAllowed > 0) {\n      sreq.params.set(CommonParams.TIME_ALLOWED, Math.max(1,origTimeAllowed - rb.firstPhaseElapsedTime));\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","sourceOld":"  private ShardRequest[] createRequest(ResponseBuilder rb, String[] shards)\n  {\n    ShardRequest sreq = new ShardRequest();\n    sreq.shards = shards;\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if (rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START, rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if (rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS, rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_SECOND, \"true\");\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n          String rawGroupValue = searchGroup.groupValue.utf8ToString();\n          FieldType fieldType = rb.req.getSearcher().getSchema().getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(rawGroupValue);\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + entry.getKey(), groupValue);\n      }\n    }\n\n    if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n    \n    int origTimeAllowed = sreq.params.getInt(CommonParams.TIME_ALLOWED, -1);\n    if (origTimeAllowed > 0) {\n      sreq.params.set(CommonParams.TIME_ALLOWED, Math.max(1,origTimeAllowed - rb.firstPhaseElapsedTime));\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasiński","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequest(ResponseBuilder,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequest(ResponseBuilder,String[]).mjava","sourceNew":"  private ShardRequest[] createRequest(ResponseBuilder rb, String[] shards)\n  {\n    ShardRequest sreq = new ShardRequest();\n    sreq.shards = shards;\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if (rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START, rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if (rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicitly\n      sreq.params.set(CommonParams.ROWS, rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_SECOND, \"true\");\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n          String rawGroupValue = searchGroup.groupValue.utf8ToString();\n          FieldType fieldType = schema.getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(rawGroupValue);\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + entry.getKey(), groupValue);\n      }\n    }\n\n    if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName());\n    }\n    \n    int origTimeAllowed = sreq.params.getInt(CommonParams.TIME_ALLOWED, -1);\n    if (origTimeAllowed > 0) {\n      sreq.params.set(CommonParams.TIME_ALLOWED, Math.max(1,origTimeAllowed - rb.firstPhaseElapsedTime));\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","sourceOld":"  private ShardRequest[] createRequest(ResponseBuilder rb, String[] shards)\n  {\n    ShardRequest sreq = new ShardRequest();\n    sreq.shards = shards;\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if (rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START, rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if (rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS, rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_SECOND, \"true\");\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n          String rawGroupValue = searchGroup.groupValue.utf8ToString();\n          FieldType fieldType = schema.getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(rawGroupValue);\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + entry.getKey(), groupValue);\n      }\n    }\n\n    if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName());\n    }\n    \n    int origTimeAllowed = sreq.params.getInt(CommonParams.TIME_ALLOWED, -1);\n    if (origTimeAllowed > 0) {\n      sreq.params.set(CommonParams.TIME_ALLOWED, Math.max(1,origTimeAllowed - rb.firstPhaseElapsedTime));\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequest(ResponseBuilder,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequest(ResponseBuilder,String[]).mjava","sourceNew":"  private ShardRequest[] createRequest(ResponseBuilder rb, String[] shards)\n  {\n    ShardRequest sreq = new ShardRequest();\n    sreq.shards = shards;\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if (rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START, rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if (rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicitly\n      sreq.params.set(CommonParams.ROWS, rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_SECOND, \"true\");\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n          String rawGroupValue = searchGroup.groupValue.utf8ToString();\n          FieldType fieldType = schema.getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(rawGroupValue);\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + entry.getKey(), groupValue);\n      }\n    }\n\n    if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName());\n    }\n    \n    int origTimeAllowed = sreq.params.getInt(CommonParams.TIME_ALLOWED, -1);\n    if (origTimeAllowed > 0) {\n      sreq.params.set(CommonParams.TIME_ALLOWED, Math.max(1,origTimeAllowed - rb.firstPhaseElapsedTime));\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","sourceOld":"  private ShardRequest[] createRequest(ResponseBuilder rb, String[] shards)\n  {\n    ShardRequest sreq = new ShardRequest();\n    sreq.shards = shards;\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if (rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START, rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if (rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS, rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_SECOND, \"true\");\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n          String rawGroupValue = searchGroup.groupValue.utf8ToString();\n          FieldType fieldType = schema.getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(rawGroupValue);\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + entry.getKey(), groupValue);\n      }\n    }\n\n    if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName());\n    }\n    \n    int origTimeAllowed = sreq.params.getInt(CommonParams.TIME_ALLOWED, -1);\n    if (origTimeAllowed > 0) {\n      sreq.params.set(CommonParams.TIME_ALLOWED, Math.max(1,origTimeAllowed - rb.firstPhaseElapsedTime));\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequest(ResponseBuilder,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequest(ResponseBuilder,String[]).mjava","sourceNew":"  private ShardRequest[] createRequest(ResponseBuilder rb, String[] shards)\n  {\n    ShardRequest sreq = new ShardRequest();\n    sreq.shards = shards;\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if (rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START, rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if (rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicitly\n      sreq.params.set(CommonParams.ROWS, rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_SECOND, \"true\");\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n          String rawGroupValue = searchGroup.groupValue.utf8ToString();\n          FieldType fieldType = schema.getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(rawGroupValue);\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + entry.getKey(), groupValue);\n      }\n    }\n\n    if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName());\n    }\n    \n    int origTimeAllowed = sreq.params.getInt(CommonParams.TIME_ALLOWED, -1);\n    if (origTimeAllowed > 0) {\n      sreq.params.set(CommonParams.TIME_ALLOWED, Math.max(1,origTimeAllowed - rb.firstPhaseElapsedTime));\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","sourceOld":"  private ShardRequest[] createRequest(ResponseBuilder rb, String[] shards)\n  {\n    ShardRequest sreq = new ShardRequest();\n    sreq.shards = shards;\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if (rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START, rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if (rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS, rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_SECOND, \"true\");\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n          String rawGroupValue = searchGroup.groupValue.utf8ToString();\n          FieldType fieldType = schema.getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(rawGroupValue);\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + entry.getKey(), groupValue);\n      }\n    }\n\n    if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName());\n    }\n    \n    int origTimeAllowed = sreq.params.getInt(CommonParams.TIME_ALLOWED, -1);\n    if (origTimeAllowed > 0) {\n      sreq.params.set(CommonParams.TIME_ALLOWED, Math.max(1,origTimeAllowed - rb.firstPhaseElapsedTime));\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ce489ffe249d0942d3dd9d8f0b46d3a5385ca01","date":1489998096,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequest(ResponseBuilder,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequest(ResponseBuilder,String[]).mjava","sourceNew":"  private ShardRequest[] createRequest(ResponseBuilder rb, String[] shards)\n  {\n    ShardRequest sreq = new ShardRequest();\n    sreq.shards = shards;\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if (rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START, rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if (rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicitly\n      sreq.params.set(CommonParams.ROWS, rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_SECOND, \"true\");\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n          FieldType fieldType = schema.getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(searchGroup.groupValue, new CharsRefBuilder()).toString();\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + entry.getKey(), groupValue);\n      }\n    }\n\n    if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName());\n    }\n    \n    int origTimeAllowed = sreq.params.getInt(CommonParams.TIME_ALLOWED, -1);\n    if (origTimeAllowed > 0) {\n      sreq.params.set(CommonParams.TIME_ALLOWED, Math.max(1,origTimeAllowed - rb.firstPhaseElapsedTime));\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","sourceOld":"  private ShardRequest[] createRequest(ResponseBuilder rb, String[] shards)\n  {\n    ShardRequest sreq = new ShardRequest();\n    sreq.shards = shards;\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if (rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START, rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if (rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicitly\n      sreq.params.set(CommonParams.ROWS, rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_SECOND, \"true\");\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n          String rawGroupValue = searchGroup.groupValue.utf8ToString();\n          FieldType fieldType = schema.getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(rawGroupValue);\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + entry.getKey(), groupValue);\n      }\n    }\n\n    if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName());\n    }\n    \n    int origTimeAllowed = sreq.params.getInt(CommonParams.TIME_ALLOWED, -1);\n    if (origTimeAllowed > 0) {\n      sreq.params.set(CommonParams.TIME_ALLOWED, Math.max(1,origTimeAllowed - rb.firstPhaseElapsedTime));\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06f29c9961912220543423aa6fc6f64362874871","date":1490280012,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequest(ResponseBuilder,String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory#createRequest(ResponseBuilder,String[]).mjava","sourceNew":"  private ShardRequest[] createRequest(ResponseBuilder rb, String[] shards)\n  {\n    ShardRequest sreq = new ShardRequest();\n    sreq.shards = shards;\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if (rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START, rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if (rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicitly\n      sreq.params.set(CommonParams.ROWS, rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_SECOND, \"true\");\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n          FieldType fieldType = schema.getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(searchGroup.groupValue, new CharsRefBuilder()).toString();\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + entry.getKey(), groupValue);\n      }\n    }\n\n    if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName());\n    }\n    \n    int origTimeAllowed = sreq.params.getInt(CommonParams.TIME_ALLOWED, -1);\n    if (origTimeAllowed > 0) {\n      sreq.params.set(CommonParams.TIME_ALLOWED, Math.max(1,origTimeAllowed - rb.firstPhaseElapsedTime));\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","sourceOld":"  private ShardRequest[] createRequest(ResponseBuilder rb, String[] shards)\n  {\n    ShardRequest sreq = new ShardRequest();\n    sreq.shards = shards;\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n\n    // If group.format=simple group.offset doesn't make sense\n    Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();\n    if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      sreq.params.remove(GroupParams.GROUP_OFFSET);\n    }\n\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if (rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START, rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    if (rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicitly\n      sreq.params.set(CommonParams.ROWS, rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_SECOND, \"true\");\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    for (Map.Entry<String, Collection<SearchGroup<BytesRef>>> entry : rb.mergedSearchGroups.entrySet()) {\n      for (SearchGroup<BytesRef> searchGroup : entry.getValue()) {\n        String groupValue;\n        if (searchGroup.groupValue != null) {\n          String rawGroupValue = searchGroup.groupValue.utf8ToString();\n          FieldType fieldType = schema.getField(entry.getKey()).getType();\n          groupValue = fieldType.indexedToReadable(rawGroupValue);\n        } else {\n          groupValue = GROUP_NULL_VALUE;\n        }\n        sreq.params.add(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + entry.getKey(), groupValue);\n      }\n    }\n\n    if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, schema.getUniqueKeyField().getName());\n    }\n    \n    int origTimeAllowed = sreq.params.getInt(CommonParams.TIME_ALLOWED, -1);\n    if (origTimeAllowed > 0) {\n      sreq.params.set(CommonParams.TIME_ALLOWED, Math.max(1,origTimeAllowed - rb.firstPhaseElapsedTime));\n    }\n\n    return new ShardRequest[] {sreq};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6ce489ffe249d0942d3dd9d8f0b46d3a5385ca01":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"27270b721a573cf4b774ce70b062078ef490388e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["27270b721a573cf4b774ce70b062078ef490388e","a250ecd3e83b1c6595bcae0474f5b258df42021b"],"b83283b2e5ac002ef83f3f5972fa40fb0bc24ed3":["a250ecd3e83b1c6595bcae0474f5b258df42021b"],"a250ecd3e83b1c6595bcae0474f5b258df42021b":["27270b721a573cf4b774ce70b062078ef490388e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06f29c9961912220543423aa6fc6f64362874871":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["08970e5b8411182a29412c177eff67ec1110095b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6ce489ffe249d0942d3dd9d8f0b46d3a5385ca01"],"08970e5b8411182a29412c177eff67ec1110095b":["b83283b2e5ac002ef83f3f5972fa40fb0bc24ed3"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["08970e5b8411182a29412c177eff67ec1110095b","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["08970e5b8411182a29412c177eff67ec1110095b"]},"commit2Childs":{"6ce489ffe249d0942d3dd9d8f0b46d3a5385ca01":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"27270b721a573cf4b774ce70b062078ef490388e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a250ecd3e83b1c6595bcae0474f5b258df42021b"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"b83283b2e5ac002ef83f3f5972fa40fb0bc24ed3":["08970e5b8411182a29412c177eff67ec1110095b"],"a250ecd3e83b1c6595bcae0474f5b258df42021b":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b83283b2e5ac002ef83f3f5972fa40fb0bc24ed3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27270b721a573cf4b774ce70b062078ef490388e"],"06f29c9961912220543423aa6fc6f64362874871":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["6ce489ffe249d0942d3dd9d8f0b46d3a5385ca01","06f29c9961912220543423aa6fc6f64362874871","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"08970e5b8411182a29412c177eff67ec1110095b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","06f29c9961912220543423aa6fc6f64362874871","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}