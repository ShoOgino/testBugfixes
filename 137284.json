{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.close();\n\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = IndexReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.shutdown();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.shutdown();\n\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.shutdown();\n\n        // check that the index reader gives the same numbers.\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.shutdown();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.close();\n\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2fb55c0777755badd3b46d8140f3d4301febed","date":1398881584,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.shutdown();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.shutdown();\n\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.shutdown();\n\n        // check that the index reader gives the same numbers.\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.shutdown();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.shutdown();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.shutdown();\n\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.shutdown();\n\n        // check that the index reader gives the same numbers.\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.shutdown();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.shutdown();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                        .setMergePolicy(NoMergePolicy.INSTANCE));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.shutdown();\n\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.shutdown();\n\n        // check that the index reader gives the same numbers.\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                        .setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.shutdown();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.shutdown();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.shutdown();\n\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.shutdown();\n\n        // check that the index reader gives the same numbers.\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.shutdown();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                        .setMergePolicy(NoMergePolicy.INSTANCE));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.close();\n\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                        .setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.shutdown();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                        .setMergePolicy(NoMergePolicy.INSTANCE));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.shutdown();\n\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.shutdown();\n\n        // check that the index reader gives the same numbers.\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                        .setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.shutdown();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                        .setMergePolicy(NoMergePolicy.INSTANCE));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.close();\n\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                        .setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        long savedWriteLockTimeout = IndexWriterConfig.getDefaultWriteLockTimeout();\n        try {\n          IndexWriterConfig.setDefaultWriteLockTimeout(2000);\n          assertEquals(2000, IndexWriterConfig.getDefaultWriteLockTimeout());\n          writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        } finally {\n          IndexWriterConfig.setDefaultWriteLockTimeout(savedWriteLockTimeout);\n        }\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                        .setMergePolicy(NoMergePolicy.INSTANCE));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.close();\n\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                        .setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"  public void testDocCount() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n    IndexReader reader = null;\n    int i;\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (i = 0; i < 100; i++) {\n      addDocWithIndex(writer,i);\n    }\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    // delete 40 documents\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setMergePolicy(NoMergePolicy.INSTANCE));\n    for (i = 0; i < 40; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n    }\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(60, reader.numDocs());\n    reader.close();\n\n    // merge the index down and check that the new doc count is correct\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    assertEquals(60, writer.numDocs());\n    writer.forceMerge(1);\n    assertEquals(60, writer.maxDoc());\n    assertEquals(60, writer.numDocs());\n    writer.close();\n\n    // check that the index reader gives the same numbers.\n    reader = DirectoryReader.open(dir);\n    assertEquals(60, reader.maxDoc());\n    assertEquals(60, reader.numDocs());\n    reader.close();\n\n    // make sure opening a new index for create over\n    // this existing one works correctly:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setOpenMode(OpenMode.CREATE));\n    assertEquals(0, writer.maxDoc());\n    assertEquals(0, writer.numDocs());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                        .setMergePolicy(NoMergePolicy.INSTANCE));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.close();\n\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                        .setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"  public void testDocCount() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n    IndexReader reader = null;\n    int i;\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (i = 0; i < 100; i++) {\n      addDocWithIndex(writer,i);\n    }\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    // delete 40 documents\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setMergePolicy(NoMergePolicy.INSTANCE));\n    for (i = 0; i < 40; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n    }\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(60, reader.numDocs());\n    reader.close();\n\n    // merge the index down and check that the new doc count is correct\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    assertEquals(60, writer.numDocs());\n    writer.forceMerge(1);\n    assertEquals(60, writer.maxDoc());\n    assertEquals(60, writer.numDocs());\n    writer.close();\n\n    // check that the index reader gives the same numbers.\n    reader = DirectoryReader.open(dir);\n    assertEquals(60, reader.maxDoc());\n    assertEquals(60, reader.numDocs());\n    reader.close();\n\n    // make sure opening a new index for create over\n    // this existing one works correctly:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setOpenMode(OpenMode.CREATE));\n    assertEquals(0, writer.maxDoc());\n    assertEquals(0, writer.numDocs());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                        .setMergePolicy(NoMergePolicy.INSTANCE));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.close();\n\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                        .setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"  public void testDocCount() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n    IndexReader reader = null;\n    int i;\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (i = 0; i < 100; i++) {\n      addDocWithIndex(writer,i);\n    }\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    // delete 40 documents\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setMergePolicy(NoMergePolicy.INSTANCE));\n    for (i = 0; i < 40; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n    }\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(60, reader.numDocs());\n    reader.close();\n\n    // merge the index down and check that the new doc count is correct\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    assertEquals(60, writer.numDocs());\n    writer.forceMerge(1);\n    assertEquals(60, writer.maxDoc());\n    assertEquals(60, writer.numDocs());\n    writer.close();\n\n    // check that the index reader gives the same numbers.\n    reader = DirectoryReader.open(dir);\n    assertEquals(60, reader.maxDoc());\n    assertEquals(60, reader.numDocs());\n    reader.close();\n\n    // make sure opening a new index for create over\n    // this existing one works correctly:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setOpenMode(OpenMode.CREATE));\n    assertEquals(0, writer.maxDoc());\n    assertEquals(0, writer.numDocs());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                        .setMergePolicy(NoMergePolicy.INSTANCE));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.close();\n\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                        .setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"  public void testDocCount() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n    IndexReader reader = null;\n    int i;\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (i = 0; i < 100; i++) {\n      addDocWithIndex(writer,i);\n    }\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    // delete 40 documents\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setMergePolicy(NoMergePolicy.INSTANCE));\n    for (i = 0; i < 40; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n    }\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(60, reader.numDocs());\n    reader.close();\n\n    // merge the index down and check that the new doc count is correct\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    assertEquals(60, writer.numDocs());\n    writer.forceMerge(1);\n    assertEquals(60, writer.maxDoc());\n    assertEquals(60, writer.numDocs());\n    writer.close();\n\n    // check that the index reader gives the same numbers.\n    reader = DirectoryReader.open(dir);\n    assertEquals(60, reader.maxDoc());\n    assertEquals(60, reader.numDocs());\n    reader.close();\n\n    // make sure opening a new index for create over\n    // this existing one works correctly:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setOpenMode(OpenMode.CREATE));\n    assertEquals(0, writer.maxDoc());\n    assertEquals(0, writer.numDocs());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"    public void testDocCount() throws IOException {\n        Directory dir = newDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        int i;\n\n        writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n        // add 100 documents\n        for (i = 0; i < 100; i++) {\n            addDocWithIndex(writer,i);\n        }\n        assertEquals(100, writer.maxDoc());\n        writer.close();\n\n        // delete 40 documents\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                        .setMergePolicy(NoMergePolicy.INSTANCE));\n        for (i = 0; i < 40; i++) {\n            writer.deleteDocuments(new Term(\"id\", \"\"+i));\n        }\n        writer.close();\n\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // merge the index down and check that the new doc count is correct\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n        assertEquals(60, writer.numDocs());\n        writer.forceMerge(1);\n        assertEquals(60, writer.maxDoc());\n        assertEquals(60, writer.numDocs());\n        writer.close();\n\n        // check that the index reader gives the same numbers.\n        reader = DirectoryReader.open(dir);\n        assertEquals(60, reader.maxDoc());\n        assertEquals(60, reader.numDocs());\n        reader.close();\n\n        // make sure opening a new index for create over\n        // this existing one works correctly:\n        writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                        .setOpenMode(OpenMode.CREATE));\n        assertEquals(0, writer.maxDoc());\n        assertEquals(0, writer.numDocs());\n        writer.close();\n        dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testDocCount().mjava","sourceNew":"  public void testDocCount() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n    IndexReader reader = null;\n    int i;\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (i = 0; i < 100; i++) {\n      addDocWithIndex(writer,i);\n      if (random().nextBoolean()) {\n        writer.commit();\n      }\n    }\n    IndexWriter.DocStats docStats = writer.getDocStats();\n    assertEquals(100, docStats.maxDoc);\n    assertEquals(100, docStats.numDocs);\n    writer.close();\n\n    // delete 40 documents\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setMergePolicy(new FilterMergePolicy(NoMergePolicy.INSTANCE) {\n                               @Override\n                               public boolean keepFullyDeletedSegment(IOSupplier<CodecReader>\n                                                                          readerIOSupplier) {\n                                 return true;\n                               }\n                             }));\n\n    for (i = 0; i < 40; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      if (random().nextBoolean()) {\n        writer.commit();\n      }\n    }\n    writer.flush();\n    docStats = writer.getDocStats();\n    assertEquals(100, docStats.maxDoc);\n    assertEquals(60, docStats.numDocs);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(60, reader.numDocs());\n    reader.close();\n\n    // merge the index down and check that the new doc count is correct\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    assertEquals(60, writer.getDocStats().numDocs);\n    writer.forceMerge(1);\n    docStats = writer.getDocStats();\n    assertEquals(60, docStats.maxDoc);\n    assertEquals(60, docStats.numDocs);\n    writer.close();\n\n    // check that the index reader gives the same numbers.\n    reader = DirectoryReader.open(dir);\n    assertEquals(60, reader.maxDoc());\n    assertEquals(60, reader.numDocs());\n    reader.close();\n\n    // make sure opening a new index for create over\n    // this existing one works correctly:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setOpenMode(OpenMode.CREATE));\n    docStats = writer.getDocStats();\n    assertEquals(0, docStats.maxDoc);\n    assertEquals(0, docStats.numDocs);\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocCount() throws IOException {\n    Directory dir = newDirectory();\n\n    IndexWriter writer = null;\n    IndexReader reader = null;\n    int i;\n\n    writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    // add 100 documents\n    for (i = 0; i < 100; i++) {\n      addDocWithIndex(writer,i);\n    }\n    assertEquals(100, writer.maxDoc());\n    writer.close();\n\n    // delete 40 documents\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setMergePolicy(NoMergePolicy.INSTANCE));\n    for (i = 0; i < 40; i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n    }\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    assertEquals(60, reader.numDocs());\n    reader.close();\n\n    // merge the index down and check that the new doc count is correct\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    assertEquals(60, writer.numDocs());\n    writer.forceMerge(1);\n    assertEquals(60, writer.maxDoc());\n    assertEquals(60, writer.numDocs());\n    writer.close();\n\n    // check that the index reader gives the same numbers.\n    reader = DirectoryReader.open(dir);\n    assertEquals(60, reader.maxDoc());\n    assertEquals(60, reader.numDocs());\n    reader.close();\n\n    // make sure opening a new index for create over\n    // this existing one works correctly:\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                             .setOpenMode(OpenMode.CREATE));\n    assertEquals(0, writer.maxDoc());\n    assertEquals(0, writer.numDocs());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["618635065f043788c9e034f96ca5cd5cea1b4592","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["618635065f043788c9e034f96ca5cd5cea1b4592","b470f36a9372c97283360b1304eacbde22df6c0d"],"618635065f043788c9e034f96ca5cd5cea1b4592":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["5a207d19eac354d649c3f0e2cce070017c78125e"],"b470f36a9372c97283360b1304eacbde22df6c0d":["618635065f043788c9e034f96ca5cd5cea1b4592","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["618635065f043788c9e034f96ca5cd5cea1b4592"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["feb4029567b43f074ed7b6eb8fb126d355075dfd"]},"commit2Childs":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"618635065f043788c9e034f96ca5cd5cea1b4592":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["618635065f043788c9e034f96ca5cd5cea1b4592"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}