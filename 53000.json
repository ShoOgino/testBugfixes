{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#createRandomPoints(int,int,int).mjava","commits":[{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#createRandomPoints(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private static Point[] createRandomPoints(int numDims, int bytesPerDim, int maxDoc) {\n    final int packedBytesLength = numDims * bytesPerDim;\n    final int numPoints = TestUtil.nextInt(random(), 1, 100000);\n    Point[] points = new Point[numPoints];\n    for (int i = 0; i < numPoints; ++i) {\n       byte[] value = new byte[packedBytesLength];\n       random().nextBytes(value);\n       points[i] = new Point(value, random().nextInt(maxDoc));\n    }\n    return points;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#createRandomPoints(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private static Point[] createRandomPoints(int numDims, int bytesPerDim, int maxDoc) {\n    final int packedBytesLength = numDims * bytesPerDim;\n    final int numPoints = TestUtil.nextInt(random(), 1, 100000);\n    Point[] points = new Point[numPoints];\n    for (int i = 0; i < numPoints; ++i) {\n       byte[] value = new byte[packedBytesLength];\n       random().nextBytes(value);\n       points[i] = new Point(value, random().nextInt(maxDoc));\n    }\n    return points;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#createRandomPoints(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private static Point[] createRandomPoints(int numDims, int bytesPerDim, int maxDoc) {\n    final int packedBytesLength = numDims * bytesPerDim;\n    final int numPoints = TestUtil.nextInt(random(), 1, 100000);\n    Point[] points = new Point[numPoints];\n    for (int i = 0; i < numPoints; ++i) {\n       byte[] value = new byte[packedBytesLength];\n       random().nextBytes(value);\n       points[i] = new Point(value, random().nextInt(maxDoc));\n    }\n    return points;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f06758793500ca773d0df1037290e6e404fb33","date":1562230223,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestMutablePointsReaderUtils#createRandomPoints(int,int,int).mjava","sourceNew":null,"sourceOld":"  private static Point[] createRandomPoints(int numDims, int bytesPerDim, int maxDoc) {\n    final int packedBytesLength = numDims * bytesPerDim;\n    final int numPoints = TestUtil.nextInt(random(), 1, 100000);\n    Point[] points = new Point[numPoints];\n    for (int i = 0; i < numPoints; ++i) {\n       byte[] value = new byte[packedBytesLength];\n       random().nextBytes(value);\n       points[i] = new Point(value, random().nextInt(maxDoc));\n    }\n    return points;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7f06758793500ca773d0df1037290e6e404fb33":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7f06758793500ca773d0df1037290e6e404fb33"]},"commit2Childs":{"c7f06758793500ca773d0df1037290e6e404fb33":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["c7f06758793500ca773d0df1037290e6e404fb33","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}