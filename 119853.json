{"path":"solr/core/src/java/org/apache/solr/handler/component/CloudReplicaSource#withClusterState(Builder,SolrParams).mjava","commits":[{"id":"cc28b46d62a8b91c8e90f9345612c4050eab98d4","date":1581344825,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/CloudReplicaSource#withClusterState(Builder,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  private void withClusterState(Builder builder, SolrParams params) {\n    ClusterState clusterState = builder.zkStateReader.getClusterState();\n    String shardKeys = params.get(ShardParams._ROUTE_);\n\n    // This will be the complete list of slices we need to query for this request.\n    Map<String, Slice> sliceMap = new HashMap<>();\n\n    // we need to find out what collections this request is for.\n\n    // A comma-separated list of specified collections.\n    // Eg: \"collection1,collection2,collection3\"\n    String collections = params.get(\"collection\");\n    if (collections != null) {\n      // If there were one or more collections specified in the query, split\n      // each parameter and store as a separate member of a List.\n      List<String> collectionList = StrUtils.splitSmart(collections, \",\",\n          true);\n      // In turn, retrieve the slices that cover each collection from the\n      // cloud state and add them to the Map 'slices'.\n      for (String collectionName : collectionList) {\n        // The original code produced <collection-name>_<shard-name> when the collections\n        // parameter was specified (see ClientUtils.appendMap)\n        // Is this necessary if ony one collection is specified?\n        // i.e. should we change multiCollection to collectionList.size() > 1?\n        addSlices(sliceMap, clusterState, params, collectionName, shardKeys, true);\n      }\n    } else {\n      // just this collection\n      addSlices(sliceMap, clusterState, params, builder.collection, shardKeys, false);\n    }\n\n    this.slices = sliceMap.keySet().toArray(new String[sliceMap.size()]);\n    this.replicas = new List[slices.length];\n    for (int i = 0; i < slices.length; i++) {\n      String sliceName = slices[i];\n      replicas[i] = findReplicas(builder, null, clusterState, sliceMap.get(sliceName));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/CloudReplicaSource#withClusterState(Builder,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/CloudReplicaSource#withClusterState(Builder,SolrParams).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void withClusterState(Builder builder, SolrParams params) {\n    ClusterState clusterState = builder.zkStateReader.getClusterState();\n    String shardKeys = params.get(ShardParams._ROUTE_);\n\n    // This will be the complete list of slices we need to query for this request.\n    Map<String, Slice> sliceMap = new HashMap<>();\n\n    // we need to find out what collections this request is for.\n\n    // A comma-separated list of specified collections.\n    // Eg: \"collection1,collection2,collection3\"\n    String collections = params.get(\"collection\");\n    if (collections != null) {\n      // If there were one or more collections specified in the query, split\n      // each parameter and store as a separate member of a List.\n      List<String> collectionList = StrUtils.splitSmart(collections, \",\",\n          true);\n      // In turn, retrieve the slices that cover each collection from the\n      // cloud state and add them to the Map 'slices'.\n      for (String collectionName : collectionList) {\n        // The original code produced <collection-name>_<shard-name> when the collections\n        // parameter was specified (see ClientUtils.appendMap)\n        // Is this necessary if ony one collection is specified?\n        // i.e. should we change multiCollection to collectionList.size() > 1?\n        addSlices(sliceMap, clusterState, params, collectionName, shardKeys, true);\n      }\n    } else {\n      // just this collection\n      addSlices(sliceMap, clusterState, params, builder.collection, shardKeys, false);\n    }\n\n    this.slices = sliceMap.keySet().toArray(new String[sliceMap.size()]);\n    this.replicas = new List[slices.length];\n    for (int i = 0; i < slices.length; i++) {\n      String sliceName = slices[i];\n      replicas[i] = findReplicas(builder, null, clusterState, sliceMap.get(sliceName));\n    }\n  }\n\n","sourceOld":"  private void withClusterState(Builder builder, SolrParams params) {\n    ClusterState clusterState = builder.zkStateReader.getClusterState();\n    String shardKeys = params.get(ShardParams._ROUTE_);\n\n    // This will be the complete list of slices we need to query for this request.\n    Map<String, Slice> sliceMap = new HashMap<>();\n\n    // we need to find out what collections this request is for.\n\n    // A comma-separated list of specified collections.\n    // Eg: \"collection1,collection2,collection3\"\n    String collections = params.get(\"collection\");\n    if (collections != null) {\n      // If there were one or more collections specified in the query, split\n      // each parameter and store as a separate member of a List.\n      List<String> collectionList = StrUtils.splitSmart(collections, \",\",\n          true);\n      // In turn, retrieve the slices that cover each collection from the\n      // cloud state and add them to the Map 'slices'.\n      for (String collectionName : collectionList) {\n        // The original code produced <collection-name>_<shard-name> when the collections\n        // parameter was specified (see ClientUtils.appendMap)\n        // Is this necessary if ony one collection is specified?\n        // i.e. should we change multiCollection to collectionList.size() > 1?\n        addSlices(sliceMap, clusterState, params, collectionName, shardKeys, true);\n      }\n    } else {\n      // just this collection\n      addSlices(sliceMap, clusterState, params, builder.collection, shardKeys, false);\n    }\n\n    this.slices = sliceMap.keySet().toArray(new String[sliceMap.size()]);\n    this.replicas = new List[slices.length];\n    for (int i = 0; i < slices.length; i++) {\n      String sliceName = slices[i];\n      replicas[i] = findReplicas(builder, null, clusterState, sliceMap.get(sliceName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc28b46d62a8b91c8e90f9345612c4050eab98d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cc28b46d62a8b91c8e90f9345612c4050eab98d4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc28b46d62a8b91c8e90f9345612c4050eab98d4"],"cc28b46d62a8b91c8e90f9345612c4050eab98d4":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}