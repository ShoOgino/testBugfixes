{"path":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#doTestRandomTopDocs(int,double...).mjava","commits":[{"id":"5b559eeae2a2a767f75666f9b692659cfe1bf631","date":1533724482,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#doTestRandomTopDocs(int,double...).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestRandomTopDocs(int numFields, double... freqs) throws IOException {\n    assert numFields == freqs.length;\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(new StandardAnalyzer());\n    IndexWriter w = new IndexWriter(dir, config);\n\n    int numDocs = atLeast(1000); // make sure some terms have skip data\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j = 0; j < numFields; j++) {\n        StringBuilder builder = new StringBuilder();\n        int numAs = random().nextDouble() < freqs[j] ? 0 : 1 + random().nextInt(5);\n        for (int k = 0; k < numAs; k++) {\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n          builder.append('a');\n        }\n        if (random().nextBoolean()) {\n          doc.add(new StringField(\"field\", \"c\", Field.Store.NO));\n        }\n        int numOthers = random().nextBoolean() ? 0 : 1 + random().nextInt(5);\n        for (int k = 0; k < numOthers; k++) {\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n          builder.append(Integer.toString(random().nextInt()));\n        }\n        doc.add(new TextField(Integer.toString(j), new StringReader(builder.toString())));\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < 4; i++) {\n      List<Query> clauses = new ArrayList<>();\n      for (int j = 0; j < numFields; j++) {\n        if (i % 2 == 1) {\n          clauses.add(tq(Integer.toString(j), \"a\"));\n        } else {\n          float boost = random().nextBoolean() ? 0 : random().nextFloat();\n          if (boost > 0) {\n            clauses.add(tq(Integer.toString(j), \"a\", boost));\n          } else {\n            clauses.add(tq(Integer.toString(j), \"a\"));\n          }\n        }\n      }\n      float tieBreaker = random().nextFloat();\n      Query query = new DisjunctionMaxQuery(clauses, tieBreaker);\n      CheckHits.checkTopScores(random(), query, searcher);\n\n      query = new BooleanQuery.Builder()\n          .add(new DisjunctionMaxQuery(clauses, tieBreaker), BooleanClause.Occur.MUST)\n          .add(tq(\"field\", \"c\"), BooleanClause.Occur.FILTER)\n          .build();\n      CheckHits.checkTopScores(random(), query, searcher);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#doTestRandomTopDocs(int,double...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#doTestRandomTopDocs(int,double...).mjava","sourceNew":"  private void doTestRandomTopDocs(int numFields, double... freqs) throws IOException {\n    assert numFields == freqs.length;\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(new StandardAnalyzer());\n    IndexWriter w = new IndexWriter(dir, config);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(1000) : atLeast(100); // at night, make sure some terms have skip data\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j = 0; j < numFields; j++) {\n        StringBuilder builder = new StringBuilder();\n        int numAs = random().nextDouble() < freqs[j] ? 0 : 1 + random().nextInt(5);\n        for (int k = 0; k < numAs; k++) {\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n          builder.append('a');\n        }\n        if (random().nextBoolean()) {\n          doc.add(new StringField(\"field\", \"c\", Field.Store.NO));\n        }\n        int numOthers = random().nextBoolean() ? 0 : 1 + random().nextInt(5);\n        for (int k = 0; k < numOthers; k++) {\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n          builder.append(Integer.toString(random().nextInt()));\n        }\n        doc.add(new TextField(Integer.toString(j), new StringReader(builder.toString())));\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < 4; i++) {\n      List<Query> clauses = new ArrayList<>();\n      for (int j = 0; j < numFields; j++) {\n        if (i % 2 == 1) {\n          clauses.add(tq(Integer.toString(j), \"a\"));\n        } else {\n          float boost = random().nextBoolean() ? 0 : random().nextFloat();\n          if (boost > 0) {\n            clauses.add(tq(Integer.toString(j), \"a\", boost));\n          } else {\n            clauses.add(tq(Integer.toString(j), \"a\"));\n          }\n        }\n      }\n      float tieBreaker = random().nextFloat();\n      Query query = new DisjunctionMaxQuery(clauses, tieBreaker);\n      CheckHits.checkTopScores(random(), query, searcher);\n\n      query = new BooleanQuery.Builder()\n          .add(new DisjunctionMaxQuery(clauses, tieBreaker), BooleanClause.Occur.MUST)\n          .add(tq(\"field\", \"c\"), BooleanClause.Occur.FILTER)\n          .build();\n      CheckHits.checkTopScores(random(), query, searcher);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestRandomTopDocs(int numFields, double... freqs) throws IOException {\n    assert numFields == freqs.length;\n    Directory dir = newDirectory();\n    IndexWriterConfig config = new IndexWriterConfig(new StandardAnalyzer());\n    IndexWriter w = new IndexWriter(dir, config);\n\n    int numDocs = atLeast(1000); // make sure some terms have skip data\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j = 0; j < numFields; j++) {\n        StringBuilder builder = new StringBuilder();\n        int numAs = random().nextDouble() < freqs[j] ? 0 : 1 + random().nextInt(5);\n        for (int k = 0; k < numAs; k++) {\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n          builder.append('a');\n        }\n        if (random().nextBoolean()) {\n          doc.add(new StringField(\"field\", \"c\", Field.Store.NO));\n        }\n        int numOthers = random().nextBoolean() ? 0 : 1 + random().nextInt(5);\n        for (int k = 0; k < numOthers; k++) {\n          if (builder.length() > 0) {\n            builder.append(' ');\n          }\n          builder.append(Integer.toString(random().nextInt()));\n        }\n        doc.add(new TextField(Integer.toString(j), new StringReader(builder.toString())));\n      }\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    for (int i = 0; i < 4; i++) {\n      List<Query> clauses = new ArrayList<>();\n      for (int j = 0; j < numFields; j++) {\n        if (i % 2 == 1) {\n          clauses.add(tq(Integer.toString(j), \"a\"));\n        } else {\n          float boost = random().nextBoolean() ? 0 : random().nextFloat();\n          if (boost > 0) {\n            clauses.add(tq(Integer.toString(j), \"a\", boost));\n          } else {\n            clauses.add(tq(Integer.toString(j), \"a\"));\n          }\n        }\n      }\n      float tieBreaker = random().nextFloat();\n      Query query = new DisjunctionMaxQuery(clauses, tieBreaker);\n      CheckHits.checkTopScores(random(), query, searcher);\n\n      query = new BooleanQuery.Builder()\n          .add(new DisjunctionMaxQuery(clauses, tieBreaker), BooleanClause.Occur.MUST)\n          .add(tq(\"field\", \"c\"), BooleanClause.Occur.FILTER)\n          .build();\n      CheckHits.checkTopScores(random(), query, searcher);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b559eeae2a2a767f75666f9b692659cfe1bf631":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["5b559eeae2a2a767f75666f9b692659cfe1bf631"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"]},"commit2Childs":{"5b559eeae2a2a767f75666f9b692659cfe1bf631":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b559eeae2a2a767f75666f9b692659cfe1bf631"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}