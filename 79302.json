{"path":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","commits":[{"id":"6a617b59fd276a5d672bc7269a3d2108331d1bdd","date":1299698369,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","pathOld":"/dev/null","sourceNew":"  public void testUnicode() throws Exception {\n    int numIterations = 100 * RANDOM_MULTIPLIER;\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof CommonsHttpSolrServer) {\n      CommonsHttpSolrServer cserver = (CommonsHttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof CommonsHttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((CommonsHttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((CommonsHttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random, 1, 100);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((CommonsHttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","pathOld":"/dev/null","sourceNew":"  public void testUnicode() throws Exception {\n    int numIterations = 100 * RANDOM_MULTIPLIER;\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof CommonsHttpSolrServer) {\n      CommonsHttpSolrServer cserver = (CommonsHttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof CommonsHttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((CommonsHttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((CommonsHttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random, 1, 100);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((CommonsHttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","pathOld":"/dev/null","sourceNew":"  public void testUnicode() throws Exception {\n    int numIterations = 100 * RANDOM_MULTIPLIER;\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof CommonsHttpSolrServer) {\n      CommonsHttpSolrServer cserver = (CommonsHttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof CommonsHttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((CommonsHttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((CommonsHttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random, 1, 100);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((CommonsHttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","sourceNew":"  public void testUnicode() throws Exception {\n    int numIterations = 100 * RANDOM_MULTIPLIER;\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof CommonsHttpSolrServer) {\n      CommonsHttpSolrServer cserver = (CommonsHttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof CommonsHttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((CommonsHttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((CommonsHttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random, 1, 100);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((CommonsHttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","sourceOld":"  public void testUnicode() throws Exception {\n    int numIterations = 100 * RANDOM_MULTIPLIER;\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof CommonsHttpSolrServer) {\n      CommonsHttpSolrServer cserver = (CommonsHttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof CommonsHttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((CommonsHttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((CommonsHttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random, 1, 100);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((CommonsHttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","sourceNew":"  public void testUnicode() throws Exception {\n    int numIterations = 100 * RANDOM_MULTIPLIER;\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof CommonsHttpSolrServer) {\n      CommonsHttpSolrServer cserver = (CommonsHttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof CommonsHttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((CommonsHttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((CommonsHttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random, 1, 100);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((CommonsHttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","sourceOld":"  public void testUnicode() throws Exception {\n    int numIterations = 100 * RANDOM_MULTIPLIER;\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof CommonsHttpSolrServer) {\n      CommonsHttpSolrServer cserver = (CommonsHttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof CommonsHttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((CommonsHttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((CommonsHttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random, 1, 100);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((CommonsHttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUnicode().mjava","sourceNew":"  public void testUnicode() throws Exception {\n    int numIterations = 100 * RANDOM_MULTIPLIER;\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof CommonsHttpSolrServer) {\n      CommonsHttpSolrServer cserver = (CommonsHttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof CommonsHttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((CommonsHttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((CommonsHttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random, 1, 100);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((CommonsHttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","sourceOld":"  public void testUnicode() throws Exception {\n    int numIterations = 100 * RANDOM_MULTIPLIER;\n    \n    SolrServer server = getSolrServer();\n    \n    // save the old parser, so we can set it back.\n    ResponseParser oldParser = null;\n    if (server instanceof CommonsHttpSolrServer) {\n      CommonsHttpSolrServer cserver = (CommonsHttpSolrServer) server;\n      oldParser = cserver.getParser();\n    }\n    \n    try {\n      for (int iteration = 0; iteration < numIterations; iteration++) {\n        // choose format\n        if (server instanceof CommonsHttpSolrServer) {\n          if (random.nextBoolean()) {\n            ((CommonsHttpSolrServer) server).setParser(new BinaryResponseParser());\n          } else {\n            ((CommonsHttpSolrServer) server).setParser(new XMLResponseParser());\n          }\n        }\n\n        int numDocs = _TestUtil.nextInt(random, 1, 100);\n        \n        // Empty the database...\n        server.deleteByQuery(\"*:*\");// delete everything!\n        \n        List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n        for (int i = 0; i < numDocs; i++) {\n          // Now add something...\n          SolrInputDocument doc = new SolrInputDocument();\n          doc.addField(\"id\", \"\" + i);\n          doc.addField(\"unicode_s\", randomTestString(30));\n          docs.add(doc);\n        }\n        \n        server.add(docs);\n        server.commit();\n        \n        SolrQuery query = new SolrQuery();\n        query.setQuery(\"*:*\");\n        query.setRows(numDocs);\n        \n        QueryResponse rsp = server.query( query );\n        \n        for (int i = 0; i < numDocs; i++) {\n          String expected = (String) docs.get(i).getFieldValue(\"unicode_s\");\n          String actual = (String) rsp.getResults().get(i).getFieldValue(\"unicode_s\");\n          assertEquals(expected, actual);\n        }\n      }\n    } finally {\n      if (oldParser != null) {\n        // set the old parser back\n        ((CommonsHttpSolrServer)server).setParser(oldParser);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6a617b59fd276a5d672bc7269a3d2108331d1bdd"],"6a617b59fd276a5d672bc7269a3d2108331d1bdd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["6a617b59fd276a5d672bc7269a3d2108331d1bdd"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6a617b59fd276a5d672bc7269a3d2108331d1bdd"],"c26f00b574427b55127e869b935845554afde1fa":["6a617b59fd276a5d672bc7269a3d2108331d1bdd","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["6a617b59fd276a5d672bc7269a3d2108331d1bdd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"6a617b59fd276a5d672bc7269a3d2108331d1bdd":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","6a617b59fd276a5d672bc7269a3d2108331d1bdd","d619839baa8ce5503e496b94a9e42ad6f079293f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}