{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetsConfig#pathToString(String[],int).mjava","commits":[{"id":"ae75def1e2525383b6e1397ed97c44387da9941c","date":1385249238,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetsConfig#pathToString(String[],int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/DocumentBuilder#pathToString(String[],int).mjava","sourceNew":"  public static String pathToString(String[] path, int length) {\n    if (length == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for(int i=0;i<length;i++) {\n      String s = path[i];\n      int numChars = s.length();\n      for(int j=0;j<numChars;j++) {\n        char ch = s.charAt(j);\n        if (ch == DELIM_CHAR || ch == ESCAPE_CHAR) {\n          sb.append(ESCAPE_CHAR);\n        }\n        sb.append(ch);\n      }\n      sb.append(DELIM_CHAR);\n    }\n\n    // Trim off last DELIM_CHAR:\n    sb.setLength(sb.length()-1);\n    return sb.toString();\n  }\n\n","sourceOld":"  public static String pathToString(String[] path, int length) {\n    if (length == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for(int i=0;i<length;i++) {\n      String s = path[i];\n      int numChars = s.length();\n      for(int j=0;j<numChars;j++) {\n        char ch = s.charAt(j);\n        if (ch == DELIM_CHAR || ch == ESCAPE_CHAR) {\n          sb.append(ESCAPE_CHAR);\n        }\n        sb.append(ch);\n      }\n      sb.append(DELIM_CHAR);\n    }\n\n    // Trim off last DELIM_CHAR:\n    sb.setLength(sb.length()-1);\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca39562b2d7687143fdb601d5de1b8f7b778f1db","date":1385299806,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetsConfig#pathToString(String[],int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetsConfig#pathToString(String[],int).mjava","sourceNew":"  public static String pathToString(String[] path, int length) {\n    // nocommit .... too anal?  shouldn't we allow drill\n    // down on just dim, to get all docs that have that\n    // dim...?\n    /*\n    if (path.length < 2) {\n      throw new IllegalArgumentException(\"path length must be > 0 (dim=\" + path[0] + \")\");\n    }\n    */\n    if (length == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for(int i=0;i<length;i++) {\n      String s = path[i];\n      int numChars = s.length();\n      for(int j=0;j<numChars;j++) {\n        char ch = s.charAt(j);\n        if (ch == DELIM_CHAR || ch == ESCAPE_CHAR) {\n          sb.append(ESCAPE_CHAR);\n        }\n        sb.append(ch);\n      }\n      sb.append(DELIM_CHAR);\n    }\n\n    // Trim off last DELIM_CHAR:\n    sb.setLength(sb.length()-1);\n    return sb.toString();\n  }\n\n","sourceOld":"  public static String pathToString(String[] path, int length) {\n    if (length == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for(int i=0;i<length;i++) {\n      String s = path[i];\n      int numChars = s.length();\n      for(int j=0;j<numChars;j++) {\n        char ch = s.charAt(j);\n        if (ch == DELIM_CHAR || ch == ESCAPE_CHAR) {\n          sb.append(ESCAPE_CHAR);\n        }\n        sb.append(ch);\n      }\n      sb.append(DELIM_CHAR);\n    }\n\n    // Trim off last DELIM_CHAR:\n    sb.setLength(sb.length()-1);\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/FacetsConfig#pathToString(String[],int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/FacetsConfig#pathToString(String[],int).mjava","sourceNew":"  public static String pathToString(String[] path, int length) {\n    // nocommit .... too anal?  shouldn't we allow drill\n    // down on just dim, to get all docs that have that\n    // dim...?\n    /*\n    if (path.length < 2) {\n      throw new IllegalArgumentException(\"path length must be > 0 (dim=\" + path[0] + \")\");\n    }\n    */\n    if (length == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for(int i=0;i<length;i++) {\n      String s = path[i];\n      int numChars = s.length();\n      for(int j=0;j<numChars;j++) {\n        char ch = s.charAt(j);\n        if (ch == DELIM_CHAR || ch == ESCAPE_CHAR) {\n          sb.append(ESCAPE_CHAR);\n        }\n        sb.append(ch);\n      }\n      sb.append(DELIM_CHAR);\n    }\n\n    // Trim off last DELIM_CHAR:\n    sb.setLength(sb.length()-1);\n    return sb.toString();\n  }\n\n","sourceOld":"  public static String pathToString(String[] path, int length) {\n    // nocommit .... too anal?  shouldn't we allow drill\n    // down on just dim, to get all docs that have that\n    // dim...?\n    /*\n    if (path.length < 2) {\n      throw new IllegalArgumentException(\"path length must be > 0 (dim=\" + path[0] + \")\");\n    }\n    */\n    if (length == 0) {\n      return \"\";\n    }\n    StringBuilder sb = new StringBuilder();\n    for(int i=0;i<length;i++) {\n      String s = path[i];\n      int numChars = s.length();\n      for(int j=0;j<numChars;j++) {\n        char ch = s.charAt(j);\n        if (ch == DELIM_CHAR || ch == ESCAPE_CHAR) {\n          sb.append(ESCAPE_CHAR);\n        }\n        sb.append(ch);\n      }\n      sb.append(DELIM_CHAR);\n    }\n\n    // Trim off last DELIM_CHAR:\n    sb.setLength(sb.length()-1);\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["ca39562b2d7687143fdb601d5de1b8f7b778f1db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["ae75def1e2525383b6e1397ed97c44387da9941c"],"ae75def1e2525383b6e1397ed97c44387da9941c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","ae75def1e2525383b6e1397ed97c44387da9941c"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ae75def1e2525383b6e1397ed97c44387da9941c":["ca39562b2d7687143fdb601d5de1b8f7b778f1db"]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}