{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimClusterStateProvider#init().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimClusterStateProvider#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestClusterStateProvider#init().mjava","sourceNew":"  private static void init() throws Exception {\n    SolrCloudManager realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    liveNodes = realManager.getClusterStateProvider().getLiveNodes();\n    clusterProperties = realManager.getClusterStateProvider().getClusterProperties();\n    autoScalingConfig = realManager.getDistribStateManager().getAutoScalingConfig();\n    replicas = new HashMap<>();\n    nodeValues = new HashMap<>();\n    liveNodes.forEach(n -> {\n      replicas.put(n, realManager.getNodeStateProvider().getReplicaInfo(n, Collections.emptySet()));\n      nodeValues.put(n, realManager.getNodeStateProvider().getNodeValues(n, ImplicitSnitch.tags));\n    });\n    realState = realManager.getClusterStateProvider().getClusterState();\n\n    if (simulated) {\n      // initialize simulated provider\n      SimCloudManager simCloudManager = new SimCloudManager(TimeSource.get(\"simTime:10\"));\n      simCloudManager.getSimClusterStateProvider().simSetClusterProperties(clusterProperties);\n      simCloudManager.getSimDistribStateManager().simSetAutoScalingConfig(autoScalingConfig);\n      nodeValues.forEach((n, values) -> {\n        try {\n          simCloudManager.getSimNodeStateProvider().simSetNodeValues(n, values);\n        } catch (InterruptedException e) {\n          fail(\"Interrupted:\" + e);\n        }\n      });\n      simCloudManager.getSimClusterStateProvider().simSetClusterState(realState);\n      ClusterState simState = simCloudManager.getClusterStateProvider().getClusterState();\n      assertClusterStateEquals(realState, simState);\n      cloudManager = simCloudManager;\n    } else {\n      cloudManager = realManager;\n    }\n  }\n\n","sourceOld":"  private static void init() throws Exception {\n    SolrCloudManager realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    liveNodes = realManager.getClusterStateProvider().getLiveNodes();\n    clusterProperties = realManager.getClusterStateProvider().getClusterProperties();\n    autoScalingConfig = realManager.getDistribStateManager().getAutoScalingConfig();\n    replicas = new HashMap<>();\n    nodeValues = new HashMap<>();\n    liveNodes.forEach(n -> {\n      replicas.put(n, realManager.getNodeStateProvider().getReplicaInfo(n, Collections.emptySet()));\n      nodeValues.put(n, realManager.getNodeStateProvider().getNodeValues(n, ImplicitSnitch.tags));\n    });\n    realState = realManager.getClusterStateProvider().getClusterState();\n\n    if (simulated) {\n      // initialize simulated provider\n      SimCloudManager simCloudManager = new SimCloudManager(TimeSource.get(\"simTime:10\"));\n      simCloudManager.getSimClusterStateProvider().simSetClusterProperties(clusterProperties);\n      simCloudManager.getSimDistribStateManager().simSetAutoScalingConfig(autoScalingConfig);\n      nodeValues.forEach((n, values) -> {\n        try {\n          simCloudManager.getSimNodeStateProvider().simSetNodeValues(n, values);\n        } catch (InterruptedException e) {\n          fail(\"Interrupted:\" + e);\n        }\n      });\n      simCloudManager.getSimClusterStateProvider().simSetClusterState(realState);\n      ClusterState simState = simCloudManager.getClusterStateProvider().getClusterState();\n      assertClusterStateEquals(realState, simState);\n      cloudManager = simCloudManager;\n    } else {\n      cloudManager = realManager;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimClusterStateProvider#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimClusterStateProvider#init().mjava","sourceNew":"  private static void init() throws Exception {\n    SolrCloudManager realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    liveNodes = realManager.getClusterStateProvider().getLiveNodes();\n    clusterProperties = realManager.getClusterStateProvider().getClusterProperties();\n    autoScalingConfig = realManager.getDistribStateManager().getAutoScalingConfig();\n    replicas = new HashMap<>();\n    nodeValues = new HashMap<>();\n    liveNodes.forEach(n -> {\n      replicas.put(n, realManager.getNodeStateProvider().getReplicaInfo(n, Collections.emptySet()));\n      nodeValues.put(n, realManager.getNodeStateProvider().getNodeValues(n, ImplicitSnitch.tags));\n    });\n    realState = realManager.getClusterStateProvider().getClusterState();\n\n    if (simulated) {\n      // initialize simulated provider\n      SimCloudManager simCloudManager = SimCloudManager.createCluster(realManager, TimeSource.get(\"simTime:10\"));\n//      simCloudManager.getSimClusterStateProvider().simSetClusterProperties(clusterProperties);\n//      simCloudManager.getSimDistribStateManager().simSetAutoScalingConfig(autoScalingConfig);\n//      nodeValues.forEach((n, values) -> {\n//        try {\n//          simCloudManager.getSimNodeStateProvider().simSetNodeValues(n, values);\n//        } catch (InterruptedException e) {\n//          fail(\"Interrupted:\" + e);\n//        }\n//      });\n//      simCloudManager.getSimClusterStateProvider().simSetClusterState(realState);\n      ClusterState simState = simCloudManager.getClusterStateProvider().getClusterState();\n      assertClusterStateEquals(realState, simState);\n      cloudManager = simCloudManager;\n    } else {\n      cloudManager = realManager;\n    }\n  }\n\n","sourceOld":"  private static void init() throws Exception {\n    SolrCloudManager realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    liveNodes = realManager.getClusterStateProvider().getLiveNodes();\n    clusterProperties = realManager.getClusterStateProvider().getClusterProperties();\n    autoScalingConfig = realManager.getDistribStateManager().getAutoScalingConfig();\n    replicas = new HashMap<>();\n    nodeValues = new HashMap<>();\n    liveNodes.forEach(n -> {\n      replicas.put(n, realManager.getNodeStateProvider().getReplicaInfo(n, Collections.emptySet()));\n      nodeValues.put(n, realManager.getNodeStateProvider().getNodeValues(n, ImplicitSnitch.tags));\n    });\n    realState = realManager.getClusterStateProvider().getClusterState();\n\n    if (simulated) {\n      // initialize simulated provider\n      SimCloudManager simCloudManager = new SimCloudManager(TimeSource.get(\"simTime:10\"));\n      simCloudManager.getSimClusterStateProvider().simSetClusterProperties(clusterProperties);\n      simCloudManager.getSimDistribStateManager().simSetAutoScalingConfig(autoScalingConfig);\n      nodeValues.forEach((n, values) -> {\n        try {\n          simCloudManager.getSimNodeStateProvider().simSetNodeValues(n, values);\n        } catch (InterruptedException e) {\n          fail(\"Interrupted:\" + e);\n        }\n      });\n      simCloudManager.getSimClusterStateProvider().simSetClusterState(realState);\n      ClusterState simState = simCloudManager.getClusterStateProvider().getClusterState();\n      assertClusterStateEquals(realState, simState);\n      cloudManager = simCloudManager;\n    } else {\n      cloudManager = realManager;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimClusterStateProvider#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimClusterStateProvider#init().mjava","sourceNew":"  private static void init() throws Exception {\n    SolrCloudManager realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    liveNodes = realManager.getClusterStateProvider().getLiveNodes();\n    clusterProperties = realManager.getClusterStateProvider().getClusterProperties();\n    autoScalingConfig = realManager.getDistribStateManager().getAutoScalingConfig();\n    replicas = new HashMap<>();\n    nodeValues = new HashMap<>();\n    liveNodes.forEach(n -> {\n      replicas.put(n, realManager.getNodeStateProvider().getReplicaInfo(n, Collections.emptySet()));\n      nodeValues.put(n, realManager.getNodeStateProvider().getNodeValues(n, ImplicitSnitch.tags));\n    });\n    realState = realManager.getClusterStateProvider().getClusterState();\n\n    if (simulated) {\n      // initialize simulated provider\n      SimCloudManager simCloudManager = SimCloudManager.createCluster(realManager, null, TimeSource.get(\"simTime:10\"));\n//      simCloudManager.getSimClusterStateProvider().simSetClusterProperties(clusterProperties);\n//      simCloudManager.getSimDistribStateManager().simSetAutoScalingConfig(autoScalingConfig);\n//      nodeValues.forEach((n, values) -> {\n//        try {\n//          simCloudManager.getSimNodeStateProvider().simSetNodeValues(n, values);\n//        } catch (InterruptedException e) {\n//          fail(\"Interrupted:\" + e);\n//        }\n//      });\n//      simCloudManager.getSimClusterStateProvider().simSetClusterState(realState);\n      ClusterState simState = simCloudManager.getClusterStateProvider().getClusterState();\n      assertClusterStateEquals(realState, simState);\n      cloudManager = simCloudManager;\n    } else {\n      cloudManager = realManager;\n    }\n  }\n\n","sourceOld":"  private static void init() throws Exception {\n    SolrCloudManager realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    liveNodes = realManager.getClusterStateProvider().getLiveNodes();\n    clusterProperties = realManager.getClusterStateProvider().getClusterProperties();\n    autoScalingConfig = realManager.getDistribStateManager().getAutoScalingConfig();\n    replicas = new HashMap<>();\n    nodeValues = new HashMap<>();\n    liveNodes.forEach(n -> {\n      replicas.put(n, realManager.getNodeStateProvider().getReplicaInfo(n, Collections.emptySet()));\n      nodeValues.put(n, realManager.getNodeStateProvider().getNodeValues(n, ImplicitSnitch.tags));\n    });\n    realState = realManager.getClusterStateProvider().getClusterState();\n\n    if (simulated) {\n      // initialize simulated provider\n      SimCloudManager simCloudManager = SimCloudManager.createCluster(realManager, TimeSource.get(\"simTime:10\"));\n//      simCloudManager.getSimClusterStateProvider().simSetClusterProperties(clusterProperties);\n//      simCloudManager.getSimDistribStateManager().simSetAutoScalingConfig(autoScalingConfig);\n//      nodeValues.forEach((n, values) -> {\n//        try {\n//          simCloudManager.getSimNodeStateProvider().simSetNodeValues(n, values);\n//        } catch (InterruptedException e) {\n//          fail(\"Interrupted:\" + e);\n//        }\n//      });\n//      simCloudManager.getSimClusterStateProvider().simSetClusterState(realState);\n      ClusterState simState = simCloudManager.getClusterStateProvider().getClusterState();\n      assertClusterStateEquals(realState, simState);\n      cloudManager = simCloudManager;\n    } else {\n      cloudManager = realManager;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb2411226bebe23191dc34a8e8252a936a7261a8","date":1557853382,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimClusterStateProvider#init().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimClusterStateProvider#init().mjava","sourceNew":"  private static void init() throws Exception {\n    SolrCloudManager realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    liveNodes = realManager.getClusterStateProvider().getLiveNodes();\n    clusterProperties = realManager.getClusterStateProvider().getClusterProperties();\n    autoScalingConfig = realManager.getDistribStateManager().getAutoScalingConfig();\n    replicas = new HashMap<>();\n    nodeValues = new HashMap<>();\n    liveNodes.forEach(n -> {\n      replicas.put(n, realManager.getNodeStateProvider().getReplicaInfo(n, Collections.emptySet()));\n      nodeValues.put(n, realManager.getNodeStateProvider().getNodeValues(n, ImplicitSnitch.tags));\n    });\n    realState = realManager.getClusterStateProvider().getClusterState();\n\n    if (simulated) {\n      // initialize simulated provider\n      cloudManager = SimCloudManager.createCluster(realManager, null, TimeSource.get(\"simTime:10\"));\n//      simCloudManager.getSimClusterStateProvider().simSetClusterProperties(clusterProperties);\n//      simCloudManager.getSimDistribStateManager().simSetAutoScalingConfig(autoScalingConfig);\n//      nodeValues.forEach((n, values) -> {\n//        try {\n//          simCloudManager.getSimNodeStateProvider().simSetNodeValues(n, values);\n//        } catch (InterruptedException e) {\n//          fail(\"Interrupted:\" + e);\n//        }\n//      });\n//      simCloudManager.getSimClusterStateProvider().simSetClusterState(realState);\n      ClusterState simState = cloudManager.getClusterStateProvider().getClusterState();\n      assertClusterStateEquals(realState, simState);\n    } else {\n      cloudManager = realManager;\n    }\n  }\n\n","sourceOld":"  private static void init() throws Exception {\n    SolrCloudManager realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    liveNodes = realManager.getClusterStateProvider().getLiveNodes();\n    clusterProperties = realManager.getClusterStateProvider().getClusterProperties();\n    autoScalingConfig = realManager.getDistribStateManager().getAutoScalingConfig();\n    replicas = new HashMap<>();\n    nodeValues = new HashMap<>();\n    liveNodes.forEach(n -> {\n      replicas.put(n, realManager.getNodeStateProvider().getReplicaInfo(n, Collections.emptySet()));\n      nodeValues.put(n, realManager.getNodeStateProvider().getNodeValues(n, ImplicitSnitch.tags));\n    });\n    realState = realManager.getClusterStateProvider().getClusterState();\n\n    if (simulated) {\n      // initialize simulated provider\n      SimCloudManager simCloudManager = SimCloudManager.createCluster(realManager, null, TimeSource.get(\"simTime:10\"));\n//      simCloudManager.getSimClusterStateProvider().simSetClusterProperties(clusterProperties);\n//      simCloudManager.getSimDistribStateManager().simSetAutoScalingConfig(autoScalingConfig);\n//      nodeValues.forEach((n, values) -> {\n//        try {\n//          simCloudManager.getSimNodeStateProvider().simSetNodeValues(n, values);\n//        } catch (InterruptedException e) {\n//          fail(\"Interrupted:\" + e);\n//        }\n//      });\n//      simCloudManager.getSimClusterStateProvider().simSetClusterState(realState);\n      ClusterState simState = simCloudManager.getClusterStateProvider().getClusterState();\n      assertClusterStateEquals(realState, simState);\n      cloudManager = simCloudManager;\n    } else {\n      cloudManager = realManager;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimClusterStateProvider#init().mjava","sourceNew":null,"sourceOld":"  private static void init() throws Exception {\n    SolrCloudManager realManager = cluster.getJettySolrRunner(cluster.getJettySolrRunners().size() - 1).getCoreContainer()\n        .getZkController().getSolrCloudManager();\n    liveNodes = realManager.getClusterStateProvider().getLiveNodes();\n    clusterProperties = realManager.getClusterStateProvider().getClusterProperties();\n    autoScalingConfig = realManager.getDistribStateManager().getAutoScalingConfig();\n    replicas = new HashMap<>();\n    nodeValues = new HashMap<>();\n    liveNodes.forEach(n -> {\n      replicas.put(n, realManager.getNodeStateProvider().getReplicaInfo(n, Collections.emptySet()));\n      nodeValues.put(n, realManager.getNodeStateProvider().getNodeValues(n, ImplicitSnitch.tags));\n    });\n    realState = realManager.getClusterStateProvider().getClusterState();\n\n    if (simulated) {\n      // initialize simulated provider\n      cloudManager = SimCloudManager.createCluster(realManager, null, TimeSource.get(\"simTime:10\"));\n//      simCloudManager.getSimClusterStateProvider().simSetClusterProperties(clusterProperties);\n//      simCloudManager.getSimDistribStateManager().simSetAutoScalingConfig(autoScalingConfig);\n//      nodeValues.forEach((n, values) -> {\n//        try {\n//          simCloudManager.getSimNodeStateProvider().simSetNodeValues(n, values);\n//        } catch (InterruptedException e) {\n//          fail(\"Interrupted:\" + e);\n//        }\n//      });\n//      simCloudManager.getSimClusterStateProvider().simSetClusterState(realState);\n      ClusterState simState = cloudManager.getClusterStateProvider().getClusterState();\n      assertClusterStateEquals(realState, simState);\n    } else {\n      cloudManager = realManager;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cb2411226bebe23191dc34a8e8252a936a7261a8":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"3f504512a03d978990cbff30db0522b354e846db":["cb2411226bebe23191dc34a8e8252a936a7261a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edf5b262a72d10530eb2f01dc8f19060355b213e":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"cb2411226bebe23191dc34a8e8252a936a7261a8":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["cb2411226bebe23191dc34a8e8252a936a7261a8"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}