{"path":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","commits":[{"id":"d7052f725a053aa55424f966831826f61b798bf1","date":1158258681,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","pathOld":"/dev/null","sourceNew":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getRAMSegmentCount() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42a18cb0bca2c4ac9747f31c7a74fac90c661f39","date":1171363388,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","sourceNew":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getRamSegmentCount() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getRAMSegmentCount() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","sourceNew":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getNumBufferedDocuments() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getRamSegmentCount() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4","date":1190750527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","sourceNew":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n    writer.setMergePolicy(new LogDocMergePolicy());\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getNumBufferedDocuments() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getNumBufferedDocuments() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","sourceNew":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n    writer.setMergePolicy(new LogDocMergePolicy());\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getNumBufferedDocuments() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n    writer.setMergePolicy(new LogDocMergePolicy());\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getNumBufferedDocuments() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13eaef7d286f35b5c850a1c2eb7b337679aa6453","date":1249118545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","sourceNew":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getNumBufferedDocuments() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n    writer.setMergePolicy(new LogDocMergePolicy());\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getNumBufferedDocuments() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","sourceNew":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getNumBufferedDocuments() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getNumBufferedDocuments() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","sourceNew":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getNumBufferedDocuments() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getNumBufferedDocuments() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","sourceNew":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getNumBufferedDocuments() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getNumBufferedDocuments() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","sourceNew":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getNumBufferedDocuments() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getNumBufferedDocuments() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","sourceNew":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getNumBufferedDocuments() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(10);\n    writer.setMergeFactor(10);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getNumBufferedDocuments() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testNoOverMerge().mjava","sourceNew":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getNumBufferedDocuments() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test to see if there is over merge\n  public void testNoOverMerge() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    writer.setMergePolicy(new LogDocMergePolicy(writer));\n\n    boolean noOverMerge = false;\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      checkInvariants(writer);\n      if (writer.getNumBufferedDocuments() + writer.getSegmentCount() >= 18) {\n        noOverMerge = true;\n      }\n    }\n    assertTrue(noOverMerge);\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d7052f725a053aa55424f966831826f61b798bf1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["d7052f725a053aa55424f966831826f61b798bf1"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"d7052f725a053aa55424f966831826f61b798bf1":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d7052f725a053aa55424f966831826f61b798bf1"],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}