{"path":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrCloudPartitioner#setConf(Configuration).mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrCloudPartitioner#setConf(Configuration).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrCloudPartitioner#setConf(Configuration).mjava","sourceNew":"  @Override\n  public void setConf(Configuration conf) {\n    this.conf = conf;    \n    this.shards = conf.getInt(SHARDS, -1);\n    if (shards <= 0) {\n      throw new IllegalArgumentException(\"Illegal shards: \" + shards);\n    }\n    String zkHost = conf.get(ZKHOST);\n    if (zkHost == null) {\n      throw new IllegalArgumentException(\"zkHost must not be null\");\n    }\n    String collection = conf.get(COLLECTION);\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }    \n    LOG.info(\"Using SolrCloud zkHost: {}, collection: {}\", zkHost, collection);\n    docCollection = new ZooKeeperInspector().extractDocCollection(zkHost, collection);\n    if (docCollection == null) {\n      throw new IllegalArgumentException(\"docCollection must not be null\");\n    }\n    if (docCollection.getSlicesMap().size() != shards) {\n      throw new IllegalArgumentException(\"Incompatible shards: + \" + shards + \" for docCollection: \" + docCollection);\n    }    \n    List<Slice> slices = new ZooKeeperInspector().getSortedSlices(docCollection.getSlices());\n    if (slices.size() != shards) {\n      throw new IllegalStateException(\"Incompatible sorted shards: + \" + shards + \" for docCollection: \" + docCollection);\n    }    \n    shardNumbers = new HashMap(10 * slices.size()); // sparse for performance\n    for (int i = 0; i < slices.size(); i++) {\n      shardNumbers.put(slices.get(i).getName(), i);\n    }\n    LOG.debug(\"Using SolrCloud docCollection: {}\", docCollection);\n    DocRouter docRouter = docCollection.getRouter();\n    if (docRouter == null) {\n      throw new IllegalArgumentException(\"docRouter must not be null\");\n    }\n    LOG.info(\"Using SolrCloud docRouterClass: {}\", docRouter.getClass());    \n  }\n\n","sourceOld":"  @Override\n  public void setConf(Configuration conf) {\n    this.conf = conf;    \n    this.shards = conf.getInt(SHARDS, -1);\n    if (shards <= 0) {\n      throw new IllegalArgumentException(\"Illegal shards: \" + shards);\n    }\n    String zkHost = conf.get(ZKHOST);\n    if (zkHost == null) {\n      throw new IllegalArgumentException(\"zkHost must not be null\");\n    }\n    String collection = conf.get(COLLECTION);\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }    \n    LOG.info(\"Using SolrCloud zkHost: {}, collection: {}\", zkHost, collection);\n    docCollection = new ZooKeeperInspector().extractDocCollection(zkHost, collection);\n    if (docCollection == null) {\n      throw new IllegalArgumentException(\"docCollection must not be null\");\n    }\n    if (docCollection.getSlicesMap().size() != shards) {\n      throw new IllegalArgumentException(\"Incompatible shards: + \" + shards + \" for docCollection: \" + docCollection);\n    }    \n    List<Slice> slices = new ZooKeeperInspector().getSortedSlices(docCollection.getSlices());\n    if (slices.size() != shards) {\n      throw new IllegalStateException(\"Incompatible sorted shards: + \" + shards + \" for docCollection: \" + docCollection);\n    }    \n    shardNumbers = new HashMap(10 * slices.size()); // sparse for performance\n    for (int i = 0; i < slices.size(); i++) {\n      shardNumbers.put(slices.get(i).getName(), i);\n    }\n    LOG.debug(\"Using SolrCloud docCollection: {}\", docCollection);\n    DocRouter docRouter = docCollection.getRouter();\n    if (docRouter == null) {\n      throw new IllegalArgumentException(\"docRouter must not be null\");\n    }\n    LOG.info(\"Using SolrCloud docRouterClass: {}\", docRouter.getClass());    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrCloudPartitioner#setConf(Configuration).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setConf(Configuration conf) {\n    this.conf = conf;    \n    this.shards = conf.getInt(SHARDS, -1);\n    if (shards <= 0) {\n      throw new IllegalArgumentException(\"Illegal shards: \" + shards);\n    }\n    String zkHost = conf.get(ZKHOST);\n    if (zkHost == null) {\n      throw new IllegalArgumentException(\"zkHost must not be null\");\n    }\n    String collection = conf.get(COLLECTION);\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }    \n    LOG.info(\"Using SolrCloud zkHost: {}, collection: {}\", zkHost, collection);\n    docCollection = new ZooKeeperInspector().extractDocCollection(zkHost, collection);\n    if (docCollection == null) {\n      throw new IllegalArgumentException(\"docCollection must not be null\");\n    }\n    if (docCollection.getSlicesMap().size() != shards) {\n      throw new IllegalArgumentException(\"Incompatible shards: + \" + shards + \" for docCollection: \" + docCollection);\n    }    \n    List<Slice> slices = new ZooKeeperInspector().getSortedSlices(docCollection.getSlices());\n    if (slices.size() != shards) {\n      throw new IllegalStateException(\"Incompatible sorted shards: + \" + shards + \" for docCollection: \" + docCollection);\n    }    \n    shardNumbers = new HashMap(10 * slices.size()); // sparse for performance\n    for (int i = 0; i < slices.size(); i++) {\n      shardNumbers.put(slices.get(i).getName(), i);\n    }\n    LOG.debug(\"Using SolrCloud docCollection: {}\", docCollection);\n    DocRouter docRouter = docCollection.getRouter();\n    if (docRouter == null) {\n      throw new IllegalArgumentException(\"docRouter must not be null\");\n    }\n    LOG.info(\"Using SolrCloud docRouterClass: {}\", docRouter.getClass());    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrCloudPartitioner#setConf(Configuration).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void setConf(Configuration conf) {\n    this.conf = conf;    \n    this.shards = conf.getInt(SHARDS, -1);\n    if (shards <= 0) {\n      throw new IllegalArgumentException(\"Illegal shards: \" + shards);\n    }\n    String zkHost = conf.get(ZKHOST);\n    if (zkHost == null) {\n      throw new IllegalArgumentException(\"zkHost must not be null\");\n    }\n    String collection = conf.get(COLLECTION);\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }    \n    LOG.info(\"Using SolrCloud zkHost: {}, collection: {}\", zkHost, collection);\n    docCollection = new ZooKeeperInspector().extractDocCollection(zkHost, collection);\n    if (docCollection == null) {\n      throw new IllegalArgumentException(\"docCollection must not be null\");\n    }\n    if (docCollection.getSlicesMap().size() != shards) {\n      throw new IllegalArgumentException(\"Incompatible shards: + \" + shards + \" for docCollection: \" + docCollection);\n    }    \n    List<Slice> slices = new ZooKeeperInspector().getSortedSlices(docCollection.getSlices());\n    if (slices.size() != shards) {\n      throw new IllegalStateException(\"Incompatible sorted shards: + \" + shards + \" for docCollection: \" + docCollection);\n    }    \n    shardNumbers = new HashMap(10 * slices.size()); // sparse for performance\n    for (int i = 0; i < slices.size(); i++) {\n      shardNumbers.put(slices.get(i).getName(), i);\n    }\n    LOG.debug(\"Using SolrCloud docCollection: {}\", docCollection);\n    DocRouter docRouter = docCollection.getRouter();\n    if (docRouter == null) {\n      throw new IllegalArgumentException(\"docRouter must not be null\");\n    }\n    LOG.info(\"Using SolrCloud docRouterClass: {}\", docRouter.getClass());    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrCloudPartitioner#setConf(Configuration).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void setConf(Configuration conf) {\n    this.conf = conf;    \n    this.shards = conf.getInt(SHARDS, -1);\n    if (shards <= 0) {\n      throw new IllegalArgumentException(\"Illegal shards: \" + shards);\n    }\n    String zkHost = conf.get(ZKHOST);\n    if (zkHost == null) {\n      throw new IllegalArgumentException(\"zkHost must not be null\");\n    }\n    String collection = conf.get(COLLECTION);\n    if (collection == null) {\n      throw new IllegalArgumentException(\"collection must not be null\");\n    }    \n    LOG.info(\"Using SolrCloud zkHost: {}, collection: {}\", zkHost, collection);\n    docCollection = new ZooKeeperInspector().extractDocCollection(zkHost, collection);\n    if (docCollection == null) {\n      throw new IllegalArgumentException(\"docCollection must not be null\");\n    }\n    if (docCollection.getSlicesMap().size() != shards) {\n      throw new IllegalArgumentException(\"Incompatible shards: + \" + shards + \" for docCollection: \" + docCollection);\n    }    \n    List<Slice> slices = new ZooKeeperInspector().getSortedSlices(docCollection.getSlices());\n    if (slices.size() != shards) {\n      throw new IllegalStateException(\"Incompatible sorted shards: + \" + shards + \" for docCollection: \" + docCollection);\n    }    \n    shardNumbers = new HashMap(10 * slices.size()); // sparse for performance\n    for (int i = 0; i < slices.size(); i++) {\n      shardNumbers.put(slices.get(i).getName(), i);\n    }\n    LOG.debug(\"Using SolrCloud docCollection: {}\", docCollection);\n    DocRouter docRouter = docCollection.getRouter();\n    if (docRouter == null) {\n      throw new IllegalArgumentException(\"docRouter must not be null\");\n    }\n    LOG.info(\"Using SolrCloud docRouterClass: {}\", docRouter.getClass());    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["12109b652e9210b8d58fca47f6c4a725d058a58e","74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}