{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#postSoftCommit(CommitUpdateCommand).mjava","commits":[{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#postSoftCommit(CommitUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  public abstract void postSoftCommit(CommitUpdateCommand cmd);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#postSoftCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#postSoftCommit(CommitUpdateCommand).mjava","sourceNew":"  public void postSoftCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      // We can clear out all old maps now that a new searcher has been opened.\n      // This currently only works since DUH2 synchronizes around preCommit to avoid\n      // it being called in the middle of a preSoftCommit, postSoftCommit sequence.\n      // If this DUH2 synchronization were to be removed, preSoftCommit should\n      // record what old maps were created and only remove those.\n\n      if (debug) {\n        SolrCore.verbose(\"TLOG: postSoftCommit: disposing of prevMap=\"+ System.identityHashCode(prevMap) + \", prevMap2=\" + System.identityHashCode(prevMap2));\n      }\n      clearOldMaps();\n    }\n  }\n\n","sourceOld":"  public abstract void postSoftCommit(CommitUpdateCommand cmd);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#postSoftCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#postSoftCommit(CommitUpdateCommand).mjava","sourceNew":"  public void postSoftCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      // We can clear out all old maps now that a new searcher has been opened.\n      // This currently only works since DUH2 synchronizes around preCommit to avoid\n      // it being called in the middle of a preSoftCommit, postSoftCommit sequence.\n      // If this DUH2 synchronization were to be removed, preSoftCommit should\n      // record what old maps were created and only remove those.\n\n      if (debug) {\n        SolrCore.verbose(\"TLOG: postSoftCommit: disposing of prevMap=\"+ System.identityHashCode(prevMap) + \", prevMap2=\" + System.identityHashCode(prevMap2));\n      }\n      clearOldMaps();\n    }\n  }\n\n","sourceOld":"  public abstract void postSoftCommit(CommitUpdateCommand cmd);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#postSoftCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#postSoftCommit(CommitUpdateCommand).mjava","sourceNew":"  public void postSoftCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      // We can clear out all old maps now that a new searcher has been opened.\n      // This currently only works since DUH2 synchronizes around preCommit to avoid\n      // it being called in the middle of a preSoftCommit, postSoftCommit sequence.\n      // If this DUH2 synchronization were to be removed, preSoftCommit should\n      // record what old maps were created and only remove those.\n\n      if (debug) {\n        SolrCore.verbose(\"TLOG: postSoftCommit: disposing of prevMap=\"+ System.identityHashCode(prevMap) + \", prevMap2=\" + System.identityHashCode(prevMap2));\n      }\n      clearOldMaps();\n    }\n  }\n\n","sourceOld":"  public abstract void postSoftCommit(CommitUpdateCommand cmd);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773a737806859660d4756f710adc0ad53e05f9d5","date":1432140757,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#postSoftCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#postSoftCommit(CommitUpdateCommand).mjava","sourceNew":"  public void postSoftCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      // We can clear out all old maps now that a new searcher has been opened.\n      // This currently only works since DUH2 synchronizes around preCommit to avoid\n      // it being called in the middle of a preSoftCommit, postSoftCommit sequence.\n      // If this DUH2 synchronization were to be removed, preSoftCommit should\n      // record what old maps were created and only remove those.\n\n      if (debug) {\n        SolrCore.verbose(\"TLOG: postSoftCommit: disposing of prevMap=\"+ System.identityHashCode(prevMap) + \", prevMap2=\" + System.identityHashCode(prevMap2));\n      }\n      clearOldMaps();\n\n    }\n  }\n\n","sourceOld":"  public void postSoftCommit(CommitUpdateCommand cmd) {\n    synchronized (this) {\n      // We can clear out all old maps now that a new searcher has been opened.\n      // This currently only works since DUH2 synchronizes around preCommit to avoid\n      // it being called in the middle of a preSoftCommit, postSoftCommit sequence.\n      // If this DUH2 synchronization were to be removed, preSoftCommit should\n      // record what old maps were created and only remove those.\n\n      if (debug) {\n        SolrCore.verbose(\"TLOG: postSoftCommit: disposing of prevMap=\"+ System.identityHashCode(prevMap) + \", prevMap2=\" + System.identityHashCode(prevMap2));\n      }\n      clearOldMaps();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["bd0ef6574805f3cb9880e0983b7548a6aa933508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"773a737806859660d4756f710adc0ad53e05f9d5":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["bd0ef6574805f3cb9880e0983b7548a6aa933508","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["773a737806859660d4756f710adc0ad53e05f9d5"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"773a737806859660d4756f710adc0ad53e05f9d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","773a737806859660d4756f710adc0ad53e05f9d5","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}