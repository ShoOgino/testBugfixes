{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","sourceNew":"  public BytesRefIterator iterator() throws IOException {\n    if (sorted == null) {\n      closeWriter();\n      \n      sorted = File.createTempFile(\"RefSorter-\", \".sorted\",\n          Sort.defaultTempDir());\n      sort.sort(input, sorted);\n      \n      input.delete();\n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new Sort.ByteSequencesReader(sorted),\n        sort.getComparator());\n  }\n\n","sourceOld":"  public BytesRefIterator iterator() throws IOException {\n    if (sorted == null) {\n      closeWriter();\n      \n      sorted = File.createTempFile(\"RefSorter-\", \".sorted\",\n          Sort.defaultTempDir());\n      sort.sort(input, sorted);\n      \n      input.delete();\n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new Sort.ByteSequencesReader(sorted),\n        sort.getComparator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","sourceNew":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sorted == null) {\n      closeWriter();\n      \n      sorted = File.createTempFile(\"RefSorter-\", \".sorted\",\n          Sort.defaultTempDir());\n      sort.sort(input, sorted);\n      \n      input.delete();\n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new Sort.ByteSequencesReader(sorted),\n        sort.getComparator());\n  }\n\n","sourceOld":"  public BytesRefIterator iterator() throws IOException {\n    if (sorted == null) {\n      closeWriter();\n      \n      sorted = File.createTempFile(\"RefSorter-\", \".sorted\",\n          Sort.defaultTempDir());\n      sort.sort(input, sorted);\n      \n      input.delete();\n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new Sort.ByteSequencesReader(sorted),\n        sort.getComparator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","sourceNew":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sorted == null) {\n      closeWriter();\n      \n      sorted = File.createTempFile(\"RefSorter-\", \".sorted\",\n          Sort.defaultTempDir());\n      sort.sort(input, sorted);\n      \n      input.delete();\n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new Sort.ByteSequencesReader(sorted),\n        sort.getComparator());\n  }\n\n","sourceOld":"  public BytesRefIterator iterator() throws IOException {\n    if (sorted == null) {\n      closeWriter();\n      \n      sorted = File.createTempFile(\"RefSorter-\", \".sorted\",\n          Sort.defaultTempDir());\n      sort.sort(input, sorted);\n      \n      input.delete();\n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new Sort.ByteSequencesReader(sorted),\n        sort.getComparator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","sourceNew":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sorted == null) {\n      closeWriter();\n      \n      sorted = File.createTempFile(\"RefSorter-\", \".sorted\",\n          Sort.defaultTempDir());\n      sort.sort(input, sorted);\n      \n      input.delete();\n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new Sort.ByteSequencesReader(sorted));\n  }\n\n","sourceOld":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sorted == null) {\n      closeWriter();\n      \n      sorted = File.createTempFile(\"RefSorter-\", \".sorted\",\n          Sort.defaultTempDir());\n      sort.sort(input, sorted);\n      \n      input.delete();\n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new Sort.ByteSequencesReader(sorted),\n        sort.getComparator());\n  }\n\n","bugFix":null,"bugIntro":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","sourceNew":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sorted == null) {\n      closeWriter();\n      \n      sorted = File.createTempFile(\"RefSorter-\", \".sorted\",\n          OfflineSorter.defaultTempDir());\n      sort.sort(input, sorted);\n      \n      input.delete();\n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new OfflineSorter.ByteSequencesReader(sorted));\n  }\n\n","sourceOld":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sorted == null) {\n      closeWriter();\n      \n      sorted = File.createTempFile(\"RefSorter-\", \".sorted\",\n          Sort.defaultTempDir());\n      sort.sort(input, sorted);\n      \n      input.delete();\n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new Sort.ByteSequencesReader(sorted));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","sourceNew":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sorted == null) {\n      closeWriter();\n      \n      sorted = File.createTempFile(\"RefSorter-\", \".sorted\",\n          OfflineSorter.defaultTempDir());\n      sort.sort(input, sorted);\n      \n      input.delete();\n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new OfflineSorter.ByteSequencesReader(sorted));\n  }\n\n","sourceOld":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sorted == null) {\n      closeWriter();\n      \n      sorted = File.createTempFile(\"RefSorter-\", \".sorted\",\n          Sort.defaultTempDir());\n      sort.sort(input, sorted);\n      \n      input.delete();\n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new Sort.ByteSequencesReader(sorted));\n  }\n\n","bugFix":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","sourceNew":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sorted == null) {\n      closeWriter();\n      \n      sorted = File.createTempFile(\"RefSorter-\", \".sorted\",\n          OfflineSorter.defaultTempDir());\n      boolean success = false;\n      try {\n        sort.sort(input, sorted);\n        success = true;\n      } finally {\n        if (success) {\n          Files.delete(input.toPath());\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(input);\n        }\n      }\n      \n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new OfflineSorter.ByteSequencesReader(sorted));\n  }\n\n","sourceOld":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sorted == null) {\n      closeWriter();\n      \n      sorted = File.createTempFile(\"RefSorter-\", \".sorted\",\n          OfflineSorter.defaultTempDir());\n      sort.sort(input, sorted);\n      \n      input.delete();\n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new OfflineSorter.ByteSequencesReader(sorted));\n  }\n\n","bugFix":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","sourceNew":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sorted == null) {\n      closeWriter();\n      \n      sorted = Files.createTempFile(OfflineSorter.defaultTempDir(), \"RefSorter-\", \".sorted\");\n      boolean success = false;\n      try {\n        sort.sort(input, sorted);\n        success = true;\n      } finally {\n        if (success) {\n          Files.delete(input);\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(input);\n        }\n      }\n      \n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new OfflineSorter.ByteSequencesReader(sorted));\n  }\n\n","sourceOld":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sorted == null) {\n      closeWriter();\n      \n      sorted = File.createTempFile(\"RefSorter-\", \".sorted\",\n          OfflineSorter.defaultTempDir());\n      boolean success = false;\n      try {\n        sort.sort(input, sorted);\n        success = true;\n      } finally {\n        if (success) {\n          Files.delete(input.toPath());\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(input);\n        }\n      }\n      \n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new OfflineSorter.ByteSequencesReader(sorted));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2","date":1443129829,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","sourceNew":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sorted == null) {\n      closeWriter();\n      \n      sorted = Files.createTempFile(OfflineSorter.getDefaultTempDir(), \"RefSorter-\", \".sorted\");\n      boolean success = false;\n      try {\n        sort.sort(input, sorted);\n        success = true;\n      } finally {\n        if (success) {\n          Files.delete(input);\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(input);\n        }\n      }\n      \n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new OfflineSorter.ByteSequencesReader(sorted));\n  }\n\n","sourceOld":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sorted == null) {\n      closeWriter();\n      \n      sorted = Files.createTempFile(OfflineSorter.defaultTempDir(), \"RefSorter-\", \".sorted\");\n      boolean success = false;\n      try {\n        sort.sort(input, sorted);\n        success = true;\n      } finally {\n        if (success) {\n          Files.delete(input);\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(input);\n        }\n      }\n      \n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new OfflineSorter.ByteSequencesReader(sorted));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","sourceNew":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sortedFileName == null) {\n      closeWriter();\n      \n      boolean success = false;\n      try {\n        sortedFileName = sorter.sort(input.getName());\n        success = true;\n      } finally {\n        if (success) {\n          sorter.getDirectory().deleteFile(input.getName());\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(sorter.getDirectory(), input.getName());\n        }\n      }\n      \n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new OfflineSorter.ByteSequencesReader(sorter.getDirectory().openInput(sortedFileName, IOContext.READONCE)));\n  }\n\n","sourceOld":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sorted == null) {\n      closeWriter();\n      \n      sorted = Files.createTempFile(OfflineSorter.getDefaultTempDir(), \"RefSorter-\", \".sorted\");\n      boolean success = false;\n      try {\n        sort.sort(input, sorted);\n        success = true;\n      } finally {\n        if (success) {\n          Files.delete(input);\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(input);\n        }\n      }\n      \n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new OfflineSorter.ByteSequencesReader(sorted));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","sourceNew":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sortedFileName == null) {\n      closeWriter();\n      \n      boolean success = false;\n      try {\n        sortedFileName = sorter.sort(input.getName());\n        success = true;\n      } finally {\n        if (success) {\n          sorter.getDirectory().deleteFiles(Collections.singleton(input.getName()));\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(sorter.getDirectory(), input.getName());\n        }\n      }\n      \n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new OfflineSorter.ByteSequencesReader(sorter.getDirectory().openInput(sortedFileName, IOContext.READONCE)));\n  }\n\n","sourceOld":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sortedFileName == null) {\n      closeWriter();\n      \n      boolean success = false;\n      try {\n        sortedFileName = sorter.sort(input.getName());\n        success = true;\n      } finally {\n        if (success) {\n          sorter.getDirectory().deleteFile(input.getName());\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(sorter.getDirectory(), input.getName());\n        }\n      }\n      \n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new OfflineSorter.ByteSequencesReader(sorter.getDirectory().openInput(sortedFileName, IOContext.READONCE)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","sourceNew":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sortedFileName == null) {\n      closeWriter();\n      \n      boolean success = false;\n      try {\n        sortedFileName = sorter.sort(input.getName());\n        success = true;\n      } finally {\n        if (success) {\n          sorter.getDirectory().deleteFile(input.getName());\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(sorter.getDirectory(), input.getName());\n        }\n      }\n      \n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new OfflineSorter.ByteSequencesReader(sorter.getDirectory().openInput(sortedFileName, IOContext.READONCE)));\n  }\n\n","sourceOld":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sortedFileName == null) {\n      closeWriter();\n      \n      boolean success = false;\n      try {\n        sortedFileName = sorter.sort(input.getName());\n        success = true;\n      } finally {\n        if (success) {\n          sorter.getDirectory().deleteFiles(Collections.singleton(input.getName()));\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(sorter.getDirectory(), input.getName());\n        }\n      }\n      \n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new OfflineSorter.ByteSequencesReader(sorter.getDirectory().openInput(sortedFileName, IOContext.READONCE)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950b7a6881d14da782b60444c11295e3ec50d41a","date":1458379095,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/ExternalRefSorter#iterator().mjava","sourceNew":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sortedFileName == null) {\n      closeWriter();\n      \n      boolean success = false;\n      try {\n        sortedFileName = sorter.sort(input.getName());\n        success = true;\n      } finally {\n        if (success) {\n          sorter.getDirectory().deleteFile(input.getName());\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(sorter.getDirectory(), input.getName());\n        }\n      }\n      \n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new OfflineSorter.ByteSequencesReader(sorter.getDirectory().openChecksumInput(sortedFileName, IOContext.READONCE), sortedFileName));\n  }\n\n","sourceOld":"  @Override\n  public BytesRefIterator iterator() throws IOException {\n    if (sortedFileName == null) {\n      closeWriter();\n      \n      boolean success = false;\n      try {\n        sortedFileName = sorter.sort(input.getName());\n        success = true;\n      } finally {\n        if (success) {\n          sorter.getDirectory().deleteFile(input.getName());\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(sorter.getDirectory(), input.getName());\n        }\n      }\n      \n      input = null;\n    }\n    \n    return new ByteSequenceIterator(new OfflineSorter.ByteSequencesReader(sorter.getDirectory().openInput(sortedFileName, IOContext.READONCE)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2":["f4abec28b874149a7223e32cc7a01704c27790de"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","36f5a8c57e16c0f801006a52f87c75378427852e"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"36f5a8c57e16c0f801006a52f87c75378427852e":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"950b7a6881d14da782b60444c11295e3ec50d41a":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["950b7a6881d14da782b60444c11295e3ec50d41a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"f4abec28b874149a7223e32cc7a01704c27790de":["8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2"],"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":[],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"950b7a6881d14da782b60444c11295e3ec50d41a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["950b7a6881d14da782b60444c11295e3ec50d41a","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}