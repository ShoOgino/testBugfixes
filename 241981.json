{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#addResult(int,boolean,long).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#addResult(int,boolean,long).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#addResult(int,boolean,long).mjava","sourceNew":"  /**\n   * Add a (possibly relevant) doc.\n   * @param n rank of the added doc (its ordinal position within the query results).\n   * @param isRelevant true if the added doc is relevant, false otherwise.\n   */\n  public void addResult(int n, boolean isRelevant, long docNameExtractTime) {\n    if (Math.abs(numPoints+1 - n) > 1E-6) {\n      throw new IllegalArgumentException(\"point \"+n+\" illegal after \"+numPoints+\" points!\");\n    }\n    if (isRelevant) {\n      numGoodPoints+=1;\n      recallPoints.add(new RecallPoint(n,numGoodPoints));\n      if (recallPoints.size()==1 && n<=5) { // first point, but only within 5 top scores. \n        mrr =  1.0 / n;\n      }\n    }\n    numPoints = n;\n    double p = numGoodPoints / numPoints;\n    if (isRelevant) {\n      pReleventSum += p;\n    }\n    if (n<pAt.length) {\n      pAt[n] = p;\n    }\n    recall = maxGoodPoints<=0 ? p : numGoodPoints/maxGoodPoints;\n    docNamesExtractTime += docNameExtractTime;\n  }\n\n","sourceOld":"  /**\n   * Add a (possibly relevant) doc.\n   * @param n rank of the added doc (its ordinal position within the query results).\n   * @param isRelevant true if the added doc is relevant, false otherwise.\n   */\n  public void addResult(int n, boolean isRelevant, long docNameExtractTime) {\n    if (Math.abs(numPoints+1 - n) > 1E-6) {\n      throw new IllegalArgumentException(\"point \"+n+\" illegal after \"+numPoints+\" points!\");\n    }\n    if (isRelevant) {\n      numGoodPoints+=1;\n      recallPoints.add(new RecallPoint(n,numGoodPoints));\n      if (recallPoints.size()==1 && n<=5) { // first point, but only within 5 top scores. \n        mrr =  1.0 / n;\n      }\n    }\n    numPoints = n;\n    double p = numGoodPoints / numPoints;\n    if (isRelevant) {\n      pReleventSum += p;\n    }\n    if (n<pAt.length) {\n      pAt[n] = p;\n    }\n    recall = maxGoodPoints<=0 ? p : numGoodPoints/maxGoodPoints;\n    docNamesExtractTime += docNameExtractTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#addResult(int,boolean,long).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#addResult(int,boolean,long).mjava","sourceNew":"  /**\n   * Add a (possibly relevant) doc.\n   * @param n rank of the added doc (its ordinal position within the query results).\n   * @param isRelevant true if the added doc is relevant, false otherwise.\n   */\n  public void addResult(int n, boolean isRelevant, long docNameExtractTime) {\n    if (Math.abs(numPoints+1 - n) > 1E-6) {\n      throw new IllegalArgumentException(\"point \"+n+\" illegal after \"+numPoints+\" points!\");\n    }\n    if (isRelevant) {\n      numGoodPoints+=1;\n      recallPoints.add(new RecallPoint(n,numGoodPoints));\n      if (recallPoints.size()==1 && n<=5) { // first point, but only within 5 top scores. \n        mrr =  1.0 / n;\n      }\n    }\n    numPoints = n;\n    double p = numGoodPoints / numPoints;\n    if (isRelevant) {\n      pReleventSum += p;\n    }\n    if (n<pAt.length) {\n      pAt[n] = p;\n    }\n    recall = maxGoodPoints<=0 ? p : numGoodPoints/maxGoodPoints;\n    docNamesExtractTime += docNameExtractTime;\n  }\n\n","sourceOld":"  /**\n   * Add a (possibly relevant) doc.\n   * @param n rank of the added doc (its ordinal position within the query results).\n   * @param isRelevant true if the added doc is relevant, false otherwise.\n   */\n  public void addResult(int n, boolean isRelevant, long docNameExtractTime) {\n    if (Math.abs(numPoints+1 - n) > 1E-6) {\n      throw new IllegalArgumentException(\"point \"+n+\" illegal after \"+numPoints+\" points!\");\n    }\n    if (isRelevant) {\n      numGoodPoints+=1;\n      recallPoints.add(new RecallPoint(n,numGoodPoints));\n      if (recallPoints.size()==1 && n<=5) { // first point, but only within 5 top scores. \n        mrr =  1.0 / n;\n      }\n    }\n    numPoints = n;\n    double p = numGoodPoints / numPoints;\n    if (isRelevant) {\n      pReleventSum += p;\n    }\n    if (n<pAt.length) {\n      pAt[n] = p;\n    }\n    recall = maxGoodPoints<=0 ? p : numGoodPoints/maxGoodPoints;\n    docNamesExtractTime += docNameExtractTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#addResult(int,boolean,long).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#addResult(int,boolean,long).mjava","sourceNew":"  /**\n   * Add a (possibly relevant) doc.\n   * @param n rank of the added doc (its ordinal position within the query results).\n   * @param isRelevant true if the added doc is relevant, false otherwise.\n   */\n  public void addResult(int n, boolean isRelevant, long docNameExtractTime) {\n    if (Math.abs(numPoints+1 - n) > 1E-6) {\n      throw new IllegalArgumentException(\"point \"+n+\" illegal after \"+numPoints+\" points!\");\n    }\n    if (isRelevant) {\n      numGoodPoints+=1;\n      recallPoints.add(new RecallPoint(n,numGoodPoints));\n      if (recallPoints.size()==1 && n<=5) { // first point, but only within 5 top scores. \n        mrr =  1.0 / n;\n      }\n    }\n    numPoints = n;\n    double p = numGoodPoints / numPoints;\n    if (isRelevant) {\n      pReleventSum += p;\n    }\n    if (n<pAt.length) {\n      pAt[n] = p;\n    }\n    recall = maxGoodPoints<=0 ? p : numGoodPoints/maxGoodPoints;\n    docNamesExtractTime += docNameExtractTime;\n  }\n\n","sourceOld":"  /**\n   * Add a (possibly relevant) doc.\n   * @param n rank of the added doc (its ordinal position within the query results).\n   * @param isRelevant true if the added doc is relevant, false otherwise.\n   */\n  public void addResult(int n, boolean isRelevant, long docNameExtractTime) {\n    if (Math.abs(numPoints+1 - n) > 1E-6) {\n      throw new IllegalArgumentException(\"point \"+n+\" illegal after \"+numPoints+\" points!\");\n    }\n    if (isRelevant) {\n      numGoodPoints+=1;\n      recallPoints.add(new RecallPoint(n,numGoodPoints));\n      if (recallPoints.size()==1 && n<=5) { // first point, but only within 5 top scores. \n        mrr =  1.0 / n;\n      }\n    }\n    numPoints = n;\n    double p = numGoodPoints / numPoints;\n    if (isRelevant) {\n      pReleventSum += p;\n    }\n    if (n<pAt.length) {\n      pAt[n] = p;\n    }\n    recall = maxGoodPoints<=0 ? p : numGoodPoints/maxGoodPoints;\n    docNamesExtractTime += docNameExtractTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#addResult(int,boolean,long).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/QualityStats#addResult(int,boolean,long).mjava","sourceNew":"  /**\n   * Add a (possibly relevant) doc.\n   * @param n rank of the added doc (its ordinal position within the query results).\n   * @param isRelevant true if the added doc is relevant, false otherwise.\n   */\n  public void addResult(int n, boolean isRelevant, long docNameExtractTime) {\n    if (Math.abs(numPoints+1 - n) > 1E-6) {\n      throw new IllegalArgumentException(\"point \"+n+\" illegal after \"+numPoints+\" points!\");\n    }\n    if (isRelevant) {\n      numGoodPoints+=1;\n      recallPoints.add(new RecallPoint(n,numGoodPoints));\n      if (recallPoints.size()==1 && n<=5) { // first point, but only within 5 top scores. \n        mrr =  1.0 / n;\n      }\n    }\n    numPoints = n;\n    double p = numGoodPoints / numPoints;\n    if (isRelevant) {\n      pReleventSum += p;\n    }\n    if (n<pAt.length) {\n      pAt[n] = p;\n    }\n    recall = maxGoodPoints<=0 ? p : numGoodPoints/maxGoodPoints;\n    docNamesExtractTime += docNameExtractTime;\n  }\n\n","sourceOld":"  /**\n   * Add a (possibly relevant) doc.\n   * @param n rank of the added doc (its ordinal position within the query results).\n   * @param isRelevant true if the added doc is relevant, false otherwise.\n   */\n  public void addResult(int n, boolean isRelevant, long docNameExtractTime) {\n    if (Math.abs(numPoints+1 - n) > 1E-6) {\n      throw new IllegalArgumentException(\"point \"+n+\" illegal after \"+numPoints+\" points!\");\n    }\n    if (isRelevant) {\n      numGoodPoints+=1;\n      recallPoints.add(new RecallPoint(n,numGoodPoints));\n      if (recallPoints.size()==1 && n<=5) { // first point, but only within 5 top scores. \n        mrr =  1.0 / n;\n      }\n    }\n    numPoints = n;\n    double p = numGoodPoints / numPoints;\n    if (isRelevant) {\n      pReleventSum += p;\n    }\n    if (n<pAt.length) {\n      pAt[n] = p;\n    }\n    recall = maxGoodPoints<=0 ? p : numGoodPoints/maxGoodPoints;\n    docNamesExtractTime += docNameExtractTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","b89678825b68eccaf09e6ab71675fc0b0af1e099","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}