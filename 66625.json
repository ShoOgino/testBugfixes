{"path":"lucene/sandbox/src/java/org/apache/lucene/document/HalfFloatPoint#roundShift(int,int).mjava","commits":[{"id":"b5125dbd3878ae934da6ff9243253c2f88b7b6c5","date":1463994309,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/HalfFloatPoint#roundShift(int,int).mjava","pathOld":"/dev/null","sourceNew":"  // divide by 2^shift and round to the closest int\n  // round to even in case of tie\n  static int roundShift(int i, int shift) {\n    assert shift > 0;\n    i += 1 << (shift - 1); // add 2^(shift-1) so that we round rather than truncate\n    i -= (i >>> shift) & 1; // and subtract the shift-th bit so that we round to even in case of tie\n    return i >>> shift;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","date":1464066565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/HalfFloatPoint#roundShift(int,int).mjava","pathOld":"/dev/null","sourceNew":"  // divide by 2^shift and round to the closest int\n  // round to even in case of tie\n  static int roundShift(int i, int shift) {\n    assert shift > 0;\n    i += 1 << (shift - 1); // add 2^(shift-1) so that we round rather than truncate\n    i -= (i >>> shift) & 1; // and subtract the shift-th bit so that we round to even in case of tie\n    return i >>> shift;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/HalfFloatPoint#roundShift(int,int).mjava","pathOld":"/dev/null","sourceNew":"  // divide by 2^shift and round to the closest int\n  // round to even in case of tie\n  static int roundShift(int i, int shift) {\n    assert shift > 0;\n    i += 1 << (shift - 1); // add 2^(shift-1) so that we round rather than truncate\n    i -= (i >>> shift) & 1; // and subtract the shift-th bit so that we round to even in case of tie\n    return i >>> shift;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5125dbd3878ae934da6ff9243253c2f88b7b6c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5125dbd3878ae934da6ff9243253c2f88b7b6c5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"]},"commit2Childs":{"b5125dbd3878ae934da6ff9243253c2f88b7b6c5":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5125dbd3878ae934da6ff9243253c2f88b7b6c5","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}