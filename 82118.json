{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#moveDrillDownOnlyClauses(DrillDownQuery,FacetSearchParams).mjava","commits":[{"id":"e70df4d80cde893a6897f8e6543c2d7666b73d7a","date":1365615272,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#moveDrillDownOnlyClauses(DrillDownQuery,FacetSearchParams).mjava","pathOld":"/dev/null","sourceNew":"  /** Moves any drill-downs that don't have a corresponding\n   *  facet request into the baseQuery.  This is unusual,\n   *  yet allowed, because typically the added drill-downs are because\n   *  the user has clicked on previously presented facets,\n   *  and those same facets would be computed this time\n   *  around. */\n  private static DrillDownQuery moveDrillDownOnlyClauses(DrillDownQuery in, FacetSearchParams fsp) {\n    Set<String> facetDims = new HashSet<String>();\n    for(FacetRequest fr : fsp.facetRequests) {\n      if (fr.categoryPath.length == 0) {\n        throw new IllegalArgumentException(\"all FacetRequests must have CategoryPath with length > 0\");\n      }\n      facetDims.add(fr.categoryPath.components[0]);\n    }\n\n    BooleanClause[] clauses = in.getBooleanQuery().getClauses();\n    Map<String,Integer> drillDownDims = in.getDims();\n\n    int startClause;\n    if (clauses.length == drillDownDims.size()) {\n      startClause = 0;\n    } else {\n      assert clauses.length == 1+drillDownDims.size();\n      startClause = 1;\n    }\n\n    // Break out drill-down clauses that have no\n    // corresponding facet request and move them inside the\n    // baseQuery:\n    List<Query> nonFacetClauses = new ArrayList<Query>();\n    List<Query> facetClauses = new ArrayList<Query>();\n    for(int i=startClause;i<clauses.length;i++) {\n      Query q = clauses[i].getQuery();\n      String dim = in.getDim(q);\n      if (!facetDims.contains(dim)) {\n        nonFacetClauses.add(q);\n      } else {\n        facetClauses.add(q);\n      }\n    }\n\n    if (!nonFacetClauses.isEmpty()) {\n      BooleanQuery newBaseQuery = new BooleanQuery(true);\n      if (startClause == 1) {\n        // Add original basaeQuery:\n        newBaseQuery.add(clauses[0].getQuery(), BooleanClause.Occur.MUST);\n      }\n      for(Query q : nonFacetClauses) {\n        newBaseQuery.add(q, BooleanClause.Occur.MUST);\n      }\n\n      return new DrillDownQuery(fsp.indexingParams, newBaseQuery, facetClauses);\n    } else {\n      // No change:\n      return in;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["416910ae9ffe752ba5b6334f75d6c36e019626cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"416910ae9ffe752ba5b6334f75d6c36e019626cc","date":1367953778,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#moveDrillDownOnlyClauses(DrillDownQuery,FacetSearchParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#moveDrillDownOnlyClauses(DrillDownQuery,FacetSearchParams).mjava","sourceNew":"  /** Moves any drill-downs that don't have a corresponding\n   *  facet request into the baseQuery.  This is unusual,\n   *  yet allowed, because typically the added drill-downs are because\n   *  the user has clicked on previously presented facets,\n   *  and those same facets would be computed this time\n   *  around. */\n  private static DrillDownQuery moveDrillDownOnlyClauses(DrillDownQuery in, FacetSearchParams fsp) {\n    Set<String> facetDims = new HashSet<String>();\n    for(FacetRequest fr : fsp.facetRequests) {\n      if (fr.categoryPath.length == 0) {\n        throw new IllegalArgumentException(\"all FacetRequests must have CategoryPath with length > 0\");\n      }\n      facetDims.add(fr.categoryPath.components[0]);\n    }\n\n    BooleanClause[] clauses = in.getBooleanQuery().getClauses();\n    Map<String,Integer> drillDownDims = in.getDims();\n\n    String[] dimsByIndex = new String[drillDownDims.size()];\n    for(Map.Entry<String,Integer> ent : drillDownDims.entrySet()) {\n      dimsByIndex[ent.getValue()] = ent.getKey();\n    }\n\n    int startClause;\n    if (clauses.length == drillDownDims.size()) {\n      startClause = 0;\n    } else {\n      assert clauses.length == 1+drillDownDims.size();\n      startClause = 1;\n    }\n\n    // Break out drill-down clauses that have no\n    // corresponding facet request and move them inside the\n    // baseQuery:\n    List<Query> nonFacetClauses = new ArrayList<Query>();\n    List<Query> facetClauses = new ArrayList<Query>();\n    Map<String,Integer> dimToIndex = new LinkedHashMap<String,Integer>();\n    for(int i=startClause;i<clauses.length;i++) {\n      Query q = clauses[i].getQuery();\n      String dim = dimsByIndex[i-startClause];\n      if (!facetDims.contains(dim)) {\n        nonFacetClauses.add(q);\n      } else {\n        facetClauses.add(q);\n        dimToIndex.put(dim, dimToIndex.size());\n      }\n    }\n\n    if (!nonFacetClauses.isEmpty()) {\n      BooleanQuery newBaseQuery = new BooleanQuery(true);\n      if (startClause == 1) {\n        // Add original basaeQuery:\n        newBaseQuery.add(clauses[0].getQuery(), BooleanClause.Occur.MUST);\n      }\n      for(Query q : nonFacetClauses) {\n        newBaseQuery.add(q, BooleanClause.Occur.MUST);\n      }\n\n      return new DrillDownQuery(fsp.indexingParams, newBaseQuery, facetClauses, dimToIndex);\n    } else {\n      // No change:\n      return in;\n    }\n  }\n\n","sourceOld":"  /** Moves any drill-downs that don't have a corresponding\n   *  facet request into the baseQuery.  This is unusual,\n   *  yet allowed, because typically the added drill-downs are because\n   *  the user has clicked on previously presented facets,\n   *  and those same facets would be computed this time\n   *  around. */\n  private static DrillDownQuery moveDrillDownOnlyClauses(DrillDownQuery in, FacetSearchParams fsp) {\n    Set<String> facetDims = new HashSet<String>();\n    for(FacetRequest fr : fsp.facetRequests) {\n      if (fr.categoryPath.length == 0) {\n        throw new IllegalArgumentException(\"all FacetRequests must have CategoryPath with length > 0\");\n      }\n      facetDims.add(fr.categoryPath.components[0]);\n    }\n\n    BooleanClause[] clauses = in.getBooleanQuery().getClauses();\n    Map<String,Integer> drillDownDims = in.getDims();\n\n    int startClause;\n    if (clauses.length == drillDownDims.size()) {\n      startClause = 0;\n    } else {\n      assert clauses.length == 1+drillDownDims.size();\n      startClause = 1;\n    }\n\n    // Break out drill-down clauses that have no\n    // corresponding facet request and move them inside the\n    // baseQuery:\n    List<Query> nonFacetClauses = new ArrayList<Query>();\n    List<Query> facetClauses = new ArrayList<Query>();\n    for(int i=startClause;i<clauses.length;i++) {\n      Query q = clauses[i].getQuery();\n      String dim = in.getDim(q);\n      if (!facetDims.contains(dim)) {\n        nonFacetClauses.add(q);\n      } else {\n        facetClauses.add(q);\n      }\n    }\n\n    if (!nonFacetClauses.isEmpty()) {\n      BooleanQuery newBaseQuery = new BooleanQuery(true);\n      if (startClause == 1) {\n        // Add original basaeQuery:\n        newBaseQuery.add(clauses[0].getQuery(), BooleanClause.Occur.MUST);\n      }\n      for(Query q : nonFacetClauses) {\n        newBaseQuery.add(q, BooleanClause.Occur.MUST);\n      }\n\n      return new DrillDownQuery(fsp.indexingParams, newBaseQuery, facetClauses);\n    } else {\n      // No change:\n      return in;\n    }\n  }\n\n","bugFix":["e70df4d80cde893a6897f8e6543c2d7666b73d7a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8428426152984b387a961487efefbe9cf62acf","date":1385332540,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#moveDrillDownOnlyClauses(DrillDownQuery,FacetSearchParams).mjava","sourceNew":null,"sourceOld":"  /** Moves any drill-downs that don't have a corresponding\n   *  facet request into the baseQuery.  This is unusual,\n   *  yet allowed, because typically the added drill-downs are because\n   *  the user has clicked on previously presented facets,\n   *  and those same facets would be computed this time\n   *  around. */\n  private static DrillDownQuery moveDrillDownOnlyClauses(DrillDownQuery in, FacetSearchParams fsp) {\n    Set<String> facetDims = new HashSet<String>();\n    for(FacetRequest fr : fsp.facetRequests) {\n      if (fr.categoryPath.length == 0) {\n        throw new IllegalArgumentException(\"all FacetRequests must have CategoryPath with length > 0\");\n      }\n      facetDims.add(fr.categoryPath.components[0]);\n    }\n\n    BooleanClause[] clauses = in.getBooleanQuery().getClauses();\n    Map<String,Integer> drillDownDims = in.getDims();\n\n    String[] dimsByIndex = new String[drillDownDims.size()];\n    for(Map.Entry<String,Integer> ent : drillDownDims.entrySet()) {\n      dimsByIndex[ent.getValue()] = ent.getKey();\n    }\n\n    int startClause;\n    if (clauses.length == drillDownDims.size()) {\n      startClause = 0;\n    } else {\n      assert clauses.length == 1+drillDownDims.size();\n      startClause = 1;\n    }\n\n    // Break out drill-down clauses that have no\n    // corresponding facet request and move them inside the\n    // baseQuery:\n    List<Query> nonFacetClauses = new ArrayList<Query>();\n    List<Query> facetClauses = new ArrayList<Query>();\n    Map<String,Integer> dimToIndex = new LinkedHashMap<String,Integer>();\n    for(int i=startClause;i<clauses.length;i++) {\n      Query q = clauses[i].getQuery();\n      String dim = dimsByIndex[i-startClause];\n      if (!facetDims.contains(dim)) {\n        nonFacetClauses.add(q);\n      } else {\n        facetClauses.add(q);\n        dimToIndex.put(dim, dimToIndex.size());\n      }\n    }\n\n    if (!nonFacetClauses.isEmpty()) {\n      BooleanQuery newBaseQuery = new BooleanQuery(true);\n      if (startClause == 1) {\n        // Add original basaeQuery:\n        newBaseQuery.add(clauses[0].getQuery(), BooleanClause.Occur.MUST);\n      }\n      for(Query q : nonFacetClauses) {\n        newBaseQuery.add(q, BooleanClause.Occur.MUST);\n      }\n\n      return new DrillDownQuery(fsp.indexingParams, newBaseQuery, facetClauses, dimToIndex);\n    } else {\n      // No change:\n      return in;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/DrillSideways#moveDrillDownOnlyClauses(DrillDownQuery,FacetSearchParams).mjava","sourceNew":null,"sourceOld":"  /** Moves any drill-downs that don't have a corresponding\n   *  facet request into the baseQuery.  This is unusual,\n   *  yet allowed, because typically the added drill-downs are because\n   *  the user has clicked on previously presented facets,\n   *  and those same facets would be computed this time\n   *  around. */\n  private static DrillDownQuery moveDrillDownOnlyClauses(DrillDownQuery in, FacetSearchParams fsp) {\n    Set<String> facetDims = new HashSet<String>();\n    for(FacetRequest fr : fsp.facetRequests) {\n      if (fr.categoryPath.length == 0) {\n        throw new IllegalArgumentException(\"all FacetRequests must have CategoryPath with length > 0\");\n      }\n      facetDims.add(fr.categoryPath.components[0]);\n    }\n\n    BooleanClause[] clauses = in.getBooleanQuery().getClauses();\n    Map<String,Integer> drillDownDims = in.getDims();\n\n    String[] dimsByIndex = new String[drillDownDims.size()];\n    for(Map.Entry<String,Integer> ent : drillDownDims.entrySet()) {\n      dimsByIndex[ent.getValue()] = ent.getKey();\n    }\n\n    int startClause;\n    if (clauses.length == drillDownDims.size()) {\n      startClause = 0;\n    } else {\n      assert clauses.length == 1+drillDownDims.size();\n      startClause = 1;\n    }\n\n    // Break out drill-down clauses that have no\n    // corresponding facet request and move them inside the\n    // baseQuery:\n    List<Query> nonFacetClauses = new ArrayList<Query>();\n    List<Query> facetClauses = new ArrayList<Query>();\n    Map<String,Integer> dimToIndex = new LinkedHashMap<String,Integer>();\n    for(int i=startClause;i<clauses.length;i++) {\n      Query q = clauses[i].getQuery();\n      String dim = dimsByIndex[i-startClause];\n      if (!facetDims.contains(dim)) {\n        nonFacetClauses.add(q);\n      } else {\n        facetClauses.add(q);\n        dimToIndex.put(dim, dimToIndex.size());\n      }\n    }\n\n    if (!nonFacetClauses.isEmpty()) {\n      BooleanQuery newBaseQuery = new BooleanQuery(true);\n      if (startClause == 1) {\n        // Add original basaeQuery:\n        newBaseQuery.add(clauses[0].getQuery(), BooleanClause.Occur.MUST);\n      }\n      for(Query q : nonFacetClauses) {\n        newBaseQuery.add(q, BooleanClause.Occur.MUST);\n      }\n\n      return new DrillDownQuery(fsp.indexingParams, newBaseQuery, facetClauses, dimToIndex);\n    } else {\n      // No change:\n      return in;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"416910ae9ffe752ba5b6334f75d6c36e019626cc":["e70df4d80cde893a6897f8e6543c2d7666b73d7a"],"e70df4d80cde893a6897f8e6543c2d7666b73d7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["416910ae9ffe752ba5b6334f75d6c36e019626cc","2e8428426152984b387a961487efefbe9cf62acf"],"2e8428426152984b387a961487efefbe9cf62acf":["416910ae9ffe752ba5b6334f75d6c36e019626cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"416910ae9ffe752ba5b6334f75d6c36e019626cc":["3cc728b07df73b197e6d940d27f9b08b63918f13","2e8428426152984b387a961487efefbe9cf62acf"],"e70df4d80cde893a6897f8e6543c2d7666b73d7a":["416910ae9ffe752ba5b6334f75d6c36e019626cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e70df4d80cde893a6897f8e6543c2d7666b73d7a"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e8428426152984b387a961487efefbe9cf62acf":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}