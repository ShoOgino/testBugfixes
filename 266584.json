{"path":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.TermOrdsIterator#read(int[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.TermOrdsIterator#read(int[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocTermOrds.TermOrdsIterator#read(int[]).mjava","sourceNew":"    /** Buffer must be at least 5 ints long.  Returns number\n     *  of term ords placed into buffer; if this count is\n     *  less than buffer.length then that is the end. */\n    public int read(int[] buffer) {\n      int bufferUpto = 0;\n      if (arr == null) {\n        // code is inlined into upto\n        //System.out.println(\"inlined\");\n        int code = upto;\n        int delta = 0;\n        for (;;) {\n          delta = (delta << 7) | (code & 0x7f);\n          if ((code & 0x80)==0) {\n            if (delta==0) break;\n            tnum += delta - TNUM_OFFSET;\n            buffer[bufferUpto++] = ordBase+tnum;\n            //System.out.println(\"  tnum=\" + tnum);\n            delta = 0;\n          }\n          code >>>= 8;\n        }\n      } else {\n        // code is a pointer\n        for(;;) {\n          int delta = 0;\n          for(;;) {\n            byte b = arr[upto++];\n            delta = (delta << 7) | (b & 0x7f);\n            //System.out.println(\"    cycle: upto=\" + upto + \" delta=\" + delta + \" b=\" + b);\n            if ((b & 0x80) == 0) break;\n          }\n          //System.out.println(\"  delta=\" + delta);\n          if (delta == 0) break;\n          tnum += delta - TNUM_OFFSET;\n          //System.out.println(\"  tnum=\" + tnum);\n          buffer[bufferUpto++] = ordBase+tnum;\n          if (bufferUpto == buffer.length) {\n            break;\n          }\n        }\n      }\n\n      return bufferUpto;\n    }\n\n","sourceOld":"    /** Buffer must be at least 5 ints long.  Returns number\n     *  of term ords placed into buffer; if this count is\n     *  less than buffer.length then that is the end. */\n    public int read(int[] buffer) {\n      int bufferUpto = 0;\n      if (arr == null) {\n        // code is inlined into upto\n        //System.out.println(\"inlined\");\n        int code = upto;\n        int delta = 0;\n        for (;;) {\n          delta = (delta << 7) | (code & 0x7f);\n          if ((code & 0x80)==0) {\n            if (delta==0) break;\n            tnum += delta - TNUM_OFFSET;\n            buffer[bufferUpto++] = ordBase+tnum;\n            //System.out.println(\"  tnum=\" + tnum);\n            delta = 0;\n          }\n          code >>>= 8;\n        }\n      } else {\n        // code is a pointer\n        for(;;) {\n          int delta = 0;\n          for(;;) {\n            byte b = arr[upto++];\n            delta = (delta << 7) | (b & 0x7f);\n            //System.out.println(\"    cycle: upto=\" + upto + \" delta=\" + delta + \" b=\" + b);\n            if ((b & 0x80) == 0) break;\n          }\n          //System.out.println(\"  delta=\" + delta);\n          if (delta == 0) break;\n          tnum += delta - TNUM_OFFSET;\n          //System.out.println(\"  tnum=\" + tnum);\n          buffer[bufferUpto++] = ordBase+tnum;\n          if (bufferUpto == buffer.length) {\n            break;\n          }\n        }\n      }\n\n      return bufferUpto;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44e56f421c9a4407f8bef7c459b9e747ab3a62c4","date":1361044622,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.Iterator#read(int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.TermOrdsIterator#read(int[]).mjava","sourceNew":"    /** Buffer must be at least 5 ints long.  Returns number\n     *  of term ords placed into buffer; if this count is\n     *  less than buffer.length then that is the end. */\n    int read(int[] buffer) {\n      int bufferUpto = 0;\n      if (arr == null) {\n        // code is inlined into upto\n        //System.out.println(\"inlined\");\n        int code = upto;\n        int delta = 0;\n        for (;;) {\n          delta = (delta << 7) | (code & 0x7f);\n          if ((code & 0x80)==0) {\n            if (delta==0) break;\n            tnum += delta - TNUM_OFFSET;\n            buffer[bufferUpto++] = ordBase+tnum;\n            //System.out.println(\"  tnum=\" + tnum);\n            delta = 0;\n          }\n          code >>>= 8;\n        }\n      } else {\n        // code is a pointer\n        for(;;) {\n          int delta = 0;\n          for(;;) {\n            byte b = arr[upto++];\n            delta = (delta << 7) | (b & 0x7f);\n            //System.out.println(\"    cycle: upto=\" + upto + \" delta=\" + delta + \" b=\" + b);\n            if ((b & 0x80) == 0) break;\n          }\n          //System.out.println(\"  delta=\" + delta);\n          if (delta == 0) break;\n          tnum += delta - TNUM_OFFSET;\n          //System.out.println(\"  tnum=\" + tnum);\n          buffer[bufferUpto++] = ordBase+tnum;\n          if (bufferUpto == buffer.length) {\n            break;\n          }\n        }\n      }\n\n      return bufferUpto;\n    }\n\n","sourceOld":"    /** Buffer must be at least 5 ints long.  Returns number\n     *  of term ords placed into buffer; if this count is\n     *  less than buffer.length then that is the end. */\n    public int read(int[] buffer) {\n      int bufferUpto = 0;\n      if (arr == null) {\n        // code is inlined into upto\n        //System.out.println(\"inlined\");\n        int code = upto;\n        int delta = 0;\n        for (;;) {\n          delta = (delta << 7) | (code & 0x7f);\n          if ((code & 0x80)==0) {\n            if (delta==0) break;\n            tnum += delta - TNUM_OFFSET;\n            buffer[bufferUpto++] = ordBase+tnum;\n            //System.out.println(\"  tnum=\" + tnum);\n            delta = 0;\n          }\n          code >>>= 8;\n        }\n      } else {\n        // code is a pointer\n        for(;;) {\n          int delta = 0;\n          for(;;) {\n            byte b = arr[upto++];\n            delta = (delta << 7) | (b & 0x7f);\n            //System.out.println(\"    cycle: upto=\" + upto + \" delta=\" + delta + \" b=\" + b);\n            if ((b & 0x80) == 0) break;\n          }\n          //System.out.println(\"  delta=\" + delta);\n          if (delta == 0) break;\n          tnum += delta - TNUM_OFFSET;\n          //System.out.println(\"  tnum=\" + tnum);\n          buffer[bufferUpto++] = ordBase+tnum;\n          if (bufferUpto == buffer.length) {\n            break;\n          }\n        }\n      }\n\n      return bufferUpto;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.Iterator#read(int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocTermOrds.TermOrdsIterator#read(int[]).mjava","sourceNew":"    /** Buffer must be at least 5 ints long.  Returns number\n     *  of term ords placed into buffer; if this count is\n     *  less than buffer.length then that is the end. */\n    int read(int[] buffer) {\n      int bufferUpto = 0;\n      if (arr == null) {\n        // code is inlined into upto\n        //System.out.println(\"inlined\");\n        int code = upto;\n        int delta = 0;\n        for (;;) {\n          delta = (delta << 7) | (code & 0x7f);\n          if ((code & 0x80)==0) {\n            if (delta==0) break;\n            tnum += delta - TNUM_OFFSET;\n            buffer[bufferUpto++] = ordBase+tnum;\n            //System.out.println(\"  tnum=\" + tnum);\n            delta = 0;\n          }\n          code >>>= 8;\n        }\n      } else {\n        // code is a pointer\n        for(;;) {\n          int delta = 0;\n          for(;;) {\n            byte b = arr[upto++];\n            delta = (delta << 7) | (b & 0x7f);\n            //System.out.println(\"    cycle: upto=\" + upto + \" delta=\" + delta + \" b=\" + b);\n            if ((b & 0x80) == 0) break;\n          }\n          //System.out.println(\"  delta=\" + delta);\n          if (delta == 0) break;\n          tnum += delta - TNUM_OFFSET;\n          //System.out.println(\"  tnum=\" + tnum);\n          buffer[bufferUpto++] = ordBase+tnum;\n          if (bufferUpto == buffer.length) {\n            break;\n          }\n        }\n      }\n\n      return bufferUpto;\n    }\n\n","sourceOld":"    /** Buffer must be at least 5 ints long.  Returns number\n     *  of term ords placed into buffer; if this count is\n     *  less than buffer.length then that is the end. */\n    public int read(int[] buffer) {\n      int bufferUpto = 0;\n      if (arr == null) {\n        // code is inlined into upto\n        //System.out.println(\"inlined\");\n        int code = upto;\n        int delta = 0;\n        for (;;) {\n          delta = (delta << 7) | (code & 0x7f);\n          if ((code & 0x80)==0) {\n            if (delta==0) break;\n            tnum += delta - TNUM_OFFSET;\n            buffer[bufferUpto++] = ordBase+tnum;\n            //System.out.println(\"  tnum=\" + tnum);\n            delta = 0;\n          }\n          code >>>= 8;\n        }\n      } else {\n        // code is a pointer\n        for(;;) {\n          int delta = 0;\n          for(;;) {\n            byte b = arr[upto++];\n            delta = (delta << 7) | (b & 0x7f);\n            //System.out.println(\"    cycle: upto=\" + upto + \" delta=\" + delta + \" b=\" + b);\n            if ((b & 0x80) == 0) break;\n          }\n          //System.out.println(\"  delta=\" + delta);\n          if (delta == 0) break;\n          tnum += delta - TNUM_OFFSET;\n          //System.out.println(\"  tnum=\" + tnum);\n          buffer[bufferUpto++] = ordBase+tnum;\n          if (bufferUpto == buffer.length) {\n            break;\n          }\n        }\n      }\n\n      return bufferUpto;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44e56f421c9a4407f8bef7c459b9e747ab3a62c4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","44e56f421c9a4407f8bef7c459b9e747ab3a62c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddbb72a33557d2b5bc22ee95daf3281c43560502"]},"commit2Childs":{"44e56f421c9a4407f8bef7c459b9e747ab3a62c4":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["44e56f421c9a4407f8bef7c459b9e747ab3a62c4","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}