{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory dir = newDirectory(random);\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory dir = newDirectory(random);\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", ft, tee);\n    Field f2 = new Field(\"field\", ft, sink);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    Field f1 = new Field(\"field\", tee, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    Field f2 = new Field(\"field\", sink, Field.TermVector.WITH_POSITIONS_OFFSETS);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf7efd82433f3f64684711c16edfd149db6af111","date":1317013128,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.reusableTokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", ft, tee);\n    Field f2 = new Field(\"field\", ft, sink);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(analyzer.tokenStream(\"field\", new StringReader(\"abcd   \")));\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", ft, tee);\n    Field f2 = new Field(\"field\", ft, sink);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", ft, tee);\n    Field f2 = new Field(\"field\", ft, sink);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.reusableTokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", ft, tee);\n    Field f2 = new Field(\"field\", ft, sink);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", ft, tee);\n    Field f2 = new Field(\"field\", ft, sink);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    OffsetAttribute offsetAtt = positions.attributes().getAttribute(OffsetAttribute.class);\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, offsetAtt.startOffset());\n    assertEquals(4, offsetAtt.endOffset());\n    positions.nextPosition();\n    assertEquals(8, offsetAtt.startOffset());\n    assertEquals(12, offsetAtt.endOffset());\n    assertEquals(DocsEnum.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    TermVectorOffsetInfo[] termOffsets = ((TermPositionVector) r.getTermFreqVector(0, \"field\")).getOffsets(0);\n    assertEquals(2, termOffsets.length);\n    assertEquals(0, termOffsets[0].getStartOffset());\n    assertEquals(4, termOffsets[0].getEndOffset());\n    assertEquals(8, termOffsets[1].getStartOffset());\n    assertEquals(12, termOffsets[1].getEndOffset());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","date":1323050351,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    OffsetAttribute offsetAtt = positions.attributes().getAttribute(OffsetAttribute.class);\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, offsetAtt.startOffset());\n    assertEquals(4, offsetAtt.endOffset());\n    positions.nextPosition();\n    assertEquals(8, offsetAtt.startOffset());\n    assertEquals(12, offsetAtt.endOffset());\n    assertEquals(DocsEnum.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    OffsetAttribute offsetAtt = positions.attributes().getAttribute(OffsetAttribute.class);\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, offsetAtt.startOffset());\n    assertEquals(4, offsetAtt.endOffset());\n    positions.nextPosition();\n    assertEquals(8, offsetAtt.startOffset());\n    assertEquals(12, offsetAtt.endOffset());\n    assertEquals(DocsEnum.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    OffsetAttribute offsetAtt = positions.attributes().getAttribute(OffsetAttribute.class);\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, offsetAtt.startOffset());\n    assertEquals(4, offsetAtt.endOffset());\n    positions.nextPosition();\n    assertEquals(8, offsetAtt.startOffset());\n    assertEquals(12, offsetAtt.endOffset());\n    assertEquals(DocsEnum.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    OffsetAttribute offsetAtt = positions.attributes().getAttribute(OffsetAttribute.class);\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, offsetAtt.startOffset());\n    assertEquals(4, offsetAtt.endOffset());\n    positions.nextPosition();\n    assertEquals(8, offsetAtt.startOffset());\n    assertEquals(12, offsetAtt.endOffset());\n    assertEquals(DocsEnum.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    OffsetAttribute offsetAtt = positions.attributes().getAttribute(OffsetAttribute.class);\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, offsetAtt.startOffset());\n    assertEquals(4, offsetAtt.endOffset());\n    positions.nextPosition();\n    assertEquals(8, offsetAtt.startOffset());\n    assertEquals(12, offsetAtt.endOffset());\n    assertEquals(DocsEnum.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir, true);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    OffsetAttribute offsetAtt = positions.attributes().getAttribute(OffsetAttribute.class);\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, offsetAtt.startOffset());\n    assertEquals(4, offsetAtt.endOffset());\n    positions.nextPosition();\n    assertEquals(8, offsetAtt.startOffset());\n    assertEquals(12, offsetAtt.endOffset());\n    assertEquals(DocsEnum.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocsEnum.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null);\n    OffsetAttribute offsetAtt = positions.attributes().getAttribute(OffsetAttribute.class);\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, offsetAtt.startOffset());\n    assertEquals(4, offsetAtt.endOffset());\n    positions.nextPosition();\n    assertEquals(8, offsetAtt.startOffset());\n    assertEquals(12, offsetAtt.endOffset());\n    assertEquals(DocsEnum.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocsEnum.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocsEnum.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdb5e42b0cecd8dfb27767a02ada71899bf17917","date":1334100099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.getUniqueTermCount());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter#testEndOffsetPositionWithTeeSinkTokenFilter().mjava","sourceNew":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1448\n  // TODO: instead of testing it this way, we can test \n  // with BaseTokenStreamTestCase now...\n  public void testEndOffsetPositionWithTeeSinkTokenFilter() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    TokenStream tokenStream = analyzer.tokenStream(\"field\", new StringReader(\"abcd   \"));\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(tokenStream);\n    TokenStream sink = tee.newSinkTokenStream();\n    FieldType ft = new FieldType(TextField.TYPE_UNSTORED);\n    ft.setStoreTermVectors(true);\n    ft.setStoreTermVectorOffsets(true);\n    ft.setStoreTermVectorPositions(true);\n    Field f1 = new Field(\"field\", tee, ft);\n    Field f2 = new Field(\"field\", sink, ft);\n    doc.add(f1);\n    doc.add(f2);\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    Terms vector = r.getTermVectors(0).terms(\"field\");\n    assertEquals(1, vector.size());\n    TermsEnum termsEnum = vector.iterator(null);\n    termsEnum.next();\n    assertEquals(2, termsEnum.totalTermFreq());\n    DocsAndPositionsEnum positions = termsEnum.docsAndPositions(null, null, true);\n    assertTrue(positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(2, positions.freq());\n    positions.nextPosition();\n    assertEquals(0, positions.startOffset());\n    assertEquals(4, positions.endOffset());\n    positions.nextPosition();\n    assertEquals(8, positions.startOffset());\n    assertEquals(12, positions.endOffset());\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, positions.nextDoc());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["31f025ae60076ae95274433f3fe8e6ace2857a87","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["3cc749c053615f5871f3b95715fe292f34e70a53","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","1f653cfcf159baeaafe5d01682a911e95bba4012"],"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["3cc749c053615f5871f3b95715fe292f34e70a53"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["cf7efd82433f3f64684711c16edfd149db6af111"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"5a238fc456663f685a9db1ed8d680e348bb45171":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"3cc749c053615f5871f3b95715fe292f34e70a53":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf7efd82433f3f64684711c16edfd149db6af111":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["1f653cfcf159baeaafe5d01682a911e95bba4012","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1f653cfcf159baeaafe5d01682a911e95bba4012","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["3cc749c053615f5871f3b95715fe292f34e70a53","9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["5a238fc456663f685a9db1ed8d680e348bb45171","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["1509f151d7692d84fae414b2b799ac06ba60fcb4","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fcbc12aa8147f5203ca283e7252ba4280d6ffd16","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cf7efd82433f3f64684711c16edfd149db6af111"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["3cc749c053615f5871f3b95715fe292f34e70a53"],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","5a238fc456663f685a9db1ed8d680e348bb45171"],"3cc749c053615f5871f3b95715fe292f34e70a53":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"cf7efd82433f3f64684711c16edfd149db6af111":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","31f025ae60076ae95274433f3fe8e6ace2857a87"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5a238fc456663f685a9db1ed8d680e348bb45171","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}