{"path":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","commits":[{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":2,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String,boolean).mjava","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    // nocommit todo\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field, boolean direct) throws IOException {\n    // nocommit todo\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7178a82d1134111f4511f28bb9ad57573a57d93","date":1354112608,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    // nocommit todo\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ff8fcbb5ae20d2286cb666d4694f0a8c3c552f6","date":1357912799,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    return null; // nocommit: UOE\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94a2758d07e0d83d524af25cee0d8a04b6394f47","date":1357921039,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    return MultiSimpleDocValues.simpleSortedValues(in, field);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    return null; // nocommit: UOE\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    return MultiDocValues.getSortedValues(in, field);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    return MultiSimpleDocValues.simpleSortedValues(in, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b41c90d5f091505447d4a21986ab79bbb28b3b5d","date":1360010303,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          cachedOrdMaps.put(field, map);\n        }\n        return dv;\n      }\n    }\n    // cached multi dv\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedDocValues v = context.reader().getSortedDocValues(field);\n      if (v == null) {\n        v = SortedDocValues.EMPTY;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    return MultiDocValues.getSortedValues(in, field);\n  }\n\n","bugFix":null,"bugIntro":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a9952ee9b22c84393296f00fdd8051969db9dd9","date":1360105106,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          cachedOrdMaps.put(field, map);\n        }\n        return dv;\n      }\n    }\n    if (true) { // nocommit\n      return MultiDocValues.getSortedValues(in, field);\n    }\n    // cached multi dv\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedDocValues v = context.reader().getSortedDocValues(field);\n      if (v == null) {\n        v = SortedDocValues.EMPTY;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          cachedOrdMaps.put(field, map);\n        }\n        return dv;\n      }\n    }\n    // cached multi dv\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedDocValues v = context.reader().getSortedDocValues(field);\n      if (v == null) {\n        v = SortedDocValues.EMPTY;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf3d78aec0a22d08438820ca1492a3ea4371466e","date":1360105770,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached multi dv\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedDocValues v = context.reader().getSortedDocValues(field);\n      if (v == null) {\n        v = SortedDocValues.EMPTY;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          cachedOrdMaps.put(field, map);\n        }\n        return dv;\n      }\n    }\n    if (true) { // nocommit\n      return MultiDocValues.getSortedValues(in, field);\n    }\n    // cached multi dv\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedDocValues v = context.reader().getSortedDocValues(field);\n      if (v == null) {\n        v = SortedDocValues.EMPTY;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached multi dv\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedDocValues v = context.reader().getSortedDocValues(field);\n      if (v == null) {\n        v = SortedDocValues.EMPTY;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea3c18d8f37008425940502c58fd80ba4b5397c1","date":1361154566,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED) {\n      return null;\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedDocValues v = context.reader().getSortedDocValues(field);\n      if (v == null) {\n        v = SortedDocValues.EMPTY;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached multi dv\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedDocValues v = context.reader().getSortedDocValues(field);\n      if (v == null) {\n        v = SortedDocValues.EMPTY;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED) {\n      return null;\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedDocValues v = context.reader().getSortedDocValues(field);\n      if (v == null) {\n        v = SortedDocValues.EMPTY;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached multi dv\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedDocValues v = context.reader().getSortedDocValues(field);\n      if (v == null) {\n        v = SortedDocValues.EMPTY;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e","date":1397206443,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED) {\n      return null;\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedDocValues v = context.reader().getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.EMPTY_SORTED;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED) {\n      return null;\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedDocValues v = context.reader().getSortedDocValues(field);\n      if (v == null) {\n        v = SortedDocValues.EMPTY;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","bugFix":["b41c90d5f091505447d4a21986ab79bbb28b3b5d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED) {\n      return null;\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedDocValues v = context.reader().getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED) {\n      return null;\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedDocValues v = context.reader().getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.EMPTY_SORTED;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED) {\n      return null;\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      SortedDocValues v = context.reader().getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED) {\n      return null;\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedDocValues v = context.reader().getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED) {\n      return null;\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      SortedDocValues v = context.reader().getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED) {\n      return null;\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      SortedDocValues v = context.reader().getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","bugFix":["cf3d78aec0a22d08438820ca1492a3ea4371466e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0764b2ccb75b631aac6dfbfaca0d91f78acd813","date":1438795032,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED) {\n        return null;\n      }\n      SortedDocValues v = reader.getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED) {\n      return null;\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      SortedDocValues v = context.reader().getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SlowCompositeReaderWrapper#getSortedDocValues(String).mjava","sourceNew":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED) {\n        return null;\n      }\n      SortedDocValues v = reader.getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED) {\n        return null;\n      }\n      SortedDocValues v = reader.getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf3d78aec0a22d08438820ca1492a3ea4371466e":["8a9952ee9b22c84393296f00fdd8051969db9dd9"],"b41c90d5f091505447d4a21986ab79bbb28b3b5d":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"ea3c18d8f37008425940502c58fd80ba4b5397c1":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"f0764b2ccb75b631aac6dfbfaca0d91f78acd813":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"f7178a82d1134111f4511f28bb9ad57573a57d93":["a4d374b2bebd0d52acaa61038fbf23068620fba7"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4ff8fcbb5ae20d2286cb666d4694f0a8c3c552f6":["f7178a82d1134111f4511f28bb9ad57573a57d93"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","ea3c18d8f37008425940502c58fd80ba4b5397c1"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["f0764b2ccb75b631aac6dfbfaca0d91f78acd813"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["94a2758d07e0d83d524af25cee0d8a04b6394f47"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf3d78aec0a22d08438820ca1492a3ea4371466e"],"8a9952ee9b22c84393296f00fdd8051969db9dd9":["b41c90d5f091505447d4a21986ab79bbb28b3b5d"],"94a2758d07e0d83d524af25cee0d8a04b6394f47":["4ff8fcbb5ae20d2286cb666d4694f0a8c3c552f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"]},"commit2Childs":{"cf3d78aec0a22d08438820ca1492a3ea4371466e":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"b41c90d5f091505447d4a21986ab79bbb28b3b5d":["8a9952ee9b22c84393296f00fdd8051969db9dd9"],"ea3c18d8f37008425940502c58fd80ba4b5397c1":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"f0764b2ccb75b631aac6dfbfaca0d91f78acd813":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"f7178a82d1134111f4511f28bb9ad57573a57d93":["4ff8fcbb5ae20d2286cb666d4694f0a8c3c552f6"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["f7178a82d1134111f4511f28bb9ad57573a57d93"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["f0764b2ccb75b631aac6dfbfaca0d91f78acd813"],"4ff8fcbb5ae20d2286cb666d4694f0a8c3c552f6":["94a2758d07e0d83d524af25cee0d8a04b6394f47"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["b41c90d5f091505447d4a21986ab79bbb28b3b5d"],"8a9952ee9b22c84393296f00fdd8051969db9dd9":["cf3d78aec0a22d08438820ca1492a3ea4371466e"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["ea3c18d8f37008425940502c58fd80ba4b5397c1","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"94a2758d07e0d83d524af25cee0d8a04b6394f47":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4d374b2bebd0d52acaa61038fbf23068620fba7","d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}