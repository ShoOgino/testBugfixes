{"path":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","commits":[{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,String> props2 = new HashMap<String,String>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getShards().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.get(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,String> props2 = new HashMap<String,String>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getShards().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.get(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,String> props2 = new HashMap<String,String>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getShards().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.get(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,String> props2 = new HashMap<String,String>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    CloudState cloudState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      cloudState2 = zkController2.getCloudState();\n      slices = cloudState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getShards().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.get(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = cloudState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getCloudState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getCloudState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getCloudState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getCloudState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,String> props2 = new HashMap<String,String>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getShards().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.get(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,String> props2 = new HashMap<String,String>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getShards().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,ZkNodeProps> shards = slice.getShards();\n\n    assertEquals(1, shards.size());\n\n    ZkNodeProps zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.get(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.get(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlices(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce","date":1370818281,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    if (container1.getZkController() != null) {\n      container1.preRegisterInZk(dcore);\n    }\n    \n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    if (container1.getZkController() != null) {\n      container1.preRegisterInZk(dcore);\n    }\n    \n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer();\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    if (container1.getZkController() != null) {\n      container1.preRegisterInZk(dcore);\n    }\n    \n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    if (container1.getZkController() != null) {\n      container1.preRegisterInZk(dcore);\n    }\n    \n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    if (container1.getZkController() != null) {\n      container1.preRegisterInZk(dcore);\n    }\n    \n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer();\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    if (container1.getZkController() != null) {\n      container1.preRegisterInZk(dcore);\n    }\n    \n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer();\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    if (container1.getZkController() != null) {\n      container1.preRegisterInZk(dcore);\n    }\n    \n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":["e0571cb12a71d379cc6bd0d3b70fe1d8867a109d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"660ba5d2f171f4cff12238ecf42746100549ce63","date":1373483187,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n    \n    CloudDescriptor cloudDesc = new CloudDescriptor();\n    cloudDesc.setCollectionName(\"testcore\");\n    dcore.setCloudDescriptor(cloudDesc);\n\n    if (container1.getZkController() != null) {\n      container1.preRegisterInZk(dcore);\n    }\n    \n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer();\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    if (container1.getZkController() != null) {\n      container1.preRegisterInZk(dcore);\n    }\n    \n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer();\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = buildCoreDescriptor(container1, \"testcore\", \"testcore\")\n                              .withDataDir(dataDir4.getAbsolutePath()).build();\n\n    if (container1.getZkController() != null) {\n      container1.preRegisterInZk(dcore);\n    }\n    \n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer();\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n    \n    CloudDescriptor cloudDesc = new CloudDescriptor();\n    cloudDesc.setCollectionName(\"testcore\");\n    dcore.setCloudDescriptor(cloudDesc);\n\n    if (container1.getZkController() != null) {\n      container1.preRegisterInZk(dcore);\n    }\n    \n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer();\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = buildCoreDescriptor(container1, \"testcore\", \"testcore\")\n                              .withDataDir(dataDir4.getAbsolutePath()).build();\n\n    if (container1.getZkController() != null) {\n      container1.preRegisterInZk(dcore);\n    }\n    \n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer();\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = new CoreDescriptor(container1, \"testcore\",\n        \"testcore\");\n    \n    dcore.setDataDir(dataDir4.getAbsolutePath());\n\n    if (container1.getZkController() != null) {\n      container1.preRegisterInZk(dcore);\n    }\n    \n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    container2 = init2.initialize();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0571cb12a71d379cc6bd0d3b70fe1d8867a109d","date":1377475564,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = buildCoreDescriptor(container1, \"testcore\", \"testcore\")\n                              .withDataDir(dataDir4.getAbsolutePath()).build();\n\n    if (container1.getZkController() != null) {\n      container1.preRegisterInZk(dcore);\n    }\n    \n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = buildCoreDescriptor(container1, \"testcore\", \"testcore\")\n                              .withDataDir(dataDir4.getAbsolutePath()).build();\n\n    if (container1.getZkController() != null) {\n      container1.preRegisterInZk(dcore);\n    }\n    \n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer();\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":["7116474e2e390259937401cf928323e0cbc75e60"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = buildCoreDescriptor(container1, \"testcore\", \"testcore\")\n                              .withDataDir(dataDir4.getAbsolutePath()).build();\n\n    if (container1.getZkController() != null) {\n      container1.preRegisterInZk(dcore);\n    }\n    \n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = buildCoreDescriptor(container1, \"testcore\", \"testcore\")\n                              .withDataDir(dataDir4.getAbsolutePath()).build();\n\n    if (container1.getZkController() != null) {\n      container1.preRegisterInZk(dcore);\n    }\n    \n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer();\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = buildCoreDescriptor(container1, \"testcore\", \"testcore\")\n                              .withDataDir(dataDir4.getAbsolutePath()).build();\n\n    if (container1.getZkController() != null) {\n      container1.preRegisterInZk(dcore);\n    }\n    \n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<String,Object>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = buildCoreDescriptor(container1, \"testcore\", \"testcore\")\n                              .withDataDir(dataDir4.getAbsolutePath()).build();\n\n    if (container1.getZkController() != null) {\n      container1.preRegisterInZk(dcore);\n    }\n    \n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85032ab568b3f50eabd577aaa994ba197db93758","date":1404157267,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = buildCoreDescriptor(container1, \"testcore\", \"testcore\")\n                              .withDataDir(dataDir4.getAbsolutePath()).build();\n\n    SolrCore core = container1.create(dcore);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = buildCoreDescriptor(container1, \"testcore\", \"testcore\")\n                              .withDataDir(dataDir4.getAbsolutePath()).build();\n\n    if (container1.getZkController() != null) {\n      container1.preRegisterInZk(dcore);\n    }\n    \n    SolrCore core = container1.create(dcore);\n    \n    container1.register(core, false);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        Utils.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = buildCoreDescriptor(container1, \"testcore\", \"testcore\")\n                              .withDataDir(dataDir4.getAbsolutePath()).build();\n\n    SolrCore core = container1.create(dcore);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        ZkStateReader.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = buildCoreDescriptor(container1, \"testcore\", \"testcore\")\n                              .withDataDir(dataDir4.getAbsolutePath()).build();\n\n    SolrCore core = container1.create(dcore);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        Utils.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    container1.create(\"testcore\", ImmutableMap.of(\"dataDir\", dataDir4.getAbsolutePath()));\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        Utils.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    CoreDescriptor dcore = buildCoreDescriptor(container1, \"testcore\", \"testcore\")\n                              .withDataDir(dataDir4.getAbsolutePath()).build();\n\n    SolrCore core = container1.create(dcore);\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", 1,1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.get(\"core_node1\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        Utils.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    container1.create(\"testcore\", ImmutableMap.of(\"dataDir\", dataDir4.getAbsolutePath()));\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5","date":1498283633,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", 1,1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.get(\"core_node1\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertTrue(zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\")\n      || zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"https://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\") );\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", 1,1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.get(\"core_node1\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", 1,1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.get(\"core_node1\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertTrue(zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\")\n      || zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"https://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\") );\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        Utils.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    container1.create(\"testcore\", ImmutableMap.of(\"dataDir\", dataDir4.getAbsolutePath()));\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", \"conf\", 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.get(\"core_node1\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertTrue(zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\")\n      || zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"https://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\") );\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", 1,1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.get(\"core_node1\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertTrue(zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\")\n      || zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"https://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\") );\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", \"conf\", 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.get(\"core_node1\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertTrue(zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\")\n      || zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"https://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\") );\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", 1,1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.get(\"core_node1\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertTrue(zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\")\n      || zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"https://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\") );\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", \"conf\", 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.get(\"core_node1\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertTrue(zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\")\n      || zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"https://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\") );\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n    \n   \n    Map<String,Object> props2 = new HashMap<>();\n    props2.put(\"configName\", \"conf1\");\n    ZkNodeProps zkProps2 = new ZkNodeProps(props2);\n    \n    SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(),\n        AbstractZkTestCase.TIMEOUT);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore\",\n        Utils.toJSON(zkProps2), CreateMode.PERSISTENT, true);\n    zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/testcore/shards\",\n        CreateMode.PERSISTENT, true);\n    zkClient.close();\n\n    container1.create(\"testcore\", ImmutableMap.of(\"dataDir\", dataDir4.getAbsolutePath()));\n    \n    ZkController zkController2 = container2.getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    Replica zkProps = shards.get(host + \":1661_solr_testcore\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":1661_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertEquals(\"http://\" + host + \":1661/solr\", zkProps.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    container3.shutdown();\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    // quickly kill / start client\n\n    container2.getZkController().getZkClient().getSolrZooKeeper().getConnection()\n        .disconnect();\n    container2.shutdown();\n\n    System.setProperty(\"hostPort\", \"1662\");\n    System.setProperty(\"solr.data.dir\", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());\n    container2 = new CoreContainer(solrHomeDirectory.getAbsolutePath());\n    container2.load();\n    System.clearProperty(\"hostPort\");\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (container1.getZkController().getClusterState().liveNodesContain(\n          container2.getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(container1.getZkController().getClusterState().liveNodesContain(\n        container2.getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"651c3ddf5bc1266d9de0a972ec05e59d77099a4c","date":1500969855,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", \"conf\", 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.values().iterator().next();\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertTrue(zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\")\n      || zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"https://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\") );\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", \"conf\", 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.get(\"core_node1\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertTrue(zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\")\n      || zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"https://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\") );\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", \"conf\", 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.values().iterator().next();\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertTrue(zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\")\n      || zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"https://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\") );\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", \"conf\", 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.get(\"core_node1\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertTrue(zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\")\n      || zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"https://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\") );\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", \"conf\", 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.values().iterator().next();\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertTrue(zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\")\n      || zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"https://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\") );\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", \"conf\", 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.get(\"core_node1\");\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertTrue(zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\")\n      || zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"https://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\") );\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", \"conf\", 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      DocCollection docCollection = clusterState2.getCollectionOrNull(\"testcore\");\n      slices = docCollection == null ? null : docCollection.getSlicesMap();\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.values().iterator().next();\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertTrue(zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\")\n      || zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"https://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\") );\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", \"conf\", 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.values().iterator().next();\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertTrue(zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\")\n      || zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"https://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\") );\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":["c5a558d54519c651068ddb202f03befefb1514a7"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", \"conf\", 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      DocCollection docCollection = clusterState2.getCollectionOrNull(\"testcore\");\n      slices = docCollection == null ? null : docCollection.getSlicesMap();\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.values().iterator().next();\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertTrue(zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\")\n      || zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"https://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\") );\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", \"conf\", 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      slices = clusterState2.getSlicesMap(\"testcore\");\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.values().iterator().next();\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertTrue(zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\")\n      || zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"https://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\") );\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest#testCoreRegistration().mjava","sourceNew":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", \"conf\", 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      DocCollection docCollection = clusterState2.getCollectionOrNull(\"testcore\");\n      slices = docCollection == null ? null : docCollection.getSlicesMap();\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.values().iterator().next();\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertTrue(zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\")\n      || zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"https://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\") );\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    JettySolrRunner j = cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n    \n    cluster.waitForJettyToStop(j);\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","sourceOld":"  @Test\n  public void testCoreRegistration() throws Exception {\n    System.setProperty(\"solrcloud.update.delay\", \"1\");\n\n    assertEquals(0, CollectionAdminRequest.createCollection(\"testcore\", \"conf\", 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient()).getStatus());\n\n    ZkController zkController2 = cluster.getJettySolrRunner(1).getCoreContainer().getZkController();\n\n    String host = zkController2.getHostName();\n    \n    // slight pause - TODO: takes an oddly long amount of time to schedule tasks\n    // with almost no delay ...\n    ClusterState clusterState2 = null;\n    Map<String,Slice> slices = null;\n    for (int i = 75; i > 0; i--) {\n      clusterState2 = zkController2.getClusterState();\n      DocCollection docCollection = clusterState2.getCollectionOrNull(\"testcore\");\n      slices = docCollection == null ? null : docCollection.getSlicesMap();\n      \n      if (slices != null && slices.containsKey(\"shard1\")\n          && slices.get(\"shard1\").getReplicasMap().size() > 0) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    assertNotNull(slices);\n    assertTrue(slices.containsKey(\"shard1\"));\n\n    Slice slice = slices.get(\"shard1\");\n    assertEquals(\"shard1\", slice.getName());\n\n    Map<String,Replica> shards = slice.getReplicasMap();\n\n    assertEquals(1, shards.size());\n\n    // assert this is core of container1\n    Replica zkProps = shards.values().iterator().next();\n\n    assertNotNull(zkProps);\n\n    assertEquals(host + \":\" +cluster.getJettySolrRunner(0).getLocalPort()+\"_solr\", zkProps.getStr(ZkStateReader.NODE_NAME_PROP));\n\n    assertTrue(zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"http://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\")\n      || zkProps.getStr(ZkStateReader.BASE_URL_PROP).contains(\"https://\" + host + \":\"+cluster.getJettySolrRunner(0).getLocalPort()+\"/solr\") );\n\n    // assert there are 3 live nodes\n    Set<String> liveNodes = clusterState2.getLiveNodes();\n    assertNotNull(liveNodes);\n    assertEquals(3, liveNodes.size());\n\n    // shut down node 2\n    cluster.stopJettySolrRunner(2);\n\n    // slight pause (15s timeout) for watch to trigger\n    for(int i = 0; i < (5 * 15); i++) {\n      if(zkController2.getClusterState().getLiveNodes().size() == 2) {\n        break;\n      }\n      Thread.sleep(200);\n    }\n\n    assertEquals(2, zkController2.getClusterState().getLiveNodes().size());\n\n    cluster.getJettySolrRunner(1).stop();\n    cluster.getJettySolrRunner(1).start();\n    \n    // pause for watch to trigger\n    for(int i = 0; i < 200; i++) {\n      if (cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n          cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n\n    assertTrue(cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getClusterState().liveNodesContain(\n        cluster.getJettySolrRunner(1).getCoreContainer().getZkController().getNodeName()));\n\n    // core.close();  // don't close - this core is managed by container1 now\n  }\n\n","bugFix":["a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"197bbedf08450ade98a11f4a0001448059666bec":["c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5"],"c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5":["a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["344b0840364d990b29b97467bfcc766ff8325d11"],"344b0840364d990b29b97467bfcc766ff8325d11":["a52341299179de5479672f7cf518bf4b173f34b3"],"07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce":["c5a558d54519c651068ddb202f03befefb1514a7"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","197bbedf08450ade98a11f4a0001448059666bec"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["660ba5d2f171f4cff12238ecf42746100549ce63"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e0571cb12a71d379cc6bd0d3b70fe1d8867a109d"],"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["28288370235ed02234a64753cdbf0c6ec096304a"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"fa64435b5902ce266c23755a4a00691a3285dab8":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["37a0f60745e53927c4c876cfe5b5a58170f0646c","e0571cb12a71d379cc6bd0d3b70fe1d8867a109d"],"407687e67faf6e1f02a211ca078d8e3eed631027":["fa64435b5902ce266c23755a4a00691a3285dab8","c5a558d54519c651068ddb202f03befefb1514a7"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["85032ab568b3f50eabd577aaa994ba197db93758"],"d264f386d864b5751209060e8886ca9845f70469":["07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5"],"28288370235ed02234a64753cdbf0c6ec096304a":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","197bbedf08450ade98a11f4a0001448059666bec"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a52341299179de5479672f7cf518bf4b173f34b3":["28288370235ed02234a64753cdbf0c6ec096304a","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["936cdd5882761db3b844afd6f84ab81cbb011a75","344b0840364d990b29b97467bfcc766ff8325d11"],"e0571cb12a71d379cc6bd0d3b70fe1d8867a109d":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"660ba5d2f171f4cff12238ecf42746100549ce63":["7116474e2e390259937401cf928323e0cbc75e60"],"c5a558d54519c651068ddb202f03befefb1514a7":["fa64435b5902ce266c23755a4a00691a3285dab8"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"85032ab568b3f50eabd577aaa994ba197db93758":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"7116474e2e390259937401cf928323e0cbc75e60":["660ba5d2f171f4cff12238ecf42746100549ce63"],"197bbedf08450ade98a11f4a0001448059666bec":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5":["197bbedf08450ade98a11f4a0001448059666bec","b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d264f386d864b5751209060e8886ca9845f70469"],"344b0840364d990b29b97467bfcc766ff8325d11":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","e0571cb12a71d379cc6bd0d3b70fe1d8867a109d"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["85032ab568b3f50eabd577aaa994ba197db93758"],"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["c3d9a2e4ec5db2bc6cc023d9a1fd387ceb5b69b5"],"fa64435b5902ce266c23755a4a00691a3285dab8":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"28288370235ed02234a64753cdbf0c6ec096304a":["651c3ddf5bc1266d9de0a972ec05e59d77099a4c","a52341299179de5479672f7cf518bf4b173f34b3"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["fa64435b5902ce266c23755a4a00691a3285dab8","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a52341299179de5479672f7cf518bf4b173f34b3":["344b0840364d990b29b97467bfcc766ff8325d11"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"e0571cb12a71d379cc6bd0d3b70fe1d8867a109d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"c5a558d54519c651068ddb202f03befefb1514a7":["07e5c48260f0b3abf6daef83f4ce8bd72b0be5ce","407687e67faf6e1f02a211ca078d8e3eed631027"],"660ba5d2f171f4cff12238ecf42746100549ce63":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"85032ab568b3f50eabd577aaa994ba197db93758":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","407687e67faf6e1f02a211ca078d8e3eed631027","8fd5be977c105554c6a7b68afcdbc511439723ab","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}