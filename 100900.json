{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#init(DataImporter,Map[String,String]).mjava","commits":[{"id":"b4804614e0358954d5d9f51128fcf3cd79e6e25b","date":1352831451,"type":1,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#init(DataImporter,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#init(DataImporter).mjava","sourceNew":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    super.init(dataImporter, params);\n    String collection = dataImporter.getCore().getCoreDescriptor()\n        .getCloudDescriptor().getCollectionName();\n    path = \"/configs/\" + collection + \"/\" + filename;\n    zkClient = dataImporter.getCore().getCoreDescriptor().getCoreContainer()\n        .getZkController().getZkClient();\n  }\n\n","sourceOld":"  @Override\n  public void init(DataImporter dataImporter) {\n    String collection = dataImporter.getCore().getCoreDescriptor()\n        .getCloudDescriptor().getCollectionName();\n    String persistFilename;\n    if(dataImporter.getHandlerName() != null){\n      persistFilename = dataImporter.getHandlerName() + \".properties\";\n    } else {\n      persistFilename = SimplePropertiesWriter.IMPORTER_PROPERTIES;\n    }\n    path = \"/configs/\" + collection + \"/\" + persistFilename;\n    zkClient = dataImporter.getCore().getCoreDescriptor().getCoreContainer()\n        .getZkController().getZkClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#init(DataImporter,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    super.init(dataImporter, params);\n    String collection = dataImporter.getCore().getCoreDescriptor()\n        .getCloudDescriptor().getCollectionName();\n    path = \"/configs/\" + collection + \"/\" + filename;\n    zkClient = dataImporter.getCore().getCoreDescriptor().getCoreContainer()\n        .getZkController().getZkClient();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a2d5d7d5a5bc6b66022afef3bcc646148c796b2","date":1357911503,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#init(DataImporter,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#init(DataImporter,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    super.init(dataImporter, params);    \n    zkClient = dataImporter.getCore().getCoreDescriptor().getCoreContainer()\n        .getZkController().getZkClient();\n  }\n\n","sourceOld":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    super.init(dataImporter, params);\n    String collection = dataImporter.getCore().getCoreDescriptor()\n        .getCloudDescriptor().getCollectionName();\n    path = \"/configs/\" + collection + \"/\" + filename;\n    zkClient = dataImporter.getCore().getCoreDescriptor().getCoreContainer()\n        .getZkController().getZkClient();\n  }\n\n","bugFix":["b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#init(DataImporter,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#init(DataImporter,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    super.init(dataImporter, params);    \n    zkClient = dataImporter.getCore().getCoreDescriptor().getCoreContainer()\n        .getZkController().getZkClient();\n  }\n\n","sourceOld":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    super.init(dataImporter, params);\n    String collection = dataImporter.getCore().getCoreDescriptor()\n        .getCloudDescriptor().getCollectionName();\n    path = \"/configs/\" + collection + \"/\" + filename;\n    zkClient = dataImporter.getCore().getCoreDescriptor().getCoreContainer()\n        .getZkController().getZkClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fd2b0e0e1141e4851e1281c4955c7690b374c3b","date":1474031826,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#init(DataImporter,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#init(DataImporter,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    super.init(dataImporter, params);    \n    zkClient = dataImporter.getCore().getCoreDescriptor().getCoreContainer().getZkController().getZkClient();\n  }\n\n","sourceOld":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    super.init(dataImporter, params);    \n    zkClient = dataImporter.getCore().getCoreDescriptor().getCoreContainer()\n        .getZkController().getZkClient();\n  }\n\n","bugFix":["b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#init(DataImporter,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#init(DataImporter,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    super.init(dataImporter, params);    \n    zkClient = dataImporter.getCore().getCoreDescriptor().getCoreContainer().getZkController().getZkClient();\n  }\n\n","sourceOld":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    super.init(dataImporter, params);    \n    zkClient = dataImporter.getCore().getCoreDescriptor().getCoreContainer()\n        .getZkController().getZkClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#init(DataImporter,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#init(DataImporter,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    super.init(dataImporter, params);    \n    zkClient = dataImporter.getCore().getCoreDescriptor().getCoreContainer().getZkController().getZkClient();\n  }\n\n","sourceOld":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    super.init(dataImporter, params);    \n    zkClient = dataImporter.getCore().getCoreDescriptor().getCoreContainer()\n        .getZkController().getZkClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#init(DataImporter,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#init(DataImporter,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    super.init(dataImporter, params);    \n    zkClient = dataImporter.getCore().getCoreContainer().getZkController().getZkClient();\n  }\n\n","sourceOld":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    super.init(dataImporter, params);    \n    zkClient = dataImporter.getCore().getCoreDescriptor().getCoreContainer().getZkController().getZkClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#init(DataImporter,Map[String,String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#init(DataImporter,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    super.init(dataImporter, params);    \n    zkClient = dataImporter.getCore().getCoreContainer().getZkController().getZkClient();\n  }\n\n","sourceOld":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    super.init(dataImporter, params);    \n    zkClient = dataImporter.getCore().getCoreDescriptor().getCoreContainer().getZkController().getZkClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#init(DataImporter,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void init(DataImporter dataImporter, Map<String, String> params) {\n    super.init(dataImporter, params);    \n    zkClient = dataImporter.getCore().getCoreContainer().getZkController().getZkClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"2a2d5d7d5a5bc6b66022afef3bcc646148c796b2":["b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2a2d5d7d5a5bc6b66022afef3bcc646148c796b2","9fd2b0e0e1141e4851e1281c4955c7690b374c3b"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"9fd2b0e0e1141e4851e1281c4955c7690b374c3b":["2a2d5d7d5a5bc6b66022afef3bcc646148c796b2"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2a2d5d7d5a5bc6b66022afef3bcc646148c796b2","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["407687e67faf6e1f02a211ca078d8e3eed631027","2a2d5d7d5a5bc6b66022afef3bcc646148c796b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["2a2d5d7d5a5bc6b66022afef3bcc646148c796b2","407687e67faf6e1f02a211ca078d8e3eed631027"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a2d5d7d5a5bc6b66022afef3bcc646148c796b2":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","9fd2b0e0e1141e4851e1281c4955c7690b374c3b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4804614e0358954d5d9f51128fcf3cd79e6e25b","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"9fd2b0e0e1141e4851e1281c4955c7690b374c3b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}