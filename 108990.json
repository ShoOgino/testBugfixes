{"path":"solr/core/src/java/org/apache/solr/util/DateFormatUtil.ISO8601CanonicalDateFormat#parse(String,ParsePosition).mjava","commits":[{"id":"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331","date":1437383270,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DateFormatUtil.ISO8601CanonicalDateFormat#parse(String,ParsePosition).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieDateField.ISO8601CanonicalDateFormat#parse(String,ParsePosition).mjava","sourceNew":"    @Override\n    public Date parse(String i, ParsePosition p) {\n      /* delegate to SimpleDateFormat for easy stuff */\n      Date d = super.parse(i, p);\n      int milliIndex = p.getIndex();\n      /* worry about the milliseconds ourselves */\n      if (null != d &&\n          -1 == p.getErrorIndex() &&\n          milliIndex + 1 < i.length() &&\n          '.' == i.charAt(milliIndex)) {\n        p.setIndex(++milliIndex); // NOTE: ++ to chomp '.'\n        Number millis = millisParser.parse(i, p);\n        if (-1 == p.getErrorIndex()) {\n          int endIndex = p.getIndex();\n          d = new Date(d.getTime()\n              + (long)(millis.doubleValue() * Math.pow(10, (3 - endIndex + milliIndex))));\n        }\n      }\n      return d;\n    }\n\n","sourceOld":"    @Override\n    public Date parse(String i, ParsePosition p) {\n      /* delegate to SimpleDateFormat for easy stuff */\n      Date d = super.parse(i, p);\n      int milliIndex = p.getIndex();\n      /* worry about the milliseconds ourselves */\n      if (null != d &&\n          -1 == p.getErrorIndex() &&\n          milliIndex + 1 < i.length() &&\n          '.' == i.charAt(milliIndex)) {\n        p.setIndex(++milliIndex); // NOTE: ++ to chomp '.'\n        Number millis = millisParser.parse(i, p);\n        if (-1 == p.getErrorIndex()) {\n          int endIndex = p.getIndex();\n          d = new Date(d.getTime()\n              + (long)(millis.doubleValue() * Math.pow(10, (3 - endIndex + milliIndex))));\n        }\n      }\n      return d;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/DateFormatUtil.ISO8601CanonicalDateFormat#parse(String,ParsePosition).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Date parse(String i, ParsePosition p) {\n      /* delegate to SimpleDateFormat for easy stuff */\n      Date d = super.parse(i, p);\n      int milliIndex = p.getIndex();\n      /* worry about the milliseconds ourselves */\n      if (null != d &&\n          -1 == p.getErrorIndex() &&\n          milliIndex + 1 < i.length() &&\n          '.' == i.charAt(milliIndex)) {\n        p.setIndex(++milliIndex); // NOTE: ++ to chomp '.'\n        Number millis = millisParser.parse(i, p);\n        if (-1 == p.getErrorIndex()) {\n          int endIndex = p.getIndex();\n          d = new Date(d.getTime()\n              + (long)(millis.doubleValue() * Math.pow(10, (3 - endIndex + milliIndex))));\n        }\n      }\n      return d;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}