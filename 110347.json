{"path":"src/java/org/apache/solr/handler/ReplicationHandler#doSnapPull(SolrParams).mjava","commits":[{"id":"dd564545498afb928bdfecf369ec06cd377413d2","date":1230103123,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#doSnapPull(SolrParams).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#doSnapPull().mjava","sourceNew":"  void doSnapPull(SolrParams solrParams) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!isSlave && masterUrl == null)\n      return;\n    if (!snapPullLock.tryLock())\n      return;\n    try {\n      tempSnapPuller = snapPuller;\n      if (masterUrl != null) {\n        tempSnapPuller = new SnapPuller(solrParams.toNamedList(), this, core);\n      }\n      tempSnapPuller.fetchLatestIndex(core);\n    } catch (Exception e) {\n      LOG.error(\"SnapPull failed \", e);\n    } finally {\n      tempSnapPuller = snapPuller;\n      snapPullLock.unlock();\n    }\n  }\n\n","sourceOld":"  void doSnapPull() {\n    if (!isSlave)\n      return;\n    if (!snapPullLock.tryLock())\n      return;\n    try {\n      snapPuller.fetchLatestIndex(core);\n    } catch (Exception e) {\n      LOG.error(\"SnapPull failed \", e);\n    } finally {\n      snapPullLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04b12ee4b564d309b8429debbae084eef3f31f38","date":1230109992,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#doSnapPull(SolrParams).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#doSnapPull(SolrParams).mjava","sourceNew":"  void doSnapPull(SolrParams solrParams) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!isSlave && masterUrl == null)\n      return;\n    if (!snapPullLock.tryLock())\n      return;\n    try {\n      tempSnapPuller = snapPuller;\n      if (masterUrl != null) {\n        NamedList<Object> nl = solrParams.toNamedList();\n        nl.remove(SnapPuller.POLL_INTERVAL);\n        tempSnapPuller = new SnapPuller(nl, this, core);\n      }\n      tempSnapPuller.fetchLatestIndex(core);\n    } catch (Exception e) {\n      LOG.error(\"SnapPull failed \", e);\n    } finally {\n      tempSnapPuller = snapPuller;\n      snapPullLock.unlock();\n    }\n  }\n\n","sourceOld":"  void doSnapPull(SolrParams solrParams) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!isSlave && masterUrl == null)\n      return;\n    if (!snapPullLock.tryLock())\n      return;\n    try {\n      tempSnapPuller = snapPuller;\n      if (masterUrl != null) {\n        tempSnapPuller = new SnapPuller(solrParams.toNamedList(), this, core);\n      }\n      tempSnapPuller.fetchLatestIndex(core);\n    } catch (Exception e) {\n      LOG.error(\"SnapPull failed \", e);\n    } finally {\n      tempSnapPuller = snapPuller;\n      snapPullLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464eee4bbfeec9402812d9f2d13af9665931a402","date":1247647219,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#doSnapPull(SolrParams).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#doSnapPull(SolrParams).mjava","sourceNew":"  void doSnapPull(SolrParams solrParams) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!snapPullLock.tryLock())\n      return;\n    try {\n      tempSnapPuller = snapPuller;\n      if (masterUrl != null) {\n        NamedList<Object> nl = solrParams.toNamedList();\n        nl.remove(SnapPuller.POLL_INTERVAL);\n        tempSnapPuller = new SnapPuller(nl, this, core);\n      }\n      tempSnapPuller.fetchLatestIndex(core);\n    } catch (Exception e) {\n      LOG.error(\"SnapPull failed \", e);\n    } finally {\n      tempSnapPuller = snapPuller;\n      snapPullLock.unlock();\n    }\n  }\n\n","sourceOld":"  void doSnapPull(SolrParams solrParams) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!isSlave && masterUrl == null)\n      return;\n    if (!snapPullLock.tryLock())\n      return;\n    try {\n      tempSnapPuller = snapPuller;\n      if (masterUrl != null) {\n        NamedList<Object> nl = solrParams.toNamedList();\n        nl.remove(SnapPuller.POLL_INTERVAL);\n        tempSnapPuller = new SnapPuller(nl, this, core);\n      }\n      tempSnapPuller.fetchLatestIndex(core);\n    } catch (Exception e) {\n      LOG.error(\"SnapPull failed \", e);\n    } finally {\n      tempSnapPuller = snapPuller;\n      snapPullLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7e0049b151d932b18c3acc1ef8366262ae9809d","date":1247648156,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#doSnapPull(SolrParams).mjava","sourceNew":"  void doFetch(SolrParams solrParams) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!snapPullLock.tryLock())\n      return;\n    try {\n      tempSnapPuller = snapPuller;\n      if (masterUrl != null) {\n        NamedList<Object> nl = solrParams.toNamedList();\n        nl.remove(SnapPuller.POLL_INTERVAL);\n        tempSnapPuller = new SnapPuller(nl, this, core);\n      }\n      tempSnapPuller.fetchLatestIndex(core);\n    } catch (Exception e) {\n      LOG.error(\"SnapPull failed \", e);\n    } finally {\n      tempSnapPuller = snapPuller;\n      snapPullLock.unlock();\n    }\n  }\n\n","sourceOld":"  void doSnapPull(SolrParams solrParams) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!snapPullLock.tryLock())\n      return;\n    try {\n      tempSnapPuller = snapPuller;\n      if (masterUrl != null) {\n        NamedList<Object> nl = solrParams.toNamedList();\n        nl.remove(SnapPuller.POLL_INTERVAL);\n        tempSnapPuller = new SnapPuller(nl, this, core);\n      }\n      tempSnapPuller.fetchLatestIndex(core);\n    } catch (Exception e) {\n      LOG.error(\"SnapPull failed \", e);\n    } finally {\n      tempSnapPuller = snapPuller;\n      snapPullLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"464eee4bbfeec9402812d9f2d13af9665931a402":["04b12ee4b564d309b8429debbae084eef3f31f38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"04b12ee4b564d309b8429debbae084eef3f31f38":["dd564545498afb928bdfecf369ec06cd377413d2"],"c7e0049b151d932b18c3acc1ef8366262ae9809d":["464eee4bbfeec9402812d9f2d13af9665931a402"],"dd564545498afb928bdfecf369ec06cd377413d2":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"464eee4bbfeec9402812d9f2d13af9665931a402":["c7e0049b151d932b18c3acc1ef8366262ae9809d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["dd564545498afb928bdfecf369ec06cd377413d2"],"04b12ee4b564d309b8429debbae084eef3f31f38":["464eee4bbfeec9402812d9f2d13af9665931a402"],"c7e0049b151d932b18c3acc1ef8366262ae9809d":[],"dd564545498afb928bdfecf369ec06cd377413d2":["04b12ee4b564d309b8429debbae084eef3f31f38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7e0049b151d932b18c3acc1ef8366262ae9809d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}