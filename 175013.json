{"path":"src/java/org/apache/solr/schema/CoordinateFieldType#registerPolyFieldDynamicPrototype(IndexSchema,FieldType).mjava","commits":[{"id":"abec2fd822be07fc74ef5ba3609b9c5625a87d6d","date":1261659802,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/CoordinateFieldType#registerPolyFieldDynamicPrototype(IndexSchema,FieldType).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helper method for creating a dynamic field SchemaField prototype.  Returns a {@link org.apache.solr.schema.SchemaField} with\n   * the {@link org.apache.solr.schema.FieldType} given and a name of \"*\" + {@link org.apache.solr.schema.FieldType#POLY_FIELD_SEPARATOR} + {@link org.apache.solr.schema.FieldType#typeName}\n   * and props of indexed=true, stored=false.\n   * @param schema the IndexSchema\n   * @param type The {@link org.apache.solr.schema.FieldType} of the prototype.\n   * @return The {@link org.apache.solr.schema.SchemaField}\n   */\n\n  static SchemaField registerPolyFieldDynamicPrototype(IndexSchema schema, FieldType type){\n    String name = \"*\" + FieldType.POLY_FIELD_SEPARATOR + type.typeName;\n    Map<String, String> props = new HashMap<String, String>();\n    //Just set these, delegate everything else to the field type\n    props.put(\"indexed\", \"true\");\n    props.put(\"stored\", \"false\");\n    int p = SchemaField.calcProps(name, type, props);\n    SchemaField proto = SchemaField.create(name,\n            type, p, null);\n    schema.registerDynamicField(proto);\n    return proto;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564","date":1262055526,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/AbstractSubTypeFieldType#registerPolyFieldDynamicPrototype(IndexSchema,FieldType).mjava","pathOld":"src/java/org/apache/solr/schema/CoordinateFieldType#registerPolyFieldDynamicPrototype(IndexSchema,FieldType).mjava","sourceNew":"  /**\n   * Helper method for creating a dynamic field SchemaField prototype.  Returns a {@link SchemaField} with\n   * the {@link FieldType} given and a name of \"*\" + {@link FieldType#POLY_FIELD_SEPARATOR} + {@link FieldType#typeName}\n   * and props of indexed=true, stored=false.\n   *\n   * @param schema the IndexSchema\n   * @param type   The {@link FieldType} of the prototype.\n   * @return The {@link SchemaField}\n   */\n\n  static SchemaField registerPolyFieldDynamicPrototype(IndexSchema schema, FieldType type) {\n    String name = \"*\" + FieldType.POLY_FIELD_SEPARATOR + type.typeName;\n    Map<String, String> props = new HashMap<String, String>();\n    //Just set these, delegate everything else to the field type\n    props.put(\"indexed\", \"true\");\n    props.put(\"stored\", \"false\");\n    int p = SchemaField.calcProps(name, type, props);\n    SchemaField proto = SchemaField.create(name,\n            type, p, null);\n    schema.registerDynamicField(proto);\n    return proto;\n  }\n\n","sourceOld":"  /**\n   * Helper method for creating a dynamic field SchemaField prototype.  Returns a {@link org.apache.solr.schema.SchemaField} with\n   * the {@link org.apache.solr.schema.FieldType} given and a name of \"*\" + {@link org.apache.solr.schema.FieldType#POLY_FIELD_SEPARATOR} + {@link org.apache.solr.schema.FieldType#typeName}\n   * and props of indexed=true, stored=false.\n   * @param schema the IndexSchema\n   * @param type The {@link org.apache.solr.schema.FieldType} of the prototype.\n   * @return The {@link org.apache.solr.schema.SchemaField}\n   */\n\n  static SchemaField registerPolyFieldDynamicPrototype(IndexSchema schema, FieldType type){\n    String name = \"*\" + FieldType.POLY_FIELD_SEPARATOR + type.typeName;\n    Map<String, String> props = new HashMap<String, String>();\n    //Just set these, delegate everything else to the field type\n    props.put(\"indexed\", \"true\");\n    props.put(\"stored\", \"false\");\n    int p = SchemaField.calcProps(name, type, props);\n    SchemaField proto = SchemaField.create(name,\n            type, p, null);\n    schema.registerDynamicField(proto);\n    return proto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564"],"7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}