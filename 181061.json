{"path":"src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","commits":[{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","pathOld":"/dev/null","sourceNew":"  public void testAwareCompatibility() \n  {\n    SolrResourceLoader loader = new SolrResourceLoader( \".\" );\n    \n    Class clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new NGramFilterFactory() );\n    loader.assertAwareCompatibility( clazz, new KeywordTokenizerFactory() );\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new LukeRequestHandler() );\n    loader.assertAwareCompatibility( clazz, new FacetComponent() );\n    loader.assertAwareCompatibility( clazz, new JSONResponseWriter() );\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abc45b774ccb2a4e641cc0aa6f246ff0108b6a20","date":1227458832,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","pathOld":"src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","sourceNew":"  public void testAwareCompatibility() \n  {\n    SolrResourceLoader loader = new SolrResourceLoader( \".\" );\n    \n    Class clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new NGramFilterFactory() );\n    loader.assertAwareCompatibility( clazz, new KeywordTokenizerFactory() );\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new LukeRequestHandler() );\n    loader.assertAwareCompatibility( clazz, new FacetComponent() );\n    loader.assertAwareCompatibility( clazz, new JSONResponseWriter() );\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n  }\n\n","sourceOld":"  public void testAwareCompatibility() \n  {\n    SolrResourceLoader loader = new SolrResourceLoader( \".\" );\n    \n    Class clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new NGramFilterFactory() );\n    loader.assertAwareCompatibility( clazz, new KeywordTokenizerFactory() );\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new LukeRequestHandler() );\n    loader.assertAwareCompatibility( clazz, new FacetComponent() );\n    loader.assertAwareCompatibility( clazz, new JSONResponseWriter() );\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","pathOld":"src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","sourceNew":"  public void testAwareCompatibility() \n  {\n    SolrResourceLoader loader = new SolrResourceLoader( \".\" );\n    \n    Class clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new NGramFilterFactory() );\n    loader.assertAwareCompatibility( clazz, new KeywordTokenizerFactory() );\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new LukeRequestHandler() );\n    loader.assertAwareCompatibility( clazz, new FacetComponent() );\n    loader.assertAwareCompatibility( clazz, new JSONResponseWriter() );\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n  }\n\n","sourceOld":"  public void testAwareCompatibility() \n  {\n    SolrResourceLoader loader = new SolrResourceLoader( \".\" );\n    \n    Class clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new NGramFilterFactory() );\n    loader.assertAwareCompatibility( clazz, new KeywordTokenizerFactory() );\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new LukeRequestHandler() );\n    loader.assertAwareCompatibility( clazz, new FacetComponent() );\n    loader.assertAwareCompatibility( clazz, new JSONResponseWriter() );\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"abc45b774ccb2a4e641cc0aa6f246ff0108b6a20":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["abc45b774ccb2a4e641cc0aa6f246ff0108b6a20"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"abc45b774ccb2a4e641cc0aa6f246ff0108b6a20":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["abc45b774ccb2a4e641cc0aa6f246ff0108b6a20"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}