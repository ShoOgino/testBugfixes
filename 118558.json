{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","commits":[{"id":"b11b097f011a298f1a54676482032c2b261e26f3","date":1411698138,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    try (ChecksumIndexInput input = d.openChecksumInput(name, context)) {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        // we started writing full header well before 4.0\n        throw new IndexFormatTooOldException(input.toString(), Integer.toString(firstInt));\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      assert verifyCount();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    try (ChecksumIndexInput input = d.openChecksumInput(name, context)) {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        // we started writing full header well before 4.0\n        throw new IndexFormatTooOldException(input.toString(), Integer.toString(firstInt));\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      assert verifyCount();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    try (ChecksumIndexInput input = d.openChecksumInput(name, context)) {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        // we started writing full header well before 4.0\n        throw new IndexFormatTooOldException(input.toString(), Integer.toString(firstInt));\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      assert verifyCount();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    try (ChecksumIndexInput input = d.openChecksumInput(name, context)) {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        // we started writing full header well before 4.0\n        throw new IndexFormatTooOldException(input.toString(), Integer.toString(firstInt));\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      assert verifyCount();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ac4bff3307e88928bf48cd1a283ff7da1f82464","date":1411914960,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  BitVector(Directory d, String name, IOContext context) throws IOException {\n    try (ChecksumIndexInput input = d.openChecksumInput(name, context)) {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        // we started writing full header well before 4.0\n        throw new IndexFormatTooOldException(input.toString(), Integer.toString(firstInt));\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      assert verifyCount();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    try (ChecksumIndexInput input = d.openChecksumInput(name, context)) {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        // we started writing full header well before 4.0\n        throw new IndexFormatTooOldException(input.toString(), Integer.toString(firstInt));\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      assert verifyCount();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  BitVector(Directory d, String name, IOContext context) throws IOException {\n    try (ChecksumIndexInput input = d.openChecksumInput(name, context)) {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        // we started writing full header well before 4.0\n        throw new IndexFormatTooOldException(input.toString(), Integer.toString(firstInt));\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      assert verifyCount();\n    }\n  }\n\n","sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  public BitVector(Directory d, String name, IOContext context) throws IOException {\n    try (ChecksumIndexInput input = d.openChecksumInput(name, context)) {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        // we started writing full header well before 4.0\n        throw new IndexFormatTooOldException(input.toString(), Integer.toString(firstInt));\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      assert verifyCount();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/BitVector#BitVector(Directory,String,IOContext).mjava","sourceNew":null,"sourceOld":"  /** Constructs a bit vector from the file <code>name</code> in Directory\n    <code>d</code>, as written by the {@link #write} method.\n    */\n  BitVector(Directory d, String name, IOContext context) throws IOException {\n    try (ChecksumIndexInput input = d.openChecksumInput(name, context)) {\n      final int firstInt = input.readInt();\n\n      if (firstInt == -2) {\n        // New format, with full header & version:\n        version = CodecUtil.checkHeader(input, CODEC, VERSION_START, VERSION_CURRENT);\n        size = input.readInt();\n      } else {\n        // we started writing full header well before 4.0\n        throw new IndexFormatTooOldException(input.toString(), Integer.toString(firstInt));\n      }\n      if (size == -1) {\n        if (version >= VERSION_DGAPS_CLEARED) {\n          readClearedDgaps(input);\n        } else {\n          readSetDgaps(input);\n        }\n      } else {\n        readBits(input);\n      }\n\n      if (version < VERSION_DGAPS_CLEARED) {\n        invertAll();\n      }\n\n      if (version >= VERSION_CHECKSUM) {\n        CodecUtil.checkFooter(input);\n      } else {\n        CodecUtil.checkEOF(input);\n      }\n      assert verifyCount();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9bb9a29a5e71a90295f175df8919802993142c9a":["5f6bd27530a2846413fe2d00030493c0e2d3a072","6ac4bff3307e88928bf48cd1a283ff7da1f82464"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b11b097f011a298f1a54676482032c2b261e26f3"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9bb9a29a5e71a90295f175df8919802993142c9a"],"b11b097f011a298f1a54676482032c2b261e26f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6ac4bff3307e88928bf48cd1a283ff7da1f82464":["b11b097f011a298f1a54676482032c2b261e26f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"9bb9a29a5e71a90295f175df8919802993142c9a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["9bb9a29a5e71a90295f175df8919802993142c9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f6bd27530a2846413fe2d00030493c0e2d3a072","b11b097f011a298f1a54676482032c2b261e26f3"],"6ac4bff3307e88928bf48cd1a283ff7da1f82464":["9bb9a29a5e71a90295f175df8919802993142c9a"],"b11b097f011a298f1a54676482032c2b261e26f3":["5f6bd27530a2846413fe2d00030493c0e2d3a072","6ac4bff3307e88928bf48cd1a283ff7da1f82464"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}