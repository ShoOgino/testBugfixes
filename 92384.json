{"path":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","commits":[{"id":"51cb88215648c6da23e00f2ffb57a5e3e1ef14be","date":1309303947,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(ReaderUtil.getTopLevelContext(readerContext));\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader.maxDoc();\n      DocValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(ReaderUtil.getTopLevelContext(readerContext));\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader.maxDoc();\n      DocValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(ReaderUtil.getTopLevelContext(readerContext));\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader.maxDoc();\n      DocValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(ReaderUtil.getTopLevelContext(readerContext));\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader.maxDoc();\n      DocValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(ReaderUtil.getTopLevelContext(readerContext));\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader.maxDoc();\n      DocValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(ReaderUtil.getTopLevelContext(readerContext));\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader.maxDoc();\n      DocValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32e7c2a80dad193a76a03ec46b878969d469ff6c","date":1323722006,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(ReaderUtil.getTopLevelContext(readerContext));\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader.maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(ReaderUtil.getTopLevelContext(readerContext));\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader.maxDoc();\n      DocValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(ReaderUtil.getTopLevelContext(readerContext));\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader.maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(ReaderUtil.getTopLevelContext(readerContext));\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader.maxDoc();\n      DocValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61e20f33ce8ff701576366fdb03955eded5f209b","date":1327852832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(ReaderUtil.getTopLevelContext(readerContext));\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(ReaderUtil.getTopLevelContext(readerContext));\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader.maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(ReaderUtil.getTopLevelContext(readerContext));\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(ReaderUtil.getTopLevelContext(readerContext));\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader.maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8","date":1328775259,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(ReaderUtil.getTopLevelContext(readerContext));\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,AtomicReaderContext).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, AtomicReaderContext readerContext) throws IOException {\n    final AtomicReaderContext[] leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (AtomicReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      }\n      if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(this.source, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61e20f33ce8ff701576366fdb03955eded5f209b":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d638301ad1cfcae567b681b893bc8781f0ee48a5","61e20f33ce8ff701576366fdb03955eded5f209b"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["51cb88215648c6da23e00f2ffb57a5e3e1ef14be","32e7c2a80dad193a76a03ec46b878969d469ff6c"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"61e20f33ce8ff701576366fdb03955eded5f209b":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["61e20f33ce8ff701576366fdb03955eded5f209b","5cab9a86bd67202d20b6adc463008c8e982b070a"],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["32e7c2a80dad193a76a03ec46b878969d469ff6c","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}