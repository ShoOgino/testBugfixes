{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#loadFieldValues(String[],DocIdSetIterator,int).mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#loadFieldValues(String[],DocIdSetIterator,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads the String values for each docId by field to be highlighted.  By default this loads from stored fields\n   * by the same name as given, but a subclass can change the source.  The returned Strings must be identical to\n   * what was indexed (at least for postings or term-vectors offset sources).\n   * This method must load fields for at least one document from the given {@link DocIdSetIterator}\n   * but need not return all of them; by default the character lengths are summed and this method will return early\n   * when {@code cacheCharsThreshold} is exceeded.  Specifically if that number is 0, then only one document is\n   * fetched no matter what.  Values in the array of {@link CharSequence} will be null if no value was found.\n   */\n  protected List<CharSequence[]> loadFieldValues(String[] fields,\n                                                 DocIdSetIterator docIter, int cacheCharsThreshold)\n      throws IOException {\n    List<CharSequence[]> docListOfFields =\n        new ArrayList<>(cacheCharsThreshold == 0 ? 1 : (int) Math.min(64, docIter.cost()));\n\n    LimitedStoredFieldVisitor visitor = newLimitedStoredFieldsVisitor(fields);\n    int sumChars = 0;\n    do {\n      int docId = docIter.nextDoc();\n      if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n        break;\n      }\n      visitor.init();\n      searcher.doc(docId, visitor);\n      CharSequence[] valuesByField = visitor.getValuesByField();\n      docListOfFields.add(valuesByField);\n      for (CharSequence val : valuesByField) {\n        sumChars += (val == null ? 0 : val.length());\n      }\n    } while (sumChars <= cacheCharsThreshold && cacheCharsThreshold != 0);\n    return docListOfFields;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#loadFieldValues(String[],DocIdSetIterator,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads the String values for each docId by field to be highlighted.  By default this loads from stored fields\n   * by the same name as given, but a subclass can change the source.  The returned Strings must be identical to\n   * what was indexed (at least for postings or term-vectors offset sources).\n   * This method must load fields for at least one document from the given {@link DocIdSetIterator}\n   * but need not return all of them; by default the character lengths are summed and this method will return early\n   * when {@code cacheCharsThreshold} is exceeded.  Specifically if that number is 0, then only one document is\n   * fetched no matter what.  Values in the array of {@link CharSequence} will be null if no value was found.\n   */\n  protected List<CharSequence[]> loadFieldValues(String[] fields,\n                                                 DocIdSetIterator docIter, int cacheCharsThreshold)\n      throws IOException {\n    List<CharSequence[]> docListOfFields =\n        new ArrayList<>(cacheCharsThreshold == 0 ? 1 : (int) Math.min(64, docIter.cost()));\n\n    LimitedStoredFieldVisitor visitor = newLimitedStoredFieldsVisitor(fields);\n    int sumChars = 0;\n    do {\n      int docId = docIter.nextDoc();\n      if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n        break;\n      }\n      visitor.init();\n      searcher.doc(docId, visitor);\n      CharSequence[] valuesByField = visitor.getValuesByField();\n      docListOfFields.add(valuesByField);\n      for (CharSequence val : valuesByField) {\n        sumChars += (val == null ? 0 : val.length());\n      }\n    } while (sumChars <= cacheCharsThreshold && cacheCharsThreshold != 0);\n    return docListOfFields;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}