{"path":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testEqualities().mjava","commits":[{"id":"509197a422c6023e5c0bf58d37f8ec05b17a4279","date":1515169117,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testEqualities().mjava","pathOld":"/dev/null","sourceNew":"  public void testEqualities() {\n\n    Query q1 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"a\")), DoubleValuesSource.constant(1));\n    Query q2 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"b\")), DoubleValuesSource.constant(1));\n    Query q3 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"b\")), DoubleValuesSource.constant(2));\n    Query q4 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"b\")), DoubleValuesSource.constant(2));\n\n    QueryUtils.check(q1);\n    QueryUtils.checkUnequal(q1, q3);\n    QueryUtils.checkUnequal(q1, q2);\n    QueryUtils.checkUnequal(q2, q3);\n    QueryUtils.checkEqual(q3, q4);\n\n    Query bq1 = FunctionScoreQuery.boostByValue(new TermQuery(new Term(TEXT_FIELD, \"a\")), DoubleValuesSource.constant(2));\n    QueryUtils.check(bq1);\n    Query bq2 = FunctionScoreQuery.boostByValue(new TermQuery(new Term(TEXT_FIELD, \"a\")), DoubleValuesSource.constant(4));\n    QueryUtils.checkUnequal(bq1, bq2);\n    Query bq3 = FunctionScoreQuery.boostByValue(new TermQuery(new Term(TEXT_FIELD, \"b\")), DoubleValuesSource.constant(4));\n    QueryUtils.checkUnequal(bq1, bq3);\n    QueryUtils.checkUnequal(bq2, bq3);\n    Query bq4 = FunctionScoreQuery.boostByValue(new TermQuery(new Term(TEXT_FIELD, \"b\")), DoubleValuesSource.constant(4));\n    QueryUtils.checkEqual(bq3, bq4);\n\n    Query qq1 = FunctionScoreQuery.boostByQuery(new TermQuery(new Term(TEXT_FIELD, \"a\")), new TermQuery(new Term(TEXT_FIELD, \"z\")), 0.1f);\n    QueryUtils.check(qq1);\n    Query qq2 = FunctionScoreQuery.boostByQuery(new TermQuery(new Term(TEXT_FIELD, \"a\")), new TermQuery(new Term(TEXT_FIELD, \"z\")), 0.2f);\n    QueryUtils.checkUnequal(qq1, qq2);\n    Query qq3 = FunctionScoreQuery.boostByQuery(new TermQuery(new Term(TEXT_FIELD, \"b\")), new TermQuery(new Term(TEXT_FIELD, \"z\")), 0.1f);\n    QueryUtils.checkUnequal(qq1, qq3);\n    QueryUtils.checkUnequal(qq2, qq3);\n    Query qq4 = FunctionScoreQuery.boostByQuery(new TermQuery(new Term(TEXT_FIELD, \"a\")), new TermQuery(new Term(TEXT_FIELD, \"zz\")), 0.1f);\n    QueryUtils.checkUnequal(qq1, qq4);\n    QueryUtils.checkUnequal(qq2, qq4);\n    QueryUtils.checkUnequal(qq3, qq4);\n    Query qq5 = FunctionScoreQuery.boostByQuery(new TermQuery(new Term(TEXT_FIELD, \"a\")), new TermQuery(new Term(TEXT_FIELD, \"z\")), 0.1f);\n    QueryUtils.checkEqual(qq1, qq5);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestFunctionScoreQuery#testEqualities().mjava","pathOld":"/dev/null","sourceNew":"  public void testEqualities() {\n\n    Query q1 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"a\")), DoubleValuesSource.constant(1));\n    Query q2 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"b\")), DoubleValuesSource.constant(1));\n    Query q3 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"b\")), DoubleValuesSource.constant(2));\n    Query q4 = new FunctionScoreQuery(new TermQuery(new Term(TEXT_FIELD, \"b\")), DoubleValuesSource.constant(2));\n\n    QueryUtils.check(q1);\n    QueryUtils.checkUnequal(q1, q3);\n    QueryUtils.checkUnequal(q1, q2);\n    QueryUtils.checkUnequal(q2, q3);\n    QueryUtils.checkEqual(q3, q4);\n\n    Query bq1 = FunctionScoreQuery.boostByValue(new TermQuery(new Term(TEXT_FIELD, \"a\")), DoubleValuesSource.constant(2));\n    QueryUtils.check(bq1);\n    Query bq2 = FunctionScoreQuery.boostByValue(new TermQuery(new Term(TEXT_FIELD, \"a\")), DoubleValuesSource.constant(4));\n    QueryUtils.checkUnequal(bq1, bq2);\n    Query bq3 = FunctionScoreQuery.boostByValue(new TermQuery(new Term(TEXT_FIELD, \"b\")), DoubleValuesSource.constant(4));\n    QueryUtils.checkUnequal(bq1, bq3);\n    QueryUtils.checkUnequal(bq2, bq3);\n    Query bq4 = FunctionScoreQuery.boostByValue(new TermQuery(new Term(TEXT_FIELD, \"b\")), DoubleValuesSource.constant(4));\n    QueryUtils.checkEqual(bq3, bq4);\n\n    Query qq1 = FunctionScoreQuery.boostByQuery(new TermQuery(new Term(TEXT_FIELD, \"a\")), new TermQuery(new Term(TEXT_FIELD, \"z\")), 0.1f);\n    QueryUtils.check(qq1);\n    Query qq2 = FunctionScoreQuery.boostByQuery(new TermQuery(new Term(TEXT_FIELD, \"a\")), new TermQuery(new Term(TEXT_FIELD, \"z\")), 0.2f);\n    QueryUtils.checkUnequal(qq1, qq2);\n    Query qq3 = FunctionScoreQuery.boostByQuery(new TermQuery(new Term(TEXT_FIELD, \"b\")), new TermQuery(new Term(TEXT_FIELD, \"z\")), 0.1f);\n    QueryUtils.checkUnequal(qq1, qq3);\n    QueryUtils.checkUnequal(qq2, qq3);\n    Query qq4 = FunctionScoreQuery.boostByQuery(new TermQuery(new Term(TEXT_FIELD, \"a\")), new TermQuery(new Term(TEXT_FIELD, \"zz\")), 0.1f);\n    QueryUtils.checkUnequal(qq1, qq4);\n    QueryUtils.checkUnequal(qq2, qq4);\n    QueryUtils.checkUnequal(qq3, qq4);\n    Query qq5 = FunctionScoreQuery.boostByQuery(new TermQuery(new Term(TEXT_FIELD, \"a\")), new TermQuery(new Term(TEXT_FIELD, \"z\")), 0.1f);\n    QueryUtils.checkEqual(qq1, qq5);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","509197a422c6023e5c0bf58d37f8ec05b17a4279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"509197a422c6023e5c0bf58d37f8ec05b17a4279":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","509197a422c6023e5c0bf58d37f8ec05b17a4279"],"509197a422c6023e5c0bf58d37f8ec05b17a4279":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}