{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsQueryScorer().mjava","commits":[{"id":"c16ba100a31d292b7b4c893a3cdf1994e75a3201","date":1249608645,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsQueryScorer().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsSpan().mjava","sourceNew":"  public void testGetBestFragmentsQueryScorer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        doSearching(snq);\n        doStandardHighlights(analyzer, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetBestFragmentsSpan() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        doSearching(snq);\n        doStandardHighlights(analyzer, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsQueryScorer().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsQueryScorer().mjava","sourceNew":"  public void testGetBestFragmentsQueryScorer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        doSearching(snq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetBestFragmentsQueryScorer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        doSearching(snq);\n        doStandardHighlights(analyzer, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsQueryScorer().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsQueryScorer().mjava","sourceNew":"  public void testGetBestFragmentsQueryScorer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        doSearching(snq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetBestFragmentsQueryScorer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      public void run() throws Exception {\n        numHighlights = 0;\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        doSearching(snq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsQueryScorer().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsQueryScorer().mjava","sourceNew":"  public void testGetBestFragmentsQueryScorer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        doSearching(snq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetBestFragmentsQueryScorer() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        SpanQuery clauses[] = { new SpanTermQuery(new Term(\"contents\", \"john\")),\n            new SpanTermQuery(new Term(\"contents\", \"kennedy\")), };\n\n        SpanNearQuery snq = new SpanNearQuery(clauses, 1, true);\n        doSearching(snq);\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        // Currently highlights \"John\" and \"Kennedy\" separately\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 2);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c16ba100a31d292b7b4c893a3cdf1994e75a3201":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["c16ba100a31d292b7b4c893a3cdf1994e75a3201"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"c16ba100a31d292b7b4c893a3cdf1994e75a3201":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c16ba100a31d292b7b4c893a3cdf1994e75a3201"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}