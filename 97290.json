{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#openNewSearcherAndUpdateCommitPoint().mjava","commits":[{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":1,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#openNewSearcherAndUpdateCommitPoint().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#openNewSearcherAndUpdateCommitPoint().mjava","sourceNew":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","sourceOld":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":1,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#openNewSearcherAndUpdateCommitPoint().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#openNewSearcherAndUpdateCommitPoint().mjava","sourceNew":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","sourceOld":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#openNewSearcherAndUpdateCommitPoint().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#openNewSearcherAndUpdateCommitPoint().mjava","sourceNew":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n\n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n\n  }\n\n","sourceOld":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06e38ae84477e7a7eacea808dc3de9950fce5ccf","date":1470634560,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#openNewSearcherAndUpdateCommitPoint().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#openNewSearcherAndUpdateCommitPoint().mjava","sourceNew":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    // must get the latest solrCore object because the one we have might be closed because of a reload\n    // todo stop keeping solrCore around\n    SolrCore core = solrCore.getCoreDescriptor().getCoreContainer().getCore(solrCore.getName());\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = core.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      if (searcher != null) {\n        searcher.decref();\n      }\n      core.close();\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n\n  }\n\n","sourceOld":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n\n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#openNewSearcherAndUpdateCommitPoint().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#openNewSearcherAndUpdateCommitPoint().mjava","sourceNew":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    // must get the latest solrCore object because the one we have might be closed because of a reload\n    // todo stop keeping solrCore around\n    SolrCore core = solrCore.getCoreDescriptor().getCoreContainer().getCore(solrCore.getName());\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = core.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      if (searcher != null) {\n        searcher.decref();\n      }\n      core.close();\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n\n  }\n\n","sourceOld":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n\n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#openNewSearcherAndUpdateCommitPoint().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#openNewSearcherAndUpdateCommitPoint().mjava","sourceNew":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    // must get the latest solrCore object because the one we have might be closed because of a reload\n    // todo stop keeping solrCore around\n    SolrCore core = solrCore.getCoreDescriptor().getCoreContainer().getCore(solrCore.getName());\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = core.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      if (searcher != null) {\n        searcher.decref();\n      }\n      core.close();\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n\n  }\n\n","sourceOld":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n\n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#openNewSearcherAndUpdateCommitPoint().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#openNewSearcherAndUpdateCommitPoint().mjava","sourceNew":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    // must get the latest solrCore object because the one we have might be closed because of a reload\n    // todo stop keeping solrCore around\n    SolrCore core = solrCore.getCoreContainer().getCore(solrCore.getName());\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = core.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      if (searcher != null) {\n        searcher.decref();\n      }\n      core.close();\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n\n  }\n\n","sourceOld":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    // must get the latest solrCore object because the one we have might be closed because of a reload\n    // todo stop keeping solrCore around\n    SolrCore core = solrCore.getCoreDescriptor().getCoreContainer().getCore(solrCore.getName());\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = core.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      if (searcher != null) {\n        searcher.decref();\n      }\n      core.close();\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#openNewSearcherAndUpdateCommitPoint().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#openNewSearcherAndUpdateCommitPoint().mjava","sourceNew":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    // must get the latest solrCore object because the one we have might be closed because of a reload\n    // todo stop keeping solrCore around\n    SolrCore core = solrCore.getCoreContainer().getCore(solrCore.getName());\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = core.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      if (searcher != null) {\n        searcher.decref();\n      }\n      core.close();\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n\n  }\n\n","sourceOld":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    // must get the latest solrCore object because the one we have might be closed because of a reload\n    // todo stop keeping solrCore around\n    SolrCore core = solrCore.getCoreDescriptor().getCoreContainer().getCore(solrCore.getName());\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = core.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      if (searcher != null) {\n        searcher.decref();\n      }\n      core.close();\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#openNewSearcherAndUpdateCommitPoint().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#openNewSearcherAndUpdateCommitPoint().mjava","sourceNew":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    // must get the latest solrCore object because the one we have might be closed because of a reload\n    // todo stop keeping solrCore around\n    SolrCore core = solrCore.getCoreContainer().getCore(solrCore.getName());\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = core.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(log, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      if (searcher != null) {\n        searcher.decref();\n      }\n      core.close();\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n\n  }\n\n","sourceOld":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    // must get the latest solrCore object because the one we have might be closed because of a reload\n    // todo stop keeping solrCore around\n    SolrCore core = solrCore.getCoreContainer().getCore(solrCore.getName());\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = core.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      if (searcher != null) {\n        searcher.decref();\n      }\n      core.close();\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#openNewSearcherAndUpdateCommitPoint().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#openNewSearcherAndUpdateCommitPoint().mjava","sourceNew":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    // must get the latest solrCore object because the one we have might be closed because of a reload\n    // todo stop keeping solrCore around\n    SolrCore core = solrCore.getCoreContainer().getCore(solrCore.getName());\n    try {\n      @SuppressWarnings({\"rawtypes\"})\n      Future[] waitSearcher = new Future[1];\n      searcher = core.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(log, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      if (searcher != null) {\n        searcher.decref();\n      }\n      core.close();\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n\n  }\n\n","sourceOld":"  private void openNewSearcherAndUpdateCommitPoint() throws IOException {\n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    // must get the latest solrCore object because the one we have might be closed because of a reload\n    // todo stop keeping solrCore around\n    SolrCore core = solrCore.getCoreContainer().getCore(solrCore.getName());\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = core.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException | ExecutionException e) {\n          SolrException.log(log, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      if (searcher != null) {\n        searcher.decref();\n      }\n      core.close();\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["86290366cefc1b9d4eced13b430858c4a4c0421d","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["86290366cefc1b9d4eced13b430858c4a4c0421d","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"86290366cefc1b9d4eced13b430858c4a4c0421d":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["86290366cefc1b9d4eced13b430858c4a4c0421d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}