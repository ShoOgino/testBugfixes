{"path":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRef,int).mjava","commits":[{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ByteBlockPool#setBytesRef(BytesRef,int).mjava","sourceNew":"  // Fill in a BytesRef from term's length & bytes encoded in\n  // byte block\n  public final BytesRef setBytesRef(BytesRef term, int textStart) {\n    final byte[] bytes = term.bytes = buffers[textStart >> BYTE_BLOCK_SHIFT];\n    int pos = textStart & BYTE_BLOCK_MASK;\n    if ((bytes[pos] & 0x80) == 0) {\n      // length is 1 byte\n      term.length = bytes[pos];\n      term.offset = pos+1;\n    } else {\n      // length is 2 bytes\n      term.length = (bytes[pos]&0x7f) + ((bytes[pos+1]&0xff)<<7);\n      term.offset = pos+2;\n    }\n    assert term.length >= 0;\n    return term;\n  }\n\n","sourceOld":"  // Fill in a BytesRef from term's length & bytes encoded in\n  // byte block\n  final BytesRef setBytesRef(BytesRef term, int textStart) {\n    final byte[] bytes = term.bytes = buffers[textStart >> DocumentsWriter.BYTE_BLOCK_SHIFT];\n    int pos = textStart & DocumentsWriter.BYTE_BLOCK_MASK;\n    if ((bytes[pos] & 0x80) == 0) {\n      // length is 1 byte\n      term.length = bytes[pos];\n      term.offset = pos+1;\n    } else {\n      // length is 2 bytes\n      term.length = (bytes[pos]&0x7f) + ((bytes[pos+1]&0xff)<<7);\n      term.offset = pos+2;\n    }\n    assert term.length >= 0;\n    return term;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRef,int).mjava","pathOld":"/dev/null","sourceNew":"  // Fill in a BytesRef from term's length & bytes encoded in\n  // byte block\n  public final BytesRef setBytesRef(BytesRef term, int textStart) {\n    final byte[] bytes = term.bytes = buffers[textStart >> BYTE_BLOCK_SHIFT];\n    int pos = textStart & BYTE_BLOCK_MASK;\n    if ((bytes[pos] & 0x80) == 0) {\n      // length is 1 byte\n      term.length = bytes[pos];\n      term.offset = pos+1;\n    } else {\n      // length is 2 bytes\n      term.length = (bytes[pos]&0x7f) + ((bytes[pos+1]&0xff)<<7);\n      term.offset = pos+2;\n    }\n    assert term.length >= 0;\n    return term;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRef,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#setBytesRef(BytesRef,int).mjava","sourceNew":"  // Fill in a BytesRef from term's length & bytes encoded in\n  // byte block\n  public final BytesRef setBytesRef(BytesRef term, int textStart) {\n    final byte[] bytes = term.bytes = buffers[textStart >> BYTE_BLOCK_SHIFT];\n    int pos = textStart & BYTE_BLOCK_MASK;\n    if ((bytes[pos] & 0x80) == 0) {\n      // length is 1 byte\n      term.length = bytes[pos];\n      term.offset = pos+1;\n    } else {\n      // length is 2 bytes\n      term.length = (bytes[pos]&0x7f) + ((bytes[pos+1]&0xff)<<7);\n      term.offset = pos+2;\n    }\n    assert term.length >= 0;\n    return term;\n  }\n\n","sourceOld":"  // Fill in a BytesRef from term's length & bytes encoded in\n  // byte block\n  public final BytesRef setBytesRef(BytesRef term, int textStart) {\n    final byte[] bytes = term.bytes = buffers[textStart >> BYTE_BLOCK_SHIFT];\n    int pos = textStart & BYTE_BLOCK_MASK;\n    if ((bytes[pos] & 0x80) == 0) {\n      // length is 1 byte\n      term.length = bytes[pos];\n      term.offset = pos+1;\n    } else {\n      // length is 2 bytes\n      term.length = (bytes[pos]&0x7f) + ((bytes[pos+1]&0xff)<<7);\n      term.offset = pos+2;\n    }\n    assert term.length >= 0;\n    return term;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}