{"path":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#createIndex2(int,String...).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#createIndex2(int,String...).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSearchPerf#createIndex2(int,String...).mjava","sourceNew":"  // Skip encoding for updating the index\n  void createIndex2(int nDocs, String... fields) throws IOException {\n    Set<String> fieldSet = new HashSet<String>(Arrays.asList(fields));\n\n    SolrQueryRequest req = lrf.makeRequest();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(null);\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    boolean foomany_s = fieldSet.contains(\"foomany_s\");\n    boolean foo1_s = fieldSet.contains(\"foo1_s\");\n    boolean foo2_s = fieldSet.contains(\"foo2_s\");\n    boolean foo4_s = fieldSet.contains(\"foo4_s\");\n    boolean foo8_s = fieldSet.contains(\"foo8_s\");\n    boolean t10_100_ws = fieldSet.contains(\"t10_100_ws\");\n\n    \n    for (int i=0; i<nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\",Float.toString(i));\n      if (foomany_s) {\n        doc.addField(\"foomany_s\",t(r.nextInt(nDocs*10)));\n      }\n      if (foo1_s) {\n        doc.addField(\"foo1_s\",t(0));\n      }\n      if (foo2_s) {\n        doc.addField(\"foo2_s\",r.nextInt(2));\n      }\n      if (foo4_s) {\n        doc.addField(\"foo4_s\",r.nextInt(4));\n      }\n      if (foo8_s) {\n        doc.addField(\"foo8_s\",r.nextInt(8));\n      }\n      if (t10_100_ws) {\n        StringBuilder sb = new StringBuilder(9*100);\n        for (int j=0; j<100; j++) {\n          sb.append(' ');\n          sb.append(t(r.nextInt(10)));\n        }\n        doc.addField(\"t10_100_ws\", sb.toString());\n      }\n\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      cmd.solrDoc = doc;\n      processor.processAdd(cmd);\n    }\n    processor.finish();\n    req.close();\n\n    assertU(commit());\n\n    req = lrf.makeRequest();\n    assertEquals(nDocs, req.getSearcher().maxDoc());\n    req.close();\n  }\n\n","sourceOld":"  // Skip encoding for updating the index\n  void createIndex2(int nDocs, String... fields) throws IOException {\n    Set<String> fieldSet = new HashSet<String>(Arrays.asList(fields));\n\n    SolrQueryRequest req = lrf.makeRequest();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(null);\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    boolean foomany_s = fieldSet.contains(\"foomany_s\");\n    boolean foo1_s = fieldSet.contains(\"foo1_s\");\n    boolean foo2_s = fieldSet.contains(\"foo2_s\");\n    boolean foo4_s = fieldSet.contains(\"foo4_s\");\n    boolean foo8_s = fieldSet.contains(\"foo8_s\");\n    boolean t10_100_ws = fieldSet.contains(\"t10_100_ws\");\n\n    \n    for (int i=0; i<nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\",Float.toString(i));\n      if (foomany_s) {\n        doc.addField(\"foomany_s\",t(r.nextInt(nDocs*10)));\n      }\n      if (foo1_s) {\n        doc.addField(\"foo1_s\",t(0));\n      }\n      if (foo2_s) {\n        doc.addField(\"foo2_s\",r.nextInt(2));\n      }\n      if (foo4_s) {\n        doc.addField(\"foo4_s\",r.nextInt(4));\n      }\n      if (foo8_s) {\n        doc.addField(\"foo8_s\",r.nextInt(8));\n      }\n      if (t10_100_ws) {\n        StringBuilder sb = new StringBuilder(9*100);\n        for (int j=0; j<100; j++) {\n          sb.append(' ');\n          sb.append(t(r.nextInt(10)));\n        }\n        doc.addField(\"t10_100_ws\", sb.toString());\n      }\n\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      cmd.solrDoc = doc;\n      processor.processAdd(cmd);\n    }\n    processor.finish();\n    req.close();\n\n    assertU(commit());\n\n    req = lrf.makeRequest();\n    assertEquals(nDocs, req.getSearcher().maxDoc());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#createIndex2(int,String...).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSearchPerf#createIndex2(int,String...).mjava","sourceNew":"  // Skip encoding for updating the index\n  void createIndex2(int nDocs, String... fields) throws IOException {\n    Set<String> fieldSet = new HashSet<String>(Arrays.asList(fields));\n\n    SolrQueryRequest req = lrf.makeRequest();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(null);\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    boolean foomany_s = fieldSet.contains(\"foomany_s\");\n    boolean foo1_s = fieldSet.contains(\"foo1_s\");\n    boolean foo2_s = fieldSet.contains(\"foo2_s\");\n    boolean foo4_s = fieldSet.contains(\"foo4_s\");\n    boolean foo8_s = fieldSet.contains(\"foo8_s\");\n    boolean t10_100_ws = fieldSet.contains(\"t10_100_ws\");\n\n    \n    for (int i=0; i<nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\",Float.toString(i));\n      if (foomany_s) {\n        doc.addField(\"foomany_s\",t(r.nextInt(nDocs*10)));\n      }\n      if (foo1_s) {\n        doc.addField(\"foo1_s\",t(0));\n      }\n      if (foo2_s) {\n        doc.addField(\"foo2_s\",r.nextInt(2));\n      }\n      if (foo4_s) {\n        doc.addField(\"foo4_s\",r.nextInt(4));\n      }\n      if (foo8_s) {\n        doc.addField(\"foo8_s\",r.nextInt(8));\n      }\n      if (t10_100_ws) {\n        StringBuilder sb = new StringBuilder(9*100);\n        for (int j=0; j<100; j++) {\n          sb.append(' ');\n          sb.append(t(r.nextInt(10)));\n        }\n        doc.addField(\"t10_100_ws\", sb.toString());\n      }\n\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      cmd.solrDoc = doc;\n      processor.processAdd(cmd);\n    }\n    processor.finish();\n    req.close();\n\n    assertU(commit());\n\n    req = lrf.makeRequest();\n    assertEquals(nDocs, req.getSearcher().maxDoc());\n    req.close();\n  }\n\n","sourceOld":"  // Skip encoding for updating the index\n  void createIndex2(int nDocs, String... fields) throws IOException {\n    Set<String> fieldSet = new HashSet<String>(Arrays.asList(fields));\n\n    SolrQueryRequest req = lrf.makeRequest();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(null);\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    boolean foomany_s = fieldSet.contains(\"foomany_s\");\n    boolean foo1_s = fieldSet.contains(\"foo1_s\");\n    boolean foo2_s = fieldSet.contains(\"foo2_s\");\n    boolean foo4_s = fieldSet.contains(\"foo4_s\");\n    boolean foo8_s = fieldSet.contains(\"foo8_s\");\n    boolean t10_100_ws = fieldSet.contains(\"t10_100_ws\");\n\n    \n    for (int i=0; i<nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\",Float.toString(i));\n      if (foomany_s) {\n        doc.addField(\"foomany_s\",t(r.nextInt(nDocs*10)));\n      }\n      if (foo1_s) {\n        doc.addField(\"foo1_s\",t(0));\n      }\n      if (foo2_s) {\n        doc.addField(\"foo2_s\",r.nextInt(2));\n      }\n      if (foo4_s) {\n        doc.addField(\"foo4_s\",r.nextInt(4));\n      }\n      if (foo8_s) {\n        doc.addField(\"foo8_s\",r.nextInt(8));\n      }\n      if (t10_100_ws) {\n        StringBuilder sb = new StringBuilder(9*100);\n        for (int j=0; j<100; j++) {\n          sb.append(' ');\n          sb.append(t(r.nextInt(10)));\n        }\n        doc.addField(\"t10_100_ws\", sb.toString());\n      }\n\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      cmd.solrDoc = doc;\n      processor.processAdd(cmd);\n    }\n    processor.finish();\n    req.close();\n\n    assertU(commit());\n\n    req = lrf.makeRequest();\n    assertEquals(nDocs, req.getSearcher().maxDoc());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#createIndex2(int,String...).mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSearchPerf#createIndex2(int,String...).mjava","sourceNew":"  // Skip encoding for updating the index\n  void createIndex2(int nDocs, String... fields) throws IOException {\n    Set<String> fieldSet = new HashSet<String>(Arrays.asList(fields));\n\n    SolrQueryRequest req = lrf.makeRequest();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(null);\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    boolean foomany_s = fieldSet.contains(\"foomany_s\");\n    boolean foo1_s = fieldSet.contains(\"foo1_s\");\n    boolean foo2_s = fieldSet.contains(\"foo2_s\");\n    boolean foo4_s = fieldSet.contains(\"foo4_s\");\n    boolean foo8_s = fieldSet.contains(\"foo8_s\");\n    boolean t10_100_ws = fieldSet.contains(\"t10_100_ws\");\n\n    \n    for (int i=0; i<nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\",Float.toString(i));\n      if (foomany_s) {\n        doc.addField(\"foomany_s\",t(r.nextInt(nDocs*10)));\n      }\n      if (foo1_s) {\n        doc.addField(\"foo1_s\",t(0));\n      }\n      if (foo2_s) {\n        doc.addField(\"foo2_s\",r.nextInt(2));\n      }\n      if (foo4_s) {\n        doc.addField(\"foo4_s\",r.nextInt(4));\n      }\n      if (foo8_s) {\n        doc.addField(\"foo8_s\",r.nextInt(8));\n      }\n      if (t10_100_ws) {\n        StringBuilder sb = new StringBuilder(9*100);\n        for (int j=0; j<100; j++) {\n          sb.append(' ');\n          sb.append(t(r.nextInt(10)));\n        }\n        doc.addField(\"t10_100_ws\", sb.toString());\n      }\n\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      cmd.solrDoc = doc;\n      processor.processAdd(cmd);\n    }\n    processor.finish();\n    req.close();\n\n    assertU(commit());\n\n    req = lrf.makeRequest();\n    assertEquals(nDocs, req.getSearcher().maxDoc());\n    req.close();\n  }\n\n","sourceOld":"  // Skip encoding for updating the index\n  void createIndex2(int nDocs, String... fields) throws IOException {\n    Set<String> fieldSet = new HashSet<String>(Arrays.asList(fields));\n\n    SolrQueryRequest req = lrf.makeRequest();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(null);\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    boolean foomany_s = fieldSet.contains(\"foomany_s\");\n    boolean foo1_s = fieldSet.contains(\"foo1_s\");\n    boolean foo2_s = fieldSet.contains(\"foo2_s\");\n    boolean foo4_s = fieldSet.contains(\"foo4_s\");\n    boolean foo8_s = fieldSet.contains(\"foo8_s\");\n    boolean t10_100_ws = fieldSet.contains(\"t10_100_ws\");\n\n    \n    for (int i=0; i<nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\",Float.toString(i));\n      if (foomany_s) {\n        doc.addField(\"foomany_s\",t(r.nextInt(nDocs*10)));\n      }\n      if (foo1_s) {\n        doc.addField(\"foo1_s\",t(0));\n      }\n      if (foo2_s) {\n        doc.addField(\"foo2_s\",r.nextInt(2));\n      }\n      if (foo4_s) {\n        doc.addField(\"foo4_s\",r.nextInt(4));\n      }\n      if (foo8_s) {\n        doc.addField(\"foo8_s\",r.nextInt(8));\n      }\n      if (t10_100_ws) {\n        StringBuilder sb = new StringBuilder(9*100);\n        for (int j=0; j<100; j++) {\n          sb.append(' ');\n          sb.append(t(r.nextInt(10)));\n        }\n        doc.addField(\"t10_100_ws\", sb.toString());\n      }\n\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      cmd.solrDoc = doc;\n      processor.processAdd(cmd);\n    }\n    processor.finish();\n    req.close();\n\n    assertU(commit());\n\n    req = lrf.makeRequest();\n    assertEquals(nDocs, req.getSearcher().maxDoc());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#createIndex2(int,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#createIndex2(int,String...).mjava","sourceNew":"  // Skip encoding for updating the index\n  void createIndex2(int nDocs, String... fields) throws IOException {\n    Set<String> fieldSet = new HashSet<String>(Arrays.asList(fields));\n\n    SolrQueryRequest req = lrf.makeRequest();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(null);\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    boolean foomany_s = fieldSet.contains(\"foomany_s\");\n    boolean foo1_s = fieldSet.contains(\"foo1_s\");\n    boolean foo2_s = fieldSet.contains(\"foo2_s\");\n    boolean foo4_s = fieldSet.contains(\"foo4_s\");\n    boolean foo8_s = fieldSet.contains(\"foo8_s\");\n    boolean t10_100_ws = fieldSet.contains(\"t10_100_ws\");\n\n    \n    for (int i=0; i<nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\",Float.toString(i));\n      if (foomany_s) {\n        doc.addField(\"foomany_s\",t(r.nextInt(nDocs*10)));\n      }\n      if (foo1_s) {\n        doc.addField(\"foo1_s\",t(0));\n      }\n      if (foo2_s) {\n        doc.addField(\"foo2_s\",r.nextInt(2));\n      }\n      if (foo4_s) {\n        doc.addField(\"foo4_s\",r.nextInt(4));\n      }\n      if (foo8_s) {\n        doc.addField(\"foo8_s\",r.nextInt(8));\n      }\n      if (t10_100_ws) {\n        StringBuilder sb = new StringBuilder(9*100);\n        for (int j=0; j<100; j++) {\n          sb.append(' ');\n          sb.append(t(r.nextInt(10)));\n        }\n        doc.addField(\"t10_100_ws\", sb.toString());\n      }\n\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      cmd.solrDoc = doc;\n      processor.processAdd(cmd);\n    }\n    processor.finish();\n    req.close();\n\n    assertU(commit());\n\n    req = lrf.makeRequest();\n    assertEquals(nDocs, req.getSearcher().maxDoc());\n    req.close();\n  }\n\n","sourceOld":"  // Skip encoding for updating the index\n  void createIndex2(int nDocs, String... fields) throws IOException {\n    Set<String> fieldSet = new HashSet<String>(Arrays.asList(fields));\n\n    SolrQueryRequest req = lrf.makeRequest();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(null);\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    boolean foomany_s = fieldSet.contains(\"foomany_s\");\n    boolean foo1_s = fieldSet.contains(\"foo1_s\");\n    boolean foo2_s = fieldSet.contains(\"foo2_s\");\n    boolean foo4_s = fieldSet.contains(\"foo4_s\");\n    boolean foo8_s = fieldSet.contains(\"foo8_s\");\n    boolean t10_100_ws = fieldSet.contains(\"t10_100_ws\");\n\n    \n    for (int i=0; i<nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\",Float.toString(i));\n      if (foomany_s) {\n        doc.addField(\"foomany_s\",t(r.nextInt(nDocs*10)));\n      }\n      if (foo1_s) {\n        doc.addField(\"foo1_s\",t(0));\n      }\n      if (foo2_s) {\n        doc.addField(\"foo2_s\",r.nextInt(2));\n      }\n      if (foo4_s) {\n        doc.addField(\"foo4_s\",r.nextInt(4));\n      }\n      if (foo8_s) {\n        doc.addField(\"foo8_s\",r.nextInt(8));\n      }\n      if (t10_100_ws) {\n        StringBuilder sb = new StringBuilder(9*100);\n        for (int j=0; j<100; j++) {\n          sb.append(' ');\n          sb.append(t(r.nextInt(10)));\n        }\n        doc.addField(\"t10_100_ws\", sb.toString());\n      }\n\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      cmd.solrDoc = doc;\n      processor.processAdd(cmd);\n    }\n    processor.finish();\n    req.close();\n\n    assertU(commit());\n\n    req = lrf.makeRequest();\n    assertEquals(nDocs, req.getSearcher().maxDoc());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#createIndex2(int,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#createIndex2(int,String...).mjava","sourceNew":"  // Skip encoding for updating the index\n  void createIndex2(int nDocs, String... fields) throws IOException {\n    Set<String> fieldSet = new HashSet<String>(Arrays.asList(fields));\n\n    SolrQueryRequest req = lrf.makeRequest();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(null);\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    boolean foomany_s = fieldSet.contains(\"foomany_s\");\n    boolean foo1_s = fieldSet.contains(\"foo1_s\");\n    boolean foo2_s = fieldSet.contains(\"foo2_s\");\n    boolean foo4_s = fieldSet.contains(\"foo4_s\");\n    boolean foo8_s = fieldSet.contains(\"foo8_s\");\n    boolean t10_100_ws = fieldSet.contains(\"t10_100_ws\");\n\n    \n    for (int i=0; i<nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\",Float.toString(i));\n      if (foomany_s) {\n        doc.addField(\"foomany_s\",t(r.nextInt(nDocs*10)));\n      }\n      if (foo1_s) {\n        doc.addField(\"foo1_s\",t(0));\n      }\n      if (foo2_s) {\n        doc.addField(\"foo2_s\",r.nextInt(2));\n      }\n      if (foo4_s) {\n        doc.addField(\"foo4_s\",r.nextInt(4));\n      }\n      if (foo8_s) {\n        doc.addField(\"foo8_s\",r.nextInt(8));\n      }\n      if (t10_100_ws) {\n        StringBuilder sb = new StringBuilder(9*100);\n        for (int j=0; j<100; j++) {\n          sb.append(' ');\n          sb.append(t(r.nextInt(10)));\n        }\n        doc.addField(\"t10_100_ws\", sb.toString());\n      }\n\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      cmd.solrDoc = doc;\n      processor.processAdd(cmd);\n    }\n    processor.finish();\n    req.close();\n\n    assertU(commit());\n\n    req = lrf.makeRequest();\n    assertEquals(nDocs, req.getSearcher().maxDoc());\n    req.close();\n  }\n\n","sourceOld":"  // Skip encoding for updating the index\n  void createIndex2(int nDocs, String... fields) throws IOException {\n    Set<String> fieldSet = new HashSet<String>(Arrays.asList(fields));\n\n    SolrQueryRequest req = lrf.makeRequest();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(null);\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    boolean foomany_s = fieldSet.contains(\"foomany_s\");\n    boolean foo1_s = fieldSet.contains(\"foo1_s\");\n    boolean foo2_s = fieldSet.contains(\"foo2_s\");\n    boolean foo4_s = fieldSet.contains(\"foo4_s\");\n    boolean foo8_s = fieldSet.contains(\"foo8_s\");\n    boolean t10_100_ws = fieldSet.contains(\"t10_100_ws\");\n\n    \n    for (int i=0; i<nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\",Float.toString(i));\n      if (foomany_s) {\n        doc.addField(\"foomany_s\",t(r.nextInt(nDocs*10)));\n      }\n      if (foo1_s) {\n        doc.addField(\"foo1_s\",t(0));\n      }\n      if (foo2_s) {\n        doc.addField(\"foo2_s\",r.nextInt(2));\n      }\n      if (foo4_s) {\n        doc.addField(\"foo4_s\",r.nextInt(4));\n      }\n      if (foo8_s) {\n        doc.addField(\"foo8_s\",r.nextInt(8));\n      }\n      if (t10_100_ws) {\n        StringBuilder sb = new StringBuilder(9*100);\n        for (int j=0; j<100; j++) {\n          sb.append(' ');\n          sb.append(t(r.nextInt(10)));\n        }\n        doc.addField(\"t10_100_ws\", sb.toString());\n      }\n\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      cmd.solrDoc = doc;\n      processor.processAdd(cmd);\n    }\n    processor.finish();\n    req.close();\n\n    assertU(commit());\n\n    req = lrf.makeRequest();\n    assertEquals(nDocs, req.getSearcher().maxDoc());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#createIndex2(int,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#createIndex2(int,String...).mjava","sourceNew":"  // Skip encoding for updating the index\n  void createIndex2(int nDocs, String... fields) throws IOException {\n    Set<String> fieldSet = new HashSet<>(Arrays.asList(fields));\n\n    SolrQueryRequest req = lrf.makeRequest();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(null);\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    boolean foomany_s = fieldSet.contains(\"foomany_s\");\n    boolean foo1_s = fieldSet.contains(\"foo1_s\");\n    boolean foo2_s = fieldSet.contains(\"foo2_s\");\n    boolean foo4_s = fieldSet.contains(\"foo4_s\");\n    boolean foo8_s = fieldSet.contains(\"foo8_s\");\n    boolean t10_100_ws = fieldSet.contains(\"t10_100_ws\");\n\n    \n    for (int i=0; i<nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\",Float.toString(i));\n      if (foomany_s) {\n        doc.addField(\"foomany_s\",t(r.nextInt(nDocs*10)));\n      }\n      if (foo1_s) {\n        doc.addField(\"foo1_s\",t(0));\n      }\n      if (foo2_s) {\n        doc.addField(\"foo2_s\",r.nextInt(2));\n      }\n      if (foo4_s) {\n        doc.addField(\"foo4_s\",r.nextInt(4));\n      }\n      if (foo8_s) {\n        doc.addField(\"foo8_s\",r.nextInt(8));\n      }\n      if (t10_100_ws) {\n        StringBuilder sb = new StringBuilder(9*100);\n        for (int j=0; j<100; j++) {\n          sb.append(' ');\n          sb.append(t(r.nextInt(10)));\n        }\n        doc.addField(\"t10_100_ws\", sb.toString());\n      }\n\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      cmd.solrDoc = doc;\n      processor.processAdd(cmd);\n    }\n    processor.finish();\n    req.close();\n\n    assertU(commit());\n\n    req = lrf.makeRequest();\n    assertEquals(nDocs, req.getSearcher().maxDoc());\n    req.close();\n  }\n\n","sourceOld":"  // Skip encoding for updating the index\n  void createIndex2(int nDocs, String... fields) throws IOException {\n    Set<String> fieldSet = new HashSet<String>(Arrays.asList(fields));\n\n    SolrQueryRequest req = lrf.makeRequest();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(null);\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    boolean foomany_s = fieldSet.contains(\"foomany_s\");\n    boolean foo1_s = fieldSet.contains(\"foo1_s\");\n    boolean foo2_s = fieldSet.contains(\"foo2_s\");\n    boolean foo4_s = fieldSet.contains(\"foo4_s\");\n    boolean foo8_s = fieldSet.contains(\"foo8_s\");\n    boolean t10_100_ws = fieldSet.contains(\"t10_100_ws\");\n\n    \n    for (int i=0; i<nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\",Float.toString(i));\n      if (foomany_s) {\n        doc.addField(\"foomany_s\",t(r.nextInt(nDocs*10)));\n      }\n      if (foo1_s) {\n        doc.addField(\"foo1_s\",t(0));\n      }\n      if (foo2_s) {\n        doc.addField(\"foo2_s\",r.nextInt(2));\n      }\n      if (foo4_s) {\n        doc.addField(\"foo4_s\",r.nextInt(4));\n      }\n      if (foo8_s) {\n        doc.addField(\"foo8_s\",r.nextInt(8));\n      }\n      if (t10_100_ws) {\n        StringBuilder sb = new StringBuilder(9*100);\n        for (int j=0; j<100; j++) {\n          sb.append(' ');\n          sb.append(t(r.nextInt(10)));\n        }\n        doc.addField(\"t10_100_ws\", sb.toString());\n      }\n\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      cmd.solrDoc = doc;\n      processor.processAdd(cmd);\n    }\n    processor.finish();\n    req.close();\n\n    assertU(commit());\n\n    req = lrf.makeRequest();\n    assertEquals(nDocs, req.getSearcher().maxDoc());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d06ba55ef44382e5547ff01fff8eb1f0fa0faa6","date":1487775028,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#createIndex2(int,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSearchPerf#createIndex2(int,String...).mjava","sourceNew":"  // Skip encoding for updating the index\n  void createIndex2(int nDocs, String... fields) throws IOException {\n    Set<String> fieldSet = new HashSet<>(Arrays.asList(fields));\n\n    SolrQueryRequest req = lrf.makeRequest();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(null);\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    boolean foomany_s = fieldSet.contains(\"foomany_s\");\n    boolean foo1_s = fieldSet.contains(\"foo1_s\");\n    boolean foo2_s = fieldSet.contains(\"foo2_s\");\n    boolean foo4_s = fieldSet.contains(\"foo4_s\");\n    boolean foo8_s = fieldSet.contains(\"foo8_s\");\n    boolean t10_100_ws = fieldSet.contains(\"t10_100_ws\");\n\n    \n    for (int i=0; i<nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\",Float.toString(i));\n      if (foomany_s) {\n        doc.addField(\"foomany_s\",t(r.nextInt(nDocs*10)));\n      }\n      if (foo1_s) {\n        doc.addField(\"foo1_s\",t(0));\n      }\n      if (foo2_s) {\n        doc.addField(\"foo2_s\",r.nextInt(2));\n      }\n      if (foo4_s) {\n        doc.addField(\"foo4_s\",r.nextInt(4));\n      }\n      if (foo8_s) {\n        doc.addField(\"foo8_s\",r.nextInt(8));\n      }\n      if (t10_100_ws) {\n        StringBuilder sb = new StringBuilder(9*100);\n        for (int j=0; j<100; j++) {\n          sb.append(' ');\n          sb.append(t(r.nextInt(10)));\n        }\n        doc.addField(\"t10_100_ws\", sb.toString());\n      }\n\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      cmd.solrDoc = doc;\n      processor.processAdd(cmd);\n    }\n    processor.finish();\n    processor.close();\n    req.close();\n\n    assertU(commit());\n\n    req = lrf.makeRequest();\n    assertEquals(nDocs, req.getSearcher().maxDoc());\n    req.close();\n  }\n\n","sourceOld":"  // Skip encoding for updating the index\n  void createIndex2(int nDocs, String... fields) throws IOException {\n    Set<String> fieldSet = new HashSet<>(Arrays.asList(fields));\n\n    SolrQueryRequest req = lrf.makeRequest();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(null);\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\n    boolean foomany_s = fieldSet.contains(\"foomany_s\");\n    boolean foo1_s = fieldSet.contains(\"foo1_s\");\n    boolean foo2_s = fieldSet.contains(\"foo2_s\");\n    boolean foo4_s = fieldSet.contains(\"foo4_s\");\n    boolean foo8_s = fieldSet.contains(\"foo8_s\");\n    boolean t10_100_ws = fieldSet.contains(\"t10_100_ws\");\n\n    \n    for (int i=0; i<nDocs; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\",Float.toString(i));\n      if (foomany_s) {\n        doc.addField(\"foomany_s\",t(r.nextInt(nDocs*10)));\n      }\n      if (foo1_s) {\n        doc.addField(\"foo1_s\",t(0));\n      }\n      if (foo2_s) {\n        doc.addField(\"foo2_s\",r.nextInt(2));\n      }\n      if (foo4_s) {\n        doc.addField(\"foo4_s\",r.nextInt(4));\n      }\n      if (foo8_s) {\n        doc.addField(\"foo8_s\",r.nextInt(8));\n      }\n      if (t10_100_ws) {\n        StringBuilder sb = new StringBuilder(9*100);\n        for (int j=0; j<100; j++) {\n          sb.append(' ');\n          sb.append(t(r.nextInt(10)));\n        }\n        doc.addField(\"t10_100_ws\", sb.toString());\n      }\n\n      AddUpdateCommand cmd = new AddUpdateCommand(req);\n      cmd.solrDoc = doc;\n      processor.processAdd(cmd);\n    }\n    processor.finish();\n    req.close();\n\n    assertU(commit());\n\n    req = lrf.makeRequest();\n    assertEquals(nDocs, req.getSearcher().maxDoc());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d06ba55ef44382e5547ff01fff8eb1f0fa0faa6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d06ba55ef44382e5547ff01fff8eb1f0fa0faa6"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2d06ba55ef44382e5547ff01fff8eb1f0fa0faa6"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2d06ba55ef44382e5547ff01fff8eb1f0fa0faa6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}