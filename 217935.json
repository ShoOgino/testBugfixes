{"path":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#assertTopDocsEquals(ScoreDoc[],ScoreDoc[]).mjava","commits":[{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#assertTopDocsEquals(ScoreDoc[],ScoreDoc[]).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestEarlyTermination#assertTopDocsEquals(ScoreDoc[],ScoreDoc[]).mjava","sourceNew":"  private static void assertTopDocsEquals(ScoreDoc[] scoreDocs1, ScoreDoc[] scoreDocs2) {\n    assertEquals(scoreDocs1.length, scoreDocs2.length);\n    for (int i = 0; i < scoreDocs1.length; ++i) {\n      final ScoreDoc scoreDoc1 = scoreDocs1[i];\n      final ScoreDoc scoreDoc2 = scoreDocs2[i];\n      assertEquals(scoreDoc1.doc, scoreDoc2.doc);\n      assertEquals(scoreDoc1.score, scoreDoc2.score, 0.001f);\n    }\n  }\n\n","sourceOld":"  private static void assertTopDocsEquals(ScoreDoc[] scoreDocs1, ScoreDoc[] scoreDocs2) {\n    assertEquals(scoreDocs1.length, scoreDocs2.length);\n    for (int i = 0; i < scoreDocs1.length; ++i) {\n      final ScoreDoc scoreDoc1 = scoreDocs1[i];\n      final ScoreDoc scoreDoc2 = scoreDocs2[i];\n      assertEquals(scoreDoc1.doc, scoreDoc2.doc);\n      assertEquals(scoreDoc1.score, scoreDoc2.score, 0.001f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0345a2d45479f891041f8b3ce351bc975e64ac","date":1462708700,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#assertTopDocsEquals(ScoreDoc[],ScoreDoc[]).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#assertTopDocsEquals(ScoreDoc[],ScoreDoc[]).mjava","sourceNew":"  private static void assertTopDocsEquals(ScoreDoc[] scoreDocs1, ScoreDoc[] scoreDocs2) {\n    assertEquals(scoreDocs1.length, scoreDocs2.length);\n    for (int i = 0; i < scoreDocs1.length; ++i) {\n      final ScoreDoc scoreDoc1 = scoreDocs1[i];\n      final ScoreDoc scoreDoc2 = scoreDocs2[i];\n      assertEquals(scoreDoc1.doc, scoreDoc2.doc);\n      assertEquals(scoreDoc1.score, scoreDoc2.score, 0.001f);\n    }\n  }\n\n","sourceOld":"  private static void assertTopDocsEquals(ScoreDoc[] scoreDocs1, ScoreDoc[] scoreDocs2) {\n    assertEquals(scoreDocs1.length, scoreDocs2.length);\n    for (int i = 0; i < scoreDocs1.length; ++i) {\n      final ScoreDoc scoreDoc1 = scoreDocs1[i];\n      final ScoreDoc scoreDoc2 = scoreDocs2[i];\n      assertEquals(scoreDoc1.doc, scoreDoc2.doc);\n      assertEquals(scoreDoc1.score, scoreDoc2.score, 0.001f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#assertTopDocsEquals(ScoreDoc[],ScoreDoc[]).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#assertTopDocsEquals(ScoreDoc[],ScoreDoc[]).mjava","sourceNew":"  private static void assertTopDocsEquals(ScoreDoc[] scoreDocs1, ScoreDoc[] scoreDocs2) {\n    assertEquals(scoreDocs1.length, scoreDocs2.length);\n    for (int i = 0; i < scoreDocs1.length; ++i) {\n      final ScoreDoc scoreDoc1 = scoreDocs1[i];\n      final ScoreDoc scoreDoc2 = scoreDocs2[i];\n      assertEquals(scoreDoc1.doc, scoreDoc2.doc);\n      assertEquals(scoreDoc1.score, scoreDoc2.score, 0.001f);\n    }\n  }\n\n","sourceOld":"  private static void assertTopDocsEquals(ScoreDoc[] scoreDocs1, ScoreDoc[] scoreDocs2) {\n    assertEquals(scoreDocs1.length, scoreDocs2.length);\n    for (int i = 0; i < scoreDocs1.length; ++i) {\n      final ScoreDoc scoreDoc1 = scoreDocs1[i];\n      final ScoreDoc scoreDoc2 = scoreDocs2[i];\n      assertEquals(scoreDoc1.doc, scoreDoc2.doc);\n      assertEquals(scoreDoc1.score, scoreDoc2.score, 0.001f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#assertTopDocsEquals(ScoreDoc[],ScoreDoc[]).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#assertTopDocsEquals(ScoreDoc[],ScoreDoc[]).mjava","sourceNew":"  private static void assertTopDocsEquals(ScoreDoc[] scoreDocs1, ScoreDoc[] scoreDocs2) {\n    assertEquals(scoreDocs1.length, scoreDocs2.length);\n    for (int i = 0; i < scoreDocs1.length; ++i) {\n      final ScoreDoc scoreDoc1 = scoreDocs1[i];\n      final ScoreDoc scoreDoc2 = scoreDocs2[i];\n      assertEquals(scoreDoc1.doc, scoreDoc2.doc);\n      assertEquals(scoreDoc1.score, scoreDoc2.score, 0.001f);\n    }\n  }\n\n","sourceOld":"  private static void assertTopDocsEquals(ScoreDoc[] scoreDocs1, ScoreDoc[] scoreDocs2) {\n    assertEquals(scoreDocs1.length, scoreDocs2.length);\n    for (int i = 0; i < scoreDocs1.length; ++i) {\n      final ScoreDoc scoreDoc1 = scoreDocs1[i];\n      final ScoreDoc scoreDoc2 = scoreDocs2[i];\n      assertEquals(scoreDoc1.doc, scoreDoc2.doc);\n      assertEquals(scoreDoc1.score, scoreDoc2.score, 0.001f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#assertTopDocsEquals(ScoreDoc[],ScoreDoc[]).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#assertTopDocsEquals(ScoreDoc[],ScoreDoc[]).mjava","sourceNew":"  private static void assertTopDocsEquals(ScoreDoc[] scoreDocs1, ScoreDoc[] scoreDocs2) {\n    assertEquals(scoreDocs1.length, scoreDocs2.length);\n    for (int i = 0; i < scoreDocs1.length; ++i) {\n      final ScoreDoc scoreDoc1 = scoreDocs1[i];\n      final ScoreDoc scoreDoc2 = scoreDocs2[i];\n      assertEquals(scoreDoc1.doc, scoreDoc2.doc);\n      assertEquals(scoreDoc1.score, scoreDoc2.score, 0.001f);\n    }\n  }\n\n","sourceOld":"  private static void assertTopDocsEquals(ScoreDoc[] scoreDocs1, ScoreDoc[] scoreDocs2) {\n    assertEquals(scoreDocs1.length, scoreDocs2.length);\n    for (int i = 0; i < scoreDocs1.length; ++i) {\n      final ScoreDoc scoreDoc1 = scoreDocs1[i];\n      final ScoreDoc scoreDoc2 = scoreDocs2[i];\n      assertEquals(scoreDoc1.doc, scoreDoc2.doc);\n      assertEquals(scoreDoc1.score, scoreDoc2.score, 0.001f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#assertTopDocsEquals(ScoreDoc[],ScoreDoc[]).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestEarlyTerminatingSortingCollector#assertTopDocsEquals(ScoreDoc[],ScoreDoc[]).mjava","sourceNew":"  private static void assertTopDocsEquals(ScoreDoc[] scoreDocs1, ScoreDoc[] scoreDocs2) {\n    assertEquals(scoreDocs1.length, scoreDocs2.length);\n    for (int i = 0; i < scoreDocs1.length; ++i) {\n      final ScoreDoc scoreDoc1 = scoreDocs1[i];\n      final ScoreDoc scoreDoc2 = scoreDocs2[i];\n      assertEquals(scoreDoc1.doc, scoreDoc2.doc);\n      assertEquals(scoreDoc1.score, scoreDoc2.score, 0.001f);\n    }\n  }\n\n","sourceOld":"  private static void assertTopDocsEquals(ScoreDoc[] scoreDocs1, ScoreDoc[] scoreDocs2) {\n    assertEquals(scoreDocs1.length, scoreDocs2.length);\n    for (int i = 0; i < scoreDocs1.length; ++i) {\n      final ScoreDoc scoreDoc1 = scoreDocs1[i];\n      final ScoreDoc scoreDoc2 = scoreDocs2[i];\n      assertEquals(scoreDoc1.doc, scoreDoc2.doc);\n      assertEquals(scoreDoc1.score, scoreDoc2.score, 0.001f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","3d33e731a93d4b57e662ff094f64f94a745422d4"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","fb0345a2d45479f891041f8b3ce351bc975e64ac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","0ad30c6a479e764150a3316e57263319775f1df2"],"fb0345a2d45479f891041f8b3ce351bc975e64ac":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","fb0345a2d45479f891041f8b3ce351bc975e64ac"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"fb0345a2d45479f891041f8b3ce351bc975e64ac":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}