{"path":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setStringValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setStringValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setStringValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setStringValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = DirectoryReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setStringValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = IndexReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setStringValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = DirectoryReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newField(\"id\", \"\", StringField.TYPE_STORED);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setStringValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = DirectoryReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    Directory directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setStringValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = DirectoryReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setStringValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = DirectoryReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    Directory directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setStringValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = DirectoryReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setStringValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = DirectoryReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    Directory directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setStringValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = DirectoryReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    MockDirectoryWrapper directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setStringValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = DirectoryReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    Directory directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setStringValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.shutdown();\n    IndexReader reader = DirectoryReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    Directory directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setStringValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = DirectoryReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    Directory directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                      .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setStringValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.shutdown();\n    IndexReader reader = DirectoryReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    Directory directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setStringValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.shutdown();\n    IndexReader reader = DirectoryReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testDeleteMerging().mjava","sourceNew":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    Directory directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                      .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setStringValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.close();\n    IndexReader reader = DirectoryReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  // Test that deletes committed after a merge started and\n  // before it finishes, are correctly merged back:\n  public void testDeleteMerging() throws IOException {\n    Directory directory = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    // Force degenerate merging so we can get a mix of\n    // merging of segments with and without deletes at the\n    // start:\n    mp.setMinMergeDocs(1000);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                      .setMergePolicy(mp));\n\n    Document doc = new Document();\n    Field idField = newStringField(\"id\", \"\", Field.Store.YES);\n    doc.add(idField);\n    for(int i=0;i<10;i++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: cycle\");\n      }\n      for(int j=0;j<100;j++) {\n        idField.setStringValue(Integer.toString(i*100+j));\n        writer.addDocument(doc);\n      }\n\n      int delID = i;\n      while(delID < 100*(1+i)) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: del \" + delID);\n        }\n        writer.deleteDocuments(new Term(\"id\", \"\"+delID));\n        delID += 10;\n      }\n\n      writer.commit();\n    }\n\n    writer.shutdown();\n    IndexReader reader = DirectoryReader.open(directory);\n    // Verify that we did not lose any deletes...\n    assertEquals(450, reader.numDocs());\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"aba371508186796cc6151d8223a5b4e16d02e26e":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","ae14298f4eec6d5faee6a149f88ba57d14a6f21a","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}