{"path":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testByteToFloat().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testByteToFloat().mjava","pathOld":"src/test/org/apache/lucene/util/TestSmallFloat#testByteToFloat().mjava","sourceNew":"  public void testByteToFloat() {\n    for (int i=0; i<256; i++) {\n      float f1 = orig_byteToFloat((byte)i);\n      float f2 = SmallFloat.byteToFloat((byte)i, 3,15);\n      float f3 = SmallFloat.byte315ToFloat((byte)i);\n      assertEquals(f1,f2,0.0);\n      assertEquals(f2,f3,0.0);\n\n      float f4 = SmallFloat.byteToFloat((byte)i,5,2);\n      float f5 = SmallFloat.byte52ToFloat((byte)i);\n      assertEquals(f4,f5,0.0);\n    }\n  }\n\n","sourceOld":"  public void testByteToFloat() {\n    for (int i=0; i<256; i++) {\n      float f1 = orig_byteToFloat((byte)i);\n      float f2 = SmallFloat.byteToFloat((byte)i, 3,15);\n      float f3 = SmallFloat.byte315ToFloat((byte)i);\n      assertEquals(f1,f2,0.0);\n      assertEquals(f2,f3,0.0);\n\n      float f4 = SmallFloat.byteToFloat((byte)i,5,2);\n      float f5 = SmallFloat.byte52ToFloat((byte)i);\n      assertEquals(f4,f5,0.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee","date":1298483754,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testByteToFloat().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testByteToFloat().mjava","sourceNew":"  public void testByteToFloat() {\n    assertEquals(0, orig_floatToByte_v13(5.8123817E-10f));       // verify the old bug (see LUCENE-2937)\n    assertEquals(1, orig_floatToByte(5.8123817E-10f));           // verify it's fixed in this test code\n    assertEquals(1, SmallFloat.floatToByte315(5.8123817E-10f));  // verify it's fixed\n\n    assertEquals(1, orig_floatToByte(Float.MIN_VALUE));\n\n    for (int i=0; i<256; i++) {\n      float f1 = orig_byteToFloat((byte)i);\n      float f2 = SmallFloat.byteToFloat((byte)i, 3,15);\n      float f3 = SmallFloat.byte315ToFloat((byte)i);\n      assertEquals(f1,f2,0.0);\n      assertEquals(f2,f3,0.0);\n\n      float f4 = SmallFloat.byteToFloat((byte)i,5,2);\n      float f5 = SmallFloat.byte52ToFloat((byte)i);\n      assertEquals(f4,f5,0.0);\n    }\n  }\n\n","sourceOld":"  public void testByteToFloat() {\n    for (int i=0; i<256; i++) {\n      float f1 = orig_byteToFloat((byte)i);\n      float f2 = SmallFloat.byteToFloat((byte)i, 3,15);\n      float f3 = SmallFloat.byte315ToFloat((byte)i);\n      assertEquals(f1,f2,0.0);\n      assertEquals(f2,f3,0.0);\n\n      float f4 = SmallFloat.byteToFloat((byte)i,5,2);\n      float f5 = SmallFloat.byte52ToFloat((byte)i);\n      assertEquals(f4,f5,0.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd5fa2b0e0ce0816868cd00a822d726ba6560bc6","date":1298497362,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testByteToFloat().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testByteToFloat().mjava","sourceNew":"  public void testByteToFloat() {\n    for (int i=0; i<256; i++) {\n      float f1 = orig_byteToFloat((byte)i);\n      float f2 = SmallFloat.byteToFloat((byte)i, 3,15);\n      float f3 = SmallFloat.byte315ToFloat((byte)i);\n      assertEquals(f1,f2,0.0);\n      assertEquals(f2,f3,0.0);\n\n      float f4 = SmallFloat.byteToFloat((byte)i,5,2);\n      float f5 = SmallFloat.byte52ToFloat((byte)i);\n      assertEquals(f4,f5,0.0);\n    }\n  }\n\n","sourceOld":"  public void testByteToFloat() {\n    assertEquals(0, orig_floatToByte_v13(5.8123817E-10f));       // verify the old bug (see LUCENE-2937)\n    assertEquals(1, orig_floatToByte(5.8123817E-10f));           // verify it's fixed in this test code\n    assertEquals(1, SmallFloat.floatToByte315(5.8123817E-10f));  // verify it's fixed\n\n    assertEquals(1, orig_floatToByte(Float.MIN_VALUE));\n\n    for (int i=0; i<256; i++) {\n      float f1 = orig_byteToFloat((byte)i);\n      float f2 = SmallFloat.byteToFloat((byte)i, 3,15);\n      float f3 = SmallFloat.byte315ToFloat((byte)i);\n      assertEquals(f1,f2,0.0);\n      assertEquals(f2,f3,0.0);\n\n      float f4 = SmallFloat.byteToFloat((byte)i,5,2);\n      float f5 = SmallFloat.byte52ToFloat((byte)i);\n      assertEquals(f4,f5,0.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestSmallFloat#testByteToFloat().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestSmallFloat#testByteToFloat().mjava","sourceNew":"  public void testByteToFloat() {\n    for (int i=0; i<256; i++) {\n      float f1 = orig_byteToFloat((byte)i);\n      float f2 = SmallFloat.byteToFloat((byte)i, 3,15);\n      float f3 = SmallFloat.byte315ToFloat((byte)i);\n      assertEquals(f1,f2,0.0);\n      assertEquals(f2,f3,0.0);\n\n      float f4 = SmallFloat.byteToFloat((byte)i,5,2);\n      float f5 = SmallFloat.byte52ToFloat((byte)i);\n      assertEquals(f4,f5,0.0);\n    }\n  }\n\n","sourceOld":"  public void testByteToFloat() {\n    for (int i=0; i<256; i++) {\n      float f1 = orig_byteToFloat((byte)i);\n      float f2 = SmallFloat.byteToFloat((byte)i, 3,15);\n      float f3 = SmallFloat.byte315ToFloat((byte)i);\n      assertEquals(f1,f2,0.0);\n      assertEquals(f2,f3,0.0);\n\n      float f4 = SmallFloat.byteToFloat((byte)i,5,2);\n      float f5 = SmallFloat.byte52ToFloat((byte)i);\n      assertEquals(f4,f5,0.0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5fa2b0e0ce0816868cd00a822d726ba6560bc6"],"4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5fa2b0e0ce0816868cd00a822d726ba6560bc6":["4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee":["cd5fa2b0e0ce0816868cd00a822d726ba6560bc6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5fa2b0e0ce0816868cd00a822d726ba6560bc6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4c162cf3bb7fd2a150aaeeab80495a0a25bb9aee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}