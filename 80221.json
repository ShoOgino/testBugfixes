{"path":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d46584d4a299aaed53fdd79f1cd77f222aee1e","date":1331071171,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( SolrException sx ) {\n      throw sx;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( SolrException sx ) {\n      throw sx;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( SolrException sx ) {\n      throw sx;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( SolrException sx ) {\n      throw sx;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":["6aedf81f068e430dec27d94310415cc6ff52731c"],"bugIntro":["bbdd035c502312d32111b9642ba3dbd5c52ee64f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( SolrException sx ) {\n      throw sx;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) throws IOException {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( SolrException sx ) {\n      throw sx;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if (handler == null) {\n        handler = coreContainer.getRequestHandler(path);\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( SolrException sx ) {\n      throw sx;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if( handler == null &&\n          coreContainer != null &&\n          path.equals( coreContainer.getAdminPath() ) ) {\n        handler = coreContainer.getMultiCoreHandler();\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( SolrException sx ) {\n      throw sx;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2fc9f4a33c8fefeb1260aea04273a36b0d32378e","date":1421852764,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if (handler == null) {\n        handler = coreContainer.getRequestHandler(path);\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( SolrException sx ) {\n      throw sx;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if (handler == null) {\n        handler = coreContainer.getRequestHandler(path);\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( SolrException sx ) {\n      throw sx;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if (handler == null) {\n        handler = coreContainer.getRequestHandler(path);\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch( IOException | SolrException iox ) {\n      throw iox;\n    } catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if (handler == null) {\n        handler = coreContainer.getRequestHandler(path);\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    }\n    catch( IOException iox ) {\n      throw iox;\n    }\n    catch( SolrException sx ) {\n      throw sx;\n    }\n    catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","date":1425554964,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String coreName) throws SolrServerException, IOException\n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    if (coreName == null)\n      coreName = this.coreName;\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if (handler == null) {\n        handler = coreContainer.getRequestHandler(path);\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch( IOException | SolrException iox ) {\n      throw iox;\n    } catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if (handler == null) {\n        handler = coreContainer.getRequestHandler(path);\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch( IOException | SolrException iox ) {\n      throw iox;\n    } catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer#request(SolrRequest).mjava","sourceNew":null,"sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException \n  {\n    String path = request.getPath();\n    if( path == null || !path.startsWith( \"/\" ) ) {\n      path = \"/select\";\n    }\n\n    // Check for cores action\n    SolrCore core =  coreContainer.getCore( coreName );\n    if( core == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \n                               \"No such core: \" + coreName );\n    }\n    \n    SolrParams params = request.getParams();\n    if( params == null ) {\n      params = new ModifiableSolrParams();\n    }\n    \n    // Extract the handler from the path or params\n    SolrRequestHandler handler = core.getRequestHandler( path );\n    if( handler == null ) {\n      if( \"/select\".equals( path ) || \"/select/\".equalsIgnoreCase( path) ) {\n        String qt = params.get( CommonParams.QT );\n        handler = core.getRequestHandler( qt );\n        if( handler == null ) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+qt);\n        }\n      }\n      // Perhaps the path is to manage the cores\n      if (handler == null) {\n        handler = coreContainer.getRequestHandler(path);\n      }\n    }\n    if( handler == null ) {\n      core.close();\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"unknown handler: \"+path );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = _parser.buildRequestFrom( core, params, request.getContentStreams() );\n      req.getContext().put( \"path\", path );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        if(rsp.getException() instanceof SolrException) {\n          throw rsp.getException();\n        }\n        throw new SolrServerException( rsp.getException() );\n      }\n      \n      // Check if this should stream results\n      if( request.getStreamingResponseCallback() != null ) {\n        try {\n          final StreamingResponseCallback callback = request.getStreamingResponseCallback();\n          BinaryResponseWriter.Resolver resolver = \n            new BinaryResponseWriter.Resolver( req, rsp.getReturnFields()) \n          {\n            @Override\n            public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n              // write an empty list...\n              SolrDocumentList docs = new SolrDocumentList();\n              docs.setNumFound( ctx.docs.matches() );\n              docs.setStart( ctx.docs.offset() );\n              docs.setMaxScore( ctx.docs.maxScore() );\n              codec.writeSolrDocumentList( docs );\n              \n              // This will transform\n              writeResultsBody( ctx, codec );\n            }\n          };\n          \n\n          ByteArrayOutputStream out = new ByteArrayOutputStream();\n          new JavaBinCodec(resolver) {\n\n            @Override\n            public void writeSolrDocument(SolrDocument doc) {\n              callback.streamSolrDocument( doc );\n              //super.writeSolrDocument( doc, fields );\n            }\n\n            @Override\n            public void writeSolrDocumentList(SolrDocumentList docs) throws IOException {\n              if( docs.size() > 0 ) {\n                SolrDocumentList tmp = new SolrDocumentList();\n                tmp.setMaxScore( docs.getMaxScore() );\n                tmp.setNumFound( docs.getNumFound() );\n                tmp.setStart( docs.getStart() );\n                docs = tmp;\n              }\n              callback.streamDocListInfo( docs.getNumFound(), docs.getStart(), docs.getMaxScore() );\n              super.writeSolrDocumentList(docs);\n            }\n            \n          }.marshal(rsp.getValues(), out);\n\n          InputStream in = new ByteArrayInputStream(out.toByteArray());\n          return (NamedList<Object>) new JavaBinCodec(resolver).unmarshal(in);\n        }\n        catch (Exception ex) {\n          throw new RuntimeException(ex);\n        }\n      }\n      \n      // Now write it out\n      NamedList<Object> normalized = BinaryResponseWriter.getParsedResponse(req, rsp);\n      return normalized;\n    } catch( IOException | SolrException iox ) {\n      throw iox;\n    } catch( Exception ex ) {\n      throw new SolrServerException( ex );\n    }\n    finally {\n      if (req != null) req.close();\n      core.close();\n      SolrRequestInfo.clearRequestInfo();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"],"d8d46584d4a299aaed53fdd79f1cd77f222aee1e":["c26f00b574427b55127e869b935845554afde1fa"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["c26f00b574427b55127e869b935845554afde1fa","d8d46584d4a299aaed53fdd79f1cd77f222aee1e"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c6e1dc1bb4254226c8d7151b596cc1be40671751","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["d8d46584d4a299aaed53fdd79f1cd77f222aee1e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d8d46584d4a299aaed53fdd79f1cd77f222aee1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"]},"commit2Childs":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"d8d46584d4a299aaed53fdd79f1cd77f222aee1e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c26f00b574427b55127e869b935845554afde1fa":["d8d46584d4a299aaed53fdd79f1cd77f222aee1e","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["2fc9f4a33c8fefeb1260aea04273a36b0d32378e"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2fc9f4a33c8fefeb1260aea04273a36b0d32378e":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}