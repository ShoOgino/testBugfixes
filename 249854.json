{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#findDataDir(DirectoryFactory,String,SolrConfig,CoreDescriptor).mjava","commits":[{"id":"b39b1b02e442aaf736cc87417e93552cbd8ef1da","date":1484786722,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#findDataDir(DirectoryFactory,String,SolrConfig,CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Locate the data directory for a given config and core descriptor.\n   *\n   * @param directoryFactory\n   *          The directory factory to use if necessary to calculate an absolute path. Should be the same as what will\n   *          be used to open the data directory later.\n   * @param dataDir\n   *          An optional hint to the data directory location. Will be normalized and used if not null.\n   * @param config\n   *          A solr config to retrieve the default data directory location, if used.\n   * @param coreDescriptor\n   *          descriptor to load the actual data dir from, if not using the defualt.\n   * @return a normalized data directory name\n   * @throws SolrException\n   *           if the data directory cannot be loaded from the core descriptor\n   */\n  static String findDataDir(DirectoryFactory directoryFactory, String dataDir, SolrConfig config, CoreDescriptor coreDescriptor) {\n    if (dataDir == null) {\n      if (coreDescriptor.usingDefaultDataDir()) {\n        dataDir = config.getDataDir();\n      }\n      if (dataDir == null) {\n        try {\n          dataDir = coreDescriptor.getDataDir();\n          if (!directoryFactory.isAbsolute(dataDir)) {\n            dataDir = directoryFactory.getDataHome(coreDescriptor);\n          }\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n    return SolrResourceLoader.normalizeDir(dataDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#findDataDir(DirectoryFactory,String,SolrConfig,CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Locate the data directory for a given config and core descriptor.\n   *\n   * @param directoryFactory\n   *          The directory factory to use if necessary to calculate an absolute path. Should be the same as what will\n   *          be used to open the data directory later.\n   * @param dataDir\n   *          An optional hint to the data directory location. Will be normalized and used if not null.\n   * @param config\n   *          A solr config to retrieve the default data directory location, if used.\n   * @param coreDescriptor\n   *          descriptor to load the actual data dir from, if not using the defualt.\n   * @return a normalized data directory name\n   * @throws SolrException\n   *           if the data directory cannot be loaded from the core descriptor\n   */\n  static String findDataDir(DirectoryFactory directoryFactory, String dataDir, SolrConfig config, CoreDescriptor coreDescriptor) {\n    if (dataDir == null) {\n      if (coreDescriptor.usingDefaultDataDir()) {\n        dataDir = config.getDataDir();\n      }\n      if (dataDir == null) {\n        try {\n          dataDir = coreDescriptor.getDataDir();\n          if (!directoryFactory.isAbsolute(dataDir)) {\n            dataDir = directoryFactory.getDataHome(coreDescriptor);\n          }\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n    return SolrResourceLoader.normalizeDir(dataDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96e0d4494fe54b31c7f0151f3a632124ab806351","date":1512410218,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#findDataDir(DirectoryFactory,String,SolrConfig,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#findDataDir(DirectoryFactory,String,SolrConfig,CoreDescriptor).mjava","sourceNew":"  /**\n   * Locate the data directory for a given config and core descriptor.\n   *\n   * @param directoryFactory\n   *          The directory factory to use if necessary to calculate an absolute path. Should be the same as what will\n   *          be used to open the data directory later.\n   * @param dataDir\n   *          An optional hint to the data directory location. Will be normalized and used if not null.\n   * @param config\n   *          A solr config to retrieve the default data directory location, if used.\n   * @param coreDescriptor\n   *          descriptor to load the actual data dir from, if not using the defualt.\n   * @return a normalized data directory name\n   * @throws SolrException\n   *           if the data directory cannot be loaded from the core descriptor\n   */\n  static String findDataDir(DirectoryFactory directoryFactory, String dataDir, SolrConfig config, CoreDescriptor coreDescriptor) {\n    if (dataDir == null) {\n      if (coreDescriptor.usingDefaultDataDir()) {\n        dataDir = config.getDataDir();\n      }\n      if (dataDir == null) {\n        try {\n          dataDir = coreDescriptor.getDataDir();\n          if (!directoryFactory.isAbsolute(dataDir)) {\n            dataDir = directoryFactory.getDataHome(coreDescriptor);\n          }\n        } catch (IOException e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n    return SolrResourceLoader.normalizeDir(dataDir);\n  }\n\n","sourceOld":"  /**\n   * Locate the data directory for a given config and core descriptor.\n   *\n   * @param directoryFactory\n   *          The directory factory to use if necessary to calculate an absolute path. Should be the same as what will\n   *          be used to open the data directory later.\n   * @param dataDir\n   *          An optional hint to the data directory location. Will be normalized and used if not null.\n   * @param config\n   *          A solr config to retrieve the default data directory location, if used.\n   * @param coreDescriptor\n   *          descriptor to load the actual data dir from, if not using the defualt.\n   * @return a normalized data directory name\n   * @throws SolrException\n   *           if the data directory cannot be loaded from the core descriptor\n   */\n  static String findDataDir(DirectoryFactory directoryFactory, String dataDir, SolrConfig config, CoreDescriptor coreDescriptor) {\n    if (dataDir == null) {\n      if (coreDescriptor.usingDefaultDataDir()) {\n        dataDir = config.getDataDir();\n      }\n      if (dataDir == null) {\n        try {\n          dataDir = coreDescriptor.getDataDir();\n          if (!directoryFactory.isAbsolute(dataDir)) {\n            dataDir = directoryFactory.getDataHome(coreDescriptor);\n          }\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n    return SolrResourceLoader.normalizeDir(dataDir);\n  }\n\n","bugFix":["b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#findDataDir(DirectoryFactory,String,SolrConfig,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#findDataDir(DirectoryFactory,String,SolrConfig,CoreDescriptor).mjava","sourceNew":"  /**\n   * Locate the data directory for a given config and core descriptor.\n   *\n   * @param directoryFactory The directory factory to use if necessary to calculate an absolute path. Should be the same as what will\n   *                         be used to open the data directory later.\n   * @param dataDir          An optional hint to the data directory location. Will be normalized and used if not null.\n   * @param config           A solr config to retrieve the default data directory location, if used.\n   * @param coreDescriptor   descriptor to load the actual data dir from, if not using the defualt.\n   * @return a normalized data directory name\n   * @throws SolrException if the data directory cannot be loaded from the core descriptor\n   */\n  static String findDataDir(DirectoryFactory directoryFactory, String dataDir, SolrConfig config, CoreDescriptor coreDescriptor) {\n    if (dataDir == null) {\n      if (coreDescriptor.usingDefaultDataDir()) {\n        dataDir = config.getDataDir();\n      }\n      if (dataDir == null) {\n        try {\n          dataDir = coreDescriptor.getDataDir();\n          if (!directoryFactory.isAbsolute(dataDir)) {\n            dataDir = directoryFactory.getDataHome(coreDescriptor);\n          }\n        } catch (IOException e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n    return SolrResourceLoader.normalizeDir(dataDir);\n  }\n\n","sourceOld":"  /**\n   * Locate the data directory for a given config and core descriptor.\n   *\n   * @param directoryFactory\n   *          The directory factory to use if necessary to calculate an absolute path. Should be the same as what will\n   *          be used to open the data directory later.\n   * @param dataDir\n   *          An optional hint to the data directory location. Will be normalized and used if not null.\n   * @param config\n   *          A solr config to retrieve the default data directory location, if used.\n   * @param coreDescriptor\n   *          descriptor to load the actual data dir from, if not using the defualt.\n   * @return a normalized data directory name\n   * @throws SolrException\n   *           if the data directory cannot be loaded from the core descriptor\n   */\n  static String findDataDir(DirectoryFactory directoryFactory, String dataDir, SolrConfig config, CoreDescriptor coreDescriptor) {\n    if (dataDir == null) {\n      if (coreDescriptor.usingDefaultDataDir()) {\n        dataDir = config.getDataDir();\n      }\n      if (dataDir == null) {\n        try {\n          dataDir = coreDescriptor.getDataDir();\n          if (!directoryFactory.isAbsolute(dataDir)) {\n            dataDir = directoryFactory.getDataHome(coreDescriptor);\n          }\n        } catch (IOException e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n    return SolrResourceLoader.normalizeDir(dataDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#findDataDir(DirectoryFactory,String,SolrConfig,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#findDataDir(DirectoryFactory,String,SolrConfig,CoreDescriptor).mjava","sourceNew":"  /**\n   * Locate the data directory for a given config and core descriptor.\n   *\n   * @param directoryFactory The directory factory to use if necessary to calculate an absolute path. Should be the same as what will\n   *                         be used to open the data directory later.\n   * @param dataDir          An optional hint to the data directory location. Will be normalized and used if not null.\n   * @param config           A solr config to retrieve the default data directory location, if used.\n   * @param coreDescriptor   descriptor to load the actual data dir from, if not using the defualt.\n   * @return a normalized data directory name\n   * @throws SolrException if the data directory cannot be loaded from the core descriptor\n   */\n  static String findDataDir(DirectoryFactory directoryFactory, String dataDir, SolrConfig config, CoreDescriptor coreDescriptor) {\n    if (dataDir == null) {\n      if (coreDescriptor.usingDefaultDataDir()) {\n        dataDir = config.getDataDir();\n      }\n      if (dataDir == null) {\n        try {\n          dataDir = coreDescriptor.getDataDir();\n          if (!directoryFactory.isAbsolute(dataDir)) {\n            dataDir = directoryFactory.getDataHome(coreDescriptor);\n          }\n        } catch (IOException e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n    return SolrPaths.normalizeDir(dataDir);\n  }\n\n","sourceOld":"  /**\n   * Locate the data directory for a given config and core descriptor.\n   *\n   * @param directoryFactory The directory factory to use if necessary to calculate an absolute path. Should be the same as what will\n   *                         be used to open the data directory later.\n   * @param dataDir          An optional hint to the data directory location. Will be normalized and used if not null.\n   * @param config           A solr config to retrieve the default data directory location, if used.\n   * @param coreDescriptor   descriptor to load the actual data dir from, if not using the defualt.\n   * @return a normalized data directory name\n   * @throws SolrException if the data directory cannot be loaded from the core descriptor\n   */\n  static String findDataDir(DirectoryFactory directoryFactory, String dataDir, SolrConfig config, CoreDescriptor coreDescriptor) {\n    if (dataDir == null) {\n      if (coreDescriptor.usingDefaultDataDir()) {\n        dataDir = config.getDataDir();\n      }\n      if (dataDir == null) {\n        try {\n          dataDir = coreDescriptor.getDataDir();\n          if (!directoryFactory.isAbsolute(dataDir)) {\n            dataDir = directoryFactory.getDataHome(coreDescriptor);\n          }\n        } catch (IOException e) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, e);\n        }\n      }\n    }\n    return SolrResourceLoader.normalizeDir(dataDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"96e0d4494fe54b31c7f0151f3a632124ab806351":["b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b39b1b02e442aaf736cc87417e93552cbd8ef1da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b39b1b02e442aaf736cc87417e93552cbd8ef1da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"]},"commit2Childs":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"96e0d4494fe54b31c7f0151f3a632124ab806351":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b39b1b02e442aaf736cc87417e93552cbd8ef1da","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"b39b1b02e442aaf736cc87417e93552cbd8ef1da":["96e0d4494fe54b31c7f0151f3a632124ab806351","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}