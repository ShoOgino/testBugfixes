{"path":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","date":1224582283,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    if (command.equals(CMD_INDEX_VERSION)) {\n      if (indexCommitPoint != null) {\n        rsp.add(CMD_INDEX_VERSION, indexCommitPoint.getVersion());\n        rsp.add(GENERATION, indexCommitPoint.getGeneration());\n      } else {\n        // must never happen\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_SHOOT)) {\n      doSnapShoot(rsp);\n    } else if (command.equals(CMD_SNAP_PULL)) {\n      doSnapPull();\n    } else if (command.equals(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equals(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equals(CMD_ABORT_SNAP_PULL)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      getReplicationDetails(rsp);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e1c62d84fa064ee3b226a7ed01c37d152d0253bb","5cb65c1c2f90852e718f86c8be09beb1c4dba408","5cb65c1c2f90852e718f86c8be09beb1c4dba408","5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"243885d7a8da5b172092cfac738e33970bec02e1","date":1224867045,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // must never happen\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_SHOOT)) {\n      doSnapShoot(rsp);\n    } else if (command.equals(CMD_SNAP_PULL)) {\n      doSnapPull();\n    } else if (command.equals(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equals(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equals(CMD_ABORT_SNAP_PULL)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      getReplicationDetails(rsp);\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    if (command.equals(CMD_INDEX_VERSION)) {\n      if (indexCommitPoint != null) {\n        rsp.add(CMD_INDEX_VERSION, indexCommitPoint.getVersion());\n        rsp.add(GENERATION, indexCommitPoint.getGeneration());\n      } else {\n        // must never happen\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_SHOOT)) {\n      doSnapShoot(rsp);\n    } else if (command.equals(CMD_SNAP_PULL)) {\n      doSnapPull();\n    } else if (command.equals(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equals(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equals(CMD_ABORT_SNAP_PULL)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      getReplicationDetails(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9","date":1225202752,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    //This command does not give the current index version of the master\n    // It gives the current replicateable index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replicateAfter does not have startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_SHOOT)) {\n      doSnapShoot(rsp);\n    } else if (command.equals(CMD_SNAP_PULL)) {\n      doSnapPull();\n    } else if (command.equals(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equals(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equals(CMD_ABORT_SNAP_PULL)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      getReplicationDetails(rsp);\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // must never happen\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_SHOOT)) {\n      doSnapShoot(rsp);\n    } else if (command.equals(CMD_SNAP_PULL)) {\n      doSnapPull();\n    } else if (command.equals(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equals(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equals(CMD_ABORT_SNAP_PULL)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      getReplicationDetails(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8620c64e323e74078214cf931e505179d14c888e","date":1225270494,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_SHOOT)) {\n      doSnapShoot(rsp);\n    } else if (command.equals(CMD_SNAP_PULL)) {\n      doSnapPull();\n    } else if (command.equals(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equals(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equals(CMD_ABORT_SNAP_PULL)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      getReplicationDetails(rsp);\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    //This command does not give the current index version of the master\n    // It gives the current replicateable index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replicateAfter does not have startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_SHOOT)) {\n      doSnapShoot(rsp);\n    } else if (command.equals(CMD_SNAP_PULL)) {\n      doSnapPull();\n    } else if (command.equals(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equals(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equals(CMD_ABORT_SNAP_PULL)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      getReplicationDetails(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6e1afc23adf8af4aa2dfc781b02b63710546b33","date":1227622754,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_SHOOT)) {\n      doSnapShoot(rsp);\n    } else if (command.equals(CMD_SNAP_PULL)) {\n      new Thread() {\n        public void run() {\n          doSnapPull();\n        }\n      }.start();\n      rsp.add(\"status\", \"OK\");\n    } else if (command.equals(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equals(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equals(CMD_ABORT_SNAP_PULL)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      getReplicationDetails(rsp);\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_SHOOT)) {\n      doSnapShoot(rsp);\n    } else if (command.equals(CMD_SNAP_PULL)) {\n      doSnapPull();\n    } else if (command.equals(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equals(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equals(CMD_ABORT_SNAP_PULL)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      getReplicationDetails(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd564545498afb928bdfecf369ec06cd377413d2","date":1230103123,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_SHOOT)) {\n      doSnapShoot(rsp);\n    } else if (command.equals(CMD_SNAP_PULL)) {\n      new Thread() {\n        public void run() {\n          doSnapPull(solrParams);\n        }\n      }.start();\n      rsp.add(\"status\", \"OK\");\n    } else if (command.equals(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equals(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equals(CMD_ABORT_SNAP_PULL)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      getReplicationDetails(rsp);\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_SHOOT)) {\n      doSnapShoot(rsp);\n    } else if (command.equals(CMD_SNAP_PULL)) {\n      new Thread() {\n        public void run() {\n          doSnapPull();\n        }\n      }.start();\n      rsp.add(\"status\", \"OK\");\n    } else if (command.equals(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equals(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equals(CMD_ABORT_SNAP_PULL)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      getReplicationDetails(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1c62d84fa064ee3b226a7ed01c37d152d0253bb","date":1234445125,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_SHOOT)) {\n      doSnapShoot(rsp);\n    } else if (command.equals(CMD_SNAP_PULL)) {\n      new Thread() {\n        public void run() {\n          doSnapPull(solrParams);\n        }\n      }.start();\n      rsp.add(\"status\", \"OK\");\n    } else if (command.equals(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equals(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equals(CMD_ABORT_SNAP_PULL)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails());\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_SHOOT)) {\n      doSnapShoot(rsp);\n    } else if (command.equals(CMD_SNAP_PULL)) {\n      new Thread() {\n        public void run() {\n          doSnapPull(solrParams);\n        }\n      }.start();\n      rsp.add(\"status\", \"OK\");\n    } else if (command.equals(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equals(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equals(CMD_ABORT_SNAP_PULL)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      getReplicationDetails(rsp);\n    }\n  }\n\n","bugFix":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66ba6ff2b4a3d7289dd43d401001d688c91e2bd5","date":1242889081,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if(CMD_ENABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(true);\n    } else if(CMD_DISABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(false);\n    } else if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_SHOOT)) {\n      doSnapShoot(rsp);\n    } else if (command.equals(CMD_SNAP_PULL)) {\n      new Thread() {\n        public void run() {\n          doSnapPull(solrParams);\n        }\n      }.start();\n      rsp.add(\"status\", \"OK\");\n    } else if (command.equals(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equals(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equals(CMD_ABORT_SNAP_PULL)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails());\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_SHOOT)) {\n      doSnapShoot(rsp);\n    } else if (command.equals(CMD_SNAP_PULL)) {\n      new Thread() {\n        public void run() {\n          doSnapPull(solrParams);\n        }\n      }.start();\n      rsp.add(\"status\", \"OK\");\n    } else if (command.equals(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equals(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equals(CMD_ABORT_SNAP_PULL)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails());\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4623d61231036b71956ea057612b3d78d440508a","date":1243501872,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if(CMD_ENABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(true);\n    } else if(CMD_DISABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(false);\n    } else if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_SHOOT)) {\n      doSnapShoot(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_PULL)) {\n      new Thread() {\n        public void run() {\n          doSnapPull(solrParams);\n        }\n      }.start();\n      rsp.add(\"status\", \"OK\");\n    } else if (command.equals(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equals(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equals(CMD_ABORT_SNAP_PULL)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails());\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if(CMD_ENABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(true);\n    } else if(CMD_DISABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(false);\n    } else if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_SHOOT)) {\n      doSnapShoot(rsp);\n    } else if (command.equals(CMD_SNAP_PULL)) {\n      new Thread() {\n        public void run() {\n          doSnapPull(solrParams);\n        }\n      }.start();\n      rsp.add(\"status\", \"OK\");\n    } else if (command.equals(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equals(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equals(CMD_ABORT_SNAP_PULL)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails());\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9522aac0a5c8b1960476dbad1abc08b957930028","date":1245672354,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if(CMD_ENABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(true);\n    } else if(CMD_DISABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(false);\n    } else if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_SHOOT)) {\n      doSnapShoot(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      new Thread() {\n        public void run() {\n          doSnapPull(solrParams);\n        }\n      }.start();\n      rsp.add(\"status\", \"OK\");\n    } else if (command.equals(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equals(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails());\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if(CMD_ENABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(true);\n    } else if(CMD_DISABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(false);\n    } else if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_SHOOT)) {\n      doSnapShoot(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_PULL)) {\n      new Thread() {\n        public void run() {\n          doSnapPull(solrParams);\n        }\n      }.start();\n      rsp.add(\"status\", \"OK\");\n    } else if (command.equals(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equals(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equals(CMD_ABORT_SNAP_PULL)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails());\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0dfa2dcc0bd59c9a49447fed217ae84f8943a946","date":1246536230,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if(CMD_ENABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(true);\n    } else if(CMD_DISABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(false);\n    } else if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      new Thread() {\n        public void run() {\n          doSnapPull(solrParams);\n        }\n      }.start();\n      rsp.add(\"status\", \"OK\");\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails());\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if(CMD_ENABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(true);\n    } else if(CMD_DISABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(false);\n    } else if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equals(CMD_SNAP_SHOOT)) {\n      doSnapShoot(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      new Thread() {\n        public void run() {\n          doSnapPull(solrParams);\n        }\n      }.start();\n      rsp.add(\"status\", \"OK\");\n    } else if (command.equals(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equals(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails());\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"464eee4bbfeec9402812d9f2d13af9665931a402","date":1247647219,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if(CMD_ENABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if(CMD_DISABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        public void run() {\n          doSnapPull(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null){\n        snapPuller.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails());\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(\"status\", \"OK\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if(CMD_ENABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(true);\n    } else if(CMD_DISABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(false);\n    } else if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      new Thread() {\n        public void run() {\n          doSnapPull(solrParams);\n        }\n      }.start();\n      rsp.add(\"status\", \"OK\");\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.disablePoll();\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null)\n        snapPuller.enablePoll();\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null)\n        snapPuller.abortPull();\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails());\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":["5cb65c1c2f90852e718f86c8be09beb1c4dba408","5cb65c1c2f90852e718f86c8be09beb1c4dba408","5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7e0049b151d932b18c3acc1ef8366262ae9809d","date":1247648156,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if(CMD_ENABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if(CMD_DISABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null){\n        snapPuller.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails());\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if(CMD_ENABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if(CMD_DISABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        public void run() {\n          doSnapPull(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null){\n        snapPuller.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails());\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d36f8b878e674878baa3e262df2455490a58891","date":1250663366,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if(CMD_ENABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if(CMD_DISABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null){\n        snapPuller.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails());\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if(CMD_ENABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if(CMD_DISABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null){\n        snapPuller.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails());\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1ad4797d915bf4414630145335386632547776d","date":1251354260,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n   if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null){\n        snapPuller.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails());\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n   } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n     replicationEnabled.set(false);\n     rsp.add(STATUS, OK_STATUS);\n   }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n    if(CMD_ENABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n    } else if(CMD_DISABLE_REPL.equalsIgnoreCase(command)){\n      replicationEnabled.set(false);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null){\n        snapPuller.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails());\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d8a2f376efa71aa3586481085547daf29dc5c6c","date":1251357551,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n   if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null){\n        snapPuller.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n   } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n     replicationEnabled.set(false);\n     rsp.add(STATUS, OK_STATUS);\n   }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n   if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null){\n        snapPuller.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails());\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n   } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n     replicationEnabled.set(false);\n     rsp.add(STATUS, OK_STATUS);\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7cdac6591b64f43f87663e70518d79dd137454b4","date":1254069460,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n   if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null){\n        snapPuller.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n   } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n     replicationEnabled.set(false);\n     rsp.add(STATUS, OK_STATUS);\n   }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n   if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null){\n        snapPuller.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n   } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n     replicationEnabled.set(false);\n     rsp.add(STATUS, OK_STATUS);\n   }\n  }\n\n","bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n   if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null){\n        snapPuller.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n   } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n     replicationEnabled.set(false);\n     rsp.add(STATUS, OK_STATUS);\n   }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    rsp.setHttpCaching(false);\n    final SolrParams solrParams = req.getParams();\n    String command = solrParams.get(COMMAND);\n    if (command == null) {\n      rsp.add(STATUS, OK_STATUS);\n      rsp.add(\"message\", \"No command\");\n      return;\n    }\n    // This command does not give the current index version of the master\n    // It gives the current 'replicateable' index version\n   if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    } else if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp,req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_FETCH_INDEX)) {\n      String masterUrl = solrParams.get(MASTER_URL);\n      if (!isSlave && masterUrl == null) {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured or no 'masterUrl' Specified\");\n        return;\n      }\n      final SolrParams paramsCopy = new ModifiableSolrParams(solrParams);\n      new Thread() {\n        public void run() {\n          doFetch(paramsCopy);\n        }\n      }.start();\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DISABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.disablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS, ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ENABLE_POLL)) {\n      if (snapPuller != null){\n        snapPuller.enablePoll();\n        rsp.add(STATUS, OK_STATUS);\n      }else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equalsIgnoreCase(CMD_ABORT_FETCH)) {\n      if (snapPuller != null){\n        snapPuller.abortPull();\n        rsp.add(STATUS, OK_STATUS);\n      } else {\n        rsp.add(STATUS,ERR_STATUS);\n        rsp.add(\"message\",\"No slave configured\");\n      }\n    } else if (command.equals(CMD_FILE_CHECKSUM)) {\n      // this command is not used by anyone\n      getFileChecksum(solrParams, rsp);\n    } else if (command.equals(CMD_SHOW_COMMITS)) {\n      rsp.add(CMD_SHOW_COMMITS, getCommits());\n    } else if (command.equals(CMD_DETAILS)) {\n      rsp.add(CMD_DETAILS, getReplicationDetails(solrParams.getBool(\"slave\",true)));\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else if (CMD_ENABLE_REPL.equalsIgnoreCase(command)) {\n      replicationEnabled.set(true);\n      rsp.add(STATUS, OK_STATUS);\n   } else if (CMD_DISABLE_REPL.equalsIgnoreCase(command)) {\n     replicationEnabled.set(false);\n     rsp.add(STATUS, OK_STATUS);\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"464eee4bbfeec9402812d9f2d13af9665931a402":["0dfa2dcc0bd59c9a49447fed217ae84f8943a946"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"4623d61231036b71956ea057612b3d78d440508a":["66ba6ff2b4a3d7289dd43d401001d688c91e2bd5"],"8620c64e323e74078214cf931e505179d14c888e":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"c7e0049b151d932b18c3acc1ef8366262ae9809d":["464eee4bbfeec9402812d9f2d13af9665931a402"],"243885d7a8da5b172092cfac738e33970bec02e1":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"0d36f8b878e674878baa3e262df2455490a58891":["c7e0049b151d932b18c3acc1ef8366262ae9809d"],"66ba6ff2b4a3d7289dd43d401001d688c91e2bd5":["e1c62d84fa064ee3b226a7ed01c37d152d0253bb"],"f1ad4797d915bf4414630145335386632547776d":["0d36f8b878e674878baa3e262df2455490a58891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["7cdac6591b64f43f87663e70518d79dd137454b4"],"9522aac0a5c8b1960476dbad1abc08b957930028":["4623d61231036b71956ea057612b3d78d440508a"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["8620c64e323e74078214cf931e505179d14c888e"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["243885d7a8da5b172092cfac738e33970bec02e1"],"e1c62d84fa064ee3b226a7ed01c37d152d0253bb":["dd564545498afb928bdfecf369ec06cd377413d2"],"3d8a2f376efa71aa3586481085547daf29dc5c6c":["f1ad4797d915bf4414630145335386632547776d"],"dd564545498afb928bdfecf369ec06cd377413d2":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"7cdac6591b64f43f87663e70518d79dd137454b4":["3d8a2f376efa71aa3586481085547daf29dc5c6c"],"0dfa2dcc0bd59c9a49447fed217ae84f8943a946":["9522aac0a5c8b1960476dbad1abc08b957930028"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["243885d7a8da5b172092cfac738e33970bec02e1"],"464eee4bbfeec9402812d9f2d13af9665931a402":["c7e0049b151d932b18c3acc1ef8366262ae9809d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"4623d61231036b71956ea057612b3d78d440508a":["9522aac0a5c8b1960476dbad1abc08b957930028"],"8620c64e323e74078214cf931e505179d14c888e":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"c7e0049b151d932b18c3acc1ef8366262ae9809d":["0d36f8b878e674878baa3e262df2455490a58891"],"243885d7a8da5b172092cfac738e33970bec02e1":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"66ba6ff2b4a3d7289dd43d401001d688c91e2bd5":["4623d61231036b71956ea057612b3d78d440508a"],"0d36f8b878e674878baa3e262df2455490a58891":["f1ad4797d915bf4414630145335386632547776d"],"f1ad4797d915bf4414630145335386632547776d":["3d8a2f376efa71aa3586481085547daf29dc5c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["8620c64e323e74078214cf931e505179d14c888e"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"9522aac0a5c8b1960476dbad1abc08b957930028":["0dfa2dcc0bd59c9a49447fed217ae84f8943a946"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["dd564545498afb928bdfecf369ec06cd377413d2"],"e1c62d84fa064ee3b226a7ed01c37d152d0253bb":["66ba6ff2b4a3d7289dd43d401001d688c91e2bd5"],"dd564545498afb928bdfecf369ec06cd377413d2":["e1c62d84fa064ee3b226a7ed01c37d152d0253bb"],"3d8a2f376efa71aa3586481085547daf29dc5c6c":["7cdac6591b64f43f87663e70518d79dd137454b4"],"0dfa2dcc0bd59c9a49447fed217ae84f8943a946":["464eee4bbfeec9402812d9f2d13af9665931a402"],"7cdac6591b64f43f87663e70518d79dd137454b4":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}