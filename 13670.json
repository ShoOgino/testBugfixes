{"path":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","commits":[{"id":"53a4a9cf418572414457706fed6284a50f66c8bc","date":1164742078,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"/dev/null","sourceNew":"\tpublic void testMmapIndex() throws Exception {\r\n\t\tFSDirectory storeDirectory;\r\n\t\tstoreDirectory = FSDirectory.getDirectory(storePathname, true);\r\n\r\n\t\t// plan to add a set of useful stopwords, consider changing some of the\r\n\t\t// interior filters.\r\n\t\tStandardAnalyzer analyzer = new StandardAnalyzer(new HashSet());\r\n\t\t// TODO: something about lock timeouts and leftover locks.\r\n\t\tIndexWriter writer = new IndexWriter(storeDirectory, analyzer, true);\r\n\t\tIndexSearcher searcher = new IndexSearcher(storePathname);\r\n\t\t\r\n\t\tfor(int dx = 0; dx < 1000; dx ++) {\r\n\t\t\tString f = randomField();\r\n\t\t\tDocument doc = new Document();\r\n\t\t\tdoc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.TOKENIZED));\t\r\n\t\t\twriter.addDocument(doc);\r\n\t\t}\r\n\t\t\r\n\t\tsearcher.close();\r\n\t\twriter.close();\r\n                rmDir(new File(storePathname));\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"\tpublic void testMmapIndex() throws Exception {\r\n\t\tFSDirectory storeDirectory;\r\n\t\tstoreDirectory = FSDirectory.getDirectory(storePathname);\r\n\r\n\t\t// plan to add a set of useful stopwords, consider changing some of the\r\n\t\t// interior filters.\r\n\t\tStandardAnalyzer analyzer = new StandardAnalyzer(new HashSet());\r\n\t\t// TODO: something about lock timeouts and leftover locks.\r\n\t\tIndexWriter writer = new IndexWriter(storeDirectory, analyzer, true);\r\n\t\tIndexSearcher searcher = new IndexSearcher(storePathname);\r\n\t\t\r\n\t\tfor(int dx = 0; dx < 1000; dx ++) {\r\n\t\t\tString f = randomField();\r\n\t\t\tDocument doc = new Document();\r\n\t\t\tdoc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.TOKENIZED));\t\r\n\t\t\twriter.addDocument(doc);\r\n\t\t}\r\n\t\t\r\n\t\tsearcher.close();\r\n\t\twriter.close();\r\n                rmDir(new File(storePathname));\r\n\t}\r\n\n","sourceOld":"\tpublic void testMmapIndex() throws Exception {\r\n\t\tFSDirectory storeDirectory;\r\n\t\tstoreDirectory = FSDirectory.getDirectory(storePathname, true);\r\n\r\n\t\t// plan to add a set of useful stopwords, consider changing some of the\r\n\t\t// interior filters.\r\n\t\tStandardAnalyzer analyzer = new StandardAnalyzer(new HashSet());\r\n\t\t// TODO: something about lock timeouts and leftover locks.\r\n\t\tIndexWriter writer = new IndexWriter(storeDirectory, analyzer, true);\r\n\t\tIndexSearcher searcher = new IndexSearcher(storePathname);\r\n\t\t\r\n\t\tfor(int dx = 0; dx < 1000; dx ++) {\r\n\t\t\tString f = randomField();\r\n\t\t\tDocument doc = new Document();\r\n\t\t\tdoc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.TOKENIZED));\t\r\n\t\t\twriter.addDocument(doc);\r\n\t\t}\r\n\t\t\r\n\t\tsearcher.close();\r\n\t\twriter.close();\r\n                rmDir(new File(storePathname));\r\n\t}\r\n\n","bugFix":null,"bugIntro":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"290c401c31db375e771805c3ba7ac5f64c7370dc","date":1192034795,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"\tpublic void testMmapIndex() throws Exception {\n\t\tFSDirectory storeDirectory;\n\t\tstoreDirectory = FSDirectory.getDirectory(storePathname);\n\n\t\t// plan to add a set of useful stopwords, consider changing some of the\n\t\t// interior filters.\n\t\tStandardAnalyzer analyzer = new StandardAnalyzer(new HashSet());\n\t\t// TODO: something about lock timeouts and leftover locks.\n\t\tIndexWriter writer = new IndexWriter(storeDirectory, analyzer, true);\n\t\tIndexSearcher searcher = new IndexSearcher(storePathname);\n\t\t\n\t\tfor(int dx = 0; dx < 1000; dx ++) {\n\t\t\tString f = randomField();\n\t\t\tDocument doc = new Document();\n\t\t\tdoc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.TOKENIZED));\t\n\t\t\twriter.addDocument(doc);\n\t\t}\n\t\t\n\t\tsearcher.close();\n\t\twriter.close();\n                rmDir(new File(storePathname));\n\t}\n\n","sourceOld":"\tpublic void testMmapIndex() throws Exception {\r\n\t\tFSDirectory storeDirectory;\r\n\t\tstoreDirectory = FSDirectory.getDirectory(storePathname);\r\n\r\n\t\t// plan to add a set of useful stopwords, consider changing some of the\r\n\t\t// interior filters.\r\n\t\tStandardAnalyzer analyzer = new StandardAnalyzer(new HashSet());\r\n\t\t// TODO: something about lock timeouts and leftover locks.\r\n\t\tIndexWriter writer = new IndexWriter(storeDirectory, analyzer, true);\r\n\t\tIndexSearcher searcher = new IndexSearcher(storePathname);\r\n\t\t\r\n\t\tfor(int dx = 0; dx < 1000; dx ++) {\r\n\t\t\tString f = randomField();\r\n\t\t\tDocument doc = new Document();\r\n\t\t\tdoc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.TOKENIZED));\t\r\n\t\t\twriter.addDocument(doc);\r\n\t\t}\r\n\t\t\r\n\t\tsearcher.close();\r\n\t\twriter.close();\r\n                rmDir(new File(storePathname));\r\n\t}\r\n\n","bugFix":["53a4a9cf418572414457706fed6284a50f66c8bc","66b12ba4967665216eeb706b58d424c51fb3641a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"\tpublic void testMmapIndex() throws Exception {\n\t\tFSDirectory storeDirectory;\n\t\tstoreDirectory = FSDirectory.getDirectory(storePathname);\n\n\t\t// plan to add a set of useful stopwords, consider changing some of the\n\t\t// interior filters.\n\t\tStandardAnalyzer analyzer = new StandardAnalyzer(new HashSet());\n\t\t// TODO: something about lock timeouts and leftover locks.\n\t\tIndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\t\tIndexSearcher searcher = new IndexSearcher(storePathname);\n\t\t\n\t\tfor(int dx = 0; dx < 1000; dx ++) {\n\t\t\tString f = randomField();\n\t\t\tDocument doc = new Document();\n\t\t\tdoc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.TOKENIZED));\t\n\t\t\twriter.addDocument(doc);\n\t\t}\n\t\t\n\t\tsearcher.close();\n\t\twriter.close();\n                rmDir(new File(storePathname));\n\t}\n\n","sourceOld":"\tpublic void testMmapIndex() throws Exception {\n\t\tFSDirectory storeDirectory;\n\t\tstoreDirectory = FSDirectory.getDirectory(storePathname);\n\n\t\t// plan to add a set of useful stopwords, consider changing some of the\n\t\t// interior filters.\n\t\tStandardAnalyzer analyzer = new StandardAnalyzer(new HashSet());\n\t\t// TODO: something about lock timeouts and leftover locks.\n\t\tIndexWriter writer = new IndexWriter(storeDirectory, analyzer, true);\n\t\tIndexSearcher searcher = new IndexSearcher(storePathname);\n\t\t\n\t\tfor(int dx = 0; dx < 1000; dx ++) {\n\t\t\tString f = randomField();\n\t\t\tDocument doc = new Document();\n\t\t\tdoc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.TOKENIZED));\t\n\t\t\twriter.addDocument(doc);\n\t\t}\n\t\t\n\t\tsearcher.close();\n\t\twriter.close();\n                rmDir(new File(storePathname));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"\tpublic void testMmapIndex() throws Exception {\n\t\tFSDirectory storeDirectory;\n\t\tstoreDirectory = FSDirectory.getDirectory(storePathname);\n\n\t\t// plan to add a set of useful stopwords, consider changing some of the\n\t\t// interior filters.\n\t\tStandardAnalyzer analyzer = new StandardAnalyzer(new HashSet());\n\t\t// TODO: something about lock timeouts and leftover locks.\n\t\tIndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\t\tIndexSearcher searcher = new IndexSearcher(storePathname);\n\t\t\n\t\tfor(int dx = 0; dx < 1000; dx ++) {\n\t\t\tString f = randomField();\n\t\t\tDocument doc = new Document();\n\t\t\tdoc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n\t\t\twriter.addDocument(doc);\n\t\t}\n\t\t\n\t\tsearcher.close();\n\t\twriter.close();\n                rmDir(new File(storePathname));\n\t}\n\n","sourceOld":"\tpublic void testMmapIndex() throws Exception {\n\t\tFSDirectory storeDirectory;\n\t\tstoreDirectory = FSDirectory.getDirectory(storePathname);\n\n\t\t// plan to add a set of useful stopwords, consider changing some of the\n\t\t// interior filters.\n\t\tStandardAnalyzer analyzer = new StandardAnalyzer(new HashSet());\n\t\t// TODO: something about lock timeouts and leftover locks.\n\t\tIndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\t\tIndexSearcher searcher = new IndexSearcher(storePathname);\n\t\t\n\t\tfor(int dx = 0; dx < 1000; dx ++) {\n\t\t\tString f = randomField();\n\t\t\tDocument doc = new Document();\n\t\t\tdoc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.TOKENIZED));\t\n\t\t\twriter.addDocument(doc);\n\t\t}\n\t\t\n\t\tsearcher.close();\n\t\twriter.close();\n                rmDir(new File(storePathname));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","date":1243677645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"\tpublic void testMmapIndex() throws Exception {\n\t\tFSDirectory storeDirectory;\n\t\tstoreDirectory = new MMapDirectory(new File(storePathname), null);\n\n\t\t// plan to add a set of useful stopwords, consider changing some of the\n\t\t// interior filters.\n\t\tStandardAnalyzer analyzer = new StandardAnalyzer(new HashSet());\n\t\t// TODO: something about lock timeouts and leftover locks.\n\t\tIndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\t\tIndexSearcher searcher = new IndexSearcher(storePathname);\n\t\t\n\t\tfor(int dx = 0; dx < 1000; dx ++) {\n\t\t\tString f = randomField();\n\t\t\tDocument doc = new Document();\n\t\t\tdoc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n\t\t\twriter.addDocument(doc);\n\t\t}\n\t\t\n\t\tsearcher.close();\n\t\twriter.close();\n                rmDir(new File(storePathname));\n\t}\n\n","sourceOld":"\tpublic void testMmapIndex() throws Exception {\n\t\tFSDirectory storeDirectory;\n\t\tstoreDirectory = FSDirectory.getDirectory(storePathname);\n\n\t\t// plan to add a set of useful stopwords, consider changing some of the\n\t\t// interior filters.\n\t\tStandardAnalyzer analyzer = new StandardAnalyzer(new HashSet());\n\t\t// TODO: something about lock timeouts and leftover locks.\n\t\tIndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\t\tIndexSearcher searcher = new IndexSearcher(storePathname);\n\t\t\n\t\tfor(int dx = 0; dx < 1000; dx ++) {\n\t\t\tString f = randomField();\n\t\t\tDocument doc = new Document();\n\t\t\tdoc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n\t\t\twriter.addDocument(doc);\n\t\t}\n\t\t\n\t\tsearcher.close();\n\t\twriter.close();\n                rmDir(new File(storePathname));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"\tpublic void testMmapIndex() throws Exception {\n\t\tFSDirectory storeDirectory;\n\t\tstoreDirectory = new MMapDirectory(new File(storePathname), null);\n\n\t\t// plan to add a set of useful stopwords, consider changing some of the\n\t\t// interior filters.\n\t\tStandardAnalyzer analyzer = new StandardAnalyzer(new HashSet());\n\t\t// TODO: something about lock timeouts and leftover locks.\n\t\tIndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\t\tIndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n\t\t\n\t\tfor(int dx = 0; dx < 1000; dx ++) {\n\t\t\tString f = randomField();\n\t\t\tDocument doc = new Document();\n\t\t\tdoc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n\t\t\twriter.addDocument(doc);\n\t\t}\n\t\t\n\t\tsearcher.close();\n\t\twriter.close();\n                rmDir(new File(storePathname));\n\t}\n\n","sourceOld":"\tpublic void testMmapIndex() throws Exception {\n\t\tFSDirectory storeDirectory;\n\t\tstoreDirectory = new MMapDirectory(new File(storePathname), null);\n\n\t\t// plan to add a set of useful stopwords, consider changing some of the\n\t\t// interior filters.\n\t\tStandardAnalyzer analyzer = new StandardAnalyzer(new HashSet());\n\t\t// TODO: something about lock timeouts and leftover locks.\n\t\tIndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\t\tIndexSearcher searcher = new IndexSearcher(storePathname);\n\t\t\n\t\tfor(int dx = 0; dx < 1000; dx ++) {\n\t\t\tString f = randomField();\n\t\t\tDocument doc = new Document();\n\t\t\tdoc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n\t\t\twriter.addDocument(doc);\n\t\t}\n\t\t\n\t\tsearcher.close();\n\t\twriter.close();\n                rmDir(new File(storePathname));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"\tpublic void testMmapIndex() throws Exception {\n\t\tFSDirectory storeDirectory;\n\t\tstoreDirectory = new MMapDirectory(new File(storePathname), null);\n\n\t\t// plan to add a set of useful stopwords, consider changing some of the\n\t\t// interior filters.\n\t\tStandardAnalyzer analyzer = new StandardAnalyzer(new HashSet());\n\t\t// TODO: something about lock timeouts and leftover locks.\n\t\tIndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\t\tIndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n\t\t\n\t\tfor(int dx = 0; dx < 1000; dx ++) {\n\t\t\tString f = randomField();\n\t\t\tDocument doc = new Document();\n\t\t\tdoc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n\t\t\twriter.addDocument(doc);\n\t\t}\n\t\t\n\t\tsearcher.close();\n\t\twriter.close();\n                rmDir(new File(storePathname));\n\t}\n\n","sourceOld":"\tpublic void testMmapIndex() throws Exception {\n\t\tFSDirectory storeDirectory;\n\t\tstoreDirectory = new MMapDirectory(new File(storePathname), null);\n\n\t\t// plan to add a set of useful stopwords, consider changing some of the\n\t\t// interior filters.\n\t\tStandardAnalyzer analyzer = new StandardAnalyzer(new HashSet());\n\t\t// TODO: something about lock timeouts and leftover locks.\n\t\tIndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\t\tIndexSearcher searcher = new IndexSearcher(storePathname);\n\t\t\n\t\tfor(int dx = 0; dx < 1000; dx ++) {\n\t\t\tString f = randomField();\n\t\t\tDocument doc = new Document();\n\t\t\tdoc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n\t\t\twriter.addDocument(doc);\n\t\t}\n\t\t\n\t\tsearcher.close();\n\t\twriter.close();\n                rmDir(new File(storePathname));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"\tpublic void testMmapIndex() throws Exception {\n\t\tFSDirectory storeDirectory;\n\t\tstoreDirectory = new MMapDirectory(new File(storePathname), null);\n\n\t\t// plan to add a set of useful stopwords, consider changing some of the\n\t\t// interior filters.\n\t\tStandardAnalyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet());\n\t\t// TODO: something about lock timeouts and leftover locks.\n\t\tIndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\t\tIndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n\t\t\n\t\tfor(int dx = 0; dx < 1000; dx ++) {\n\t\t\tString f = randomField();\n\t\t\tDocument doc = new Document();\n\t\t\tdoc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n\t\t\twriter.addDocument(doc);\n\t\t}\n\t\t\n\t\tsearcher.close();\n\t\twriter.close();\n                rmDir(new File(storePathname));\n\t}\n\n","sourceOld":"\tpublic void testMmapIndex() throws Exception {\n\t\tFSDirectory storeDirectory;\n\t\tstoreDirectory = new MMapDirectory(new File(storePathname), null);\n\n\t\t// plan to add a set of useful stopwords, consider changing some of the\n\t\t// interior filters.\n\t\tStandardAnalyzer analyzer = new StandardAnalyzer(new HashSet());\n\t\t// TODO: something about lock timeouts and leftover locks.\n\t\tIndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\t\tIndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n\t\t\n\t\tfor(int dx = 0; dx < 1000; dx ++) {\n\t\t\tString f = randomField();\n\t\t\tDocument doc = new Document();\n\t\t\tdoc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n\t\t\twriter.addDocument(doc);\n\t\t}\n\t\t\n\t\tsearcher.close();\n\t\twriter.close();\n                rmDir(new File(storePathname));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","sourceOld":"\tpublic void testMmapIndex() throws Exception {\n\t\tFSDirectory storeDirectory;\n\t\tstoreDirectory = new MMapDirectory(new File(storePathname), null);\n\n\t\t// plan to add a set of useful stopwords, consider changing some of the\n\t\t// interior filters.\n\t\tStandardAnalyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet());\n\t\t// TODO: something about lock timeouts and leftover locks.\n\t\tIndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n\t\tIndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n\t\t\n\t\tfor(int dx = 0; dx < 1000; dx ++) {\n\t\t\tString f = randomField();\n\t\t\tDocument doc = new Document();\n\t\t\tdoc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n\t\t\twriter.addDocument(doc);\n\t\t}\n\t\t\n\t\tsearcher.close();\n\t\twriter.close();\n                rmDir(new File(storePathname));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"0a046c0c310bc77931fc8441bd920053b607dd14":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"66b12ba4967665216eeb706b58d424c51fb3641a":["53a4a9cf418572414457706fed6284a50f66c8bc"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"53a4a9cf418572414457706fed6284a50f66c8bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"290c401c31db375e771805c3ba7ac5f64c7370dc":["66b12ba4967665216eeb706b58d424c51fb3641a"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"66b12ba4967665216eeb706b58d424c51fb3641a":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"53a4a9cf418572414457706fed6284a50f66c8bc":["66b12ba4967665216eeb706b58d424c51fb3641a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53a4a9cf418572414457706fed6284a50f66c8bc"],"290c401c31db375e771805c3ba7ac5f64c7370dc":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}