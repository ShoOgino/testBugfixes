{"path":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getIndexedId().mjava","commits":[{"id":"671279fa1676e7f2755c2745a25abd77a169f992","date":1312053489,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getIndexedId().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the indexed ID for this document.  The returned BytesRef is retained across multiple calls, and should not be modified. */\n   public BytesRef getIndexedId() {\n     if (indexedId == null) {\n       IndexSchema schema = req.getSchema();\n       SchemaField sf = schema.getUniqueKeyField();\n       if (sf != null) {\n         if (solrDoc != null) {\n           SolrInputField field = solrDoc.getField(sf.getName());\n\n           int count = field==null ? 0 : field.getValueCount();\n           if (count == 0) {\n             if (overwrite) {\n               throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Document is missing mandatory uniqueKey field: \" + sf.getName());\n             }\n           } else if (count  > 1) {\n             throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Document contains multiple values for uniqueKey field: \" + field);\n           } else {\n             indexedId = new BytesRef();\n             sf.getType().readableToIndexed(field.getFirstValue().toString(), indexedId);\n           }\n         }\n       }\n     }\n     return indexedId;\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getIndexedId().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/AddUpdateCommand#getIndexedId().mjava","sourceNew":"  /** Returns the indexed ID for this document.  The returned BytesRef is retained across multiple calls, and should not be modified. */\n   public BytesRef getIndexedId() {\n     if (indexedId == null) {\n       IndexSchema schema = req.getSchema();\n       SchemaField sf = schema.getUniqueKeyField();\n       if (sf != null) {\n         if (solrDoc != null) {\n           SolrInputField field = solrDoc.getField(sf.getName());\n\n           int count = field==null ? 0 : field.getValueCount();\n           if (count == 0) {\n             if (overwrite) {\n               throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Document is missing mandatory uniqueKey field: \" + sf.getName());\n             }\n           } else if (count  > 1) {\n             throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Document contains multiple values for uniqueKey field: \" + field);\n           } else {\n             BytesRefBuilder b = new BytesRefBuilder();\n             sf.getType().readableToIndexed(field.getFirstValue().toString(), b);\n             indexedId = b.get();\n           }\n         }\n       }\n     }\n     return indexedId;\n   }\n\n","sourceOld":"  /** Returns the indexed ID for this document.  The returned BytesRef is retained across multiple calls, and should not be modified. */\n   public BytesRef getIndexedId() {\n     if (indexedId == null) {\n       IndexSchema schema = req.getSchema();\n       SchemaField sf = schema.getUniqueKeyField();\n       if (sf != null) {\n         if (solrDoc != null) {\n           SolrInputField field = solrDoc.getField(sf.getName());\n\n           int count = field==null ? 0 : field.getValueCount();\n           if (count == 0) {\n             if (overwrite) {\n               throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Document is missing mandatory uniqueKey field: \" + sf.getName());\n             }\n           } else if (count  > 1) {\n             throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Document contains multiple values for uniqueKey field: \" + field);\n           } else {\n             indexedId = new BytesRef();\n             sf.getType().readableToIndexed(field.getFirstValue().toString(), indexedId);\n           }\n         }\n       }\n     }\n     return indexedId;\n   }\n\n","bugFix":["671279fa1676e7f2755c2745a25abd77a169f992"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"671279fa1676e7f2755c2745a25abd77a169f992":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["671279fa1676e7f2755c2745a25abd77a169f992"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"671279fa1676e7f2755c2745a25abd77a169f992":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["671279fa1676e7f2755c2745a25abd77a169f992"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}