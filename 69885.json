{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testEmptyDocuments().mjava","commits":[{"id":"90213788e5007cc5e2b3d88200a8265de9d4e6d4","date":1359060940,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testEmptyDocuments().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadIteratorWithInvalidDoc().mjava","sourceNew":"  @Test\n  public void testEmptyDocuments() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    // NOTE: test is wired to LogMP... because test relies on certain docids having payloads\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      if (i == 0) {\n        BytesRef buf = new BytesRef();\n        encoder.encode(IntsRef.deepCopyOf(data[i]), buf );\n        doc.add(new StraightBytesDocValuesField(\"f\", buf));\n      } else {\n        doc.add(new StraightBytesDocValuesField(\"f\", new BytesRef()));\n      }\n      writer.addDocument(doc);\n      writer.commit();\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int totalCategories = 0;\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new DocValuesCategoryListIterator(\"f\", encoder.createMatchingDecoder());\n    for (AtomicReaderContext context : reader.leaves()) {\n      assertTrue(\"failed to initalize iterator\", cli.setNextReader(context));\n      int maxDoc = context.reader().maxDoc();\n      int dataIdx = context.docBase;\n      for (int doc = 0; doc < maxDoc; doc++, dataIdx++) {\n        Set<Integer> values = new HashSet<Integer>();\n        for (int j = 0; j < data[dataIdx].length; j++) {\n          values.add(data[dataIdx].ints[j]);\n        }\n        cli.getOrdinals(doc, ordinals);\n        if (dataIdx == 0) {\n          assertTrue(\"document 0 must have ordinals\", ordinals.length > 0);\n          for (int j = 0; j < ordinals.length; j++) {\n            assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n          }\n          totalCategories += ordinals.length;\n        } else {\n          assertTrue(\"only document 0 should have ordinals\", ordinals.length == 0);\n        }\n      }\n    }\n    assertEquals(\"Wrong number of total categories!\", 2, totalCategories);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testPayloadIteratorWithInvalidDoc() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    // NOTE: test is wired to LogMP... because test relies on certain docids having payloads\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      if (i == 0) {\n        BytesRef buf = new BytesRef();\n        encoder.encode(IntsRef.deepCopyOf(data[i]), buf );\n        doc.add(new StraightBytesDocValuesField(\"f\", buf));\n      } else {\n        doc.add(new StraightBytesDocValuesField(\"f\", new BytesRef()));\n      }\n      writer.addDocument(doc);\n      writer.commit();\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int totalCategories = 0;\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new DocValuesCategoryListIterator(\"f\", encoder.createMatchingDecoder());\n    for (AtomicReaderContext context : reader.leaves()) {\n      assertTrue(\"failed to initalize iterator\", cli.setNextReader(context));\n      int maxDoc = context.reader().maxDoc();\n      int dataIdx = context.docBase;\n      for (int doc = 0; doc < maxDoc; doc++, dataIdx++) {\n        Set<Integer> values = new HashSet<Integer>();\n        for (int j = 0; j < data[dataIdx].length; j++) {\n          values.add(data[dataIdx].ints[j]);\n        }\n        cli.getOrdinals(doc, ordinals);\n        if (dataIdx == 0) {\n          assertTrue(\"document 0 must have ordinals\", ordinals.length > 0);\n          for (int j = 0; j < ordinals.length; j++) {\n            assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n          }\n          totalCategories += ordinals.length;\n        } else {\n          assertTrue(\"only document 0 should have ordinals\", ordinals.length == 0);\n        }\n      }\n    }\n    assertEquals(\"Wrong number of total categories!\", 2, totalCategories);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testEmptyDocuments().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadIteratorWithInvalidDoc().mjava","sourceNew":"  @Test\n  public void testEmptyDocuments() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    // NOTE: test is wired to LogMP... because test relies on certain docids having payloads\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      if (i == 0) {\n        BytesRef buf = new BytesRef();\n        encoder.encode(IntsRef.deepCopyOf(data[i]), buf );\n        doc.add(new BinaryDocValuesField(\"f\", buf));\n      } else {\n        doc.add(new BinaryDocValuesField(\"f\", new BytesRef()));\n      }\n      writer.addDocument(doc);\n      writer.commit();\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int totalCategories = 0;\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new DocValuesCategoryListIterator(\"f\", encoder.createMatchingDecoder());\n    for (AtomicReaderContext context : reader.leaves()) {\n      assertTrue(\"failed to initalize iterator\", cli.setNextReader(context));\n      int maxDoc = context.reader().maxDoc();\n      int dataIdx = context.docBase;\n      for (int doc = 0; doc < maxDoc; doc++, dataIdx++) {\n        Set<Integer> values = new HashSet<Integer>();\n        for (int j = 0; j < data[dataIdx].length; j++) {\n          values.add(data[dataIdx].ints[j]);\n        }\n        cli.getOrdinals(doc, ordinals);\n        if (dataIdx == 0) {\n          assertTrue(\"document 0 must have ordinals\", ordinals.length > 0);\n          for (int j = 0; j < ordinals.length; j++) {\n            assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n          }\n          totalCategories += ordinals.length;\n        } else {\n          assertTrue(\"only document 0 should have ordinals\", ordinals.length == 0);\n        }\n      }\n    }\n    assertEquals(\"Wrong number of total categories!\", 2, totalCategories);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testPayloadIteratorWithInvalidDoc() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    // NOTE: test is wired to LogMP... because test relies on certain docids having payloads\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      if (i == 0) {\n        BytesRef buf = new BytesRef();\n        encoder.encode(IntsRef.deepCopyOf(data[i]), buf );\n        doc.add(new BinaryDocValuesField(\"f\", buf));\n      } else {\n        doc.add(new BinaryDocValuesField(\"f\", new BytesRef()));\n      }\n      writer.addDocument(doc);\n      writer.commit();\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int totalCategories = 0;\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new DocValuesCategoryListIterator(\"f\", encoder.createMatchingDecoder());\n    for (AtomicReaderContext context : reader.leaves()) {\n      assertTrue(\"failed to initalize iterator\", cli.setNextReader(context));\n      int maxDoc = context.reader().maxDoc();\n      int dataIdx = context.docBase;\n      for (int doc = 0; doc < maxDoc; doc++, dataIdx++) {\n        Set<Integer> values = new HashSet<Integer>();\n        for (int j = 0; j < data[dataIdx].length; j++) {\n          values.add(data[dataIdx].ints[j]);\n        }\n        cli.getOrdinals(doc, ordinals);\n        if (dataIdx == 0) {\n          assertTrue(\"document 0 must have ordinals\", ordinals.length > 0);\n          for (int j = 0; j < ordinals.length; j++) {\n            assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n          }\n          totalCategories += ordinals.length;\n        } else {\n          assertTrue(\"only document 0 should have ordinals\", ordinals.length == 0);\n        }\n      }\n    }\n    assertEquals(\"Wrong number of total categories!\", 2, totalCategories);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testEmptyDocuments().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testEmptyDocuments().mjava","sourceNew":"  @Test\n  public void testEmptyDocuments() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    // NOTE: test is wired to LogMP... because test relies on certain docids having payloads\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      if (i == 0) {\n        BytesRef buf = new BytesRef();\n        encoder.encode(IntsRef.deepCopyOf(data[i]), buf );\n        doc.add(new BinaryDocValuesField(\"f\", buf));\n      } else {\n        doc.add(new BinaryDocValuesField(\"f\", new BytesRef()));\n      }\n      writer.addDocument(doc);\n      writer.commit();\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int totalCategories = 0;\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new DocValuesCategoryListIterator(\"f\", encoder.createMatchingDecoder());\n    for (AtomicReaderContext context : reader.leaves()) {\n      assertTrue(\"failed to initalize iterator\", cli.setNextReader(context));\n      int maxDoc = context.reader().maxDoc();\n      int dataIdx = context.docBase;\n      for (int doc = 0; doc < maxDoc; doc++, dataIdx++) {\n        Set<Integer> values = new HashSet<Integer>();\n        for (int j = 0; j < data[dataIdx].length; j++) {\n          values.add(data[dataIdx].ints[j]);\n        }\n        cli.getOrdinals(doc, ordinals);\n        if (dataIdx == 0) {\n          assertTrue(\"document 0 must have ordinals\", ordinals.length > 0);\n          for (int j = 0; j < ordinals.length; j++) {\n            assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n          }\n          totalCategories += ordinals.length;\n        } else {\n          assertTrue(\"only document 0 should have ordinals\", ordinals.length == 0);\n        }\n      }\n    }\n    assertEquals(\"Wrong number of total categories!\", 2, totalCategories);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyDocuments() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    // NOTE: test is wired to LogMP... because test relies on certain docids having payloads\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      if (i == 0) {\n        BytesRef buf = new BytesRef();\n        encoder.encode(IntsRef.deepCopyOf(data[i]), buf );\n        doc.add(new StraightBytesDocValuesField(\"f\", buf));\n      } else {\n        doc.add(new StraightBytesDocValuesField(\"f\", new BytesRef()));\n      }\n      writer.addDocument(doc);\n      writer.commit();\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int totalCategories = 0;\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new DocValuesCategoryListIterator(\"f\", encoder.createMatchingDecoder());\n    for (AtomicReaderContext context : reader.leaves()) {\n      assertTrue(\"failed to initalize iterator\", cli.setNextReader(context));\n      int maxDoc = context.reader().maxDoc();\n      int dataIdx = context.docBase;\n      for (int doc = 0; doc < maxDoc; doc++, dataIdx++) {\n        Set<Integer> values = new HashSet<Integer>();\n        for (int j = 0; j < data[dataIdx].length; j++) {\n          values.add(data[dataIdx].ints[j]);\n        }\n        cli.getOrdinals(doc, ordinals);\n        if (dataIdx == 0) {\n          assertTrue(\"document 0 must have ordinals\", ordinals.length > 0);\n          for (int j = 0; j < ordinals.length; j++) {\n            assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n          }\n          totalCategories += ordinals.length;\n        } else {\n          assertTrue(\"only document 0 should have ordinals\", ordinals.length == 0);\n        }\n      }\n    }\n    assertEquals(\"Wrong number of total categories!\", 2, totalCategories);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca39562b2d7687143fdb601d5de1b8f7b778f1db","date":1385299806,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testEmptyDocuments().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testEmptyDocuments() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    // NOTE: test is wired to LogMP... because test relies on certain docids having payloads\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      if (i == 0) {\n        BytesRef buf = new BytesRef();\n        encoder.encode(IntsRef.deepCopyOf(data[i]), buf );\n        doc.add(new BinaryDocValuesField(\"f\", buf));\n      } else {\n        doc.add(new BinaryDocValuesField(\"f\", new BytesRef()));\n      }\n      writer.addDocument(doc);\n      writer.commit();\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int totalCategories = 0;\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new DocValuesCategoryListIterator(\"f\", encoder.createMatchingDecoder());\n    for (AtomicReaderContext context : reader.leaves()) {\n      assertTrue(\"failed to initalize iterator\", cli.setNextReader(context));\n      int maxDoc = context.reader().maxDoc();\n      int dataIdx = context.docBase;\n      for (int doc = 0; doc < maxDoc; doc++, dataIdx++) {\n        Set<Integer> values = new HashSet<Integer>();\n        for (int j = 0; j < data[dataIdx].length; j++) {\n          values.add(data[dataIdx].ints[j]);\n        }\n        cli.getOrdinals(doc, ordinals);\n        if (dataIdx == 0) {\n          assertTrue(\"document 0 must have ordinals\", ordinals.length > 0);\n          for (int j = 0; j < ordinals.length; j++) {\n            assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n          }\n          totalCategories += ordinals.length;\n        } else {\n          assertTrue(\"only document 0 should have ordinals\", ordinals.length == 0);\n        }\n      }\n    }\n    assertEquals(\"Wrong number of total categories!\", 2, totalCategories);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testEmptyDocuments().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testEmptyDocuments() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    // NOTE: test is wired to LogMP... because test relies on certain docids having payloads\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      if (i == 0) {\n        BytesRef buf = new BytesRef();\n        encoder.encode(IntsRef.deepCopyOf(data[i]), buf );\n        doc.add(new BinaryDocValuesField(\"f\", buf));\n      } else {\n        doc.add(new BinaryDocValuesField(\"f\", new BytesRef()));\n      }\n      writer.addDocument(doc);\n      writer.commit();\n    }\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    int totalCategories = 0;\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new DocValuesCategoryListIterator(\"f\", encoder.createMatchingDecoder());\n    for (AtomicReaderContext context : reader.leaves()) {\n      assertTrue(\"failed to initalize iterator\", cli.setNextReader(context));\n      int maxDoc = context.reader().maxDoc();\n      int dataIdx = context.docBase;\n      for (int doc = 0; doc < maxDoc; doc++, dataIdx++) {\n        Set<Integer> values = new HashSet<Integer>();\n        for (int j = 0; j < data[dataIdx].length; j++) {\n          values.add(data[dataIdx].ints[j]);\n        }\n        cli.getOrdinals(doc, ordinals);\n        if (dataIdx == 0) {\n          assertTrue(\"document 0 must have ordinals\", ordinals.length > 0);\n          for (int j = 0; j < ordinals.length; j++) {\n            assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n          }\n          totalCategories += ordinals.length;\n        } else {\n          assertTrue(\"only document 0 should have ordinals\", ordinals.length == 0);\n        }\n      }\n    }\n    assertEquals(\"Wrong number of total categories!\", 2, totalCategories);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90213788e5007cc5e2b3d88200a8265de9d4e6d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["90213788e5007cc5e2b3d88200a8265de9d4e6d4","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","90213788e5007cc5e2b3d88200a8265de9d4e6d4"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d4d69c535930b5cce125cff868d40f6373dc27d4","ca39562b2d7687143fdb601d5de1b8f7b778f1db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"90213788e5007cc5e2b3d88200a8265de9d4e6d4":["d4d69c535930b5cce125cff868d40f6373dc27d4","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3cc728b07df73b197e6d940d27f9b08b63918f13","ca39562b2d7687143fdb601d5de1b8f7b778f1db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["90213788e5007cc5e2b3d88200a8265de9d4e6d4","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}