{"path":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikFilterFactory#testCreateDictionary().mjava","commits":[{"id":"5329de88aa243e3d3a980fb7807e92663b03a4d5","date":1343108485,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikFilterFactory#testCreateDictionary().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestMorfologikFilterFactory#testCreateDictionary().mjava","sourceNew":"  public void testCreateDictionary() throws Exception {\n    StringReader reader = new StringReader(\"rowery bilety\");\n    Map<String,String> initParams = new HashMap<String,String>();\n    initParams.put(MorfologikFilterFactory.DICTIONARY_SCHEMA_ATTRIBUTE,\n        \"morfologik\");\n    MorfologikFilterFactory factory = new MorfologikFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(initParams);\n    TokenStream ts = factory.create(new WhitespaceTokenizer(TEST_VERSION_CURRENT,\n        reader));\n    assertTokenStreamContents(ts, new String[] {\"rower\", \"bilet\"});\n  }\n\n","sourceOld":"  public void testCreateDictionary() throws Exception {\n    StringReader reader = new StringReader(\"rowery bilety\");\n    Map<String,String> initParams = new HashMap<String,String>();\n    initParams.put(MorfologikFilterFactory.DICTIONARY_SCHEMA_ATTRIBUTE,\n        \"morfologik\");\n    MorfologikFilterFactory factory = new MorfologikFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(initParams);\n    TokenStream ts = factory.create(new WhitespaceTokenizer(TEST_VERSION_CURRENT,\n        reader));\n    assertTokenStreamContents(ts, new String[] {\"rower\", \"bilet\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikFilterFactory#testCreateDictionary().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestMorfologikFilterFactory#testCreateDictionary().mjava","sourceNew":"  public void testCreateDictionary() throws Exception {\n    StringReader reader = new StringReader(\"rowery bilety\");\n    Map<String,String> initParams = new HashMap<String,String>();\n    initParams.put(MorfologikFilterFactory.DICTIONARY_SCHEMA_ATTRIBUTE,\n        \"morfologik\");\n    MorfologikFilterFactory factory = new MorfologikFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(initParams);\n    TokenStream ts = factory.create(new WhitespaceTokenizer(TEST_VERSION_CURRENT,\n        reader));\n    assertTokenStreamContents(ts, new String[] {\"rower\", \"bilet\"});\n  }\n\n","sourceOld":"  public void testCreateDictionary() throws Exception {\n    StringReader reader = new StringReader(\"rowery bilety\");\n    Map<String,String> initParams = new HashMap<String,String>();\n    initParams.put(MorfologikFilterFactory.DICTIONARY_SCHEMA_ATTRIBUTE,\n        \"morfologik\");\n    MorfologikFilterFactory factory = new MorfologikFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(initParams);\n    TokenStream ts = factory.create(new WhitespaceTokenizer(TEST_VERSION_CURRENT,\n        reader));\n    assertTokenStreamContents(ts, new String[] {\"rower\", \"bilet\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikFilterFactory#testCreateDictionary().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestMorfologikFilterFactory#testCreateDictionary().mjava","sourceNew":"  public void testCreateDictionary() throws Exception {\n    StringReader reader = new StringReader(\"rowery bilety\");\n    Map<String,String> initParams = new HashMap<String,String>();\n    initParams.put(MorfologikFilterFactory.DICTIONARY_SCHEMA_ATTRIBUTE,\n        \"morfologik\");\n    MorfologikFilterFactory factory = new MorfologikFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(initParams);\n    TokenStream ts = factory.create(new WhitespaceTokenizer(TEST_VERSION_CURRENT,\n        reader));\n    assertTokenStreamContents(ts, new String[] {\"rower\", \"bilet\"});\n  }\n\n","sourceOld":"  public void testCreateDictionary() throws Exception {\n    StringReader reader = new StringReader(\"rowery bilety\");\n    Map<String,String> initParams = new HashMap<String,String>();\n    initParams.put(MorfologikFilterFactory.DICTIONARY_SCHEMA_ATTRIBUTE,\n        \"morfologik\");\n    MorfologikFilterFactory factory = new MorfologikFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(initParams);\n    TokenStream ts = factory.create(new WhitespaceTokenizer(TEST_VERSION_CURRENT,\n        reader));\n    assertTokenStreamContents(ts, new String[] {\"rower\", \"bilet\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikFilterFactory#testCreateDictionary().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestMorfologikFilterFactory#testCreateDictionary().mjava","sourceNew":"  public void testCreateDictionary() throws Exception {\n    StringReader reader = new StringReader(\"rowery bilety\");\n    Map<String,String> initParams = new HashMap<String,String>();\n    initParams.put(MorfologikFilterFactory.DICTIONARY_SCHEMA_ATTRIBUTE,\n        \"morfologik\");\n    MorfologikFilterFactory factory = new MorfologikFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(initParams);\n    TokenStream ts = factory.create(new WhitespaceTokenizer(TEST_VERSION_CURRENT,\n        reader));\n    assertTokenStreamContents(ts, new String[] {\"rower\", \"bilet\"});\n  }\n\n","sourceOld":"  public void testCreateDictionary() throws Exception {\n    StringReader reader = new StringReader(\"rowery bilety\");\n    Map<String,String> initParams = new HashMap<String,String>();\n    initParams.put(MorfologikFilterFactory.DICTIONARY_SCHEMA_ATTRIBUTE,\n        \"morfologik\");\n    MorfologikFilterFactory factory = new MorfologikFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(initParams);\n    TokenStream ts = factory.create(new WhitespaceTokenizer(TEST_VERSION_CURRENT,\n        reader));\n    assertTokenStreamContents(ts, new String[] {\"rower\", \"bilet\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikFilterFactory#testCreateDictionary().mjava","pathOld":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikFilterFactory#testCreateDictionary().mjava","sourceNew":"  public void testCreateDictionary() throws Exception {\n    StringReader reader = new StringReader(\"rowery bilety\");\n    Map<String,String> initParams = new HashMap<String,String>();\n    initParams.put(MorfologikFilterFactory.DICTIONARY_SCHEMA_ATTRIBUTE,\n        \"morfologik\");\n    MorfologikFilterFactory factory = new MorfologikFilterFactory(initParams);\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] {\"rower\", \"bilet\"});\n  }\n\n","sourceOld":"  public void testCreateDictionary() throws Exception {\n    StringReader reader = new StringReader(\"rowery bilety\");\n    Map<String,String> initParams = new HashMap<String,String>();\n    initParams.put(MorfologikFilterFactory.DICTIONARY_SCHEMA_ATTRIBUTE,\n        \"morfologik\");\n    MorfologikFilterFactory factory = new MorfologikFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(initParams);\n    TokenStream ts = factory.create(new WhitespaceTokenizer(TEST_VERSION_CURRENT,\n        reader));\n    assertTokenStreamContents(ts, new String[] {\"rower\", \"bilet\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43cfa455b570ba7bf8eefe91de210d46c68a0a2a","date":1372853690,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikFilterFactory#testCreateDictionary().mjava","pathOld":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikFilterFactory#testCreateDictionary().mjava","sourceNew":"  public void testCreateDictionary() throws Exception {\n    StringReader reader = new StringReader(\"rowery bilety\");\n    MorfologikFilterFactory factory = new MorfologikFilterFactory(Collections.<String,String>emptyMap());\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] {\"rower\", \"bilet\"});\n  }\n\n","sourceOld":"  public void testCreateDictionary() throws Exception {\n    StringReader reader = new StringReader(\"rowery bilety\");\n    Map<String,String> initParams = new HashMap<String,String>();\n    initParams.put(MorfologikFilterFactory.DICTIONARY_SCHEMA_ATTRIBUTE,\n        \"morfologik\");\n    MorfologikFilterFactory factory = new MorfologikFilterFactory(initParams);\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] {\"rower\", \"bilet\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikFilterFactory#testCreateDictionary().mjava","pathOld":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikFilterFactory#testCreateDictionary().mjava","sourceNew":"  public void testCreateDictionary() throws Exception {\n    StringReader reader = new StringReader(\"rowery bilety\");\n    MorfologikFilterFactory factory = new MorfologikFilterFactory(Collections.<String,String>emptyMap());\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] {\"rower\", \"bilet\"});\n  }\n\n","sourceOld":"  public void testCreateDictionary() throws Exception {\n    StringReader reader = new StringReader(\"rowery bilety\");\n    Map<String,String> initParams = new HashMap<String,String>();\n    initParams.put(MorfologikFilterFactory.DICTIONARY_SCHEMA_ATTRIBUTE,\n        \"morfologik\");\n    MorfologikFilterFactory factory = new MorfologikFilterFactory(initParams);\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] {\"rower\", \"bilet\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikFilterFactory#testCreateDictionary().mjava","pathOld":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikFilterFactory#testCreateDictionary().mjava","sourceNew":"  public void testCreateDictionary() throws Exception {\n    StringReader reader = new StringReader(\"rowery bilety\");\n    MorfologikFilterFactory factory = new MorfologikFilterFactory(Collections.<String,String>emptyMap());\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] {\"rower\", \"bilet\"});\n  }\n\n","sourceOld":"  public void testCreateDictionary() throws Exception {\n    StringReader reader = new StringReader(\"rowery bilety\");\n    MorfologikFilterFactory factory = new MorfologikFilterFactory(Collections.<String,String>emptyMap());\n    TokenStream stream = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] {\"rower\", \"bilet\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c169d7d02a4ec07ef6cb1d119de39443fa7ff786","date":1441835318,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikFilterFactory#testDefaultDictionary().mjava","pathOld":"lucene/analysis/morfologik/src/test/org/apache/lucene/analysis/morfologik/TestMorfologikFilterFactory#testCreateDictionary().mjava","sourceNew":"  public void testDefaultDictionary() throws Exception {\n    StringReader reader = new StringReader(\"rowery bilety\");\n    MorfologikFilterFactory factory = new MorfologikFilterFactory(Collections.<String,String>emptyMap());\n    factory.inform(loader);\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] {\"rower\", \"bilet\"});\n  }\n\n","sourceOld":"  public void testCreateDictionary() throws Exception {\n    StringReader reader = new StringReader(\"rowery bilety\");\n    MorfologikFilterFactory factory = new MorfologikFilterFactory(Collections.<String,String>emptyMap());\n    TokenStream stream = whitespaceMockTokenizer(reader);\n    stream = factory.create(stream);\n    assertTokenStreamContents(stream, new String[] {\"rower\", \"bilet\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd","43cfa455b570ba7bf8eefe91de210d46c68a0a2a"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["43cfa455b570ba7bf8eefe91de210d46c68a0a2a"],"5329de88aa243e3d3a980fb7807e92663b03a4d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43cfa455b570ba7bf8eefe91de210d46c68a0a2a":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5329de88aa243e3d3a980fb7807e92663b03a4d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c169d7d02a4ec07ef6cb1d119de39443fa7ff786"],"c169d7d02a4ec07ef6cb1d119de39443fa7ff786":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["c169d7d02a4ec07ef6cb1d119de39443fa7ff786"],"5329de88aa243e3d3a980fb7807e92663b03a4d5":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","5329de88aa243e3d3a980fb7807e92663b03a4d5","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4"],"43cfa455b570ba7bf8eefe91de210d46c68a0a2a":["37a0f60745e53927c4c876cfe5b5a58170f0646c","ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","43cfa455b570ba7bf8eefe91de210d46c68a0a2a"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"c169d7d02a4ec07ef6cb1d119de39443fa7ff786":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","37a0f60745e53927c4c876cfe5b5a58170f0646c","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}