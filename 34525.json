{"path":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#assertErrorContains(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","commits":[{"id":"4c538b3eeebd03c2067a2fa5be92f073a08b6f41","date":1496264014,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#assertErrorContains(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","pathOld":"/dev/null","sourceNew":"  static void assertErrorContains(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n      final String payload, final CoreContainer cc, String expectedErrorMsg) throws Exception {\n    try {\n      makeCall(apiBag, path, method, payload, cc);\n      fail(\"Expected exception\");\n    } catch (RuntimeException e) {\n      assertTrue(\"Expected exception with error message '\" + expectedErrorMsg + \"' but got: \" + e.getMessage(), e.getMessage().contains(expectedErrorMsg));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#assertErrorContains(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","pathOld":"/dev/null","sourceNew":"  static void assertErrorContains(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n      final String payload, final CoreContainer cc, String expectedErrorMsg) throws Exception {\n    try {\n      makeCall(apiBag, path, method, payload, cc);\n      fail(\"Expected exception\");\n    } catch (RuntimeException e) {\n      assertTrue(\"Expected exception with error message '\" + expectedErrorMsg + \"' but got: \" + e.getMessage(), e.getMessage().contains(expectedErrorMsg));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#assertErrorContains(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","pathOld":"/dev/null","sourceNew":"  static void assertErrorContains(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n      final String payload, final CoreContainer cc, String expectedErrorMsg) throws Exception {\n    try {\n      makeCall(apiBag, path, method, payload, cc);\n      fail(\"Expected exception\");\n    } catch (RuntimeException e) {\n      assertTrue(\"Expected exception with error message '\" + expectedErrorMsg + \"' but got: \" + e.getMessage(), e.getMessage().contains(expectedErrorMsg));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#assertErrorContains(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","pathOld":"/dev/null","sourceNew":"  static void assertErrorContains(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n      final String payload, final CoreContainer cc, String expectedErrorMsg) throws Exception {\n    try {\n      makeCall(apiBag, path, method, payload, cc);\n      fail(\"Expected exception\");\n    } catch (RuntimeException e) {\n      assertTrue(\"Expected exception with error message '\" + expectedErrorMsg + \"' but got: \" + e.getMessage(), e.getMessage().contains(expectedErrorMsg));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#assertErrorContains(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#assertErrorContains(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","sourceNew":"  static void assertErrorContains(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n      final String payload, final CoreContainer cc, String expectedErrorMsg) throws Exception {\n    RuntimeException e = expectThrows(RuntimeException.class, () -> makeCall(apiBag, path, method, payload, cc));\n    assertTrue(\"Expected exception with error message '\" + expectedErrorMsg + \"' but got: \" + e.getMessage(),\n        e.getMessage().contains(expectedErrorMsg));\n  }\n\n","sourceOld":"  static void assertErrorContains(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n      final String payload, final CoreContainer cc, String expectedErrorMsg) throws Exception {\n    try {\n      makeCall(apiBag, path, method, payload, cc);\n      fail(\"Expected exception\");\n    } catch (RuntimeException e) {\n      assertTrue(\"Expected exception with error message '\" + expectedErrorMsg + \"' but got: \" + e.getMessage(), e.getMessage().contains(expectedErrorMsg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#assertErrorContains(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#assertErrorContains(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","sourceNew":"  static void assertErrorContains(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n      final String payload, final CoreContainer cc, String expectedErrorMsg) throws Exception {\n    RuntimeException e = expectThrows(RuntimeException.class, () -> makeCall(apiBag, path, method, payload, cc));\n    assertTrue(\"Expected exception with error message '\" + expectedErrorMsg + \"' but got: \" + e.getMessage(),\n        e.getMessage().contains(expectedErrorMsg));\n  }\n\n","sourceOld":"  static void assertErrorContains(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n      final String payload, final CoreContainer cc, String expectedErrorMsg) throws Exception {\n    try {\n      makeCall(apiBag, path, method, payload, cc);\n      fail(\"Expected exception\");\n    } catch (RuntimeException e) {\n      assertTrue(\"Expected exception with error message '\" + expectedErrorMsg + \"' but got: \" + e.getMessage(), e.getMessage().contains(expectedErrorMsg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#assertErrorContains(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#assertErrorContains(ApiBag,String,SolrRequest.METHOD,String,CoreContainer,String).mjava","sourceNew":"  static void assertErrorContains(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n      final String payload, final CoreContainer cc, String expectedErrorMsg) throws Exception {\n    RuntimeException e = expectThrows(RuntimeException.class, () -> makeCall(apiBag, path, method, payload, cc));\n    assertTrue(\"Expected exception with error message '\" + expectedErrorMsg + \"' but got: \" + e.getMessage(),\n        e.getMessage().contains(expectedErrorMsg));\n  }\n\n","sourceOld":"  static void assertErrorContains(final ApiBag apiBag, final String path, final SolrRequest.METHOD method,\n      final String payload, final CoreContainer cc, String expectedErrorMsg) throws Exception {\n    try {\n      makeCall(apiBag, path, method, payload, cc);\n      fail(\"Expected exception\");\n    } catch (RuntimeException e) {\n      assertTrue(\"Expected exception with error message '\" + expectedErrorMsg + \"' but got: \" + e.getMessage(), e.getMessage().contains(expectedErrorMsg));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"4c538b3eeebd03c2067a2fa5be92f073a08b6f41":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["28288370235ed02234a64753cdbf0c6ec096304a"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["28288370235ed02234a64753cdbf0c6ec096304a","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4c538b3eeebd03c2067a2fa5be92f073a08b6f41"],"f8061ddd97f3352007d927dae445884a6f3d857b":["28288370235ed02234a64753cdbf0c6ec096304a","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"4c538b3eeebd03c2067a2fa5be92f073a08b6f41":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","4c538b3eeebd03c2067a2fa5be92f073a08b6f41","28288370235ed02234a64753cdbf0c6ec096304a","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}