{"path":"lucene/src/java/org/apache/lucene/search/SloppyPhraseScorer#termPositionsConflict(PhrasePositions).mjava","commits":[{"id":"76bdd2a0d65c8a40e657fbefccfc915026e4902b","date":1315464700,"type":1,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SloppyPhraseScorer#termPositionsConflict(PhrasePositions).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SloppyPhraseScorer#termPositionsDiffer(PhrasePositions).mjava","sourceNew":"    /**\n     * We disallow two pp's to have the same TermPosition, thereby verifying multiple occurrences \n     * in the query of the same word would go elsewhere in the matched doc.\n     * @return null if differ (i.e. valid) otherwise return the higher offset PhrasePositions\n     * out of the first two PPs found to not differ.\n     */\n    private PhrasePositions termPositionsConflict(PhrasePositions pp) {\n        // efficiency note: a more efficient implementation could keep a map between repeating \n        // pp's, so that if pp1a, pp1b, pp1c are repeats of term1, and pp2a, pp2b are repeats \n        // of term2, pp2a would only be checked against pp2b but not against pp1a, pp1b, pp1c. \n        // However this would complicate code, for a rather rare case, so choice is to compromise here.\n        int tpPos = pp.position + pp.offset;\n        for (int i = 0; i < repeats.length; i++) {\n            PhrasePositions pp2 = repeats[i];\n            if (pp2 == pp) {\n                continue;\n            }\n            if (pp.offset == pp2.offset) {\n              continue; // not a repetition: the two PPs are originally in same offset in the query! \n            }\n            int tpPos2 = pp2.position + pp2.offset;\n            if (tpPos2 == tpPos) {\n                return pp.offset > pp2.offset ? pp : pp2; // do not differ: return the one with higher offset.\n            }\n        }\n        return null; \n    }\n\n","sourceOld":"    /**\n     * We disallow two pp's to have the same TermPosition, thereby verifying multiple occurrences \n     * in the query of the same word would go elsewhere in the matched doc.\n     * @return null if differ (i.e. valid) otherwise return the higher offset PhrasePositions\n     * out of the first two PPs found to not differ.\n     */\n    private PhrasePositions termPositionsDiffer(PhrasePositions pp) {\n        // efficiency note: a more efficient implementation could keep a map between repeating \n        // pp's, so that if pp1a, pp1b, pp1c are repeats term1, and pp2a, pp2b are repeats \n        // of term2, pp2a would only be checked against pp2b but not against pp1a, pp1b, pp1c. \n        // However this would complicate code, for a rather rare case, so choice is to compromise here.\n        int tpPos = pp.position + pp.offset;\n        for (int i = 0; i < repeats.length; i++) {\n            PhrasePositions pp2 = repeats[i];\n            if (pp2 == pp) {\n                continue;\n            }\n            if (pp.offset == pp2.offset) {\n              continue; // not a repetition: the two PPs are originally in same offset in the query! \n            }\n            int tpPos2 = pp2.position + pp2.offset;\n            if (tpPos2 == tpPos) {\n                return pp.offset > pp2.offset ? pp : pp2; // do not differ: return the one with higher offset.\n            }\n        }\n        return null; \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9ff635e6838a2facda02727dec5b77d9e64dc4c","date":1316672863,"type":4,"author":"Doron Cohen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/SloppyPhraseScorer#termPositionsConflict(PhrasePositions).mjava","sourceNew":null,"sourceOld":"    /**\n     * We disallow two pp's to have the same TermPosition, thereby verifying multiple occurrences \n     * in the query of the same word would go elsewhere in the matched doc.\n     * @return null if differ (i.e. valid) otherwise return the higher offset PhrasePositions\n     * out of the first two PPs found to not differ.\n     */\n    private PhrasePositions termPositionsConflict(PhrasePositions pp) {\n        // efficiency note: a more efficient implementation could keep a map between repeating \n        // pp's, so that if pp1a, pp1b, pp1c are repeats of term1, and pp2a, pp2b are repeats \n        // of term2, pp2a would only be checked against pp2b but not against pp1a, pp1b, pp1c. \n        // However this would complicate code, for a rather rare case, so choice is to compromise here.\n        int tpPos = pp.position + pp.offset;\n        for (int i = 0; i < repeats.length; i++) {\n            PhrasePositions pp2 = repeats[i];\n            if (pp2 == pp) {\n                continue;\n            }\n            if (pp.offset == pp2.offset) {\n              continue; // not a repetition: the two PPs are originally in same offset in the query! \n            }\n            int tpPos2 = pp2.position + pp2.offset;\n            if (tpPos2 == tpPos) {\n                return pp.offset > pp2.offset ? pp : pp2; // do not differ: return the one with higher offset.\n            }\n        }\n        return null; \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76bdd2a0d65c8a40e657fbefccfc915026e4902b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9ff635e6838a2facda02727dec5b77d9e64dc4c":["76bdd2a0d65c8a40e657fbefccfc915026e4902b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9ff635e6838a2facda02727dec5b77d9e64dc4c"]},"commit2Childs":{"76bdd2a0d65c8a40e657fbefccfc915026e4902b":["c9ff635e6838a2facda02727dec5b77d9e64dc4c"],"c9ff635e6838a2facda02727dec5b77d9e64dc4c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["76bdd2a0d65c8a40e657fbefccfc915026e4902b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}