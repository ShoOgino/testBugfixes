{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","sourceNew":"  /**\n   * Returns <a href=\"http://www.research.att.com/sw/tools/graphviz/\"\n   * target=\"_top\">Graphviz Dot</a> representation of this automaton.\n   */\n  public String toDot() {\n    StringBuilder b = new StringBuilder(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR;\\n\");\n    State[] states = getNumberedStates();\n    for (State s : states) {\n      b.append(\"  \").append(s.number);\n      if (s.accept) b.append(\" [shape=doublecircle,label=\\\"\\\"];\\n\");\n      else b.append(\" [shape=circle,label=\\\"\\\"];\\n\");\n      if (s == initial) {\n        b.append(\"  initial [shape=plaintext,label=\\\"\\\"];\\n\");\n        b.append(\"  initial -> \").append(s.number).append(\"\\n\");\n      }\n      for (Transition t : s.getTransitions()) {\n        b.append(\"  \").append(s.number);\n        t.appendDot(b);\n      }\n    }\n    return b.append(\"}\\n\").toString();\n  }\n\n","sourceOld":"  /**\n   * Returns <a href=\"http://www.research.att.com/sw/tools/graphviz/\"\n   * target=\"_top\">Graphviz Dot</a> representation of this automaton.\n   */\n  public String toDot() {\n    StringBuilder b = new StringBuilder(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR;\\n\");\n    State[] states = getNumberedStates();\n    for (State s : states) {\n      b.append(\"  \").append(s.number);\n      if (s.accept) b.append(\" [shape=doublecircle,label=\\\"\\\"];\\n\");\n      else b.append(\" [shape=circle,label=\\\"\\\"];\\n\");\n      if (s == initial) {\n        b.append(\"  initial [shape=plaintext,label=\\\"\\\"];\\n\");\n        b.append(\"  initial -> \").append(s.number).append(\"\\n\");\n      }\n      for (Transition t : s.getTransitions()) {\n        b.append(\"  \").append(s.number);\n        t.appendDot(b);\n      }\n    }\n    return b.append(\"}\\n\").toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74e872b3e74c3abd9abb1795790610dc6919f074","date":1399630952,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","sourceNew":"  /**\n   * Returns <a href=\"http://www.research.att.com/sw/tools/graphviz/\"\n   * target=\"_top\">Graphviz Dot</a> representation of this automaton.\n   */\n  public String toDot() {\n    StringBuilder b = new StringBuilder(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR;\\n\");\n    State[] states = getNumberedStates();\n    for (State s : states) {\n      b.append(\"  \").append(s.number);\n      if (s.accept) b.append(\" [shape=doublecircle,label=\\\"\" + s.number + \"\\\"];\\n\");\n      else b.append(\" [shape=circle,label=\\\" \" + s.number + \"\\\"];\\n\");\n      if (s == initial) {\n        b.append(\"  initial [shape=plaintext,label=\\\"\\\"];\\n\");\n        b.append(\"  initial -> \").append(s.number).append(\"\\n\");\n      }\n      for (Transition t : s.getTransitions()) {\n        b.append(\"  \").append(s.number);\n        t.appendDot(b);\n      }\n    }\n    return b.append(\"}\\n\").toString();\n  }\n\n","sourceOld":"  /**\n   * Returns <a href=\"http://www.research.att.com/sw/tools/graphviz/\"\n   * target=\"_top\">Graphviz Dot</a> representation of this automaton.\n   */\n  public String toDot() {\n    StringBuilder b = new StringBuilder(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR;\\n\");\n    State[] states = getNumberedStates();\n    for (State s : states) {\n      b.append(\"  \").append(s.number);\n      if (s.accept) b.append(\" [shape=doublecircle,label=\\\"\\\"];\\n\");\n      else b.append(\" [shape=circle,label=\\\"\\\"];\\n\");\n      if (s == initial) {\n        b.append(\"  initial [shape=plaintext,label=\\\"\\\"];\\n\");\n        b.append(\"  initial -> \").append(s.number).append(\"\\n\");\n      }\n      for (Transition t : s.getTransitions()) {\n        b.append(\"  \").append(s.number);\n        t.appendDot(b);\n      }\n    }\n    return b.append(\"}\\n\").toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns <a href=\"http://www.research.att.com/sw/tools/graphviz/\"\n   * target=\"_top\">Graphviz Dot</a> representation of this automaton.\n   */\n  public String toDot() {\n    StringBuilder b = new StringBuilder(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR;\\n\");\n    State[] states = getNumberedStates();\n    for (State s : states) {\n      b.append(\"  \").append(s.number);\n      if (s.accept) b.append(\" [shape=doublecircle,label=\\\"\" + s.number + \"\\\"];\\n\");\n      else b.append(\" [shape=circle,label=\\\" \" + s.number + \"\\\"];\\n\");\n      if (s == initial) {\n        b.append(\"  initial [shape=plaintext,label=\\\"\\\"];\\n\");\n        b.append(\"  initial -> \").append(s.number).append(\"\\n\");\n      }\n      for (Transition t : s.getTransitions()) {\n        b.append(\"  \").append(s.number);\n        t.appendDot(b);\n      }\n    }\n    return b.append(\"}\\n\").toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#toDot().mjava","sourceNew":"  public String toDot() {\n    // TODO: breadth first search so we can see get layered output...\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    final int numStates = getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"0\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = getNumTransitions(state);\n      initTransition(state, t);\n      //System.out.println(\"toDot: state \" + state + \" has \" + numTransitions + \" transitions; t.nextTrans=\" + t.transitionUpto);\n      for(int i=0;i<numTransitions;i++) {\n        getNextTransition(t);\n        //System.out.println(\"  t.nextTrans=\" + t.transitionUpto);\n        assert t.max >= t.min;\n        b.append(\"  \");\n        b.append(state);\n        b.append(\" -> \");\n        b.append(t.dest);\n        b.append(\" [label=\\\"\");\n        appendCharString(t.min, b);\n        if (t.max != t.min) {\n          b.append('-');\n          appendCharString(t.max, b);\n        }\n        b.append(\"\\\"]\\n\");\n        //System.out.println(\"  t=\" + t);\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","sourceOld":"  public String toDot() {\n    // TODO: breadth first search so we can see get layered output...\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    final int numStates = getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"0\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = getNumTransitions(state);\n      initTransition(state, t);\n      //System.out.println(\"toDot: state \" + state + \" has \" + numTransitions + \" transitions; t.nextTrans=\" + t.transitionUpto);\n      for(int i=0;i<numTransitions;i++) {\n        getNextTransition(t);\n        //System.out.println(\"  t.nextTrans=\" + t.transitionUpto);\n        assert t.max >= t.min;\n        b.append(\"  \");\n        b.append(state);\n        b.append(\" -> \");\n        b.append(t.dest);\n        b.append(\" [label=\\\"\");\n        appendCharString(t.min, b);\n        if (t.max != t.min) {\n          b.append('-');\n          appendCharString(t.max, b);\n        }\n        b.append(\"\\\"]\\n\");\n        //System.out.println(\"  t=\" + t);\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bab620c8ab32bb77a62753eca4afb8e47efa87c","date":1402997861,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","sourceNew":"  /** Returns the dot (graphviz) representation of this automaton.\n   *  This is extremely useful for visualizing the automaton. */\n  public String toDot() {\n    // TODO: breadth first search so we can see get layered output...\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    final int numStates = getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"0\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = getNumTransitions(state);\n      initTransition(state, t);\n      //System.out.println(\"toDot: state \" + state + \" has \" + numTransitions + \" transitions; t.nextTrans=\" + t.transitionUpto);\n      for(int i=0;i<numTransitions;i++) {\n        getNextTransition(t);\n        //System.out.println(\"  t.nextTrans=\" + t.transitionUpto);\n        assert t.max >= t.min;\n        b.append(\"  \");\n        b.append(state);\n        b.append(\" -> \");\n        b.append(t.dest);\n        b.append(\" [label=\\\"\");\n        appendCharString(t.min, b);\n        if (t.max != t.min) {\n          b.append('-');\n          appendCharString(t.max, b);\n        }\n        b.append(\"\\\"]\\n\");\n        //System.out.println(\"  t=\" + t);\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","sourceOld":"  public String toDot() {\n    // TODO: breadth first search so we can see get layered output...\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    final int numStates = getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"0\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = getNumTransitions(state);\n      initTransition(state, t);\n      //System.out.println(\"toDot: state \" + state + \" has \" + numTransitions + \" transitions; t.nextTrans=\" + t.transitionUpto);\n      for(int i=0;i<numTransitions;i++) {\n        getNextTransition(t);\n        //System.out.println(\"  t.nextTrans=\" + t.transitionUpto);\n        assert t.max >= t.min;\n        b.append(\"  \");\n        b.append(state);\n        b.append(\" -> \");\n        b.append(t.dest);\n        b.append(\" [label=\\\"\");\n        appendCharString(t.min, b);\n        if (t.max != t.min) {\n          b.append('-');\n          appendCharString(t.max, b);\n        }\n        b.append(\"\\\"]\\n\");\n        //System.out.println(\"  t=\" + t);\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","sourceNew":"  /** Returns the dot (graphviz) representation of this automaton.\n   *  This is extremely useful for visualizing the automaton. */\n  public String toDot() {\n    // TODO: breadth first search so we can see get layered output...\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    final int numStates = getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"0\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = getNumTransitions(state);\n      initTransition(state, t);\n      //System.out.println(\"toDot: state \" + state + \" has \" + numTransitions + \" transitions; t.nextTrans=\" + t.transitionUpto);\n      for(int i=0;i<numTransitions;i++) {\n        getNextTransition(t);\n        //System.out.println(\"  t.nextTrans=\" + t.transitionUpto);\n        assert t.max >= t.min;\n        b.append(\"  \");\n        b.append(state);\n        b.append(\" -> \");\n        b.append(t.dest);\n        b.append(\" [label=\\\"\");\n        appendCharString(t.min, b);\n        if (t.max != t.min) {\n          b.append('-');\n          appendCharString(t.max, b);\n        }\n        b.append(\"\\\"]\\n\");\n        //System.out.println(\"  t=\" + t);\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","sourceOld":"  /**\n   * Returns <a href=\"http://www.research.att.com/sw/tools/graphviz/\"\n   * target=\"_top\">Graphviz Dot</a> representation of this automaton.\n   */\n  public String toDot() {\n    StringBuilder b = new StringBuilder(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR;\\n\");\n    State[] states = getNumberedStates();\n    for (State s : states) {\n      b.append(\"  \").append(s.number);\n      if (s.accept) b.append(\" [shape=doublecircle,label=\\\"\" + s.number + \"\\\"];\\n\");\n      else b.append(\" [shape=circle,label=\\\" \" + s.number + \"\\\"];\\n\");\n      if (s == initial) {\n        b.append(\"  initial [shape=plaintext,label=\\\"\\\"];\\n\");\n        b.append(\"  initial -> \").append(s.number).append(\"\\n\");\n      }\n      for (Transition t : s.getTransitions()) {\n        b.append(\"  \").append(s.number);\n        t.appendDot(b);\n      }\n    }\n    return b.append(\"}\\n\").toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a4493f0c732d2928d1a4f773f15d19434aa8ba","date":1405856163,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","sourceNew":"  /** Returns the dot (graphviz) representation of this automaton.\n   *  This is extremely useful for visualizing the automaton. */\n  public String toDot() {\n    // TODO: breadth first search so we can see get layered output...\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    final int numStates = getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"0\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = initTransition(state, t);\n      //System.out.println(\"toDot: state \" + state + \" has \" + numTransitions + \" transitions; t.nextTrans=\" + t.transitionUpto);\n      for(int i=0;i<numTransitions;i++) {\n        getNextTransition(t);\n        //System.out.println(\"  t.nextTrans=\" + t.transitionUpto);\n        assert t.max >= t.min;\n        b.append(\"  \");\n        b.append(state);\n        b.append(\" -> \");\n        b.append(t.dest);\n        b.append(\" [label=\\\"\");\n        appendCharString(t.min, b);\n        if (t.max != t.min) {\n          b.append('-');\n          appendCharString(t.max, b);\n        }\n        b.append(\"\\\"]\\n\");\n        //System.out.println(\"  t=\" + t);\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","sourceOld":"  /** Returns the dot (graphviz) representation of this automaton.\n   *  This is extremely useful for visualizing the automaton. */\n  public String toDot() {\n    // TODO: breadth first search so we can see get layered output...\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    final int numStates = getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"0\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = getNumTransitions(state);\n      initTransition(state, t);\n      //System.out.println(\"toDot: state \" + state + \" has \" + numTransitions + \" transitions; t.nextTrans=\" + t.transitionUpto);\n      for(int i=0;i<numTransitions;i++) {\n        getNextTransition(t);\n        //System.out.println(\"  t.nextTrans=\" + t.transitionUpto);\n        assert t.max >= t.min;\n        b.append(\"  \");\n        b.append(state);\n        b.append(\" -> \");\n        b.append(t.dest);\n        b.append(\" [label=\\\"\");\n        appendCharString(t.min, b);\n        if (t.max != t.min) {\n          b.append('-');\n          appendCharString(t.max, b);\n        }\n        b.append(\"\\\"]\\n\");\n        //System.out.println(\"  t=\" + t);\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","sourceNew":"  /** Returns the dot (graphviz) representation of this automaton.\n   *  This is extremely useful for visualizing the automaton. */\n  public String toDot() {\n    // TODO: breadth first search so we can see get layered output...\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    final int numStates = getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"0\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = initTransition(state, t);\n      //System.out.println(\"toDot: state \" + state + \" has \" + numTransitions + \" transitions; t.nextTrans=\" + t.transitionUpto);\n      for(int i=0;i<numTransitions;i++) {\n        getNextTransition(t);\n        //System.out.println(\"  t.nextTrans=\" + t.transitionUpto + \" t=\" + t);\n        assert t.max >= t.min;\n        b.append(\"  \");\n        b.append(state);\n        b.append(\" -> \");\n        b.append(t.dest);\n        b.append(\" [label=\\\"\");\n        appendCharString(t.min, b);\n        if (t.max != t.min) {\n          b.append('-');\n          appendCharString(t.max, b);\n        }\n        b.append(\"\\\"]\\n\");\n        //System.out.println(\"  t=\" + t);\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","sourceOld":"  /** Returns the dot (graphviz) representation of this automaton.\n   *  This is extremely useful for visualizing the automaton. */\n  public String toDot() {\n    // TODO: breadth first search so we can see get layered output...\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    final int numStates = getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"0\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = initTransition(state, t);\n      //System.out.println(\"toDot: state \" + state + \" has \" + numTransitions + \" transitions; t.nextTrans=\" + t.transitionUpto);\n      for(int i=0;i<numTransitions;i++) {\n        getNextTransition(t);\n        //System.out.println(\"  t.nextTrans=\" + t.transitionUpto);\n        assert t.max >= t.min;\n        b.append(\"  \");\n        b.append(state);\n        b.append(\" -> \");\n        b.append(t.dest);\n        b.append(\" [label=\\\"\");\n        appendCharString(t.min, b);\n        if (t.max != t.min) {\n          b.append('-');\n          appendCharString(t.max, b);\n        }\n        b.append(\"\\\"]\\n\");\n        //System.out.println(\"  t=\" + t);\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","sourceNew":"  /** Returns the dot (graphviz) representation of this automaton.\n   *  This is extremely useful for visualizing the automaton. */\n  public String toDot() {\n    // TODO: breadth first search so we can see get layered output...\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    final int numStates = getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"0\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = initTransition(state, t);\n      //System.out.println(\"toDot: state \" + state + \" has \" + numTransitions + \" transitions; t.nextTrans=\" + t.transitionUpto);\n      for(int i=0;i<numTransitions;i++) {\n        getNextTransition(t);\n        //System.out.println(\"  t.nextTrans=\" + t.transitionUpto + \" t=\" + t);\n        assert t.max >= t.min;\n        b.append(\"  \");\n        b.append(state);\n        b.append(\" -> \");\n        b.append(t.dest);\n        b.append(\" [label=\\\"\");\n        appendCharString(t.min, b);\n        if (t.max != t.min) {\n          b.append('-');\n          appendCharString(t.max, b);\n        }\n        b.append(\"\\\"]\\n\");\n        //System.out.println(\"  t=\" + t);\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","sourceOld":"  /** Returns the dot (graphviz) representation of this automaton.\n   *  This is extremely useful for visualizing the automaton. */\n  public String toDot() {\n    // TODO: breadth first search so we can see get layered output...\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    final int numStates = getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"0\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = initTransition(state, t);\n      //System.out.println(\"toDot: state \" + state + \" has \" + numTransitions + \" transitions; t.nextTrans=\" + t.transitionUpto);\n      for(int i=0;i<numTransitions;i++) {\n        getNextTransition(t);\n        //System.out.println(\"  t.nextTrans=\" + t.transitionUpto);\n        assert t.max >= t.min;\n        b.append(\"  \");\n        b.append(state);\n        b.append(\" -> \");\n        b.append(t.dest);\n        b.append(\" [label=\\\"\");\n        appendCharString(t.min, b);\n        if (t.max != t.min) {\n          b.append('-');\n          appendCharString(t.max, b);\n        }\n        b.append(\"\\\"]\\n\");\n        //System.out.println(\"  t=\" + t);\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24a98f5fdd23e04f85819dbc63b47a12f7c44311","date":1482439157,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","sourceNew":"  /** Returns the dot (graphviz) representation of this automaton.\n   *  This is extremely useful for visualizing the automaton. */\n  public String toDot() {\n    // TODO: breadth first search so we can get layered output...\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    b.append(\"  node [width=0.2, height=0.2, fontsize=8]\\n\");\n    final int numStates = getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = initTransition(state, t);\n      //System.out.println(\"toDot: state \" + state + \" has \" + numTransitions + \" transitions; t.nextTrans=\" + t.transitionUpto);\n      for(int i=0;i<numTransitions;i++) {\n        getNextTransition(t);\n        //System.out.println(\"  t.nextTrans=\" + t.transitionUpto + \" t=\" + t);\n        assert t.max >= t.min;\n        b.append(\"  \");\n        b.append(state);\n        b.append(\" -> \");\n        b.append(t.dest);\n        b.append(\" [label=\\\"\");\n        appendCharString(t.min, b);\n        if (t.max != t.min) {\n          b.append('-');\n          appendCharString(t.max, b);\n        }\n        b.append(\"\\\"]\\n\");\n        //System.out.println(\"  t=\" + t);\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","sourceOld":"  /** Returns the dot (graphviz) representation of this automaton.\n   *  This is extremely useful for visualizing the automaton. */\n  public String toDot() {\n    // TODO: breadth first search so we can see get layered output...\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    final int numStates = getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"0\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = initTransition(state, t);\n      //System.out.println(\"toDot: state \" + state + \" has \" + numTransitions + \" transitions; t.nextTrans=\" + t.transitionUpto);\n      for(int i=0;i<numTransitions;i++) {\n        getNextTransition(t);\n        //System.out.println(\"  t.nextTrans=\" + t.transitionUpto + \" t=\" + t);\n        assert t.max >= t.min;\n        b.append(\"  \");\n        b.append(state);\n        b.append(\" -> \");\n        b.append(t.dest);\n        b.append(\" [label=\\\"\");\n        appendCharString(t.min, b);\n        if (t.max != t.min) {\n          b.append('-');\n          appendCharString(t.max, b);\n        }\n        b.append(\"\\\"]\\n\");\n        //System.out.println(\"  t=\" + t);\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","sourceNew":"  /** Returns the dot (graphviz) representation of this automaton.\n   *  This is extremely useful for visualizing the automaton. */\n  public String toDot() {\n    // TODO: breadth first search so we can get layered output...\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    b.append(\"  node [width=0.2, height=0.2, fontsize=8]\\n\");\n    final int numStates = getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = initTransition(state, t);\n      //System.out.println(\"toDot: state \" + state + \" has \" + numTransitions + \" transitions; t.nextTrans=\" + t.transitionUpto);\n      for(int i=0;i<numTransitions;i++) {\n        getNextTransition(t);\n        //System.out.println(\"  t.nextTrans=\" + t.transitionUpto + \" t=\" + t);\n        assert t.max >= t.min;\n        b.append(\"  \");\n        b.append(state);\n        b.append(\" -> \");\n        b.append(t.dest);\n        b.append(\" [label=\\\"\");\n        appendCharString(t.min, b);\n        if (t.max != t.min) {\n          b.append('-');\n          appendCharString(t.max, b);\n        }\n        b.append(\"\\\"]\\n\");\n        //System.out.println(\"  t=\" + t);\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","sourceOld":"  /** Returns the dot (graphviz) representation of this automaton.\n   *  This is extremely useful for visualizing the automaton. */\n  public String toDot() {\n    // TODO: breadth first search so we can see get layered output...\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    final int numStates = getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"0\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = initTransition(state, t);\n      //System.out.println(\"toDot: state \" + state + \" has \" + numTransitions + \" transitions; t.nextTrans=\" + t.transitionUpto);\n      for(int i=0;i<numTransitions;i++) {\n        getNextTransition(t);\n        //System.out.println(\"  t.nextTrans=\" + t.transitionUpto + \" t=\" + t);\n        assert t.max >= t.min;\n        b.append(\"  \");\n        b.append(state);\n        b.append(\" -> \");\n        b.append(t.dest);\n        b.append(\" [label=\\\"\");\n        appendCharString(t.min, b);\n        if (t.max != t.min) {\n          b.append('-');\n          appendCharString(t.max, b);\n        }\n        b.append(\"\\\"]\\n\");\n        //System.out.println(\"  t=\" + t);\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#toDot().mjava","sourceNew":"  /** Returns the dot (graphviz) representation of this automaton.\n   *  This is extremely useful for visualizing the automaton. */\n  public String toDot() {\n    // TODO: breadth first search so we can get layered output...\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    b.append(\"  node [width=0.2, height=0.2, fontsize=8]\\n\");\n    final int numStates = getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\").append(state).append(\"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\").append(state).append(\"\\\"]\\n\");\n      }\n      int numTransitions = initTransition(state, t);\n      //System.out.println(\"toDot: state \" + state + \" has \" + numTransitions + \" transitions; t.nextTrans=\" + t.transitionUpto);\n      for(int i=0;i<numTransitions;i++) {\n        getNextTransition(t);\n        //System.out.println(\"  t.nextTrans=\" + t.transitionUpto + \" t=\" + t);\n        assert t.max >= t.min;\n        b.append(\"  \");\n        b.append(state);\n        b.append(\" -> \");\n        b.append(t.dest);\n        b.append(\" [label=\\\"\");\n        appendCharString(t.min, b);\n        if (t.max != t.min) {\n          b.append('-');\n          appendCharString(t.max, b);\n        }\n        b.append(\"\\\"]\\n\");\n        //System.out.println(\"  t=\" + t);\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","sourceOld":"  /** Returns the dot (graphviz) representation of this automaton.\n   *  This is extremely useful for visualizing the automaton. */\n  public String toDot() {\n    // TODO: breadth first search so we can get layered output...\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    b.append(\"  node [width=0.2, height=0.2, fontsize=8]\\n\");\n    final int numStates = getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = initTransition(state, t);\n      //System.out.println(\"toDot: state \" + state + \" has \" + numTransitions + \" transitions; t.nextTrans=\" + t.transitionUpto);\n      for(int i=0;i<numTransitions;i++) {\n        getNextTransition(t);\n        //System.out.println(\"  t.nextTrans=\" + t.transitionUpto + \" t=\" + t);\n        assert t.max >= t.min;\n        b.append(\"  \");\n        b.append(state);\n        b.append(\" -> \");\n        b.append(t.dest);\n        b.append(\" [label=\\\"\");\n        appendCharString(t.min, b);\n        if (t.max != t.min) {\n          b.append('-');\n          appendCharString(t.max, b);\n        }\n        b.append(\"\\\"]\\n\");\n        //System.out.println(\"  t=\" + t);\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"2ffe681f212e5073c69955b4ad22946794c84940":["24a98f5fdd23e04f85819dbc63b47a12f7c44311"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"06a4493f0c732d2928d1a4f773f15d19434aa8ba":["5c84485629d80d203608e8975a1139de9933cc38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["74e872b3e74c3abd9abb1795790610dc6919f074"],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["3e8715d826e588419327562287d5d6a8040d63d6"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["3e8715d826e588419327562287d5d6a8040d63d6","24a98f5fdd23e04f85819dbc63b47a12f7c44311"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"d2638f781be724518ff6c2263d14a48cf6e68017":["06a4493f0c732d2928d1a4f773f15d19434aa8ba","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["06a4493f0c732d2928d1a4f773f15d19434aa8ba"],"5c84485629d80d203608e8975a1139de9933cc38":["74e872b3e74c3abd9abb1795790610dc6919f074","6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"74e872b3e74c3abd9abb1795790610dc6919f074":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ffe681f212e5073c69955b4ad22946794c84940"]},"commit2Childs":{"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["5c84485629d80d203608e8975a1139de9933cc38"],"2ffe681f212e5073c69955b4ad22946794c84940":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["74e872b3e74c3abd9abb1795790610dc6919f074"],"06a4493f0c732d2928d1a4f773f15d19434aa8ba":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["2ffe681f212e5073c69955b4ad22946794c84940","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"5c84485629d80d203608e8975a1139de9933cc38":["06a4493f0c732d2928d1a4f773f15d19434aa8ba"],"3e8715d826e588419327562287d5d6a8040d63d6":["24a98f5fdd23e04f85819dbc63b47a12f7c44311","f03e4bed5023ec3ef93a771b8888cae991cf448d","d2638f781be724518ff6c2263d14a48cf6e68017"],"74e872b3e74c3abd9abb1795790610dc6919f074":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}