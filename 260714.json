{"path":"src/java/org/apache/solr/handler/component/TermsComponent#createShardQuery(SolrParams).mjava","commits":[{"id":"401b0b7bbdbac0027e5b44890c4131d808ec2c9d","date":1260774382,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/TermsComponent#createShardQuery(SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  private ShardRequest createShardQuery(SolrParams params) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TERMS;\n\n    // base shard request on original parameters\n    sreq.params = new ModifiableSolrParams(params);\n\n    // don't pass through the shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // remove any limits for shards, we want them to return all possible\n    // responses\n    // we want this so we can calculate the correct counts\n    // dont sort by count to avoid that unnecessary overhead on the shards\n    sreq.params.remove(TermsParams.TERMS_MAXCOUNT);\n    sreq.params.remove(TermsParams.TERMS_MINCOUNT);\n    sreq.params.set(TermsParams.TERMS_LIMIT, -1);\n    sreq.params.set(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_INDEX);\n\n    // TODO: is there a better way to handle this?\n    String qt = params.get(CommonParams.QT);\n    if (qt != null) {\n      sreq.params.add(CommonParams.QT, qt);\n    }\n    return sreq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermsComponent#createShardQuery(SolrParams).mjava","pathOld":"src/java/org/apache/solr/handler/component/TermsComponent#createShardQuery(SolrParams).mjava","sourceNew":"  private ShardRequest createShardQuery(SolrParams params) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TERMS;\n\n    // base shard request on original parameters\n    sreq.params = new ModifiableSolrParams(params);\n\n    // don't pass through the shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // remove any limits for shards, we want them to return all possible\n    // responses\n    // we want this so we can calculate the correct counts\n    // dont sort by count to avoid that unnecessary overhead on the shards\n    sreq.params.remove(TermsParams.TERMS_MAXCOUNT);\n    sreq.params.remove(TermsParams.TERMS_MINCOUNT);\n    sreq.params.set(TermsParams.TERMS_LIMIT, -1);\n    sreq.params.set(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_INDEX);\n\n    // TODO: is there a better way to handle this?\n    String qt = params.get(CommonParams.QT);\n    if (qt != null) {\n      sreq.params.add(CommonParams.QT, qt);\n    }\n    return sreq;\n  }\n\n","sourceOld":"  private ShardRequest createShardQuery(SolrParams params) {\n    ShardRequest sreq = new ShardRequest();\n    sreq.purpose = ShardRequest.PURPOSE_GET_TERMS;\n\n    // base shard request on original parameters\n    sreq.params = new ModifiableSolrParams(params);\n\n    // don't pass through the shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // remove any limits for shards, we want them to return all possible\n    // responses\n    // we want this so we can calculate the correct counts\n    // dont sort by count to avoid that unnecessary overhead on the shards\n    sreq.params.remove(TermsParams.TERMS_MAXCOUNT);\n    sreq.params.remove(TermsParams.TERMS_MINCOUNT);\n    sreq.params.set(TermsParams.TERMS_LIMIT, -1);\n    sreq.params.set(TermsParams.TERMS_SORT, TermsParams.TERMS_SORT_INDEX);\n\n    // TODO: is there a better way to handle this?\n    String qt = params.get(CommonParams.QT);\n    if (qt != null) {\n      sreq.params.add(CommonParams.QT, qt);\n    }\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"401b0b7bbdbac0027e5b44890c4131d808ec2c9d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["401b0b7bbdbac0027e5b44890c4131d808ec2c9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"401b0b7bbdbac0027e5b44890c4131d808ec2c9d":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["401b0b7bbdbac0027e5b44890c4131d808ec2c9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}