{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode#setBounds(T,T,boolean,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode#setBounds(T,T,boolean,boolean).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode#setBounds(T,T,boolean,boolean).mjava","sourceNew":"  /**\n   * Sets the lower and upper bounds.\n   * \n   * @param lower the lower bound, <code>null</code> if lower bound is open\n   * @param upper the upper bound, <code>null</code> if upper bound is open\n   * @param lowerInclusive <code>true</code> if the lower bound is inclusive, otherwise, <code>false</code>\n   * @param upperInclusive <code>true</code> if the upper bound is inclusive, otherwise, <code>false</code>\n   * \n   * @see #getLowerBound()\n   * @see #getUpperBound()\n   * @see #isLowerInclusive()\n   * @see #isUpperInclusive()\n   */\n  public void setBounds(T lower, T upper, boolean lowerInclusive,\n      boolean upperInclusive) {\n    \n    if (lower != null && upper != null) {\n      String lowerField = StringUtils.toString(lower.getField());\n      String upperField = StringUtils.toString(upper.getField());\n      \n      if ((upperField != null || lowerField != null)\n          && ((upperField != null && !upperField.equals(lowerField)) || !lowerField\n              .equals(upperField))) {\n        throw new IllegalArgumentException(\n            \"lower and upper bounds should have the same field name!\");\n      }\n      \n      this.lowerInclusive = lowerInclusive;\n      this.upperInclusive = upperInclusive;\n      \n      ArrayList<QueryNode> children = new ArrayList<QueryNode>(2);\n      children.add(lower);\n      children.add(upper);\n      \n      set(children);\n      \n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Sets the lower and upper bounds.\n   * \n   * @param lower the lower bound, <code>null</code> if lower bound is open\n   * @param upper the upper bound, <code>null</code> if upper bound is open\n   * @param lowerInclusive <code>true</code> if the lower bound is inclusive, otherwise, <code>false</code>\n   * @param upperInclusive <code>true</code> if the upper bound is inclusive, otherwise, <code>false</code>\n   * \n   * @see #getLowerBound()\n   * @see #getUpperBound()\n   * @see #isLowerInclusive()\n   * @see #isUpperInclusive()\n   */\n  public void setBounds(T lower, T upper, boolean lowerInclusive,\n      boolean upperInclusive) {\n    \n    if (lower != null && upper != null) {\n      String lowerField = StringUtils.toString(lower.getField());\n      String upperField = StringUtils.toString(upper.getField());\n      \n      if ((upperField != null || lowerField != null)\n          && ((upperField != null && !upperField.equals(lowerField)) || !lowerField\n              .equals(upperField))) {\n        throw new IllegalArgumentException(\n            \"lower and upper bounds should have the same field name!\");\n      }\n      \n      this.lowerInclusive = lowerInclusive;\n      this.upperInclusive = upperInclusive;\n      \n      ArrayList<QueryNode> children = new ArrayList<QueryNode>(2);\n      children.add(lower);\n      children.add(upper);\n      \n      set(children);\n      \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode#setBounds(T,T,boolean,boolean).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/AbstractRangeQueryNode#setBounds(T,T,boolean,boolean).mjava","sourceNew":"  /**\n   * Sets the lower and upper bounds.\n   * \n   * @param lower the lower bound, <code>null</code> if lower bound is open\n   * @param upper the upper bound, <code>null</code> if upper bound is open\n   * @param lowerInclusive <code>true</code> if the lower bound is inclusive, otherwise, <code>false</code>\n   * @param upperInclusive <code>true</code> if the upper bound is inclusive, otherwise, <code>false</code>\n   * \n   * @see #getLowerBound()\n   * @see #getUpperBound()\n   * @see #isLowerInclusive()\n   * @see #isUpperInclusive()\n   */\n  public void setBounds(T lower, T upper, boolean lowerInclusive,\n      boolean upperInclusive) {\n    \n    if (lower != null && upper != null) {\n      String lowerField = StringUtils.toString(lower.getField());\n      String upperField = StringUtils.toString(upper.getField());\n      \n      if ((upperField != null || lowerField != null)\n          && ((upperField != null && !upperField.equals(lowerField)) || !lowerField\n              .equals(upperField))) {\n        throw new IllegalArgumentException(\n            \"lower and upper bounds should have the same field name!\");\n      }\n      \n      this.lowerInclusive = lowerInclusive;\n      this.upperInclusive = upperInclusive;\n      \n      ArrayList<QueryNode> children = new ArrayList<>(2);\n      children.add(lower);\n      children.add(upper);\n      \n      set(children);\n      \n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Sets the lower and upper bounds.\n   * \n   * @param lower the lower bound, <code>null</code> if lower bound is open\n   * @param upper the upper bound, <code>null</code> if upper bound is open\n   * @param lowerInclusive <code>true</code> if the lower bound is inclusive, otherwise, <code>false</code>\n   * @param upperInclusive <code>true</code> if the upper bound is inclusive, otherwise, <code>false</code>\n   * \n   * @see #getLowerBound()\n   * @see #getUpperBound()\n   * @see #isLowerInclusive()\n   * @see #isUpperInclusive()\n   */\n  public void setBounds(T lower, T upper, boolean lowerInclusive,\n      boolean upperInclusive) {\n    \n    if (lower != null && upper != null) {\n      String lowerField = StringUtils.toString(lower.getField());\n      String upperField = StringUtils.toString(upper.getField());\n      \n      if ((upperField != null || lowerField != null)\n          && ((upperField != null && !upperField.equals(lowerField)) || !lowerField\n              .equals(upperField))) {\n        throw new IllegalArgumentException(\n            \"lower and upper bounds should have the same field name!\");\n      }\n      \n      this.lowerInclusive = lowerInclusive;\n      this.upperInclusive = upperInclusive;\n      \n      ArrayList<QueryNode> children = new ArrayList<QueryNode>(2);\n      children.add(lower);\n      children.add(upper);\n      \n      set(children);\n      \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}