{"path":"src/java/org/apache/solr/search/FunctionQParser#parseValueSourceList().mjava","commits":[{"id":"66ab3886c1d845c59c9e5b23b2fb247b927db498","date":1193060587,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/FunctionQParser#parseValueSourceList().mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#parseValueSourceList(StrParser,IndexSchema).mjava","sourceNew":"  private List<ValueSource> parseValueSourceList() throws ParseException {\n    List<ValueSource> sources = new ArrayList<ValueSource>(3);\n    for (;;) {\n      sources.add(parseValSource());\n      char ch = sp.peek();\n      if (ch==')') break;\n      sp.expect(\",\");\n    }\n    return sources;\n  }\n\n","sourceOld":"  private static List<ValueSource> parseValueSourceList(StrParser sp, IndexSchema schema) throws ParseException {\n    List<ValueSource> sources = new ArrayList<ValueSource>(3);\n    for (;;) {\n      sources.add(parseValSource(sp,schema)); \n      char ch = sp.peek();\n      if (ch==')') break;\n      sp.expect(\",\");\n    }\n    return sources;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1833c624d42634c14299628650e0a70626349a71","date":1204207883,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/FunctionQParser#parseValueSourceList().mjava","pathOld":"src/java/org/apache/solr/search/FunctionQParser#parseValueSourceList().mjava","sourceNew":"  /**\n   * Parse a list of ValueSource.  Must be the final set of arguments\n   * to a ValueSource.\n   * \n   * @return List<ValueSource>\n   * @throws ParseException\n   */\n  public List<ValueSource> parseValueSourceList() throws ParseException {\n    List<ValueSource> sources = new ArrayList<ValueSource>(3);\n    for (;;) {\n      sources.add(parseValueSource(false));\n      if (! consumeArgumentDelimiter()) break;\n    }\n    return sources;\n  }\n\n","sourceOld":"  private List<ValueSource> parseValueSourceList() throws ParseException {\n    List<ValueSource> sources = new ArrayList<ValueSource>(3);\n    for (;;) {\n      sources.add(parseValSource());\n      char ch = sp.peek();\n      if (ch==')') break;\n      sp.expect(\",\");\n    }\n    return sources;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/FunctionQParser#parseValueSourceList().mjava","pathOld":"src/java/org/apache/solr/search/FunctionQParser#parseValueSourceList().mjava","sourceNew":"  /**\n   * Parse a list of ValueSource.  Must be the final set of arguments\n   * to a ValueSource.\n   * \n   * @return List<ValueSource>\n   * @throws ParseException\n   */\n  public List<ValueSource> parseValueSourceList() throws ParseException {\n    List<ValueSource> sources = new ArrayList<ValueSource>(3);\n    for (;;) {\n      sources.add(parseValueSource(false));\n      if (! consumeArgumentDelimiter()) break;\n    }\n    return sources;\n  }\n\n","sourceOld":"  /**\n   * Parse a list of ValueSource.  Must be the final set of arguments\n   * to a ValueSource.\n   * \n   * @return List<ValueSource>\n   * @throws ParseException\n   */\n  public List<ValueSource> parseValueSourceList() throws ParseException {\n    List<ValueSource> sources = new ArrayList<ValueSource>(3);\n    for (;;) {\n      sources.add(parseValueSource(false));\n      if (! consumeArgumentDelimiter()) break;\n    }\n    return sources;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"66ab3886c1d845c59c9e5b23b2fb247b927db498":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1833c624d42634c14299628650e0a70626349a71"],"1833c624d42634c14299628650e0a70626349a71":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"66ab3886c1d845c59c9e5b23b2fb247b927db498":["1833c624d42634c14299628650e0a70626349a71"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"1833c624d42634c14299628650e0a70626349a71":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}