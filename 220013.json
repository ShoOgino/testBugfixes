{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.VerifyVisitor#visit(int,byte[]).mjava","commits":[{"id":"1786be6a11f9cf5e48ce84869d1bb71e9c02f966","date":1448381196,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.VerifyVisitor#visit(int,byte[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      if (docID < 0 || docID >= maxDoc) {\n        throw new RuntimeException(\"docID=\" + docID + \" is out of bounds of 0..\" + maxDoc);\n      }\n      for(int dim=0;dim<numDims;dim++) {\n        if (StringHelper.compare(bytesPerDim, cellMinPacked, dim*bytesPerDim, packedValue, dim*bytesPerDim) > 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue, dim*bytesPerDim, bytesPerDim) + \" for docID=\" + docID + \" dim=\" + dim + \" is less than this leaf block's minimum=\" + new BytesRef(cellMinPacked, dim*bytesPerDim, bytesPerDim));\n        }\n        if (StringHelper.compare(bytesPerDim, cellMaxPacked, dim*bytesPerDim, packedValue, dim*bytesPerDim) < 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue, dim*bytesPerDim, bytesPerDim) + \" for docID=\" + docID + \" dim=\" + dim + \" is greater than this leaf block's maximum=\" + new BytesRef(cellMaxPacked, dim*bytesPerDim, bytesPerDim));\n        }\n      }\n\n      if (numDims == 1) {\n        // With only 1D, all values should always be in sorted order\n        if (lastPackedValue == null) {\n          lastPackedValue = Arrays.copyOf(packedValue, packedValue.length);\n        } else if (BKDUtil.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0) > 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue) + \" for docID=\" + docID + \" dim=0\" + \" sorts before last value=\" + new BytesRef(lastPackedValue));\n        } else {\n          System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.VerifyVisitor#visit(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.VerifyVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      if (docID < 0 || docID >= maxDoc) {\n        throw new RuntimeException(\"docID=\" + docID + \" is out of bounds of 0..\" + maxDoc);\n      }\n      for(int dim=0;dim<numDims;dim++) {\n        if (StringHelper.compare(bytesPerDim, cellMinPacked, dim*bytesPerDim, packedValue, dim*bytesPerDim) > 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue, dim*bytesPerDim, bytesPerDim) + \" for docID=\" + docID + \" dim=\" + dim + \" is less than this leaf block's minimum=\" + new BytesRef(cellMinPacked, dim*bytesPerDim, bytesPerDim));\n        }\n        if (StringHelper.compare(bytesPerDim, cellMaxPacked, dim*bytesPerDim, packedValue, dim*bytesPerDim) < 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue, dim*bytesPerDim, bytesPerDim) + \" for docID=\" + docID + \" dim=\" + dim + \" is greater than this leaf block's maximum=\" + new BytesRef(cellMaxPacked, dim*bytesPerDim, bytesPerDim));\n        }\n      }\n\n      if (numDims == 1) {\n        // With only 1D, all values should always be in sorted order\n        if (lastPackedValue == null) {\n          lastPackedValue = Arrays.copyOf(packedValue, packedValue.length);\n        } else if (NumericUtils.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0) > 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue) + \" for docID=\" + docID + \" dim=0\" + \" sorts before last value=\" + new BytesRef(lastPackedValue));\n        } else {\n          System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      if (docID < 0 || docID >= maxDoc) {\n        throw new RuntimeException(\"docID=\" + docID + \" is out of bounds of 0..\" + maxDoc);\n      }\n      for(int dim=0;dim<numDims;dim++) {\n        if (StringHelper.compare(bytesPerDim, cellMinPacked, dim*bytesPerDim, packedValue, dim*bytesPerDim) > 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue, dim*bytesPerDim, bytesPerDim) + \" for docID=\" + docID + \" dim=\" + dim + \" is less than this leaf block's minimum=\" + new BytesRef(cellMinPacked, dim*bytesPerDim, bytesPerDim));\n        }\n        if (StringHelper.compare(bytesPerDim, cellMaxPacked, dim*bytesPerDim, packedValue, dim*bytesPerDim) < 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue, dim*bytesPerDim, bytesPerDim) + \" for docID=\" + docID + \" dim=\" + dim + \" is greater than this leaf block's maximum=\" + new BytesRef(cellMaxPacked, dim*bytesPerDim, bytesPerDim));\n        }\n      }\n\n      if (numDims == 1) {\n        // With only 1D, all values should always be in sorted order\n        if (lastPackedValue == null) {\n          lastPackedValue = Arrays.copyOf(packedValue, packedValue.length);\n        } else if (BKDUtil.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0) > 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue) + \" for docID=\" + docID + \" dim=0\" + \" sorts before last value=\" + new BytesRef(lastPackedValue));\n        } else {\n          System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12bfdc932307442b651432f92845942f9041ace8","date":1456860728,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.VerifyVisitor#visit(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.VerifyVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      if (docID < 0 || docID >= maxDoc) {\n        throw new RuntimeException(\"docID=\" + docID + \" is out of bounds of 0..\" + maxDoc);\n      }\n      for(int dim=0;dim<numDims;dim++) {\n        if (StringHelper.compare(bytesPerDim, cellMinPacked, dim*bytesPerDim, packedValue, dim*bytesPerDim) > 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue, dim*bytesPerDim, bytesPerDim) + \" for docID=\" + docID + \" dim=\" + dim + \" is less than this leaf block's minimum=\" + new BytesRef(cellMinPacked, dim*bytesPerDim, bytesPerDim));\n        }\n        if (StringHelper.compare(bytesPerDim, cellMaxPacked, dim*bytesPerDim, packedValue, dim*bytesPerDim) < 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue, dim*bytesPerDim, bytesPerDim) + \" for docID=\" + docID + \" dim=\" + dim + \" is greater than this leaf block's maximum=\" + new BytesRef(cellMaxPacked, dim*bytesPerDim, bytesPerDim));\n        }\n      }\n\n      if (numDims == 1) {\n        // With only 1D, all values should always be in sorted order\n        if (lastPackedValue == null) {\n          lastPackedValue = Arrays.copyOf(packedValue, packedValue.length);\n        } else if (StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0) > 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue) + \" for docID=\" + docID + \" dim=0\" + \" sorts before last value=\" + new BytesRef(lastPackedValue));\n        } else {\n          System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      if (docID < 0 || docID >= maxDoc) {\n        throw new RuntimeException(\"docID=\" + docID + \" is out of bounds of 0..\" + maxDoc);\n      }\n      for(int dim=0;dim<numDims;dim++) {\n        if (StringHelper.compare(bytesPerDim, cellMinPacked, dim*bytesPerDim, packedValue, dim*bytesPerDim) > 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue, dim*bytesPerDim, bytesPerDim) + \" for docID=\" + docID + \" dim=\" + dim + \" is less than this leaf block's minimum=\" + new BytesRef(cellMinPacked, dim*bytesPerDim, bytesPerDim));\n        }\n        if (StringHelper.compare(bytesPerDim, cellMaxPacked, dim*bytesPerDim, packedValue, dim*bytesPerDim) < 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue, dim*bytesPerDim, bytesPerDim) + \" for docID=\" + docID + \" dim=\" + dim + \" is greater than this leaf block's maximum=\" + new BytesRef(cellMaxPacked, dim*bytesPerDim, bytesPerDim));\n        }\n      }\n\n      if (numDims == 1) {\n        // With only 1D, all values should always be in sorted order\n        if (lastPackedValue == null) {\n          lastPackedValue = Arrays.copyOf(packedValue, packedValue.length);\n        } else if (NumericUtils.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0) > 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue) + \" for docID=\" + docID + \" dim=0\" + \" sorts before last value=\" + new BytesRef(lastPackedValue));\n        } else {\n          System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.VerifyVisitor#visit(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.VerifyVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      if (docID < 0 || docID >= maxDoc) {\n        throw new RuntimeException(\"docID=\" + docID + \" is out of bounds of 0..\" + maxDoc);\n      }\n      for(int dim=0;dim<numDims;dim++) {\n        if (StringHelper.compare(bytesPerDim, cellMinPacked, dim*bytesPerDim, packedValue, dim*bytesPerDim) > 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue, dim*bytesPerDim, bytesPerDim) + \" for docID=\" + docID + \" dim=\" + dim + \" is less than this leaf block's minimum=\" + new BytesRef(cellMinPacked, dim*bytesPerDim, bytesPerDim));\n        }\n        if (StringHelper.compare(bytesPerDim, cellMaxPacked, dim*bytesPerDim, packedValue, dim*bytesPerDim) < 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue, dim*bytesPerDim, bytesPerDim) + \" for docID=\" + docID + \" dim=\" + dim + \" is greater than this leaf block's maximum=\" + new BytesRef(cellMaxPacked, dim*bytesPerDim, bytesPerDim));\n        }\n      }\n\n      if (numDims == 1) {\n        // With only 1D, all values should always be in sorted order\n        if (lastPackedValue == null) {\n          lastPackedValue = Arrays.copyOf(packedValue, packedValue.length);\n        } else if (StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0) > 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue) + \" for docID=\" + docID + \" dim=0\" + \" sorts before last value=\" + new BytesRef(lastPackedValue));\n        } else {\n          System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      if (docID < 0 || docID >= maxDoc) {\n        throw new RuntimeException(\"docID=\" + docID + \" is out of bounds of 0..\" + maxDoc);\n      }\n      for(int dim=0;dim<numDims;dim++) {\n        if (StringHelper.compare(bytesPerDim, cellMinPacked, dim*bytesPerDim, packedValue, dim*bytesPerDim) > 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue, dim*bytesPerDim, bytesPerDim) + \" for docID=\" + docID + \" dim=\" + dim + \" is less than this leaf block's minimum=\" + new BytesRef(cellMinPacked, dim*bytesPerDim, bytesPerDim));\n        }\n        if (StringHelper.compare(bytesPerDim, cellMaxPacked, dim*bytesPerDim, packedValue, dim*bytesPerDim) < 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue, dim*bytesPerDim, bytesPerDim) + \" for docID=\" + docID + \" dim=\" + dim + \" is greater than this leaf block's maximum=\" + new BytesRef(cellMaxPacked, dim*bytesPerDim, bytesPerDim));\n        }\n      }\n\n      if (numDims == 1) {\n        // With only 1D, all values should always be in sorted order\n        if (lastPackedValue == null) {\n          lastPackedValue = Arrays.copyOf(packedValue, packedValue.length);\n        } else if (NumericUtils.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0) > 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue) + \" for docID=\" + docID + \" dim=0\" + \" sorts before last value=\" + new BytesRef(lastPackedValue));\n        } else {\n          System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.VerifyVisitor#visit(int,byte[]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      if (docID < 0 || docID >= maxDoc) {\n        throw new RuntimeException(\"docID=\" + docID + \" is out of bounds of 0..\" + maxDoc);\n      }\n      for(int dim=0;dim<numDims;dim++) {\n        if (StringHelper.compare(bytesPerDim, cellMinPacked, dim*bytesPerDim, packedValue, dim*bytesPerDim) > 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue, dim*bytesPerDim, bytesPerDim) + \" for docID=\" + docID + \" dim=\" + dim + \" is less than this leaf block's minimum=\" + new BytesRef(cellMinPacked, dim*bytesPerDim, bytesPerDim));\n        }\n        if (StringHelper.compare(bytesPerDim, cellMaxPacked, dim*bytesPerDim, packedValue, dim*bytesPerDim) < 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue, dim*bytesPerDim, bytesPerDim) + \" for docID=\" + docID + \" dim=\" + dim + \" is greater than this leaf block's maximum=\" + new BytesRef(cellMaxPacked, dim*bytesPerDim, bytesPerDim));\n        }\n      }\n\n      if (numDims == 1) {\n        // With only 1D, all values should always be in sorted order\n        if (lastPackedValue == null) {\n          lastPackedValue = Arrays.copyOf(packedValue, packedValue.length);\n        } else if (StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0) > 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue) + \" for docID=\" + docID + \" dim=0\" + \" sorts before last value=\" + new BytesRef(lastPackedValue));\n        } else {\n          System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader.VerifyVisitor#visit(int,byte[]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      if (docID < 0 || docID >= maxDoc) {\n        throw new RuntimeException(\"docID=\" + docID + \" is out of bounds of 0..\" + maxDoc);\n      }\n      for(int dim=0;dim<numDims;dim++) {\n        if (StringHelper.compare(bytesPerDim, cellMinPacked, dim*bytesPerDim, packedValue, dim*bytesPerDim) > 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue, dim*bytesPerDim, bytesPerDim) + \" for docID=\" + docID + \" dim=\" + dim + \" is less than this leaf block's minimum=\" + new BytesRef(cellMinPacked, dim*bytesPerDim, bytesPerDim));\n        }\n        if (StringHelper.compare(bytesPerDim, cellMaxPacked, dim*bytesPerDim, packedValue, dim*bytesPerDim) < 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue, dim*bytesPerDim, bytesPerDim) + \" for docID=\" + docID + \" dim=\" + dim + \" is greater than this leaf block's maximum=\" + new BytesRef(cellMaxPacked, dim*bytesPerDim, bytesPerDim));\n        }\n      }\n\n      if (numDims == 1) {\n        // With only 1D, all values should always be in sorted order\n        if (lastPackedValue == null) {\n          lastPackedValue = Arrays.copyOf(packedValue, packedValue.length);\n        } else if (StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0) > 0) {\n          throw new RuntimeException(\"value=\" + new BytesRef(packedValue) + \" for docID=\" + docID + \" dim=0\" + \" sorts before last value=\" + new BytesRef(lastPackedValue));\n        } else {\n          System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"12bfdc932307442b651432f92845942f9041ace8":["770342641f7b505eaa8dccdc666158bff2419109"],"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["770342641f7b505eaa8dccdc666158bff2419109","12bfdc932307442b651432f92845942f9041ace8"],"770342641f7b505eaa8dccdc666158bff2419109":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"12bfdc932307442b651432f92845942f9041ace8":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"770342641f7b505eaa8dccdc666158bff2419109":["12bfdc932307442b651432f92845942f9041ace8","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}