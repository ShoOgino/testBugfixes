{"path":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#withReader(Collection[Map[String,String[]]],IOUtils.IOConsumer[DirectoryReader]).mjava","commits":[{"id":"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c","date":1597407672,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#withReader(Collection[Map[String,String[]]],IOUtils.IOConsumer[DirectoryReader]).mjava","pathOld":"/dev/null","sourceNew":"  private void withReader(\n      Collection<Map<String, String[]>> docs, IOUtils.IOConsumer<DirectoryReader> block)\n      throws IOException {\n    IndexWriterConfig config = new IndexWriterConfig(analyzer);\n\n    try (Directory directory = new ByteBuffersDirectory()) {\n      IndexWriter iw = new IndexWriter(directory, config);\n\n      int seq = 0;\n      for (Map<String, String[]> fields : docs) {\n        Document doc = new Document();\n        doc.add(new StringField(FLD_ID, Integer.toString(seq++), Field.Store.YES));\n        for (Map.Entry<String, String[]> field : fields.entrySet()) {\n          for (String value : field.getValue()) {\n            doc.add(toField(field.getKey(), value));\n          }\n        }\n        iw.addDocument(doc);\n        if (RandomizedTest.randomBoolean()) {\n          iw.commit();\n        }\n      }\n      iw.flush();\n\n      try (DirectoryReader reader = DirectoryReader.open(iw)) {\n        block.accept(reader);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0","date":1599736633,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/IndexBuilder#build(Analyzer,IOUtils.IOConsumer[DirectoryReader]).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#withReader(Collection[Map[String,String[]]],IOUtils.IOConsumer[DirectoryReader]).mjava","sourceNew":"  public IndexBuilder build(Analyzer analyzer, IOUtils.IOConsumer<DirectoryReader> block) throws IOException {\n    IndexWriterConfig config = new IndexWriterConfig(analyzer);\n    config.setIndexSort(new Sort(new SortField(FLD_SORT_ORDER, SortField.Type.LONG)));\n    try (Directory directory = new ByteBuffersDirectory()) {\n      IndexWriter iw = new IndexWriter(directory, config);\n      for (Document doc : documents) {\n        iw.addDocument(doc);\n      }\n      if (RandomizedTest.randomBoolean()) {\n        iw.commit();\n      }\n      iw.flush();\n\n      try (DirectoryReader reader = DirectoryReader.open(iw)) {\n        block.accept(reader);\n      }\n    }\n    return this;\n  }\n\n","sourceOld":"  private void withReader(\n      Collection<Map<String, String[]>> docs, IOUtils.IOConsumer<DirectoryReader> block)\n      throws IOException {\n    IndexWriterConfig config = new IndexWriterConfig(analyzer);\n\n    try (Directory directory = new ByteBuffersDirectory()) {\n      IndexWriter iw = new IndexWriter(directory, config);\n\n      int seq = 0;\n      for (Map<String, String[]> fields : docs) {\n        Document doc = new Document();\n        doc.add(new StringField(FLD_ID, Integer.toString(seq++), Field.Store.YES));\n        for (Map.Entry<String, String[]> field : fields.entrySet()) {\n          for (String value : field.getValue()) {\n            doc.add(toField(field.getKey(), value));\n          }\n        }\n        iw.addDocument(doc);\n        if (RandomizedTest.randomBoolean()) {\n          iw.commit();\n        }\n      }\n      iw.flush();\n\n      try (DirectoryReader reader = DirectoryReader.open(iw)) {\n        block.accept(reader);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["930e5c340e08514a7f57a54cf65e2f8f1f90c8f0"]},"commit2Childs":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["930e5c340e08514a7f57a54cf65e2f8f1f90c8f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}