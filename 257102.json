{"path":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformerHierarchy#cleanSolrDocumentFields(SolrDocument).mjava","commits":[{"id":"44e1477dd67ee1fbc72871f23fb51369bb42cadd","date":1535551329,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformerHierarchy#cleanSolrDocumentFields(SolrDocument).mjava","pathOld":"/dev/null","sourceNew":"  private static void cleanSolrDocumentFields(SolrDocument input) {\n    for(String fieldName: fieldsToRemove) {\n      input.removeFields(fieldName);\n    }\n    for(Map.Entry<String, Object> field: input) {\n      Object val = field.getValue();\n      if(val instanceof Collection) {\n        Object newVals = ((Collection) val).stream().map((item) -> (cleanIndexableField(item)))\n            .collect(Collectors.toList());\n        input.setField(field.getKey(), newVals);\n        continue;\n      }\n      input.setField(field.getKey(), cleanIndexableField(field.getValue()));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformerHierarchy#cleanSolrDocumentFields(SolrDocument).mjava","pathOld":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformerHierarchy#cleanSolrDocumentFields(SolrDocument).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private static void cleanSolrDocumentFields(SolrDocument input) {\n    for(String fieldName: fieldsToRemove) {\n      input.removeFields(fieldName);\n    }\n    for(Map.Entry<String, Object> field: input) {\n      Object val = field.getValue();\n      if(val instanceof Collection) {\n        Object newVals = ((Collection) val).stream().map((item) -> (cleanIndexableField(item)))\n            .collect(Collectors.toList());\n        input.setField(field.getKey(), newVals);\n        continue;\n      }\n      input.setField(field.getKey(), cleanIndexableField(field.getValue()));\n    }\n  }\n\n","sourceOld":"  private static void cleanSolrDocumentFields(SolrDocument input) {\n    for(String fieldName: fieldsToRemove) {\n      input.removeFields(fieldName);\n    }\n    for(Map.Entry<String, Object> field: input) {\n      Object val = field.getValue();\n      if(val instanceof Collection) {\n        Object newVals = ((Collection) val).stream().map((item) -> (cleanIndexableField(item)))\n            .collect(Collectors.toList());\n        input.setField(field.getKey(), newVals);\n        continue;\n      }\n      input.setField(field.getKey(), cleanIndexableField(field.getValue()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44e1477dd67ee1fbc72871f23fb51369bb42cadd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["44e1477dd67ee1fbc72871f23fb51369bb42cadd"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44e1477dd67ee1fbc72871f23fb51369bb42cadd"],"44e1477dd67ee1fbc72871f23fb51369bb42cadd":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}