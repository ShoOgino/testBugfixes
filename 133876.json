{"path":"lucene/src/java/org/apache/lucene/util/StringHelper#stringDifference(String,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/StringHelper#stringDifference(String,String).mjava","pathOld":"src/java/org/apache/lucene/util/StringHelper#stringDifference(String,String).mjava","sourceNew":"  /**\n   * Compares two strings, character by character, and returns the\n   * first position where the two strings differ from one another.\n   *\n   * @param s1 The first string to compare\n   * @param s2 The second string to compare\n   * @return The first position where the two strings differ.\n   */\n  public static final int stringDifference(String s1, String s2) {\n    int len1 = s1.length();\n    int len2 = s2.length();\n    int len = len1 < len2 ? len1 : len2;\n    for (int i = 0; i < len; i++) {\n      if (s1.charAt(i) != s2.charAt(i)) {\n\t      return i;\n      }\n    }\n    return len;\n  }\n\n","sourceOld":"  /**\n   * Compares two strings, character by character, and returns the\n   * first position where the two strings differ from one another.\n   *\n   * @param s1 The first string to compare\n   * @param s2 The second string to compare\n   * @return The first position where the two strings differ.\n   */\n  public static final int stringDifference(String s1, String s2) {\n    int len1 = s1.length();\n    int len2 = s2.length();\n    int len = len1 < len2 ? len1 : len2;\n    for (int i = 0; i < len; i++) {\n      if (s1.charAt(i) != s2.charAt(i)) {\n\t      return i;\n      }\n    }\n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"576d7e96cdb53d49e0885dd318b855d2426aa46b","date":1287469699,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/StringHelper#stringDifference(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/StringHelper#stringDifference(String,String).mjava","sourceNew":"  /**\n   * Compares two strings, character by character, and returns the\n   * first position where the two strings differ from one another.\n   *\n   * @param s1 The first string to compare\n   * @param s2 The second string to compare\n   * @return The first position where the two strings differ.\n   * \n   * @deprecated This method cannot handle supplementary characters.\n   */\n  @Deprecated\n  public static final int stringDifference(String s1, String s2) {\n    int len1 = s1.length();\n    int len2 = s2.length();\n    int len = len1 < len2 ? len1 : len2;\n    for (int i = 0; i < len; i++) {\n      if (s1.charAt(i) != s2.charAt(i)) {\n\t      return i;\n      }\n    }\n    return len;\n  }\n\n","sourceOld":"  /**\n   * Compares two strings, character by character, and returns the\n   * first position where the two strings differ from one another.\n   *\n   * @param s1 The first string to compare\n   * @param s2 The second string to compare\n   * @return The first position where the two strings differ.\n   */\n  public static final int stringDifference(String s1, String s2) {\n    int len1 = s1.length();\n    int len2 = s2.length();\n    int len = len1 < len2 ? len1 : len2;\n    for (int i = 0; i < len; i++) {\n      if (s1.charAt(i) != s2.charAt(i)) {\n\t      return i;\n      }\n    }\n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/StringHelper#stringDifference(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/StringHelper#stringDifference(String,String).mjava","sourceNew":"  /**\n   * Compares two strings, character by character, and returns the\n   * first position where the two strings differ from one another.\n   *\n   * @param s1 The first string to compare\n   * @param s2 The second string to compare\n   * @return The first position where the two strings differ.\n   * \n   * @deprecated This method cannot handle supplementary characters.\n   */\n  @Deprecated\n  public static final int stringDifference(String s1, String s2) {\n    int len1 = s1.length();\n    int len2 = s2.length();\n    int len = len1 < len2 ? len1 : len2;\n    for (int i = 0; i < len; i++) {\n      if (s1.charAt(i) != s2.charAt(i)) {\n\t      return i;\n      }\n    }\n    return len;\n  }\n\n","sourceOld":"  /**\n   * Compares two strings, character by character, and returns the\n   * first position where the two strings differ from one another.\n   *\n   * @param s1 The first string to compare\n   * @param s2 The second string to compare\n   * @return The first position where the two strings differ.\n   */\n  public static final int stringDifference(String s1, String s2) {\n    int len1 = s1.length();\n    int len2 = s2.length();\n    int len = len1 < len2 ? len1 : len2;\n    for (int i = 0; i < len; i++) {\n      if (s1.charAt(i) != s2.charAt(i)) {\n\t      return i;\n      }\n    }\n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/StringHelper#stringDifference(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Compares two strings, character by character, and returns the\n   * first position where the two strings differ from one another.\n   *\n   * @param s1 The first string to compare\n   * @param s2 The second string to compare\n   * @return The first position where the two strings differ.\n   * \n   * @deprecated This method cannot handle supplementary characters.\n   */\n  @Deprecated\n  public static final int stringDifference(String s1, String s2) {\n    int len1 = s1.length();\n    int len2 = s2.length();\n    int len = len1 < len2 ? len1 : len2;\n    for (int i = 0; i < len; i++) {\n      if (s1.charAt(i) != s2.charAt(i)) {\n\t      return i;\n      }\n    }\n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/StringHelper#stringDifference(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Compares two strings, character by character, and returns the\n   * first position where the two strings differ from one another.\n   *\n   * @param s1 The first string to compare\n   * @param s2 The second string to compare\n   * @return The first position where the two strings differ.\n   * \n   * @deprecated This method cannot handle supplementary characters.\n   */\n  @Deprecated\n  public static final int stringDifference(String s1, String s2) {\n    int len1 = s1.length();\n    int len2 = s2.length();\n    int len = len1 < len2 ? len1 : len2;\n    for (int i = 0; i < len; i++) {\n      if (s1.charAt(i) != s2.charAt(i)) {\n\t      return i;\n      }\n    }\n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/StringHelper#stringDifference(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Compares two strings, character by character, and returns the\n   * first position where the two strings differ from one another.\n   *\n   * @param s1 The first string to compare\n   * @param s2 The second string to compare\n   * @return The first position where the two strings differ.\n   */\n  public static final int stringDifference(String s1, String s2) {\n    int len1 = s1.length();\n    int len2 = s2.length();\n    int len = len1 < len2 ? len1 : len2;\n    for (int i = 0; i < len; i++) {\n      if (s1.charAt(i) != s2.charAt(i)) {\n\t      return i;\n      }\n    }\n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["9454a6510e2db155fb01faa5c049b06ece95fab9","576d7e96cdb53d49e0885dd318b855d2426aa46b"],"576d7e96cdb53d49e0885dd318b855d2426aa46b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3bb13258feba31ab676502787ab2e1779f129b7a":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["576d7e96cdb53d49e0885dd318b855d2426aa46b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3bb13258feba31ab676502787ab2e1779f129b7a"],"576d7e96cdb53d49e0885dd318b855d2426aa46b":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","576d7e96cdb53d49e0885dd318b855d2426aa46b"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}