{"path":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource#refreshCache(IndexReader).mjava","commits":[{"id":"54e743e1e17729a46f1b978b26d71fbed184132e","date":1351248573,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource#refreshCache(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Refresh the cache for an IndexReader.  The new values are loaded in the background\n   * and then swapped in, so queries against the cache should not block while the reload\n   * is happening.\n   * @param reader the IndexReader whose cache needs refreshing\n   */\n  public void refreshCache(IndexReader reader) {\n    log.info(\"Refreshing FlaxFileFloatSource cache for field {}\", this.field.getName());\n    floatCache.refresh(reader, new Entry(this));\n    log.info(\"FlaxFileFloatSource cache for field {} reloaded\", this.field.getName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource#refreshCache(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Refresh the cache for an IndexReader.  The new values are loaded in the background\n   * and then swapped in, so queries against the cache should not block while the reload\n   * is happening.\n   * @param reader the IndexReader whose cache needs refreshing\n   */\n  public void refreshCache(IndexReader reader) {\n    log.info(\"Refreshing FlaxFileFloatSource cache for field {}\", this.field.getName());\n    floatCache.refresh(reader, new Entry(this));\n    log.info(\"FlaxFileFloatSource cache for field {} reloaded\", this.field.getName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource#refreshCache(IndexReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource#refreshCache(IndexReader).mjava","sourceNew":"  /**\n   * Refresh the cache for an IndexReader.  The new values are loaded in the background\n   * and then swapped in, so queries against the cache should not block while the reload\n   * is happening.\n   * @param reader the IndexReader whose cache needs refreshing\n   */\n  public void refreshCache(IndexReader reader) {\n    log.info(\"Refreshing FlaxFileFloatSource cache for field {}\", this.field.getName());\n    floatCache.refresh(reader, new Entry(this));\n    log.info(\"FlaxFileFloatSource cache for field {} reloaded\", this.field.getName());\n  }\n\n","sourceOld":"  /**\n   * Refresh the cache for an IndexReader.  The new values are loaded in the background\n   * and then swapped in, so queries against the cache should not block while the reload\n   * is happening.\n   * @param reader the IndexReader whose cache needs refreshing\n   */\n  public void refreshCache(IndexReader reader) {\n    log.info(\"Refreshing FlaxFileFloatSource cache for field {}\", this.field.getName());\n    floatCache.refresh(reader, new Entry(this));\n    log.info(\"FlaxFileFloatSource cache for field {} reloaded\", this.field.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource#refreshCache(IndexReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource#refreshCache(IndexReader).mjava","sourceNew":"  /**\n   * Refresh the cache for an IndexReader.  The new values are loaded in the background\n   * and then swapped in, so queries against the cache should not block while the reload\n   * is happening.\n   * @param reader the IndexReader whose cache needs refreshing\n   */\n  public void refreshCache(IndexReader reader) {\n    log.info(\"Refreshing FlaxFileFloatSource cache for field {}\", this.field.getName());\n    floatCache.refresh(reader, new Entry(this));\n    log.info(\"FlaxFileFloatSource cache for field {} reloaded\", this.field.getName());\n  }\n\n","sourceOld":"  /**\n   * Refresh the cache for an IndexReader.  The new values are loaded in the background\n   * and then swapped in, so queries against the cache should not block while the reload\n   * is happening.\n   * @param reader the IndexReader whose cache needs refreshing\n   */\n  public void refreshCache(IndexReader reader) {\n    log.info(\"Refreshing FlaxFileFloatSource cache for field {}\", this.field.getName());\n    floatCache.refresh(reader, new Entry(this));\n    log.info(\"FlaxFileFloatSource cache for field {} reloaded\", this.field.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"503e0cb48dd0ad019c3d0d0761c346ef175401b1","date":1415896515,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource#refreshCache(IndexReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource#refreshCache(IndexReader).mjava","sourceNew":"  /**\n   * Refresh the cache for an IndexReader.  The new values are loaded in the background\n   * and then swapped in, so queries against the cache should not block while the reload\n   * is happening.\n   * @param reader the IndexReader whose cache needs refreshing\n   */\n  public void refreshCache(IndexReader reader) {\n    log.info(\"Refreshing FileFloatSource cache for field {}\", this.field.getName());\n    floatCache.refresh(reader, new Entry(this));\n    log.info(\"FileFloatSource cache for field {} reloaded\", this.field.getName());\n  }\n\n","sourceOld":"  /**\n   * Refresh the cache for an IndexReader.  The new values are loaded in the background\n   * and then swapped in, so queries against the cache should not block while the reload\n   * is happening.\n   * @param reader the IndexReader whose cache needs refreshing\n   */\n  public void refreshCache(IndexReader reader) {\n    log.info(\"Refreshing FlaxFileFloatSource cache for field {}\", this.field.getName());\n    floatCache.refresh(reader, new Entry(this));\n    log.info(\"FlaxFileFloatSource cache for field {} reloaded\", this.field.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource#refreshCache(IndexReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource#refreshCache(IndexReader).mjava","sourceNew":"  /**\n   * Refresh the cache for an IndexReader.  The new values are loaded in the background\n   * and then swapped in, so queries against the cache should not block while the reload\n   * is happening.\n   * @param reader the IndexReader whose cache needs refreshing\n   */\n  public void refreshCache(IndexReader reader) {\n    if (log.isInfoEnabled()) {\n      log.info(\"Refreshing FileFloatSource cache for field {}\", this.field.getName());\n    }\n    floatCache.refresh(reader, new Entry(this));\n    if (log.isInfoEnabled()) {\n      log.info(\"FileFloatSource cache for field {} reloaded\", this.field.getName());\n    }\n  }\n\n","sourceOld":"  /**\n   * Refresh the cache for an IndexReader.  The new values are loaded in the background\n   * and then swapped in, so queries against the cache should not block while the reload\n   * is happening.\n   * @param reader the IndexReader whose cache needs refreshing\n   */\n  public void refreshCache(IndexReader reader) {\n    log.info(\"Refreshing FileFloatSource cache for field {}\", this.field.getName());\n    floatCache.refresh(reader, new Entry(this));\n    log.info(\"FileFloatSource cache for field {} reloaded\", this.field.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["503e0cb48dd0ad019c3d0d0761c346ef175401b1"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["54e743e1e17729a46f1b978b26d71fbed184132e","19275ba31e621f6da1b83bf13af75233876fd3d4"],"54e743e1e17729a46f1b978b26d71fbed184132e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"503e0cb48dd0ad019c3d0d0761c346ef175401b1":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["54e743e1e17729a46f1b978b26d71fbed184132e"],"f2126b84bd093fa3d921582a109a0ee578c28126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","54e743e1e17729a46f1b978b26d71fbed184132e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"54e743e1e17729a46f1b978b26d71fbed184132e":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4","f2126b84bd093fa3d921582a109a0ee578c28126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54e743e1e17729a46f1b978b26d71fbed184132e","f2126b84bd093fa3d921582a109a0ee578c28126"],"503e0cb48dd0ad019c3d0d0761c346ef175401b1":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","503e0cb48dd0ad019c3d0d0761c346ef175401b1"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}