{"path":"src/test/org/apache/solr/core/TestConfig#testTermIndexInterval().mjava","commits":[{"id":"aacbd58e1cc0b6a0cd2e2b615e9775fe114a93d5","date":1252758462,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/core/TestConfig#testTermIndexInterval().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermIndexInterval() throws Exception {\r\n    class ExposeWriterHandler extends DirectUpdateHandler2 {\r\n      public ExposeWriterHandler() throws IOException {\r\n        super(h.getCore());\r\n      }\r\n\r\n      public IndexWriter getWriter() throws IOException {\r\n        forceOpenWriter();\r\n        return writer;\r\n      }\r\n    }\r\n    \r\n    IndexWriter writer = new ExposeWriterHandler().getWriter();\r\n    int interval = writer.getTermIndexInterval();\r\n    assertEquals(256, interval);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dc524639edfdfa4edfb67ae889c2b6029f9314c","date":1255358511,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/core/TestConfig#testTermIndexInterval().mjava","pathOld":"src/test/org/apache/solr/core/TestConfig#testTermIndexInterval().mjava","sourceNew":"  public void testTermIndexInterval() throws Exception {\n    class ExposeWriterHandler extends DirectUpdateHandler2 {\n      public ExposeWriterHandler() throws IOException {\n        super(h.getCore());\n      }\n\n      public IndexWriter getWriter() throws IOException {\n        forceOpenWriter();\n        return writer;\n      }\n    }\n    \n    IndexWriter writer = new ExposeWriterHandler().getWriter();\n    int interval = writer.getTermIndexInterval();\n    assertEquals(256, interval);\n  }\n\n","sourceOld":"  public void testTermIndexInterval() throws Exception {\r\n    class ExposeWriterHandler extends DirectUpdateHandler2 {\r\n      public ExposeWriterHandler() throws IOException {\r\n        super(h.getCore());\r\n      }\r\n\r\n      public IndexWriter getWriter() throws IOException {\r\n        forceOpenWriter();\r\n        return writer;\r\n      }\r\n    }\r\n    \r\n    IndexWriter writer = new ExposeWriterHandler().getWriter();\r\n    int interval = writer.getTermIndexInterval();\r\n    assertEquals(256, interval);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestConfig#testTermIndexInterval().mjava","pathOld":"src/test/org/apache/solr/core/TestConfig#testTermIndexInterval().mjava","sourceNew":"  public void testTermIndexInterval() throws Exception {\n    class ExposeWriterHandler extends DirectUpdateHandler2 {\n      public ExposeWriterHandler() throws IOException {\n        super(h.getCore());\n      }\n\n      public IndexWriter getWriter() throws IOException {\n        forceOpenWriter();\n        return writer;\n      }\n    }\n    \n    IndexWriter writer = new ExposeWriterHandler().getWriter();\n    int interval = writer.getTermIndexInterval();\n    assertEquals(256, interval);\n  }\n\n","sourceOld":"  public void testTermIndexInterval() throws Exception {\n    class ExposeWriterHandler extends DirectUpdateHandler2 {\n      public ExposeWriterHandler() throws IOException {\n        super(h.getCore());\n      }\n\n      public IndexWriter getWriter() throws IOException {\n        forceOpenWriter();\n        return writer;\n      }\n    }\n    \n    IndexWriter writer = new ExposeWriterHandler().getWriter();\n    int interval = writer.getTermIndexInterval();\n    assertEquals(256, interval);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5dc524639edfdfa4edfb67ae889c2b6029f9314c":["aacbd58e1cc0b6a0cd2e2b615e9775fe114a93d5"],"ad94625fb8d088209f46650c8097196fec67f00c":["5dc524639edfdfa4edfb67ae889c2b6029f9314c"],"aacbd58e1cc0b6a0cd2e2b615e9775fe114a93d5":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["aacbd58e1cc0b6a0cd2e2b615e9775fe114a93d5"],"5dc524639edfdfa4edfb67ae889c2b6029f9314c":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"aacbd58e1cc0b6a0cd2e2b615e9775fe114a93d5":["5dc524639edfdfa4edfb67ae889c2b6029f9314c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}