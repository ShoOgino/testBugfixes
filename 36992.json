{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","sourceNew":"  private void assertCorrectResults(FacetsCollector facetsCollector)\n  throws IOException, IllegalAccessException, InstantiationException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode\n    .getSubResults();\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","sourceOld":"  private void assertCorrectResults(FacetsCollector facetsCollector)\n  throws IOException, IllegalAccessException, InstantiationException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode\n    .getSubResults();\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","sourceNew":"  private void assertCorrectResults(FacetsCollector facetsCollector)\n  throws IOException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode\n    .getSubResults();\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","sourceOld":"  private void assertCorrectResults(FacetsCollector facetsCollector)\n  throws IOException, IllegalAccessException, InstantiationException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode\n    .getSubResults();\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","sourceNew":"  private void assertCorrectResults(FacetsCollector facetsCollector)\n  throws IOException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode\n    .getSubResults();\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","sourceOld":"  private void assertCorrectResults(FacetsCollector facetsCollector)\n  throws IOException, IllegalAccessException, InstantiationException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode\n    .getSubResults();\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","sourceNew":"  private void assertCorrectResults(FacetsCollector facetsCollector) throws IOException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode.getSubResults();\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","sourceOld":"  private void assertCorrectResults(FacetsCollector facetsCollector)\n  throws IOException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode\n    .getSubResults();\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","sourceNew":"  private void assertCorrectResults(FacetsCollector facetsCollector) throws IOException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode.getSubResults();\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","sourceOld":"  private void assertCorrectResults(FacetsCollector facetsCollector)\n  throws IOException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode\n    .getSubResults();\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","sourceNew":"  private void assertCorrectResults(FacetsCollector facetsCollector) throws IOException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode.subResults;\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","sourceOld":"  private void assertCorrectResults(FacetsCollector facetsCollector) throws IOException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode.getSubResults();\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","sourceNew":"  private void assertCorrectResults(FacetsCollector facetsCollector) throws IOException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode.subResults;\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","sourceOld":"  private void assertCorrectResults(FacetsCollector facetsCollector) throws IOException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode.getSubResults();\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.getSubResults();\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"239f79ed06f0979cfe1911ec5fba32b94fda43c1","date":1359553898,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","sourceNew":"  private void assertCorrectResults(FacetsCollector facetsCollector) throws IOException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode.subResults;\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","sourceOld":"  private void assertCorrectResults(FacetsCollector facetsCollector) throws IOException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode.subResults;\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","sourceNew":"  private void assertCorrectResults(FacetsCollector facetsCollector) throws IOException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode.subResults;\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","sourceOld":"  private void assertCorrectResults(FacetsCollector facetsCollector) throws IOException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode.subResults;\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band\", 5.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Author\", 3.0);\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(resNode, \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f01616d06510fc630b6ef0ec324bdebc2fc49b3c","date":1385331328,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","sourceNew":null,"sourceOld":"  private void assertCorrectResults(FacetsCollector facetsCollector) throws IOException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode.subResults;\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestMultipleCategoryLists#assertCorrectResults(FacetsCollector).mjava","sourceNew":null,"sourceOld":"  private void assertCorrectResults(FacetsCollector facetsCollector) throws IOException {\n    List<FacetResult> res = facetsCollector.getFacetResults();\n\n    FacetResult results = res.get(0);\n    FacetResultNode resNode = results.getFacetResultNode();\n    Iterable<? extends FacetResultNode> subResults = resNode.subResults;\n    Iterator<? extends FacetResultNode> subIter = subResults.iterator();\n\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n\n    results = res.get(1);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(subIter.next(), \"Band/Rock & Pop\", 4.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk/The Ramones\", 1.0);\n    checkResult(subIter.next(), \"Band/Punk\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n\n    results = res.get(2);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(subIter.next(), \"Author/Kurt Vonnegut\", 1.0);\n    checkResult(subIter.next(), \"Author/Stephen King\", 1.0);\n    checkResult(subIter.next(), \"Author/Mark Twain\", 1.0);\n\n    results = res.get(3);\n    resNode = results.getFacetResultNode();\n    subResults = resNode.subResults;\n    subIter = subResults.iterator();\n\n    checkResult(subIter.next(), \"Band/Rock & Pop/Dave Matthews Band\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/REM\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/U2\", 1.0);\n    checkResult(subIter.next(), \"Band/Rock & Pop/The Beatles\", 1.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4015cd39dff8d4dec562d909f9766debac53aa6":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"07155cdd910937cdf6877e48884d5782845c8b8b":["c4015cd39dff8d4dec562d909f9766debac53aa6","811cdb4a80352766eb0c762e48972707a924e5cd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61d5f95d14e5b9b046998c51e16709a398c15226":["07155cdd910937cdf6877e48884d5782845c8b8b","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["811cdb4a80352766eb0c762e48972707a924e5cd"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["239f79ed06f0979cfe1911ec5fba32b94fda43c1","f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"811cdb4a80352766eb0c762e48972707a924e5cd":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"]},"commit2Childs":{"c4015cd39dff8d4dec562d909f9766debac53aa6":["07155cdd910937cdf6877e48884d5782845c8b8b"],"07155cdd910937cdf6877e48884d5782845c8b8b":["61d5f95d14e5b9b046998c51e16709a398c15226"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["61d5f95d14e5b9b046998c51e16709a398c15226","3cc728b07df73b197e6d940d27f9b08b63918f13","f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c4015cd39dff8d4dec562d909f9766debac53aa6","fe33227f6805edab2036cbb80645cc4e2d1fa424","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","811cdb4a80352766eb0c762e48972707a924e5cd"],"811cdb4a80352766eb0c762e48972707a924e5cd":["07155cdd910937cdf6877e48884d5782845c8b8b","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}