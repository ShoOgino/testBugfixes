{"path":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#cloneDocument(Document).mjava","commits":[{"id":"97e30c53fd81463c6ccd52402c91a6548cf42acb","date":1309296018,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#cloneDocument(Document).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTThreads#cloneDoc(Document).mjava","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(Fieldable f : doc1.getFields()) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(),\n                               field1.stringValue(),\n                               field1.isStored() ? Field.Store.YES : Field.Store.NO,\n                               field1.isIndexed() ? (field1.isTokenized() ? Field.Index.ANALYZED : Field.Index.NOT_ANALYZED) : Field.Index.NO);\n      field2.setOmitNorms(field1.getOmitNorms());\n      field2.setOmitTermFreqAndPositions(field1.getOmitTermFreqAndPositions());\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":"  // TODO: is there a pre-existing way to do this!!!\n  private Document cloneDoc(Document doc1) {\n    final Document doc2 = new Document();\n    for(Fieldable f : doc1.getFields()) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(),\n                               field1.stringValue(),\n                               field1.isStored() ? Field.Store.YES : Field.Store.NO,\n                               field1.isIndexed() ? (field1.isTokenized() ? Field.Index.ANALYZED : Field.Index.NOT_ANALYZED) : Field.Index.NO);\n      if (field1.getOmitNorms()) {\n        field2.setOmitNorms(true);\n      }\n      if (field1.getOmitTermFreqAndPositions()) {\n        field2.setOmitTermFreqAndPositions(true);\n      }\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#cloneDocument(Document).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(Fieldable f : doc1.getFields()) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(),\n                               field1.stringValue(),\n                               field1.isStored() ? Field.Store.YES : Field.Store.NO,\n                               field1.isIndexed() ? (field1.isTokenized() ? Field.Index.ANALYZED : Field.Index.NOT_ANALYZED) : Field.Index.NO);\n      field2.setOmitNorms(field1.getOmitNorms());\n      field2.setOmitTermFreqAndPositions(field1.getOmitTermFreqAndPositions());\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#cloneDocument(Document).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(Fieldable f : doc1.getFields()) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(),\n                               field1.stringValue(),\n                               field1.isStored() ? Field.Store.YES : Field.Store.NO,\n                               field1.isIndexed() ? (field1.isTokenized() ? Field.Index.ANALYZED : Field.Index.NOT_ANALYZED) : Field.Index.NO);\n      field2.setOmitNorms(field1.getOmitNorms());\n      field2.setOmitTermFreqAndPositions(field1.getOmitTermFreqAndPositions());\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#cloneDocument(Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#cloneDocument(Document).mjava","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(Fieldable f : doc1.getFields()) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(),\n                               field1.stringValue(),\n                               field1.isStored() ? Field.Store.YES : Field.Store.NO,\n                               field1.isIndexed() ? (field1.isTokenized() ? Field.Index.ANALYZED : Field.Index.NOT_ANALYZED) : Field.Index.NO);\n      field2.setOmitNorms(field1.getOmitNorms());\n      field2.setIndexOptions(field1.getIndexOptions());\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(Fieldable f : doc1.getFields()) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(),\n                               field1.stringValue(),\n                               field1.isStored() ? Field.Store.YES : Field.Store.NO,\n                               field1.isIndexed() ? (field1.isTokenized() ? Field.Index.ANALYZED : Field.Index.NOT_ANALYZED) : Field.Index.NO);\n      field2.setOmitNorms(field1.getOmitNorms());\n      field2.setOmitTermFreqAndPositions(field1.getOmitTermFreqAndPositions());\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#cloneDocument(Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#cloneDocument(Document).mjava","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(),\n                               field1.getFieldType(),\n                               field1.stringValue()\n                               );\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(Fieldable f : doc1.getFields()) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(),\n                               field1.stringValue(),\n                               field1.isStored() ? Field.Store.YES : Field.Store.NO,\n                               field1.isIndexed() ? (field1.isTokenized() ? Field.Index.ANALYZED : Field.Index.NOT_ANALYZED) : Field.Index.NO);\n      field2.setOmitNorms(field1.getOmitNorms());\n      field2.setIndexOptions(field1.getIndexOptions());\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6eb141f80638abdb6ffaa5149877f36ea39b6ad5","date":1315714072,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#cloneDocument(Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#cloneDocument(Document).mjava","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(),\n                               field1.fieldType(),\n                               field1.stringValue()\n                               );\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(),\n                               field1.getFieldType(),\n                               field1.stringValue()\n                               );\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#cloneDocument(Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#cloneDocument(Document).mjava","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(),\n                               field1.fieldType(),\n                               field1.stringValue()\n                               );\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil#cloneDocument(Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#cloneDocument(Document).mjava","sourceNew":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","sourceOld":"  // TODO: is there a pre-existing way to do this!!!\n  public static Document cloneDocument(Document doc1) {\n    final Document doc2 = new Document();\n    for(IndexableField f : doc1) {\n      Field field1 = (Field) f;\n      \n      Field field2 = new Field(field1.name(), field1.stringValue(), field1.fieldType());\n      doc2.add(field2);\n    }\n\n    return doc2;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["97e30c53fd81463c6ccd52402c91a6548cf42acb"],"7b91922b55d15444d554721b352861d028eb8278":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"97e30c53fd81463c6ccd52402c91a6548cf42acb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"97e30c53fd81463c6ccd52402c91a6548cf42acb":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97e30c53fd81463c6ccd52402c91a6548cf42acb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}