{"path":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","sourceNew":"  public static void verifyEquals(Document d1, Document d2) {\n    List<Fieldable> ff1 = d1.getFields();\n    List<Fieldable> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    assertEquals(ff1 + \" : \" + ff2, ff1.size(), ff2.size());\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = ff1.get(i);\n      Fieldable f2 = ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        assertEquals(ff1 + \" : \" + ff2, s1,s2);\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyEquals(Document d1, Document d2) {\n    List<Fieldable> ff1 = d1.getFields();\n    List<Fieldable> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    assertEquals(ff1 + \" : \" + ff2, ff1.size(), ff2.size());\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = ff1.get(i);\n      Fieldable f2 = ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        assertEquals(ff1 + \" : \" + ff2, s1,s2);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","sourceNew":"  public static void verifyEquals(Document d1, Document d2) {\n    List<Fieldable> ff1 = d1.getFields();\n    List<Fieldable> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    assertEquals(ff1 + \" : \" + ff2, ff1.size(), ff2.size());\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = ff1.get(i);\n      Fieldable f2 = ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        assertEquals(ff1 + \" : \" + ff2, s1,s2);\n        }\n      }\n    }\n\n","sourceOld":"  public static void verifyEquals(Document d1, Document d2) {\n    List<Fieldable> ff1 = d1.getFields();\n    List<Fieldable> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    assertEquals(ff1 + \" : \" + ff2, ff1.size(), ff2.size());\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = ff1.get(i);\n      Fieldable f2 = ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        assertEquals(ff1 + \" : \" + ff2, s1,s2);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","sourceNew":"  public static void verifyEquals(Document d1, Document d2) {\n    List<IndexableField> ff1 = d1.getFields();\n    List<IndexableField> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    assertEquals(ff1 + \" : \" + ff2, ff1.size(), ff2.size());\n\n    for (int i=0; i<ff1.size(); i++) {\n      IndexableField f1 = ff1.get(i);\n      IndexableField f2 = ff2.get(i);\n      if (f1.binaryValue() != null) {\n        assert(f2.binaryValue() != null);\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        assertEquals(ff1 + \" : \" + ff2, s1,s2);\n        }\n      }\n    }\n\n","sourceOld":"  public static void verifyEquals(Document d1, Document d2) {\n    List<Fieldable> ff1 = d1.getFields();\n    List<Fieldable> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    assertEquals(ff1 + \" : \" + ff2, ff1.size(), ff2.size());\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = ff1.get(i);\n      Fieldable f2 = ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        assertEquals(ff1 + \" : \" + ff2, s1,s2);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","sourceNew":"  public static void verifyEquals(Document d1, Document d2) {\n    List<IndexableField> ff1 = d1.getFields();\n    List<IndexableField> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    assertEquals(ff1 + \" : \" + ff2, ff1.size(), ff2.size());\n\n    for (int i=0; i<ff1.size(); i++) {\n      IndexableField f1 = ff1.get(i);\n      IndexableField f2 = ff2.get(i);\n      if (f1.binaryValue() != null) {\n        assert(f2.binaryValue() != null);\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        assertEquals(ff1 + \" : \" + ff2, s1,s2);\n        }\n      }\n    }\n\n","sourceOld":"  public static void verifyEquals(Document d1, Document d2) {\n    List<IndexableField> ff1 = d1.getFields();\n    List<IndexableField> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    assertEquals(ff1 + \" : \" + ff2, ff1.size(), ff2.size());\n\n    for (int i=0; i<ff1.size(); i++) {\n      IndexableField f1 = ff1.get(i);\n      IndexableField f2 = ff2.get(i);\n      if (f1.binaryValue() != null) {\n        assert(f2.binaryValue() != null);\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        assertEquals(ff1 + \" : \" + ff2, s1,s2);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}