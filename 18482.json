{"path":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(newRandom(), TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    Random random = newRandom();\n    MockRAMDirectory dir = newDirectory(random);\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(newRandom(), TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    Random random = newRandom();\n    MockRAMDirectory dir = newDirectory(random);\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    Random random = newRandom();\n    Directory dir = newDirectory(random);\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa\", customType));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa\", customType));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa\", customType));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.optimize();\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    for(int i=0;i<19;i++) {\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", \"aaa\"+i, customType));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.commit();\n    writer.deleteDocuments(new Term(\"field\",\"aaa5\"));\n    writer.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(19, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa\", customType));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["7312a5134c2e28e06b87256e466da72eadd966d9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    for(int i=0;i<19;i++) {\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", \"aaa\"+i, customType));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.commit();\n    writer.deleteDocuments(new Term(\"field\",\"aaa5\"));\n    writer.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(19, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa\", customType));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    for(int i=0;i<19;i++) {\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", \"aaa\"+i, customType));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.commit();\n    writer.deleteDocuments(new Term(\"field\",\"aaa5\"));\n    writer.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(19, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"field\", \"aaa\", customType));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    for(int i=0;i<19;i++) {\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", \"aaa\"+i, customType));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.commit();\n    writer.deleteDocuments(new Term(\"field\",\"aaa5\"));\n    writer.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(19, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer  = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    for(int i=0;i<19;i++) {\n      Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      doc.add(newField(\"field\", \"aaa\"+i, customType));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    writer.commit();\n    writer.deleteDocuments(new Term(\"field\",\"aaa5\"));\n    writer.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(19, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","132903c28af3aa6f67284b78de91c0f0a99488c2"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a3776dccca01c11e7046323cfad46a3b4a471233":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}