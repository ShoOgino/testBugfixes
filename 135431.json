{"path":"lucene/backwards/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#next().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#next().mjava","pathOld":"backwards/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#next().mjava","sourceNew":"    /** Increments the enumeration to the next element.  True if one exists. */\n    @Override\n    public boolean next() throws IOException {\n      // if a current term exists, the actual enum is initialized:\n      // try change to next term, if no such term exists, fall-through\n      if (currentTerm != null) {\n        assert actualEnum != null;\n        if (actualEnum.next()) {\n          currentTerm = actualEnum.term();\n          if (termCompare(currentTerm))\n            return true;\n        }\n      }\n      \n      // if all above fails, we go forward to the next enum,\n      // if one is available\n      currentTerm = null;\n      while (rangeBounds.size() >= 2) {\n        assert rangeBounds.size() % 2 == 0;\n        // close the current enum and read next bounds\n        if (actualEnum != null) {\n          actualEnum.close();\n          actualEnum = null;\n        }\n        final String lowerBound = rangeBounds.removeFirst();\n        this.currentUpperBound = rangeBounds.removeFirst();\n        // create a new enum\n        actualEnum = reader.terms(termTemplate.createTerm(lowerBound));\n        currentTerm = actualEnum.term();\n        if (currentTerm != null && termCompare(currentTerm))\n          return true;\n        // clear the current term for next iteration\n        currentTerm = null;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.size() == 0 && currentTerm == null;\n      return false;\n    }\n\n","sourceOld":"    /** Increments the enumeration to the next element.  True if one exists. */\n    @Override\n    public boolean next() throws IOException {\n      // if a current term exists, the actual enum is initialized:\n      // try change to next term, if no such term exists, fall-through\n      if (currentTerm != null) {\n        assert actualEnum != null;\n        if (actualEnum.next()) {\n          currentTerm = actualEnum.term();\n          if (termCompare(currentTerm))\n            return true;\n        }\n      }\n      \n      // if all above fails, we go forward to the next enum,\n      // if one is available\n      currentTerm = null;\n      while (rangeBounds.size() >= 2) {\n        assert rangeBounds.size() % 2 == 0;\n        // close the current enum and read next bounds\n        if (actualEnum != null) {\n          actualEnum.close();\n          actualEnum = null;\n        }\n        final String lowerBound = rangeBounds.removeFirst();\n        this.currentUpperBound = rangeBounds.removeFirst();\n        // create a new enum\n        actualEnum = reader.terms(termTemplate.createTerm(lowerBound));\n        currentTerm = actualEnum.term();\n        if (currentTerm != null && termCompare(currentTerm))\n          return true;\n        // clear the current term for next iteration\n        currentTerm = null;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.size() == 0 && currentTerm == null;\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermEnum#next().mjava","sourceNew":null,"sourceOld":"    /** Increments the enumeration to the next element.  True if one exists. */\n    @Override\n    public boolean next() throws IOException {\n      // if a current term exists, the actual enum is initialized:\n      // try change to next term, if no such term exists, fall-through\n      if (currentTerm != null) {\n        assert actualEnum != null;\n        if (actualEnum.next()) {\n          currentTerm = actualEnum.term();\n          if (termCompare(currentTerm))\n            return true;\n        }\n      }\n      \n      // if all above fails, we go forward to the next enum,\n      // if one is available\n      currentTerm = null;\n      while (rangeBounds.size() >= 2) {\n        assert rangeBounds.size() % 2 == 0;\n        // close the current enum and read next bounds\n        if (actualEnum != null) {\n          actualEnum.close();\n          actualEnum = null;\n        }\n        final String lowerBound = rangeBounds.removeFirst();\n        this.currentUpperBound = rangeBounds.removeFirst();\n        // create a new enum\n        actualEnum = reader.terms(termTemplate.createTerm(lowerBound));\n        currentTerm = actualEnum.term();\n        if (currentTerm != null && termCompare(currentTerm))\n          return true;\n        // clear the current term for next iteration\n        currentTerm = null;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.size() == 0 && currentTerm == null;\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}