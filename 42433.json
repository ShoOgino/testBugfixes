{"path":"solr/core/src/java/org/apache/solr/request/json/ObjectUtil.ConflictHandler#mergeMap(Map[String,Object],Map[String,Object],List[String]).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/json/ObjectUtil.ConflictHandler#mergeMap(Map[String,Object],Map[String,Object],List[String]).mjava","pathOld":"/dev/null","sourceNew":"    // merges srcMap onto targetMap (i.e. changes targetMap but not srcMap)\n    public void mergeMap(Map<String,Object> targetMap, Map<String,Object> srcMap, List<String> path) {\n      if (srcMap.size() == 0) return;\n      // to keep ordering correct, start with prevMap and merge in currMap\n      for (Map.Entry<String,Object> srcEntry : srcMap.entrySet()) {\n        String subKey = srcEntry.getKey();\n        Object subVal = srcEntry.getValue();\n        Object subPrev = targetMap.put(subKey, subVal);\n        if (subPrev != null) {\n          // recurse\n          path.add(subKey);\n          handleConflict(targetMap, path, subKey, subVal, subPrev);\n          path.remove(path.size()-1);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/json/ObjectUtil.ConflictHandler#mergeMap(Map[String,Object],Map[String,Object],List[String]).mjava","pathOld":"/dev/null","sourceNew":"    // merges srcMap onto targetMap (i.e. changes targetMap but not srcMap)\n    public void mergeMap(Map<String,Object> targetMap, Map<String,Object> srcMap, List<String> path) {\n      if (srcMap.size() == 0) return;\n      // to keep ordering correct, start with prevMap and merge in currMap\n      for (Map.Entry<String,Object> srcEntry : srcMap.entrySet()) {\n        String subKey = srcEntry.getKey();\n        Object subVal = srcEntry.getValue();\n        Object subPrev = targetMap.put(subKey, subVal);\n        if (subPrev != null) {\n          // recurse\n          path.add(subKey);\n          handleConflict(targetMap, path, subKey, subVal, subPrev);\n          path.remove(path.size()-1);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}