{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#distance(int).mjava","commits":[{"id":"54f531dff997ea7763360cb59f5ccadc6811b519","date":1457742562,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#distance(int).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double distance(int doc) {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return missingValue;\n    }\n\n    double minValue = Double.POSITIVE_INFINITY;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      double docLatitude = LatLonPoint.decodeLatitude((int)(encoded >> 32));\n      double docLongitude = LatLonPoint.decodeLongitude((int)(encoded & 0xFFFFFFFF));\n      minValue = Math.min(minValue, GeoDistanceUtils.haversin(latitude, longitude, docLatitude, docLongitude));\n    }\n    return minValue;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["98e0f1aa9ab98b9d47cc76e3d38926353c75b571"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"575856a9f007b9c35d0113c9e18151b554709ef2","date":1457776622,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#distance(int).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double distance(int doc) {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return missingValue;\n    }\n\n    double minValue = Double.POSITIVE_INFINITY;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      double docLatitude = LatLonPoint.decodeLatitude((int)(encoded >> 32));\n      double docLongitude = LatLonPoint.decodeLongitude((int)(encoded & 0xFFFFFFFF));\n      minValue = Math.min(minValue, GeoDistanceUtils.haversin(latitude, longitude, docLatitude, docLongitude));\n    }\n    return minValue;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d210c7f333402b4828c1d10dfd5457c9fe312c7d","date":1457987131,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#sortKey(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceComparator#distance(int).mjava","sourceNew":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double sortKey(int doc) {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return missingValue;\n    }\n\n    double minValue = Double.POSITIVE_INFINITY;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      double docLatitude = LatLonPoint.decodeLatitude((int)(encoded >> 32));\n      double docLongitude = LatLonPoint.decodeLongitude((int)(encoded & 0xFFFFFFFF));\n      minValue = Math.min(minValue, haversin1(latitude, longitude, docLatitude, docLongitude));\n    }\n    return minValue;\n  }\n\n","sourceOld":"  // TODO: optimize for single-valued case?\n  // TODO: do all kinds of other optimizations!\n  double distance(int doc) {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return missingValue;\n    }\n\n    double minValue = Double.POSITIVE_INFINITY;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n      double docLatitude = LatLonPoint.decodeLatitude((int)(encoded >> 32));\n      double docLongitude = LatLonPoint.decodeLongitude((int)(encoded & 0xFFFFFFFF));\n      minValue = Math.min(minValue, GeoDistanceUtils.haversin(latitude, longitude, docLatitude, docLongitude));\n    }\n    return minValue;\n  }\n\n","bugFix":null,"bugIntro":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d210c7f333402b4828c1d10dfd5457c9fe312c7d":["575856a9f007b9c35d0113c9e18151b554709ef2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"54f531dff997ea7763360cb59f5ccadc6811b519":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"575856a9f007b9c35d0113c9e18151b554709ef2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","54f531dff997ea7763360cb59f5ccadc6811b519"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"]},"commit2Childs":{"d210c7f333402b4828c1d10dfd5457c9fe312c7d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54f531dff997ea7763360cb59f5ccadc6811b519","575856a9f007b9c35d0113c9e18151b554709ef2"],"54f531dff997ea7763360cb59f5ccadc6811b519":["575856a9f007b9c35d0113c9e18151b554709ef2"],"575856a9f007b9c35d0113c9e18151b554709ef2":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}