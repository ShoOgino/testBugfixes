{"path":"lucene/core/src/java/org/apache/lucene/geo/Rectangle2D#compareBBoxToRangeBBox(byte[],int,int,byte[],int,int,byte[]).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Rectangle2D#compareBBoxToRangeBBox(byte[],int,int,byte[],int,int,byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Rectangle2D#compareBBoxToRangeBBox(byte[],int,int,byte[],int,int,byte[]).mjava","sourceNew":"  /**\n   * static utility method to compare a bbox with a range of triangles (just the bbox of the triangle collection)\n   **/\n  private static Relation compareBBoxToRangeBBox(final byte[] bbox,\n                                                 int minXOffset, int minYOffset, byte[] minTriangle,\n                                                 int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    // check bounding box (DISJOINT)\n    if (disjoint(bbox, minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle)) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n\n    if (Arrays.compareUnsigned(minTriangle, minXOffset, minXOffset + BYTES, bbox, BYTES, 2 * BYTES) >= 0 &&\n        Arrays.compareUnsigned(maxTriangle, maxXOffset, maxXOffset + BYTES, bbox, 3 * BYTES, 4 * BYTES) <= 0 &&\n        Arrays.compareUnsigned(minTriangle, minYOffset, minYOffset + BYTES, bbox, 0, BYTES) >= 0 &&\n        Arrays.compareUnsigned(maxTriangle, maxYOffset, maxYOffset + BYTES, bbox, 2 * BYTES, 3 * BYTES) <= 0) {\n      return Relation.CELL_INSIDE_QUERY;\n    }\n\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":"  /**\n   * static utility method to compare a bbox with a range of triangles (just the bbox of the triangle collection)\n   **/\n  private static Relation compareBBoxToRangeBBox(final byte[] bbox,\n                                                 int minXOffset, int minYOffset, byte[] minTriangle,\n                                                 int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    // check bounding box (DISJOINT)\n    if (disjoint(bbox, minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle)) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n\n    if (Arrays.compareUnsigned(minTriangle, minXOffset, minXOffset + BYTES, bbox, BYTES, 2 * BYTES) >= 0 &&\n        Arrays.compareUnsigned(maxTriangle, maxXOffset, maxXOffset + BYTES, bbox, 3 * BYTES, 4 * BYTES) <= 0 &&\n        Arrays.compareUnsigned(minTriangle, minYOffset, minYOffset + BYTES, bbox, 0, BYTES) >= 0 &&\n        Arrays.compareUnsigned(maxTriangle, maxYOffset, maxYOffset + BYTES, bbox, 2 * BYTES, 3 * BYTES) <= 0) {\n      return Relation.CELL_INSIDE_QUERY;\n    }\n\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56c42be8d779573d0c86ba775117e17360dbf5a6","date":1583217404,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Rectangle2D#compareBBoxToRangeBBox(byte[],int,int,byte[],int,int,byte[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * static utility method to compare a bbox with a range of triangles (just the bbox of the triangle collection)\n   **/\n  private static Relation compareBBoxToRangeBBox(final byte[] bbox,\n                                                 int minXOffset, int minYOffset, byte[] minTriangle,\n                                                 int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    // check bounding box (DISJOINT)\n    if (disjoint(bbox, minXOffset, minYOffset, minTriangle, maxXOffset, maxYOffset, maxTriangle)) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n\n    if (Arrays.compareUnsigned(minTriangle, minXOffset, minXOffset + BYTES, bbox, BYTES, 2 * BYTES) >= 0 &&\n        Arrays.compareUnsigned(maxTriangle, maxXOffset, maxXOffset + BYTES, bbox, 3 * BYTES, 4 * BYTES) <= 0 &&\n        Arrays.compareUnsigned(minTriangle, minYOffset, minYOffset + BYTES, bbox, 0, BYTES) >= 0 &&\n        Arrays.compareUnsigned(maxTriangle, maxYOffset, maxYOffset + BYTES, bbox, 2 * BYTES, 3 * BYTES) <= 0) {\n      return Relation.CELL_INSIDE_QUERY;\n    }\n\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56c42be8d779573d0c86ba775117e17360dbf5a6"]},"commit2Childs":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}