{"path":"src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(HttpClient,PostMethod).mjava","commits":[{"id":"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","date":1224582283,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(HttpClient,PostMethod).mjava","pathOld":"/dev/null","sourceNew":"  private NamedList getNamedListResponse(HttpClient client, PostMethod method)\n          throws IOException {\n    try {\n      int status = client.executeMethod(method);\n      if (status != HttpStatus.SC_OK) {\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n                \"Request failed for the url \" + method);\n      }\n      return new NamedListCodec().unmarshal(method.getResponseBodyAsStream());\n    } finally {\n      try {\n        method.releaseConnection();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8620c64e323e74078214cf931e505179d14c888e","date":1225270494,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(HttpClient,PostMethod).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(HttpClient,PostMethod).mjava","sourceNew":"  private NamedList getNamedListResponse(HttpClient client, PostMethod method) throws IOException {\n    try {\n      int status = client.executeMethod(method);\n      if (status != HttpStatus.SC_OK) {\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n                \"Request failed for the url \" + method);\n      }\n      return new NamedListCodec().unmarshal(method.getResponseBodyAsStream());\n    } finally {\n      try {\n        method.releaseConnection();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","sourceOld":"  private NamedList getNamedListResponse(HttpClient client, PostMethod method)\n          throws IOException {\n    try {\n      int status = client.executeMethod(method);\n      if (status != HttpStatus.SC_OK) {\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n                \"Request failed for the url \" + method);\n      }\n      return new NamedListCodec().unmarshal(method.getResponseBodyAsStream());\n    } finally {\n      try {\n        method.releaseConnection();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1afc23adf8af4aa2dfc781b02b63710546b33","date":1227622754,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(PostMethod).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#getNamedListResponse(HttpClient,PostMethod).mjava","sourceNew":"  private NamedList getNamedListResponse(PostMethod method) throws IOException {\n    try {\n      int status = client.executeMethod(method);\n      if (status != HttpStatus.SC_OK) {\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n                \"Request failed for the url \" + method);\n      }\n      return new NamedListCodec().unmarshal(method.getResponseBodyAsStream());\n    } finally {\n      try {\n        method.releaseConnection();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","sourceOld":"  private NamedList getNamedListResponse(HttpClient client, PostMethod method) throws IOException {\n    try {\n      int status = client.executeMethod(method);\n      if (status != HttpStatus.SC_OK) {\n        throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n                \"Request failed for the url \" + method);\n      }\n      return new NamedListCodec().unmarshal(method.getResponseBodyAsStream());\n    } finally {\n      try {\n        method.releaseConnection();\n      } catch (Exception e) {\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8620c64e323e74078214cf931e505179d14c888e":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["8620c64e323e74078214cf931e505179d14c888e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["8620c64e323e74078214cf931e505179d14c888e"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8620c64e323e74078214cf931e505179d14c888e":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6e1afc23adf8af4aa2dfc781b02b63710546b33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}