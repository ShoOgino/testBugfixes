{"path":"contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testDefaultFilter().mjava","commits":[{"id":"ef08ad6a64004e00b4e02dbe0a553dac1c528bd8","date":1191365806,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testDefaultFilter().mjava","pathOld":"/dev/null","sourceNew":"\tpublic void testDefaultFilter() throws Throwable\r\n\t{\r\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\t\t\r\n\t\tHashSet results=new HashSet();\r\n\t\tHits h = searcher.search(tq,df);\r\n\t\tfor(int i=0;i<h.length();i++)\r\n\t\t{\r\n\t\t\tDocument d=h.doc(i);\r\n\t\t\tString url=d.get(KEY_FIELD);\r\n\t\t\tassertFalse(\"No duplicate urls should be returned\",results.contains(url));\r\n\t\t\tresults.add(url);\r\n\t\t}\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f5f7d7abdf974f73cb0bbcd2215552db1f2e5c2","date":1211591790,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testDefaultFilter().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testDefaultFilter().mjava","sourceNew":"\tpublic void testDefaultFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\t\t\n\t\tHashSet results=new HashSet();\n\t\tHits h = searcher.search(tq,df);\n\t\tfor(int i=0;i<h.length();i++)\n\t\t{\n\t\t\tDocument d=h.doc(i);\n\t\t\tString url=d.get(KEY_FIELD);\n\t\t\tassertFalse(\"No duplicate urls should be returned\",results.contains(url));\n\t\t\tresults.add(url);\n\t\t}\n\t}\n\n","sourceOld":"\tpublic void testDefaultFilter() throws Throwable\r\n\t{\r\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\t\t\r\n\t\tHashSet results=new HashSet();\r\n\t\tHits h = searcher.search(tq,df);\r\n\t\tfor(int i=0;i<h.length();i++)\r\n\t\t{\r\n\t\t\tDocument d=h.doc(i);\r\n\t\t\tString url=d.get(KEY_FIELD);\r\n\t\t\tassertFalse(\"No duplicate urls should be returned\",results.contains(url));\r\n\t\t\tresults.add(url);\r\n\t\t}\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testDefaultFilter().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testDefaultFilter().mjava","sourceNew":"\tpublic void testDefaultFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\t\t\n\t\tHashSet results=new HashSet();\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n\t\t\tassertFalse(\"No duplicate urls should be returned\",results.contains(url));\n\t\t\tresults.add(url);\n\t\t}\n\t}\n\n","sourceOld":"\tpublic void testDefaultFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\t\t\n\t\tHashSet results=new HashSet();\n\t\tHits h = searcher.search(tq,df);\n\t\tfor(int i=0;i<h.length();i++)\n\t\t{\n\t\t\tDocument d=h.doc(i);\n\t\t\tString url=d.get(KEY_FIELD);\n\t\t\tassertFalse(\"No duplicate urls should be returned\",results.contains(url));\n\t\t\tresults.add(url);\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7848880b3c06f09f0f3ac50d0854b16efb0b815e","date":1260006234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testDefaultFilter().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testDefaultFilter().mjava","sourceNew":"\tpublic void testDefaultFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\t\t\n\t\tHashSet<String> results=new HashSet<String>();\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n\t\t\tassertFalse(\"No duplicate urls should be returned\",results.contains(url));\n\t\t\tresults.add(url);\n\t\t}\n\t}\n\n","sourceOld":"\tpublic void testDefaultFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\t\t\n\t\tHashSet results=new HashSet();\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n\t\t\tassertFalse(\"No duplicate urls should be returned\",results.contains(url));\n\t\t\tresults.add(url);\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testDefaultFilter().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testDefaultFilter().mjava","sourceNew":"\tpublic void testDefaultFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\t\t\n\t\tHashSet<String> results=new HashSet<String>();\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n\t\t\tassertFalse(\"No duplicate urls should be returned\",results.contains(url));\n\t\t\tresults.add(url);\n\t\t}\n\t}\n\n","sourceOld":"\tpublic void testDefaultFilter() throws Throwable\n\t{\n\t\tDuplicateFilter df=new DuplicateFilter(KEY_FIELD);\t\t\n\t\tHashSet<String> results=new HashSet<String>();\n\t\tScoreDoc[] hits = searcher.search(tq,df, 1000).scoreDocs;\n\t\tfor(int i=0;i<hits.length;i++)\n\t\t{\n\t\t\tDocument d=searcher.doc(hits[i].doc);\n\t\t\tString url=d.get(KEY_FIELD);\n\t\t\tassertFalse(\"No duplicate urls should be returned\",results.contains(url));\n\t\t\tresults.add(url);\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f5f7d7abdf974f73cb0bbcd2215552db1f2e5c2":["ef08ad6a64004e00b4e02dbe0a553dac1c528bd8"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["4f5f7d7abdf974f73cb0bbcd2215552db1f2e5c2"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"ef08ad6a64004e00b4e02dbe0a553dac1c528bd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef08ad6a64004e00b4e02dbe0a553dac1c528bd8"],"4f5f7d7abdf974f73cb0bbcd2215552db1f2e5c2":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ef08ad6a64004e00b4e02dbe0a553dac1c528bd8":["4f5f7d7abdf974f73cb0bbcd2215552db1f2e5c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}