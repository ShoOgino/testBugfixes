{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"/dev/null","sourceNew":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    createConnectionFactory(context, initProps);\n    try {\n      conn = factory.call();\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Unable to create database connection\", e);\n    }\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.log(Level.WARNING, \"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5008e3fdda10cb43483dfbf4bdb6d71fc0df201","date":1218987719,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.log(Level.WARNING, \"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    createConnectionFactory(context, initProps);\n    try {\n      conn = factory.call();\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Unable to create database connection\", e);\n    }\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.log(Level.WARNING, \"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn( \"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.log(Level.WARNING, \"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd42c8ecc9f8a8e590c5526544a77258089ca23f","date":1229189880,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn( \"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6ff4f117bc6ee20396ca20f0c5b354c2de00d92","date":1237530421,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = (String) context.getVariableResolver().resolve(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a90b0c0d735fb9f6839557571eedd4c370c94bf","date":1237721511,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = (String) context.getVariableResolver().resolve(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = (String) context.getVariableResolver().resolve(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd8faf70a14725d62fa262f99baeacec7a585628","date":1239862602,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = (String) context.getVariableResolver().replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = (String) context.getVariableResolver().resolve(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"101d6b730bda9533276a5a536ed2e1f7acd83c99","date":1252314070,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = (String) context.getVariableResolver().replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = (String) context.getVariableResolver().replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f24d87791042430a77c0e6c1e7a59d5840146f5e","date":1252329554,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.getVariableResolver().replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = (String) context.getVariableResolver().replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"153cc06382fdc94d0ea3db127eab860ae4310525","date":1260181667,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.getVariableResolver().replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource#init(Context,Properties).mjava","sourceNew":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","sourceOld":"  public void init(Context context, Properties initProps) {\n    Object o = initProps.get(CONVERT_TYPE);\n    if (o != null)\n      convertType = Boolean.parseBoolean(o.toString());\n\n    factory = createConnectionFactory(context, initProps);\n\n    String bsz = initProps.getProperty(\"batchSize\");\n    if (bsz != null) {\n      bsz = context.replaceTokens(bsz);\n      try {\n        batchSize = Integer.parseInt(bsz);\n        if (batchSize == -1)\n          batchSize = Integer.MIN_VALUE;\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid batch size: \" + bsz);\n      }\n    }\n\n    for (Map<String, String> map : context.getAllEntityFields()) {\n      String n = map.get(DataImporter.COLUMN);\n      String t = map.get(DataImporter.TYPE);\n      if (\"sint\".equals(t) || \"integer\".equals(t))\n        fieldNameVsType.put(n, Types.INTEGER);\n      else if (\"slong\".equals(t) || \"long\".equals(t))\n        fieldNameVsType.put(n, Types.BIGINT);\n      else if (\"float\".equals(t) || \"sfloat\".equals(t))\n        fieldNameVsType.put(n, Types.FLOAT);\n      else if (\"double\".equals(t) || \"sdouble\".equals(t))\n        fieldNameVsType.put(n, Types.DOUBLE);\n      else if (\"date\".equals(t))\n        fieldNameVsType.put(n, Types.DATE);\n      else if (\"boolean\".equals(t))\n        fieldNameVsType.put(n, Types.BOOLEAN);\n      else if (\"binary\".equals(t))\n        fieldNameVsType.put(n, Types.BLOB);\n      else\n        fieldNameVsType.put(n, Types.VARCHAR);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5008e3fdda10cb43483dfbf4bdb6d71fc0df201":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"c6ff4f117bc6ee20396ca20f0c5b354c2de00d92":["dd42c8ecc9f8a8e590c5526544a77258089ca23f"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"dd42c8ecc9f8a8e590c5526544a77258089ca23f":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"153cc06382fdc94d0ea3db127eab860ae4310525":["f24d87791042430a77c0e6c1e7a59d5840146f5e"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["c5008e3fdda10cb43483dfbf4bdb6d71fc0df201"],"101d6b730bda9533276a5a536ed2e1f7acd83c99":["fd8faf70a14725d62fa262f99baeacec7a585628"],"fd8faf70a14725d62fa262f99baeacec7a585628":["6a90b0c0d735fb9f6839557571eedd4c370c94bf"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"6a90b0c0d735fb9f6839557571eedd4c370c94bf":["c6ff4f117bc6ee20396ca20f0c5b354c2de00d92"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f24d87791042430a77c0e6c1e7a59d5840146f5e":["101d6b730bda9533276a5a536ed2e1f7acd83c99"],"ad94625fb8d088209f46650c8097196fec67f00c":["153cc06382fdc94d0ea3db127eab860ae4310525"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c5008e3fdda10cb43483dfbf4bdb6d71fc0df201":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"c6ff4f117bc6ee20396ca20f0c5b354c2de00d92":["6a90b0c0d735fb9f6839557571eedd4c370c94bf"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"dd42c8ecc9f8a8e590c5526544a77258089ca23f":["c6ff4f117bc6ee20396ca20f0c5b354c2de00d92"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["dd42c8ecc9f8a8e590c5526544a77258089ca23f"],"153cc06382fdc94d0ea3db127eab860ae4310525":["ad94625fb8d088209f46650c8097196fec67f00c"],"101d6b730bda9533276a5a536ed2e1f7acd83c99":["f24d87791042430a77c0e6c1e7a59d5840146f5e"],"fd8faf70a14725d62fa262f99baeacec7a585628":["101d6b730bda9533276a5a536ed2e1f7acd83c99"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["c5008e3fdda10cb43483dfbf4bdb6d71fc0df201"],"6a90b0c0d735fb9f6839557571eedd4c370c94bf":["fd8faf70a14725d62fa262f99baeacec7a585628"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f24d87791042430a77c0e6c1e7a59d5840146f5e":["153cc06382fdc94d0ea3db127eab860ae4310525"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}