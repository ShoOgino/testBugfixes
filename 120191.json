{"path":"lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","sourceNew":"        private void tstFilterCard(String mes, int expected, Filter filt)\n        throws Throwable\n        {\n          DocIdSetIterator disi = filt.getDocIdSet(reader).iterator();\n          int actual = 0;\n          while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            actual++;\n          }\n          assertEquals(mes, expected, actual);\n        }\n\n","sourceOld":"        private void tstFilterCard(String mes, int expected, Filter filt)\n        throws Throwable\n        {\n          DocIdSetIterator disi = filt.getDocIdSet(reader).iterator();\n          int actual = 0;\n          while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            actual++;\n          }\n          assertEquals(mes, expected, actual);\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","sourceNew":"        private void tstFilterCard(String mes, int expected, Filter filt)\n        throws Throwable\n        {\n          DocIdSetIterator disi = filt.getDocIdSet(new AtomicReaderContext(reader)).iterator();\n          int actual = 0;\n          while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            actual++;\n          }\n          assertEquals(mes, expected, actual);\n        }\n\n","sourceOld":"        private void tstFilterCard(String mes, int expected, Filter filt)\n        throws Throwable\n        {\n          DocIdSetIterator disi = filt.getDocIdSet(reader).iterator();\n          int actual = 0;\n          while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            actual++;\n          }\n          assertEquals(mes, expected, actual);\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","sourceNew":"        private void tstFilterCard(String mes, int expected, Filter filt)\n        throws Throwable\n        {\n          DocIdSetIterator disi = filt.getDocIdSet(new AtomicReaderContext(reader)).iterator();\n          int actual = 0;\n          while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            actual++;\n          }\n          assertEquals(mes, expected, actual);\n        }\n\n","sourceOld":"        private void tstFilterCard(String mes, int expected, Filter filt)\n        throws Throwable\n        {\n          DocIdSetIterator disi = filt.getDocIdSet(reader).iterator();\n          int actual = 0;\n          while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            actual++;\n          }\n          assertEquals(mes, expected, actual);\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","sourceNew":"        private void tstFilterCard(String mes, int expected, Filter filt)\n        throws Throwable\n        {\n          DocIdSetIterator disi = filt.getDocIdSet(new AtomicReaderContext(reader)).iterator();\n          int actual = 0;\n          while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            actual++;\n          }\n          assertEquals(mes, expected, actual);\n        }\n\n","sourceOld":"        private void tstFilterCard(String mes, int expected, Filter filt)\n        throws Throwable\n        {\n          DocIdSetIterator disi = filt.getDocIdSet(reader).iterator();\n          int actual = 0;\n          while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            actual++;\n          }\n          assertEquals(mes, expected, actual);\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e141595402370bee958745de8b1c9de1fa182581","date":1310547892,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","sourceNew":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Throwable {\n    DocIdSetIterator disi = filt.getDocIdSet(new AtomicReaderContext(reader)).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","sourceOld":"        private void tstFilterCard(String mes, int expected, Filter filt)\n        throws Throwable\n        {\n          DocIdSetIterator disi = filt.getDocIdSet(new AtomicReaderContext(reader)).iterator();\n          int actual = 0;\n          while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            actual++;\n          }\n          assertEquals(mes, expected, actual);\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f9f2355d68aab1348539f7a1603279405e566a4","date":1313634992,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/BooleanFilterTest#tstFilterCard(String,int,Filter).mjava","sourceNew":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Throwable {\n    DocIdSetIterator disi = filt.getDocIdSet(new AtomicReaderContext(reader)).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","sourceOld":"  private void tstFilterCard(String mes, int expected, Filter filt)\n      throws Throwable {\n    DocIdSetIterator disi = filt.getDocIdSet(new AtomicReaderContext(reader)).iterator();\n    int actual = 0;\n    while (disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      actual++;\n    }\n    assertEquals(mes, expected, actual);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"e141595402370bee958745de8b1c9de1fa182581":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f9f2355d68aab1348539f7a1603279405e566a4"],"1f9f2355d68aab1348539f7a1603279405e566a4":["e141595402370bee958745de8b1c9de1fa182581"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","e141595402370bee958745de8b1c9de1fa182581"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"e141595402370bee958745de8b1c9de1fa182581":["1f9f2355d68aab1348539f7a1603279405e566a4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1f9f2355d68aab1348539f7a1603279405e566a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}