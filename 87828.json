{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/tr/TurkishLowerCaseFilter#incrementToken().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/tr/TurkishLowerCaseFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/tr/TurkishLowerCaseFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean iOrAfter = false;\n    \n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.termBuffer();\n      int length = termAtt.termLength();\n      for (int i = 0; i < length;) {\n        final int ch = Character.codePointAt(buffer, i);\n    \n        iOrAfter = (ch == LATIN_CAPITAL_LETTER_I || \n            (iOrAfter && Character.getType(ch) == Character.NON_SPACING_MARK));\n        \n        if (iOrAfter) { // all the special I turkish handling happens here.\n          switch(ch) {\n            // remove COMBINING_DOT_ABOVE to mimic composed lowercase\n            case COMBINING_DOT_ABOVE:\n              length = delete(buffer, i, length);\n              continue;\n            // i itself, it depends if it is followed by COMBINING_DOT_ABOVE\n            // if it is, we will make it small i and later remove the dot\n            case LATIN_CAPITAL_LETTER_I:\n              if (isBeforeDot(buffer, i + 1, length)) {\n                buffer[i] = LATIN_SMALL_LETTER_I;\n              } else {\n                buffer[i] = LATIN_SMALL_LETTER_DOTLESS_I;\n                // below is an optimization. no COMBINING_DOT_ABOVE follows,\n                // so don't waste time calculating Character.getType(), etc\n                iOrAfter = false;\n              }\n              i++;\n              continue;\n          }\n        }\n        \n        i += Character.toChars(Character.toLowerCase(ch), buffer, i);\n      }\n      \n      termAtt.setTermLength(length);\n      return true;\n    } else\n      return false;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean iOrAfter = false;\n    \n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.termBuffer();\n      int length = termAtt.termLength();\n      for (int i = 0; i < length;) {\n        final int ch = Character.codePointAt(buffer, i);\n    \n        iOrAfter = (ch == LATIN_CAPITAL_LETTER_I || \n            (iOrAfter && Character.getType(ch) == Character.NON_SPACING_MARK));\n        \n        if (iOrAfter) { // all the special I turkish handling happens here.\n          switch(ch) {\n            // remove COMBINING_DOT_ABOVE to mimic composed lowercase\n            case COMBINING_DOT_ABOVE:\n              length = delete(buffer, i, length);\n              continue;\n            // i itself, it depends if it is followed by COMBINING_DOT_ABOVE\n            // if it is, we will make it small i and later remove the dot\n            case LATIN_CAPITAL_LETTER_I:\n              if (isBeforeDot(buffer, i + 1, length)) {\n                buffer[i] = LATIN_SMALL_LETTER_I;\n              } else {\n                buffer[i] = LATIN_SMALL_LETTER_DOTLESS_I;\n                // below is an optimization. no COMBINING_DOT_ABOVE follows,\n                // so don't waste time calculating Character.getType(), etc\n                iOrAfter = false;\n              }\n              i++;\n              continue;\n          }\n        }\n        \n        i += Character.toChars(Character.toLowerCase(ch), buffer, i);\n      }\n      \n      termAtt.setTermLength(length);\n      return true;\n    } else\n      return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/tr/TurkishLowerCaseFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/tr/TurkishLowerCaseFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean iOrAfter = false;\n    \n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.termBuffer();\n      int length = termAtt.termLength();\n      for (int i = 0; i < length;) {\n        final int ch = Character.codePointAt(buffer, i);\n    \n        iOrAfter = (ch == LATIN_CAPITAL_LETTER_I || \n            (iOrAfter && Character.getType(ch) == Character.NON_SPACING_MARK));\n        \n        if (iOrAfter) { // all the special I turkish handling happens here.\n          switch(ch) {\n            // remove COMBINING_DOT_ABOVE to mimic composed lowercase\n            case COMBINING_DOT_ABOVE:\n              length = delete(buffer, i, length);\n              continue;\n            // i itself, it depends if it is followed by COMBINING_DOT_ABOVE\n            // if it is, we will make it small i and later remove the dot\n            case LATIN_CAPITAL_LETTER_I:\n              if (isBeforeDot(buffer, i + 1, length)) {\n                buffer[i] = LATIN_SMALL_LETTER_I;\n              } else {\n                buffer[i] = LATIN_SMALL_LETTER_DOTLESS_I;\n                // below is an optimization. no COMBINING_DOT_ABOVE follows,\n                // so don't waste time calculating Character.getType(), etc\n                iOrAfter = false;\n              }\n              i++;\n              continue;\n          }\n        }\n        \n        i += Character.toChars(Character.toLowerCase(ch), buffer, i);\n      }\n      \n      termAtt.setTermLength(length);\n      return true;\n    } else\n      return false;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean iOrAfter = false;\n    \n    if (input.incrementToken()) {\n      final char[] buffer = termAtt.termBuffer();\n      int length = termAtt.termLength();\n      for (int i = 0; i < length;) {\n        final int ch = Character.codePointAt(buffer, i);\n    \n        iOrAfter = (ch == LATIN_CAPITAL_LETTER_I || \n            (iOrAfter && Character.getType(ch) == Character.NON_SPACING_MARK));\n        \n        if (iOrAfter) { // all the special I turkish handling happens here.\n          switch(ch) {\n            // remove COMBINING_DOT_ABOVE to mimic composed lowercase\n            case COMBINING_DOT_ABOVE:\n              length = delete(buffer, i, length);\n              continue;\n            // i itself, it depends if it is followed by COMBINING_DOT_ABOVE\n            // if it is, we will make it small i and later remove the dot\n            case LATIN_CAPITAL_LETTER_I:\n              if (isBeforeDot(buffer, i + 1, length)) {\n                buffer[i] = LATIN_SMALL_LETTER_I;\n              } else {\n                buffer[i] = LATIN_SMALL_LETTER_DOTLESS_I;\n                // below is an optimization. no COMBINING_DOT_ABOVE follows,\n                // so don't waste time calculating Character.getType(), etc\n                iOrAfter = false;\n              }\n              i++;\n              continue;\n          }\n        }\n        \n        i += Character.toChars(Character.toLowerCase(ch), buffer, i);\n      }\n      \n      termAtt.setTermLength(length);\n      return true;\n    } else\n      return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}