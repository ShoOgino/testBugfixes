{"path":"lucene/core/src/java/org/apache/lucene/util/BitUtil#ntz(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BitUtil#ntz(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BitUtil#ntz(int).mjava","sourceNew":"  /** Returns number of trailing zeros in a 32 bit int value. */\n  public static int ntz(int val) {\n    // This implementation does a single binary search at the top level only.\n    // In addition, the case of a non-zero first byte is checked for first\n    // because it is the most common in dense bit arrays.\n\n    int lowByte = val & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte];\n    lowByte = (val>>>8) & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte] + 8;\n    lowByte = (val>>>16) & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte] + 16;\n    // no need to mask off low byte for the last byte.\n    // no need to check for zero on the last byte either.\n    return ntzTable[val>>>24] + 24;\n  }\n\n","sourceOld":"  /** Returns number of trailing zeros in a 32 bit int value. */\n  public static int ntz(int val) {\n    // This implementation does a single binary search at the top level only.\n    // In addition, the case of a non-zero first byte is checked for first\n    // because it is the most common in dense bit arrays.\n\n    int lowByte = val & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte];\n    lowByte = (val>>>8) & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte] + 8;\n    lowByte = (val>>>16) & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte] + 16;\n    // no need to mask off low byte for the last byte.\n    // no need to check for zero on the last byte either.\n    return ntzTable[val>>>24] + 24;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95f83654246556082000bded885bde27a521bb31","date":1353427179,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/BitUtil#ntz(int).mjava","sourceNew":null,"sourceOld":"  /** Returns number of trailing zeros in a 32 bit int value. */\n  public static int ntz(int val) {\n    // This implementation does a single binary search at the top level only.\n    // In addition, the case of a non-zero first byte is checked for first\n    // because it is the most common in dense bit arrays.\n\n    int lowByte = val & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte];\n    lowByte = (val>>>8) & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte] + 8;\n    lowByte = (val>>>16) & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte] + 16;\n    // no need to mask off low byte for the last byte.\n    // no need to check for zero on the last byte either.\n    return ntzTable[val>>>24] + 24;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/BitUtil#ntz(int).mjava","sourceNew":null,"sourceOld":"  /** Returns number of trailing zeros in a 32 bit int value. */\n  public static int ntz(int val) {\n    // This implementation does a single binary search at the top level only.\n    // In addition, the case of a non-zero first byte is checked for first\n    // because it is the most common in dense bit arrays.\n\n    int lowByte = val & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte];\n    lowByte = (val>>>8) & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte] + 8;\n    lowByte = (val>>>16) & 0xff;\n    if (lowByte != 0) return ntzTable[lowByte] + 16;\n    // no need to mask off low byte for the last byte.\n    // no need to check for zero on the last byte either.\n    return ntzTable[val>>>24] + 24;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95f83654246556082000bded885bde27a521bb31":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","95f83654246556082000bded885bde27a521bb31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["95f83654246556082000bded885bde27a521bb31"]},"commit2Childs":{"95f83654246556082000bded885bde27a521bb31":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["95f83654246556082000bded885bde27a521bb31","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}