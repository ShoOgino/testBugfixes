{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#waitForNodeLeave(String).mjava","commits":[{"id":"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa","date":1498706808,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#waitForNodeLeave(String).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForNodeLeave(String lostNodeName) throws InterruptedException {\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS);\n    while (reader.getClusterState().getLiveNodes().contains(lostNodeName)) {\n      Thread.sleep(100);\n      if (timeOut.hasTimedOut()) fail(\"Wait for \" + lostNodeName + \" to leave failed!\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#waitForNodeLeave(String).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForNodeLeave(String lostNodeName) throws InterruptedException {\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS);\n    while (reader.getClusterState().getLiveNodes().contains(lostNodeName)) {\n      Thread.sleep(100);\n      if (timeOut.hasTimedOut()) fail(\"Wait for \" + lostNodeName + \" to leave failed!\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#waitForNodeLeave(String).mjava","pathOld":"/dev/null","sourceNew":"  private void waitForNodeLeave(String lostNodeName) throws InterruptedException {\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS);\n    while (reader.getClusterState().getLiveNodes().contains(lostNodeName)) {\n      Thread.sleep(100);\n      if (timeOut.hasTimedOut()) fail(\"Wait for \" + lostNodeName + \" to leave failed!\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#waitForNodeLeave(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#waitForNodeLeave(String).mjava","sourceNew":"  private void waitForNodeLeave(String lostNodeName) throws InterruptedException {\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (reader.getClusterState().getLiveNodes().contains(lostNodeName)) {\n      Thread.sleep(100);\n      if (timeOut.hasTimedOut()) fail(\"Wait for \" + lostNodeName + \" to leave failed!\");\n    }\n  }\n\n","sourceOld":"  private void waitForNodeLeave(String lostNodeName) throws InterruptedException {\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS);\n    while (reader.getClusterState().getLiveNodes().contains(lostNodeName)) {\n      Thread.sleep(100);\n      if (timeOut.hasTimedOut()) fail(\"Wait for \" + lostNodeName + \" to leave failed!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":4,"author":"markrmiller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanActionTest#waitForNodeLeave(String).mjava","sourceNew":null,"sourceOld":"  private void waitForNodeLeave(String lostNodeName) throws InterruptedException {\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    while (reader.getClusterState().getLiveNodes().contains(lostNodeName)) {\n      Thread.sleep(100);\n      if (timeOut.hasTimedOut()) fail(\"Wait for \" + lostNodeName + \" to leave failed!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa","560c18d71dad43d675158783c3840f8c80d6d39c"],"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"560c18d71dad43d675158783c3840f8c80d6d39c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}