{"path":"src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","commits":[{"id":"ac3e6437547a34cce2b5405ce0cf9e3af578401e","date":1243373693,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.StringIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        String id = idIndex.lookup[idIndex.order[doc]];\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public void setNextReader(IndexReader reader, int docBase, int numSlotsFull) throws IOException {\n        idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n      }\n\n      public int sortType() {\n        return SortField.INT;\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb8cfe7bf587294d6207ef881511e98bde8666f1","date":1244338898,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.StringIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        String id = idIndex.lookup[idIndex.order[doc]];\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public void setNextReader(IndexReader reader, int docBase, int numSlotsFull) throws IOException {\n        idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n      }\n\n      public int sortType() {\n        return SortField.CUSTOM;\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.StringIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        String id = idIndex.lookup[idIndex.order[doc]];\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public void setNextReader(IndexReader reader, int docBase, int numSlotsFull) throws IOException {\n        idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n      }\n\n      public int sortType() {\n        return SortField.INT;\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c20f931a6f10b153366015604398a5eb7a4d17fa","date":1249615266,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.StringIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        String id = idIndex.lookup[idIndex.order[doc]];\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public void setNextReader(IndexReader reader, int docBase) throws IOException {\n        idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n      }\n\n      public int sortType() {\n        return SortField.CUSTOM;\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.StringIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        String id = idIndex.lookup[idIndex.order[doc]];\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public void setNextReader(IndexReader reader, int docBase, int numSlotsFull) throws IOException {\n        idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n      }\n\n      public int sortType() {\n        return SortField.CUSTOM;\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b81a5532e931626bb9cb3f4abec371d62dae1b9","date":1254008804,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.StringIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        String id = idIndex.lookup[idIndex.order[doc]];\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public void setNextReader(IndexReader reader, int docBase) throws IOException {\n        idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.StringIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        String id = idIndex.lookup[idIndex.order[doc]];\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public void setNextReader(IndexReader reader, int docBase) throws IOException {\n        idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n      }\n\n      public int sortType() {\n        return SortField.CUSTOM;\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/component/ElevationComparatorSource[QueryElevationComponent]#newComparator(String,int,int,boolean).mjava","sourceNew":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.StringIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        String id = idIndex.lookup[idIndex.order[doc]];\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public void setNextReader(IndexReader reader, int docBase) throws IOException {\n        idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","sourceOld":"  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n    return new FieldComparator() {\n      \n      FieldCache.StringIndex idIndex;\n      private final int[] values = new int[numHits];\n      int bottomVal;\n\n      public int compare(int slot1, int slot2) {\n        return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n      }\n\n      public void setBottom(int slot) {\n        bottomVal = values[slot];\n      }\n\n      private int docVal(int doc) throws IOException {\n        String id = idIndex.lookup[idIndex.order[doc]];\n        Integer prio = priority.get(id);\n        return prio == null ? 0 : prio.intValue();\n      }\n\n      public int compareBottom(int doc) throws IOException {\n        return docVal(doc) - bottomVal;\n      }\n\n      public void copy(int slot, int doc) throws IOException {\n        values[slot] = docVal(doc);\n      }\n\n      public void setNextReader(IndexReader reader, int docBase) throws IOException {\n        idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n      }\n\n      public Comparable value(int slot) {\n        return values[slot];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c20f931a6f10b153366015604398a5eb7a4d17fa":["cb8cfe7bf587294d6207ef881511e98bde8666f1"],"ac3e6437547a34cce2b5405ce0cf9e3af578401e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cb8cfe7bf587294d6207ef881511e98bde8666f1":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1b81a5532e931626bb9cb3f4abec371d62dae1b9":["c20f931a6f10b153366015604398a5eb7a4d17fa"],"ad94625fb8d088209f46650c8097196fec67f00c":["1b81a5532e931626bb9cb3f4abec371d62dae1b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c20f931a6f10b153366015604398a5eb7a4d17fa":["1b81a5532e931626bb9cb3f4abec371d62dae1b9"],"ac3e6437547a34cce2b5405ce0cf9e3af578401e":["cb8cfe7bf587294d6207ef881511e98bde8666f1"],"cb8cfe7bf587294d6207ef881511e98bde8666f1":["c20f931a6f10b153366015604398a5eb7a4d17fa"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1b81a5532e931626bb9cb3f4abec371d62dae1b9":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}