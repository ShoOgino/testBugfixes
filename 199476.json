{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","commits":[{"id":"d12774649e77a6efccc3502c735c2893b52af6d6","date":1376964312,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = _TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<String>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(_TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = _TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = new BytesRef();\n                    binaries.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    sorted.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int i = 0; i < values.length; i++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = new BytesRef();\n                    sortedSet.lookupOrd(ord, value);\n                    assertEquals(values[i], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n              }\n            }\n            _TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b873e6a2036c1deda886d1fcf6ba42c995dd15a0","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = _TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<String>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(_TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = _TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = new BytesRef();\n                    binaries.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    sorted.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int i = 0; i < values.length; i++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = new BytesRef();\n                    sortedSet.lookupOrd(ord, value);\n                    assertEquals(values[i], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n              }\n            }\n            _TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = _TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<String>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(_TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = _TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = new BytesRef();\n                    binaries.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    sorted.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int i = 0; i < values.length; i++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = new BytesRef();\n                    sortedSet.lookupOrd(ord, value);\n                    assertEquals(values[i], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n              }\n            }\n            _TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"487204058e79506a6ddba0065cfff810bc15b06a","date":1378216488,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField(\"dvBin\", \"dvSorted\", \"dvNum\", \"dvSortedSet\"));\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = _TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<String>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(_TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = _TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = new BytesRef();\n                    binaries.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    sorted.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int i = 0; i < values.length; i++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = new BytesRef();\n                    sortedSet.lookupOrd(ord, value);\n                    assertEquals(values[i], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n              }\n            }\n            _TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = _TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<String>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(_TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = _TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = new BytesRef();\n                    binaries.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    sorted.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int i = 0; i < values.length; i++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = new BytesRef();\n                    sortedSet.lookupOrd(ord, value);\n                    assertEquals(values[i], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n              }\n            }\n            _TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"820c994610cafbde5892c00924bdf69fffaaf38f","date":1378227060,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = _TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<String>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(_TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = _TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = new BytesRef();\n                    binaries.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    sorted.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int i = 0; i < values.length; i++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = new BytesRef();\n                    sortedSet.lookupOrd(ord, value);\n                    assertEquals(values[i], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n              }\n            }\n            _TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField(\"dvBin\", \"dvSorted\", \"dvNum\", \"dvSortedSet\"));\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = _TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<String>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(_TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = _TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = new BytesRef();\n                    binaries.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    sorted.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int i = 0; i < values.length; i++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = new BytesRef();\n                    sortedSet.lookupOrd(ord, value);\n                    assertEquals(values[i], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n              }\n            }\n            _TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1","date":1383143016,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = _TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<String>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(_TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = _TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = new BytesRef();\n                    binaries.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    sorted.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = new BytesRef();\n                    sortedSet.lookupOrd(ord, value);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n              }\n            }\n            _TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = _TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<String>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(_TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = _TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = new BytesRef();\n                    binaries.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    sorted.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int i = 0; i < values.length; i++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = new BytesRef();\n                    sortedSet.lookupOrd(ord, value);\n                    assertEquals(values[i], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n              }\n            }\n            _TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<String>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = new BytesRef();\n                    binaries.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    sorted.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = new BytesRef();\n                    sortedSet.lookupOrd(ord, value);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = _TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<String>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(_TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = _TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = new BytesRef();\n                    binaries.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    sorted.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = new BytesRef();\n                    sortedSet.lookupOrd(ord, value);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n              }\n            }\n            _TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = new BytesRef();\n                    binaries.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    sorted.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = new BytesRef();\n                    sortedSet.lookupOrd(ord, value);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<String>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = new BytesRef();\n                    binaries.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    sorted.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = new BytesRef();\n                    sortedSet.lookupOrd(ord, value);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = new BytesRef();\n                    binaries.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    sorted.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = new BytesRef();\n                    sortedSet.lookupOrd(ord, value);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = new BytesRef();\n                    binaries.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    sorted.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = new BytesRef();\n                    sortedSet.lookupOrd(ord, value);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = new BytesRef();\n                    binaries.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    sorted.get(j, scratch);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = new BytesRef();\n                    sortedSet.lookupOrd(ord, value);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              Bits sortedNumericBits = r.getDocsWithField(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  sortedNumeric.setDocument(j);\n                  assertEquals(numValues.length, sortedNumeric.count());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.valueAt(k);\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                  assertTrue(sortedNumericBits.get(j));\n                } else if (sortedNumeric != null) {\n                  sortedNumeric.setDocument(j);\n                  assertEquals(0, sortedNumeric.count());\n                  assertFalse(sortedNumericBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              Bits sortedNumericBits = r.getDocsWithField(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  sortedNumeric.setDocument(j);\n                  assertEquals(numValues.length, sortedNumeric.count());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.valueAt(k);\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                  assertTrue(sortedNumericBits.get(j));\n                } else if (sortedNumeric != null) {\n                  sortedNumeric.setDocument(j);\n                  assertEquals(0, sortedNumeric.count());\n                  assertFalse(sortedNumericBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              Bits sortedNumericBits = r.getDocsWithField(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  sortedNumeric.setDocument(j);\n                  assertEquals(numValues.length, sortedNumeric.count());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.valueAt(k);\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                  assertTrue(sortedNumericBits.get(j));\n                } else if (sortedNumeric != null) {\n                  sortedNumeric.setDocument(j);\n                  assertEquals(0, sortedNumeric.count());\n                  assertFalse(sortedNumericBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              Bits sortedNumericBits = r.getDocsWithField(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  sortedNumeric.setDocument(j);\n                  assertEquals(numValues.length, sortedNumeric.count());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.valueAt(k);\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                  assertTrue(sortedNumericBits.get(j));\n                } else if (sortedNumeric != null) {\n                  sortedNumeric.setDocument(j);\n                  assertEquals(0, sortedNumeric.count());\n                  assertFalse(sortedNumericBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              Bits sortedNumericBits = r.getDocsWithField(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  sortedNumeric.setDocument(j);\n                  assertEquals(numValues.length, sortedNumeric.count());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.valueAt(k);\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                  assertTrue(sortedNumericBits.get(j));\n                } else if (sortedNumeric != null) {\n                  sortedNumeric.setDocument(j);\n                  assertEquals(0, sortedNumeric.count());\n                  assertFalse(sortedNumericBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              Bits sortedNumericBits = r.getDocsWithField(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  sortedNumeric.setDocument(j);\n                  assertEquals(numValues.length, sortedNumeric.count());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.valueAt(k);\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                  assertTrue(sortedNumericBits.get(j));\n                } else if (sortedNumeric != null) {\n                  sortedNumeric.setDocument(j);\n                  assertEquals(0, sortedNumeric.count());\n                  assertFalse(sortedNumericBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b873e6a2036c1deda886d1fcf6ba42c995dd15a0","date":1408410832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = TestUtil.nextInt(random(), 1025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              Bits sortedNumericBits = r.getDocsWithField(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  sortedNumeric.setDocument(j);\n                  assertEquals(numValues.length, sortedNumeric.count());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.valueAt(k);\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                  assertTrue(sortedNumericBits.get(j));\n                } else if (sortedNumeric != null) {\n                  sortedNumeric.setDocument(j);\n                  assertEquals(0, sortedNumeric.count());\n                  assertFalse(sortedNumericBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              Bits sortedNumericBits = r.getDocsWithField(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  sortedNumeric.setDocument(j);\n                  assertEquals(numValues.length, sortedNumeric.count());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.valueAt(k);\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                  assertTrue(sortedNumericBits.get(j));\n                } else if (sortedNumeric != null) {\n                  sortedNumeric.setDocument(j);\n                  assertEquals(0, sortedNumeric.count());\n                  assertFalse(sortedNumericBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["d12774649e77a6efccc3502c735c2893b52af6d6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad2a673349939e48652bf304cccf673c3412198f","date":1409585169,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = TestUtil.nextInt(random(), 1025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              Bits sortedNumericBits = r.getDocsWithField(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  sortedNumeric.setDocument(j);\n                  assertEquals(numValues.length, sortedNumeric.count());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.valueAt(k);\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                  assertTrue(sortedNumericBits.get(j));\n                } else if (sortedNumeric != null) {\n                  sortedNumeric.setDocument(j);\n                  assertEquals(0, sortedNumeric.count());\n                  assertFalse(sortedNumericBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = TestUtil.nextInt(random(), 1025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              Bits sortedNumericBits = r.getDocsWithField(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  sortedNumeric.setDocument(j);\n                  assertEquals(numValues.length, sortedNumeric.count());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.valueAt(k);\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                  assertTrue(sortedNumericBits.get(j));\n                } else if (sortedNumeric != null) {\n                  sortedNumeric.setDocument(j);\n                  assertEquals(0, sortedNumeric.count());\n                  assertFalse(sortedNumericBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = TestUtil.nextInt(random(), 1025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              Bits sortedNumericBits = r.getDocsWithField(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  sortedNumeric.setDocument(j);\n                  assertEquals(numValues.length, sortedNumeric.count());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.valueAt(k);\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                  assertTrue(sortedNumericBits.get(j));\n                } else if (sortedNumeric != null) {\n                  sortedNumeric.setDocument(j);\n                  assertEquals(0, sortedNumeric.count());\n                  assertFalse(sortedNumericBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", defaultCodecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", defaultCodecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", defaultCodecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = TestUtil.nextInt(random(), 1025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              Bits sortedNumericBits = r.getDocsWithField(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  sortedNumeric.setDocument(j);\n                  assertEquals(numValues.length, sortedNumeric.count());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.valueAt(k);\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                  assertTrue(sortedNumericBits.get(j));\n                } else if (sortedNumeric != null) {\n                  sortedNumeric.setDocument(j);\n                  assertEquals(0, sortedNumeric.count());\n                  assertFalse(sortedNumericBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["820c994610cafbde5892c00924bdf69fffaaf38f","d14ffaac9c4a4a2c750bf0cd956506802561e062","d12774649e77a6efccc3502c735c2893b52af6d6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = TestUtil.nextInt(random(), 1025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (LeafReaderContext context : ir.leaves()) {\n              LeafReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              Bits sortedNumericBits = r.getDocsWithField(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  sortedNumeric.setDocument(j);\n                  assertEquals(numValues.length, sortedNumeric.count());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.valueAt(k);\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                  assertTrue(sortedNumericBits.get(j));\n                } else if (sortedNumeric != null) {\n                  sortedNumeric.setDocument(j);\n                  assertEquals(0, sortedNumeric.count());\n                  assertFalse(sortedNumericBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = TestUtil.nextInt(random(), 1025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (AtomicReaderContext context : ir.leaves()) {\n              AtomicReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              Bits sortedNumericBits = r.getDocsWithField(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  sortedNumeric.setDocument(j);\n                  assertEquals(numValues.length, sortedNumeric.count());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.valueAt(k);\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                  assertTrue(sortedNumericBits.get(j));\n                } else if (sortedNumeric != null) {\n                  sortedNumeric.setDocument(j);\n                  assertEquals(0, sortedNumeric.count());\n                  assertFalse(sortedNumericBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a87ce200bba7d88024e2f1c4012212072ce8a5ae","date":1417031281,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  @Slow\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = TestUtil.nextInt(random(), 1025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (LeafReaderContext context : ir.leaves()) {\n              LeafReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              Bits sortedNumericBits = r.getDocsWithField(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  sortedNumeric.setDocument(j);\n                  assertEquals(numValues.length, sortedNumeric.count());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.valueAt(k);\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                  assertTrue(sortedNumericBits.get(j));\n                } else if (sortedNumeric != null) {\n                  sortedNumeric.setDocument(j);\n                  assertEquals(0, sortedNumeric.count());\n                  assertFalse(sortedNumericBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (all types + missing) */\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = TestUtil.nextInt(random(), 1025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (LeafReaderContext context : ir.leaves()) {\n              LeafReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              Bits sortedNumericBits = r.getDocsWithField(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  sortedNumeric.setDocument(j);\n                  assertEquals(numValues.length, sortedNumeric.count());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.valueAt(k);\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                  assertTrue(sortedNumericBits.get(j));\n                } else if (sortedNumeric != null) {\n                  sortedNumeric.setDocument(j);\n                  assertEquals(0, sortedNumeric.count());\n                  assertFalse(sortedNumericBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  @Slow\n  public void testThreads2() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = TestUtil.nextInt(random(), 1025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (LeafReaderContext context : ir.leaves()) {\n              LeafReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    assertEquals(j, binaries.nextDoc());\n                    BytesRef scratch = binaries.binaryValue();\n                    assertEquals(binaryValue, scratch);\n                    assertEquals(j, sorted.nextDoc());\n                    scratch = sorted.binaryValue();\n                    assertEquals(binaryValue, scratch);\n                  }\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(j, numerics.advance(j));\n                    assertEquals(Long.parseLong(number), numerics.longValue());\n                  }\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  assertEquals(j, sortedSet.nextDoc());\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  assertEquals(j, sortedNumeric.nextDoc());\n                  assertEquals(numValues.length, sortedNumeric.docValueCount());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.nextValue();\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (all types + missing) */\n  @Slow\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = TestUtil.nextInt(random(), 1025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (LeafReaderContext context : ir.leaves()) {\n              LeafReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              Bits sortedNumericBits = r.getDocsWithField(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  sortedNumeric.setDocument(j);\n                  assertEquals(numValues.length, sortedNumeric.count());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.valueAt(k);\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                  assertTrue(sortedNumericBits.get(j));\n                } else if (sortedNumeric != null) {\n                  sortedNumeric.setDocument(j);\n                  assertEquals(0, sortedNumeric.count());\n                  assertFalse(sortedNumericBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  @Slow\n  public void testThreads2() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = TestUtil.nextInt(random(), 1025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (LeafReaderContext context : ir.leaves()) {\n              LeafReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    assertEquals(j, binaries.nextDoc());\n                    BytesRef scratch = binaries.binaryValue();\n                    assertEquals(binaryValue, scratch);\n                    assertEquals(j, sorted.nextDoc());\n                    scratch = sorted.binaryValue();\n                    assertEquals(binaryValue, scratch);\n                  }\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(j, numerics.advance(j));\n                    assertEquals(Long.parseLong(number), numerics.longValue());\n                  }\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  assertEquals(j, sortedSet.nextDoc());\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  assertEquals(j, sortedNumeric.nextDoc());\n                  assertEquals(numValues.length, sortedNumeric.docValueCount());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.nextValue();\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (all types + missing) */\n  @Slow\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = TestUtil.nextInt(random(), 1025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (LeafReaderContext context : ir.leaves()) {\n              LeafReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              Bits sortedNumericBits = r.getDocsWithField(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  sortedNumeric.setDocument(j);\n                  assertEquals(numValues.length, sortedNumeric.count());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.valueAt(k);\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                  assertTrue(sortedNumericBits.get(j));\n                } else if (sortedNumeric != null) {\n                  sortedNumeric.setDocument(j);\n                  assertEquals(0, sortedNumeric.count());\n                  assertFalse(sortedNumericBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  @Slow\n  public void testThreads2() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = TestUtil.nextInt(random(), 1025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (LeafReaderContext context : ir.leaves()) {\n              LeafReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    assertEquals(j, binaries.nextDoc());\n                    BytesRef scratch = binaries.binaryValue();\n                    assertEquals(binaryValue, scratch);\n                    assertEquals(j, sorted.nextDoc());\n                    scratch = sorted.binaryValue();\n                    assertEquals(binaryValue, scratch);\n                  }\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(j, numerics.advance(j));\n                    assertEquals(Long.parseLong(number), numerics.longValue());\n                  }\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  assertEquals(j, sortedSet.nextDoc());\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  assertEquals(j, sortedNumeric.nextDoc());\n                  assertEquals(numValues.length, sortedNumeric.docValueCount());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.nextValue();\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (all types + missing) */\n  @Slow\n  public void testThreads2() throws Exception {\n    assumeTrue(\"Codec does not support getDocsWithField\", codecSupportsDocsWithField());\n    assumeTrue(\"Codec does not support SORTED_SET\", codecSupportsSortedSet());\n    assumeTrue(\"Codec does not support SORTED_NUMERIC\", codecSupportsSortedNumeric());\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = TestUtil.nextInt(random(), 1025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (LeafReaderContext context : ir.leaves()) {\n              LeafReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              Bits binaryBits = r.getDocsWithField(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              Bits sortedBits = r.getDocsWithField(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              Bits numericBits = r.getDocsWithField(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              Bits sortedSetBits = r.getDocsWithField(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              Bits sortedNumericBits = r.getDocsWithField(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    BytesRef scratch = binaries.get(j);\n                    assertEquals(binaryValue, scratch);\n                    scratch = sorted.get(j);\n                    assertEquals(binaryValue, scratch);\n                    assertTrue(binaryBits.get(j));\n                    assertTrue(sortedBits.get(j));\n                  }\n                } else if (binaries != null) {\n                  assertFalse(binaryBits.get(j));\n                  assertFalse(sortedBits.get(j));\n                  assertEquals(-1, sorted.getOrd(j));\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(Long.parseLong(number), numerics.get(j));\n                  }\n                } else if (numerics != null) {\n                  assertFalse(numericBits.get(j));\n                  assertEquals(0, numerics.get(j));\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  sortedSet.setDocument(j);\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertTrue(sortedSetBits.get(j));\n                } else if (sortedSet != null) {\n                  sortedSet.setDocument(j);\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                  assertFalse(sortedSetBits.get(j));\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  sortedNumeric.setDocument(j);\n                  assertEquals(numValues.length, sortedNumeric.count());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.valueAt(k);\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                  assertTrue(sortedNumericBits.get(j));\n                } else if (sortedNumeric != null) {\n                  sortedNumeric.setDocument(j);\n                  assertEquals(0, sortedNumeric.count());\n                  assertFalse(sortedNumericBits.get(j));\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreads2().mjava","sourceNew":"  /** Tests dv against stored fields with threads (all types + missing) */\n  @Nightly\n  public void testThreads2() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = TestUtil.nextInt(random(), 1025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (LeafReaderContext context : ir.leaves()) {\n              LeafReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    assertEquals(j, binaries.nextDoc());\n                    BytesRef scratch = binaries.binaryValue();\n                    assertEquals(binaryValue, scratch);\n                    assertEquals(j, sorted.nextDoc());\n                    scratch = sorted.binaryValue();\n                    assertEquals(binaryValue, scratch);\n                  }\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(j, numerics.advance(j));\n                    assertEquals(Long.parseLong(number), numerics.longValue());\n                  }\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  assertEquals(j, sortedSet.nextDoc());\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  assertEquals(j, sortedNumeric.nextDoc());\n                  assertEquals(numValues.length, sortedNumeric.docValueCount());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.nextValue();\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests dv against stored fields with threads (all types + missing) */\n  @Slow\n  public void testThreads2() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    Field idField = new StringField(\"id\", \"\", Field.Store.NO);\n    Field storedBinField = new StoredField(\"storedBin\", new byte[0]);\n    Field dvBinField = new BinaryDocValuesField(\"dvBin\", new BytesRef());\n    Field dvSortedField = new SortedDocValuesField(\"dvSorted\", new BytesRef());\n    Field storedNumericField = new StoredField(\"storedNum\", \"\");\n    Field dvNumericField = new NumericDocValuesField(\"dvNum\", 0);\n    \n    // index some docs\n    int numDocs = TestUtil.nextInt(random(), 1025, 2047);\n    for (int i = 0; i < numDocs; i++) {\n      idField.setStringValue(Integer.toString(i));\n      int length = TestUtil.nextInt(random(), 0, 8);\n      byte buffer[] = new byte[length];\n      random().nextBytes(buffer);\n      storedBinField.setBytesValue(buffer);\n      dvBinField.setBytesValue(buffer);\n      dvSortedField.setBytesValue(buffer);\n      long numericValue = random().nextLong();\n      storedNumericField.setStringValue(Long.toString(numericValue));\n      dvNumericField.setLongValue(numericValue);\n      Document doc = new Document();\n      doc.add(idField);\n      if (random().nextInt(4) > 0) {\n        doc.add(storedBinField);\n        doc.add(dvBinField);\n        doc.add(dvSortedField);\n      }\n      if (random().nextInt(4) > 0) {\n        doc.add(storedNumericField);\n        doc.add(dvNumericField);\n      }\n      int numSortedSetFields = random().nextInt(3);\n      Set<String> values = new TreeSet<>();\n      for (int j = 0; j < numSortedSetFields; j++) {\n        values.add(TestUtil.randomSimpleString(random()));\n      }\n      for (String v : values) {\n        doc.add(new SortedSetDocValuesField(\"dvSortedSet\", new BytesRef(v)));\n        doc.add(new StoredField(\"storedSortedSet\", v));\n      }\n      int numSortedNumericFields = random().nextInt(3);\n      Set<Long> numValues = new TreeSet<>();\n      for (int j = 0; j < numSortedNumericFields; j++) {\n        numValues.add(TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE));\n      }\n      for (Long l : numValues) {\n        doc.add(new SortedNumericDocValuesField(\"dvSortedNumeric\", l));\n        doc.add(new StoredField(\"storedSortedNumeric\", Long.toString(l)));\n      }\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    final DirectoryReader ir = DirectoryReader.open(dir);\n    int numThreads = TestUtil.nextInt(random(), 2, 7);\n    Thread threads[] = new Thread[numThreads];\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    \n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          try {\n            startingGun.await();\n            for (LeafReaderContext context : ir.leaves()) {\n              LeafReader r = context.reader();\n              BinaryDocValues binaries = r.getBinaryDocValues(\"dvBin\");\n              SortedDocValues sorted = r.getSortedDocValues(\"dvSorted\");\n              NumericDocValues numerics = r.getNumericDocValues(\"dvNum\");\n              SortedSetDocValues sortedSet = r.getSortedSetDocValues(\"dvSortedSet\");\n              SortedNumericDocValues sortedNumeric = r.getSortedNumericDocValues(\"dvSortedNumeric\");\n              for (int j = 0; j < r.maxDoc(); j++) {\n                BytesRef binaryValue = r.document(j).getBinaryValue(\"storedBin\");\n                if (binaryValue != null) {\n                  if (binaries != null) {\n                    assertEquals(j, binaries.nextDoc());\n                    BytesRef scratch = binaries.binaryValue();\n                    assertEquals(binaryValue, scratch);\n                    assertEquals(j, sorted.nextDoc());\n                    scratch = sorted.binaryValue();\n                    assertEquals(binaryValue, scratch);\n                  }\n                }\n               \n                String number = r.document(j).get(\"storedNum\");\n                if (number != null) {\n                  if (numerics != null) {\n                    assertEquals(j, numerics.advance(j));\n                    assertEquals(Long.parseLong(number), numerics.longValue());\n                  }\n                }\n                \n                String values[] = r.document(j).getValues(\"storedSortedSet\");\n                if (values.length > 0) {\n                  assertNotNull(sortedSet);\n                  assertEquals(j, sortedSet.nextDoc());\n                  for (int k = 0; k < values.length; k++) {\n                    long ord = sortedSet.nextOrd();\n                    assertTrue(ord != SortedSetDocValues.NO_MORE_ORDS);\n                    BytesRef value = sortedSet.lookupOrd(ord);\n                    assertEquals(values[k], value.utf8ToString());\n                  }\n                  assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n                }\n                \n                String numValues[] = r.document(j).getValues(\"storedSortedNumeric\");\n                if (numValues.length > 0) {\n                  assertNotNull(sortedNumeric);\n                  assertEquals(j, sortedNumeric.nextDoc());\n                  assertEquals(numValues.length, sortedNumeric.docValueCount());\n                  for (int k = 0; k < numValues.length; k++) {\n                    long v = sortedNumeric.nextValue();\n                    assertEquals(numValues[k], Long.toString(v));\n                  }\n                }\n              }\n            }\n            TestUtil.checkReader(ir);\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n      threads[i].start();\n    }\n    startingGun.countDown();\n    for (Thread t : threads) {\n      t.join();\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c9fb5f46e264daf5ba3860defe623a89d202dd87":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1":["820c994610cafbde5892c00924bdf69fffaaf38f"],"b873e6a2036c1deda886d1fcf6ba42c995dd15a0":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"487204058e79506a6ddba0065cfff810bc15b06a":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a87ce200bba7d88024e2f1c4012212072ce8a5ae":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a87ce200bba7d88024e2f1c4012212072ce8a5ae","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"820c994610cafbde5892c00924bdf69fffaaf38f":["487204058e79506a6ddba0065cfff810bc15b06a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d12774649e77a6efccc3502c735c2893b52af6d6"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a87ce200bba7d88024e2f1c4012212072ce8a5ae","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["b873e6a2036c1deda886d1fcf6ba42c995dd15a0","ad2a673349939e48652bf304cccf673c3412198f"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a87ce200bba7d88024e2f1c4012212072ce8a5ae"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"d12774649e77a6efccc3502c735c2893b52af6d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad2a673349939e48652bf304cccf673c3412198f":["b873e6a2036c1deda886d1fcf6ba42c995dd15a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"]},"commit2Childs":{"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a87ce200bba7d88024e2f1c4012212072ce8a5ae"],"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"b873e6a2036c1deda886d1fcf6ba42c995dd15a0":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","ad2a673349939e48652bf304cccf673c3412198f"],"487204058e79506a6ddba0065cfff810bc15b06a":["820c994610cafbde5892c00924bdf69fffaaf38f"],"a87ce200bba7d88024e2f1c4012212072ce8a5ae":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","d12774649e77a6efccc3502c735c2893b52af6d6"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"820c994610cafbde5892c00924bdf69fffaaf38f":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["487204058e79506a6ddba0065cfff810bc15b06a","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["b873e6a2036c1deda886d1fcf6ba42c995dd15a0"],"d12774649e77a6efccc3502c735c2893b52af6d6":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"ad2a673349939e48652bf304cccf673c3412198f":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c6f080a2ab37c464dd98db173f6cbf10dc74f211","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}