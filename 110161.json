{"path":"solr/core/src/test/org/apache/solr/internal/csv/ExtendedBufferedReaderTest#testReadLookahead1().mjava","commits":[{"id":"a62060bf935e54f2cf73861fbc773508ab49aeb9","date":1333411307,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/internal/csv/ExtendedBufferedReaderTest#testReadLookahead1().mjava","pathOld":"/dev/null","sourceNew":"  public void testReadLookahead1() throws Exception {\n   \n    assertEquals(ExtendedBufferedReader.END_OF_STREAM, getEBR(\"\").read());\n    ExtendedBufferedReader br = getEBR(\"1\\n2\\r3\\n\");\n    assertEquals('1', br.lookAhead());\n    assertEquals(ExtendedBufferedReader.UNDEFINED, br.readAgain());\n    assertEquals('1', br.read());\n    assertEquals('1', br.readAgain());\n\n    assertEquals(0, br.getLineNumber());\n    assertEquals('\\n', br.lookAhead());\n    assertEquals(0, br.getLineNumber());\n    assertEquals('1', br.readAgain());    \n    assertEquals('\\n', br.read());\n    assertEquals(1, br.getLineNumber());\n    assertEquals('\\n', br.readAgain());\n    assertEquals(1, br.getLineNumber());\n    \n    assertEquals('2', br.lookAhead());\n    assertEquals(1, br.getLineNumber());\n    assertEquals('\\n', br.readAgain());\n    assertEquals(1, br.getLineNumber());\n    assertEquals('2', br.read());\n    assertEquals('2', br.readAgain());\n    \n    assertEquals('\\r', br.lookAhead());\n    assertEquals('2', br.readAgain());\n    assertEquals('\\r', br.read());\n    assertEquals('\\r', br.readAgain());\n    \n    assertEquals('3', br.lookAhead());\n    assertEquals('\\r', br.readAgain());\n    assertEquals('3', br.read());\n    assertEquals('3', br.readAgain());\n    \n    assertEquals('\\n', br.lookAhead());\n    assertEquals(1, br.getLineNumber());\n    assertEquals('3', br.readAgain());\n    assertEquals('\\n', br.read());\n    assertEquals(2, br.getLineNumber());\n    assertEquals('\\n', br.readAgain());\n    assertEquals(2, br.getLineNumber());\n    \n    assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.lookAhead());\n    assertEquals('\\n', br.readAgain());\n    assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.read());\n    assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.readAgain());\n    assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.read());\n    assertEquals(ExtendedBufferedReader.END_OF_STREAM, br.lookAhead());\n \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a62060bf935e54f2cf73861fbc773508ab49aeb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a62060bf935e54f2cf73861fbc773508ab49aeb9"]},"commit2Childs":{"a62060bf935e54f2cf73861fbc773508ab49aeb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a62060bf935e54f2cf73861fbc773508ab49aeb9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}