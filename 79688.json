{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedLongValues.Builder#pack(long[],int,int,float).mjava","commits":[{"id":"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","date":1404226546,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedLongValues.Builder#pack(long[],int,int,float).mjava","pathOld":"/dev/null","sourceNew":"    void pack(long[] values, int numValues, int block, float acceptableOverheadRatio) {\n      assert numValues > 0;\n      // compute max delta\n      long minValue = values[0];\n      long maxValue = values[0];\n      for (int i = 1; i < numValues; ++i) {\n        minValue = Math.min(minValue, values[i]);\n        maxValue = Math.max(maxValue, values[i]);\n      }\n\n      // build a new packed reader\n      if (minValue == 0 && maxValue == 0) {\n        this.values[block] = new PackedInts.NullReader(numValues);\n      } else {\n        final int bitsRequired = minValue < 0 ? 64 : PackedInts.bitsRequired(maxValue);\n        final PackedInts.Mutable mutable = PackedInts.getMutable(numValues, bitsRequired, acceptableOverheadRatio);\n        for (int i = 0; i < numValues; ) {\n          i += mutable.set(i, values, i, numValues - i);\n        }\n        this.values[block] = mutable;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}