{"path":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"solr/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new SyntaxError(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new SyntaxError(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws ParseException {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new ParseException(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new SyntaxError(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new SyntaxError(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new SyntaxError(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new SyntaxError(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new SyntaxError(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<ValueSource>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new SyntaxError(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(FLAG_DEFAULT & ~FLAG_CONSUME_DELIMITER);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new SyntaxError(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new SyntaxError(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FunctionQParser#parse().mjava","sourceNew":"  @Override\n  public Query parse() throws SyntaxError {\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(FLAG_DEFAULT & ~FLAG_CONSUME_DELIMITER);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new SyntaxError(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","sourceOld":"  @Override\n  public Query parse() throws SyntaxError {\n    sp = new QueryParsing.StrParser(getString());\n\n    ValueSource vs = null;\n    List<ValueSource> lst = null;\n\n    for(;;) {\n      ValueSource valsource = parseValueSource(false);\n      sp.eatws();\n      if (!parseMultipleSources) {\n        vs = valsource; \n        break;\n      } else {\n        if (lst != null) {\n          lst.add(valsource);\n        } else {\n          vs = valsource;\n        }\n      }\n\n      // check if there is a \",\" separator\n      if (sp.peek() != ',') break;\n\n      consumeArgumentDelimiter();\n\n      if (lst == null) {\n        lst = new ArrayList<>(2);\n        lst.add(valsource);\n      }\n    }\n\n    if (parseToEnd && sp.pos < sp.end) {\n      throw new SyntaxError(\"Unexpected text after function: \" + sp.val.substring(sp.pos, sp.end));\n    }\n\n    if (lst != null) {\n      vs = new VectorValueSource(lst);\n    }\n\n    return new FunctionQuery(vs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["3cdb67100dc016748799a77218aa409478372d79","19275ba31e621f6da1b83bf13af75233876fd3d4"],"3cdb67100dc016748799a77218aa409478372d79":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","3cdb67100dc016748799a77218aa409478372d79"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3cdb67100dc016748799a77218aa409478372d79"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"3cdb67100dc016748799a77218aa409478372d79":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}