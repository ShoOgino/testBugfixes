{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionFieldReader#VersionFieldReader(VersionBlockTreeTermsReader,FieldInfo,long,Pair[BytesRef,Long],long,long,int,long,int,IndexInput,BytesRef,BytesRef).mjava","commits":[{"id":"6256acedd658c13275a01e4ba106a621956a22f6","date":1400192928,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionFieldReader#VersionFieldReader(VersionBlockTreeTermsReader,FieldInfo,long,Pair[BytesRef,Long],long,long,int,long,int,IndexInput,BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  VersionFieldReader(VersionBlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms, Pair<BytesRef,Long> rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n              long indexStartFP, int longsSize, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq; \n    this.sumDocFreq = sumDocFreq; \n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.longsSize = longsSize;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n\n    rootBlockFP = (new ByteArrayDataInput(rootCode.output1.bytes, rootCode.output1.offset, rootCode.output1.length)).readVLong() >>> VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n    if (indexIn != null) {\n      final IndexInput clone = indexIn.clone();\n      //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n      clone.seek(indexStartFP);\n      index = new FST<>(clone, VersionBlockTreeTermsWriter.getFSTOutputs());\n        \n      /*\n        if (false) {\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        }\n      */\n    } else {\n      index = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82ae1be1dc68d59626e4bb94d2029d309b20878","date":1400195857,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionFieldReader#VersionFieldReader(VersionBlockTreeTermsReader,FieldInfo,long,Pair[BytesRef,Long],long,long,int,long,int,IndexInput,BytesRef,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionFieldReader#VersionFieldReader(VersionBlockTreeTermsReader,FieldInfo,long,Pair[BytesRef,Long],long,long,int,long,int,IndexInput,BytesRef,BytesRef).mjava","sourceNew":"  VersionFieldReader(VersionBlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms, Pair<BytesRef,Long> rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n              long indexStartFP, int longsSize, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq; \n    this.sumDocFreq = sumDocFreq; \n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.longsSize = longsSize;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n\n    rootBlockFP = (new ByteArrayDataInput(rootCode.output1.bytes, rootCode.output1.offset, rootCode.output1.length)).readVLong() >>> VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n    if (indexIn != null) {\n      final IndexInput clone = indexIn.clone();\n      //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n      clone.seek(indexStartFP);\n      index = new FST<>(clone, VersionBlockTreeTermsWriter.FST_OUTPUTS);\n        \n      /*\n        if (false) {\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        }\n      */\n    } else {\n      index = null;\n    }\n  }\n\n","sourceOld":"  VersionFieldReader(VersionBlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms, Pair<BytesRef,Long> rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n              long indexStartFP, int longsSize, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq; \n    this.sumDocFreq = sumDocFreq; \n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.longsSize = longsSize;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n\n    rootBlockFP = (new ByteArrayDataInput(rootCode.output1.bytes, rootCode.output1.offset, rootCode.output1.length)).readVLong() >>> VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n    if (indexIn != null) {\n      final IndexInput clone = indexIn.clone();\n      //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n      clone.seek(indexStartFP);\n      index = new FST<>(clone, VersionBlockTreeTermsWriter.getFSTOutputs());\n        \n      /*\n        if (false) {\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        }\n      */\n    } else {\n      index = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionFieldReader#VersionFieldReader(VersionBlockTreeTermsReader,FieldInfo,long,Pair[BytesRef,Long],long,long,int,long,int,IndexInput,BytesRef,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionFieldReader#VersionFieldReader(VersionBlockTreeTermsReader,FieldInfo,long,Pair[BytesRef,Long],long,long,int,long,int,IndexInput,BytesRef,BytesRef).mjava","sourceNew":"  VersionFieldReader(VersionBlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms, Pair<BytesRef,Long> rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n              long indexStartFP, int longsSize, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq; \n    this.sumDocFreq = sumDocFreq; \n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.longsSize = longsSize;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n\n    rootBlockFP = (new ByteArrayDataInput(rootCode.output1.bytes, rootCode.output1.offset, rootCode.output1.length)).readVLong() >>> VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n    if (indexIn != null) {\n      final IndexInput clone = indexIn.clone();\n      //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n      clone.seek(indexStartFP);\n      index = new FST<>(clone, VersionBlockTreeTermsWriter.FST_OUTPUTS);\n        \n      /*\n        if (false) {\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        }\n      */\n    } else {\n      index = null;\n    }\n  }\n\n","sourceOld":"  VersionFieldReader(VersionBlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms, Pair<BytesRef,Long> rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n              long indexStartFP, int longsSize, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq; \n    this.sumDocFreq = sumDocFreq; \n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.longsSize = longsSize;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n\n    rootBlockFP = (new ByteArrayDataInput(rootCode.output1.bytes, rootCode.output1.offset, rootCode.output1.length)).readVLong() >>> VersionBlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n    if (indexIn != null) {\n      final IndexInput clone = indexIn.clone();\n      //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n      clone.seek(indexStartFP);\n      index = new FST<>(clone, VersionBlockTreeTermsWriter.FST_OUTPUTS);\n        \n      /*\n        if (false) {\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        }\n      */\n    } else {\n      index = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["e82ae1be1dc68d59626e4bb94d2029d309b20878"],"6256acedd658c13275a01e4ba106a621956a22f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82ae1be1dc68d59626e4bb94d2029d309b20878":["6256acedd658c13275a01e4ba106a621956a22f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":[],"6256acedd658c13275a01e4ba106a621956a22f6":["e82ae1be1dc68d59626e4bb94d2029d309b20878"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6256acedd658c13275a01e4ba106a621956a22f6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e82ae1be1dc68d59626e4bb94d2029d309b20878":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}