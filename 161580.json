{"path":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","sourceNew":"  /** we fake a double test using long2double conversion of NumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq=NumericRangeQuery.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n    \n    Filter tf=NumericRangeFilter.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    tTopDocs = searcher.search(new MatchAllDocsQuery(), tf, 1);\n    assertEquals(\"Returned count of range filter must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","sourceOld":"  /** we fake a double test using long2double conversion of NumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq=NumericRangeQuery.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n    \n    Filter tf=NumericRangeFilter.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    tTopDocs = searcher.search(new MatchAllDocsQuery(), tf, 1);\n    assertEquals(\"Returned count of range filter must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","sourceNew":"  /** we fake a double test using long2double conversion of NumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq=NumericRangeQuery.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n    \n    Filter tf=NumericRangeFilter.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    tTopDocs = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), tf), 1);\n    assertEquals(\"Returned count of range filter must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","sourceOld":"  /** we fake a double test using long2double conversion of NumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq=NumericRangeQuery.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n    \n    Filter tf=NumericRangeFilter.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    tTopDocs = searcher.search(new MatchAllDocsQuery(), tf, 1);\n    assertEquals(\"Returned count of range filter must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","sourceNew":"  /** we fake a double test using long2double conversion of NumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq=NumericRangeQuery.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","sourceOld":"  /** we fake a double test using long2double conversion of NumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq=NumericRangeQuery.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n    \n    Filter tf=NumericRangeFilter.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    tTopDocs = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), tf), 1);\n    assertEquals(\"Returned count of range filter must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","sourceNew":"  /** we fake a double test using long2double conversion of NumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq=NumericRangeQuery.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","sourceOld":"  /** we fake a double test using long2double conversion of NumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq=NumericRangeQuery.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n    \n    Filter tf=NumericRangeFilter.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    tTopDocs = searcher.search(new FilteredQuery(new MatchAllDocsQuery(), tf), 1);\n    assertEquals(\"Returned count of range filter must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","sourceNew":"  /** we fake a double test using long2double conversion of LegacyNumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq= LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n        LegacyNumericUtils.sortableLongToDouble(lower), LegacyNumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","sourceOld":"  /** we fake a double test using long2double conversion of NumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq=NumericRangeQuery.newDoubleRange(field, precisionStep,\n      NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","bugFix":null,"bugIntro":["a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","sourceNew":"  /** we fake a double test using long2double conversion of LegacyNumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq= LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n        NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","sourceOld":"  /** we fake a double test using long2double conversion of LegacyNumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq= LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n        LegacyNumericUtils.sortableLongToDouble(lower), LegacyNumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","bugFix":["770342641f7b505eaa8dccdc666158bff2419109"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","sourceNew":"  /** we fake a double test using long2double conversion of LegacyNumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq= LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n        NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","sourceOld":"  /** we fake a double test using long2double conversion of LegacyNumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq= LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n        LegacyNumericUtils.sortableLongToDouble(lower), LegacyNumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testDoubleRange(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","sourceNew":"  /** we fake a double test using long2double conversion of LegacyNumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq= LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n        NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","sourceOld":"  /** we fake a double test using long2double conversion of LegacyNumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq= LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n        NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testDoubleRange(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","sourceNew":"  /** we fake a double test using long2double conversion of LegacyNumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq= LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n        NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","sourceOld":"  /** we fake a double test using long2double conversion of LegacyNumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq= LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n        NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testDoubleRange(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","sourceNew":"  /** we fake a double test using long2double conversion of LegacyNumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq= LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n        NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","sourceOld":"  /** we fake a double test using long2double conversion of LegacyNumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq= LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n        NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery64#testDoubleRange(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testDoubleRange(int).mjava","sourceNew":"  /** we fake a double test using long2double conversion of LegacyNumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq= LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n        NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","sourceOld":"  /** we fake a double test using long2double conversion of LegacyNumericUtils */\n  private void testDoubleRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final long lower=-1000L, upper=+2000L;\n    \n    Query tq= LegacyNumericRangeQuery.newDoubleRange(field, precisionStep,\n        NumericUtils.sortableLongToDouble(lower), NumericUtils.sortableLongToDouble(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2713584a660051cd646423be682771e3bbd99985":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"770342641f7b505eaa8dccdc666158bff2419109":["2713584a660051cd646423be682771e3bbd99985"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","2713584a660051cd646423be682771e3bbd99985"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["770342641f7b505eaa8dccdc666158bff2419109","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2713584a660051cd646423be682771e3bbd99985":["770342641f7b505eaa8dccdc666158bff2419109","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"770342641f7b505eaa8dccdc666158bff2419109":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["2713584a660051cd646423be682771e3bbd99985","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}