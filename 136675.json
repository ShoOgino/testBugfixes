{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","commits":[{"id":"b6acc9f298b0cf9627fc08f1909b6e092b4d4a4d","date":1237276209,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", doc.getFieldValue(\"desc\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164","6784d0cc613dc1ee97030eaaa5e0754edc22d164","2651a1ecbc1d5eb7d275d05442de237f2763b730"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2651a1ecbc1d5eb7d275d05442de237f2763b730","date":1259215788,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", doc.getFieldValue(\"desc\"));\n  }\n\n","bugFix":["b6acc9f298b0cf9627fc08f1909b6e092b4d4a4d"],"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164","6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"command\", \"full-import\");\n    params.set(\"clean\", \"false\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    ModifiableSolrParams qparams = new ModifiableSolrParams();\n    qparams.add(\"q\", \"*:*\");\n    QueryResponse qres = solrServer.query(qparams);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(2, results.getNumFound());\n    SolrDocument doc = results.get(0);\n    assertEquals(\"1\", doc.getFieldValue(\"id\"));\n    assertEquals(\"Hello C1\", ((List)doc.getFieldValue(\"desc\")).get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b6acc9f298b0cf9627fc08f1909b6e092b4d4a4d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"2651a1ecbc1d5eb7d275d05442de237f2763b730":["b6acc9f298b0cf9627fc08f1909b6e092b4d4a4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2651a1ecbc1d5eb7d275d05442de237f2763b730"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b6acc9f298b0cf9627fc08f1909b6e092b4d4a4d":["2651a1ecbc1d5eb7d275d05442de237f2763b730"],"2651a1ecbc1d5eb7d275d05442de237f2763b730":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["b6acc9f298b0cf9627fc08f1909b6e092b4d4a4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}