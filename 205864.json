{"path":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","commits":[{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"   // called from parser\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws SyntaxError {\n    Query q;\n\n    String termImage=discardEscapeChar(term.image);\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new SyntaxError(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new SyntaxError(\"Fractional edit distances are not allowed!\");\n      }\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      q = getFieldQuery(qfield, termImage, false);\n    }\n    return q;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"   // called from parser\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws SyntaxError {\n    Query q;\n\n    String termImage=discardEscapeChar(term.image);\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new SyntaxError(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new SyntaxError(\"Fractional edit distances are not allowed!\");\n      }\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      q = getFieldQuery(qfield, termImage, false);\n    }\n    return q;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b6b0848a4750fd6d81f9e4bd504eecd4205eb11","date":1362244723,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","sourceNew":"   // called from parser\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws SyntaxError {\n    Query q;\n\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new SyntaxError(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new SyntaxError(\"Fractional edit distances are not allowed!\");\n      }\n      String termImage=discardEscapeChar(term.image);\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      String termImage=discardEscapeChar(term.image);\n      q = getFieldQuery(qfield, termImage, false);\n    }\n    return q;\n  }\n\n","sourceOld":"   // called from parser\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws SyntaxError {\n    Query q;\n\n    String termImage=discardEscapeChar(term.image);\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new SyntaxError(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new SyntaxError(\"Fractional edit distances are not allowed!\");\n      }\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      q = getFieldQuery(qfield, termImage, false);\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68c354ba50abc8ed5c5fe98901e61d68f93952bb","date":1479836000,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","sourceNew":"   // called from parser\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws SyntaxError {\n    Query q;\n\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new SyntaxError(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new SyntaxError(\"Fractional edit distances are not allowed!\");\n      }\n      String termImage=discardEscapeChar(term.image);\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      String termImage=discardEscapeChar(term.image);\n      q = getFieldQuery(qfield, termImage, false, true);\n    }\n    return q;\n  }\n\n","sourceOld":"   // called from parser\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws SyntaxError {\n    Query q;\n\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new SyntaxError(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new SyntaxError(\"Fractional edit distances are not allowed!\");\n      }\n      String termImage=discardEscapeChar(term.image);\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      String termImage=discardEscapeChar(term.image);\n      q = getFieldQuery(qfield, termImage, false);\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","sourceNew":"   // called from parser\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws SyntaxError {\n    Query q;\n\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new SyntaxError(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new SyntaxError(\"Fractional edit distances are not allowed!\");\n      }\n      String termImage=discardEscapeChar(term.image);\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      String termImage=discardEscapeChar(term.image);\n      q = getFieldQuery(qfield, termImage, false, true);\n    }\n    return q;\n  }\n\n","sourceOld":"   // called from parser\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws SyntaxError {\n    Query q;\n\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new SyntaxError(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new SyntaxError(\"Fractional edit distances are not allowed!\");\n      }\n      String termImage=discardEscapeChar(term.image);\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      String termImage=discardEscapeChar(term.image);\n      q = getFieldQuery(qfield, termImage, false);\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","date":1489572490,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","sourceNew":"   // called from parser\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws SyntaxError {\n    Query q;\n\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.parseFloat(fuzzySlop.image.substring(1));\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new SyntaxError(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new SyntaxError(\"Fractional edit distances are not allowed!\");\n      }\n      String termImage=discardEscapeChar(term.image);\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      String termImage=discardEscapeChar(term.image);\n      q = getFieldQuery(qfield, termImage, false, true);\n    }\n    return q;\n  }\n\n","sourceOld":"   // called from parser\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws SyntaxError {\n    Query q;\n\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new SyntaxError(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new SyntaxError(\"Fractional edit distances are not allowed!\");\n      }\n      String termImage=discardEscapeChar(term.image);\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      String termImage=discardEscapeChar(term.image);\n      q = getFieldQuery(qfield, termImage, false, true);\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55e0b3830b94d1abce4e32e98cfc875d5b14e76f","date":1489651910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","sourceNew":"   // called from parser\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws SyntaxError {\n    Query q;\n\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.parseFloat(fuzzySlop.image.substring(1));\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new SyntaxError(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new SyntaxError(\"Fractional edit distances are not allowed!\");\n      }\n      String termImage=discardEscapeChar(term.image);\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      String termImage=discardEscapeChar(term.image);\n      q = getFieldQuery(qfield, termImage, false, true);\n    }\n    return q;\n  }\n\n","sourceOld":"   // called from parser\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws SyntaxError {\n    Query q;\n\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new SyntaxError(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new SyntaxError(\"Fractional edit distances are not allowed!\");\n      }\n      String termImage=discardEscapeChar(term.image);\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      String termImage=discardEscapeChar(term.image);\n      q = getFieldQuery(qfield, termImage, false, true);\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","sourceNew":"   // called from parser\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws SyntaxError {\n    Query q;\n\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.parseFloat(fuzzySlop.image.substring(1));\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new SyntaxError(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new SyntaxError(\"Fractional edit distances are not allowed!\");\n      }\n      String termImage=discardEscapeChar(term.image);\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      String termImage=discardEscapeChar(term.image);\n      q = getFieldQuery(qfield, termImage, false, true);\n    }\n    return q;\n  }\n\n","sourceOld":"   // called from parser\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws SyntaxError {\n    Query q;\n\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new SyntaxError(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new SyntaxError(\"Fractional edit distances are not allowed!\");\n      }\n      String termImage=discardEscapeChar(term.image);\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      String termImage=discardEscapeChar(term.image);\n      q = getFieldQuery(qfield, termImage, false, true);\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"727bb765ff2542275f6d31f67be18d7104bae148":["3b6b0848a4750fd6d81f9e4bd504eecd4205eb11","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"3cdb67100dc016748799a77218aa409478372d79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb67100dc016748799a77218aa409478372d79"],"3b6b0848a4750fd6d81f9e4bd504eecd4205eb11":["3cdb67100dc016748799a77218aa409478372d79"],"ab68488225b6a6c357dda72ed11dedca9914a192":["68c354ba50abc8ed5c5fe98901e61d68f93952bb","55e0b3830b94d1abce4e32e98cfc875d5b14e76f"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["3b6b0848a4750fd6d81f9e4bd504eecd4205eb11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8"]},"commit2Childs":{"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["ab68488225b6a6c357dda72ed11dedca9914a192"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","3b6b0848a4750fd6d81f9e4bd504eecd4205eb11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3b6b0848a4750fd6d81f9e4bd504eecd4205eb11":["727bb765ff2542275f6d31f67be18d7104bae148","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","55e0b3830b94d1abce4e32e98cfc875d5b14e76f","727bb765ff2542275f6d31f67be18d7104bae148","ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","407687e67faf6e1f02a211ca078d8e3eed631027","ab68488225b6a6c357dda72ed11dedca9914a192","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}