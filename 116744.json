{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#addSortedField(FieldInfo,DocValuesProducer).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#addSortedField(FieldInfo,DocValuesProducer).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"    @Override\n    public void addSortedField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n      SortedDocValues values = valuesProducer.getSorted(field);\n\n      int valueCount = values.getValueCount();\n      assert valueCount <= maxDoc;\n      BytesRef lastValue = null;\n      for (int ord=0;ord<valueCount;ord++) {\n        BytesRef b = values.lookupOrd(ord);\n        assert b != null;\n        assert b.isValid();\n        if (ord > 0) {\n          assert b.compareTo(lastValue) > 0;\n        }\n        lastValue = BytesRef.deepCopyOf(b);\n      }\n      \n      FixedBitSet seenOrds = new FixedBitSet(valueCount);\n      \n      int docID;\n      int lastDocID = -1;\n      while ((docID = values.nextDoc()) != NO_MORE_DOCS) {\n        assert docID >= 0 && docID < maxDoc;\n        assert docID > lastDocID;\n        lastDocID = docID;\n        int ord = values.ordValue();\n        assert ord >= 0 && ord < valueCount;\n        seenOrds.set(ord);\n      }\n      \n      assert seenOrds.cardinality() == valueCount;\n      in.addSortedField(field, valuesProducer);\n    }\n\n","sourceOld":"    @Override\n    public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n      int valueCount = 0;\n      BytesRef lastValue = null;\n      for (BytesRef b : values) {\n        assert b != null;\n        assert b.isValid();\n        if (valueCount > 0) {\n          assert b.compareTo(lastValue) > 0;\n        }\n        lastValue = BytesRef.deepCopyOf(b);\n        valueCount++;\n      }\n      assert valueCount <= maxDoc;\n      \n      FixedBitSet seenOrds = new FixedBitSet(valueCount);\n      \n      int count = 0;\n      for (Number v : docToOrd) {\n        assert v != null;\n        int ord = v.intValue();\n        assert ord >= -1 && ord < valueCount;\n        if (ord >= 0) {\n          seenOrds.set(ord);\n        }\n        count++;\n      }\n      \n      assert count == maxDoc;\n      assert seenOrds.cardinality() == valueCount;\n      TestUtil.checkIterator(values.iterator(), valueCount, false);\n      TestUtil.checkIterator(docToOrd.iterator(), maxDoc, false);\n      in.addSortedField(field, values, docToOrd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#addSortedField(FieldInfo,DocValuesProducer).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void addSortedField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n      SortedDocValues values = valuesProducer.getSorted(field);\n\n      int valueCount = values.getValueCount();\n      assert valueCount <= maxDoc;\n      BytesRef lastValue = null;\n      for (int ord=0;ord<valueCount;ord++) {\n        BytesRef b = values.lookupOrd(ord);\n        assert b != null;\n        assert b.isValid();\n        if (ord > 0) {\n          assert b.compareTo(lastValue) > 0;\n        }\n        lastValue = BytesRef.deepCopyOf(b);\n      }\n      \n      FixedBitSet seenOrds = new FixedBitSet(valueCount);\n      \n      int docID;\n      int lastDocID = -1;\n      while ((docID = values.nextDoc()) != NO_MORE_DOCS) {\n        assert docID >= 0 && docID < maxDoc;\n        assert docID > lastDocID;\n        lastDocID = docID;\n        int ord = values.ordValue();\n        assert ord >= 0 && ord < valueCount;\n        seenOrds.set(ord);\n      }\n      \n      assert seenOrds.cardinality() == valueCount;\n      in.addSortedField(field, valuesProducer);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#addSortedField(FieldInfo,DocValuesProducer).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void addSortedField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n      SortedDocValues values = valuesProducer.getSorted(field);\n\n      int valueCount = values.getValueCount();\n      assert valueCount <= maxDoc;\n      BytesRef lastValue = null;\n      for (int ord=0;ord<valueCount;ord++) {\n        BytesRef b = values.lookupOrd(ord);\n        assert b != null;\n        assert b.isValid();\n        if (ord > 0) {\n          assert b.compareTo(lastValue) > 0;\n        }\n        lastValue = BytesRef.deepCopyOf(b);\n      }\n      \n      FixedBitSet seenOrds = new FixedBitSet(valueCount);\n      \n      int docID;\n      int lastDocID = -1;\n      while ((docID = values.nextDoc()) != NO_MORE_DOCS) {\n        assert docID >= 0 && docID < maxDoc;\n        assert docID > lastDocID;\n        lastDocID = docID;\n        int ord = values.ordValue();\n        assert ord >= 0 && ord < valueCount;\n        seenOrds.set(ord);\n      }\n      \n      assert seenOrds.cardinality() == valueCount;\n      in.addSortedField(field, valuesProducer);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}