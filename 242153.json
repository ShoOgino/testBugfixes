{"path":"lucene/src/test/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","commits":[{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segmentInfos2.range(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/MockRandomMergePolicy#findMerges(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segmentInfos2.range(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(SegmentInfos segmentInfos) {\n    MergeSpecification mergeSpec = null;\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos);\n\n    if (segmentInfos.size() > 1 && random.nextInt(5) == 3) {\n      \n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n\n      // TODO: sometimes make more than 1 merge?\n      mergeSpec = new MergeSpecification();\n      final int segsToMerge = _TestUtil.nextInt(random, 1, segmentInfos.size());\n      mergeSpec.add(new OneMerge(segmentInfos2.range(0, segsToMerge)));\n    }\n\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c19f985e36a65cc969e8e564fe337a0d41512075":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["c19f985e36a65cc969e8e564fe337a0d41512075"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c19f985e36a65cc969e8e564fe337a0d41512075"],"c19f985e36a65cc969e8e564fe337a0d41512075":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}