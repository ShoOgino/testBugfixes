{"path":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","commits":[{"id":"c2d72c3e6563e08675f940d4c74139309c5e3db2","date":1419411068,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","pathOld":"/dev/null","sourceNew":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'create' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"x\", \"b\"),\n        \"B val\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x\",\n        cloudClient,\n        Arrays.asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        Arrays.asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'create' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=y\",\n        cloudClient,\n        Arrays.asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        Arrays.asList(\"params\", \"b\"),\n        \"BY val\",\n        5);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        Arrays.asList(\"params\", \"a\"),\n        null,\n        5);\n\n    payload = \" {\\n\" +\n        \"  'modify' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"e\"),\n        \"EY val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"c\"),\n        null,\n        10);\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","01ff1eeea394f76a66d8998b861d33d8546b8ca4","93f558d9f0b5a234a28dcc95036e388fcbbadaf7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"026598a4c9c5b475f0028a513c0128db067d4a33","date":1419596855,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"x\", \"b\"),\n        \"B val\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x\",\n        cloudClient,\n        Arrays.asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        Arrays.asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=y\",\n        cloudClient,\n        Arrays.asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        Arrays.asList(\"params\", \"b\"),\n        \"BY val\",\n        5);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        Arrays.asList(\"params\", \"a\"),\n        null,\n        5);\n\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"e\"),\n        \"EY val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"c\"),\n        null,\n        10);\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'create' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"x\", \"b\"),\n        \"B val\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x\",\n        cloudClient,\n        Arrays.asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        Arrays.asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'create' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=y\",\n        cloudClient,\n        Arrays.asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        Arrays.asList(\"params\", \"b\"),\n        \"BY val\",\n        5);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        Arrays.asList(\"params\", \"a\"),\n        null,\n        5);\n\n    payload = \" {\\n\" +\n        \"  'modify' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"e\"),\n        \"EY val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"c\"),\n        null,\n        10);\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"262fe6f976cbf6dc45e8e1975fb04dd1b3d99149","date":1421139923,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"x\", \"b\"),\n        \"B val\",\n        10);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x\",\n        cloudClient,\n        Arrays.asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        Arrays.asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        Arrays.asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        Arrays.asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=y\",\n        cloudClient,\n        Arrays.asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        Arrays.asList(\"params\", \"b\"),\n        \"BY val\",\n        5);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json&useParams=y\",\n        cloudClient,\n        Arrays.asList(\"params\", \"a\"),\n        null,\n        5);\n\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"e\"),\n        \"EY val\",\n        10);\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"c\"),\n        null,\n        10);\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        Arrays.asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2d15e642ab6ee7c6c468ac4c314ec0ed077df2b","date":1421335218,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList( \"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01ff1eeea394f76a66d8998b861d33d8546b8ca4","date":1422517232,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList( \"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\")  , asList(\"params\", \"d\"));\n    compareValues(result, \"20\"  , asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList( \"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","bugFix":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93f558d9f0b5a234a28dcc95036e388fcbbadaf7","date":1446466934,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList( \"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\")  , asList(\"params\", \"d\"));\n    compareValues(result, \"20\"  , asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList( \"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\")  , asList(\"params\", \"d\"));\n    compareValues(result, \"20\"  , asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","bugFix":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList( \"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\")  , asList(\"params\", \"d\"));\n    compareValues(result, \"20\"  , asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList( \"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\")  , asList(\"params\", \"d\"));\n    compareValues(result, \"20\"  , asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList( \"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\")  , asList(\"params\", \"d\"));\n    compareValues(result, \"20\"  , asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList( \"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\")  , asList(\"params\", \"d\"));\n    compareValues(result, \"20\"  , asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList( \"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\")  , asList(\"params\", \"d\"));\n    compareValues(result, \"20\"  , asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config?wt=json\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList( \"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay?wt=json\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1?wt=json\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?wt=json&useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\")  , asList(\"params\", \"d\"));\n    compareValues(result, \"20\"  , asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params?wt=json\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params?wt=json\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0853c291617e0f9d0474b720bf609eb350e9225c","date":1514464265,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = randomRestTestHarness();\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList( \"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n\n    writeHarness = randomRestTestHarness();\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\")  , asList(\"params\", \"d\"));\n    compareValues(result, \"20\"  , asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList( \"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n\n    writeHarness = restTestHarnesses.get(random().nextInt(restTestHarnesses.size()));\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\")  , asList(\"params\", \"d\"));\n    compareValues(result, \"20\"  , asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = randomRestTestHarness();\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        TIMEOUT_S);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        TIMEOUT_S);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        TIMEOUT_S);\n    compareValues(result, \"\", asList( \"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        TIMEOUT_S);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        TIMEOUT_S);\n\n\n\n    writeHarness = randomRestTestHarness();\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        TIMEOUT_S);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        TIMEOUT_S);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\")  , asList(\"params\", \"d\"));\n    compareValues(result, \"20\"  , asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        TIMEOUT_S);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        TIMEOUT_S);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        TIMEOUT_S);\n\n\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = randomRestTestHarness();\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        10);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n    compareValues(result, \"\", asList( \"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        5);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        10);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        5);\n\n\n\n    writeHarness = randomRestTestHarness();\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        10);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        5);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\")  , asList(\"params\", \"d\"));\n    compareValues(result, \"20\"  , asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        10);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        10);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        10);\n\n\n  }\n\n","bugFix":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fb8cae56bd31a827317dd604b1169743f9475f2","date":1571413113,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = randomRestTestHarness();\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        TIMEOUT_S);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        TIMEOUT_S);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        TIMEOUT_S);\n    compareValues(result, \"\", asList( \"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        TIMEOUT_S);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        TIMEOUT_S);\n\n\n\n    writeHarness = randomRestTestHarness();\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        TIMEOUT_S);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        TIMEOUT_S);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\")  , asList(\"params\", \"d\"));\n    compareValues(result, \"20\"  , asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        TIMEOUT_S);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        TIMEOUT_S);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        TIMEOUT_S);\n\n    payload = \" {'unset' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommandExpectFailure(\n        writeHarness,\"/config/params\", payload, \"Unknown operation 'unset'\");\n\n    // deleting already deleted one should fail\n    // error message should contain parameter set name\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommandExpectFailure(\n        writeHarness,\"/config/params\", payload, \"Could not delete. No such params 'y' exist\");\n\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = randomRestTestHarness();\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        TIMEOUT_S);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        TIMEOUT_S);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        TIMEOUT_S);\n    compareValues(result, \"\", asList( \"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        TIMEOUT_S);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        TIMEOUT_S);\n\n\n\n    writeHarness = randomRestTestHarness();\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        TIMEOUT_S);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        TIMEOUT_S);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\")  , asList(\"params\", \"d\"));\n    compareValues(result, \"20\"  , asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        TIMEOUT_S);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        TIMEOUT_S);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        TIMEOUT_S);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerCloud#testReqParams().mjava","sourceNew":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = randomRestTestHarness();\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        TIMEOUT_S);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        TIMEOUT_S);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        TIMEOUT_S);\n    compareValues(result, \"\", asList( \"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        TIMEOUT_S);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        TIMEOUT_S);\n\n\n\n    writeHarness = randomRestTestHarness();\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        TIMEOUT_S);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        TIMEOUT_S);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\")  , asList(\"params\", \"d\"));\n    compareValues(result, \"20\"  , asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        TIMEOUT_S);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        TIMEOUT_S);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        TIMEOUT_S);\n\n    payload = \" {'unset' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommandExpectFailure(\n        writeHarness,\"/config/params\", payload, \"Unknown operation 'unset'\");\n\n    // deleting already deleted one should fail\n    // error message should contain parameter set name\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommandExpectFailure(\n        writeHarness,\"/config/params\", payload, \"Could not delete. No such params 'y' exist\");\n\n  }\n\n","sourceOld":"  private void testReqParams() throws Exception{\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n\n    RestTestHarness writeHarness = randomRestTestHarness();\n    String payload = \" {\\n\" +\n        \"  'set' : {'x': {\" +\n        \"                    'a':'A val',\\n\" +\n        \"                    'b': 'B val'}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    Map result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"x\", \"a\"),\n        \"A val\",\n        TIMEOUT_S);\n    compareValues(result, \"B val\", asList(\"response\", \"params\", \"x\", \"b\"));\n\n    payload = \"{\\n\" +\n        \"'update-requesthandler' : { 'name' : '/dump', 'class': 'org.apache.solr.handler.DumpRequestHandler' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness, \"/config\", payload);\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump\", \"name\"),\n        \"/dump\",\n        TIMEOUT_S);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        TIMEOUT_S);\n    compareValues(result, \"\", asList( \"params\", RequestParams.USEPARAM));\n\n    TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=x&a=fomrequest\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"fomrequest\",\n        TIMEOUT_S);\n\n    payload = \"{\\n\" +\n        \"'create-requesthandler' : { 'name' : '/dump1', 'class': 'org.apache.solr.handler.DumpRequestHandler', 'useParams':'x' }\\n\" +\n        \"}\";\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/overlay\",\n        cloudClient,\n        asList(\"overlay\", \"requestHandler\", \"/dump1\", \"name\"),\n        \"/dump1\",\n        TIMEOUT_S);\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump1\",\n        cloudClient,\n        asList(\"params\", \"a\"),\n        \"A val\",\n        TIMEOUT_S);\n\n\n\n    writeHarness = randomRestTestHarness();\n    payload = \" {\\n\" +\n        \"  'set' : {'y':{\\n\" +\n        \"                'c':'CY val',\\n\" +\n        \"                'b': 'BY val', \" +\n        \"                'i': 20, \" +\n        \"                'd': ['val 1', 'val 2']}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n   result =  TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val\",\n        TIMEOUT_S);\n    compareValues(result, 20l, asList(\"response\", \"params\", \"y\", \"i\"));\n\n\n    result = TestSolrConfigHandler.testForResponseElement(null,\n        urls.get(random().nextInt(urls.size())),\n        \"/dump?useParams=y\",\n        cloudClient,\n        asList(\"params\", \"c\"),\n        \"CY val\",\n        TIMEOUT_S);\n    compareValues(result, \"BY val\", asList(\"params\", \"b\"));\n    compareValues(result, null, asList(\"params\", \"a\"));\n    compareValues(result, Arrays.asList(\"val 1\", \"val 2\")  , asList(\"params\", \"d\"));\n    compareValues(result, \"20\"  , asList(\"params\", \"i\"));\n    payload = \" {\\n\" +\n        \"  'update' : {'y': {\\n\" +\n        \"                'c':'CY val modified',\\n\" +\n        \"                'e':'EY val',\\n\" +\n        \"                'b': 'BY val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"c\"),\n        \"CY val modified\",\n        TIMEOUT_S);\n    compareValues(result, \"EY val\", asList(\"response\", \"params\", \"y\", \"e\"));\n\n\n    payload = \" {\\n\" +\n        \"  'set' : {'y': {\\n\" +\n        \"                'p':'P val',\\n\" +\n        \"                'q': 'Q val'\" +\n        \"}\\n\" +\n        \"             }\\n\" +\n        \"  }\";\n\n\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    result = TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        \"P val\",\n        TIMEOUT_S);\n    compareValues(result, null, asList(\"response\", \"params\", \"y\", \"c\"));\n\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommand(writeHarness,\"/config/params\", payload);\n    TestSolrConfigHandler.testForResponseElement(\n        null,\n        urls.get(random().nextInt(urls.size())),\n        \"/config/params\",\n        cloudClient,\n        asList(\"response\", \"params\", \"y\", \"p\"),\n        null,\n        TIMEOUT_S);\n\n    payload = \" {'unset' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommandExpectFailure(\n        writeHarness,\"/config/params\", payload, \"Unknown operation 'unset'\");\n\n    // deleting already deleted one should fail\n    // error message should contain parameter set name\n    payload = \" {'delete' : 'y'}\";\n    TestSolrConfigHandler.runConfigCommandExpectFailure(\n        writeHarness,\"/config/params\", payload, \"Could not delete. No such params 'y' exist\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0853c291617e0f9d0474b720bf609eb350e9225c"],"01ff1eeea394f76a66d8998b861d33d8546b8ca4":["e2d15e642ab6ee7c6c468ac4c314ec0ed077df2b"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["93f558d9f0b5a234a28dcc95036e388fcbbadaf7","ac1e7fa558287a811ea07634d815ee7b1c541284"],"262fe6f976cbf6dc45e8e1975fb04dd1b3d99149":["026598a4c9c5b475f0028a513c0128db067d4a33"],"e2d15e642ab6ee7c6c468ac4c314ec0ed077df2b":["262fe6f976cbf6dc45e8e1975fb04dd1b3d99149"],"e98520789adb1d5ad05afb4956eca0944a929688":["5fb8cae56bd31a827317dd604b1169743f9475f2"],"a52341299179de5479672f7cf518bf4b173f34b3":["93f558d9f0b5a234a28dcc95036e388fcbbadaf7","ac1e7fa558287a811ea07634d815ee7b1c541284"],"0853c291617e0f9d0474b720bf609eb350e9225c":["a52341299179de5479672f7cf518bf4b173f34b3"],"5fb8cae56bd31a827317dd604b1169743f9475f2":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"026598a4c9c5b475f0028a513c0128db067d4a33":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93f558d9f0b5a234a28dcc95036e388fcbbadaf7":["01ff1eeea394f76a66d8998b861d33d8546b8ca4"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["93f558d9f0b5a234a28dcc95036e388fcbbadaf7"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["5fb8cae56bd31a827317dd604b1169743f9475f2"],"01ff1eeea394f76a66d8998b861d33d8546b8ca4":["93f558d9f0b5a234a28dcc95036e388fcbbadaf7"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"262fe6f976cbf6dc45e8e1975fb04dd1b3d99149":["e2d15e642ab6ee7c6c468ac4c314ec0ed077df2b"],"e2d15e642ab6ee7c6c468ac4c314ec0ed077df2b":["01ff1eeea394f76a66d8998b861d33d8546b8ca4"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a52341299179de5479672f7cf518bf4b173f34b3":["0853c291617e0f9d0474b720bf609eb350e9225c"],"0853c291617e0f9d0474b720bf609eb350e9225c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"5fb8cae56bd31a827317dd604b1169743f9475f2":["e98520789adb1d5ad05afb4956eca0944a929688"],"026598a4c9c5b475f0028a513c0128db067d4a33":["262fe6f976cbf6dc45e8e1975fb04dd1b3d99149"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"93f558d9f0b5a234a28dcc95036e388fcbbadaf7":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3","ac1e7fa558287a811ea07634d815ee7b1c541284"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["026598a4c9c5b475f0028a513c0128db067d4a33"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}