{"path":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#MaxScoreSumPropagator(Collection[#-extends-Scorer]).mjava","commits":[{"id":"3c5054bf15748079a041f921a9178e8fe84f1806","date":1514554505,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#MaxScoreSumPropagator(Collection[#-extends-Scorer]).mjava","pathOld":"/dev/null","sourceNew":"  MaxScoreSumPropagator(Collection<? extends Scorer> scorerList) {\n    numClauses = scorerList.size();\n    scorers = scorerList.toArray(new Scorer[numClauses]);\n    // We'll need max scores multiple times so we cache them\n    float[] maxScores = new float[numClauses];\n    for (int i = 0; i < numClauses; ++i) {\n      maxScores[i] = scorers[i].maxScore();\n    }\n    // Sort by decreasing max score\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        Scorer tmp = scorers[i];\n        scorers[i] = scorers[j];\n        scorers[j] = tmp;\n        float tmpF = maxScores[i];\n        maxScores[i] = maxScores[j];\n        maxScores[j] = tmpF;\n      }\n      @Override\n      protected int compare(int i, int j) {\n        return Float.compare(maxScores[j], maxScores[i]);\n      }\n    }.sort(0, scorers.length);\n\n    sumOfOtherMaxScores = computeSumOfComplement(maxScores);\n    if (numClauses == 0) {\n      maxScore = 0;\n    } else {\n      maxScore = sumUpperBound(maxScores[0] + sumOfOtherMaxScores[0]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#MaxScoreSumPropagator(Collection[#-extends-Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#MaxScoreSumPropagator(Collection[#-extends-Scorer]).mjava","sourceNew":"  MaxScoreSumPropagator(Collection<? extends Scorer> scorerList) throws IOException {\n    numClauses = scorerList.size();\n    scorers = scorerList.toArray(new Scorer[numClauses]);\n  }\n\n","sourceOld":"  MaxScoreSumPropagator(Collection<? extends Scorer> scorerList) {\n    numClauses = scorerList.size();\n    scorers = scorerList.toArray(new Scorer[numClauses]);\n    // We'll need max scores multiple times so we cache them\n    float[] maxScores = new float[numClauses];\n    for (int i = 0; i < numClauses; ++i) {\n      maxScores[i] = scorers[i].maxScore();\n    }\n    // Sort by decreasing max score\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        Scorer tmp = scorers[i];\n        scorers[i] = scorers[j];\n        scorers[j] = tmp;\n        float tmpF = maxScores[i];\n        maxScores[i] = maxScores[j];\n        maxScores[j] = tmpF;\n      }\n      @Override\n      protected int compare(int i, int j) {\n        return Float.compare(maxScores[j], maxScores[i]);\n      }\n    }.sort(0, scorers.length);\n\n    sumOfOtherMaxScores = computeSumOfComplement(maxScores);\n    if (numClauses == 0) {\n      maxScore = 0;\n    } else {\n      maxScore = sumUpperBound(maxScores[0] + sumOfOtherMaxScores[0]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12789a348ea3f09c9c3b71488cfa1c32da08b2a3","date":1534270167,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#MaxScoreSumPropagator(Collection[#-extends-Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MaxScoreSumPropagator#MaxScoreSumPropagator(Collection[#-extends-Scorer]).mjava","sourceNew":"  MaxScoreSumPropagator(Collection<? extends Scorer> scorerList) throws IOException {\n    numClauses = scorerList.size();\n    scorers = scorerList.toArray(new Scorer[numClauses]);\n\n    // We'll need max scores multiple times so we cache them\n    float[] maxScores = new float[numClauses];\n    for (int i = 0; i < numClauses; ++i) {\n      scorers[i].advanceShallow(0);\n      maxScores[i] = scorers[i].getMaxScore(NO_MORE_DOCS);\n    }\n    // Sort by decreasing max score\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        Scorer tmp = scorers[i];\n        scorers[i] = scorers[j];\n        scorers[j] = tmp;\n        float tmpF = maxScores[i];\n        maxScores[i] = maxScores[j];\n        maxScores[j] = tmpF;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        return Float.compare(maxScores[j], maxScores[i]);\n      }\n    }.sort(0, scorers.length);\n\n    sumOfOtherMaxScores = computeSumOfComplement(maxScores);\n  }\n\n","sourceOld":"  MaxScoreSumPropagator(Collection<? extends Scorer> scorerList) throws IOException {\n    numClauses = scorerList.size();\n    scorers = scorerList.toArray(new Scorer[numClauses]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12789a348ea3f09c9c3b71488cfa1c32da08b2a3":["523cc6563c99a55527ef7993efc5413c6648852d"],"523cc6563c99a55527ef7993efc5413c6648852d":["3c5054bf15748079a041f921a9178e8fe84f1806"],"3c5054bf15748079a041f921a9178e8fe84f1806":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12789a348ea3f09c9c3b71488cfa1c32da08b2a3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c5054bf15748079a041f921a9178e8fe84f1806"],"12789a348ea3f09c9c3b71488cfa1c32da08b2a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"523cc6563c99a55527ef7993efc5413c6648852d":["12789a348ea3f09c9c3b71488cfa1c32da08b2a3"],"3c5054bf15748079a041f921a9178e8fe84f1806":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}