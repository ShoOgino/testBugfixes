{"path":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#checkFieldMatches(MatchesIterator,int[]).mjava","commits":[{"id":"657704b225b01c6ff4bada5b6667f1f60aaaad0f","date":1523436207,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#checkFieldMatches(MatchesIterator,int[]).mjava","pathOld":"/dev/null","sourceNew":"  void checkFieldMatches(MatchesIterator it, int[] expected) throws IOException {\n    int pos = 1;\n    while (it.next()) {\n      //System.out.println(expected[i][pos] + \"->\" + expected[i][pos + 1] + \"[\" + expected[i][pos + 2] + \"->\" + expected[i][pos + 3] + \"]\");\n      assertEquals(expected[pos], it.startPosition());\n      assertEquals(expected[pos + 1], it.endPosition());\n      assertEquals(expected[pos + 2], it.startOffset());\n      assertEquals(expected[pos + 3], it.endOffset());\n      pos += 4;\n    }\n    assertEquals(expected.length, pos);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#checkFieldMatches(MatchesIterator,int[]).mjava","pathOld":"/dev/null","sourceNew":"  void checkFieldMatches(MatchesIterator it, int[] expected) throws IOException {\n    int pos = 1;\n    while (it.next()) {\n      //System.out.println(expected[i][pos] + \"->\" + expected[i][pos + 1] + \"[\" + expected[i][pos + 2] + \"->\" + expected[i][pos + 3] + \"]\");\n      assertEquals(expected[pos], it.startPosition());\n      assertEquals(expected[pos + 1], it.endPosition());\n      assertEquals(expected[pos + 2], it.startOffset());\n      assertEquals(expected[pos + 3], it.endOffset());\n      pos += 4;\n    }\n    assertEquals(expected.length, pos);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#checkFieldMatches(MatchesIterator,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#checkFieldMatches(MatchesIterator,int[]).mjava","sourceNew":"  void checkFieldMatches(MatchesIterator it, int[] expected) throws IOException {\n    int pos = 1;\n    while (it.next()) {\n      //System.out.println(expected[i][pos] + \"->\" + expected[i][pos + 1] + \"[\" + expected[i][pos + 2] + \"->\" + expected[i][pos + 3] + \"]\");\n      assertEquals(\"Wrong start position\", expected[pos], it.startPosition());\n      assertEquals(\"Wrong end position\", expected[pos + 1], it.endPosition());\n      assertEquals(\"Wrong start offset\", expected[pos + 2], it.startOffset());\n      assertEquals(\"Wrong end offset\", expected[pos + 3], it.endOffset());\n      pos += 4;\n    }\n    assertEquals(expected.length, pos);\n  }\n\n","sourceOld":"  void checkFieldMatches(MatchesIterator it, int[] expected) throws IOException {\n    int pos = 1;\n    while (it.next()) {\n      //System.out.println(expected[i][pos] + \"->\" + expected[i][pos + 1] + \"[\" + expected[i][pos + 2] + \"->\" + expected[i][pos + 3] + \"]\");\n      assertEquals(expected[pos], it.startPosition());\n      assertEquals(expected[pos + 1], it.endPosition());\n      assertEquals(expected[pos + 2], it.startOffset());\n      assertEquals(expected[pos + 3], it.endOffset());\n      pos += 4;\n    }\n    assertEquals(expected.length, pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"165c3432cb3c4fcfc8e859af24323bbbd12084af","date":1532292166,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#checkFieldMatches(MatchesIterator,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#checkFieldMatches(MatchesIterator,int[]).mjava","sourceNew":"  private void checkFieldMatches(MatchesIterator it, int[] expected) throws IOException {\n    int pos = 1;\n    while (it.next()) {\n      //System.out.println(expected[i][pos] + \"->\" + expected[i][pos + 1] + \"[\" + expected[i][pos + 2] + \"->\" + expected[i][pos + 3] + \"]\");\n      assertEquals(\"Wrong start position\", expected[pos], it.startPosition());\n      assertEquals(\"Wrong end position\", expected[pos + 1], it.endPosition());\n      assertEquals(\"Wrong start offset\", expected[pos + 2], it.startOffset());\n      assertEquals(\"Wrong end offset\", expected[pos + 3], it.endOffset());\n      pos += 4;\n    }\n    assertEquals(expected.length, pos);\n  }\n\n","sourceOld":"  void checkFieldMatches(MatchesIterator it, int[] expected) throws IOException {\n    int pos = 1;\n    while (it.next()) {\n      //System.out.println(expected[i][pos] + \"->\" + expected[i][pos + 1] + \"[\" + expected[i][pos + 2] + \"->\" + expected[i][pos + 3] + \"]\");\n      assertEquals(\"Wrong start position\", expected[pos], it.startPosition());\n      assertEquals(\"Wrong end position\", expected[pos + 1], it.endPosition());\n      assertEquals(\"Wrong start offset\", expected[pos + 2], it.startOffset());\n      assertEquals(\"Wrong end offset\", expected[pos + 3], it.endOffset());\n      pos += 4;\n    }\n    assertEquals(expected.length, pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62ba8124694976baa3b03705351de238ec5d4352","date":1532295406,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#checkFieldMatches(MatchesIterator,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#checkFieldMatches(MatchesIterator,int[]).mjava","sourceNew":"  void checkFieldMatches(MatchesIterator it, int[] expected) throws IOException {\n    int pos = 1;\n    while (it.next()) {\n      //System.out.println(expected[i][pos] + \"->\" + expected[i][pos + 1] + \"[\" + expected[i][pos + 2] + \"->\" + expected[i][pos + 3] + \"]\");\n      assertEquals(\"Wrong start position\", expected[pos], it.startPosition());\n      assertEquals(\"Wrong end position\", expected[pos + 1], it.endPosition());\n      assertEquals(\"Wrong start offset\", expected[pos + 2], it.startOffset());\n      assertEquals(\"Wrong end offset\", expected[pos + 3], it.endOffset());\n      pos += 4;\n    }\n    assertEquals(expected.length, pos);\n  }\n\n","sourceOld":"  private void checkFieldMatches(MatchesIterator it, int[] expected) throws IOException {\n    int pos = 1;\n    while (it.next()) {\n      //System.out.println(expected[i][pos] + \"->\" + expected[i][pos + 1] + \"[\" + expected[i][pos + 2] + \"->\" + expected[i][pos + 3] + \"]\");\n      assertEquals(\"Wrong start position\", expected[pos], it.startPosition());\n      assertEquals(\"Wrong end position\", expected[pos + 1], it.endPosition());\n      assertEquals(\"Wrong start offset\", expected[pos + 2], it.startOffset());\n      assertEquals(\"Wrong end offset\", expected[pos + 3], it.endOffset());\n      pos += 4;\n    }\n    assertEquals(expected.length, pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ebc07bccf12a902ca6a0077910d18ee38b695f","date":1532336521,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#checkFieldMatches(MatchesIterator,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#checkFieldMatches(MatchesIterator,int[]).mjava","sourceNew":"  private void checkFieldMatches(MatchesIterator it, int[] expected) throws IOException {\n    int pos = 1;\n    while (it.next()) {\n      //System.out.println(expected[i][pos] + \"->\" + expected[i][pos + 1] + \"[\" + expected[i][pos + 2] + \"->\" + expected[i][pos + 3] + \"]\");\n      assertEquals(\"Wrong start position\", expected[pos], it.startPosition());\n      assertEquals(\"Wrong end position\", expected[pos + 1], it.endPosition());\n      assertEquals(\"Wrong start offset\", expected[pos + 2], it.startOffset());\n      assertEquals(\"Wrong end offset\", expected[pos + 3], it.endOffset());\n      pos += 4;\n    }\n    assertEquals(expected.length, pos);\n  }\n\n","sourceOld":"  void checkFieldMatches(MatchesIterator it, int[] expected) throws IOException {\n    int pos = 1;\n    while (it.next()) {\n      //System.out.println(expected[i][pos] + \"->\" + expected[i][pos + 1] + \"[\" + expected[i][pos + 2] + \"->\" + expected[i][pos + 3] + \"]\");\n      assertEquals(\"Wrong start position\", expected[pos], it.startPosition());\n      assertEquals(\"Wrong end position\", expected[pos + 1], it.endPosition());\n      assertEquals(\"Wrong start offset\", expected[pos + 2], it.startOffset());\n      assertEquals(\"Wrong end offset\", expected[pos + 3], it.endOffset());\n      pos += 4;\n    }\n    assertEquals(expected.length, pos);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b11b9d5eaf9707760ca5151530830a825197023":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"165c3432cb3c4fcfc8e859af24323bbbd12084af":["3b11b9d5eaf9707760ca5151530830a825197023"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62ba8124694976baa3b03705351de238ec5d4352":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","657704b225b01c6ff4bada5b6667f1f60aaaad0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["62ba8124694976baa3b03705351de238ec5d4352"]},"commit2Childs":{"3b11b9d5eaf9707760ca5151530830a825197023":["165c3432cb3c4fcfc8e859af24323bbbd12084af"],"165c3432cb3c4fcfc8e859af24323bbbd12084af":["62ba8124694976baa3b03705351de238ec5d4352"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["657704b225b01c6ff4bada5b6667f1f60aaaad0f","43345f1452f9510f8aaadae6156fe0c834e7d957"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["3b11b9d5eaf9707760ca5151530830a825197023"],"62ba8124694976baa3b03705351de238ec5d4352":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}