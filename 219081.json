{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#docs(Bits,DocsEnum,int).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#docs(Bits,DocsEnum,int).mjava","sourceNew":"      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) {\n        // TODO: implement reuse, something like Pulsing:\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              LowFreqDocsEnum docsEnum;\n              if (reuse instanceof LowFreqDocsEnum) {\n                docsEnum = (LowFreqDocsEnum) reuse;\n                if (!docsEnum.canReuse(liveDocs, posLen)) {\n                  docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n              }\n\n              return docsEnum.reset(postings);\n            } else {\n              LowFreqDocsEnumNoPos docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoPos) {\n                docsEnum = (LowFreqDocsEnumNoPos) reuse;\n                if (!docsEnum.canReuse(liveDocs)) {\n                  docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n              }\n\n              return docsEnum.reset(postings);\n            }\n          } else {\n            LowFreqDocsEnumNoTF docsEnum;\n            if (reuse instanceof LowFreqDocsEnumNoTF) {\n              docsEnum = (LowFreqDocsEnumNoTF) reuse;\n              if (!docsEnum.canReuse(liveDocs)) {\n                docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n              }\n            } else {\n              docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n            }\n\n            return docsEnum.reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n\n          HighFreqDocsEnum docsEnum;\n          if (reuse instanceof HighFreqDocsEnum) {\n            docsEnum = (HighFreqDocsEnum) reuse;\n            if (!docsEnum.canReuse(liveDocs)) {\n              docsEnum = new HighFreqDocsEnum(liveDocs);\n            }\n          } else {\n            docsEnum = new HighFreqDocsEnum(liveDocs);\n          }\n\n          //System.out.println(\"  DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return docsEnum.reset(term.docIDs, term.freqs);\n        }\n      }\n\n","sourceOld":"      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) {\n        // TODO: implement reuse, something like Pulsing:\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              LowFreqDocsEnum docsEnum;\n              if (reuse instanceof LowFreqDocsEnum) {\n                docsEnum = (LowFreqDocsEnum) reuse;\n                if (!docsEnum.canReuse(liveDocs, posLen)) {\n                  docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n              }\n\n              return docsEnum.reset(postings);\n            } else {\n              LowFreqDocsEnumNoPos docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoPos) {\n                docsEnum = (LowFreqDocsEnumNoPos) reuse;\n                if (!docsEnum.canReuse(liveDocs)) {\n                  docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n              }\n\n              return docsEnum.reset(postings);\n            }\n          } else {\n            LowFreqDocsEnumNoTF docsEnum;\n            if (reuse instanceof LowFreqDocsEnumNoTF) {\n              docsEnum = (LowFreqDocsEnumNoTF) reuse;\n              if (!docsEnum.canReuse(liveDocs)) {\n                docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n              }\n            } else {\n              docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n            }\n\n            return docsEnum.reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n\n          HighFreqDocsEnum docsEnum;\n          if (reuse instanceof HighFreqDocsEnum) {\n            docsEnum = (HighFreqDocsEnum) reuse;\n            if (!docsEnum.canReuse(liveDocs)) {\n              docsEnum = new HighFreqDocsEnum(liveDocs);\n            }\n          } else {\n            docsEnum = new HighFreqDocsEnum(liveDocs);\n          }\n\n          //System.out.println(\"  DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return docsEnum.reset(term.docIDs, term.freqs);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbaae1c00d39df2c872bbe043af26d02d3818313","date":1409657064,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#docs(Bits,DocsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#docs(Bits,DocsEnum,int).mjava","sourceNew":"      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) {\n        // TODO: implement reuse\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              LowFreqDocsEnum docsEnum;\n              if (reuse instanceof LowFreqDocsEnum) {\n                docsEnum = (LowFreqDocsEnum) reuse;\n                if (!docsEnum.canReuse(liveDocs, posLen)) {\n                  docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n              }\n\n              return docsEnum.reset(postings);\n            } else {\n              LowFreqDocsEnumNoPos docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoPos) {\n                docsEnum = (LowFreqDocsEnumNoPos) reuse;\n                if (!docsEnum.canReuse(liveDocs)) {\n                  docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n              }\n\n              return docsEnum.reset(postings);\n            }\n          } else {\n            LowFreqDocsEnumNoTF docsEnum;\n            if (reuse instanceof LowFreqDocsEnumNoTF) {\n              docsEnum = (LowFreqDocsEnumNoTF) reuse;\n              if (!docsEnum.canReuse(liveDocs)) {\n                docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n              }\n            } else {\n              docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n            }\n\n            return docsEnum.reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n\n          HighFreqDocsEnum docsEnum;\n          if (reuse instanceof HighFreqDocsEnum) {\n            docsEnum = (HighFreqDocsEnum) reuse;\n            if (!docsEnum.canReuse(liveDocs)) {\n              docsEnum = new HighFreqDocsEnum(liveDocs);\n            }\n          } else {\n            docsEnum = new HighFreqDocsEnum(liveDocs);\n          }\n\n          //System.out.println(\"  DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return docsEnum.reset(term.docIDs, term.freqs);\n        }\n      }\n\n","sourceOld":"      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) {\n        // TODO: implement reuse, something like Pulsing:\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              LowFreqDocsEnum docsEnum;\n              if (reuse instanceof LowFreqDocsEnum) {\n                docsEnum = (LowFreqDocsEnum) reuse;\n                if (!docsEnum.canReuse(liveDocs, posLen)) {\n                  docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n              }\n\n              return docsEnum.reset(postings);\n            } else {\n              LowFreqDocsEnumNoPos docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoPos) {\n                docsEnum = (LowFreqDocsEnumNoPos) reuse;\n                if (!docsEnum.canReuse(liveDocs)) {\n                  docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n              }\n\n              return docsEnum.reset(postings);\n            }\n          } else {\n            LowFreqDocsEnumNoTF docsEnum;\n            if (reuse instanceof LowFreqDocsEnumNoTF) {\n              docsEnum = (LowFreqDocsEnumNoTF) reuse;\n              if (!docsEnum.canReuse(liveDocs)) {\n                docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n              }\n            } else {\n              docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n            }\n\n            return docsEnum.reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n\n          HighFreqDocsEnum docsEnum;\n          if (reuse instanceof HighFreqDocsEnum) {\n            docsEnum = (HighFreqDocsEnum) reuse;\n            if (!docsEnum.canReuse(liveDocs)) {\n              docsEnum = new HighFreqDocsEnum(liveDocs);\n            }\n          } else {\n            docsEnum = new HighFreqDocsEnum(liveDocs);\n          }\n\n          //System.out.println(\"  DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return docsEnum.reset(term.docIDs, term.freqs);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#postings(Bits,PostingsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.DirectField.DirectTermsEnum#docs(Bits,DocsEnum,int).mjava","sourceNew":"      @Override\n      public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n        // TODO: implement reuse\n        // it's hairy!\n\n        if ((flags & PostingsEnum.FLAG_POSITIONS) >= PostingsEnum.FLAG_POSITIONS) {\n          if (!hasPos) {\n            return null;\n          }\n\n          if (terms[termOrd] instanceof LowFreqTerm) {\n            final LowFreqTerm term = ((LowFreqTerm) terms[termOrd]);\n            final int[] postings = term.postings;\n            final byte[] payloads = term.payloads;\n            return new LowFreqPostingsEnum(liveDocs, hasOffsets, hasPayloads).reset(postings, payloads);\n          } else {\n            final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n            return new HighFreqPostingsEnum(liveDocs, hasOffsets).reset(term.docIDs, term.freqs, term.positions, term.payloads);\n          }\n        }\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              LowFreqDocsEnum docsEnum;\n              if (reuse instanceof LowFreqDocsEnum) {\n                docsEnum = (LowFreqDocsEnum) reuse;\n                if (!docsEnum.canReuse(liveDocs, posLen)) {\n                  docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n              }\n\n              return docsEnum.reset(postings);\n            } else {\n              LowFreqDocsEnumNoPos docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoPos) {\n                docsEnum = (LowFreqDocsEnumNoPos) reuse;\n                if (!docsEnum.canReuse(liveDocs)) {\n                  docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n              }\n\n              return docsEnum.reset(postings);\n            }\n          } else {\n            LowFreqDocsEnumNoTF docsEnum;\n            if (reuse instanceof LowFreqDocsEnumNoTF) {\n              docsEnum = (LowFreqDocsEnumNoTF) reuse;\n              if (!docsEnum.canReuse(liveDocs)) {\n                docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n              }\n            } else {\n              docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n            }\n\n            return docsEnum.reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n\n          HighFreqDocsEnum docsEnum;\n          if (reuse instanceof HighFreqDocsEnum) {\n            docsEnum = (HighFreqDocsEnum) reuse;\n            if (!docsEnum.canReuse(liveDocs)) {\n              docsEnum = new HighFreqDocsEnum(liveDocs);\n            }\n          } else {\n            docsEnum = new HighFreqDocsEnum(liveDocs);\n          }\n\n          //System.out.println(\"  DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return docsEnum.reset(term.docIDs, term.freqs);\n        }\n      }\n\n","sourceOld":"      @Override\n      public DocsEnum docs(Bits liveDocs, DocsEnum reuse, int flags) {\n        // TODO: implement reuse\n        // it's hairy!\n\n        if (terms[termOrd] instanceof LowFreqTerm) {\n          final int[] postings = ((LowFreqTerm) terms[termOrd]).postings;\n          if (hasFreq) {\n            if (hasPos) {\n              int posLen;\n              if (hasOffsets) {\n                posLen = 3;\n              } else {\n                posLen = 1;\n              }\n              if (hasPayloads) {\n                posLen++;\n              }\n              LowFreqDocsEnum docsEnum;\n              if (reuse instanceof LowFreqDocsEnum) {\n                docsEnum = (LowFreqDocsEnum) reuse;\n                if (!docsEnum.canReuse(liveDocs, posLen)) {\n                  docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnum(liveDocs, posLen);\n              }\n\n              return docsEnum.reset(postings);\n            } else {\n              LowFreqDocsEnumNoPos docsEnum;\n              if (reuse instanceof LowFreqDocsEnumNoPos) {\n                docsEnum = (LowFreqDocsEnumNoPos) reuse;\n                if (!docsEnum.canReuse(liveDocs)) {\n                  docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n                }\n              } else {\n                docsEnum = new LowFreqDocsEnumNoPos(liveDocs);\n              }\n\n              return docsEnum.reset(postings);\n            }\n          } else {\n            LowFreqDocsEnumNoTF docsEnum;\n            if (reuse instanceof LowFreqDocsEnumNoTF) {\n              docsEnum = (LowFreqDocsEnumNoTF) reuse;\n              if (!docsEnum.canReuse(liveDocs)) {\n                docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n              }\n            } else {\n              docsEnum = new LowFreqDocsEnumNoTF(liveDocs);\n            }\n\n            return docsEnum.reset(postings);\n          }\n        } else {\n          final HighFreqTerm term = (HighFreqTerm) terms[termOrd];\n\n          HighFreqDocsEnum docsEnum;\n          if (reuse instanceof HighFreqDocsEnum) {\n            docsEnum = (HighFreqDocsEnum) reuse;\n            if (!docsEnum.canReuse(liveDocs)) {\n              docsEnum = new HighFreqDocsEnum(liveDocs);\n            }\n          } else {\n            docsEnum = new HighFreqDocsEnum(liveDocs);\n          }\n\n          //System.out.println(\"  DE for term=\" + new BytesRef(terms[termOrd].term).utf8ToString() + \": \" + term.docIDs.length + \" docs\");\n          return docsEnum.reset(term.docIDs, term.freqs);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fbaae1c00d39df2c872bbe043af26d02d3818313":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["fbaae1c00d39df2c872bbe043af26d02d3818313"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"fbaae1c00d39df2c872bbe043af26d02d3818313":["51f5280f31484820499077f41fcdfe92d527d9dc"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["fbaae1c00d39df2c872bbe043af26d02d3818313"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"51f5280f31484820499077f41fcdfe92d527d9dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}