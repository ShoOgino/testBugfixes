{"path":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfoPerCommit).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDoc#printSegment(PrintWriter,SegmentInfo).mjava","sourceNew":"   private void printSegment(PrintWriter out, SegmentInfoPerCommit si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","sourceOld":"   private void printSegment(PrintWriter out, SegmentInfo si)\n   throws Exception {\n      SegmentReader reader = new SegmentReader(si, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random()));\n\n      for (int i = 0; i < reader.numDocs(); i++)\n        out.println(reader.document(i));\n\n      FieldsEnum fis = reader.fields().iterator();\n      String field = fis.next();\n      while(field != null)  {\n        Terms terms = fis.terms();\n        assertNotNull(terms);\n        TermsEnum tis = terms.iterator(null);\n        while(tis.next() != null) {\n\n          out.print(\"  term=\" + field + \":\" + tis.term());\n          out.println(\"    DF=\" + tis.docFreq());\n\n          DocsAndPositionsEnum positions = tis.docsAndPositions(reader.getLiveDocs(), null, false);\n\n          while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            out.print(\" doc=\" + positions.docID());\n            out.print(\" TF=\" + positions.freq());\n            out.print(\" pos=\");\n            out.print(positions.nextPosition());\n            for (int j = 1; j < positions.freq(); j++)\n              out.print(\",\" + positions.nextPosition());\n            out.println(\"\");\n          }\n        }\n        field = fis.next();\n      }\n      reader.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","9d153abcf92dc5329d98571a8c3035df9bd80648"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}