{"path":"lucene/src/test-framework/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","commits":[{"id":"226aae72c0326f4299c16280195bade4530de537","date":1324221898,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final Query rewritten = super.rewrite(original);\n        final Set<Term> terms = new HashSet<Term>();\n        rewritten.extractTerms(terms);\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<Term>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n              termStatsCache.put(key, ent.getValue());\n            }\n          }\n        }\n\n        return rewritten;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/ShardSearchingTestBase.NodeState.ShardIndexSearcher#rewrite(Query).mjava","sourceNew":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final Query rewritten = super.rewrite(original);\n        final Set<Term> terms = new HashSet<Term>();\n        rewritten.extractTerms(terms);\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<Term>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n              termStatsCache.put(key, ent.getValue());\n            }\n          }\n        }\n\n        return rewritten;\n      }\n\n","sourceOld":"      @Override\n      public Query rewrite(Query original) throws IOException {\n        final Query rewritten = super.rewrite(original);\n        final Set<Term> terms = new HashSet<Term>();\n        rewritten.extractTerms(terms);\n\n        // Make a single request to remote nodes for term\n        // stats:\n        for(int nodeID=0;nodeID<nodeVersions.length;nodeID++) {\n          if (nodeID == myNodeID) {\n            continue;\n          }\n\n          final Set<Term> missing = new HashSet<Term>();\n          for(Term term : terms) {\n            final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], term);\n            if (!termStatsCache.containsKey(key)) {\n              missing.add(term);\n            }\n          }\n          if (missing.size() != 0) {\n            for(Map.Entry<Term,TermStatistics> ent : getNodeTermStats(missing, nodeID, nodeVersions[nodeID]).entrySet()) {\n              final TermAndShardVersion key = new TermAndShardVersion(nodeID, nodeVersions[nodeID], ent.getKey());\n              termStatsCache.put(key, ent.getValue());\n            }\n          }\n        }\n\n        return rewritten;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["226aae72c0326f4299c16280195bade4530de537"],"226aae72c0326f4299c16280195bade4530de537":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"226aae72c0326f4299c16280195bade4530de537":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["226aae72c0326f4299c16280195bade4530de537"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}