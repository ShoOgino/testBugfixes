{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#getEncoding(Response).mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#getEncoding(Response).mjava","pathOld":"/dev/null","sourceNew":"  private String getEncoding(Response response) {\n    String contentType = response.getHeaders().get(HttpHeader.CONTENT_TYPE);\n    if (contentType != null) {\n      String charset = \"charset=\";\n      int index = contentType.toLowerCase(Locale.ENGLISH).indexOf(charset);\n      if (index > 0) {\n        String encoding = contentType.substring(index + charset.length());\n        // Sometimes charsets arrive with an ending semicolon.\n        int semicolon = encoding.indexOf(';');\n        if (semicolon > 0)\n          encoding = encoding.substring(0, semicolon).trim();\n        // Sometimes charsets are quoted.\n        int lastIndex = encoding.length() - 1;\n        if (encoding.charAt(0) == '\"' && encoding.charAt(lastIndex) == '\"')\n          encoding = encoding.substring(1, lastIndex).trim();\n        return encoding;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f","date":1589320207,"type":4,"author":"Samuel García Martínez","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/Http2SolrClient#getEncoding(Response).mjava","sourceNew":null,"sourceOld":"  private String getEncoding(Response response) {\n    String contentType = response.getHeaders().get(HttpHeader.CONTENT_TYPE);\n    if (contentType != null) {\n      String charset = \"charset=\";\n      int index = contentType.toLowerCase(Locale.ENGLISH).indexOf(charset);\n      if (index > 0) {\n        String encoding = contentType.substring(index + charset.length());\n        // Sometimes charsets arrive with an ending semicolon.\n        int semicolon = encoding.indexOf(';');\n        if (semicolon > 0)\n          encoding = encoding.substring(0, semicolon).trim();\n        // Sometimes charsets are quoted.\n        int lastIndex = encoding.length() - 1;\n        if (encoding.charAt(0) == '\"' && encoding.charAt(lastIndex) == '\"')\n          encoding = encoding.substring(1, lastIndex).trim();\n        return encoding;\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}