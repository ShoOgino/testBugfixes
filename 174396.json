{"path":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"),\n                                                                   false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"),\n                                              false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"),\n                                                                   false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"),\n                                              false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"),\n                                                                   false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"),\n                                              false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"),\n                                                                   false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"),\n                                              false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"),\n                                                                   false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"),\n                                              false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = IndexReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"),\n                                                                   false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"),\n                                              false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"),\n                                                                   false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"),\n                                              false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newField(this.field, \"a b\", TextField.TYPE_STORED));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"),\n                                                                   false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"),\n                                              false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"),\n                                                                   false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"),\n                                              false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"),\n                                                                   false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"),\n                                              false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"),\n                                                                   false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"),\n                                              false);\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.shutdown();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.shutdown();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.shutdown();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.shutdown();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        PostingsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        DocsAndPositionsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        PostingsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        PostingsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   MultiFields.getLiveDocs(reader),\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              MultiFields.getLiveDocs(reader),\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestLazyProxSkipping#testSeek().mjava","sourceNew":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        PostingsEnum tp = MultiTerms.getTermPostingsEnum(reader,\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiTerms.getTermPostingsEnum(reader,\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","sourceOld":"    public void testSeek() throws IOException {\n        Directory directory = newDirectory();\n        IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n        for (int i = 0; i < 10; i++) {\n            Document doc = new Document();\n            doc.add(newTextField(this.field, \"a b\", Field.Store.YES));\n            writer.addDocument(doc);\n        }\n        \n        writer.close();\n        IndexReader reader = DirectoryReader.open(directory);\n\n        PostingsEnum tp = MultiFields.getTermPositionsEnum(reader,\n                                                                   this.field,\n                                                                   new BytesRef(\"b\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 1);\n        }\n\n        tp = MultiFields.getTermPositionsEnum(reader,\n                                              this.field,\n                                              new BytesRef(\"a\"));\n\n        for (int i = 0; i < 10; i++) {\n            tp.nextDoc();\n            assertEquals(tp.docID(), i);\n            assertEquals(tp.nextPosition(), 0);\n        }\n        reader.close();\n        directory.close();\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"51f5280f31484820499077f41fcdfe92d527d9dc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["51f5280f31484820499077f41fcdfe92d527d9dc"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["04f07771a2a7dd3a395700665ed839c3dae2def2","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["04f07771a2a7dd3a395700665ed839c3dae2def2","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"51f5280f31484820499077f41fcdfe92d527d9dc":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["19275ba31e621f6da1b83bf13af75233876fd3d4","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}