{"path":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addDynamicFields(Collection[SchemaField],Map[String,Collection[String]]).mjava","commits":[{"id":"37e5b631c49de2fb88f245c36ecf87650cfa4a24","date":1409693105,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addDynamicFields(Collection[SchemaField],Map[String,Collection[String]]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ManagedIndexSchema addDynamicFields(Collection<SchemaField> newDynamicFields, \n                                             Map<String,Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newDynamicField : newDynamicFields) {\n        List<DynamicField> dFields = new ArrayList<>(Arrays.asList(newSchema.dynamicFields));\n        if (isDuplicateDynField(dFields, newDynamicField)) {\n          String msg = \"Dynamic field '\" + newDynamicField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        dFields.add(new DynamicField(newDynamicField));\n        newSchema.dynamicFields = dynamicFieldListToSortedArray(dFields);\n        \n        Collection<String> copyFields = copyFieldNames.get(newDynamicField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newDynamicField.getName(), copyField);\n          }\n        }\n      }\n\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n      if (success) {\n        log.debug(\"Added dynamic field(s): {}\", newDynamicFields);\n      } else {\n        log.error(\"Failed to add dynamic field(s): {}\", newDynamicFields);\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9d62f72d1c60d2be239222de52d5e7b516da5f6f","9d62f72d1c60d2be239222de52d5e7b516da5f6f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a54d9ede1b7f2f026639186eb07f3f314d87d9a","date":1412176848,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addDynamicFields(Collection[SchemaField],Map[String,Collection[String]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addDynamicFields(Collection[SchemaField],Map[String,Collection[String]]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addDynamicFields(Collection<SchemaField> newDynamicFields, \n                                             Map<String,Collection<String>> copyFieldNames, boolean persist) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newDynamicField : newDynamicFields) {\n        List<DynamicField> dFields = new ArrayList<>(Arrays.asList(newSchema.dynamicFields));\n        if (isDuplicateDynField(dFields, newDynamicField)) {\n          String msg = \"Dynamic field '\" + newDynamicField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        dFields.add(new DynamicField(newDynamicField));\n        newSchema.dynamicFields = dynamicFieldListToSortedArray(dFields);\n\n        Collection<String> copyFields = copyFieldNames.get(newDynamicField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newDynamicField.getName(), copyField);\n          }\n        }\n      }\n\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added dynamic field(s): {}\", newDynamicFields);\n        } else {\n          log.error(\"Failed to add dynamic field(s): {}\", newDynamicFields);\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema addDynamicFields(Collection<SchemaField> newDynamicFields, \n                                             Map<String,Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newDynamicField : newDynamicFields) {\n        List<DynamicField> dFields = new ArrayList<>(Arrays.asList(newSchema.dynamicFields));\n        if (isDuplicateDynField(dFields, newDynamicField)) {\n          String msg = \"Dynamic field '\" + newDynamicField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        dFields.add(new DynamicField(newDynamicField));\n        newSchema.dynamicFields = dynamicFieldListToSortedArray(dFields);\n        \n        Collection<String> copyFields = copyFieldNames.get(newDynamicField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newDynamicField.getName(), copyField);\n          }\n        }\n      }\n\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n      if (success) {\n        log.debug(\"Added dynamic field(s): {}\", newDynamicFields);\n      } else {\n        log.error(\"Failed to add dynamic field(s): {}\", newDynamicFields);\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addDynamicFields(Collection[SchemaField],Map[String,Collection[String]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ManagedIndexSchema#addDynamicFields(Collection[SchemaField],Map[String,Collection[String]]).mjava","sourceNew":"  @Override\n  public ManagedIndexSchema addDynamicFields(Collection<SchemaField> newDynamicFields, \n                                             Map<String,Collection<String>> copyFieldNames, boolean persist) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newDynamicField : newDynamicFields) {\n        List<DynamicField> dFields = new ArrayList<>(Arrays.asList(newSchema.dynamicFields));\n        if (isDuplicateDynField(dFields, newDynamicField)) {\n          String msg = \"Dynamic field '\" + newDynamicField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        dFields.add(new DynamicField(newDynamicField));\n        newSchema.dynamicFields = dynamicFieldListToSortedArray(dFields);\n\n        Collection<String> copyFields = copyFieldNames.get(newDynamicField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newDynamicField.getName(), copyField);\n          }\n        }\n      }\n\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      if(persist) {\n        success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n        if (success) {\n          log.debug(\"Added dynamic field(s): {}\", newDynamicFields);\n        } else {\n          log.error(\"Failed to add dynamic field(s): {}\", newDynamicFields);\n        }\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","sourceOld":"  @Override\n  public ManagedIndexSchema addDynamicFields(Collection<SchemaField> newDynamicFields, \n                                             Map<String,Collection<String>> copyFieldNames) {\n    ManagedIndexSchema newSchema = null;\n    if (isMutable) {\n      boolean success = false;\n      if (copyFieldNames == null){\n        copyFieldNames = Collections.emptyMap();\n      }\n      newSchema = shallowCopy(true);\n\n      for (SchemaField newDynamicField : newDynamicFields) {\n        List<DynamicField> dFields = new ArrayList<>(Arrays.asList(newSchema.dynamicFields));\n        if (isDuplicateDynField(dFields, newDynamicField)) {\n          String msg = \"Dynamic field '\" + newDynamicField.getName() + \"' already exists.\";\n          throw new FieldExistsException(ErrorCode.BAD_REQUEST, msg);\n        }\n        dFields.add(new DynamicField(newDynamicField));\n        newSchema.dynamicFields = dynamicFieldListToSortedArray(dFields);\n        \n        Collection<String> copyFields = copyFieldNames.get(newDynamicField.getName());\n        if (copyFields != null) {\n          for (String copyField : copyFields) {\n            newSchema.registerCopyField(newDynamicField.getName(), copyField);\n          }\n        }\n      }\n\n      // Run the callbacks on SchemaAware now that everything else is done\n      for (SchemaAware aware : newSchema.schemaAware) {\n        aware.inform(newSchema);\n      }\n      newSchema.refreshAnalyzers();\n      success = newSchema.persistManagedSchema(false); // don't just create - update it if it already exists\n      if (success) {\n        log.debug(\"Added dynamic field(s): {}\", newDynamicFields);\n      } else {\n        log.error(\"Failed to add dynamic field(s): {}\", newDynamicFields);\n      }\n    } else {\n      String msg = \"This ManagedIndexSchema is not mutable.\";\n      log.error(msg);\n      throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n    }\n    return newSchema;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["37e5b631c49de2fb88f245c36ecf87650cfa4a24"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["37e5b631c49de2fb88f245c36ecf87650cfa4a24","4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"37e5b631c49de2fb88f245c36ecf87650cfa4a24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37e5b631c49de2fb88f245c36ecf87650cfa4a24"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"37e5b631c49de2fb88f245c36ecf87650cfa4a24":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}