{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.TermsWriter#flushBlock().mjava","commits":[{"id":"038e2a9b07e2f8ae58336613cea227bf8b973484","date":1346850972,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock(pendingCount, pendingCount);\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock(pendingCount, pendingCount);\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.TermsWriter#flushBlock().mjava","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        assert state != null;\n        bytesWriter.writeVInt(state.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(state.totalTermFreq-state.docFreq);\n        }\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 4th pass: write the metadata \n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        postingsWriter.encodeTerm(longs, bufferWriter, fieldInfo, state, absolute);\n        for (int i = 0; i < longsSize; i++) {\n          bytesWriter.writeVLong(longs[i]);\n        }\n        bufferWriter.writeTo(bytesWriter);\n        bufferWriter.reset();\n        absolute = false;\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock(pendingCount, pendingCount);\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.TermsWriter#flushBlock().mjava","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        assert state != null;\n        bytesWriter.writeVInt(state.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(state.totalTermFreq-state.docFreq);\n        }\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 4th pass: write the metadata \n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        postingsWriter.encodeTerm(longs, bufferWriter, fieldInfo, state, absolute);\n        for (int i = 0; i < longsSize; i++) {\n          bytesWriter.writeVLong(longs[i]);\n        }\n        bufferWriter.writeTo(bytesWriter);\n        bufferWriter.reset();\n        absolute = false;\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock(pendingCount, pendingCount);\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.TermsWriter#flushBlock().mjava","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm.get(), pendingTerms[0].term.get());\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm.get(),\n                                             pendingTerms[termCount].term.get()));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length() - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes(), commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        assert state != null;\n        bytesWriter.writeVInt(state.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(state.totalTermFreq-state.docFreq);\n        }\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 4th pass: write the metadata \n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        postingsWriter.encodeTerm(longs, bufferWriter, fieldInfo, state, absolute);\n        for (int i = 0; i < longsSize; i++) {\n          bytesWriter.writeVLong(longs[i]);\n        }\n        bufferWriter.writeTo(bytesWriter);\n        bufferWriter.reset();\n        absolute = false;\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        assert state != null;\n        bytesWriter.writeVInt(state.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(state.totalTermFreq-state.docFreq);\n        }\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 4th pass: write the metadata \n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        postingsWriter.encodeTerm(longs, bufferWriter, fieldInfo, state, absolute);\n        for (int i = 0; i < longsSize; i++) {\n          bytesWriter.writeVLong(longs[i]);\n        }\n        bufferWriter.writeTo(bytesWriter);\n        bufferWriter.reset();\n        absolute = false;\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","bugFix":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.TermsWriter#flushBlock().mjava","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm.get(), pendingTerms[0].term.get());\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm.get(),\n                                             pendingTerms[termCount].term.get()));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length() - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes(), commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        assert state != null;\n        bytesWriter.writeVInt(state.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          bytesWriter.writeVLong(state.totalTermFreq-state.docFreq);\n        }\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 4th pass: write the metadata \n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        postingsWriter.encodeTerm(longs, bufferWriter, fieldInfo, state, absolute);\n        for (int i = 0; i < longsSize; i++) {\n          bytesWriter.writeVLong(longs[i]);\n        }\n        bufferWriter.writeTo(bytesWriter);\n        bufferWriter.reset();\n        absolute = false;\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm.get(), pendingTerms[0].term.get());\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm.get(),\n                                             pendingTerms[termCount].term.get()));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length() - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes(), commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        assert state != null;\n        bytesWriter.writeVInt(state.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(state.totalTermFreq-state.docFreq);\n        }\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 4th pass: write the metadata \n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        postingsWriter.encodeTerm(longs, bufferWriter, fieldInfo, state, absolute);\n        for (int i = 0; i < longsSize; i++) {\n          bytesWriter.writeVLong(longs[i]);\n        }\n        bufferWriter.writeTo(bytesWriter);\n        bufferWriter.reset();\n        absolute = false;\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.TermsWriter#flushBlock().mjava","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm.get(), pendingTerms[0].term.get());\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm.get(),\n                                             pendingTerms[termCount].term.get()));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length() - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes(), commonPrefix, suffix);\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        assert state != null;\n        bytesWriter.writeVInt(state.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          bytesWriter.writeVLong(state.totalTermFreq-state.docFreq);\n        }\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      // 4th pass: write the metadata \n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        postingsWriter.encodeTerm(longs, bufferWriter, fieldInfo, state, absolute);\n        for (int i = 0; i < longsSize; i++) {\n          bytesWriter.writeVLong(longs[i]);\n        }\n        bufferWriter.copyTo(bytesWriter);\n        bufferWriter.reset();\n        absolute = false;\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm.get(), pendingTerms[0].term.get());\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm.get(),\n                                             pendingTerms[termCount].term.get()));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length() - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes(), commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        assert state != null;\n        bytesWriter.writeVInt(state.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          bytesWriter.writeVLong(state.totalTermFreq-state.docFreq);\n        }\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 4th pass: write the metadata \n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        postingsWriter.encodeTerm(longs, bufferWriter, fieldInfo, state, absolute);\n        for (int i = 0; i < longsSize; i++) {\n          bytesWriter.writeVLong(longs[i]);\n        }\n        bufferWriter.writeTo(bytesWriter);\n        bufferWriter.reset();\n        absolute = false;\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.TermsWriter#flushBlock().mjava","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm.get(), pendingTerms[0].term.get());\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm.get(),\n                                             pendingTerms[termCount].term.get()));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length() - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes(), commonPrefix, suffix);\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        assert state != null;\n        bytesWriter.writeVInt(state.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          bytesWriter.writeVLong(state.totalTermFreq-state.docFreq);\n        }\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      // 4th pass: write the metadata \n      boolean absolute = true;\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        postingsWriter.encodeTerm(bytesWriter, fieldInfo, state, absolute);\n        absolute = false;\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm.get(), pendingTerms[0].term.get());\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm.get(),\n                                             pendingTerms[termCount].term.get()));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length() - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes(), commonPrefix, suffix);\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        assert state != null;\n        bytesWriter.writeVInt(state.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          bytesWriter.writeVLong(state.totalTermFreq-state.docFreq);\n        }\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      // 4th pass: write the metadata \n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        postingsWriter.encodeTerm(longs, bufferWriter, fieldInfo, state, absolute);\n        for (int i = 0; i < longsSize; i++) {\n          bytesWriter.writeVLong(longs[i]);\n        }\n        bufferWriter.copyTo(bytesWriter);\n        bufferWriter.reset();\n        absolute = false;\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.TermsWriter#flushBlock().mjava","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm.get(), pendingTerms[0].term.get());\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm.get(),\n                                             pendingTerms[termCount].term.get()));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length() - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes(), commonPrefix, suffix);\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        assert state != null;\n        bytesWriter.writeVInt(state.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          bytesWriter.writeVLong(state.totalTermFreq-state.docFreq);\n        }\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      // 4th pass: write the metadata \n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        postingsWriter.encodeTerm(longs, bufferWriter, fieldInfo, state, absolute);\n        for (int i = 0; i < longsSize; i++) {\n          bytesWriter.writeVLong(longs[i]);\n        }\n        bufferWriter.copyTo(bytesWriter);\n        bufferWriter.reset();\n        absolute = false;\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm.get(), pendingTerms[0].term.get());\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm.get(),\n                                             pendingTerms[termCount].term.get()));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length() - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes(), commonPrefix, suffix);\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        assert state != null;\n        bytesWriter.writeVInt(state.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          bytesWriter.writeVLong(state.totalTermFreq-state.docFreq);\n        }\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      // 4th pass: write the metadata \n      boolean absolute = true;\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        postingsWriter.encodeTerm(bytesWriter, fieldInfo, state, absolute);\n        absolute = false;\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/BlockTermsWriter.TermsWriter#flushBlock().mjava","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm.get(), pendingTerms[0].term.get());\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm.get(),\n                                             pendingTerms[termCount].term.get()));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length() - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes(), commonPrefix, suffix);\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        assert state != null;\n        bytesWriter.writeVInt(state.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          bytesWriter.writeVLong(state.totalTermFreq-state.docFreq);\n        }\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      // 4th pass: write the metadata \n      boolean absolute = true;\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        postingsWriter.encodeTerm(bytesWriter, fieldInfo, state, absolute);\n        absolute = false;\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm.get(), pendingTerms[0].term.get());\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm.get(),\n                                             pendingTerms[termCount].term.get()));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length() - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes(), commonPrefix, suffix);\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        assert state != null;\n        bytesWriter.writeVInt(state.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n          bytesWriter.writeVLong(state.totalTermFreq-state.docFreq);\n        }\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      // 4th pass: write the metadata \n      long[] longs = new long[longsSize];\n      boolean absolute = true;\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final BlockTermState state = pendingTerms[termCount].state;\n        postingsWriter.encodeTerm(longs, bufferWriter, fieldInfo, state, absolute);\n        for (int i = 0; i < longsSize; i++) {\n          bytesWriter.writeVLong(longs[i]);\n        }\n        bufferWriter.copyTo(bytesWriter);\n        bufferWriter.reset();\n        absolute = false;\n      }\n      out.writeVInt(Math.toIntExact(bytesWriter.size()));\n      bytesWriter.copyTo(out);\n      bytesWriter.reset();\n\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["038e2a9b07e2f8ae58336613cea227bf8b973484","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}