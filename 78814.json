{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#randomRect(boolean,boolean).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#randomRect(boolean,boolean).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomRect(boolean,boolean).mjava","sourceNew":"  protected GeoRect randomRect(boolean small, boolean canCrossDateLine) {\n    double lat0 = randomLat(small);\n    double lat1 = randomLat(small);\n    double lon0 = randomLon(small);\n    double lon1 = randomLon(small);\n\n    if (lat1 < lat0) {\n      double x = lat0;\n      lat0 = lat1;\n      lat1 = x;\n    }\n\n    if (canCrossDateLine == false && lon1 < lon0) {\n      double x = lon0;\n      lon0 = lon1;\n      lon1 = x;\n    }\n\n    return new GeoRect(lon0, lon1, lat0, lat1);\n  }\n\n","sourceOld":"  protected GeoRect randomRect(boolean small, boolean canCrossDateLine) {\n    double lat0 = randomLat(small);\n    double lat1 = randomLat(small);\n    double lon0 = randomLon(small);\n    double lon1 = randomLon(small);\n\n    if (lat1 < lat0) {\n      double x = lat0;\n      lat0 = lat1;\n      lat1 = x;\n    }\n\n    if (canCrossDateLine == false && lon1 < lon0) {\n      double x = lon0;\n      lon0 = lon1;\n      lon1 = x;\n    }\n\n    return new GeoRect(lon0, lon1, lat0, lat1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#randomRect(boolean,boolean).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#randomRect(boolean,boolean).mjava","sourceNew":"  protected GeoRect randomRect(boolean small, boolean canCrossDateLine) {\n    double lat0 = randomLat(small);\n    double lat1 = randomLat(small);\n    double lon0 = randomLon(small);\n    double lon1 = randomLon(small);\n\n    if (lat1 < lat0) {\n      double x = lat0;\n      lat0 = lat1;\n      lat1 = x;\n    }\n\n    if (canCrossDateLine == false && lon1 < lon0) {\n      double x = lon0;\n      lon0 = lon1;\n      lon1 = x;\n    }\n\n    return new GeoRect(lon0, lon1, lat0, lat1);\n  }\n\n","sourceOld":"  protected GeoRect randomRect(boolean small, boolean canCrossDateLine) {\n    double lat0 = randomLat(small);\n    double lat1 = randomLat(small);\n    double lon0 = randomLon(small);\n    double lon1 = randomLon(small);\n\n    if (lat1 < lat0) {\n      double x = lat0;\n      lat0 = lat1;\n      lat1 = x;\n    }\n\n    if (canCrossDateLine == false && lon1 < lon0) {\n      double x = lon0;\n      lon0 = lon1;\n      lon1 = x;\n    }\n\n    return new GeoRect(lon0, lon1, lat0, lat1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#randomRect(boolean,boolean).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#randomRect(boolean,boolean).mjava","sourceNew":"  protected GeoRect randomRect(boolean small, boolean canCrossDateLine) {\n    double lat0 = randomLat(small);\n    double lat1 = randomLat(small);\n    double lon0 = randomLon(small);\n    double lon1 = randomLon(small);\n\n    if (lat1 < lat0) {\n      double x = lat0;\n      lat0 = lat1;\n      lat1 = x;\n    }\n\n    if (canCrossDateLine == false && lon1 < lon0) {\n      double x = lon0;\n      lon0 = lon1;\n      lon1 = x;\n    }\n\n    return new GeoRect(lat0, lat1, lon0, lon1);\n  }\n\n","sourceOld":"  protected GeoRect randomRect(boolean small, boolean canCrossDateLine) {\n    double lat0 = randomLat(small);\n    double lat1 = randomLat(small);\n    double lon0 = randomLon(small);\n    double lon1 = randomLon(small);\n\n    if (lat1 < lat0) {\n      double x = lat0;\n      lat0 = lat1;\n      lat1 = x;\n    }\n\n    if (canCrossDateLine == false && lon1 < lon0) {\n      double x = lon0;\n      lon0 = lon1;\n      lon1 = x;\n    }\n\n    return new GeoRect(lon0, lon1, lat0, lat1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1419d3974886c9518c259c786492b4d3660b0b8e","date":1459180094,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/GeoTestUtil#nextBoxInternal(double,double,double,double,boolean).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#randomRect(boolean,boolean).mjava","sourceNew":"  private static GeoRect nextBoxInternal(double lat0, double lat1, double lon0, double lon1, boolean canCrossDateLine) {\n    if (lat1 < lat0) {\n      double x = lat0;\n      lat0 = lat1;\n      lat1 = x;\n    }\n\n    if (canCrossDateLine == false && lon1 < lon0) {\n      double x = lon0;\n      lon0 = lon1;\n      lon1 = x;\n    }\n\n    return new GeoRect(lat0, lat1, lon0, lon1);\n  }\n\n","sourceOld":"  protected GeoRect randomRect(boolean small, boolean canCrossDateLine) {\n    double lat0 = randomLat(small);\n    double lat1 = randomLat(small);\n    double lon0 = randomLon(small);\n    double lon1 = randomLon(small);\n\n    if (lat1 < lat0) {\n      double x = lat0;\n      lat0 = lat1;\n      lat1 = x;\n    }\n\n    if (canCrossDateLine == false && lon1 < lon0) {\n      double x = lon0;\n      lon0 = lon1;\n      lon1 = x;\n    }\n\n    return new GeoRect(lat0, lat1, lon0, lon1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec996bf2daff09d61a876319e8fae4aebbea58e3":["937923083e4d137932336fc80f3d78758ff698a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"1419d3974886c9518c259c786492b4d3660b0b8e":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1419d3974886c9518c259c786492b4d3660b0b8e"]},"commit2Childs":{"ec996bf2daff09d61a876319e8fae4aebbea58e3":["1419d3974886c9518c259c786492b4d3660b0b8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"1419d3974886c9518c259c786492b4d3660b0b8e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"937923083e4d137932336fc80f3d78758ff698a6":["ec996bf2daff09d61a876319e8fae4aebbea58e3","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}