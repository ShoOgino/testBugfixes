{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","commits":[{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(double,double,double).mjava","sourceNew":"  public GeoCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    final double cosAngle = Math.cos(cutoffAngle);\n    this.center = new GeoPoint(planetModel, lat, lon);\n    final double magnitude = center.magnitude();\n    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership\n    // can be used to make in/out determination.\n    this.cutoffAngle = cutoffAngle;\n    // The plane's normal vector needs to be normalized, since we compute D on that basis\n    this.circlePlane = new SidedPlane(center, center.normalize(), -cosAngle * magnitude);\n\n    // Compute a point on the circle boundary.\n    if (cutoffAngle == Math.PI)\n      this.edgePoints = new GeoPoint[0];\n    else {\n      // We already have circle plane, which is the definitive determination of the edge of the \"circle\".\n      // Next, compute vertical plane going through origin and the center point (C = 0, D = 0).\n      Plane verticalPlane = Plane.constructNormalizedVerticalPlane(this.center.x, this.center.y);\n      if (verticalPlane == null) {\n        verticalPlane = new Plane(1.0,0.0);\n      }\n      // Finally, use Plane.findIntersections() to find the intersection points.\n      final GeoPoint edgePoint = this.circlePlane.getSampleIntersectionPoint(planetModel, verticalPlane);\n      if (edgePoint == null) {\n        throw new RuntimeException(\"Could not find edge point for circle at lat=\"+lat+\" lon=\"+lon+\" cutoffAngle=\"+cutoffAngle+\" planetModel=\"+planetModel);\n      }\n      //if (Math.abs(circlePlane.evaluate(edgePoint)) > 1e-10)\n      //    throw new RuntimeException(\"Computed an edge point that does not satisfy circlePlane equation! \"+circlePlane.evaluate(edgePoint));\n      this.edgePoints = new GeoPoint[]{edgePoint};\n    }\n  }\n\n","sourceOld":"  public GeoCircle(final double lat, final double lon, final double cutoffAngle) {\n    super();\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    final double sinAngle = Math.sin(cutoffAngle);\n    final double cosAngle = Math.cos(cutoffAngle);\n    this.center = new GeoPoint(lat, lon);\n    this.cutoffNormalDistance = sinAngle;\n    // Need the chord distance.  This is just the chord distance: sqrt((1 - cos(angle))^2 + (sin(angle))^2).\n    final double xDiff = 1.0 - cosAngle;\n    this.cutoffLinearDistance = Math.sqrt(xDiff * xDiff + sinAngle * sinAngle);\n    this.cutoffAngle = cutoffAngle;\n    this.circlePlane = new SidedPlane(center, center, -cosAngle);\n\n    // Compute a point on the circle boundary.\n    if (cutoffAngle == Math.PI)\n      this.edgePoints = new GeoPoint[0];\n    else {\n      // Move from center only in latitude.  Then, if we go past the north pole, adjust the longitude also.\n      double newLat = lat + cutoffAngle;\n      double newLon = lon;\n      if (newLat > Math.PI * 0.5) {\n        newLat = Math.PI - newLat;\n        newLon += Math.PI;\n      }\n      while (newLon > Math.PI) {\n        newLon -= Math.PI * 2.0;\n      }\n      final GeoPoint edgePoint = new GeoPoint(newLat, newLon);\n      //if (Math.abs(circlePlane.evaluate(edgePoint)) > 1e-10)\n      //    throw new RuntimeException(\"Computed an edge point that does not satisfy circlePlane equation! \"+circlePlane.evaluate(edgePoint));\n      this.edgePoints = new GeoPoint[]{edgePoint};\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":1,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(double,double,double).mjava","sourceNew":"  public GeoCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    final double cosAngle = Math.cos(cutoffAngle);\n    this.center = new GeoPoint(planetModel, lat, lon);\n    final double magnitude = center.magnitude();\n    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership\n    // can be used to make in/out determination.\n    this.cutoffAngle = cutoffAngle;\n    // The plane's normal vector needs to be normalized, since we compute D on that basis\n    this.circlePlane = new SidedPlane(center, center.normalize(), -cosAngle * magnitude);\n\n    // Compute a point on the circle boundary.\n    if (cutoffAngle == Math.PI)\n      this.edgePoints = new GeoPoint[0];\n    else {\n      // We already have circle plane, which is the definitive determination of the edge of the \"circle\".\n      // Next, compute vertical plane going through origin and the center point (C = 0, D = 0).\n      Plane verticalPlane = Plane.constructNormalizedVerticalPlane(this.center.x, this.center.y);\n      if (verticalPlane == null) {\n        verticalPlane = new Plane(1.0,0.0);\n      }\n      // Finally, use Plane.findIntersections() to find the intersection points.\n      final GeoPoint edgePoint = this.circlePlane.getSampleIntersectionPoint(planetModel, verticalPlane);\n      if (edgePoint == null) {\n        throw new RuntimeException(\"Could not find edge point for circle at lat=\"+lat+\" lon=\"+lon+\" cutoffAngle=\"+cutoffAngle+\" planetModel=\"+planetModel);\n      }\n      //if (Math.abs(circlePlane.evaluate(edgePoint)) > 1e-10)\n      //    throw new RuntimeException(\"Computed an edge point that does not satisfy circlePlane equation! \"+circlePlane.evaluate(edgePoint));\n      this.edgePoints = new GeoPoint[]{edgePoint};\n    }\n  }\n\n","sourceOld":"  public GeoCircle(final double lat, final double lon, final double cutoffAngle) {\n    super();\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    final double sinAngle = Math.sin(cutoffAngle);\n    final double cosAngle = Math.cos(cutoffAngle);\n    this.center = new GeoPoint(lat, lon);\n    this.cutoffNormalDistance = sinAngle;\n    // Need the chord distance.  This is just the chord distance: sqrt((1 - cos(angle))^2 + (sin(angle))^2).\n    final double xDiff = 1.0 - cosAngle;\n    this.cutoffLinearDistance = Math.sqrt(xDiff * xDiff + sinAngle * sinAngle);\n    this.cutoffAngle = cutoffAngle;\n    this.circlePlane = new SidedPlane(center, center, -cosAngle);\n\n    // Compute a point on the circle boundary.\n    if (cutoffAngle == Math.PI)\n      this.edgePoints = new GeoPoint[0];\n    else {\n      // Move from center only in latitude.  Then, if we go past the north pole, adjust the longitude also.\n      double newLat = lat + cutoffAngle;\n      double newLon = lon;\n      if (newLat > Math.PI * 0.5) {\n        newLat = Math.PI - newLat;\n        newLon += Math.PI;\n      }\n      while (newLon > Math.PI) {\n        newLon -= Math.PI * 2.0;\n      }\n      final GeoPoint edgePoint = new GeoPoint(newLat, newLon);\n      //if (Math.abs(circlePlane.evaluate(edgePoint)) > 1e-10)\n      //    throw new RuntimeException(\"Computed an edge point that does not satisfy circlePlane equation! \"+circlePlane.evaluate(edgePoint));\n      this.edgePoints = new GeoPoint[]{edgePoint};\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"535df84251be5af3be84d750beba0021aff9132d","date":1434649368,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","sourceNew":"  public GeoCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    final double cosAngle = Math.cos(cutoffAngle);\n    this.center = new GeoPoint(planetModel, lat, lon);\n    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership\n    // can be used to make in/out determination.\n    this.cutoffAngle = cutoffAngle;\n    // Compute two points on the circle, with the right angle from the center.  We'll use these\n    // to obtain the perpendicular plane to the circle.\n    double upperLat = lat + cutoffAngle;\n    double upperLon = lon;\n    if (upperLat > Math.PI * 0.5) {\n      upperLon += Math.PI;\n      if (upperLon > Math.PI)\n        upperLon -= 2.0 * Math.PI;\n      upperLat = Math.PI - upperLat;\n    }\n    double lowerLat = lat - cutoffAngle;\n    double lowerLon = lon;\n    if (lowerLat < -Math.PI * 0.5) {\n      lowerLon += Math.PI;\n      if (lowerLon > Math.PI)\n        lowerLon -= 2.0 * Math.PI;\n      lowerLat = -Math.PI - lowerLat;\n    }\n    final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n    final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n    // Construct normal plane\n    final Plane normalPlane = new Plane(upperPoint, center);\n    // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n    this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n    if (circlePlane == null)\n      throw new RuntimeException(\"Couldn't construct circle plane.  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n    // Compute a point on the circle boundary.\n    if (cutoffAngle == Math.PI)\n      this.edgePoints = new GeoPoint[0];\n    else {\n      this.edgePoints = new GeoPoint[]{upperPoint};\n    }\n  }\n\n","sourceOld":"  public GeoCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    final double cosAngle = Math.cos(cutoffAngle);\n    this.center = new GeoPoint(planetModel, lat, lon);\n    final double magnitude = center.magnitude();\n    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership\n    // can be used to make in/out determination.\n    this.cutoffAngle = cutoffAngle;\n    // The plane's normal vector needs to be normalized, since we compute D on that basis\n    this.circlePlane = new SidedPlane(center, center.normalize(), -cosAngle * magnitude);\n\n    // Compute a point on the circle boundary.\n    if (cutoffAngle == Math.PI)\n      this.edgePoints = new GeoPoint[0];\n    else {\n      // We already have circle plane, which is the definitive determination of the edge of the \"circle\".\n      // Next, compute vertical plane going through origin and the center point (C = 0, D = 0).\n      Plane verticalPlane = Plane.constructNormalizedVerticalPlane(this.center.x, this.center.y);\n      if (verticalPlane == null) {\n        verticalPlane = new Plane(1.0,0.0);\n      }\n      // Finally, use Plane.findIntersections() to find the intersection points.\n      final GeoPoint edgePoint = this.circlePlane.getSampleIntersectionPoint(planetModel, verticalPlane);\n      if (edgePoint == null) {\n        throw new RuntimeException(\"Could not find edge point for circle at lat=\"+lat+\" lon=\"+lon+\" cutoffAngle=\"+cutoffAngle+\" planetModel=\"+planetModel);\n      }\n      //if (Math.abs(circlePlane.evaluate(edgePoint)) > 1e-10)\n      //    throw new RuntimeException(\"Computed an edge point that does not satisfy circlePlane equation! \"+circlePlane.evaluate(edgePoint));\n      this.edgePoints = new GeoPoint[]{edgePoint};\n    }\n  }\n\n","bugFix":null,"bugIntro":["5f38c0ec58dc5223e6494ed9a1195d20e8ca5676"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f38c0ec58dc5223e6494ed9a1195d20e8ca5676","date":1435237600,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","sourceNew":"  public GeoCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    this.center = new GeoPoint(planetModel, lat, lon);\n    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership\n    // can be used to make in/out determination.\n    this.cutoffAngle = cutoffAngle;\n    // Compute two points on the circle, with the right angle from the center.  We'll use these\n    // to obtain the perpendicular plane to the circle.\n    double upperLat = lat + cutoffAngle;\n    double upperLon = lon;\n    if (upperLat > Math.PI * 0.5) {\n      upperLon += Math.PI;\n      if (upperLon > Math.PI)\n        upperLon -= 2.0 * Math.PI;\n      upperLat = Math.PI - upperLat;\n    }\n    double lowerLat = lat - cutoffAngle;\n    double lowerLon = lon;\n    if (lowerLat < -Math.PI * 0.5) {\n      lowerLon += Math.PI;\n      if (lowerLon > Math.PI)\n        lowerLon -= 2.0 * Math.PI;\n      lowerLat = -Math.PI - lowerLat;\n    }\n    final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n    final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n    if (Math.abs(cutoffAngle - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      // Circle is the whole world\n      this.circlePlane = null;\n      this.edgePoints = new GeoPoint[0];\n    } else {\n      // Construct normal plane\n      final Plane normalPlane = new Plane(upperPoint, center);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n      if (circlePlane == null)\n        throw new RuntimeException(\"Couldn't construct circle plane.  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n      this.edgePoints = new GeoPoint[]{upperPoint};\n    }\n  }\n\n","sourceOld":"  public GeoCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    final double cosAngle = Math.cos(cutoffAngle);\n    this.center = new GeoPoint(planetModel, lat, lon);\n    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership\n    // can be used to make in/out determination.\n    this.cutoffAngle = cutoffAngle;\n    // Compute two points on the circle, with the right angle from the center.  We'll use these\n    // to obtain the perpendicular plane to the circle.\n    double upperLat = lat + cutoffAngle;\n    double upperLon = lon;\n    if (upperLat > Math.PI * 0.5) {\n      upperLon += Math.PI;\n      if (upperLon > Math.PI)\n        upperLon -= 2.0 * Math.PI;\n      upperLat = Math.PI - upperLat;\n    }\n    double lowerLat = lat - cutoffAngle;\n    double lowerLon = lon;\n    if (lowerLat < -Math.PI * 0.5) {\n      lowerLon += Math.PI;\n      if (lowerLon > Math.PI)\n        lowerLon -= 2.0 * Math.PI;\n      lowerLat = -Math.PI - lowerLat;\n    }\n    final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n    final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n    // Construct normal plane\n    final Plane normalPlane = new Plane(upperPoint, center);\n    // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n    this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n    if (circlePlane == null)\n      throw new RuntimeException(\"Couldn't construct circle plane.  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n    // Compute a point on the circle boundary.\n    if (cutoffAngle == Math.PI)\n      this.edgePoints = new GeoPoint[0];\n    else {\n      this.edgePoints = new GeoPoint[]{upperPoint};\n    }\n  }\n\n","bugFix":["f9f97ca977ad649f14b4f60a888adef2edd7a64e","535df84251be5af3be84d750beba0021aff9132d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f3c09e163d39ea7acb6f142f32aed0a6f523c5a","date":1435805572,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","sourceNew":"  public GeoCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    this.center = new GeoPoint(planetModel, lat, lon);\n    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership\n    // can be used to make in/out determination.\n    this.cutoffAngle = cutoffAngle;\n    // Compute two points on the circle, with the right angle from the center.  We'll use these\n    // to obtain the perpendicular plane to the circle.\n    double upperLat = lat + cutoffAngle;\n    double upperLon = lon;\n    if (upperLat > Math.PI * 0.5) {\n      upperLon += Math.PI;\n      if (upperLon > Math.PI)\n        upperLon -= 2.0 * Math.PI;\n      upperLat = Math.PI - upperLat;\n    }\n    double lowerLat = lat - cutoffAngle;\n    double lowerLon = lon;\n    if (lowerLat < -Math.PI * 0.5) {\n      lowerLon += Math.PI;\n      if (lowerLon > Math.PI)\n        lowerLon -= 2.0 * Math.PI;\n      lowerLat = -Math.PI - lowerLat;\n    }\n    final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n    final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n    if (Math.abs(cutoffAngle - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      // Circle is the whole world\n      this.circlePlane = null;\n      this.edgePoints = new GeoPoint[0];\n    } else {\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedVerticalPlane(upperPoint, lowerPoint, center);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n      if (circlePlane == null)\n        throw new RuntimeException(\"Couldn't construct circle plane.  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n      this.edgePoints = new GeoPoint[]{upperPoint};\n    }\n  }\n\n","sourceOld":"  public GeoCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    this.center = new GeoPoint(planetModel, lat, lon);\n    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership\n    // can be used to make in/out determination.\n    this.cutoffAngle = cutoffAngle;\n    // Compute two points on the circle, with the right angle from the center.  We'll use these\n    // to obtain the perpendicular plane to the circle.\n    double upperLat = lat + cutoffAngle;\n    double upperLon = lon;\n    if (upperLat > Math.PI * 0.5) {\n      upperLon += Math.PI;\n      if (upperLon > Math.PI)\n        upperLon -= 2.0 * Math.PI;\n      upperLat = Math.PI - upperLat;\n    }\n    double lowerLat = lat - cutoffAngle;\n    double lowerLon = lon;\n    if (lowerLat < -Math.PI * 0.5) {\n      lowerLon += Math.PI;\n      if (lowerLon > Math.PI)\n        lowerLon -= 2.0 * Math.PI;\n      lowerLat = -Math.PI - lowerLat;\n    }\n    final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n    final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n    if (Math.abs(cutoffAngle - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      // Circle is the whole world\n      this.circlePlane = null;\n      this.edgePoints = new GeoPoint[0];\n    } else {\n      // Construct normal plane\n      final Plane normalPlane = new Plane(upperPoint, center);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n      if (circlePlane == null)\n        throw new RuntimeException(\"Couldn't construct circle plane.  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n      this.edgePoints = new GeoPoint[]{upperPoint};\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoCircle#GeoCircle(PlanetModel,double,double,double).mjava","sourceNew":"  public GeoCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    this.center = new GeoPoint(planetModel, lat, lon);\n    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership\n    // can be used to make in/out determination.\n    this.cutoffAngle = cutoffAngle;\n    // Compute two points on the circle, with the right angle from the center.  We'll use these\n    // to obtain the perpendicular plane to the circle.\n    double upperLat = lat + cutoffAngle;\n    double upperLon = lon;\n    if (upperLat > Math.PI * 0.5) {\n      upperLon += Math.PI;\n      if (upperLon > Math.PI)\n        upperLon -= 2.0 * Math.PI;\n      upperLat = Math.PI - upperLat;\n    }\n    double lowerLat = lat - cutoffAngle;\n    double lowerLon = lon;\n    if (lowerLat < -Math.PI * 0.5) {\n      lowerLon += Math.PI;\n      if (lowerLon > Math.PI)\n        lowerLon -= 2.0 * Math.PI;\n      lowerLat = -Math.PI - lowerLat;\n    }\n    final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n    final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n    if (Math.abs(cutoffAngle - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      // Circle is the whole world\n      this.circlePlane = null;\n      this.edgePoints = new GeoPoint[0];\n    } else {\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedVerticalPlane(upperPoint, lowerPoint, center);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n      if (circlePlane == null)\n        throw new RuntimeException(\"Couldn't construct circle plane.  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n      this.edgePoints = new GeoPoint[]{upperPoint};\n    }\n  }\n\n","sourceOld":"  public GeoCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {\n    super(planetModel);\n    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Latitude out of bounds\");\n    if (lon < -Math.PI || lon > Math.PI)\n      throw new IllegalArgumentException(\"Longitude out of bounds\");\n    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)\n      throw new IllegalArgumentException(\"Cutoff angle out of bounds\");\n    this.center = new GeoPoint(planetModel, lat, lon);\n    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership\n    // can be used to make in/out determination.\n    this.cutoffAngle = cutoffAngle;\n    // Compute two points on the circle, with the right angle from the center.  We'll use these\n    // to obtain the perpendicular plane to the circle.\n    double upperLat = lat + cutoffAngle;\n    double upperLon = lon;\n    if (upperLat > Math.PI * 0.5) {\n      upperLon += Math.PI;\n      if (upperLon > Math.PI)\n        upperLon -= 2.0 * Math.PI;\n      upperLat = Math.PI - upperLat;\n    }\n    double lowerLat = lat - cutoffAngle;\n    double lowerLon = lon;\n    if (lowerLat < -Math.PI * 0.5) {\n      lowerLon += Math.PI;\n      if (lowerLon > Math.PI)\n        lowerLon -= 2.0 * Math.PI;\n      lowerLat = -Math.PI - lowerLat;\n    }\n    final GeoPoint upperPoint = new GeoPoint(planetModel, upperLat, upperLon);\n    final GeoPoint lowerPoint = new GeoPoint(planetModel, lowerLat, lowerLon);\n    if (Math.abs(cutoffAngle - Math.PI) < Vector.MINIMUM_RESOLUTION) {\n      // Circle is the whole world\n      this.circlePlane = null;\n      this.edgePoints = new GeoPoint[0];\n    } else {\n      // Construct normal plane\n      final Plane normalPlane = Plane.constructNormalizedVerticalPlane(upperPoint, lowerPoint, center);\n      // Construct a sided plane that goes through the two points and whose normal is in the normalPlane.\n      this.circlePlane = SidedPlane.constructNormalizedPerpendicularSidedPlane(center, normalPlane, upperPoint, lowerPoint);\n      if (circlePlane == null)\n        throw new RuntimeException(\"Couldn't construct circle plane.  Cutoff angle = \"+cutoffAngle+\"; upperPoint = \"+upperPoint+\"; lowerPoint = \"+lowerPoint);\n      this.edgePoints = new GeoPoint[]{upperPoint};\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f38c0ec58dc5223e6494ed9a1195d20e8ca5676":["535df84251be5af3be84d750beba0021aff9132d"],"5f3c09e163d39ea7acb6f142f32aed0a6f523c5a":["5f38c0ec58dc5223e6494ed9a1195d20e8ca5676"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["5f3c09e163d39ea7acb6f142f32aed0a6f523c5a"],"535df84251be5af3be84d750beba0021aff9132d":["fec06d6753751ae302c7d35866763e6cb414112d"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"5f38c0ec58dc5223e6494ed9a1195d20e8ca5676":["5f3c09e163d39ea7acb6f142f32aed0a6f523c5a"],"5f3c09e163d39ea7acb6f142f32aed0a6f523c5a":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"fec06d6753751ae302c7d35866763e6cb414112d":["535df84251be5af3be84d750beba0021aff9132d"],"535df84251be5af3be84d750beba0021aff9132d":["5f38c0ec58dc5223e6494ed9a1195d20e8ca5676"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}