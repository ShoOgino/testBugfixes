{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#createZkCredentialsToAddAutomatically().mjava","commits":[{"id":"c83f985d9828d30801541f1eed26aa3169646baf","date":1409315453,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#createZkCredentialsToAddAutomatically().mjava","pathOld":"/dev/null","sourceNew":"  protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n    String zkCredentialsProviderClassName = System.getProperty(ZK_CRED_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkCredentialsProviderClassName)) {\n      try {\n        log.info(\"Using ZkCredentialsProvider: \" + zkCredentialsProviderClassName);\n        return (ZkCredentialsProvider)Class.forName(zkCredentialsProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        // just ignore - go default\n        log.warn(\"VM param zkCredentialsProvider does not point to a class implementing ZkCredentialsProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.info(\"Using default ZkCredentialsProvider\");\n    return new DefaultZkCredentialsProvider();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#createZkCredentialsToAddAutomatically().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#createZkCredentialsToAddAutomatically().mjava","sourceNew":"  protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n    String zkCredentialsProviderClassName = System.getProperty(ZK_CRED_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkCredentialsProviderClassName)) {\n      try {\n        log.info(\"Using ZkCredentialsProvider: \" + zkCredentialsProviderClassName);\n        return (ZkCredentialsProvider)Class.forName(zkCredentialsProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        // just ignore - go default\n        log.warn(\"VM param zkCredentialsProvider does not point to a class implementing ZkCredentialsProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.debug(\"Using default ZkCredentialsProvider\");\n    return new DefaultZkCredentialsProvider();\n  }\n\n","sourceOld":"  protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n    String zkCredentialsProviderClassName = System.getProperty(ZK_CRED_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkCredentialsProviderClassName)) {\n      try {\n        log.info(\"Using ZkCredentialsProvider: \" + zkCredentialsProviderClassName);\n        return (ZkCredentialsProvider)Class.forName(zkCredentialsProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        // just ignore - go default\n        log.warn(\"VM param zkCredentialsProvider does not point to a class implementing ZkCredentialsProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.info(\"Using default ZkCredentialsProvider\");\n    return new DefaultZkCredentialsProvider();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#createZkCredentialsToAddAutomatically().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#createZkCredentialsToAddAutomatically().mjava","sourceNew":"  protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n    String zkCredentialsProviderClassName = System.getProperty(ZK_CRED_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkCredentialsProviderClassName)) {\n      try {\n        log.info(\"Using ZkCredentialsProvider: \" + zkCredentialsProviderClassName);\n        return (ZkCredentialsProvider)Class.forName(zkCredentialsProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        // just ignore - go default\n        log.warn(\"VM param zkCredentialsProvider does not point to a class implementing ZkCredentialsProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.debug(\"Using default ZkCredentialsProvider\");\n    return new DefaultZkCredentialsProvider();\n  }\n\n","sourceOld":"  protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n    String zkCredentialsProviderClassName = System.getProperty(ZK_CRED_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkCredentialsProviderClassName)) {\n      try {\n        log.info(\"Using ZkCredentialsProvider: \" + zkCredentialsProviderClassName);\n        return (ZkCredentialsProvider)Class.forName(zkCredentialsProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        // just ignore - go default\n        log.warn(\"VM param zkCredentialsProvider does not point to a class implementing ZkCredentialsProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.info(\"Using default ZkCredentialsProvider\");\n    return new DefaultZkCredentialsProvider();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#createZkCredentialsToAddAutomatically().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#createZkCredentialsToAddAutomatically().mjava","sourceNew":"  protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n    String zkCredentialsProviderClassName = System.getProperty(ZK_CRED_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkCredentialsProviderClassName)) {\n      try {\n        log.info(\"Using ZkCredentialsProvider: \" + zkCredentialsProviderClassName);\n        return (ZkCredentialsProvider)Class.forName(zkCredentialsProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        // just ignore - go default\n        log.warn(\"VM param zkCredentialsProvider does not point to a class implementing ZkCredentialsProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.debug(\"Using default ZkCredentialsProvider\");\n    return new DefaultZkCredentialsProvider();\n  }\n\n","sourceOld":"  protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n    String zkCredentialsProviderClassName = System.getProperty(ZK_CRED_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkCredentialsProviderClassName)) {\n      try {\n        log.info(\"Using ZkCredentialsProvider: \" + zkCredentialsProviderClassName);\n        return (ZkCredentialsProvider)Class.forName(zkCredentialsProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        // just ignore - go default\n        log.warn(\"VM param zkCredentialsProvider does not point to a class implementing ZkCredentialsProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.info(\"Using default ZkCredentialsProvider\");\n    return new DefaultZkCredentialsProvider();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#createZkCredentialsToAddAutomatically().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#createZkCredentialsToAddAutomatically().mjava","sourceNew":"  protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n    String zkCredentialsProviderClassName = System.getProperty(ZK_CRED_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkCredentialsProviderClassName)) {\n      try {\n        log.info(\"Using ZkCredentialsProvider: {}\", zkCredentialsProviderClassName);\n        return (ZkCredentialsProvider)Class.forName(zkCredentialsProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        // just ignore - go default\n        log.warn(\"VM param zkCredentialsProvider does not point to a class implementing ZkCredentialsProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.debug(\"Using default ZkCredentialsProvider\");\n    return new DefaultZkCredentialsProvider();\n  }\n\n","sourceOld":"  protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {\n    String zkCredentialsProviderClassName = System.getProperty(ZK_CRED_PROVIDER_CLASS_NAME_VM_PARAM_NAME);\n    if (!StringUtils.isEmpty(zkCredentialsProviderClassName)) {\n      try {\n        log.info(\"Using ZkCredentialsProvider: \" + zkCredentialsProviderClassName);\n        return (ZkCredentialsProvider)Class.forName(zkCredentialsProviderClassName).getConstructor().newInstance();\n      } catch (Throwable t) {\n        // just ignore - go default\n        log.warn(\"VM param zkCredentialsProvider does not point to a class implementing ZkCredentialsProvider and with a non-arg constructor\", t);\n      }\n    }\n    log.debug(\"Using default ZkCredentialsProvider\");\n    return new DefaultZkCredentialsProvider();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"962cd4f5e313777f35da8f521265323e84184929":["c83f985d9828d30801541f1eed26aa3169646baf"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c83f985d9828d30801541f1eed26aa3169646baf","962cd4f5e313777f35da8f521265323e84184929"],"c83f985d9828d30801541f1eed26aa3169646baf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c83f985d9828d30801541f1eed26aa3169646baf","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dc613ed6f75d1988140301ee8de8fdb056fa337"]},"commit2Childs":{"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["6dc613ed6f75d1988140301ee8de8fdb056fa337","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c83f985d9828d30801541f1eed26aa3169646baf"],"c83f985d9828d30801541f1eed26aa3169646baf":["962cd4f5e313777f35da8f521265323e84184929","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}