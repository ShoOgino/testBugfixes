{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSE().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSE().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSE().mjava","sourceNew":"  public void testDumbCompoundWordsSE() throws Exception {\n    CharArraySet dict = makeDictionary(\"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiol\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\");\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new MockTokenizer( \n            new StringReader(\n                \"Bildörr Bilmotor Biltak Slagborr Hammarborr Pelarborr Glasögonfodral Basfiolsfodral Basfiolsfodralmakaregesäll Skomakare Vindrutetorkare Vindrutetorkarblad abba\"),\n            MockTokenizer.WHITESPACE, false),\n        dict);\n\n    assertTokenStreamContents(tf, new String[] { \"Bildörr\", \"Bil\", \"dörr\", \"Bilmotor\",\n        \"Bil\", \"motor\", \"Biltak\", \"Bil\", \"tak\", \"Slagborr\", \"Slag\", \"borr\",\n        \"Hammarborr\", \"Hammar\", \"borr\", \"Pelarborr\", \"Pelar\", \"borr\",\n        \"Glasögonfodral\", \"Glas\", \"ögon\", \"fodral\", \"Basfiolsfodral\", \"Bas\",\n        \"fiol\", \"fodral\", \"Basfiolsfodralmakaregesäll\", \"Bas\", \"fiol\",\n        \"fodral\", \"makare\", \"gesäll\", \"Skomakare\", \"Sko\", \"makare\",\n        \"Vindrutetorkare\", \"Vind\", \"rute\", \"torkare\", \"Vindrutetorkarblad\",\n        \"Vind\", \"rute\", \"blad\", \"abba\" }, new int[] { 0, 0, 3, 8, 8, 11, 17,\n        17, 20, 24, 24, 28, 33, 33, 39, 44, 44, 49, 54, 54, 58, 62, 69, 69, 72,\n        77, 84, 84, 87, 92, 98, 104, 111, 111, 114, 121, 121, 125, 129, 137,\n        137, 141, 151, 156 }, new int[] { 7, 3, 7, 16, 11, 16, 23, 20, 23, 32,\n        28, 32, 43, 39, 43, 53, 49, 53, 68, 58, 62, 68, 83, 72, 76, 83, 110,\n        87, 91, 98, 104, 110, 120, 114, 120, 136, 125, 129, 136, 155, 141, 145,\n        155, 160 }, new int[] { 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n        0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,\n        0, 0, 0, 1 });\n  }\n\n","sourceOld":"  public void testDumbCompoundWordsSE() throws Exception {\n    CharArraySet dict = makeDictionary(\"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiol\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\");\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new MockTokenizer( \n            new StringReader(\n                \"Bildörr Bilmotor Biltak Slagborr Hammarborr Pelarborr Glasögonfodral Basfiolsfodral Basfiolsfodralmakaregesäll Skomakare Vindrutetorkare Vindrutetorkarblad abba\"),\n            MockTokenizer.WHITESPACE, false),\n        dict);\n\n    assertTokenStreamContents(tf, new String[] { \"Bildörr\", \"Bil\", \"dörr\", \"Bilmotor\",\n        \"Bil\", \"motor\", \"Biltak\", \"Bil\", \"tak\", \"Slagborr\", \"Slag\", \"borr\",\n        \"Hammarborr\", \"Hammar\", \"borr\", \"Pelarborr\", \"Pelar\", \"borr\",\n        \"Glasögonfodral\", \"Glas\", \"ögon\", \"fodral\", \"Basfiolsfodral\", \"Bas\",\n        \"fiol\", \"fodral\", \"Basfiolsfodralmakaregesäll\", \"Bas\", \"fiol\",\n        \"fodral\", \"makare\", \"gesäll\", \"Skomakare\", \"Sko\", \"makare\",\n        \"Vindrutetorkare\", \"Vind\", \"rute\", \"torkare\", \"Vindrutetorkarblad\",\n        \"Vind\", \"rute\", \"blad\", \"abba\" }, new int[] { 0, 0, 3, 8, 8, 11, 17,\n        17, 20, 24, 24, 28, 33, 33, 39, 44, 44, 49, 54, 54, 58, 62, 69, 69, 72,\n        77, 84, 84, 87, 92, 98, 104, 111, 111, 114, 121, 121, 125, 129, 137,\n        137, 141, 151, 156 }, new int[] { 7, 3, 7, 16, 11, 16, 23, 20, 23, 32,\n        28, 32, 43, 39, 43, 53, 49, 53, 68, 58, 62, 68, 83, 72, 76, 83, 110,\n        87, 91, 98, 104, 110, 120, 114, 120, 136, 125, 129, 136, 155, 141, 145,\n        155, 160 }, new int[] { 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n        0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,\n        0, 0, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1497255a2ce11dc672a80859c79fabe7efa51d2e","date":1369725708,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSE().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSE().mjava","sourceNew":"  public void testDumbCompoundWordsSE() throws Exception {\n    CharArraySet dict = makeDictionary(\"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiol\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\");\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new MockTokenizer( \n            new StringReader(\n                \"Bildörr Bilmotor Biltak Slagborr Hammarborr Pelarborr Glasögonfodral Basfiolsfodral Basfiolsfodralmakaregesäll Skomakare Vindrutetorkare Vindrutetorkarblad abba\"),\n            MockTokenizer.WHITESPACE, false),\n        dict);\n\n    assertTokenStreamContents(tf, new String[] { \"Bildörr\", \"Bil\", \"dörr\", \"Bilmotor\",\n        \"Bil\", \"motor\", \"Biltak\", \"Bil\", \"tak\", \"Slagborr\", \"Slag\", \"borr\",\n        \"Hammarborr\", \"Hammar\", \"borr\", \"Pelarborr\", \"Pelar\", \"borr\",\n        \"Glasögonfodral\", \"Glas\", \"ögon\", \"fodral\", \"Basfiolsfodral\", \"Bas\",\n        \"fiol\", \"fodral\", \"Basfiolsfodralmakaregesäll\", \"Bas\", \"fiol\",\n        \"fodral\", \"makare\", \"gesäll\", \"Skomakare\", \"Sko\", \"makare\",\n        \"Vindrutetorkare\", \"Vind\", \"rute\", \"torkare\", \"Vindrutetorkarblad\",\n        \"Vind\", \"rute\", \"blad\", \"abba\" }, new int[] { 0, 0, 0, 8, 8, 8, 17,\n        17, 17, 24, 24, 24, 33, 33, 33, 44, 44, 44, 54, 54, 54, 54, 69, 69, 69,\n        69, 84, 84, 84, 84, 84, 84, 111, 111, 111, 121, 121, 121, 121, 137,\n        137, 137, 137, 156 }, new int[] { 7, 7, 7, 16, 16, 16, 23, 23, 23, 32,\n        32, 32, 43, 43, 43, 53, 53, 53, 68, 68, 68, 68, 83, 83, 83, 83, 110,\n        110, 110, 110, 110, 110, 120, 120, 120, 136, 136, 136, 136, 155, 155, 155,\n        155, 160 }, new int[] { 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n        0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,\n        0, 0, 0, 1 });\n  }\n\n","sourceOld":"  public void testDumbCompoundWordsSE() throws Exception {\n    CharArraySet dict = makeDictionary(\"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiol\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\");\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new MockTokenizer( \n            new StringReader(\n                \"Bildörr Bilmotor Biltak Slagborr Hammarborr Pelarborr Glasögonfodral Basfiolsfodral Basfiolsfodralmakaregesäll Skomakare Vindrutetorkare Vindrutetorkarblad abba\"),\n            MockTokenizer.WHITESPACE, false),\n        dict);\n\n    assertTokenStreamContents(tf, new String[] { \"Bildörr\", \"Bil\", \"dörr\", \"Bilmotor\",\n        \"Bil\", \"motor\", \"Biltak\", \"Bil\", \"tak\", \"Slagborr\", \"Slag\", \"borr\",\n        \"Hammarborr\", \"Hammar\", \"borr\", \"Pelarborr\", \"Pelar\", \"borr\",\n        \"Glasögonfodral\", \"Glas\", \"ögon\", \"fodral\", \"Basfiolsfodral\", \"Bas\",\n        \"fiol\", \"fodral\", \"Basfiolsfodralmakaregesäll\", \"Bas\", \"fiol\",\n        \"fodral\", \"makare\", \"gesäll\", \"Skomakare\", \"Sko\", \"makare\",\n        \"Vindrutetorkare\", \"Vind\", \"rute\", \"torkare\", \"Vindrutetorkarblad\",\n        \"Vind\", \"rute\", \"blad\", \"abba\" }, new int[] { 0, 0, 3, 8, 8, 11, 17,\n        17, 20, 24, 24, 28, 33, 33, 39, 44, 44, 49, 54, 54, 58, 62, 69, 69, 72,\n        77, 84, 84, 87, 92, 98, 104, 111, 111, 114, 121, 121, 125, 129, 137,\n        137, 141, 151, 156 }, new int[] { 7, 3, 7, 16, 11, 16, 23, 20, 23, 32,\n        28, 32, 43, 39, 43, 53, 49, 53, 68, 58, 62, 68, 83, 72, 76, 83, 110,\n        87, 91, 98, 104, 110, 120, 114, 120, 136, 125, 129, 136, 155, 141, 145,\n        155, 160 }, new int[] { 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n        0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,\n        0, 0, 0, 1 });\n  }\n\n","bugFix":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSE().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSE().mjava","sourceNew":"  public void testDumbCompoundWordsSE() throws Exception {\n    CharArraySet dict = makeDictionary(\"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiol\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\");\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT,\n        whitespaceMockTokenizer(\n                \"Bildörr Bilmotor Biltak Slagborr Hammarborr Pelarborr Glasögonfodral Basfiolsfodral Basfiolsfodralmakaregesäll Skomakare Vindrutetorkare Vindrutetorkarblad abba\"),\n        dict);\n\n    assertTokenStreamContents(tf, new String[] { \"Bildörr\", \"Bil\", \"dörr\", \"Bilmotor\",\n        \"Bil\", \"motor\", \"Biltak\", \"Bil\", \"tak\", \"Slagborr\", \"Slag\", \"borr\",\n        \"Hammarborr\", \"Hammar\", \"borr\", \"Pelarborr\", \"Pelar\", \"borr\",\n        \"Glasögonfodral\", \"Glas\", \"ögon\", \"fodral\", \"Basfiolsfodral\", \"Bas\",\n        \"fiol\", \"fodral\", \"Basfiolsfodralmakaregesäll\", \"Bas\", \"fiol\",\n        \"fodral\", \"makare\", \"gesäll\", \"Skomakare\", \"Sko\", \"makare\",\n        \"Vindrutetorkare\", \"Vind\", \"rute\", \"torkare\", \"Vindrutetorkarblad\",\n        \"Vind\", \"rute\", \"blad\", \"abba\" }, new int[] { 0, 0, 0, 8, 8, 8, 17,\n        17, 17, 24, 24, 24, 33, 33, 33, 44, 44, 44, 54, 54, 54, 54, 69, 69, 69,\n        69, 84, 84, 84, 84, 84, 84, 111, 111, 111, 121, 121, 121, 121, 137,\n        137, 137, 137, 156 }, new int[] { 7, 7, 7, 16, 16, 16, 23, 23, 23, 32,\n        32, 32, 43, 43, 43, 53, 53, 53, 68, 68, 68, 68, 83, 83, 83, 83, 110,\n        110, 110, 110, 110, 110, 120, 120, 120, 136, 136, 136, 136, 155, 155, 155,\n        155, 160 }, new int[] { 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n        0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,\n        0, 0, 0, 1 });\n  }\n\n","sourceOld":"  public void testDumbCompoundWordsSE() throws Exception {\n    CharArraySet dict = makeDictionary(\"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiol\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\");\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT, \n        new MockTokenizer( \n            new StringReader(\n                \"Bildörr Bilmotor Biltak Slagborr Hammarborr Pelarborr Glasögonfodral Basfiolsfodral Basfiolsfodralmakaregesäll Skomakare Vindrutetorkare Vindrutetorkarblad abba\"),\n            MockTokenizer.WHITESPACE, false),\n        dict);\n\n    assertTokenStreamContents(tf, new String[] { \"Bildörr\", \"Bil\", \"dörr\", \"Bilmotor\",\n        \"Bil\", \"motor\", \"Biltak\", \"Bil\", \"tak\", \"Slagborr\", \"Slag\", \"borr\",\n        \"Hammarborr\", \"Hammar\", \"borr\", \"Pelarborr\", \"Pelar\", \"borr\",\n        \"Glasögonfodral\", \"Glas\", \"ögon\", \"fodral\", \"Basfiolsfodral\", \"Bas\",\n        \"fiol\", \"fodral\", \"Basfiolsfodralmakaregesäll\", \"Bas\", \"fiol\",\n        \"fodral\", \"makare\", \"gesäll\", \"Skomakare\", \"Sko\", \"makare\",\n        \"Vindrutetorkare\", \"Vind\", \"rute\", \"torkare\", \"Vindrutetorkarblad\",\n        \"Vind\", \"rute\", \"blad\", \"abba\" }, new int[] { 0, 0, 0, 8, 8, 8, 17,\n        17, 17, 24, 24, 24, 33, 33, 33, 44, 44, 44, 54, 54, 54, 54, 69, 69, 69,\n        69, 84, 84, 84, 84, 84, 84, 111, 111, 111, 121, 121, 121, 121, 137,\n        137, 137, 137, 156 }, new int[] { 7, 7, 7, 16, 16, 16, 23, 23, 23, 32,\n        32, 32, 43, 43, 43, 53, 53, 53, 68, 68, 68, 68, 83, 83, 83, 83, 110,\n        110, 110, 110, 110, 110, 120, 120, 120, 136, 136, 136, 136, 155, 155, 155,\n        155, 160 }, new int[] { 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n        0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,\n        0, 0, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSE().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/compound/TestCompoundWordTokenFilter#testDumbCompoundWordsSE().mjava","sourceNew":"  public void testDumbCompoundWordsSE() throws Exception {\n    CharArraySet dict = makeDictionary(\"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiol\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\");\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(\n        whitespaceMockTokenizer(\n                \"Bildörr Bilmotor Biltak Slagborr Hammarborr Pelarborr Glasögonfodral Basfiolsfodral Basfiolsfodralmakaregesäll Skomakare Vindrutetorkare Vindrutetorkarblad abba\"),\n        dict);\n\n    assertTokenStreamContents(tf, new String[] { \"Bildörr\", \"Bil\", \"dörr\", \"Bilmotor\",\n        \"Bil\", \"motor\", \"Biltak\", \"Bil\", \"tak\", \"Slagborr\", \"Slag\", \"borr\",\n        \"Hammarborr\", \"Hammar\", \"borr\", \"Pelarborr\", \"Pelar\", \"borr\",\n        \"Glasögonfodral\", \"Glas\", \"ögon\", \"fodral\", \"Basfiolsfodral\", \"Bas\",\n        \"fiol\", \"fodral\", \"Basfiolsfodralmakaregesäll\", \"Bas\", \"fiol\",\n        \"fodral\", \"makare\", \"gesäll\", \"Skomakare\", \"Sko\", \"makare\",\n        \"Vindrutetorkare\", \"Vind\", \"rute\", \"torkare\", \"Vindrutetorkarblad\",\n        \"Vind\", \"rute\", \"blad\", \"abba\" }, new int[] { 0, 0, 0, 8, 8, 8, 17,\n        17, 17, 24, 24, 24, 33, 33, 33, 44, 44, 44, 54, 54, 54, 54, 69, 69, 69,\n        69, 84, 84, 84, 84, 84, 84, 111, 111, 111, 121, 121, 121, 121, 137,\n        137, 137, 137, 156 }, new int[] { 7, 7, 7, 16, 16, 16, 23, 23, 23, 32,\n        32, 32, 43, 43, 43, 53, 53, 53, 68, 68, 68, 68, 83, 83, 83, 83, 110,\n        110, 110, 110, 110, 110, 120, 120, 120, 136, 136, 136, 136, 155, 155, 155,\n        155, 160 }, new int[] { 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n        0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,\n        0, 0, 0, 1 });\n  }\n\n","sourceOld":"  public void testDumbCompoundWordsSE() throws Exception {\n    CharArraySet dict = makeDictionary(\"Bil\", \"Dörr\", \"Motor\", \"Tak\", \"Borr\", \"Slag\", \"Hammar\",\n        \"Pelar\", \"Glas\", \"Ögon\", \"Fodral\", \"Bas\", \"Fiol\", \"Makare\", \"Gesäll\",\n        \"Sko\", \"Vind\", \"Rute\", \"Torkare\", \"Blad\");\n\n    DictionaryCompoundWordTokenFilter tf = new DictionaryCompoundWordTokenFilter(TEST_VERSION_CURRENT,\n        whitespaceMockTokenizer(\n                \"Bildörr Bilmotor Biltak Slagborr Hammarborr Pelarborr Glasögonfodral Basfiolsfodral Basfiolsfodralmakaregesäll Skomakare Vindrutetorkare Vindrutetorkarblad abba\"),\n        dict);\n\n    assertTokenStreamContents(tf, new String[] { \"Bildörr\", \"Bil\", \"dörr\", \"Bilmotor\",\n        \"Bil\", \"motor\", \"Biltak\", \"Bil\", \"tak\", \"Slagborr\", \"Slag\", \"borr\",\n        \"Hammarborr\", \"Hammar\", \"borr\", \"Pelarborr\", \"Pelar\", \"borr\",\n        \"Glasögonfodral\", \"Glas\", \"ögon\", \"fodral\", \"Basfiolsfodral\", \"Bas\",\n        \"fiol\", \"fodral\", \"Basfiolsfodralmakaregesäll\", \"Bas\", \"fiol\",\n        \"fodral\", \"makare\", \"gesäll\", \"Skomakare\", \"Sko\", \"makare\",\n        \"Vindrutetorkare\", \"Vind\", \"rute\", \"torkare\", \"Vindrutetorkarblad\",\n        \"Vind\", \"rute\", \"blad\", \"abba\" }, new int[] { 0, 0, 0, 8, 8, 8, 17,\n        17, 17, 24, 24, 24, 33, 33, 33, 44, 44, 44, 54, 54, 54, 54, 69, 69, 69,\n        69, 84, 84, 84, 84, 84, 84, 111, 111, 111, 121, 121, 121, 121, 137,\n        137, 137, 137, 156 }, new int[] { 7, 7, 7, 16, 16, 16, 23, 23, 23, 32,\n        32, 32, 43, 43, 43, 53, 53, 53, 68, 68, 68, 68, 83, 83, 83, 83, 110,\n        110, 110, 110, 110, 110, 120, 120, 120, 136, 136, 136, 136, 155, 155, 155,\n        155, 160 }, new int[] { 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n        0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,\n        0, 0, 0, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1497255a2ce11dc672a80859c79fabe7efa51d2e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["1497255a2ce11dc672a80859c79fabe7efa51d2e"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"1497255a2ce11dc672a80859c79fabe7efa51d2e":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1497255a2ce11dc672a80859c79fabe7efa51d2e"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}