{"path":"src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","commits":[{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"/dev/null","sourceNew":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    maxFieldLength=solrConfig.getInt(prefix+\"/maxFieldLength\",def.maxFieldLength);\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f7f08509420d59592367d932f6b559dd709ca7","date":1204748616,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    maxFieldLength=solrConfig.getInt(prefix+\"/maxFieldLength\",def.maxFieldLength);\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n    mergePolicyClassName = solrConfig.get(prefix + \"/mergePolicy\", def.mergePolicyClassName);\n    mergeSchedulerClassname = solrConfig.get(prefix + \"/mergeScheduler\", def.mergeSchedulerClassname);\n    luceneAutoCommit = solrConfig.getBool(prefix + \"/luceneAutoCommit\", def.luceneAutoCommit);\n  }\n\n","sourceOld":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    maxFieldLength=solrConfig.getInt(prefix+\"/maxFieldLength\",def.maxFieldLength);\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n  }\n\n","bugFix":null,"bugIntro":["8deebe9424cbabea4272c0e2bf9e1234b949658b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e0bc4832caa5a5ed426b1618dedc1faf34f43ec","date":1246908697,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    maxFieldLength=solrConfig.getInt(prefix+\"/maxFieldLength\",def.maxFieldLength);\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n    mergePolicyClassName = solrConfig.get(prefix + \"/mergePolicy\", def.mergePolicyClassName);\n    mergeSchedulerClassname = solrConfig.get(prefix + \"/mergeScheduler\", def.mergeSchedulerClassname);\n    luceneAutoCommit = solrConfig.getBool(prefix + \"/luceneAutoCommit\", def.luceneAutoCommit);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n\n  }\n\n","sourceOld":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    maxFieldLength=solrConfig.getInt(prefix+\"/maxFieldLength\",def.maxFieldLength);\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n    mergePolicyClassName = solrConfig.get(prefix + \"/mergePolicy\", def.mergePolicyClassName);\n    mergeSchedulerClassname = solrConfig.get(prefix + \"/mergeScheduler\", def.mergeSchedulerClassname);\n    luceneAutoCommit = solrConfig.getBool(prefix + \"/luceneAutoCommit\", def.luceneAutoCommit);\n  }\n\n","bugFix":null,"bugIntro":["1cb61792cbeba6c44e2530ca5836b96d956adb25","1cb61792cbeba6c44e2530ca5836b96d956adb25","1cb61792cbeba6c44e2530ca5836b96d956adb25"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9632a59852194663bfb676b8d5d5ff3992b2f2b3","date":1249264469,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    maxFieldLength=solrConfig.getInt(prefix+\"/maxFieldLength\",def.maxFieldLength);\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n    mergePolicyClassName = solrConfig.get(prefix + \"/mergePolicy\", def.mergePolicyClassName);\n    mergeSchedulerClassname = solrConfig.get(prefix + \"/mergeScheduler\", def.mergeSchedulerClassname);\n    luceneAutoCommit = solrConfig.getBool(prefix + \"/luceneAutoCommit\", def.luceneAutoCommit);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n\n  }\n\n","sourceOld":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    maxFieldLength=solrConfig.getInt(prefix+\"/maxFieldLength\",def.maxFieldLength);\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n    mergePolicyClassName = solrConfig.get(prefix + \"/mergePolicy\", def.mergePolicyClassName);\n    mergeSchedulerClassname = solrConfig.get(prefix + \"/mergeScheduler\", def.mergeSchedulerClassname);\n    luceneAutoCommit = solrConfig.getBool(prefix + \"/luceneAutoCommit\", def.luceneAutoCommit);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aacbd58e1cc0b6a0cd2e2b615e9775fe114a93d5","date":1252758462,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    maxFieldLength=solrConfig.getInt(prefix+\"/maxFieldLength\",def.maxFieldLength);\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n    mergePolicyClassName = solrConfig.get(prefix + \"/mergePolicy\", def.mergePolicyClassName);\n    mergeSchedulerClassname = solrConfig.get(prefix + \"/mergeScheduler\", def.mergeSchedulerClassname);\n    luceneAutoCommit = solrConfig.getBool(prefix + \"/luceneAutoCommit\", def.luceneAutoCommit);\n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n\n  }\n\n","sourceOld":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    maxFieldLength=solrConfig.getInt(prefix+\"/maxFieldLength\",def.maxFieldLength);\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n    mergePolicyClassName = solrConfig.get(prefix + \"/mergePolicy\", def.mergePolicyClassName);\n    mergeSchedulerClassname = solrConfig.get(prefix + \"/mergeScheduler\", def.mergeSchedulerClassname);\n    luceneAutoCommit = solrConfig.getBool(prefix + \"/luceneAutoCommit\", def.luceneAutoCommit);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"72795268249b27583ff50fb731db1179e4d4bdce","date":1253625275,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    maxFieldLength=solrConfig.getInt(prefix+\"/maxFieldLength\",def.maxFieldLength);\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    String str =  solrConfig.get(prefix+\"/mergeScheduler/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling <mergeScheduler>[classname]</mergeScheduler>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergeScheduler>[classname]</mergeScheduler>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergeSchedulerInfo = new PluginInfo(\"mergeScheduler\",atrs,null,null);\n    } else {\n      mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig);\n    }\n    str =  solrConfig.get(prefix+\"/mergePolicy/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling  <mergePolicy>[classname]</mergePolicy>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergePolicy>[classname]</mergePolicy>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergePolicyInfo = new PluginInfo(\"mergePolicy\",atrs,null,null);\n    } else {\n      mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig);\n    }\n    \n    luceneAutoCommit = solrConfig.getBool(prefix + \"/luceneAutoCommit\", def.luceneAutoCommit);\n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n\n  }\n\n","sourceOld":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    maxFieldLength=solrConfig.getInt(prefix+\"/maxFieldLength\",def.maxFieldLength);\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n    mergePolicyClassName = solrConfig.get(prefix + \"/mergePolicy\", def.mergePolicyClassName);\n    mergeSchedulerClassname = solrConfig.get(prefix + \"/mergeScheduler\", def.mergeSchedulerClassname);\n    luceneAutoCommit = solrConfig.getBool(prefix + \"/luceneAutoCommit\", def.luceneAutoCommit);\n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c98d8c5c54a6735081d15339e59d0cfd95f80761","date":1254084158,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    maxFieldLength=solrConfig.getInt(prefix+\"/maxFieldLength\",def.maxFieldLength);\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    String str =  solrConfig.get(prefix+\"/mergeScheduler/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling <mergeScheduler>[classname]</mergeScheduler>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergeScheduler>[classname]</mergeScheduler>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergeSchedulerInfo = new PluginInfo(\"mergeScheduler\",atrs,null,null);\n    } else {\n      mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    }\n    str =  solrConfig.get(prefix+\"/mergePolicy/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling  <mergePolicy>[classname]</mergePolicy>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergePolicy>[classname]</mergePolicy>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergePolicyInfo = new PluginInfo(\"mergePolicy\",atrs,null,null);\n    } else {\n      mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    }\n    \n    luceneAutoCommit = solrConfig.getBool(prefix + \"/luceneAutoCommit\", def.luceneAutoCommit);\n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n\n  }\n\n","sourceOld":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    maxFieldLength=solrConfig.getInt(prefix+\"/maxFieldLength\",def.maxFieldLength);\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    String str =  solrConfig.get(prefix+\"/mergeScheduler/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling <mergeScheduler>[classname]</mergeScheduler>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergeScheduler>[classname]</mergeScheduler>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergeSchedulerInfo = new PluginInfo(\"mergeScheduler\",atrs,null,null);\n    } else {\n      mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig);\n    }\n    str =  solrConfig.get(prefix+\"/mergePolicy/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling  <mergePolicy>[classname]</mergePolicy>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergePolicy>[classname]</mergePolicy>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergePolicyInfo = new PluginInfo(\"mergePolicy\",atrs,null,null);\n    } else {\n      mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig);\n    }\n    \n    luceneAutoCommit = solrConfig.getBool(prefix + \"/luceneAutoCommit\", def.luceneAutoCommit);\n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexConfig#SolrIndexConfig(SolrConfig,String,SolrIndexConfig).mjava","sourceNew":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    maxFieldLength=solrConfig.getInt(prefix+\"/maxFieldLength\",def.maxFieldLength);\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    String str =  solrConfig.get(prefix+\"/mergeScheduler/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling <mergeScheduler>[classname]</mergeScheduler>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergeScheduler>[classname]</mergeScheduler>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergeSchedulerInfo = new PluginInfo(\"mergeScheduler\",atrs,null,null);\n    } else {\n      mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    }\n    str =  solrConfig.get(prefix+\"/mergePolicy/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling  <mergePolicy>[classname]</mergePolicy>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergePolicy>[classname]</mergePolicy>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergePolicyInfo = new PluginInfo(\"mergePolicy\",atrs,null,null);\n    } else {\n      mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    }\n    \n    luceneAutoCommit = solrConfig.getBool(prefix + \"/luceneAutoCommit\", def.luceneAutoCommit);\n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n\n  }\n\n","sourceOld":"  public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def)  {\n    if (prefix == null)\n      prefix = defaultsName;\n    if (def == null)\n      def = defaultDefaults;\n    useCompoundFile=solrConfig.getBool(prefix+\"/useCompoundFile\", def.useCompoundFile);\n    maxBufferedDocs=solrConfig.getInt(prefix+\"/maxBufferedDocs\",def.maxBufferedDocs);\n    maxMergeDocs=solrConfig.getInt(prefix+\"/maxMergeDocs\",def.maxMergeDocs);\n    mergeFactor=solrConfig.getInt(prefix+\"/mergeFactor\",def.mergeFactor);\n    ramBufferSizeMB = solrConfig.getDouble(prefix+\"/ramBufferSizeMB\", def.ramBufferSizeMB);\n\n    maxFieldLength=solrConfig.getInt(prefix+\"/maxFieldLength\",def.maxFieldLength);\n    writeLockTimeout=solrConfig.getInt(prefix+\"/writeLockTimeout\", def.writeLockTimeout);\n    commitLockTimeout=solrConfig.getInt(prefix+\"/commitLockTimeout\", def.commitLockTimeout);\n    lockType=solrConfig.get(prefix+\"/lockType\", def.lockType);\n\n    String str =  solrConfig.get(prefix+\"/mergeScheduler/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling <mergeScheduler>[classname]</mergeScheduler>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergeScheduler>[classname]</mergeScheduler>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergeSchedulerInfo = new PluginInfo(\"mergeScheduler\",atrs,null,null);\n    } else {\n      mergeSchedulerInfo = getPluginInfo(prefix + \"/mergeScheduler\", solrConfig, def.mergeSchedulerInfo);\n    }\n    str =  solrConfig.get(prefix+\"/mergePolicy/text()\",null);\n    if(str != null && str.trim().length() >0){\n      //legacy handling  <mergePolicy>[classname]</mergePolicy>\n      //remove in Solr2.0\n      log.warn(\"deprecated syntax : <mergePolicy>[classname]</mergePolicy>\");\n      Map<String,String> atrs = new HashMap<String, String>();\n      atrs.put(\"class\",str.trim());\n      mergePolicyInfo = new PluginInfo(\"mergePolicy\",atrs,null,null);\n    } else {\n      mergePolicyInfo = getPluginInfo(prefix + \"/mergePolicy\", solrConfig, def.mergePolicyInfo);\n    }\n    \n    luceneAutoCommit = solrConfig.getBool(prefix + \"/luceneAutoCommit\", def.luceneAutoCommit);\n    termIndexInterval = solrConfig.getInt(prefix + \"/termIndexInterval\", def.termIndexInterval);\n    \n    boolean infoStreamEnabled = solrConfig.getBool(prefix + \"/infoStream\", false);\n    if(infoStreamEnabled) {\n      infoStreamFile= solrConfig.get(prefix + \"/infoStream/@file\", null);\n      log.info(\"IndexWriter infoStream debug log is enabled: \" + infoStreamFile);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"41f7f08509420d59592367d932f6b559dd709ca7":["6d6338c87060be5f66757a94945975f3bbd377a9"],"6d6338c87060be5f66757a94945975f3bbd377a9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"72795268249b27583ff50fb731db1179e4d4bdce":["aacbd58e1cc0b6a0cd2e2b615e9775fe114a93d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c98d8c5c54a6735081d15339e59d0cfd95f80761":["72795268249b27583ff50fb731db1179e4d4bdce"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c98d8c5c54a6735081d15339e59d0cfd95f80761"],"2e0bc4832caa5a5ed426b1618dedc1faf34f43ec":["41f7f08509420d59592367d932f6b559dd709ca7"],"aacbd58e1cc0b6a0cd2e2b615e9775fe114a93d5":["9632a59852194663bfb676b8d5d5ff3992b2f2b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9632a59852194663bfb676b8d5d5ff3992b2f2b3":["2e0bc4832caa5a5ed426b1618dedc1faf34f43ec"]},"commit2Childs":{"41f7f08509420d59592367d932f6b559dd709ca7":["2e0bc4832caa5a5ed426b1618dedc1faf34f43ec"],"6d6338c87060be5f66757a94945975f3bbd377a9":["41f7f08509420d59592367d932f6b559dd709ca7"],"72795268249b27583ff50fb731db1179e4d4bdce":["c98d8c5c54a6735081d15339e59d0cfd95f80761"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6d6338c87060be5f66757a94945975f3bbd377a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c98d8c5c54a6735081d15339e59d0cfd95f80761":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2e0bc4832caa5a5ed426b1618dedc1faf34f43ec":["9632a59852194663bfb676b8d5d5ff3992b2f2b3"],"aacbd58e1cc0b6a0cd2e2b615e9775fe114a93d5":["72795268249b27583ff50fb731db1179e4d4bdce"],"9632a59852194663bfb676b8d5d5ff3992b2f2b3":["aacbd58e1cc0b6a0cd2e2b615e9775fe114a93d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}