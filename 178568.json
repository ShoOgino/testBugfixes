{"path":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#getExchangeRate(String,String).mjava","commits":[{"id":"7a62481aacca928b5c069e6f825ef49c7b6586d8","date":1333048447,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#getExchangeRate(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the currently known exchange rate between two currencies. The rates are fetched from\n   * the freely available OpenExchangeRates.org JSON, hourly updated. All rates are symmetrical with\n   * base currency being USD by default.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws an exception if the requested currency pair cannot be found \n   */\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (rates == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Rates not initialized.\");\n    }\n      \n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (rates.getTimestamp() + refreshInterval*60*1000 > System.currentTimeMillis()) {\n      log.debug(\"Refresh interval has expired. Refreshing exchange rates.\");\n      reload();\n    }\n    \n    Double source = (Double) rates.getRates().get(sourceCurrencyCode);\n    Double target = (Double) rates.getRates().get(targetCurrencyCode);\n\n    if (source == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"No available conversion rate from \" + sourceCurrencyCode + \" to \" + targetCurrencyCode + \". \"\n          + \"Available rates are \"+listAvailableCurrencies());\n    }\n    \n    return target / source;  \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["98f865ee54dfb817d8df8da1de0a2432a4a54daf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"578eff0bc5aee20ceab0bb85d2e639e93d68c952","date":1335146102,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#getExchangeRate(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#getExchangeRate(String,String).mjava","sourceNew":"  /**\n   * Returns the currently known exchange rate between two currencies. The rates are fetched from\n   * the freely available OpenExchangeRates.org JSON, hourly updated. All rates are symmetrical with\n   * base currency being USD by default.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (rates == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Rates not initialized.\");\n    }\n      \n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (rates.getTimestamp() + refreshInterval*60*1000 > System.currentTimeMillis()) {\n      log.debug(\"Refresh interval has expired. Refreshing exchange rates.\");\n      reload();\n    }\n    \n    Double source = (Double) rates.getRates().get(sourceCurrencyCode);\n    Double target = (Double) rates.getRates().get(targetCurrencyCode);\n\n    if (source == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"No available conversion rate from \" + sourceCurrencyCode + \" to \" + targetCurrencyCode + \". \"\n          + \"Available rates are \"+listAvailableCurrencies());\n    }\n    \n    return target / source;  \n  }\n\n","sourceOld":"  /**\n   * Returns the currently known exchange rate between two currencies. The rates are fetched from\n   * the freely available OpenExchangeRates.org JSON, hourly updated. All rates are symmetrical with\n   * base currency being USD by default.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws an exception if the requested currency pair cannot be found \n   */\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (rates == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Rates not initialized.\");\n    }\n      \n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (rates.getTimestamp() + refreshInterval*60*1000 > System.currentTimeMillis()) {\n      log.debug(\"Refresh interval has expired. Refreshing exchange rates.\");\n      reload();\n    }\n    \n    Double source = (Double) rates.getRates().get(sourceCurrencyCode);\n    Double target = (Double) rates.getRates().get(targetCurrencyCode);\n\n    if (source == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"No available conversion rate from \" + sourceCurrencyCode + \" to \" + targetCurrencyCode + \". \"\n          + \"Available rates are \"+listAvailableCurrencies());\n    }\n    \n    return target / source;  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#getExchangeRate(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#getExchangeRate(String,String).mjava","sourceNew":"  /**\n   * Returns the currently known exchange rate between two currencies. The rates are fetched from\n   * the freely available OpenExchangeRates.org JSON, hourly updated. All rates are symmetrical with\n   * base currency being USD by default.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  @Override\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (rates == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Rates not initialized.\");\n    }\n      \n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (rates.getTimestamp() + refreshInterval*60*1000 > System.currentTimeMillis()) {\n      log.debug(\"Refresh interval has expired. Refreshing exchange rates.\");\n      reload();\n    }\n    \n    Double source = (Double) rates.getRates().get(sourceCurrencyCode);\n    Double target = (Double) rates.getRates().get(targetCurrencyCode);\n\n    if (source == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"No available conversion rate from \" + sourceCurrencyCode + \" to \" + targetCurrencyCode + \". \"\n          + \"Available rates are \"+listAvailableCurrencies());\n    }\n    \n    return target / source;  \n  }\n\n","sourceOld":"  /**\n   * Returns the currently known exchange rate between two currencies. The rates are fetched from\n   * the freely available OpenExchangeRates.org JSON, hourly updated. All rates are symmetrical with\n   * base currency being USD by default.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (rates == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Rates not initialized.\");\n    }\n      \n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (rates.getTimestamp() + refreshInterval*60*1000 > System.currentTimeMillis()) {\n      log.debug(\"Refresh interval has expired. Refreshing exchange rates.\");\n      reload();\n    }\n    \n    Double source = (Double) rates.getRates().get(sourceCurrencyCode);\n    Double target = (Double) rates.getRates().get(targetCurrencyCode);\n\n    if (source == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"No available conversion rate from \" + sourceCurrencyCode + \" to \" + targetCurrencyCode + \". \"\n          + \"Available rates are \"+listAvailableCurrencies());\n    }\n    \n    return target / source;  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#getExchangeRate(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#getExchangeRate(String,String).mjava","sourceNew":"  /**\n   * Returns the currently known exchange rate between two currencies. The rates are fetched from\n   * the freely available OpenExchangeRates.org JSON, hourly updated. All rates are symmetrical with\n   * base currency being USD by default.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  @Override\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (rates == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Rates not initialized.\");\n    }\n      \n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (rates.getTimestamp() + refreshInterval*60*1000 > System.currentTimeMillis()) {\n      log.debug(\"Refresh interval has expired. Refreshing exchange rates.\");\n      reload();\n    }\n    \n    Double source = (Double) rates.getRates().get(sourceCurrencyCode);\n    Double target = (Double) rates.getRates().get(targetCurrencyCode);\n\n    if (source == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"No available conversion rate from \" + sourceCurrencyCode + \" to \" + targetCurrencyCode + \". \"\n          + \"Available rates are \"+listAvailableCurrencies());\n    }\n    \n    return target / source;  \n  }\n\n","sourceOld":"  /**\n   * Returns the currently known exchange rate between two currencies. The rates are fetched from\n   * the freely available OpenExchangeRates.org JSON, hourly updated. All rates are symmetrical with\n   * base currency being USD by default.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (rates == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Rates not initialized.\");\n    }\n      \n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (rates.getTimestamp() + refreshInterval*60*1000 > System.currentTimeMillis()) {\n      log.debug(\"Refresh interval has expired. Refreshing exchange rates.\");\n      reload();\n    }\n    \n    Double source = (Double) rates.getRates().get(sourceCurrencyCode);\n    Double target = (Double) rates.getRates().get(targetCurrencyCode);\n\n    if (source == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"No available conversion rate from \" + sourceCurrencyCode + \" to \" + targetCurrencyCode + \". \"\n          + \"Available rates are \"+listAvailableCurrencies());\n    }\n    \n    return target / source;  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f865ee54dfb817d8df8da1de0a2432a4a54daf","date":1378244391,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#getExchangeRate(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#getExchangeRate(String,String).mjava","sourceNew":"  /**\n   * Returns the currently known exchange rate between two currencies. The rates are fetched from\n   * the freely available OpenExchangeRates.org JSON, hourly updated. All rates are symmetrical with\n   * base currency being USD by default.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  @Override\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (rates == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Rates not initialized.\");\n    }\n      \n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if ((rates.getTimestamp() + refreshIntervalSeconds)*1000 < System.currentTimeMillis()) {\n      log.debug(\"Refresh interval has expired. Refreshing exchange rates.\");\n      reload();\n    }\n    \n    Double source = (Double) rates.getRates().get(sourceCurrencyCode);\n    Double target = (Double) rates.getRates().get(targetCurrencyCode);\n\n    if (source == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"No available conversion rate from \" + sourceCurrencyCode + \" to \" + targetCurrencyCode + \". \"\n          + \"Available rates are \"+listAvailableCurrencies());\n    }\n    \n    return target / source;  \n  }\n\n","sourceOld":"  /**\n   * Returns the currently known exchange rate between two currencies. The rates are fetched from\n   * the freely available OpenExchangeRates.org JSON, hourly updated. All rates are symmetrical with\n   * base currency being USD by default.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  @Override\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (rates == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Rates not initialized.\");\n    }\n      \n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if (rates.getTimestamp() + refreshInterval*60*1000 > System.currentTimeMillis()) {\n      log.debug(\"Refresh interval has expired. Refreshing exchange rates.\");\n      reload();\n    }\n    \n    Double source = (Double) rates.getRates().get(sourceCurrencyCode);\n    Double target = (Double) rates.getRates().get(targetCurrencyCode);\n\n    if (source == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"No available conversion rate from \" + sourceCurrencyCode + \" to \" + targetCurrencyCode + \". \"\n          + \"Available rates are \"+listAvailableCurrencies());\n    }\n    \n    return target / source;  \n  }\n\n","bugFix":["7a62481aacca928b5c069e6f825ef49c7b6586d8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#getExchangeRate(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#getExchangeRate(String,String).mjava","sourceNew":"  /**\n   * Returns the currently known exchange rate between two currencies. The rates are fetched from\n   * the freely available OpenExchangeRates.org JSON, hourly updated. All rates are symmetrical with\n   * base currency being USD by default.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  @Override\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (rates == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Rates not initialized.\");\n    }\n      \n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n\n    reloadIfExpired();\n\n    Double source = (Double) rates.getRates().get(sourceCurrencyCode);\n    Double target = (Double) rates.getRates().get(targetCurrencyCode);\n\n    if (source == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"No available conversion rate from \" + sourceCurrencyCode + \" to \" + targetCurrencyCode + \". \"\n          + \"Available rates are \"+listAvailableCurrencies());\n    }\n    \n    return target / source;  \n  }\n\n","sourceOld":"  /**\n   * Returns the currently known exchange rate between two currencies. The rates are fetched from\n   * the freely available OpenExchangeRates.org JSON, hourly updated. All rates are symmetrical with\n   * base currency being USD by default.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  @Override\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (rates == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Rates not initialized.\");\n    }\n      \n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n    \n    if ((rates.getTimestamp() + refreshIntervalSeconds)*1000 < System.currentTimeMillis()) {\n      log.debug(\"Refresh interval has expired. Refreshing exchange rates.\");\n      reload();\n    }\n    \n    Double source = (Double) rates.getRates().get(sourceCurrencyCode);\n    Double target = (Double) rates.getRates().get(targetCurrencyCode);\n\n    if (source == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"No available conversion rate from \" + sourceCurrencyCode + \" to \" + targetCurrencyCode + \". \"\n          + \"Available rates are \"+listAvailableCurrencies());\n    }\n    \n    return target / source;  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#getExchangeRate(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/OpenExchangeRatesOrgProvider#getExchangeRate(String,String).mjava","sourceNew":"  /**\n   * Returns the currently known exchange rate between two currencies. The rates are fetched from\n   * the freely available OpenExchangeRates.org JSON, hourly updated. All rates are symmetrical with\n   * base currency being USD by default.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  @Override\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (rates == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Rates not initialized.\");\n    }\n      \n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n\n    reloadIfExpired();\n\n    Double source = rates.getRates().get(sourceCurrencyCode);\n    Double target = rates.getRates().get(targetCurrencyCode);\n\n    if (source == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"No available conversion rate from \" + sourceCurrencyCode + \" to \" + targetCurrencyCode + \". \"\n          + \"Available rates are \"+listAvailableCurrencies());\n    }\n    \n    return target / source;  \n  }\n\n","sourceOld":"  /**\n   * Returns the currently known exchange rate between two currencies. The rates are fetched from\n   * the freely available OpenExchangeRates.org JSON, hourly updated. All rates are symmetrical with\n   * base currency being USD by default.\n   *\n   * @param sourceCurrencyCode The source currency being converted from.\n   * @param targetCurrencyCode The target currency being converted to.\n   * @return The exchange rate.\n   * @throws SolrException if the requested currency pair cannot be found\n   */\n  @Override\n  public double getExchangeRate(String sourceCurrencyCode, String targetCurrencyCode) {\n    if (rates == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Rates not initialized.\");\n    }\n      \n    if (sourceCurrencyCode == null || targetCurrencyCode == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot get exchange rate; currency was null.\");\n    }\n\n    reloadIfExpired();\n\n    Double source = (Double) rates.getRates().get(sourceCurrencyCode);\n    Double target = (Double) rates.getRates().get(targetCurrencyCode);\n\n    if (source == null || target == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n          \"No available conversion rate from \" + sourceCurrencyCode + \" to \" + targetCurrencyCode + \". \"\n          + \"Available rates are \"+listAvailableCurrencies());\n    }\n    \n    return target / source;  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["578eff0bc5aee20ceab0bb85d2e639e93d68c952","7530de27b87b961b51f01bd1299b7004d46e8823"],"578eff0bc5aee20ceab0bb85d2e639e93d68c952":["7a62481aacca928b5c069e6f825ef49c7b6586d8"],"7a62481aacca928b5c069e6f825ef49c7b6586d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["98f865ee54dfb817d8df8da1de0a2432a4a54daf"],"98f865ee54dfb817d8df8da1de0a2432a4a54daf":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["578eff0bc5aee20ceab0bb85d2e639e93d68c952"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"578eff0bc5aee20ceab0bb85d2e639e93d68c952":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"7a62481aacca928b5c069e6f825ef49c7b6586d8":["578eff0bc5aee20ceab0bb85d2e639e93d68c952"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a62481aacca928b5c069e6f825ef49c7b6586d8"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"98f865ee54dfb817d8df8da1de0a2432a4a54daf":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","98f865ee54dfb817d8df8da1de0a2432a4a54daf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}