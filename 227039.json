{"path":"modules/spatial/src/java/org/apache/lucene/spatial/base/context/SpatialContext#readStandardShape(String).mjava","commits":[{"id":"935445a30e9e8dc0240a7c78efc73d08c2faa6a8","date":1329778521,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/base/context/SpatialContext#readStandardShape(String).mjava","pathOld":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/context/SpatialContext#readStandardShape(String).mjava","sourceNew":"  protected Shape readStandardShape(String str) {\n    if (str.length() < 1) {\n      throw new InvalidShapeException(str);\n    }\n\n    if(Character.isLetter(str.charAt(0))) {\n      if( str.startsWith( \"Circle(\" ) ) {\n        int idx = str.lastIndexOf( ')' );\n        if( idx > 0 ) {\n          String body = str.substring( \"Circle(\".length(), idx );\n          StringTokenizer st = new StringTokenizer(body, \" \");\n          String token = st.nextToken();\n          Point pt;\n          if (token.indexOf(',') != -1) {\n            pt = readLatCommaLonPoint(token);\n          } else {\n            double x = Double.parseDouble(token);\n            double y = Double.parseDouble(st.nextToken());\n            pt = makePoint(x,y);\n          }\n          Double d = null;\n\n          String arg = st.nextToken();\n          idx = arg.indexOf( '=' );\n          if( idx > 0 ) {\n            String k = arg.substring( 0,idx );\n            if( k.equals( \"d\" ) || k.equals( \"distance\" ) ) {\n              d = Double.parseDouble( arg.substring(idx+1));\n            }\n            else {\n              throw new InvalidShapeException( \"unknown arg: \"+k+\" :: \" +str );\n            }\n          }\n          else {\n            d = Double.parseDouble(arg);\n          }\n          if( st.hasMoreTokens() ) {\n            throw new InvalidShapeException( \"Extra arguments: \"+st.nextToken()+\" :: \" +str );\n          }\n          if( d == null ) {\n            throw new InvalidShapeException( \"Missing Distance: \"+str );\n          }\n          //NOTE: we are assuming the units of 'd' is the same as that of the spatial context.\n          return makeCircle(pt, d);\n        }\n      }\n      return null;\n    }\n\n    if (str.indexOf(',') != -1)\n      return readLatCommaLonPoint(str);\n    StringTokenizer st = new StringTokenizer(str, \" \");\n    double p0 = Double.parseDouble(st.nextToken());\n    double p1 = Double.parseDouble(st.nextToken());\n    if (st.hasMoreTokens()) {\n      double p2 = Double.parseDouble(st.nextToken());\n      double p3 = Double.parseDouble(st.nextToken());\n      if (st.hasMoreTokens())\n        throw new InvalidShapeException(\"Only 4 numbers supported (rect) but found more: \"+str);\n      return makeRect(p0, p2, p1, p3);\n    }\n    return makePoint(p0, p1);\n  }\n\n","sourceOld":"  protected Shape readStandardShape(String str) {\n    if (str.length() < 1) {\n      throw new InvalidShapeException(str);\n    }\n\n    if(Character.isLetter(str.charAt(0))) {\n      if( str.startsWith( \"Circle(\" ) ) {\n        int idx = str.lastIndexOf( ')' );\n        if( idx > 0 ) {\n          String body = str.substring( \"Circle(\".length(), idx );\n          StringTokenizer st = new StringTokenizer(body, \" \");\n          String token = st.nextToken();\n          Point pt;\n          if (token.indexOf(',') != -1) {\n            pt = readLatCommaLonPoint(token);\n          } else {\n            double x = Double.parseDouble(token);\n            double y = Double.parseDouble(st.nextToken());\n            pt = makePoint(x,y);\n          }\n          Double d = null;\n\n          String arg = st.nextToken();\n          idx = arg.indexOf( '=' );\n          if( idx > 0 ) {\n            String k = arg.substring( 0,idx );\n            if( k.equals( \"d\" ) || k.equals( \"distance\" ) ) {\n              d = Double.parseDouble( arg.substring(idx+1));\n            }\n            else {\n              throw new InvalidShapeException( \"unknown arg: \"+k+\" :: \" +str );\n            }\n          }\n          else {\n            d = Double.parseDouble(arg);\n          }\n          if( st.hasMoreTokens() ) {\n            throw new InvalidShapeException( \"Extra arguments: \"+st.nextToken()+\" :: \" +str );\n          }\n          if( d == null ) {\n            throw new InvalidShapeException( \"Missing Distance: \"+str );\n          }\n          //NOTE: we are assuming the units of 'd' is the same as that of the spatial context.\n          return makeCircle(pt, d);\n        }\n      }\n      return null;\n    }\n\n    if (str.indexOf(',') != -1)\n      return readLatCommaLonPoint(str);\n    StringTokenizer st = new StringTokenizer(str, \" \");\n    double p0 = Double.parseDouble(st.nextToken());\n    double p1 = Double.parseDouble(st.nextToken());\n    if (st.hasMoreTokens()) {\n      double p2 = Double.parseDouble(st.nextToken());\n      double p3 = Double.parseDouble(st.nextToken());\n      if (st.hasMoreTokens())\n        throw new InvalidShapeException(\"Only 4 numbers supported (rect) but found more: \"+str);\n      return makeRect(p0, p2, p1, p3);\n    }\n    return makePoint(p0, p1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33ee89d976c91275e5be5da438ca0977b1c5b90f","date":1329808149,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial-TEMP/src/java/org/apache/lucene/spatial/base/context/SpatialContext#readStandardShape(String).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/base/context/SpatialContext#readStandardShape(String).mjava","sourceNew":"  protected Shape readStandardShape(String str) {\n    if (str.length() < 1) {\n      throw new InvalidShapeException(str);\n    }\n\n    if(Character.isLetter(str.charAt(0))) {\n      if( str.startsWith( \"Circle(\" ) ) {\n        int idx = str.lastIndexOf( ')' );\n        if( idx > 0 ) {\n          String body = str.substring( \"Circle(\".length(), idx );\n          StringTokenizer st = new StringTokenizer(body, \" \");\n          String token = st.nextToken();\n          Point pt;\n          if (token.indexOf(',') != -1) {\n            pt = readLatCommaLonPoint(token);\n          } else {\n            double x = Double.parseDouble(token);\n            double y = Double.parseDouble(st.nextToken());\n            pt = makePoint(x,y);\n          }\n          Double d = null;\n\n          String arg = st.nextToken();\n          idx = arg.indexOf( '=' );\n          if( idx > 0 ) {\n            String k = arg.substring( 0,idx );\n            if( k.equals( \"d\" ) || k.equals( \"distance\" ) ) {\n              d = Double.parseDouble( arg.substring(idx+1));\n            }\n            else {\n              throw new InvalidShapeException( \"unknown arg: \"+k+\" :: \" +str );\n            }\n          }\n          else {\n            d = Double.parseDouble(arg);\n          }\n          if( st.hasMoreTokens() ) {\n            throw new InvalidShapeException( \"Extra arguments: \"+st.nextToken()+\" :: \" +str );\n          }\n          if( d == null ) {\n            throw new InvalidShapeException( \"Missing Distance: \"+str );\n          }\n          //NOTE: we are assuming the units of 'd' is the same as that of the spatial context.\n          return makeCircle(pt, d);\n        }\n      }\n      return null;\n    }\n\n    if (str.indexOf(',') != -1)\n      return readLatCommaLonPoint(str);\n    StringTokenizer st = new StringTokenizer(str, \" \");\n    double p0 = Double.parseDouble(st.nextToken());\n    double p1 = Double.parseDouble(st.nextToken());\n    if (st.hasMoreTokens()) {\n      double p2 = Double.parseDouble(st.nextToken());\n      double p3 = Double.parseDouble(st.nextToken());\n      if (st.hasMoreTokens())\n        throw new InvalidShapeException(\"Only 4 numbers supported (rect) but found more: \"+str);\n      return makeRect(p0, p2, p1, p3);\n    }\n    return makePoint(p0, p1);\n  }\n\n","sourceOld":"  protected Shape readStandardShape(String str) {\n    if (str.length() < 1) {\n      throw new InvalidShapeException(str);\n    }\n\n    if(Character.isLetter(str.charAt(0))) {\n      if( str.startsWith( \"Circle(\" ) ) {\n        int idx = str.lastIndexOf( ')' );\n        if( idx > 0 ) {\n          String body = str.substring( \"Circle(\".length(), idx );\n          StringTokenizer st = new StringTokenizer(body, \" \");\n          String token = st.nextToken();\n          Point pt;\n          if (token.indexOf(',') != -1) {\n            pt = readLatCommaLonPoint(token);\n          } else {\n            double x = Double.parseDouble(token);\n            double y = Double.parseDouble(st.nextToken());\n            pt = makePoint(x,y);\n          }\n          Double d = null;\n\n          String arg = st.nextToken();\n          idx = arg.indexOf( '=' );\n          if( idx > 0 ) {\n            String k = arg.substring( 0,idx );\n            if( k.equals( \"d\" ) || k.equals( \"distance\" ) ) {\n              d = Double.parseDouble( arg.substring(idx+1));\n            }\n            else {\n              throw new InvalidShapeException( \"unknown arg: \"+k+\" :: \" +str );\n            }\n          }\n          else {\n            d = Double.parseDouble(arg);\n          }\n          if( st.hasMoreTokens() ) {\n            throw new InvalidShapeException( \"Extra arguments: \"+st.nextToken()+\" :: \" +str );\n          }\n          if( d == null ) {\n            throw new InvalidShapeException( \"Missing Distance: \"+str );\n          }\n          //NOTE: we are assuming the units of 'd' is the same as that of the spatial context.\n          return makeCircle(pt, d);\n        }\n      }\n      return null;\n    }\n\n    if (str.indexOf(',') != -1)\n      return readLatCommaLonPoint(str);\n    StringTokenizer st = new StringTokenizer(str, \" \");\n    double p0 = Double.parseDouble(st.nextToken());\n    double p1 = Double.parseDouble(st.nextToken());\n    if (st.hasMoreTokens()) {\n      double p2 = Double.parseDouble(st.nextToken());\n      double p3 = Double.parseDouble(st.nextToken());\n      if (st.hasMoreTokens())\n        throw new InvalidShapeException(\"Only 4 numbers supported (rect) but found more: \"+str);\n      return makeRect(p0, p2, p1, p3);\n    }\n    return makePoint(p0, p1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33ee89d976c91275e5be5da438ca0977b1c5b90f":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["33ee89d976c91275e5be5da438ca0977b1c5b90f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33ee89d976c91275e5be5da438ca0977b1c5b90f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["33ee89d976c91275e5be5da438ca0977b1c5b90f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}