{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(InputIterator).mjava","commits":[{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(TermFreqPayloadIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    BytesRef scratch = new BytesRef();\n    InputIterator iter = new WFSTInputIterator(iterator);\n    IntsRef scratchInts = new IntsRef();\n    BytesRef previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRef();\n      } else if (scratch.equals(previous)) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts, cost);\n      previous.copyBytes(scratch);\n    }\n    fst = builder.finish();\n  }\n\n","sourceOld":"  @Override\n  public void build(TermFreqPayloadIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    BytesRef scratch = new BytesRef();\n    TermFreqPayloadIterator iter = new WFSTTermFreqIteratorWrapper(iterator);\n    IntsRef scratchInts = new IntsRef();\n    BytesRef previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRef();\n      } else if (scratch.equals(previous)) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts, cost);\n      previous.copyBytes(scratch);\n    }\n    fst = builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a645276cbaf5dc96a42fd473b9019bde352996c8","date":1391806699,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(InputIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    count = 0;\n    BytesRef scratch = new BytesRef();\n    InputIterator iter = new WFSTInputIterator(iterator);\n    IntsRef scratchInts = new IntsRef();\n    BytesRef previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRef();\n      } else if (scratch.equals(previous)) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts, cost);\n      previous.copyBytes(scratch);\n      count++;\n    }\n    fst = builder.finish();\n  }\n\n","sourceOld":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    BytesRef scratch = new BytesRef();\n    InputIterator iter = new WFSTInputIterator(iterator);\n    IntsRef scratchInts = new IntsRef();\n    BytesRef previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRef();\n      } else if (scratch.equals(previous)) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts, cost);\n      previous.copyBytes(scratch);\n    }\n    fst = builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(InputIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    count = 0;\n    BytesRef scratch = new BytesRef();\n    InputIterator iter = new WFSTInputIterator(iterator);\n    IntsRef scratchInts = new IntsRef();\n    BytesRef previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRef();\n      } else if (scratch.equals(previous)) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts, cost);\n      previous.copyBytes(scratch);\n      count++;\n    }\n    fst = builder.finish();\n  }\n\n","sourceOld":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    count = 0;\n    BytesRef scratch = new BytesRef();\n    InputIterator iter = new WFSTInputIterator(iterator);\n    IntsRef scratchInts = new IntsRef();\n    BytesRef previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRef();\n      } else if (scratch.equals(previous)) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts, cost);\n      previous.copyBytes(scratch);\n      count++;\n    }\n    fst = builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","date":1395588343,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(InputIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    count = 0;\n    BytesRef scratch = new BytesRef();\n    InputIterator iter = new WFSTInputIterator(iterator);\n    IntsRef scratchInts = new IntsRef();\n    BytesRef previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRef();\n      } else if (scratch.equals(previous)) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts, cost);\n      previous.copyBytes(scratch);\n      count++;\n    }\n    fst = builder.finish();\n  }\n\n","sourceOld":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    count = 0;\n    BytesRef scratch = new BytesRef();\n    InputIterator iter = new WFSTInputIterator(iterator);\n    IntsRef scratchInts = new IntsRef();\n    BytesRef previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRef();\n      } else if (scratch.equals(previous)) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts, cost);\n      previous.copyBytes(scratch);\n      count++;\n    }\n    fst = builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(InputIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    count = 0;\n    BytesRef scratch = new BytesRef();\n    InputIterator iter = new WFSTInputIterator(iterator);\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    BytesRefBuilder previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else if (scratch.equals(previous.get())) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts.get(), cost);\n      previous.copyBytes(scratch);\n      count++;\n    }\n    fst = builder.finish();\n  }\n\n","sourceOld":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    count = 0;\n    BytesRef scratch = new BytesRef();\n    InputIterator iter = new WFSTInputIterator(iterator);\n    IntsRef scratchInts = new IntsRef();\n    BytesRef previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRef();\n      } else if (scratch.equals(previous)) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts, cost);\n      previous.copyBytes(scratch);\n      count++;\n    }\n    fst = builder.finish();\n  }\n\n","bugFix":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(InputIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    count = 0;\n    BytesRef scratch = new BytesRef();\n    InputIterator iter = new WFSTInputIterator(tempDir, tempFileNamePrefix, iterator);\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    BytesRefBuilder previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else if (scratch.equals(previous.get())) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts.get(), cost);\n      previous.copyBytes(scratch);\n      count++;\n    }\n    fst = builder.finish();\n  }\n\n","sourceOld":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    count = 0;\n    BytesRef scratch = new BytesRef();\n    InputIterator iter = new WFSTInputIterator(iterator);\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    BytesRefBuilder previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else if (scratch.equals(previous.get())) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts.get(), cost);\n      previous.copyBytes(scratch);\n      count++;\n    }\n    fst = builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(InputIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    count = 0;\n    BytesRef scratch = new BytesRef();\n    InputIterator iter = new WFSTInputIterator(tempDir, tempFileNamePrefix, iterator);\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    BytesRefBuilder previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else if (scratch.equals(previous.get())) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      fstCompiler.add(scratchInts.get(), cost);\n      previous.copyBytes(scratch);\n      count++;\n    }\n    fst = fstCompiler.compile();\n  }\n\n","sourceOld":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    count = 0;\n    BytesRef scratch = new BytesRef();\n    InputIterator iter = new WFSTInputIterator(tempDir, tempFileNamePrefix, iterator);\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    BytesRefBuilder previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else if (scratch.equals(previous.get())) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts.get(), cost);\n      previous.copyBytes(scratch);\n      count++;\n    }\n    fst = builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(InputIterator).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/WFSTCompletionLookup#build(InputIterator).mjava","sourceNew":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    count = 0;\n    BytesRef scratch = new BytesRef();\n    InputIterator iter = new WFSTInputIterator(tempDir, tempFileNamePrefix, iterator);\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    BytesRefBuilder previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else if (scratch.equals(previous.get())) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      fstCompiler.add(scratchInts.get(), cost);\n      previous.copyBytes(scratch);\n      count++;\n    }\n    fst = fstCompiler.compile();\n  }\n\n","sourceOld":"  @Override\n  public void build(InputIterator iterator) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n    count = 0;\n    BytesRef scratch = new BytesRef();\n    InputIterator iter = new WFSTInputIterator(tempDir, tempFileNamePrefix, iterator);\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    BytesRefBuilder previous = null;\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n    while ((scratch = iter.next()) != null) {\n      long cost = iter.weight();\n      \n      if (previous == null) {\n        previous = new BytesRefBuilder();\n      } else if (scratch.equals(previous.get())) {\n        continue; // for duplicate suggestions, the best weight is actually\n                  // added\n      }\n      Util.toIntsRef(scratch, scratchInts);\n      builder.add(scratchInts.get(), cost);\n      previous.copyBytes(scratch);\n      count++;\n    }\n    fst = builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["867e3d9153fb761456b54a9dcce566e1545c5ef6","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"a645276cbaf5dc96a42fd473b9019bde352996c8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}