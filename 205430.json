{"path":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsCollector#testEstimateHitCount().mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsCollector#testEstimateHitCount().mjava","pathOld":"/dev/null","sourceNew":"  public void testEstimateHitCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc, doc));\n    w.flush();\n    IndexReader reader = DirectoryReader.open(w);\n    assertEquals(2, reader.leaves().size());\n    w.close();\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(2, null, false);\n    FakeScorer scorer = new FakeScorer();\n\n    LeafCollector leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n\n    scorer.doc = 0;\n    scorer.score = 3;\n    leafCollector.collect(0);\n\n    scorer.doc = 1;\n    scorer.score = 3;\n    leafCollector.collect(1);\n\n    leafCollector = collector.getLeafCollector(reader.leaves().get(1));\n    leafCollector.setScorer(scorer);\n\n    scorer.doc = 1;\n    scorer.score = 3;\n    leafCollector.collect(1);\n\n    TopDocs topDocs = collector.topDocs();\n    // It assumes all docs matched since numHits was 2 and the first 2 collected docs matched\n    assertEquals(10, topDocs.totalHits);\n\n    // Now test an index that is more sparsely collected\n    collector = TopScoreDocCollector.create(2, null, false);\n\n    leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n\n    scorer.doc = 1;\n    scorer.score = 3;\n    leafCollector.collect(1);\n\n    leafCollector = collector.getLeafCollector(reader.leaves().get(1));\n    leafCollector.setScorer(scorer);\n\n    scorer.doc = 0;\n    scorer.score = 2;\n    leafCollector.collect(0);\n\n    scorer.doc = 2;\n    scorer.score = 5;\n    leafCollector.collect(2);\n\n    topDocs = collector.topDocs();\n    assertEquals(4, topDocs.totalHits);\n\n    // Same 2 first collected docs, but then we collect more docs to make sure\n    // that we use the actual number of collected docs as a lower bound\n    collector = TopScoreDocCollector.create(2, null, false);\n\n    leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n\n    scorer.doc = 1;\n    scorer.score = 3;\n    leafCollector.collect(1);\n\n    leafCollector = collector.getLeafCollector(reader.leaves().get(1));\n    leafCollector.setScorer(scorer);\n\n    scorer.doc = 0;\n    scorer.score = 2;\n    leafCollector.collect(0);\n\n    scorer.doc = 2;\n    scorer.score = 5;\n    leafCollector.collect(2);\n\n    scorer.doc = 3;\n    scorer.score = 4;\n    leafCollector.collect(3);\n\n    scorer.doc = 4;\n    scorer.score = 1;\n    leafCollector.collect(4);\n\n    topDocs = collector.topDocs();\n    assertEquals(5, topDocs.totalHits);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsCollector#testEstimateHitCount().mjava","pathOld":"/dev/null","sourceNew":"  public void testEstimateHitCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc, doc));\n    w.flush();\n    IndexReader reader = DirectoryReader.open(w);\n    assertEquals(2, reader.leaves().size());\n    w.close();\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(2, null, false);\n    FakeScorer scorer = new FakeScorer();\n\n    LeafCollector leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n\n    scorer.doc = 0;\n    scorer.score = 3;\n    leafCollector.collect(0);\n\n    scorer.doc = 1;\n    scorer.score = 3;\n    leafCollector.collect(1);\n\n    leafCollector = collector.getLeafCollector(reader.leaves().get(1));\n    leafCollector.setScorer(scorer);\n\n    scorer.doc = 1;\n    scorer.score = 3;\n    leafCollector.collect(1);\n\n    TopDocs topDocs = collector.topDocs();\n    // It assumes all docs matched since numHits was 2 and the first 2 collected docs matched\n    assertEquals(10, topDocs.totalHits);\n\n    // Now test an index that is more sparsely collected\n    collector = TopScoreDocCollector.create(2, null, false);\n\n    leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n\n    scorer.doc = 1;\n    scorer.score = 3;\n    leafCollector.collect(1);\n\n    leafCollector = collector.getLeafCollector(reader.leaves().get(1));\n    leafCollector.setScorer(scorer);\n\n    scorer.doc = 0;\n    scorer.score = 2;\n    leafCollector.collect(0);\n\n    scorer.doc = 2;\n    scorer.score = 5;\n    leafCollector.collect(2);\n\n    topDocs = collector.topDocs();\n    assertEquals(4, topDocs.totalHits);\n\n    // Same 2 first collected docs, but then we collect more docs to make sure\n    // that we use the actual number of collected docs as a lower bound\n    collector = TopScoreDocCollector.create(2, null, false);\n\n    leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n\n    scorer.doc = 1;\n    scorer.score = 3;\n    leafCollector.collect(1);\n\n    leafCollector = collector.getLeafCollector(reader.leaves().get(1));\n    leafCollector.setScorer(scorer);\n\n    scorer.doc = 0;\n    scorer.score = 2;\n    leafCollector.collect(0);\n\n    scorer.doc = 2;\n    scorer.score = 5;\n    leafCollector.collect(2);\n\n    scorer.doc = 3;\n    scorer.score = 4;\n    leafCollector.collect(3);\n\n    scorer.doc = 4;\n    scorer.score = 1;\n    leafCollector.collect(4);\n\n    topDocs = collector.topDocs();\n    assertEquals(5, topDocs.totalHits);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsCollector#testNotTrackTotalHits().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTopDocsCollector#testEstimateHitCount().mjava","sourceNew":"  public void testNotTrackTotalHits() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc, doc));\n    w.flush();\n    IndexReader reader = DirectoryReader.open(w);\n    assertEquals(2, reader.leaves().size());\n    w.close();\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(2, null, false);\n    FakeScorer scorer = new FakeScorer();\n\n    LeafCollector leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n\n    scorer.doc = 0;\n    scorer.score = 3;\n    leafCollector.collect(0);\n\n    scorer.doc = 1;\n    scorer.score = 3;\n    leafCollector.collect(1);\n\n    leafCollector = collector.getLeafCollector(reader.leaves().get(1));\n    leafCollector.setScorer(scorer);\n\n    scorer.doc = 1;\n    scorer.score = 3;\n    leafCollector.collect(1);\n\n    TopDocs topDocs = collector.topDocs();\n    // It assumes all docs matched since numHits was 2 and the first 2 collected docs matched\n    assertEquals(3, topDocs.totalHits.value);\n    assertEquals(TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO, topDocs.totalHits.relation);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEstimateHitCount() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig().setMergePolicy(NoMergePolicy.INSTANCE));\n    Document doc = new Document();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc));\n    w.flush();\n    w.addDocuments(Arrays.asList(doc, doc, doc, doc, doc, doc));\n    w.flush();\n    IndexReader reader = DirectoryReader.open(w);\n    assertEquals(2, reader.leaves().size());\n    w.close();\n\n    TopScoreDocCollector collector = TopScoreDocCollector.create(2, null, false);\n    FakeScorer scorer = new FakeScorer();\n\n    LeafCollector leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n\n    scorer.doc = 0;\n    scorer.score = 3;\n    leafCollector.collect(0);\n\n    scorer.doc = 1;\n    scorer.score = 3;\n    leafCollector.collect(1);\n\n    leafCollector = collector.getLeafCollector(reader.leaves().get(1));\n    leafCollector.setScorer(scorer);\n\n    scorer.doc = 1;\n    scorer.score = 3;\n    leafCollector.collect(1);\n\n    TopDocs topDocs = collector.topDocs();\n    // It assumes all docs matched since numHits was 2 and the first 2 collected docs matched\n    assertEquals(10, topDocs.totalHits);\n\n    // Now test an index that is more sparsely collected\n    collector = TopScoreDocCollector.create(2, null, false);\n\n    leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n\n    scorer.doc = 1;\n    scorer.score = 3;\n    leafCollector.collect(1);\n\n    leafCollector = collector.getLeafCollector(reader.leaves().get(1));\n    leafCollector.setScorer(scorer);\n\n    scorer.doc = 0;\n    scorer.score = 2;\n    leafCollector.collect(0);\n\n    scorer.doc = 2;\n    scorer.score = 5;\n    leafCollector.collect(2);\n\n    topDocs = collector.topDocs();\n    assertEquals(4, topDocs.totalHits);\n\n    // Same 2 first collected docs, but then we collect more docs to make sure\n    // that we use the actual number of collected docs as a lower bound\n    collector = TopScoreDocCollector.create(2, null, false);\n\n    leafCollector = collector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n\n    scorer.doc = 1;\n    scorer.score = 3;\n    leafCollector.collect(1);\n\n    leafCollector = collector.getLeafCollector(reader.leaves().get(1));\n    leafCollector.setScorer(scorer);\n\n    scorer.doc = 0;\n    scorer.score = 2;\n    leafCollector.collect(0);\n\n    scorer.doc = 2;\n    scorer.score = 5;\n    leafCollector.collect(2);\n\n    scorer.doc = 3;\n    scorer.score = 4;\n    leafCollector.collect(3);\n\n    scorer.doc = 4;\n    scorer.score = 1;\n    leafCollector.collect(4);\n\n    topDocs = collector.topDocs();\n    assertEquals(5, topDocs.totalHits);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}