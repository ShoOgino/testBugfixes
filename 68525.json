{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testParallelUniqueStream().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testParallelUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelUniqueStream().mjava","sourceNew":"  @Test\n  public void testParallelUniqueStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n\n\n    try {\n\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", unique(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"), over=\\\"a_f\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_f asc\\\")\");\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 3, 4, 6);\n\n      //Test the eofTuples\n\n      Map<String, Tuple> eofTuples = pstream.getEofTuples();\n      assert (eofTuples.size() == 2); //There should be an EOF tuple for each worker.\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelUniqueStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n\n\n    try {\n\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", unique(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"), over=\\\"a_f\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_f asc\\\")\");\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 3, 4, 6);\n\n      //Test the eofTuples\n\n      Map<String, Tuple> eofTuples = pstream.getEofTuples();\n      assert (eofTuples.size() == 2); //There should be an EOF tuple for each worker.\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233","date":1543335722,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testParallelUniqueStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testParallelUniqueStream().mjava","sourceNew":"  @Test\n  public void testParallelUniqueStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n\n\n    try {\n\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", unique(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\", qt=\\\"/export\\\"), over=\\\"a_f\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_f asc\\\")\");\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 3, 4, 6);\n\n      //Test the eofTuples\n\n      Map<String, Tuple> eofTuples = pstream.getEofTuples();\n      assert (eofTuples.size() == 2); //There should be an EOF tuple for each worker.\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelUniqueStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_s\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_s\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_s\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_s\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String zkHost = cluster.getZkServer().getZkAddress();\n    StreamFactory streamFactory = new StreamFactory().withCollectionZkHost(COLLECTIONORALIAS, zkHost)\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class);\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n\n\n    try {\n\n      ParallelStream pstream = (ParallelStream) streamFactory.constructStream(\"parallel(\" + COLLECTIONORALIAS + \", unique(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", partitionKeys=\\\"a_f\\\"), over=\\\"a_f\\\"), workers=\\\"2\\\", zkHost=\\\"\" + zkHost + \"\\\", sort=\\\"a_f asc\\\")\");\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 3, 4, 6);\n\n      //Test the eofTuples\n\n      Map<String, Tuple> eofTuples = pstream.getEofTuples();\n      assert (eofTuples.size() == 2); //There should be an EOF tuple for each worker.\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233"],"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}