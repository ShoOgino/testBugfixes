{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#testSimpleDeleteStreamByQuery().mjava","commits":[{"id":"140a95988ddfbe87c2376f5fed6acae475ea11fc","date":1580924964,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#testSimpleDeleteStreamByQuery().mjava","pathOld":"/dev/null","sourceNew":"  /** A simple \"Delete by Query\" example */\n  public void testSimpleDeleteStreamByQuery() throws Exception {\n    { // Put some \"real\" docs directly to both X...\n      final UpdateRequest update = setBasicAuthCredentials(new UpdateRequest(), WRITE_X_USER);\n      for (int i = 1; i <= 42; i++) {\n        update.add(sdoc(\"id\",i+\"x\",\"foo_i\",\"\"+i));\n      }\n      assertEquals(\"initial docs in X\",\n                   0, update.commit(cluster.getSolrClient(), COLLECTION_X).getStatus());\n    }\n    \n    assertEquals(42L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n    \n    { // WRITE_X user should be able to delete X via a query from X\n      final String expr\n        = \"delete(\"+COLLECTION_X+\", batchSize=5,                    \" // note batch size\n        + \"       search(\"+COLLECTION_X+\",                          \"\n        + \"              q=\\\"foo_i:[* TO 10]\\\",                     \" // 10 matches = 2 batches\n        + \"              rows=100,                                  \"\n        + \"              fl=\\\"id,foo_i,_version_\\\",                 \" // foo_i should be ignored...\n        + \"              sort=\\\"foo_i desc\\\"))                      \" // version constraint should be ok\n        ;\n\n      final SolrStream solrStream = new SolrStream(solrUrl + \"/\" + COLLECTION_X,\n                                                   params(\"qt\", \"/stream\",\n                                                          \"expr\", expr));\n      solrStream.setCredentials(WRITE_X_USER, WRITE_X_USER);\n      final List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(2, tuples.size());\n      assertEquals(5L, tuples.get(0).get(\"totalIndexed\"));\n      assertEquals(10L, tuples.get(1).get(\"totalIndexed\"));\n    }\n    \n    assertEquals(42L - 10L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"140a95988ddfbe87c2376f5fed6acae475ea11fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140a95988ddfbe87c2376f5fed6acae475ea11fc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["140a95988ddfbe87c2376f5fed6acae475ea11fc"],"140a95988ddfbe87c2376f5fed6acae475ea11fc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}