{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testLoess().mjava","commits":[{"id":"8f62c89eb2bbdac3c9fd626638325a6117e115b0","date":1508784310,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testLoess().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLoess() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                   \"    a=array(0,1,2,3,4,5,6,7),\" +\n                   \"    fit=loess(a))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertTrue(out.get(0).intValue() == 0);\n    assertTrue(out.get(1).intValue() == 1);\n    assertTrue(out.get(2).intValue() == 2);\n    assertTrue(out.get(3).intValue() == 3);\n    assertTrue(out.get(4).intValue() == 4);\n    assertTrue(out.get(5).intValue() == 5);\n    assertTrue(out.get(6).intValue() == 6);\n    assertTrue(out.get(7).intValue() == 7);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testLoess().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testLoess().mjava","sourceNew":"  @Test\n  public void testLoess() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                   \"    a=array(0,1,2,3,4,5,6,7),\" +\n                   \"    fit=loess(a), \" +\n                   \"    der=derivative(fit))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertEquals(out.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(out.get(1).doubleValue(), 1.0, 0.0);\n    assertEquals(out.get(2).doubleValue(), 2.0, 0.0);\n    assertEquals(out.get(3).doubleValue(), 3.0, 0.0);\n    assertEquals(out.get(4).doubleValue(), 4.0, 0.0);\n    assertEquals(out.get(5).doubleValue(), 5.0, 0.0);\n    assertEquals(out.get(6).doubleValue(), 6.0, 0.0);\n    assertEquals(out.get(7).doubleValue(), 7.0, 0.0);\n\n    List<Number> out1 = (List<Number>)tuples.get(0).get(\"der\");\n    assertTrue(out1.size() == 8);\n    assertEquals(out1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(1).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(2).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(5).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(6).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(7).doubleValue(), 1.0, 0.0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testLoess() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                   \"    a=array(0,1,2,3,4,5,6,7),\" +\n                   \"    fit=loess(a))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertTrue(out.get(0).intValue() == 0);\n    assertTrue(out.get(1).intValue() == 1);\n    assertTrue(out.get(2).intValue() == 2);\n    assertTrue(out.get(3).intValue() == 3);\n    assertTrue(out.get(4).intValue() == 4);\n    assertTrue(out.get(5).intValue() == 5);\n    assertTrue(out.get(6).intValue() == 6);\n    assertTrue(out.get(7).intValue() == 7);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testLoess().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testLoess().mjava","sourceNew":"  @Test\n  public void testLoess() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                   \"    a=array(0,1,2,3,4,5,6,7),\" +\n                   \"    fit=loess(a), \" +\n                   \"    der=derivative(fit))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertEquals(out.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(out.get(1).doubleValue(), 1.0, 0.0);\n    assertEquals(out.get(2).doubleValue(), 2.0, 0.0);\n    assertEquals(out.get(3).doubleValue(), 3.0, 0.0);\n    assertEquals(out.get(4).doubleValue(), 4.0, 0.0);\n    assertEquals(out.get(5).doubleValue(), 5.0, 0.0);\n    assertEquals(out.get(6).doubleValue(), 6.0, 0.0);\n    assertEquals(out.get(7).doubleValue(), 7.0, 0.0);\n\n    List<Number> out1 = (List<Number>)tuples.get(0).get(\"der\");\n    assertTrue(out1.size() == 8);\n    assertEquals(out1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(1).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(2).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(5).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(6).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(7).doubleValue(), 1.0, 0.0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testLoess() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n                   \"    a=array(0,1,2,3,4,5,6,7),\" +\n                   \"    fit=loess(a), \" +\n                   \"    der=derivative(fit))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> out = (List<Number>)tuples.get(0).get(\"fit\");\n    assertTrue(out.size() == 8);\n    assertEquals(out.get(0).doubleValue(), 0.0, 0.0);\n    assertEquals(out.get(1).doubleValue(), 1.0, 0.0);\n    assertEquals(out.get(2).doubleValue(), 2.0, 0.0);\n    assertEquals(out.get(3).doubleValue(), 3.0, 0.0);\n    assertEquals(out.get(4).doubleValue(), 4.0, 0.0);\n    assertEquals(out.get(5).doubleValue(), 5.0, 0.0);\n    assertEquals(out.get(6).doubleValue(), 6.0, 0.0);\n    assertEquals(out.get(7).doubleValue(), 7.0, 0.0);\n\n    List<Number> out1 = (List<Number>)tuples.get(0).get(\"der\");\n    assertTrue(out1.size() == 8);\n    assertEquals(out1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(1).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(2).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(3).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(4).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(5).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(6).doubleValue(), 1.0, 0.0);\n    assertEquals(out1.get(7).doubleValue(), 1.0, 0.0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["8f62c89eb2bbdac3c9fd626638325a6117e115b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"8f62c89eb2bbdac3c9fd626638325a6117e115b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f62c89eb2bbdac3c9fd626638325a6117e115b0"],"8f62c89eb2bbdac3c9fd626638325a6117e115b0":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}