{"path":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getLatestReader().mjava","commits":[{"id":"15e716649e2bd79a98b5e68c464154ea4c44677a","date":1523975212,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getLatestReader().mjava","pathOld":"/dev/null","sourceNew":"  private CodecReader getLatestReader() throws IOException {\n    if (this.reader == null) {\n      // get a reader and dec the ref right away we just make sure we have a reader\n      getReader(IOContext.READ).decRef();\n    }\n    if (reader.getLiveDocs() != pendingDeletes.getLiveDocs()\n        || reader.numDeletedDocs() != info.getDelCount() - pendingDeletes.numPendingDeletes()) {\n      // we have a reader but its live-docs are out of sync. let's create a temporary one that we never share\n      swapNewReaderWithLatestLiveDocs();\n    }\n    return reader;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5640f95cd73b5d4138e0a0988164b0fa398a3256"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5640f95cd73b5d4138e0a0988164b0fa398a3256","date":1527054899,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getLatestReader().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getLatestReader().mjava","sourceNew":"  private synchronized CodecReader getLatestReader() throws IOException {\n    if (this.reader == null) {\n      // get a reader and dec the ref right away we just make sure we have a reader\n      getReader(IOContext.READ).decRef();\n    }\n    if (reader.getLiveDocs() != pendingDeletes.getLiveDocs()\n        || reader.numDeletedDocs() != info.getDelCount() - pendingDeletes.numPendingDeletes()) {\n      // we have a reader but its live-docs are out of sync. let's create a temporary one that we never share\n      swapNewReaderWithLatestLiveDocs();\n    }\n    return reader;\n  }\n\n","sourceOld":"  private CodecReader getLatestReader() throws IOException {\n    if (this.reader == null) {\n      // get a reader and dec the ref right away we just make sure we have a reader\n      getReader(IOContext.READ).decRef();\n    }\n    if (reader.getLiveDocs() != pendingDeletes.getLiveDocs()\n        || reader.numDeletedDocs() != info.getDelCount() - pendingDeletes.numPendingDeletes()) {\n      // we have a reader but its live-docs are out of sync. let's create a temporary one that we never share\n      swapNewReaderWithLatestLiveDocs();\n    }\n    return reader;\n  }\n\n","bugFix":["15e716649e2bd79a98b5e68c464154ea4c44677a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aef2a94da918b657d107b616a643e1759db43b6a","date":1527706131,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getLatestReader().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getLatestReader().mjava","sourceNew":"  private synchronized CodecReader getLatestReader() throws IOException {\n    if (this.reader == null) {\n      // get a reader and dec the ref right away we just make sure we have a reader\n      getReader(IOContext.READ).decRef();\n    }\n    if (pendingDeletes.needsRefresh(reader)) {\n      // we have a reader but its live-docs are out of sync. let's create a temporary one that we never share\n      swapNewReaderWithLatestLiveDocs();\n    }\n    return reader;\n  }\n\n","sourceOld":"  private synchronized CodecReader getLatestReader() throws IOException {\n    if (this.reader == null) {\n      // get a reader and dec the ref right away we just make sure we have a reader\n      getReader(IOContext.READ).decRef();\n    }\n    if (reader.getLiveDocs() != pendingDeletes.getLiveDocs()\n        || reader.numDeletedDocs() != info.getDelCount() - pendingDeletes.numPendingDeletes()) {\n      // we have a reader but its live-docs are out of sync. let's create a temporary one that we never share\n      swapNewReaderWithLatestLiveDocs();\n    }\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5640f95cd73b5d4138e0a0988164b0fa398a3256":["15e716649e2bd79a98b5e68c464154ea4c44677a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15e716649e2bd79a98b5e68c464154ea4c44677a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aef2a94da918b657d107b616a643e1759db43b6a":["5640f95cd73b5d4138e0a0988164b0fa398a3256"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aef2a94da918b657d107b616a643e1759db43b6a"]},"commit2Childs":{"5640f95cd73b5d4138e0a0988164b0fa398a3256":["aef2a94da918b657d107b616a643e1759db43b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15e716649e2bd79a98b5e68c464154ea4c44677a"],"15e716649e2bd79a98b5e68c464154ea4c44677a":["5640f95cd73b5d4138e0a0988164b0fa398a3256"],"aef2a94da918b657d107b616a643e1759db43b6a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}