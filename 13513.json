{"path":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","sourceNew":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"test.cfs\");\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            csw.addFile(segment + data[i]);\n        }\n        csw.close();\n\n        CompoundFileReader csr = new CompoundFileReader(dir, \"test.cfs\");\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i]);\n            IndexInput test = csr.openInput(segment + data[i]);\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","sourceOld":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"test.cfs\");\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            csw.addFile(segment + data[i]);\n        }\n        csw.close();\n\n        CompoundFileReader csr = new CompoundFileReader(dir, \"test.cfs\");\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i]);\n            IndexInput test = csr.openInput(segment + data[i]);\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","sourceNew":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"test.cfs\", IOContext.DEFAULT);\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            csw.addFile(segment + data[i]);\n        }\n        csw.close();\n\n        CompoundFileReader csr = new CompoundFileReader(dir, \"test.cfs\", IOContext.DEFAULT);\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i], IOContext.DEFAULT);\n            IndexInput test = csr.openInput(segment + data[i], IOContext.DEFAULT);\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","sourceOld":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"test.cfs\");\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            csw.addFile(segment + data[i]);\n        }\n        csw.close();\n\n        CompoundFileReader csr = new CompoundFileReader(dir, \"test.cfs\");\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i]);\n            IndexInput test = csr.openInput(segment + data[i]);\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","sourceNew":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileDirectory csw = dir.createCompoundOutput(\"test.cfs\");\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            String fileName = segment + data[i];\n            dir.copy(csw, fileName, fileName);\n        }\n        csw.close();\n\n        CompoundFileDirectory csr = dir.openCompoundInput(\"test.cfs\", 1024);\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i]);\n            IndexInput test = csr.openInput(segment + data[i]);\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","sourceOld":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"test.cfs\");\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            csw.addFile(segment + data[i]);\n        }\n        csw.close();\n\n        CompoundFileReader csr = new CompoundFileReader(dir, \"test.cfs\");\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i]);\n            IndexInput test = csr.openInput(segment + data[i]);\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","sourceNew":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileDirectory csw = dir.createCompoundOutput(\"test.cfs\");\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            String fileName = segment + data[i];\n            dir.copy(csw, fileName, fileName);\n        }\n        csw.close();\n\n        CompoundFileDirectory csr = dir.openCompoundInput(\"test.cfs\", 1024);\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i]);\n            IndexInput test = csr.openInput(segment + data[i]);\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","sourceOld":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"test.cfs\");\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            csw.addFile(segment + data[i]);\n        }\n        csw.close();\n\n        CompoundFileReader csr = new CompoundFileReader(dir, \"test.cfs\");\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i]);\n            IndexInput test = csr.openInput(segment + data[i]);\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","sourceNew":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"test.cfs\", newIOContext(random));\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            csw.addFile(segment + data[i]);\n        }\n        csw.close();\n\n        CompoundFileReader csr = new CompoundFileReader(dir, \"test.cfs\", newIOContext(random));\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i], newIOContext(random));\n            IndexInput test = csr.openInput(segment + data[i], newIOContext(random));\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","sourceOld":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"test.cfs\", IOContext.DEFAULT);\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            csw.addFile(segment + data[i]);\n        }\n        csw.close();\n\n        CompoundFileReader csr = new CompoundFileReader(dir, \"test.cfs\", IOContext.DEFAULT);\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i], IOContext.DEFAULT);\n            IndexInput test = csr.openInput(segment + data[i], IOContext.DEFAULT);\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","sourceNew":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileDirectory csw = dir.createCompoundOutput(\"test.cfs\", newIOContext(random));\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            String fileName = segment + data[i];\n            dir.copy(csw, fileName, fileName, newIOContext(random));\n        }\n        csw.close();\n\n        CompoundFileDirectory csr = dir.openCompoundInput(\"test.cfs\", newIOContext(random));\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i], newIOContext(random));\n            IndexInput test = csr.openInput(segment + data[i], newIOContext(random));\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","sourceOld":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"test.cfs\", newIOContext(random));\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            csw.addFile(segment + data[i]);\n        }\n        csw.close();\n\n        CompoundFileReader csr = new CompoundFileReader(dir, \"test.cfs\", newIOContext(random));\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i], newIOContext(random));\n            IndexInput test = csr.openInput(segment + data[i], newIOContext(random));\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","sourceNew":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileDirectory csw = dir.createCompoundOutput(\"test.cfs\", newIOContext(random));\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            String fileName = segment + data[i];\n            dir.copy(csw, fileName, fileName, newIOContext(random));\n        }\n        csw.close();\n\n        CompoundFileDirectory csr = dir.openCompoundInput(\"test.cfs\", newIOContext(random));\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i], newIOContext(random));\n            IndexInput test = csr.openInput(segment + data[i], newIOContext(random));\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","sourceOld":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileDirectory csw = dir.createCompoundOutput(\"test.cfs\");\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            String fileName = segment + data[i];\n            dir.copy(csw, fileName, fileName);\n        }\n        csw.close();\n\n        CompoundFileDirectory csr = dir.openCompoundInput(\"test.cfs\", 1024);\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i]);\n            IndexInput test = csr.openInput(segment + data[i]);\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","sourceNew":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileDirectory csw = dir.createCompoundOutput(\"test.cfs\", newIOContext(random));\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            String fileName = segment + data[i];\n            dir.copy(csw, fileName, fileName, newIOContext(random));\n        }\n        csw.close();\n\n        CompoundFileDirectory csr = dir.openCompoundInput(\"test.cfs\", newIOContext(random));\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i], newIOContext(random));\n            IndexInput test = csr.openInput(segment + data[i], newIOContext(random));\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","sourceOld":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileDirectory csw = dir.createCompoundOutput(\"test.cfs\");\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            String fileName = segment + data[i];\n            dir.copy(csw, fileName, fileName);\n        }\n        csw.close();\n\n        CompoundFileDirectory csr = dir.openCompoundInput(\"test.cfs\", 1024);\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i]);\n            IndexInput test = csr.openInput(segment + data[i]);\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67aadace85f701c87a4e0721eedcda25d8415a70","date":1314201925,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","sourceNew":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileDirectory csw = new CompoundFileDirectory(dir, \"test.cfs\", newIOContext(random), true);\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            String fileName = segment + data[i];\n            dir.copy(csw, fileName, fileName, newIOContext(random));\n        }\n        csw.close();\n\n        CompoundFileDirectory csr = new CompoundFileDirectory(dir, \"test.cfs\", newIOContext(random), false);\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i], newIOContext(random));\n            IndexInput test = csr.openInput(segment + data[i], newIOContext(random));\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","sourceOld":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileDirectory csw = dir.createCompoundOutput(\"test.cfs\", newIOContext(random));\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            String fileName = segment + data[i];\n            dir.copy(csw, fileName, fileName, newIOContext(random));\n        }\n        csw.close();\n\n        CompoundFileDirectory csr = dir.openCompoundInput(\"test.cfs\", newIOContext(random));\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i], newIOContext(random));\n            IndexInput test = csr.openInput(segment + data[i], newIOContext(random));\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","sourceNew":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileDirectory csw = new CompoundFileDirectory(dir, \"test.cfs\", newIOContext(random), true);\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            String fileName = segment + data[i];\n            dir.copy(csw, fileName, fileName, newIOContext(random));\n        }\n        csw.close();\n\n        CompoundFileDirectory csr = new CompoundFileDirectory(dir, \"test.cfs\", newIOContext(random), false);\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i], newIOContext(random));\n            IndexInput test = csr.openInput(segment + data[i], newIOContext(random));\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","sourceOld":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileDirectory csw = new CompoundFileDirectory(dir, \"test.cfs\", newIOContext(random), true);\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            String fileName = segment + data[i];\n            dir.copy(csw, fileName, fileName, newIOContext(random));\n        }\n        csw.close();\n\n        CompoundFileDirectory csr = new CompoundFileDirectory(dir, \"test.cfs\", newIOContext(random), false);\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i], newIOContext(random));\n            IndexInput test = csr.openInput(segment + data[i], newIOContext(random));\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"67aadace85f701c87a4e0721eedcda25d8415a70":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["67aadace85f701c87a4e0721eedcda25d8415a70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["2553b00f699380c64959ccb27991289aae87be2e","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["0aab6e810b4b0d3743d6a048be0602801f4b3920","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":["9454a6510e2db155fb01faa5c049b06ece95fab9","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b6f9be74ca7baaef11857ad002cad40419979516","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"67aadace85f701c87a4e0721eedcda25d8415a70":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b6f9be74ca7baaef11857ad002cad40419979516":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["ddc4c914be86e34b54f70023f45a60fa7f04e929","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["67aadace85f701c87a4e0721eedcda25d8415a70","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"2553b00f699380c64959ccb27991289aae87be2e":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0aab6e810b4b0d3743d6a048be0602801f4b3920","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","2553b00f699380c64959ccb27991289aae87be2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}