{"path":"solr/core/src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","pathOld":"solr/src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : statsList) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : statsList) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","pathOld":"solr/src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : statsList) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : statsList) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","pathOld":"solr/src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : statsList) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : statsList) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63131741120598595ba46620adaf3fad049ca291","date":1335567423,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : statsList) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : statsList) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : statsList) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : statsList) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : statsList) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : statsList) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : statsList) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","sourceOld":"  @Override\n  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<Serializable>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : statsList) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","sourceNew":null,"sourceOld":"  @Override\n  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : statsList) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#getStatistics().mjava","sourceNew":null,"sourceOld":"  @Override\n  public NamedList getStatistics() {\n    NamedList<Serializable> lst = new SimpleOrderedMap<>();\n    if (cache == null)  return lst;\n    ConcurrentLRUCache.Stats stats = cache.getStats();\n    long lookups = stats.getCumulativeLookups();\n    long hits = stats.getCumulativeHits();\n    long inserts = stats.getCumulativePuts();\n    long evictions = stats.getCumulativeEvictions();\n    long size = stats.getCurrentSize();\n    long clookups = 0;\n    long chits = 0;\n    long cinserts = 0;\n    long cevictions = 0;\n\n    // NOTE: It is safe to iterate on a CopyOnWriteArrayList\n    for (ConcurrentLRUCache.Stats statistiscs : statsList) {\n      clookups += statistiscs.getCumulativeLookups();\n      chits += statistiscs.getCumulativeHits();\n      cinserts += statistiscs.getCumulativePuts();\n      cevictions += statistiscs.getCumulativeEvictions();\n    }\n\n    lst.add(\"lookups\", lookups);\n    lst.add(\"hits\", hits);\n    lst.add(\"hitratio\", calcHitRatio(lookups, hits));\n    lst.add(\"inserts\", inserts);\n    lst.add(\"evictions\", evictions);\n    lst.add(\"size\", size);\n\n    lst.add(\"warmupTime\", warmupTime);\n    lst.add(\"cumulative_lookups\", clookups);\n    lst.add(\"cumulative_hits\", chits);\n    lst.add(\"cumulative_hitratio\", calcHitRatio(clookups, chits));\n    lst.add(\"cumulative_inserts\", cinserts);\n    lst.add(\"cumulative_evictions\", cevictions);\n\n    if (showItems != 0) {\n      Map items = cache.getLatestAccessedItems( showItems == -1 ? Integer.MAX_VALUE : showItems );\n      for (Map.Entry e : (Set <Map.Entry>)items.entrySet()) {\n        Object k = e.getKey();\n        Object v = e.getValue();\n\n        String ks = \"item_\" + k;\n        String vs = v.toString();\n        lst.add(ks,vs);\n      }\n      \n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["63131741120598595ba46620adaf3fad049ca291","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7530de27b87b961b51f01bd1299b7004d46e8823"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"63131741120598595ba46620adaf3fad049ca291":["c26f00b574427b55127e869b935845554afde1fa"],"7530de27b87b961b51f01bd1299b7004d46e8823":["63131741120598595ba46620adaf3fad049ca291"],"816521ebaad5add9cb96bb88c577394e2938c40b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["63131741120598595ba46620adaf3fad049ca291"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"63131741120598595ba46620adaf3fad049ca291":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}