{"path":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","sourceNew":"  public static void verifyEquals(Document d1, Document d2) {\n    List<IndexableField> ff1 = d1.getFields();\n    List<IndexableField> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    assertEquals(ff1 + \" : \" + ff2, ff1.size(), ff2.size());\n\n    for (int i=0; i<ff1.size(); i++) {\n      IndexableField f1 = ff1.get(i);\n      IndexableField f2 = ff2.get(i);\n      if (f1.binaryValue() != null) {\n        assert(f2.binaryValue() != null);\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        assertEquals(ff1 + \" : \" + ff2, s1,s2);\n        }\n      }\n    }\n\n","sourceOld":"  public static void verifyEquals(Document d1, Document d2) {\n    List<IndexableField> ff1 = d1.getFields();\n    List<IndexableField> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    assertEquals(ff1 + \" : \" + ff2, ff1.size(), ff2.size());\n\n    for (int i=0; i<ff1.size(); i++) {\n      IndexableField f1 = ff1.get(i);\n      IndexableField f2 = ff2.get(i);\n      if (f1.binaryValue() != null) {\n        assert(f2.binaryValue() != null);\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        assertEquals(ff1 + \" : \" + ff2, s1,s2);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(StoredDocument,StoredDocument).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","sourceNew":"  public static void verifyEquals(StoredDocument d1, StoredDocument d2) {\n    List<StorableField> ff1 = d1.getFields();\n    List<StorableField> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    assertEquals(ff1 + \" : \" + ff2, ff1.size(), ff2.size());\n\n    for (int i=0; i<ff1.size(); i++) {\n      StorableField f1 = ff1.get(i);\n      StorableField f2 = ff2.get(i);\n      if (f1.binaryValue() != null) {\n        assert(f2.binaryValue() != null);\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        assertEquals(ff1 + \" : \" + ff2, s1,s2);\n        }\n      }\n    }\n\n","sourceOld":"  public static void verifyEquals(Document d1, Document d2) {\n    List<IndexableField> ff1 = d1.getFields();\n    List<IndexableField> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    assertEquals(ff1 + \" : \" + ff2, ff1.size(), ff2.size());\n\n    for (int i=0; i<ff1.size(); i++) {\n      IndexableField f1 = ff1.get(i);\n      IndexableField f2 = ff2.get(i);\n      if (f1.binaryValue() != null) {\n        assert(f2.binaryValue() != null);\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        assertEquals(ff1 + \" : \" + ff2, s1,s2);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(StoredDocument,StoredDocument).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","sourceNew":"  public static void verifyEquals(StoredDocument d1, StoredDocument d2) {\n    List<StorableField> ff1 = d1.getFields();\n    List<StorableField> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    assertEquals(ff1 + \" : \" + ff2, ff1.size(), ff2.size());\n\n    for (int i=0; i<ff1.size(); i++) {\n      StorableField f1 = ff1.get(i);\n      StorableField f2 = ff2.get(i);\n      if (f1.binaryValue() != null) {\n        assert(f2.binaryValue() != null);\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        assertEquals(ff1 + \" : \" + ff2, s1,s2);\n        }\n      }\n    }\n\n","sourceOld":"  public static void verifyEquals(Document d1, Document d2) {\n    List<IndexableField> ff1 = d1.getFields();\n    List<IndexableField> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    assertEquals(ff1 + \" : \" + ff2, ff1.size(), ff2.size());\n\n    for (int i=0; i<ff1.size(); i++) {\n      IndexableField f1 = ff1.get(i);\n      IndexableField f2 = ff2.get(i);\n      if (f1.binaryValue() != null) {\n        assert(f2.binaryValue() != null);\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        assertEquals(ff1 + \" : \" + ff2, s1,s2);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(StoredDocument,StoredDocument).mjava","sourceNew":"  public static void verifyEquals(Document d1, Document d2) {\n    List<IndexableField> ff1 = new ArrayList<>(d1.getFields());\n    List<IndexableField> ff2 = new ArrayList<>(d2.getFields());\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    assertEquals(ff1 + \" : \" + ff2, ff1.size(), ff2.size());\n\n    for (int i=0; i<ff1.size(); i++) {\n      IndexableField f1 = ff1.get(i);\n      IndexableField f2 = ff2.get(i);\n      if (f1.binaryValue() != null) {\n        assert(f2.binaryValue() != null);\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        assertEquals(ff1 + \" : \" + ff2, s1,s2);\n        }\n      }\n    }\n\n","sourceOld":"  public static void verifyEquals(StoredDocument d1, StoredDocument d2) {\n    List<StorableField> ff1 = d1.getFields();\n    List<StorableField> ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    assertEquals(ff1 + \" : \" + ff2, ff1.size(), ff2.size());\n\n    for (int i=0; i<ff1.size(); i++) {\n      StorableField f1 = ff1.get(i);\n      StorableField f2 = ff2.get(i);\n      if (f1.binaryValue() != null) {\n        assert(f2.binaryValue() != null);\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        assertEquals(ff1 + \" : \" + ff2, s1,s2);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1d028314cced5858683a1bb4741423d0f934257b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}