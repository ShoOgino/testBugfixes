{"path":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      try {\n        File indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            modifyIndexProps(tmpIndexDir.getName());\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if(deleteTmpIdxDir) delTree(tmpIndexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","sourceNew":null,"sourceOld":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      try {\n        File indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            modifyIndexProps(tmpIndexDir.getName());\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if(deleteTmpIdxDir) delTree(tmpIndexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","sourceNew":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      try {\n        File indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            modifyIndexProps(tmpIndexDir.getName());\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if(deleteTmpIdxDir) delTree(tmpIndexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","sourceOld":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      try {\n        File indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            modifyIndexProps(tmpIndexDir.getName());\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if(deleteTmpIdxDir) delTree(tmpIndexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      try {\n        File indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            modifyIndexProps(tmpIndexDir.getName());\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if(deleteTmpIdxDir) delTree(tmpIndexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","sourceNew":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      try {\n        File indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            modifyIndexProps(tmpIndexDir.getName());\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if(deleteTmpIdxDir) delTree(tmpIndexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","sourceOld":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      try {\n        File indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            modifyIndexProps(tmpIndexDir.getName());\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if(deleteTmpIdxDir) delTree(tmpIndexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","sourceNew":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      try {\n        File indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            modifyIndexProps(tmpIndexDir.getName());\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if(deleteTmpIdxDir) delTree(tmpIndexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","sourceOld":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      try {\n        File indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            modifyIndexProps(tmpIndexDir.getName());\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if(deleteTmpIdxDir) delTree(tmpIndexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93a06dc5d8e12b2956002d1f01a924d7adee6a26","date":1296267893,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","sourceNew":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      File indexDir = null ;\n      try {\n        indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if (deleteTmpIdxDir) delTree(tmpIndexDir);\n        else delTree(indexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","sourceOld":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      try {\n        File indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            modifyIndexProps(tmpIndexDir.getName());\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if(deleteTmpIdxDir) delTree(tmpIndexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","bugFix":["68a5c887424a2c6209bb3e87715125a2d398f6b9","f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","sourceNew":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      File indexDir = null ;\n      try {\n        indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if (deleteTmpIdxDir) delTree(tmpIndexDir);\n        else delTree(indexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","sourceOld":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      try {\n        File indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            modifyIndexProps(tmpIndexDir.getName());\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if(deleteTmpIdxDir) delTree(tmpIndexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","sourceNew":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      File indexDir = null ;\n      try {\n        indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if (deleteTmpIdxDir) delTree(tmpIndexDir);\n        else delTree(indexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","sourceOld":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      try {\n        File indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            modifyIndexProps(tmpIndexDir.getName());\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if(deleteTmpIdxDir) delTree(tmpIndexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","sourceNew":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      File indexDir = null ;\n      try {\n        indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if (deleteTmpIdxDir) delTree(tmpIndexDir);\n        else delTree(indexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","sourceOld":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      File indexDir = null ;\n      try {\n        indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if (deleteTmpIdxDir) delTree(tmpIndexDir);\n        else delTree(indexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","sourceNew":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      File indexDir = null ;\n      try {\n        indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if (deleteTmpIdxDir) delTree(tmpIndexDir);\n        else delTree(indexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","sourceOld":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      File indexDir = null ;\n      try {\n        indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if (deleteTmpIdxDir) delTree(tmpIndexDir);\n        else delTree(indexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#fetchLatestIndex(SolrCore).mjava","sourceNew":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      File indexDir = null ;\n      try {\n        indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if (deleteTmpIdxDir) delTree(tmpIndexDir);\n        else delTree(indexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","sourceOld":"  boolean fetchLatestIndex(SolrCore core) throws IOException {\n    replicationStartTime = System.currentTimeMillis();\n    try {\n      //get the current 'replicateable' index version in the master\n      NamedList response = null;\n      try {\n        response = getLatestVersion();\n      } catch (Exception e) {\n        LOG.error(\"Master at: \" + masterUrl + \" is not available. Index fetch failed. Exception: \" + e.getMessage());\n        return false;\n      }\n      long latestVersion = (Long) response.get(CMD_INDEX_VERSION);\n      long latestGeneration = (Long) response.get(GENERATION);\n      if (latestVersion == 0L) {\n        //there is nothing to be replicated\n        return false;\n      }\n      IndexCommit commit;\n      RefCounted<SolrIndexSearcher> searcherRefCounted = null;\n      try {\n        searcherRefCounted = core.getNewestSearcher(false);\n        commit = searcherRefCounted.get().getIndexReader().getIndexCommit();\n      } finally {\n        if (searcherRefCounted != null)\n          searcherRefCounted.decref();\n      }\n      if (commit.getVersion() == latestVersion && commit.getGeneration() == latestGeneration) {\n        //master and slave are alsready in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        return false;\n      }\n      LOG.info(\"Master's version: \" + latestVersion + \", generation: \" + latestGeneration);\n      LOG.info(\"Slave's version: \" + commit.getVersion() + \", generation: \" + commit.getGeneration());\n      LOG.info(\"Starting replication process\");\n      // get the list of files first\n      fetchFileList(latestVersion);\n      // this can happen if the commit point is deleted before we fetch the file list.\n      if(filesToDownload.isEmpty()) return false;\n      LOG.info(\"Number of files in latest index in master: \" + filesToDownload.size());\n\n      // Create the sync service\n      fsyncService = Executors.newSingleThreadExecutor();\n      // use a synchronized list because the list is read by other threads (to show details)\n      filesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n      // if the generateion of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index direcory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = commit.getGeneration() >= latestGeneration;\n      File tmpIndexDir = createTempindexDir(core);\n      if (isIndexStale())\n        isFullCopyNeeded = true;\n      successfulInstall = false;\n      boolean deleteTmpIdxDir = true;\n      File indexDir = null ;\n      try {\n        indexDir = new File(core.getIndexDir());\n        downloadIndexFiles(isFullCopyNeeded, tmpIndexDir, latestVersion);\n        LOG.info(\"Total time taken for download : \" + ((System.currentTimeMillis() - replicationStartTime) / 1000) + \" secs\");\n        Collection<Map<String, Object>> modifiedConfFiles = getModifiedConfFiles(confFilesToDownload);\n        if (!modifiedConfFiles.isEmpty()) {\n          downloadConfFiles(confFilesToDownload, latestVersion);\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            LOG.info(\"Configuration files are modified, core will be reloaded\");\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);//write to a file time of replication and conf files.\n            reloadCore();\n          }\n        } else {\n          terminateAndWaitFsyncService();\n          if (isFullCopyNeeded) {\n            successfulInstall = modifyIndexProps(tmpIndexDir.getName());\n            deleteTmpIdxDir =  false;\n          } else {\n            successfulInstall = copyIndexFiles(tmpIndexDir, indexDir);\n          }\n          if (successfulInstall) {\n            logReplicationTimeAndConfFiles(modifiedConfFiles, successfulInstall);\n            doCommit();\n          }\n        }\n        replicationStartTime = 0;\n        return successfulInstall;\n      } catch (ReplicationHandlerException e) {\n        LOG.error(\"User aborted Replication\");\n      } catch (SolrException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Index fetch failed : \", e);\n      } finally {\n        if (deleteTmpIdxDir) delTree(tmpIndexDir);\n        else delTree(indexDir);\n      }\n      return successfulInstall;\n    } finally {\n      if (!successfulInstall) {\n        logReplicationTimeAndConfFiles(null, successfulInstall);\n      }\n      filesToDownload = filesDownloaded = confFilesDownloaded = confFilesToDownload = null;\n      replicationStartTime = 0;\n      fileFetcher = null;\n      if (fsyncService != null && !fsyncService.isShutdown()) fsyncService.shutdownNow();\n      fsyncService = null;\n      stop = false;\n      fsyncException = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["93a06dc5d8e12b2956002d1f01a924d7adee6a26","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c220849f876de24a79f756f65b3eb045db59f63f":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["93a06dc5d8e12b2956002d1f01a924d7adee6a26"],"93a06dc5d8e12b2956002d1f01a924d7adee6a26":["c220849f876de24a79f756f65b3eb045db59f63f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","93a06dc5d8e12b2956002d1f01a924d7adee6a26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["93a06dc5d8e12b2956002d1f01a924d7adee6a26"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1da8d55113b689b06716246649de6f62430f15c0","c220849f876de24a79f756f65b3eb045db59f63f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","93a06dc5d8e12b2956002d1f01a924d7adee6a26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["c220849f876de24a79f756f65b3eb045db59f63f","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c220849f876de24a79f756f65b3eb045db59f63f":["93a06dc5d8e12b2956002d1f01a924d7adee6a26","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"93a06dc5d8e12b2956002d1f01a924d7adee6a26":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}