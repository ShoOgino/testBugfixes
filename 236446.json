{"path":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random, 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n          customType.setTokenized(random.nextBoolean());\n          customType.setOmitNorms(random.nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(20)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      int num = _TestUtil.nextInt(random, 30, 60);\n      for (int j = 0; j < num; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n          customType.setTokenized(random.nextBoolean());\n          customType.setOmitNorms(random.nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random, 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n          customType.setTokenized(random.nextBoolean());\n          customType.setOmitNorms(random.nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random, 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n          customType.setTokenized(random.nextBoolean());\n          customType.setOmitNorms(random.nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random, 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n          customType.setTokenized(random.nextBoolean());\n          customType.setOmitNorms(random.nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random, 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n          customType.setTokenized(random.nextBoolean());\n          customType.setOmitNorms(random.nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.forceMerge(1);\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["7b91922b55d15444d554721b352861d028eb8278"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}