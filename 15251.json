{"path":"src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","commits":[{"id":"2f9c6c7abe2f7f9fdd4c838d1601dcd707946566","date":1259958704,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","sourceNew":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f9c6c7abe2f7f9fdd4c838d1601dcd707946566":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2f9c6c7abe2f7f9fdd4c838d1601dcd707946566"]},"commit2Childs":{"2f9c6c7abe2f7f9fdd4c838d1601dcd707946566":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2f9c6c7abe2f7f9fdd4c838d1601dcd707946566"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}