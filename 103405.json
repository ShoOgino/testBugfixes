{"path":"src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","commits":[{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.decodeNorm(r1.norms(\"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", 0.5f);\n    assertTrue(Similarity.decodeNorm(r1.norms(\"field1\")[4]) == norm1);\n    assertTrue(Similarity.decodeNorm(pr1Clone.norms(\"field1\")[4]) != norm1);\n\n    assertTrue(!r1.isDeleted(10));\n    assertTrue(pr1Clone.isDeleted(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0eb5b0b5b98c777dad412afbfb347d2c0889327","date":1259094367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", 0.5f);\n    assertTrue(Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]) == norm1);\n    assertTrue(Similarity.getDefault().decodeNormValue(pr1Clone.norms(\"field1\")[4]) != norm1);\n\n    assertTrue(!r1.isDeleted(10));\n    assertTrue(pr1Clone.isDeleted(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.decodeNorm(r1.norms(\"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", 0.5f);\n    assertTrue(Similarity.decodeNorm(r1.norms(\"field1\")[4]) == norm1);\n    assertTrue(Similarity.decodeNorm(pr1Clone.norms(\"field1\")[4]) != norm1);\n\n    assertTrue(!r1.isDeleted(10));\n    assertTrue(pr1Clone.isDeleted(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#performDefaultTests(IndexReader).mjava","sourceNew":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", 0.5f);\n    assertTrue(Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]) == norm1);\n    assertTrue(Similarity.getDefault().decodeNormValue(pr1Clone.norms(\"field1\")[4]) != norm1);\n\n    assertTrue(!r1.isDeleted(10));\n    assertTrue(pr1Clone.isDeleted(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","sourceOld":"  /**\n   * 1. Get a norm from the original reader 2. Clone the original reader 3.\n   * Delete a document and set the norm of the cloned reader 4. Verify the norms\n   * are not the same on each reader 5. Verify the doc deleted is only in the\n   * cloned reader 6. Try to delete a document in the original reader, an\n   * exception should be thrown\n   * \n   * @param r1 IndexReader to perform tests on\n   * @throws Exception\n   */\n  private void performDefaultTests(IndexReader r1) throws Exception {\n    float norm1 = Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]);\n\n    IndexReader pr1Clone = (IndexReader) r1.clone();\n    pr1Clone.deleteDocument(10);\n    pr1Clone.setNorm(4, \"field1\", 0.5f);\n    assertTrue(Similarity.getDefault().decodeNormValue(r1.norms(\"field1\")[4]) == norm1);\n    assertTrue(Similarity.getDefault().decodeNormValue(pr1Clone.norms(\"field1\")[4]) != norm1);\n\n    assertTrue(!r1.isDeleted(10));\n    assertTrue(pr1Clone.isDeleted(10));\n\n    // try to update the original reader, which should throw an exception\n    try {\n      r1.deleteDocument(11);\n      fail(\"Tried to delete doc 11 and an exception should have been thrown\");\n    } catch (Exception exception) {\n      // expectted\n    }\n    pr1Clone.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}