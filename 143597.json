{"path":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#numDeletesToMerge(MergePolicy).mjava","commits":[{"id":"9ae87c7be37e537f40fa3bb2c35fa4a368d12a72","date":1523453225,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#numDeletesToMerge(MergePolicy).mjava","pathOld":"/dev/null","sourceNew":"  synchronized int numDeletesToMerge(MergePolicy policy) throws IOException {\n    IOSupplier<CodecReader> readerSupplier = () -> {\n      if (this.reader == null) {\n        // get a reader and dec the ref right away we just make sure we have a reader\n        getReader(IOContext.READ).decRef();\n      }\n      if (reader.getLiveDocs() != pendingDeletes.getLiveDocs()\n          || reader.numDeletedDocs() != info.getDelCount() - pendingDeletes.numPendingDeletes()) {\n        // we have a reader but its live-docs are out of sync. let's create a temporary one that we never share\n        swapNewReaderWithLatestLiveDocs();\n      }\n      return reader;\n    };\n    return policy.numDeletesToMerge(info, pendingDeletes.numPendingDeletes(), readerSupplier);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["15e716649e2bd79a98b5e68c464154ea4c44677a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#numDeletesToMerge(MergePolicy).mjava","pathOld":"/dev/null","sourceNew":"  synchronized int numDeletesToMerge(MergePolicy policy) throws IOException {\n    IOSupplier<CodecReader> readerSupplier = () -> {\n      if (this.reader == null) {\n        // get a reader and dec the ref right away we just make sure we have a reader\n        getReader(IOContext.READ).decRef();\n      }\n      if (reader.getLiveDocs() != pendingDeletes.getLiveDocs()\n          || reader.numDeletedDocs() != info.getDelCount() - pendingDeletes.numPendingDeletes()) {\n        // we have a reader but its live-docs are out of sync. let's create a temporary one that we never share\n        swapNewReaderWithLatestLiveDocs();\n      }\n      return reader;\n    };\n    return policy.numDeletesToMerge(info, pendingDeletes.numPendingDeletes(), readerSupplier);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36d13f271b6649357e07f71f7e46559479f69b5b","date":1523888226,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#numDeletesToMerge(MergePolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#numDeletesToMerge(MergePolicy).mjava","sourceNew":"  synchronized int numDeletesToMerge(MergePolicy policy) throws IOException {\n    IOSupplier<CodecReader> readerSupplier = () -> {\n      if (this.reader == null) {\n        // get a reader and dec the ref right away we just make sure we have a reader\n        getReader(IOContext.READ).decRef();\n      }\n      if (reader.getLiveDocs() != pendingDeletes.getLiveDocs()\n          || reader.numDeletedDocs() != info.getDelCount() - pendingDeletes.numPendingDeletes()) {\n        // we have a reader but its live-docs are out of sync. let's create a temporary one that we never share\n        swapNewReaderWithLatestLiveDocs();\n      }\n      return reader;\n    };\n    return pendingDeletes.numDeletesToMerge(policy, readerSupplier);\n  }\n\n","sourceOld":"  synchronized int numDeletesToMerge(MergePolicy policy) throws IOException {\n    IOSupplier<CodecReader> readerSupplier = () -> {\n      if (this.reader == null) {\n        // get a reader and dec the ref right away we just make sure we have a reader\n        getReader(IOContext.READ).decRef();\n      }\n      if (reader.getLiveDocs() != pendingDeletes.getLiveDocs()\n          || reader.numDeletedDocs() != info.getDelCount() - pendingDeletes.numPendingDeletes()) {\n        // we have a reader but its live-docs are out of sync. let's create a temporary one that we never share\n        swapNewReaderWithLatestLiveDocs();\n      }\n      return reader;\n    };\n    return policy.numDeletesToMerge(info, pendingDeletes.numPendingDeletes(), readerSupplier);\n  }\n\n","bugFix":null,"bugIntro":["15e716649e2bd79a98b5e68c464154ea4c44677a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15e716649e2bd79a98b5e68c464154ea4c44677a","date":1523975212,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#numDeletesToMerge(MergePolicy).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#numDeletesToMerge(MergePolicy).mjava","sourceNew":"  synchronized int numDeletesToMerge(MergePolicy policy) throws IOException {\n    return pendingDeletes.numDeletesToMerge(policy, this::getLatestReader);\n  }\n\n","sourceOld":"  synchronized int numDeletesToMerge(MergePolicy policy) throws IOException {\n    IOSupplier<CodecReader> readerSupplier = () -> {\n      if (this.reader == null) {\n        // get a reader and dec the ref right away we just make sure we have a reader\n        getReader(IOContext.READ).decRef();\n      }\n      if (reader.getLiveDocs() != pendingDeletes.getLiveDocs()\n          || reader.numDeletedDocs() != info.getDelCount() - pendingDeletes.numPendingDeletes()) {\n        // we have a reader but its live-docs are out of sync. let's create a temporary one that we never share\n        swapNewReaderWithLatestLiveDocs();\n      }\n      return reader;\n    };\n    return pendingDeletes.numDeletesToMerge(policy, readerSupplier);\n  }\n\n","bugFix":["9ae87c7be37e537f40fa3bb2c35fa4a368d12a72","36d13f271b6649357e07f71f7e46559479f69b5b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ae87c7be37e537f40fa3bb2c35fa4a368d12a72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"36d13f271b6649357e07f71f7e46559479f69b5b":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"15e716649e2bd79a98b5e68c464154ea4c44677a":["36d13f271b6649357e07f71f7e46559479f69b5b"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9ae87c7be37e537f40fa3bb2c35fa4a368d12a72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["15e716649e2bd79a98b5e68c464154ea4c44677a"]},"commit2Childs":{"9ae87c7be37e537f40fa3bb2c35fa4a368d12a72":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ae87c7be37e537f40fa3bb2c35fa4a368d12a72","43345f1452f9510f8aaadae6156fe0c834e7d957"],"36d13f271b6649357e07f71f7e46559479f69b5b":["15e716649e2bd79a98b5e68c464154ea4c44677a"],"15e716649e2bd79a98b5e68c464154ea4c44677a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["36d13f271b6649357e07f71f7e46559479f69b5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}