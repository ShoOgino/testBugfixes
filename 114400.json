{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextNonLeaf().mjava","commits":[{"id":"f5c96ee46366b5feece8b0b328368c6237fc087a","date":1400184255,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextNonLeaf().mjava","pathOld":"/dev/null","sourceNew":"  public boolean nextNonLeaf() {\n    //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    suffix = code >>> 1;\n    startBytePos = suffixesReader.getPosition();\n    suffixesReader.skipBytes(suffix);\n    if ((code & 1) == 0) {\n      // A normal term\n      termState.termBlockOrd++;\n      return false;\n    } else {\n      // A sub-block; make sub-FP absolute:\n      lastSubFP = fp - suffixesReader.readVLong();\n      return true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextNonLeaf().mjava","pathOld":"/dev/null","sourceNew":"  public boolean nextNonLeaf() {\n    //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    suffix = code >>> 1;\n    startBytePos = suffixesReader.getPosition();\n    suffixesReader.skipBytes(suffix);\n    if ((code & 1) == 0) {\n      // A normal term\n      termState.termBlockOrd++;\n      return false;\n    } else {\n      // A sub-block; make sub-FP absolute:\n      lastSubFP = fp - suffixesReader.readVLong();\n      return true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextNonLeaf().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextNonLeaf().mjava","sourceNew":"  public boolean nextNonLeaf() {\n    //if (DEBUG) {\n    //  System.out.println(\"  frame.nextNonLeaf ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" versionAutoPrefix=\" + versionAutoPrefix + \" fp=\" + suffixesReader.getPosition());\n    // }\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    if (versionAutoPrefix == false) {\n      suffix = code >>> 1;\n      startBytePos = suffixesReader.getPosition();\n      suffixesReader.skipBytes(suffix);\n      if ((code & 1) == 0) {\n        // A normal term\n        termState.termBlockOrd++;\n        return false;\n      } else {\n        // A sub-block; make sub-FP absolute:\n        lastSubFP = fp - suffixesReader.readVLong();\n        return true;\n      }\n    } else {\n      suffix = code >>> 2;\n      startBytePos = suffixesReader.getPosition();\n      suffixesReader.skipBytes(suffix);\n      switch (code & 3) {\n      case 0:\n        // A normal term\n        //if (DEBUG) System.out.println(\"    ret: term\");\n        isAutoPrefixTerm = false;\n        termState.termBlockOrd++;\n        return false;\n      case 1:\n        // A sub-block; make sub-FP absolute:\n        isAutoPrefixTerm = false;\n        lastSubFP = fp - suffixesReader.readVLong();\n        //if (DEBUG) System.out.println(\"    ret: sub-block\");\n        return true;\n      case 2:\n        // A normal prefix term, suffix leads with empty string\n        floorSuffixLeadStart = -1;\n        termState.termBlockOrd++;\n        floorSuffixLeadEnd = suffixesReader.readByte() & 0xff;\n        if (floorSuffixLeadEnd == 0xff) {\n          floorSuffixLeadEnd = -1;\n          //System.out.println(\"  fill in -1\");\n        }\n        //if (DEBUG) System.out.println(\"    ret: floor prefix term: start=-1 end=\" + floorSuffixLeadEnd);\n        isAutoPrefixTerm = true;\n        return false;\n      case 3:\n        // A floor'd prefix term, suffix leads with real byte\n        if (suffix == 0) {\n          // TODO: this is messy, but necessary because we are an auto-prefix term, but our suffix is the empty string here, so we have to\n          // look at the parent block to get the lead suffix byte:\n          assert ord > 0;\n          IntersectTermsEnumFrame parent = ite.stack[ord-1];\n          floorSuffixLeadStart = parent.suffixBytes[parent.startBytePos+parent.suffix-1] & 0xff;\n          //if (DEBUG) System.out.println(\"    peek-parent: suffix=\" + floorSuffixLeadStart);\n        } else {\n          floorSuffixLeadStart = suffixBytes[startBytePos+suffix-1] & 0xff;\n        }\n        termState.termBlockOrd++;\n        isAutoPrefixTerm = true;\n        floorSuffixLeadEnd = suffixesReader.readByte() & 0xff;\n        //if (DEBUG) System.out.println(\"    ret: floor prefix term start=\" + floorSuffixLeadStart + \" end=\" + floorSuffixLeadEnd);\n        return false;\n      default:\n        // Silly javac:\n        assert false;\n        return false;\n      }\n    }\n  }\n\n","sourceOld":"  public boolean nextNonLeaf() {\n    //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    suffix = code >>> 1;\n    startBytePos = suffixesReader.getPosition();\n    suffixesReader.skipBytes(suffix);\n    if ((code & 1) == 0) {\n      // A normal term\n      termState.termBlockOrd++;\n      return false;\n    } else {\n      // A sub-block; make sub-FP absolute:\n      lastSubFP = fp - suffixesReader.readVLong();\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextNonLeaf().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextNonLeaf().mjava","sourceNew":"  public boolean nextNonLeaf() {\n    //if (DEBUG) {\n    //  System.out.println(\"  frame.nextNonLeaf ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" versionAutoPrefix=\" + versionAutoPrefix + \" fp=\" + suffixesReader.getPosition());\n    // }\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    if (versionAutoPrefix == false) {\n      suffix = code >>> 1;\n      startBytePos = suffixesReader.getPosition();\n      suffixesReader.skipBytes(suffix);\n      if ((code & 1) == 0) {\n        // A normal term\n        termState.termBlockOrd++;\n        return false;\n      } else {\n        // A sub-block; make sub-FP absolute:\n        lastSubFP = fp - suffixesReader.readVLong();\n        return true;\n      }\n    } else {\n      suffix = code >>> 2;\n      startBytePos = suffixesReader.getPosition();\n      suffixesReader.skipBytes(suffix);\n      switch (code & 3) {\n      case 0:\n        // A normal term\n        //if (DEBUG) System.out.println(\"    ret: term\");\n        isAutoPrefixTerm = false;\n        termState.termBlockOrd++;\n        return false;\n      case 1:\n        // A sub-block; make sub-FP absolute:\n        isAutoPrefixTerm = false;\n        lastSubFP = fp - suffixesReader.readVLong();\n        //if (DEBUG) System.out.println(\"    ret: sub-block\");\n        return true;\n      case 2:\n        // A normal prefix term, suffix leads with empty string\n        floorSuffixLeadStart = -1;\n        termState.termBlockOrd++;\n        floorSuffixLeadEnd = suffixesReader.readByte() & 0xff;\n        if (floorSuffixLeadEnd == 0xff) {\n          floorSuffixLeadEnd = -1;\n          //System.out.println(\"  fill in -1\");\n        }\n        //if (DEBUG) System.out.println(\"    ret: floor prefix term: start=-1 end=\" + floorSuffixLeadEnd);\n        isAutoPrefixTerm = true;\n        return false;\n      case 3:\n        // A floor'd prefix term, suffix leads with real byte\n        if (suffix == 0) {\n          // TODO: this is messy, but necessary because we are an auto-prefix term, but our suffix is the empty string here, so we have to\n          // look at the parent block to get the lead suffix byte:\n          assert ord > 0;\n          IntersectTermsEnumFrame parent = ite.stack[ord-1];\n          floorSuffixLeadStart = parent.suffixBytes[parent.startBytePos+parent.suffix-1] & 0xff;\n          //if (DEBUG) System.out.println(\"    peek-parent: suffix=\" + floorSuffixLeadStart);\n        } else {\n          floorSuffixLeadStart = suffixBytes[startBytePos+suffix-1] & 0xff;\n        }\n        termState.termBlockOrd++;\n        isAutoPrefixTerm = true;\n        floorSuffixLeadEnd = suffixesReader.readByte() & 0xff;\n        //if (DEBUG) System.out.println(\"    ret: floor prefix term start=\" + floorSuffixLeadStart + \" end=\" + floorSuffixLeadEnd);\n        return false;\n      default:\n        // Silly javac:\n        assert false;\n        return false;\n      }\n    }\n  }\n\n","sourceOld":"  public boolean nextNonLeaf() {\n    //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    suffix = code >>> 1;\n    startBytePos = suffixesReader.getPosition();\n    suffixesReader.skipBytes(suffix);\n    if ((code & 1) == 0) {\n      // A normal term\n      termState.termBlockOrd++;\n      return false;\n    } else {\n      // A sub-block; make sub-FP absolute:\n      lastSubFP = fp - suffixesReader.readVLong();\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59db5e5f780185e0155d296a323e440a6ecfd3b6","date":1435089559,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextNonLeaf().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextNonLeaf().mjava","sourceNew":"  public boolean nextNonLeaf() {\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    if (versionAutoPrefix == false) {\n      suffix = code >>> 1;\n      startBytePos = suffixesReader.getPosition();\n      suffixesReader.skipBytes(suffix);\n      if ((code & 1) == 0) {\n        // A normal term\n        termState.termBlockOrd++;\n        return false;\n      } else {\n        // A sub-block; make sub-FP absolute:\n        lastSubFP = fp - suffixesReader.readVLong();\n        return true;\n      }\n    } else {\n      suffix = code >>> 2;\n      startBytePos = suffixesReader.getPosition();\n      suffixesReader.skipBytes(suffix);\n      switch (code & 3) {\n      case 0:\n        // A normal term\n        isAutoPrefixTerm = false;\n        termState.termBlockOrd++;\n        return false;\n      case 1:\n        // A sub-block; make sub-FP absolute:\n        isAutoPrefixTerm = false;\n        lastSubFP = fp - suffixesReader.readVLong();\n        return true;\n      case 2:\n        // A normal prefix term, suffix leads with empty string\n        floorSuffixLeadStart = -1;\n        termState.termBlockOrd++;\n        floorSuffixLeadEnd = suffixesReader.readByte() & 0xff;\n        if (floorSuffixLeadEnd == 0xff) {\n          floorSuffixLeadEnd = -1;\n        }\n        isAutoPrefixTerm = true;\n        return false;\n      case 3:\n        // A floor'd prefix term, suffix leads with real byte\n        if (suffix == 0) {\n          // TODO: this is messy, but necessary because we are an auto-prefix term, but our suffix is the empty string here, so we have to\n          // look at the parent block to get the lead suffix byte:\n          assert ord > 0;\n          IntersectTermsEnumFrame parent = ite.stack[ord-1];\n          floorSuffixLeadStart = parent.suffixBytes[parent.startBytePos+parent.suffix-1] & 0xff;\n        } else {\n          floorSuffixLeadStart = suffixBytes[startBytePos+suffix-1] & 0xff;\n        }\n        termState.termBlockOrd++;\n        isAutoPrefixTerm = true;\n        floorSuffixLeadEnd = suffixesReader.readByte() & 0xff;\n        return false;\n      default:\n        // Silly javac:\n        assert false;\n        return false;\n      }\n    }\n  }\n\n","sourceOld":"  public boolean nextNonLeaf() {\n    //if (DEBUG) {\n    //  System.out.println(\"  frame.nextNonLeaf ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" versionAutoPrefix=\" + versionAutoPrefix + \" fp=\" + suffixesReader.getPosition());\n    // }\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    if (versionAutoPrefix == false) {\n      suffix = code >>> 1;\n      startBytePos = suffixesReader.getPosition();\n      suffixesReader.skipBytes(suffix);\n      if ((code & 1) == 0) {\n        // A normal term\n        termState.termBlockOrd++;\n        return false;\n      } else {\n        // A sub-block; make sub-FP absolute:\n        lastSubFP = fp - suffixesReader.readVLong();\n        return true;\n      }\n    } else {\n      suffix = code >>> 2;\n      startBytePos = suffixesReader.getPosition();\n      suffixesReader.skipBytes(suffix);\n      switch (code & 3) {\n      case 0:\n        // A normal term\n        //if (DEBUG) System.out.println(\"    ret: term\");\n        isAutoPrefixTerm = false;\n        termState.termBlockOrd++;\n        return false;\n      case 1:\n        // A sub-block; make sub-FP absolute:\n        isAutoPrefixTerm = false;\n        lastSubFP = fp - suffixesReader.readVLong();\n        //if (DEBUG) System.out.println(\"    ret: sub-block\");\n        return true;\n      case 2:\n        // A normal prefix term, suffix leads with empty string\n        floorSuffixLeadStart = -1;\n        termState.termBlockOrd++;\n        floorSuffixLeadEnd = suffixesReader.readByte() & 0xff;\n        if (floorSuffixLeadEnd == 0xff) {\n          floorSuffixLeadEnd = -1;\n          //System.out.println(\"  fill in -1\");\n        }\n        //if (DEBUG) System.out.println(\"    ret: floor prefix term: start=-1 end=\" + floorSuffixLeadEnd);\n        isAutoPrefixTerm = true;\n        return false;\n      case 3:\n        // A floor'd prefix term, suffix leads with real byte\n        if (suffix == 0) {\n          // TODO: this is messy, but necessary because we are an auto-prefix term, but our suffix is the empty string here, so we have to\n          // look at the parent block to get the lead suffix byte:\n          assert ord > 0;\n          IntersectTermsEnumFrame parent = ite.stack[ord-1];\n          floorSuffixLeadStart = parent.suffixBytes[parent.startBytePos+parent.suffix-1] & 0xff;\n          //if (DEBUG) System.out.println(\"    peek-parent: suffix=\" + floorSuffixLeadStart);\n        } else {\n          floorSuffixLeadStart = suffixBytes[startBytePos+suffix-1] & 0xff;\n        }\n        termState.termBlockOrd++;\n        isAutoPrefixTerm = true;\n        floorSuffixLeadEnd = suffixesReader.readByte() & 0xff;\n        //if (DEBUG) System.out.println(\"    ret: floor prefix term start=\" + floorSuffixLeadStart + \" end=\" + floorSuffixLeadEnd);\n        return false;\n      default:\n        // Silly javac:\n        assert false;\n        return false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7d165dc88e14a2b2f1cc4ac8133ffdde44acfd5","date":1488285484,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextNonLeaf().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextNonLeaf().mjava","sourceNew":"  public boolean nextNonLeaf() {\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    suffix = code >>> 1;\n    startBytePos = suffixesReader.getPosition();\n    suffixesReader.skipBytes(suffix);\n    if ((code & 1) == 0) {\n      // A normal term\n      termState.termBlockOrd++;\n      return false;\n    } else {\n      // A sub-block; make sub-FP absolute:\n      lastSubFP = fp - suffixesReader.readVLong();\n      return true;\n    }\n  }\n\n","sourceOld":"  public boolean nextNonLeaf() {\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    if (versionAutoPrefix == false) {\n      suffix = code >>> 1;\n      startBytePos = suffixesReader.getPosition();\n      suffixesReader.skipBytes(suffix);\n      if ((code & 1) == 0) {\n        // A normal term\n        termState.termBlockOrd++;\n        return false;\n      } else {\n        // A sub-block; make sub-FP absolute:\n        lastSubFP = fp - suffixesReader.readVLong();\n        return true;\n      }\n    } else {\n      suffix = code >>> 2;\n      startBytePos = suffixesReader.getPosition();\n      suffixesReader.skipBytes(suffix);\n      switch (code & 3) {\n      case 0:\n        // A normal term\n        isAutoPrefixTerm = false;\n        termState.termBlockOrd++;\n        return false;\n      case 1:\n        // A sub-block; make sub-FP absolute:\n        isAutoPrefixTerm = false;\n        lastSubFP = fp - suffixesReader.readVLong();\n        return true;\n      case 2:\n        // A normal prefix term, suffix leads with empty string\n        floorSuffixLeadStart = -1;\n        termState.termBlockOrd++;\n        floorSuffixLeadEnd = suffixesReader.readByte() & 0xff;\n        if (floorSuffixLeadEnd == 0xff) {\n          floorSuffixLeadEnd = -1;\n        }\n        isAutoPrefixTerm = true;\n        return false;\n      case 3:\n        // A floor'd prefix term, suffix leads with real byte\n        if (suffix == 0) {\n          // TODO: this is messy, but necessary because we are an auto-prefix term, but our suffix is the empty string here, so we have to\n          // look at the parent block to get the lead suffix byte:\n          assert ord > 0;\n          IntersectTermsEnumFrame parent = ite.stack[ord-1];\n          floorSuffixLeadStart = parent.suffixBytes[parent.startBytePos+parent.suffix-1] & 0xff;\n        } else {\n          floorSuffixLeadStart = suffixBytes[startBytePos+suffix-1] & 0xff;\n        }\n        termState.termBlockOrd++;\n        isAutoPrefixTerm = true;\n        floorSuffixLeadEnd = suffixesReader.readByte() & 0xff;\n        return false;\n      default:\n        // Silly javac:\n        assert false;\n        return false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9407318969e8504257b4c5764c65755a043e5404","date":1579873617,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextNonLeaf().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextNonLeaf().mjava","sourceNew":"  public boolean nextNonLeaf() {\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixLengthsReader.readVInt();\n    suffix = code >>> 1;\n    startBytePos = suffixesReader.getPosition();\n    suffixesReader.skipBytes(suffix);\n    if ((code & 1) == 0) {\n      // A normal term\n      termState.termBlockOrd++;\n      return false;\n    } else {\n      // A sub-block; make sub-FP absolute:\n      lastSubFP = fp - suffixLengthsReader.readVLong();\n      return true;\n    }\n  }\n\n","sourceOld":"  public boolean nextNonLeaf() {\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    final int code = suffixesReader.readVInt();\n    suffix = code >>> 1;\n    startBytePos = suffixesReader.getPosition();\n    suffixesReader.skipBytes(suffix);\n    if ((code & 1) == 0) {\n      // A normal term\n      termState.termBlockOrd++;\n      return false;\n    } else {\n      // A sub-block; make sub-FP absolute:\n      lastSubFP = fp - suffixesReader.readVLong();\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f5c96ee46366b5feece8b0b328368c6237fc087a"],"59db5e5f780185e0155d296a323e440a6ecfd3b6":["3e8715d826e588419327562287d5d6a8040d63d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["4d637064d608752565d4f9f41b2497dfdfdde50e","3e8715d826e588419327562287d5d6a8040d63d6"],"9407318969e8504257b4c5764c65755a043e5404":["b7d165dc88e14a2b2f1cc4ac8133ffdde44acfd5"],"3e8715d826e588419327562287d5d6a8040d63d6":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"f5c96ee46366b5feece8b0b328368c6237fc087a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7d165dc88e14a2b2f1cc4ac8133ffdde44acfd5":["59db5e5f780185e0155d296a323e440a6ecfd3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9407318969e8504257b4c5764c65755a043e5404"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"59db5e5f780185e0155d296a323e440a6ecfd3b6":["b7d165dc88e14a2b2f1cc4ac8133ffdde44acfd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","f5c96ee46366b5feece8b0b328368c6237fc087a"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"9407318969e8504257b4c5764c65755a043e5404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f5c96ee46366b5feece8b0b328368c6237fc087a":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"3e8715d826e588419327562287d5d6a8040d63d6":["59db5e5f780185e0155d296a323e440a6ecfd3b6","d2638f781be724518ff6c2263d14a48cf6e68017"],"b7d165dc88e14a2b2f1cc4ac8133ffdde44acfd5":["9407318969e8504257b4c5764c65755a043e5404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}