{"path":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","commits":[{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sGen = params.get(GENERATION);\n      if (sGen != null) indexGen = Long.parseLong(sGen);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n  \n        //if if is a conf file read from config diectory\n        file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexGen != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexGen, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sGen = params.get(GENERATION);\n      if (sGen != null) indexGen = Long.parseLong(sGen);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexGen != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexGen, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sGen = params.get(GENERATION);\n      if (sGen != null) indexGen = Long.parseLong(sGen);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n  \n        //if if is a conf file read from config diectory\n        file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexGen != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexGen, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sGen = params.get(GENERATION);\n      if (sGen != null) indexGen = Long.parseLong(sGen);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexGen != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexGen, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","sourceNew":"    @Override\n    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sGen = params.get(GENERATION);\n      if (sGen != null) indexGen = Long.parseLong(sGen);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n  \n        //if if is a conf file read from config diectory\n        file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexGen != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexGen, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sGen = params.get(GENERATION);\n      if (sGen != null) indexGen = Long.parseLong(sGen);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n  \n        //if if is a conf file read from config diectory\n        file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexGen != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexGen, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","sourceNew":"    @Override\n    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sGen = params.get(GENERATION);\n      if (sGen != null) indexGen = Long.parseLong(sGen);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n  \n        //if if is a conf file read from config diectory\n        file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexGen != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexGen, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sGen = params.get(GENERATION);\n      if (sGen != null) indexGen = Long.parseLong(sGen);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n  \n        //if if is a conf file read from config diectory\n        file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexGen != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexGen, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a2d81cf6955f09cda03ed448bb9bb397d4b9742","date":1411570057,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","sourceNew":"    @Override\n    public void write(OutputStream out) throws IOException {\n      createOutputStream(out);\n      FileInputStream inputStream = null;\n      try {\n        initWrite();\n  \n        //if if is a conf file read from config diectory\n        File file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothingAndFlush();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n          }\n        } else {\n          writeNothingAndFlush();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n        releaseCommitPointAndExtendReserve();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sGen = params.get(GENERATION);\n      if (sGen != null) indexGen = Long.parseLong(sGen);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n  \n        //if if is a conf file read from config diectory\n        file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexGen != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexGen, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dea8e36e8c36d610840396c282a5affe3f722f4e","date":1422297045,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","sourceNew":"    @Override\n    public void write(OutputStream out) throws IOException {\n      createOutputStream(out);\n      FileInputStream inputStream = null;\n      try {\n        initWrite();\n\n        //if if is a conf file read from config directory\n        File file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothingAndFlush();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n          }\n        } else {\n          writeNothingAndFlush();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n        releaseCommitPointAndExtendReserve();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(OutputStream out) throws IOException {\n      createOutputStream(out);\n      FileInputStream inputStream = null;\n      try {\n        initWrite();\n  \n        //if if is a conf file read from config diectory\n        File file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothingAndFlush();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n          }\n        } else {\n          writeNothingAndFlush();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n        releaseCommitPointAndExtendReserve();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","sourceNew":"    @Override\n    public void write(OutputStream out) throws IOException {\n      createOutputStream(out);\n      FileInputStream inputStream = null;\n      try {\n        initWrite();\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothingAndFlush();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n          }\n        } else {\n          writeNothingAndFlush();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n        releaseCommitPointAndExtendReserve();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(OutputStream out) throws IOException {\n      createOutputStream(out);\n      FileInputStream inputStream = null;\n      try {\n        initWrite();\n\n        //if if is a conf file read from config directory\n        File file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothingAndFlush();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n          }\n        } else {\n          writeNothingAndFlush();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n        releaseCommitPointAndExtendReserve();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"016b6925925785877da3496ebb08189655bbc9e6","date":1433994025,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","sourceNew":"    @Override\n    public void write(OutputStream out) throws IOException {\n      createOutputStream(out);\n      FileInputStream inputStream = null;\n      try {\n        initWrite();\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothingAndFlush();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n          }\n        } else {\n          writeNothingAndFlush();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n        extendReserveAndReleaseCommitPoint();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(OutputStream out) throws IOException {\n      createOutputStream(out);\n      FileInputStream inputStream = null;\n      try {\n        initWrite();\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothingAndFlush();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n          }\n        } else {\n          writeNothingAndFlush();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n        releaseCommitPointAndExtendReserve();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac35531329b1809368fb0780bcf1e72d0add3c21","date":1525474926,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","sourceNew":"    @Override\n    public void write(OutputStream out) throws IOException {\n      createOutputStream(out);\n      FileInputStream inputStream = null;\n      try {\n        initWrite();\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothingAndFlush();\n              fos.close(); // we close because DeflaterOutputStream requires a close call, but but the request outputstream is protected\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n          }\n        } else {\n          writeNothingAndFlush();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n        extendReserveAndReleaseCommitPoint();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(OutputStream out) throws IOException {\n      createOutputStream(out);\n      FileInputStream inputStream = null;\n      try {\n        initWrite();\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothingAndFlush();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n          }\n        } else {\n          writeNothingAndFlush();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n        extendReserveAndReleaseCommitPoint();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","sourceNew":"    @Override\n    public void write(OutputStream out) throws IOException {\n      createOutputStream(out);\n      FileInputStream inputStream = null;\n      try {\n        initWrite();\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothingAndFlush();\n              fos.close(); // we close because DeflaterOutputStream requires a close call, but but the request outputstream is protected\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n          }\n        } else {\n          writeNothingAndFlush();\n        }\n      } catch (IOException e) {\n        log.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n        extendReserveAndReleaseCommitPoint();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(OutputStream out) throws IOException {\n      createOutputStream(out);\n      FileInputStream inputStream = null;\n      try {\n        initWrite();\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothingAndFlush();\n              fos.close(); // we close because DeflaterOutputStream requires a close call, but but the request outputstream is protected\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n          }\n        } else {\n          writeNothingAndFlush();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n        extendReserveAndReleaseCommitPoint();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","sourceNew":"    @Override\n    public void write(OutputStream out) throws IOException {\n      createOutputStream(out);\n      FileInputStream inputStream = null;\n      try {\n        initWrite();\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothingAndFlush();\n              fos.close(); // we close because DeflaterOutputStream requires a close call, but but the request outputstream is protected\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n          }\n        } else {\n          writeNothingAndFlush();\n        }\n      } catch (IOException e) {\n        log.warn(\"Exception while writing response for params: {}\", params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n        extendReserveAndReleaseCommitPoint();\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(OutputStream out) throws IOException {\n      createOutputStream(out);\n      FileInputStream inputStream = null;\n      try {\n        initWrite();\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothingAndFlush();\n              fos.close(); // we close because DeflaterOutputStream requires a close call, but but the request outputstream is protected\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n          }\n        } else {\n          writeNothingAndFlush();\n        }\n      } catch (IOException e) {\n        log.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n        extendReserveAndReleaseCommitPoint();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d9405f486872f1e416304dfe389741f4ee2f8a4d","7530de27b87b961b51f01bd1299b7004d46e8823"],"ac35531329b1809368fb0780bcf1e72d0add3c21":["016b6925925785877da3496ebb08189655bbc9e6"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["dea8e36e8c36d610840396c282a5affe3f722f4e"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["5a2d81cf6955f09cda03ed448bb9bb397d4b9742"],"5a2d81cf6955f09cda03ed448bb9bb397d4b9742":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"016b6925925785877da3496ebb08189655bbc9e6":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"f2126b84bd093fa3d921582a109a0ee578c28126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["ac35531329b1809368fb0780bcf1e72d0add3c21"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f2126b84bd093fa3d921582a109a0ee578c28126","7530de27b87b961b51f01bd1299b7004d46e8823"],"ac35531329b1809368fb0780bcf1e72d0add3c21":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["016b6925925785877da3496ebb08189655bbc9e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a2d81cf6955f09cda03ed448bb9bb397d4b9742":["dea8e36e8c36d610840396c282a5affe3f722f4e"],"016b6925925785877da3496ebb08189655bbc9e6":["ac35531329b1809368fb0780bcf1e72d0add3c21"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","5a2d81cf6955f09cda03ed448bb9bb397d4b9742"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}