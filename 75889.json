{"path":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","commits":[{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merges the given {@link DocValues} into this {@link DocValuesConsumer}.\n   * \n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(DocValues reader, int docBase, int docCount, Bits liveDocs) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = reader.getDirectSource();\n    assert source != null;\n    int docID = docBase;\n    final DocValues.Type type = reader.type();\n    final Field scratchField;\n    switch(type) {\n    case VAR_INTS:\n      scratchField = new DocValuesField(\"\", (long) 0, type);\n      break;\n    case FIXED_INTS_16:\n      scratchField = new DocValuesField(\"\", (short) 0, type);\n      break;\n    case FIXED_INTS_32:\n      scratchField = new DocValuesField(\"\", 0, type);\n      break;\n    case FIXED_INTS_64:\n      scratchField = new DocValuesField(\"\", (long) 0, type);\n      break;\n    case FIXED_INTS_8:\n      scratchField = new DocValuesField(\"\", (byte) 0, type);\n      break;\n    case FLOAT_32:\n      scratchField = new DocValuesField(\"\", (float) 0, type);\n      break;\n    case FLOAT_64:\n      scratchField = new DocValuesField(\"\", (double) 0, type);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n      scratchField = new DocValuesField(\"\", new BytesRef(), type);\n      break;\n    default:\n      assert false;\n      scratchField = null;\n    }\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(scratchField, source, docID++, i);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","sourceNew":"  /**\n   * Merges the given {@link DocValues} into this {@link DocValuesConsumer}.\n   * \n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(DocValues reader, int docBase, int docCount, Bits liveDocs) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = reader.getDirectSource();\n    assert source != null;\n    int docID = docBase;\n    final DocValues.Type type = reader.type();\n    final Field scratchField;\n    switch(type) {\n    case VAR_INTS:\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n      scratchField = new DocValuesField(\"\", (long) 0, type);\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField = new DocValuesField(\"\", (double) 0, type);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n      scratchField = new DocValuesField(\"\", new BytesRef(), type);\n      break;\n    default:\n      assert false;\n      scratchField = null;\n    }\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(scratchField, source, docID++, i);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link DocValues} into this {@link DocValuesConsumer}.\n   * \n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(DocValues reader, int docBase, int docCount, Bits liveDocs) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = reader.getDirectSource();\n    assert source != null;\n    int docID = docBase;\n    final DocValues.Type type = reader.type();\n    final Field scratchField;\n    switch(type) {\n    case VAR_INTS:\n      scratchField = new DocValuesField(\"\", (long) 0, type);\n      break;\n    case FIXED_INTS_16:\n      scratchField = new DocValuesField(\"\", (short) 0, type);\n      break;\n    case FIXED_INTS_32:\n      scratchField = new DocValuesField(\"\", 0, type);\n      break;\n    case FIXED_INTS_64:\n      scratchField = new DocValuesField(\"\", (long) 0, type);\n      break;\n    case FIXED_INTS_8:\n      scratchField = new DocValuesField(\"\", (byte) 0, type);\n      break;\n    case FLOAT_32:\n      scratchField = new DocValuesField(\"\", (float) 0, type);\n      break;\n    case FLOAT_64:\n      scratchField = new DocValuesField(\"\", (double) 0, type);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n      scratchField = new DocValuesField(\"\", new BytesRef(), type);\n      break;\n    default:\n      assert false;\n      scratchField = null;\n    }\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(scratchField, source, docID++, i);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(DocValues,int,int,Bits).mjava","sourceNew":"  /**\n   * Merges the given {@link DocValues} into this {@link DocValuesConsumer}.\n   * \n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(DocValues reader, int docBase, int docCount, Bits liveDocs) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = reader.getDirectSource();\n    assert source != null;\n    int docID = docBase;\n    final DocValues.Type type = reader.type();\n    final Field scratchField;\n    switch(type) {\n    case VAR_INTS:\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n      scratchField = new DocValuesField(\"\", (long) 0, type);\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField = new DocValuesField(\"\", (double) 0, type);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n      scratchField = new DocValuesField(\"\", new BytesRef(), type);\n      break;\n    default:\n      assert false;\n      scratchField = null;\n    }\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(scratchField, source, docID++, i);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link DocValues} into this {@link DocValuesConsumer}.\n   * \n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(DocValues reader, int docBase, int docCount, Bits liveDocs) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = reader.getDirectSource();\n    assert source != null;\n    int docID = docBase;\n    final DocValues.Type type = reader.type();\n    final Field scratchField;\n    switch(type) {\n    case VAR_INTS:\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n      scratchField = new DocValuesField(\"\", (long) 0, type);\n      break;\n    case FLOAT_32:\n    case FLOAT_64:\n      scratchField = new DocValuesField(\"\", (double) 0, type);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n      scratchField = new DocValuesField(\"\", new BytesRef(), type);\n      break;\n    default:\n      assert false;\n      scratchField = null;\n    }\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(scratchField, source, docID++, i);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["fa0f44f887719e97183771e977cfc4bfb485b766"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa0f44f887719e97183771e977cfc4bfb485b766"],"fa0f44f887719e97183771e977cfc4bfb485b766":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}