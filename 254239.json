{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#lockTask(ZkNodeProps,OverseerTaskProcessor.TaskBatch).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#lockTask(ZkNodeProps,OverseerTaskProcessor.TaskBatch).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#lockTask(ZkNodeProps,OverseerTaskProcessor.TaskBatch).mjava","sourceNew":"  @Override\n  public Lock lockTask(ZkNodeProps message, OverseerTaskProcessor.TaskBatch taskBatch) {\n    if (lockSession == null || sessionId != taskBatch.getId()) {\n      //this is always called in the same thread.\n      //Each batch is supposed to have a new taskBatch\n      //So if taskBatch changes we must create a new Session\n      // also check if the running tasks are empty. If yes, clear lockTree\n      // this will ensure that locks are not 'leaked'\n      if(taskBatch.getRunningTasks() == 0) lockTree.clear();\n      lockSession = lockTree.getSession();\n    }\n    return lockSession.lock(getCollectionAction(message.getStr(Overseer.QUEUE_OPERATION)),\n        Arrays.asList(\n            getTaskKey(message),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            message.getStr(ZkStateReader.REPLICA_PROP))\n\n    );\n  }\n\n","sourceOld":"  @Override\n  public Lock lockTask(ZkNodeProps message, OverseerTaskProcessor.TaskBatch taskBatch) {\n    if (lockSession == null || sessionId != taskBatch.getId()) {\n      //this is always called in the same thread.\n      //Each batch is supposed to have a new taskBatch\n      //So if taskBatch changes we must create a new Session\n      // also check if the running tasks are empty. If yes, clear lockTree\n      // this will ensure that locks are not 'leaked'\n      if(taskBatch.getRunningTasks() == 0) lockTree.clear();\n      lockSession = lockTree.getSession();\n    }\n    return lockSession.lock(getCollectionAction(message.getStr(Overseer.QUEUE_OPERATION)),\n        Arrays.asList(\n            getTaskKey(message),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            message.getStr(ZkStateReader.REPLICA_PROP))\n\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#lockTask(ZkNodeProps,OverseerTaskProcessor.TaskBatch).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#lockTask(ZkNodeProps,OverseerTaskProcessor.TaskBatch).mjava","sourceNew":"  @Override\n  public Lock lockTask(ZkNodeProps message, OverseerTaskProcessor.TaskBatch taskBatch) {\n    if (lockSession == null || sessionId != taskBatch.getId()) {\n      //this is always called in the same thread.\n      //Each batch is supposed to have a new taskBatch\n      //So if taskBatch changes we must create a new Session\n      // also check if the running tasks are empty. If yes, clear lockTree\n      // this will ensure that locks are not 'leaked'\n      if(taskBatch.getRunningTasks() == 0) lockTree.clear();\n      lockSession = lockTree.getSession();\n    }\n    return lockSession.lock(getCollectionAction(message.getStr(Overseer.QUEUE_OPERATION)),\n        Arrays.asList(\n            getTaskKey(message),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            message.getStr(ZkStateReader.REPLICA_PROP))\n\n    );\n  }\n\n","sourceOld":"  @Override\n  public Lock lockTask(ZkNodeProps message, OverseerTaskProcessor.TaskBatch taskBatch) {\n    if (lockSession == null || sessionId != taskBatch.getId()) {\n      //this is always called in the same thread.\n      //Each batch is supposed to have a new taskBatch\n      //So if taskBatch changes we must create a new Session\n      // also check if the running tasks are empty. If yes, clear lockTree\n      // this will ensure that locks are not 'leaked'\n      if(taskBatch.getRunningTasks() == 0) lockTree.clear();\n      lockSession = lockTree.getSession();\n    }\n    return lockSession.lock(getCollectionAction(message.getStr(Overseer.QUEUE_OPERATION)),\n        Arrays.asList(\n            getTaskKey(message),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            message.getStr(ZkStateReader.REPLICA_PROP))\n\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98b85aeea4d572e94fd5e6ba67043b5b363f1380","date":1592921806,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#lockTask(ZkNodeProps,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#lockTask(ZkNodeProps,OverseerTaskProcessor.TaskBatch).mjava","sourceNew":"  /**\n   * Grabs an exclusive lock for this particular task.\n   * @return <code>null</code> if locking is not possible. When locking is not possible, it will remain\n   * impossible for the passed value of <code>batchSessionId</code>. This is to guarantee tasks are executed\n   * in queue order (and a later task is not run earlier than its turn just because it happens that a lock got released).\n   */\n  @Override\n  public Lock lockTask(ZkNodeProps message, long batchSessionId) {\n    if (sessionId != batchSessionId) {\n      //this is always called in the same thread.\n      //Each batch is supposed to have a new taskBatch\n      //So if taskBatch changes we must create a new Session\n      lockSession = lockTree.getSession();\n      sessionId = batchSessionId;\n    }\n\n    return lockSession.lock(getCollectionAction(message.getStr(Overseer.QUEUE_OPERATION)),\n        Arrays.asList(\n            getTaskKey(message),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            message.getStr(ZkStateReader.REPLICA_PROP))\n    );\n  }\n\n","sourceOld":"  @Override\n  public Lock lockTask(ZkNodeProps message, OverseerTaskProcessor.TaskBatch taskBatch) {\n    if (lockSession == null || sessionId != taskBatch.getId()) {\n      //this is always called in the same thread.\n      //Each batch is supposed to have a new taskBatch\n      //So if taskBatch changes we must create a new Session\n      // also check if the running tasks are empty. If yes, clear lockTree\n      // this will ensure that locks are not 'leaked'\n      if(taskBatch.getRunningTasks() == 0) lockTree.clear();\n      lockSession = lockTree.getSession();\n    }\n    return lockSession.lock(getCollectionAction(message.getStr(Overseer.QUEUE_OPERATION)),\n        Arrays.asList(\n            getTaskKey(message),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            message.getStr(ZkStateReader.REPLICA_PROP))\n\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"98b85aeea4d572e94fd5e6ba67043b5b363f1380":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98b85aeea4d572e94fd5e6ba67043b5b363f1380"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["98b85aeea4d572e94fd5e6ba67043b5b363f1380"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"98b85aeea4d572e94fd5e6ba67043b5b363f1380":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}