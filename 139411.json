{"path":"lucene/backwards/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","pathOld":"backwards/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","sourceNew":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    double [] doubles;\n    int [] ints;\n\n    doubles = cache.getDoubles(readerA, \"theDouble\");\n    doubles = cache.getDoubles(readerA, \"theDouble\", \n                               FieldCache.DEFAULT_DOUBLE_PARSER);\n    doubles = cache.getDoubles(readerB, \"theDouble\", \n                               FieldCache.DEFAULT_DOUBLE_PARSER);\n\n    ints = cache.getInts(readerX, \"theInt\");\n    ints = cache.getInts(readerX, \"theInt\", \n                         FieldCache.DEFAULT_INT_PARSER);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    double [] doubles;\n    int [] ints;\n\n    doubles = cache.getDoubles(readerA, \"theDouble\");\n    doubles = cache.getDoubles(readerA, \"theDouble\", \n                               FieldCache.DEFAULT_DOUBLE_PARSER);\n    doubles = cache.getDoubles(readerB, \"theDouble\", \n                               FieldCache.DEFAULT_DOUBLE_PARSER);\n\n    ints = cache.getInts(readerX, \"theInt\");\n    ints = cache.getInts(readerX, \"theInt\", \n                         FieldCache.DEFAULT_INT_PARSER);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testSanity().mjava","sourceNew":null,"sourceOld":"  public void testSanity() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    double [] doubles;\n    int [] ints;\n\n    doubles = cache.getDoubles(readerA, \"theDouble\");\n    doubles = cache.getDoubles(readerA, \"theDouble\", \n                               FieldCache.DEFAULT_DOUBLE_PARSER);\n    doubles = cache.getDoubles(readerB, \"theDouble\", \n                               FieldCache.DEFAULT_DOUBLE_PARSER);\n\n    ints = cache.getInts(readerX, \"theInt\");\n    ints = cache.getInts(readerX, \"theInt\", \n                         FieldCache.DEFAULT_INT_PARSER);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n    \n    if (0 < insanity.length)\n      dumpArray(getTestLabel() + \" INSANITY\", insanity, System.err);\n\n    assertEquals(\"shouldn't be any cache insanity\", 0, insanity.length);\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}