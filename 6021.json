{"path":"solr/src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","pathOld":"/dev/null","sourceNew":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      do {\n        actualTerm = termEnum.term();\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        String currentField = actualTerm.field();\n\n        // if the next word doesn't have the same field return false\n        if (currentField != field) {   // intern'd comparison\n          actualTerm = null;\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        if (isFrequent(actualTerm)) {\n          return true;\n        }\n\n        // term not up to threshold\n        try {\n          termEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n      } while (true);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","sourceNew":null,"sourceOld":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      do {\n        actualTerm = termEnum.term();\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        String currentField = actualTerm.field();\n\n        // if the next word doesn't have the same field return false\n        if (currentField != field) {   // intern'd comparison\n          actualTerm = null;\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        if (isFrequent(actualTerm)) {\n          return true;\n        }\n\n        // term not up to threshold\n        try {\n          termEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n      } while (true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","pathOld":"src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      do {\n        actualTerm = termEnum.term();\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        String currentField = actualTerm.field();\n\n        // if the next word doesn't have the same field return false\n        if (currentField != field) {   // intern'd comparison\n          actualTerm = null;\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        if (isFrequent(actualTerm)) {\n          return true;\n        }\n\n        // term not up to threshold\n        try {\n          termEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n      } while (true);\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      do {\n        actualTerm = termEnum.term();\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        String currentField = actualTerm.field();\n\n        // if the next word doesn't have the same field return false\n        if (currentField != field) {   // intern'd comparison\n          actualTerm = null;\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        if (isFrequent(actualTerm)) {\n          return true;\n        }\n\n        // term not up to threshold\n        try {\n          termEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n      } while (true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","pathOld":"/dev/null","sourceNew":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      do {\n        actualTerm = termEnum.term();\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        String currentField = actualTerm.field();\n\n        // if the next word doesn't have the same field return false\n        if (currentField != field) {   // intern'd comparison\n          actualTerm = null;\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        if (isFrequent(actualTerm)) {\n          return true;\n        }\n\n        // term not up to threshold\n        try {\n          termEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n      } while (true);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","pathOld":"solr/src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      if (termsEnum == null) {\n        return false;\n      }\n\n      while(true) {\n\n        try {\n          actualTerm = termsEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        if (isFrequent(termsEnum.docFreq())) {\n          return true;\n        }\n      }\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      do {\n        actualTerm = termEnum.term();\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        String currentField = actualTerm.field();\n\n        // if the next word doesn't have the same field return false\n        if (currentField != field) {   // intern'd comparison\n          actualTerm = null;\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        if (isFrequent(actualTerm)) {\n          return true;\n        }\n\n        // term not up to threshold\n        try {\n          termEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n      } while (true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","pathOld":"solr/src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      if (termsEnum == null) {\n        return false;\n      }\n\n      while(true) {\n\n        try {\n          actualTerm = termsEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        if (isFrequent(termsEnum.docFreq())) {\n          return true;\n        }\n      }\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      do {\n        actualTerm = termEnum.term();\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        String currentField = actualTerm.field();\n\n        // if the next word doesn't have the same field return false\n        if (currentField != field) {   // intern'd comparison\n          actualTerm = null;\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        if (isFrequent(actualTerm)) {\n          return true;\n        }\n\n        // term not up to threshold\n        try {\n          termEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n      } while (true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","pathOld":"solr/src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      if (termsEnum == null) {\n        return false;\n      }\n\n      while(true) {\n\n        try {\n          actualTerm = termsEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        try {\n          if (isFrequent(termsEnum.docFreq())) {\n            return true;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      if (termsEnum == null) {\n        return false;\n      }\n\n      while(true) {\n\n        try {\n          actualTerm = termsEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        if (isFrequent(termsEnum.docFreq())) {\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","pathOld":"solr/src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      if (termsEnum == null) {\n        return false;\n      }\n\n      while(true) {\n\n        try {\n          actualTerm = termsEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        try {\n          if (isFrequent(termsEnum.docFreq())) {\n            return true;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      if (termsEnum == null) {\n        return false;\n      }\n\n      while(true) {\n\n        try {\n          actualTerm = termsEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        if (isFrequent(termsEnum.docFreq())) {\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","pathOld":"solr/src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      if (termsEnum == null) {\n        return false;\n      }\n\n      while(true) {\n\n        try {\n          actualTerm = termsEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        try {\n          if (isFrequent(termsEnum.docFreq())) {\n            return true;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      if (termsEnum == null) {\n        return false;\n      }\n\n      while(true) {\n\n        try {\n          actualTerm = termsEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        if (isFrequent(termsEnum.docFreq())) {\n          return true;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","pathOld":"solr/src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      if (termsEnum == null) {\n        return false;\n      }\n\n      while(true) {\n\n        try {\n          actualTerm = termsEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        try {\n          if (isFrequent(termsEnum.docFreq())) {\n            return true;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      if (termsEnum == null) {\n        return false;\n      }\n\n      while(true) {\n\n        try {\n          actualTerm = termsEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        try {\n          if (isFrequent(termsEnum.docFreq())) {\n            return true;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","pathOld":"solr/src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      if (termsEnum == null) {\n        return false;\n      }\n\n      while(true) {\n\n        try {\n          actualTerm = termsEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        try {\n          if (isFrequent(termsEnum.docFreq())) {\n            return true;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      if (termsEnum == null) {\n        return false;\n      }\n\n      while(true) {\n\n        try {\n          actualTerm = termsEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        try {\n          if (isFrequent(termsEnum.docFreq())) {\n            return true;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","pathOld":"solr/src/java/org/apache/solr/util/HighFrequencyDictionary.HighFrequencyIterator#hasNext().mjava","sourceNew":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      if (termsEnum == null) {\n        return false;\n      }\n\n      while(true) {\n\n        try {\n          actualTerm = termsEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        try {\n          if (isFrequent(termsEnum.docFreq())) {\n            return true;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    }\n\n","sourceOld":"    public boolean hasNext() {\n      if (hasNextCalled) {\n        return actualTerm != null;\n      }\n      hasNextCalled = true;\n\n      if (termsEnum == null) {\n        return false;\n      }\n\n      while(true) {\n\n        try {\n          actualTerm = termsEnum.next();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n\n        // if there are no words return false\n        if (actualTerm == null) {\n          return false;\n        }\n\n        // got a valid term, does it pass the threshold?\n        try {\n          if (isFrequent(termsEnum.docFreq())) {\n            return true;\n          }\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e230a61047bc041516c811baa08a7174d6f8322a":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","28427ef110c4c5bf5b4057731b83110bd1e13724"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["5f4e87790277826a2aea119328600dfb07761f32","b1add9ddc0005b07550d4350720aac22dc9886b3"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["b1add9ddc0005b07550d4350720aac22dc9886b3","e230a61047bc041516c811baa08a7174d6f8322a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["28427ef110c4c5bf5b4057731b83110bd1e13724","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e230a61047bc041516c811baa08a7174d6f8322a"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["29ef99d61cda9641b6250bf9567329a6e65f901d","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"e230a61047bc041516c811baa08a7174d6f8322a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["e230a61047bc041516c811baa08a7174d6f8322a","e79a6d080bdd5b2a8f56342cf571b5476de04180","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","29ef99d61cda9641b6250bf9567329a6e65f901d"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"1da8d55113b689b06716246649de6f62430f15c0":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","b1add9ddc0005b07550d4350720aac22dc9886b3","29ef99d61cda9641b6250bf9567329a6e65f901d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}