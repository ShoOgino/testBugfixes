{"path":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#injectServers(Properties,String,String).mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#injectServers(Properties,String,String).mjava","pathOld":"/dev/null","sourceNew":"  // Adds server.x if they don't exist, based on zkHost if it does exist.\n  // Given zkHost=localhost:1111,localhost:2222 this will inject\n  // server.0=localhost:1112:1113\n  // server.1=localhost:2223:2224\n  public static void injectServers(Properties props, String zkRun, String zkHost) {\n\n    // if clientPort not already set, use zkRun\n    if (zkRun != null && props.getProperty(\"clientPort\")==null) {\n      int portIdx = zkRun.lastIndexOf(':');\n      if (portIdx > 0) {\n        String portStr = zkRun.substring(portIdx+1);\n        props.setProperty(\"clientPort\", portStr);\n      }\n    }\n\n    boolean hasServers = hasServers(props);\n\n    if (!hasServers && zkHost != null) {\n      int alg = Integer.parseInt(props.getProperty(\"electionAlg\",\"3\").trim());\n      String[] hosts = zkHost.split(\",\");\n      int serverNum = 0;\n      for (String hostAndPort : hosts) {\n        hostAndPort = hostAndPort.trim();\n        int portIdx = hostAndPort.lastIndexOf(':');\n        String clientPortStr = hostAndPort.substring(portIdx+1);\n        int clientPort = Integer.parseInt(clientPortStr);\n        String host = hostAndPort.substring(0,portIdx);\n\n        String serverStr = host + ':' + (clientPort+1);\n        // zk leader election algorithms other than 0 need an extra port for leader election.\n        if (alg != 0) {\n          serverStr = serverStr + ':' + (clientPort+2);\n        }\n\n        props.setProperty(\"server.\"+serverNum, serverStr);\n        serverNum++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#injectServers(Properties,String,String).mjava","pathOld":"/dev/null","sourceNew":"  // Adds server.x if they don't exist, based on zkHost if it does exist.\n  // Given zkHost=localhost:1111,localhost:2222 this will inject\n  // server.0=localhost:1112:1113\n  // server.1=localhost:2223:2224\n  public static void injectServers(Properties props, String zkRun, String zkHost) {\n\n    // if clientPort not already set, use zkRun\n    if (zkRun != null && props.getProperty(\"clientPort\")==null) {\n      int portIdx = zkRun.lastIndexOf(':');\n      if (portIdx > 0) {\n        String portStr = zkRun.substring(portIdx+1);\n        props.setProperty(\"clientPort\", portStr);\n      }\n    }\n\n    boolean hasServers = hasServers(props);\n\n    if (!hasServers && zkHost != null) {\n      int alg = Integer.parseInt(props.getProperty(\"electionAlg\",\"3\").trim());\n      String[] hosts = zkHost.split(\",\");\n      int serverNum = 0;\n      for (String hostAndPort : hosts) {\n        hostAndPort = hostAndPort.trim();\n        int portIdx = hostAndPort.lastIndexOf(':');\n        String clientPortStr = hostAndPort.substring(portIdx+1);\n        int clientPort = Integer.parseInt(clientPortStr);\n        String host = hostAndPort.substring(0,portIdx);\n\n        String serverStr = host + ':' + (clientPort+1);\n        // zk leader election algorithms other than 0 need an extra port for leader election.\n        if (alg != 0) {\n          serverStr = serverStr + ':' + (clientPort+2);\n        }\n\n        props.setProperty(\"server.\"+serverNum, serverStr);\n        serverNum++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#injectServers(Properties,String,String).mjava","pathOld":"/dev/null","sourceNew":"  // Adds server.x if they don't exist, based on zkHost if it does exist.\n  // Given zkHost=localhost:1111,localhost:2222 this will inject\n  // server.0=localhost:1112:1113\n  // server.1=localhost:2223:2224\n  public static void injectServers(Properties props, String zkRun, String zkHost) {\n\n    // if clientPort not already set, use zkRun\n    if (zkRun != null && props.getProperty(\"clientPort\")==null) {\n      int portIdx = zkRun.lastIndexOf(':');\n      if (portIdx > 0) {\n        String portStr = zkRun.substring(portIdx+1);\n        props.setProperty(\"clientPort\", portStr);\n      }\n    }\n\n    boolean hasServers = hasServers(props);\n\n    if (!hasServers && zkHost != null) {\n      int alg = Integer.parseInt(props.getProperty(\"electionAlg\",\"3\").trim());\n      String[] hosts = zkHost.split(\",\");\n      int serverNum = 0;\n      for (String hostAndPort : hosts) {\n        hostAndPort = hostAndPort.trim();\n        int portIdx = hostAndPort.lastIndexOf(':');\n        String clientPortStr = hostAndPort.substring(portIdx+1);\n        int clientPort = Integer.parseInt(clientPortStr);\n        String host = hostAndPort.substring(0,portIdx);\n\n        String serverStr = host + ':' + (clientPort+1);\n        // zk leader election algorithms other than 0 need an extra port for leader election.\n        if (alg != 0) {\n          serverStr = serverStr + ':' + (clientPort+2);\n        }\n\n        props.setProperty(\"server.\"+serverNum, serverStr);\n        serverNum++;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#injectServers(Properties,String,String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#injectServers(Properties,String,String).mjava","sourceNew":"  // Adds server.x if they don't exist, based on zkHost if it does exist.\n  // Given zkHost=localhost:1111,localhost:2222 this will inject\n  // server.0=localhost:1112:1113\n  // server.1=localhost:2223:2224\n  public static void injectServers(Properties props, String zkRun, String zkHost) {\n\n    // if clientPort not already set, use zkRun\n    if (zkRun != null && props.getProperty(\"clientPort\")==null) {\n      int portIdx = zkRun.lastIndexOf(':');\n      if (portIdx > 0) {\n        String portStr = zkRun.substring(portIdx+1);\n        props.setProperty(\"clientPort\", portStr);\n      }\n    }\n\n    boolean hasServers = hasServers(props);\n\n    if (!hasServers && zkHost != null) {\n      int alg = Integer.parseInt(props.getProperty(\"electionAlg\",\"3\").trim());\n      String[] hosts = zkHost.split(\",\");\n      int serverNum = 0;\n      for (String hostAndPort : hosts) {\n        hostAndPort = hostAndPort.trim();\n        int portIdx = hostAndPort.lastIndexOf(':');\n        String clientPortStr = hostAndPort.substring(portIdx+1);\n        int clientPort = Integer.parseInt(clientPortStr);\n        String host = hostAndPort.substring(0,portIdx);\n\n        String serverStr = host + ':' + (clientPort+1);\n        // zk leader election algorithms other than 0 need an extra port for leader election.\n        if (alg != 0) {\n          serverStr = serverStr + ':' + (clientPort+2);\n        }\n\n        props.setProperty(\"server.\"+serverNum, serverStr);\n        serverNum++;\n      }\n    }\n  }\n\n","sourceOld":"  // Adds server.x if they don't exist, based on zkHost if it does exist.\n  // Given zkHost=localhost:1111,localhost:2222 this will inject\n  // server.0=localhost:1112:1113\n  // server.1=localhost:2223:2224\n  public static void injectServers(Properties props, String zkRun, String zkHost) {\n\n    // if clientPort not already set, use zkRun\n    if (zkRun != null && props.getProperty(\"clientPort\")==null) {\n      int portIdx = zkRun.lastIndexOf(':');\n      if (portIdx > 0) {\n        String portStr = zkRun.substring(portIdx+1);\n        props.setProperty(\"clientPort\", portStr);\n      }\n    }\n\n    boolean hasServers = hasServers(props);\n\n    if (!hasServers && zkHost != null) {\n      int alg = Integer.parseInt(props.getProperty(\"electionAlg\",\"3\").trim());\n      String[] hosts = zkHost.split(\",\");\n      int serverNum = 0;\n      for (String hostAndPort : hosts) {\n        hostAndPort = hostAndPort.trim();\n        int portIdx = hostAndPort.lastIndexOf(':');\n        String clientPortStr = hostAndPort.substring(portIdx+1);\n        int clientPort = Integer.parseInt(clientPortStr);\n        String host = hostAndPort.substring(0,portIdx);\n\n        String serverStr = host + ':' + (clientPort+1);\n        // zk leader election algorithms other than 0 need an extra port for leader election.\n        if (alg != 0) {\n          serverStr = serverStr + ':' + (clientPort+2);\n        }\n\n        props.setProperty(\"server.\"+serverNum, serverStr);\n        serverNum++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#injectServers(Properties,String,String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#injectServers(Properties,String,String).mjava","sourceNew":"  // Adds server.x if they don't exist, based on zkHost if it does exist.\n  // Given zkHost=localhost:1111,localhost:2222 this will inject\n  // server.0=localhost:1112:1113\n  // server.1=localhost:2223:2224\n  public static void injectServers(Properties props, String zkRun, String zkHost) {\n\n    // if clientPort not already set, use zkRun\n    if (zkRun != null && props.getProperty(\"clientPort\")==null) {\n      int portIdx = zkRun.lastIndexOf(':');\n      if (portIdx > 0) {\n        String portStr = zkRun.substring(portIdx+1);\n        props.setProperty(\"clientPort\", portStr);\n      }\n    }\n\n    boolean hasServers = hasServers(props);\n\n    if (!hasServers && zkHost != null) {\n      int alg = Integer.parseInt(props.getProperty(\"electionAlg\",\"3\").trim());\n      String[] hosts = zkHost.split(\",\");\n      int serverNum = 0;\n      for (String hostAndPort : hosts) {\n        hostAndPort = hostAndPort.trim();\n        int portIdx = hostAndPort.lastIndexOf(':');\n        String clientPortStr = hostAndPort.substring(portIdx+1);\n        int clientPort = Integer.parseInt(clientPortStr);\n        String host = hostAndPort.substring(0,portIdx);\n\n        String serverStr = host + ':' + (clientPort+1);\n        // zk leader election algorithms other than 0 need an extra port for leader election.\n        if (alg != 0) {\n          serverStr = serverStr + ':' + (clientPort+2);\n        }\n\n        props.setProperty(\"server.\"+serverNum, serverStr);\n        serverNum++;\n      }\n    }\n  }\n\n","sourceOld":"  // Adds server.x if they don't exist, based on zkHost if it does exist.\n  // Given zkHost=localhost:1111,localhost:2222 this will inject\n  // server.0=localhost:1112:1113\n  // server.1=localhost:2223:2224\n  public static void injectServers(Properties props, String zkRun, String zkHost) {\n\n    // if clientPort not already set, use zkRun\n    if (zkRun != null && props.getProperty(\"clientPort\")==null) {\n      int portIdx = zkRun.lastIndexOf(':');\n      if (portIdx > 0) {\n        String portStr = zkRun.substring(portIdx+1);\n        props.setProperty(\"clientPort\", portStr);\n      }\n    }\n\n    boolean hasServers = hasServers(props);\n\n    if (!hasServers && zkHost != null) {\n      int alg = Integer.parseInt(props.getProperty(\"electionAlg\",\"3\").trim());\n      String[] hosts = zkHost.split(\",\");\n      int serverNum = 0;\n      for (String hostAndPort : hosts) {\n        hostAndPort = hostAndPort.trim();\n        int portIdx = hostAndPort.lastIndexOf(':');\n        String clientPortStr = hostAndPort.substring(portIdx+1);\n        int clientPort = Integer.parseInt(clientPortStr);\n        String host = hostAndPort.substring(0,portIdx);\n\n        String serverStr = host + ':' + (clientPort+1);\n        // zk leader election algorithms other than 0 need an extra port for leader election.\n        if (alg != 0) {\n          serverStr = serverStr + ':' + (clientPort+2);\n        }\n\n        props.setProperty(\"server.\"+serverNum, serverStr);\n        serverNum++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#injectServers(Properties,String,String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#injectServers(Properties,String,String).mjava","sourceNew":"  // Adds server.x if they don't exist, based on zkHost if it does exist.\n  // Given zkHost=localhost:1111,localhost:2222 this will inject\n  // server.0=localhost:1112:1113\n  // server.1=localhost:2223:2224\n  public static void injectServers(Properties props, String zkRun, String zkHost) {\n\n    // if clientPort not already set, use zkRun\n    if (zkRun != null && props.getProperty(\"clientPort\")==null) {\n      int portIdx = zkRun.lastIndexOf(':');\n      if (portIdx > 0) {\n        String portStr = zkRun.substring(portIdx+1);\n        props.setProperty(\"clientPort\", portStr);\n      }\n    }\n\n    boolean hasServers = hasServers(props);\n\n    if (!hasServers && zkHost != null) {\n      int alg = Integer.parseInt(props.getProperty(\"electionAlg\",\"3\").trim());\n      String[] hosts = zkHost.split(\",\");\n      int serverNum = 0;\n      for (String hostAndPort : hosts) {\n        hostAndPort = hostAndPort.trim();\n        int portIdx = hostAndPort.lastIndexOf(':');\n        String clientPortStr = hostAndPort.substring(portIdx+1);\n        int clientPort = Integer.parseInt(clientPortStr);\n        String host = hostAndPort.substring(0,portIdx);\n\n        String serverStr = host + ':' + (clientPort+1);\n        // zk leader election algorithms other than 0 need an extra port for leader election.\n        if (alg != 0) {\n          serverStr = serverStr + ':' + (clientPort+2);\n        }\n\n        props.setProperty(\"server.\"+serverNum, serverStr);\n        serverNum++;\n      }\n    }\n  }\n\n","sourceOld":"  // Adds server.x if they don't exist, based on zkHost if it does exist.\n  // Given zkHost=localhost:1111,localhost:2222 this will inject\n  // server.0=localhost:1112:1113\n  // server.1=localhost:2223:2224\n  public static void injectServers(Properties props, String zkRun, String zkHost) {\n\n    // if clientPort not already set, use zkRun\n    if (zkRun != null && props.getProperty(\"clientPort\")==null) {\n      int portIdx = zkRun.lastIndexOf(':');\n      if (portIdx > 0) {\n        String portStr = zkRun.substring(portIdx+1);\n        props.setProperty(\"clientPort\", portStr);\n      }\n    }\n\n    boolean hasServers = hasServers(props);\n\n    if (!hasServers && zkHost != null) {\n      int alg = Integer.parseInt(props.getProperty(\"electionAlg\",\"3\").trim());\n      String[] hosts = zkHost.split(\",\");\n      int serverNum = 0;\n      for (String hostAndPort : hosts) {\n        hostAndPort = hostAndPort.trim();\n        int portIdx = hostAndPort.lastIndexOf(':');\n        String clientPortStr = hostAndPort.substring(portIdx+1);\n        int clientPort = Integer.parseInt(clientPortStr);\n        String host = hostAndPort.substring(0,portIdx);\n\n        String serverStr = host + ':' + (clientPort+1);\n        // zk leader election algorithms other than 0 need an extra port for leader election.\n        if (alg != 0) {\n          serverStr = serverStr + ':' + (clientPort+2);\n        }\n\n        props.setProperty(\"server.\"+serverNum, serverStr);\n        serverNum++;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"c26f00b574427b55127e869b935845554afde1fa":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}