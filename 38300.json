{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","sourceNew":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (String name : oldIndexDirs.keySet()) {\n        File dir = createTempDir(name);\n        File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n        TestUtil.unzip(dataFile, dir);\n        \n        String path = dir.getAbsolutePath();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","sourceOld":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (String name : oldIndexDirs.keySet()) {\n        File dir = createTempDir(name);\n        File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n        TestUtil.unzip(dataFile, dir);\n        \n        String path = dir.getAbsolutePath();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","sourceNew":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (String name : oldIndexDirs.keySet()) {\n        File dir = createTempDir(name);\n        File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n        TestUtil.unzip(dataFile, dir);\n        \n        String path = dir.getAbsolutePath();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","sourceOld":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (String name : oldIndexDirs.keySet()) {\n        File dir = createTempDir(name);\n        File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n        TestUtil.unzip(dataFile, dir);\n        \n        String path = dir.getAbsolutePath();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","sourceNew":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (String name : oldIndexDirs.keySet()) {\n        Path dir = createTempDir(name);\n        Path dataFile = Paths.get(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n        TestUtil.unzip(dataFile, dir);\n        \n        String path = dir.toAbsolutePath().toString();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","sourceOld":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (String name : oldIndexDirs.keySet()) {\n        File dir = createTempDir(name);\n        File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n        TestUtil.unzip(dataFile, dir);\n        \n        String path = dir.getAbsolutePath();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"509b34c7d48bc90eb4ec5e8757e0f879a19f22ee","date":1410650745,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","sourceNew":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (String name : oldIndexDirs.keySet()) {\n        Path dir = createTempDir(name);\n        TestUtil.unzip(getDataInputStream(\"index.\" + name + \".zip\"), dir);\n        \n        String path = dir.toAbsolutePath().toString();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","sourceOld":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (String name : oldIndexDirs.keySet()) {\n        Path dir = createTempDir(name);\n        Path dataFile = Paths.get(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n        TestUtil.unzip(dataFile, dir);\n        \n        String path = dir.toAbsolutePath().toString();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d97ba94eef1fc33c5451259a7aa2ac682646c1af","date":1488285427,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","sourceNew":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (Map.Entry<String,Directory> entry : oldIndexDirs.entrySet()) {\n        String name = entry.getKey();\n        Version indexCreatedVersion = SegmentInfos.readLatestCommit(entry.getValue()).getIndexCreatedVersion();\n        Path dir = createTempDir(name);\n        TestUtil.unzip(getDataInputStream(\"index.\" + name + \".zip\"), dir);\n        \n        String path = dir.toAbsolutePath().toString();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir, indexCreatedVersion);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","sourceOld":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (String name : oldIndexDirs.keySet()) {\n        Path dir = createTempDir(name);\n        TestUtil.unzip(getDataInputStream(\"index.\" + name + \".zip\"), dir);\n        \n        String path = dir.toAbsolutePath().toString();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","sourceNew":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (Map.Entry<String,Directory> entry : oldIndexDirs.entrySet()) {\n        String name = entry.getKey();\n        int indexCreatedVersion = SegmentInfos.readLatestCommit(entry.getValue()).getIndexCreatedVersionMajor();\n        Path dir = createTempDir(name);\n        TestUtil.unzip(getDataInputStream(\"index.\" + name + \".zip\"), dir);\n        \n        String path = dir.toAbsolutePath().toString();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir, indexCreatedVersion);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","sourceOld":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (Map.Entry<String,Directory> entry : oldIndexDirs.entrySet()) {\n        String name = entry.getKey();\n        Version indexCreatedVersion = SegmentInfos.readLatestCommit(entry.getValue()).getIndexCreatedVersion();\n        Path dir = createTempDir(name);\n        TestUtil.unzip(getDataInputStream(\"index.\" + name + \".zip\"), dir);\n        \n        String path = dir.toAbsolutePath().toString();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir, indexCreatedVersion);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","sourceNew":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (Map.Entry<String,Directory> entry : oldIndexDirs.entrySet()) {\n        String name = entry.getKey();\n        int indexCreatedVersion = SegmentInfos.readLatestCommit(entry.getValue()).getIndexCreatedVersionMajor();\n        Path dir = createTempDir(name);\n        TestUtil.unzip(getDataInputStream(\"index.\" + name + \".zip\"), dir);\n        \n        String path = dir.toAbsolutePath().toString();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir, indexCreatedVersion);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","sourceOld":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (Map.Entry<String,Directory> entry : oldIndexDirs.entrySet()) {\n        String name = entry.getKey();\n        Version indexCreatedVersion = SegmentInfos.readLatestCommit(entry.getValue()).getIndexCreatedVersion();\n        Path dir = createTempDir(name);\n        TestUtil.unzip(getDataInputStream(\"index.\" + name + \".zip\"), dir);\n        \n        String path = dir.toAbsolutePath().toString();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir, indexCreatedVersion);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ae13d58e10d8dc818c75db483ed8b53c725f1d","date":1583449465,"type":3,"author":"Yannick Welsch","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","sourceNew":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (Map.Entry<String,Directory> entry : oldIndexDirs.entrySet()) {\n        String name = entry.getKey();\n        int indexCreatedVersion = SegmentInfos.readLatestCommit(entry.getValue()).getIndexCreatedVersionMajor();\n        Path dir = createTempDir(name);\n        TestUtil.unzip(getDataInputStream(\"index.\" + name + \".zip\"), dir);\n        \n        String path = dir.toAbsolutePath().toString();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir, indexCreatedVersion);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","sourceOld":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (Map.Entry<String,Directory> entry : oldIndexDirs.entrySet()) {\n        String name = entry.getKey();\n        int indexCreatedVersion = SegmentInfos.readLatestCommit(entry.getValue()).getIndexCreatedVersionMajor();\n        Path dir = createTempDir(name);\n        TestUtil.unzip(getDataInputStream(\"index.\" + name + \".zip\"), dir);\n        \n        String path = dir.toAbsolutePath().toString();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir, indexCreatedVersion);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ca2a57dbb0665332572cf1a0dffa67234089615","date":1583491342,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testCommandLineArgs().mjava","sourceNew":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (Map.Entry<String,Directory> entry : oldIndexDirs.entrySet()) {\n        String name = entry.getKey();\n        int indexCreatedVersion = SegmentInfos.readLatestCommit(entry.getValue()).getIndexCreatedVersionMajor();\n        Path dir = createTempDir(name);\n        TestUtil.unzip(getDataInputStream(\"index.\" + name + \".zip\"), dir);\n        \n        String path = dir.toAbsolutePath().toString();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir, indexCreatedVersion);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","sourceOld":"  public void testCommandLineArgs() throws Exception {\n\n    PrintStream savedSystemOut = System.out;\n    System.setOut(new PrintStream(new ByteArrayOutputStream(), false, \"UTF-8\"));\n    try {\n      for (Map.Entry<String,Directory> entry : oldIndexDirs.entrySet()) {\n        String name = entry.getKey();\n        int indexCreatedVersion = SegmentInfos.readLatestCommit(entry.getValue()).getIndexCreatedVersionMajor();\n        Path dir = createTempDir(name);\n        TestUtil.unzip(getDataInputStream(\"index.\" + name + \".zip\"), dir);\n        \n        String path = dir.toAbsolutePath().toString();\n        \n        List<String> args = new ArrayList<>();\n        if (random().nextBoolean()) {\n          args.add(\"-verbose\");\n        }\n        if (random().nextBoolean()) {\n          args.add(\"-delete-prior-commits\");\n        }\n        if (random().nextBoolean()) {\n          // TODO: need to better randomize this, but ...\n          //  - LuceneTestCase.FS_DIRECTORIES is private\n          //  - newFSDirectory returns BaseDirectoryWrapper\n          //  - BaseDirectoryWrapper doesn't expose delegate\n          Class<? extends FSDirectory> dirImpl = random().nextBoolean() ?\n              SimpleFSDirectory.class : NIOFSDirectory.class;\n          \n          args.add(\"-dir-impl\");\n          args.add(dirImpl.getName());\n        }\n        args.add(path);\n        \n        IndexUpgrader upgrader = null;\n        try {\n          upgrader = IndexUpgrader.parseArgs(args.toArray(new String[0]));\n        } catch (Exception e) {\n          throw new AssertionError(\"unable to parse args: \" + args, e);\n        }\n        upgrader.upgrade();\n        \n        Directory upgradedDir = newFSDirectory(dir);\n        try {\n          checkAllSegmentsUpgraded(upgradedDir, indexCreatedVersion);\n        } finally {\n          upgradedDir.close();\n        }\n      }\n    } finally {\n      System.setOut(savedSystemOut);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ca2a57dbb0665332572cf1a0dffa67234089615":["31741cf1390044e38a2ec3127cf302ba841bfd75","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"509b34c7d48bc90eb4ec5e8757e0f879a19f22ee":["f4abec28b874149a7223e32cc7a01704c27790de"],"d97ba94eef1fc33c5451259a7aa2ac682646c1af":["509b34c7d48bc90eb4ec5e8757e0f879a19f22ee"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["d97ba94eef1fc33c5451259a7aa2ac682646c1af"],"f4abec28b874149a7223e32cc7a01704c27790de":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["d97ba94eef1fc33c5451259a7aa2ac682646c1af"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"9ca2a57dbb0665332572cf1a0dffa67234089615":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"509b34c7d48bc90eb4ec5e8757e0f879a19f22ee":["d97ba94eef1fc33c5451259a7aa2ac682646c1af"],"d97ba94eef1fc33c5451259a7aa2ac682646c1af":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","31741cf1390044e38a2ec3127cf302ba841bfd75"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"f4abec28b874149a7223e32cc7a01704c27790de":["509b34c7d48bc90eb4ec5e8757e0f879a19f22ee"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["9ca2a57dbb0665332572cf1a0dffa67234089615","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}