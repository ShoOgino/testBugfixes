{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#isPublishAsDownOnStartup(CloudDescriptor).mjava","commits":[{"id":"27d63bd6ea608c208e37fd3e13e7b27f06da6b60","date":1507105517,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#isPublishAsDownOnStartup(CloudDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * On startup, the node already published all of its replicas as DOWN,\n   * so in case of legacyCloud=false ( the replica must already present on Zk )\n   * we can skip publish the replica as down\n   * @return Should publish the replica as down on startup\n   */\n  private boolean isPublishAsDownOnStartup(CloudDescriptor cloudDesc) {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      Replica replica = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName())\n          .getSlice(cloudDesc.getShardId())\n          .getReplica(cloudDesc.getCoreNodeName());\n      if (replica.getNodeName().equals(getNodeName())) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#isPublishAsDownOnStartup(CloudDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#isPublishAsDownOnStartup(CloudDescriptor).mjava","sourceNew":"  /**\n   * On startup, the node already published all of its replicas as DOWN,\n   * we can skip publish the replica as down\n   * @return Should publish the replica as down on startup\n   */\n  private boolean isPublishAsDownOnStartup(CloudDescriptor cloudDesc) {\n      Replica replica = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName())\n          .getSlice(cloudDesc.getShardId())\n          .getReplica(cloudDesc.getCoreNodeName());\n      return !replica.getNodeName().equals(getNodeName());\n  }\n\n","sourceOld":"  /**\n   * On startup, the node already published all of its replicas as DOWN,\n   * so in case of legacyCloud=false ( the replica must already present on Zk )\n   * we can skip publish the replica as down\n   * @return Should publish the replica as down on startup\n   */\n  private boolean isPublishAsDownOnStartup(CloudDescriptor cloudDesc) {\n    if (!Overseer.isLegacy(zkStateReader)) {\n      Replica replica = zkStateReader.getClusterState().getCollection(cloudDesc.getCollectionName())\n          .getSlice(cloudDesc.getShardId())\n          .getReplica(cloudDesc.getCoreNodeName());\n      if (replica.getNodeName().equals(getNodeName())) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":["27d63bd6ea608c208e37fd3e13e7b27f06da6b60"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"27d63bd6ea608c208e37fd3e13e7b27f06da6b60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["27d63bd6ea608c208e37fd3e13e7b27f06da6b60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"27d63bd6ea608c208e37fd3e13e7b27f06da6b60":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27d63bd6ea608c208e37fd3e13e7b27f06da6b60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}