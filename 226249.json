{"path":"lucene/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = -1;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(follow.target);\n      arc.flags = in.readByte();\n      if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readByte() & 0xFF;\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            in.pos -= 4;\n          }\n          arc.flags = in.readByte();\n        }\n        arc.nextArc = in.pos+1;\n      }\n      readNextRealArc(arc);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = -1;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(follow.target);\n      arc.flags = in.readByte();\n      if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readByte() & 0xFF;\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            in.pos -= 4;\n          }\n          arc.flags = in.readByte();\n        }\n        arc.nextArc = in.pos+1;\n      }\n      readNextRealArc(arc);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = -1;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(follow.target);\n      arc.flags = in.readByte();\n      if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readByte() & 0xFF;\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            in.pos -= 4;\n          }\n          arc.flags = in.readByte();\n        }\n        arc.nextArc = in.pos+1;\n      }\n      readNextRealArc(arc);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = -1;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(follow.target);\n      arc.flags = in.readByte();\n      if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readByte() & 0xFF;\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            in.pos -= 4;\n          }\n          arc.flags = in.readByte();\n        }\n        arc.nextArc = in.pos+1;\n      }\n      readNextRealArc(arc);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = -1;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(follow.target);\n      arc.flags = in.readByte();\n      if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readByte() & 0xFF;\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            in.pos -= 4;\n          }\n          arc.flags = in.readByte();\n        }\n        arc.nextArc = in.pos+1;\n      }\n      readNextRealArc(arc);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = -1;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(follow.target);\n      arc.flags = in.readByte();\n      if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readByte() & 0xFF;\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            in.pos -= 4;\n          }\n          arc.flags = in.readByte();\n        }\n        arc.nextArc = in.pos+1;\n      }\n      readNextRealArc(arc);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96a3f60d2a9bff2d01191d39dc80eed582514e12","date":1308050007,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(follow.target);\n      arc.flags = in.readByte();\n      if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readByte() & 0xFF;\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            in.pos -= 4;\n          }\n          arc.flags = in.readByte();\n        }\n        arc.nextArc = in.pos+1;\n      }\n      readNextRealArc(arc);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = -1;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(follow.target);\n      arc.flags = in.readByte();\n      if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readByte() & 0xFF;\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            in.pos -= 4;\n          }\n          arc.flags = in.readByte();\n        }\n        arc.nextArc = in.pos+1;\n      }\n      readNextRealArc(arc);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(follow.target);\n      arc.flags = in.readByte();\n      if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readByte() & 0xFF;\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            in.pos -= 4;\n          }\n          arc.flags = in.readByte();\n        }\n        arc.nextArc = in.pos+1;\n      }\n      readNextRealArc(arc);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = -1;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(follow.target);\n      arc.flags = in.readByte();\n      if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readByte() & 0xFF;\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            in.pos -= 4;\n          }\n          arc.flags = in.readByte();\n        }\n        arc.nextArc = in.pos+1;\n      }\n      readNextRealArc(arc);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(follow.target);\n      arc.flags = in.readByte();\n      if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readInt();\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            in.pos -= 4;\n          }\n          arc.flags = in.readByte();\n        }\n        arc.nextArc = in.pos+1;\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(follow.target);\n      arc.flags = in.readByte();\n      if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readByte() & 0xFF;\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            in.pos -= 4;\n          }\n          arc.flags = in.readByte();\n        }\n        arc.nextArc = in.pos+1;\n      }\n      readNextRealArc(arc);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            if (packed) {\n              in.readVInt();\n            } else {\n              in.skip(4);\n            }\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read: \n        in.skip(-1);\n        arc.nextArc = in.pos;\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(follow.target);\n      arc.flags = in.readByte();\n      if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readInt();\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            in.pos -= 4;\n          }\n          arc.flags = in.readByte();\n        }\n        arc.nextArc = in.pos+1;\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            if (packed) {\n              in.readVInt();\n            } else {\n              in.skip(4);\n            }\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read: \n        in.skip(-1);\n        arc.nextArc = in.pos;\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(follow.target);\n      arc.flags = in.readByte();\n      if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readInt();\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            in.pos -= 4;\n          }\n          arc.flags = in.readByte();\n        }\n        arc.nextArc = in.pos+1;\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            if (packed) {\n              in.readVInt();\n            } else {\n              in.skip(4);\n            }\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read: \n        in.skip(-1);\n        arc.nextArc = in.pos;\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(follow.target);\n      arc.flags = in.readByte();\n      if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        arc.bytesPerArc = in.readInt();\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            in.pos -= 4;\n          }\n          arc.flags = in.readByte();\n        }\n        arc.nextArc = in.pos+1;\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readLastTargetArc(Arc[T],Arc[T]).mjava","sourceNew":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            if (packed) {\n              in.readVInt();\n            } else {\n              in.skip(4);\n            }\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read: \n        in.skip(-1);\n        arc.nextArc = in.pos;\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","sourceOld":"  /** Follows the <code>follow</code> arc and reads the last\n   *  arc of its target; this changes the provided\n   *  <code>arc</code> (2nd arg) in-place and returns it.\n   * \n   * @return Returns the second argument\n   * (<code>arc</code>). */\n  public Arc<T> readLastTargetArc(Arc<T> follow, Arc<T> arc) throws IOException {\n    //System.out.println(\"readLast\");\n    if (!targetHasArcs(follow)) {\n      //System.out.println(\"  end node\");\n      assert follow.isFinal();\n      arc.label = END_LABEL;\n      arc.target = FINAL_END_NODE;\n      arc.output = follow.nextFinalOutput;\n      arc.flags = BIT_LAST_ARC;\n      return arc;\n    } else {\n      final BytesReader in = getBytesReader(getNodeAddress(follow.target));\n      arc.node = follow.target;\n      final byte b = in.readByte();\n      if (b == ARCS_AS_FIXED_ARRAY) {\n        // array: jump straight to end\n        arc.numArcs = in.readVInt();\n        if (packed) {\n          arc.bytesPerArc = in.readVInt();\n        } else {\n          arc.bytesPerArc = in.readInt();\n        }\n        //System.out.println(\"  array numArcs=\" + arc.numArcs + \" bpa=\" + arc.bytesPerArc);\n        arc.posArcsStart = in.pos;\n        arc.arcIdx = arc.numArcs - 2;\n      } else {\n        arc.flags = b;\n        // non-array: linear scan\n        arc.bytesPerArc = 0;\n        //System.out.println(\"  scan\");\n        while(!arc.isLast()) {\n          // skip this arc:\n          readLabel(in);\n          if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n            outputs.read(in);\n          }\n          if (arc.flag(BIT_STOP_NODE)) {\n          } else if (arc.flag(BIT_TARGET_NEXT)) {\n          } else {\n            if (packed) {\n              in.readVInt();\n            } else {\n              in.skip(4);\n            }\n          }\n          arc.flags = in.readByte();\n        }\n        // Undo the byte flags we read: \n        in.skip(-1);\n        arc.nextArc = in.pos;\n      }\n      readNextRealArc(arc, in);\n      assert arc.isLast();\n      return arc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["96a3f60d2a9bff2d01191d39dc80eed582514e12"],"96a3f60d2a9bff2d01191d39dc80eed582514e12":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","96a3f60d2a9bff2d01191d39dc80eed582514e12"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","96a3f60d2a9bff2d01191d39dc80eed582514e12","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["9ed208afa1e7aa98899ddb1dedfddedddf898253"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"96a3f60d2a9bff2d01191d39dc80eed582514e12":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","9ed208afa1e7aa98899ddb1dedfddedddf898253","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}