{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","commits":[{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,IOContext).mjava","sourceNew":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n      if (reader == null) {\n        getReader(context).decRef();\n        assert reader != null;\n      }\n      assert countsMatch();\n      shared = true;\n      if (liveDocs != null) {\n        return new SegmentReader(reader, liveDocs, info.docCount - info.getDelCount() - pendingDeleteCount);\n      } else {\n        reader.incRef();\n        return reader;\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, context);\n      try {\n        return (SegmentReader) sr.clone(); // cloning is always readOnly\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e","date":1327757020,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","sourceNew":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n      if (reader == null) {\n        getReader(context).decRef();\n        assert reader != null;\n      }\n      shared = true;\n      if (liveDocs != null) {\n        return new SegmentReader(reader, liveDocs, info.docCount - info.getDelCount() - pendingDeleteCount);\n      } else {\n        reader.incRef();\n        return reader;\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n      if (reader == null) {\n        getReader(context).decRef();\n        assert reader != null;\n      }\n      assert countsMatch();\n      shared = true;\n      if (liveDocs != null) {\n        return new SegmentReader(reader, liveDocs, info.docCount - info.getDelCount() - pendingDeleteCount);\n      } else {\n        reader.incRef();\n        return reader;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0f3fe3cd74aebb73ff7e1b4f2fe8354d5976093","date":1327765628,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","sourceNew":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n      if (reader == null) {\n        getReader(context).decRef();\n        assert reader != null;\n      }\n      shared = true;\n      if (liveDocs != null) {\n        return new SegmentReader(reader.getSegmentInfo(), reader.core, liveDocs, info.docCount - info.getDelCount() - pendingDeleteCount);\n      } else {\n        reader.incRef();\n        return reader;\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n      if (reader == null) {\n        getReader(context).decRef();\n        assert reader != null;\n      }\n      shared = true;\n      if (liveDocs != null) {\n        return new SegmentReader(reader, liveDocs, info.docCount - info.getDelCount() - pendingDeleteCount);\n      } else {\n        reader.incRef();\n        return reader;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","sourceNew":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n      if (reader == null) {\n        getReader(context).decRef();\n        assert reader != null;\n      }\n      shared = true;\n      if (liveDocs != null) {\n        return new SegmentReader(reader.getSegmentInfo(), reader.core, liveDocs, info.docCount - info.getDelCount() - pendingDeleteCount);\n      } else {\n        reader.incRef();\n        return reader;\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n      if (reader == null) {\n        getReader(context).decRef();\n        assert reader != null;\n      }\n      assert countsMatch();\n      shared = true;\n      if (liveDocs != null) {\n        return new SegmentReader(reader, liveDocs, info.docCount - info.getDelCount() - pendingDeleteCount);\n      } else {\n        reader.incRef();\n        return reader;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","sourceNew":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n      if (reader == null) {\n        getReader(context).decRef();\n        assert reader != null;\n      }\n      shared = true;\n      if (liveDocs != null) {\n        return new SegmentReader(reader.getSegmentInfo(), reader.core, liveDocs, info.docCount - info.getDelCount() - pendingDeleteCount);\n      } else {\n        reader.incRef();\n        return reader;\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n      if (reader == null) {\n        getReader(context).decRef();\n        assert reader != null;\n      }\n      assert countsMatch();\n      shared = true;\n      if (liveDocs != null) {\n        return new SegmentReader(reader, liveDocs, info.docCount - info.getDelCount() - pendingDeleteCount);\n      } else {\n        reader.incRef();\n        return reader;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getReadOnlyClone(IOContext).mjava","sourceNew":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n      if (reader == null) {\n        getReader(context).decRef();\n        assert reader != null;\n      }\n      shared = true;\n      if (liveDocs != null) {\n        return new SegmentReader(reader.getSegmentInfo(), reader.core, liveDocs, info.docCount - info.getDelCount() - pendingDeleteCount);\n      } else {\n        reader.incRef();\n        return reader;\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(IOContext context) throws IOException {\n      if (reader == null) {\n        getReader(context).decRef();\n        assert reader != null;\n      }\n      shared = true;\n      if (liveDocs != null) {\n        return new SegmentReader(reader.getSegmentInfo(), reader.core, liveDocs, info.docCount - info.getDelCount() - pendingDeleteCount);\n      } else {\n        reader.incRef();\n        return reader;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"d0f3fe3cd74aebb73ff7e1b4f2fe8354d5976093":["d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["9ce667c6d3400b22523701c549c0d35e26da8b46","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["9ce667c6d3400b22523701c549c0d35e26da8b46","d0f3fe3cd74aebb73ff7e1b4f2fe8354d5976093"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0f3fe3cd74aebb73ff7e1b4f2fe8354d5976093":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e":["d0f3fe3cd74aebb73ff7e1b4f2fe8354d5976093"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fd92b8bcc88e969302510acf77bd6970da3994c4"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e","fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}