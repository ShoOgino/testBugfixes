{"path":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    if (processingMode == ProcessingMode.PM_FAST_INVALIDATION) {\n      return fastBits(context.reader, acceptDocs);\n    } else {\n      return correctBits(context.reader, acceptDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    if (processingMode == ProcessingMode.PM_FAST_INVALIDATION) {\n      return fastBits(context.reader);\n    } else {\n      return correctBits(context.reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0e127513fa72fb902d0fdf25139f738dd04c1d1","date":1327855878,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    if (processingMode == ProcessingMode.PM_FAST_INVALIDATION) {\n      return fastBits(context.reader(), acceptDocs);\n    } else {\n      return correctBits(context.reader(), acceptDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    if (processingMode == ProcessingMode.PM_FAST_INVALIDATION) {\n      return fastBits(context.reader, acceptDocs);\n    } else {\n      return correctBits(context.reader, acceptDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    if (processingMode == ProcessingMode.PM_FAST_INVALIDATION) {\n      return fastBits(context.reader(), acceptDocs);\n    } else {\n      return correctBits(context.reader(), acceptDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    if (processingMode == ProcessingMode.PM_FAST_INVALIDATION) {\n      return fastBits(context.reader, acceptDocs);\n    } else {\n      return correctBits(context.reader, acceptDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    if (processingMode == ProcessingMode.PM_FAST_INVALIDATION) {\n      return fastBits(context.reader(), acceptDocs);\n    } else {\n      return correctBits(context.reader(), acceptDocs);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    if (processingMode == ProcessingMode.PM_FAST_INVALIDATION) {\n      return fastBits(context.reader(), acceptDocs);\n    } else {\n      return correctBits(context.reader(), acceptDocs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0e127513fa72fb902d0fdf25139f738dd04c1d1":["6620df8541b174097b1133a4fc370adb2e570524"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"6620df8541b174097b1133a4fc370adb2e570524":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["6620df8541b174097b1133a4fc370adb2e570524","e0e127513fa72fb902d0fdf25139f738dd04c1d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"e0e127513fa72fb902d0fdf25139f738dd04c1d1":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6620df8541b174097b1133a4fc370adb2e570524":["e0e127513fa72fb902d0fdf25139f738dd04c1d1","5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6620df8541b174097b1133a4fc370adb2e570524"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}