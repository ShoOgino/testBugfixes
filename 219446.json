{"path":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/BatchWriter#close(TaskAttemptContext).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/BatchWriter#close(TaskAttemptContext).mjava","pathOld":"/dev/null","sourceNew":"  public synchronized void close(TaskAttemptContext context)\n      throws InterruptedException, SolrServerException, IOException {\n\n    if (batchPool != null) {\n      context.setStatus(\"Waiting for batches to complete\");\n      batchPool.shutdown();\n  \n      while (!batchPool.isTerminated()) {\n        LOG.info(String.format(Locale.ENGLISH, \n            \"Waiting for %d items and %d threads to finish executing\", batchPool\n                .getQueue().size(), batchPool.getActiveCount()));\n        batchPool.awaitTermination(5, TimeUnit.SECONDS);\n      }\n    }\n    //reporter.setStatus(\"Committing Solr\");\n    //solr.commit(true, false);\n    context.setStatus(\"Optimizing Solr\");\n    int maxSegments = context.getConfiguration().getInt(SolrOutputFormat.SOLR_RECORD_WRITER_MAX_SEGMENTS, 1);\n    LOG.info(\"Optimizing Solr: forcing merge down to {} segments\", maxSegments);\n    long start = System.currentTimeMillis();\n    solr.optimize(true, false, maxSegments);\n    context.getCounter(SolrCounters.class.getName(), SolrCounters.PHYSICAL_REDUCER_MERGE_TIME.toString()).increment(System.currentTimeMillis() - start);\n    float secs = (System.currentTimeMillis() - start) / 1000.0f;\n    LOG.info(\"Optimizing Solr: done forcing merge down to {} segments in {} secs\", maxSegments, secs);\n    context.setStatus(\"Shutting down Solr\");\n    // TODO is core close needed? - according to TestEmbeddedSolrServer it's not...\n    //core.close();\n    solr.shutdown();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/BatchWriter#close(TaskAttemptContext).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/BatchWriter#close(TaskAttemptContext).mjava","sourceNew":"  public synchronized void close(TaskAttemptContext context)\n      throws InterruptedException, SolrServerException, IOException {\n\n    if (batchPool != null) {\n      context.setStatus(\"Waiting for batches to complete\");\n      batchPool.shutdown();\n  \n      while (!batchPool.isTerminated()) {\n        LOG.info(String.format(Locale.ENGLISH, \n            \"Waiting for %d items and %d threads to finish executing\", batchPool\n                .getQueue().size(), batchPool.getActiveCount()));\n        batchPool.awaitTermination(5, TimeUnit.SECONDS);\n      }\n    }\n    //reporter.setStatus(\"Committing Solr\");\n    //solr.commit(true, false);\n    context.setStatus(\"Optimizing Solr\");\n    int maxSegments = context.getConfiguration().getInt(SolrOutputFormat.SOLR_RECORD_WRITER_MAX_SEGMENTS, 1);\n    LOG.info(\"Optimizing Solr: forcing merge down to {} segments\", maxSegments);\n    long start = System.currentTimeMillis();\n    solr.optimize(true, false, maxSegments);\n    context.getCounter(SolrCounters.class.getName(), SolrCounters.PHYSICAL_REDUCER_MERGE_TIME.toString()).increment(System.currentTimeMillis() - start);\n    float secs = (System.currentTimeMillis() - start) / 1000.0f;\n    LOG.info(\"Optimizing Solr: done forcing merge down to {} segments in {} secs\", maxSegments, secs);\n    context.setStatus(\"Shutting down Solr\");\n    // TODO is core close needed? - according to TestEmbeddedSolrServer it's not...\n    //core.close();\n    solr.shutdown();\n  }\n\n","sourceOld":"  public synchronized void close(TaskAttemptContext context)\n      throws InterruptedException, SolrServerException, IOException {\n\n    if (batchPool != null) {\n      context.setStatus(\"Waiting for batches to complete\");\n      batchPool.shutdown();\n  \n      while (!batchPool.isTerminated()) {\n        LOG.info(String.format(Locale.ENGLISH, \n            \"Waiting for %d items and %d threads to finish executing\", batchPool\n                .getQueue().size(), batchPool.getActiveCount()));\n        batchPool.awaitTermination(5, TimeUnit.SECONDS);\n      }\n    }\n    //reporter.setStatus(\"Committing Solr\");\n    //solr.commit(true, false);\n    context.setStatus(\"Optimizing Solr\");\n    int maxSegments = context.getConfiguration().getInt(SolrOutputFormat.SOLR_RECORD_WRITER_MAX_SEGMENTS, 1);\n    LOG.info(\"Optimizing Solr: forcing merge down to {} segments\", maxSegments);\n    long start = System.currentTimeMillis();\n    solr.optimize(true, false, maxSegments);\n    context.getCounter(SolrCounters.class.getName(), SolrCounters.PHYSICAL_REDUCER_MERGE_TIME.toString()).increment(System.currentTimeMillis() - start);\n    float secs = (System.currentTimeMillis() - start) / 1000.0f;\n    LOG.info(\"Optimizing Solr: done forcing merge down to {} segments in {} secs\", maxSegments, secs);\n    context.setStatus(\"Shutting down Solr\");\n    // TODO is core close needed? - according to TestEmbeddedSolrServer it's not...\n    //core.close();\n    solr.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}