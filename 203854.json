{"path":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String).mjava","commits":[{"id":"f943af95e5f861862ba175e931d53f5c53060cb3","date":1367086170,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],T,Analyzer,String).mjava","sourceNew":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String classFieldName) throws Exception {\n    SlowCompositeReaderWrapper compositeReaderWrapper = null;\n    try {\n      populateIndex(analyzer);\n      compositeReaderWrapper = new SlowCompositeReaderWrapper(indexWriter.getReader());\n      classifier.train(compositeReaderWrapper, textFieldName, classFieldName, analyzer);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n    } finally {\n      if (compositeReaderWrapper != null)\n        compositeReaderWrapper.close();\n    }\n  }\n\n","sourceOld":"  protected void checkCorrectClassification(Classifier<T> classifier, T expectedResult, Analyzer analyzer, String classFieldName) throws Exception {\n    SlowCompositeReaderWrapper compositeReaderWrapper = null;\n    try {\n      populateIndex(analyzer);\n      compositeReaderWrapper = new SlowCompositeReaderWrapper(indexWriter.getReader());\n      classifier.train(compositeReaderWrapper, textFieldName, classFieldName, analyzer);\n      String newText = \"Much is made of what the likes of Facebook, Google and Apple know about users. Truth is, Amazon may know more.\";\n      ClassificationResult<T> classificationResult = classifier.assignClass(newText);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n    } finally {\n      if (compositeReaderWrapper != null)\n        compositeReaderWrapper.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392","date":1377503666,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String).mjava","sourceNew":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String classFieldName) throws Exception {\n    AtomicReader compositeReaderWrapper = null;\n    try {\n      populateIndex(analyzer);\n      compositeReaderWrapper = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(compositeReaderWrapper, textFieldName, classFieldName, analyzer);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n    } finally {\n      if (compositeReaderWrapper != null)\n        compositeReaderWrapper.close();\n    }\n  }\n\n","sourceOld":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String classFieldName) throws Exception {\n    SlowCompositeReaderWrapper compositeReaderWrapper = null;\n    try {\n      populateIndex(analyzer);\n      compositeReaderWrapper = new SlowCompositeReaderWrapper(indexWriter.getReader());\n      classifier.train(compositeReaderWrapper, textFieldName, classFieldName, analyzer);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n    } finally {\n      if (compositeReaderWrapper != null)\n        compositeReaderWrapper.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String).mjava","sourceNew":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String classFieldName) throws Exception {\n    AtomicReader compositeReaderWrapper = null;\n    try {\n      populateIndex(analyzer);\n      compositeReaderWrapper = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(compositeReaderWrapper, textFieldName, classFieldName, analyzer);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n    } finally {\n      if (compositeReaderWrapper != null)\n        compositeReaderWrapper.close();\n    }\n  }\n\n","sourceOld":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String classFieldName) throws Exception {\n    SlowCompositeReaderWrapper compositeReaderWrapper = null;\n    try {\n      populateIndex(analyzer);\n      compositeReaderWrapper = new SlowCompositeReaderWrapper(indexWriter.getReader());\n      classifier.train(compositeReaderWrapper, textFieldName, classFieldName, analyzer);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n    } finally {\n      if (compositeReaderWrapper != null)\n        compositeReaderWrapper.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45ae8f6354b0826d27014deff71fe330604a9783","date":1378195819,"type":5,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String,String).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkCorrectClassification(Classifier[T],String,T,Analyzer,String).mjava","sourceNew":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String textFieldName, String classFieldName) throws Exception {\n    AtomicReader atomicReader = null;\n    try {\n      populateSampleIndex(analyzer);\n      atomicReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(atomicReader, textFieldName, classFieldName, analyzer);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n    } finally {\n      if (atomicReader != null)\n        atomicReader.close();\n    }\n  }\n\n","sourceOld":"  protected void checkCorrectClassification(Classifier<T> classifier, String inputDoc, T expectedResult, Analyzer analyzer, String classFieldName) throws Exception {\n    AtomicReader compositeReaderWrapper = null;\n    try {\n      populateIndex(analyzer);\n      compositeReaderWrapper = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(compositeReaderWrapper, textFieldName, classFieldName, analyzer);\n      ClassificationResult<T> classificationResult = classifier.assignClass(inputDoc);\n      assertNotNull(classificationResult.getAssignedClass());\n      assertEquals(\"got an assigned class of \" + classificationResult.getAssignedClass(), expectedResult, classificationResult.getAssignedClass());\n      assertTrue(\"got a not positive score \" + classificationResult.getScore(), classificationResult.getScore() > 0);\n    } finally {\n      if (compositeReaderWrapper != null)\n        compositeReaderWrapper.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f943af95e5f861862ba175e931d53f5c53060cb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["f943af95e5f861862ba175e931d53f5c53060cb3","df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392":["f943af95e5f861862ba175e931d53f5c53060cb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45ae8f6354b0826d27014deff71fe330604a9783"],"45ae8f6354b0826d27014deff71fe330604a9783":["df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"]},"commit2Childs":{"f943af95e5f861862ba175e931d53f5c53060cb3":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f943af95e5f861862ba175e931d53f5c53060cb3"],"df9bf66ed405ee5c7d32b47bdb36c2e36d2c1392":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","45ae8f6354b0826d27014deff71fe330604a9783"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"45ae8f6354b0826d27014deff71fe330604a9783":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}