{"path":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardSuggestions(NamedList,SpellCheckMergeData).mjava","commits":[{"id":"51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5","date":1320922486,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardSuggestions(NamedList,SpellCheckMergeData).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardSuggestions(NamedList nl, SpellCheckMergeData mergeData) {\n    SpellCheckResponse spellCheckResp = new SpellCheckResponse(nl);\n    for (SpellCheckResponse.Suggestion suggestion : spellCheckResp.getSuggestions()) {\n      mergeData.origVsSuggestion.put(suggestion.getToken(), suggestion);\n      HashSet<String> suggested = mergeData.origVsSuggested.get(suggestion.getToken());\n      if (suggested == null) {\n        suggested = new HashSet<String>();\n        mergeData.origVsSuggested.put(suggestion.getToken(), suggested);\n      }\n\n      // sum up original frequency          \n      int origFreq = 0;\n      Integer o = mergeData.origVsFreq.get(suggestion.getToken());\n      if (o != null)  origFreq += o;\n      origFreq += suggestion.getOriginalFrequency();\n      mergeData.origVsFreq.put(suggestion.getToken(), origFreq);\n      \n      //# shards reporting\n      Integer origShards = mergeData.origVsShards.get(suggestion.getToken());\n      if(origShards==null) {\n        mergeData.origVsShards.put(suggestion.getToken(), 1);\n      } else {\n        mergeData.origVsShards.put(suggestion.getToken(), ++origShards);\n      }            \n\n      // find best suggestions\n      for (int i = 0; i < suggestion.getNumFound(); i++) {\n        String alternative = suggestion.getAlternatives().get(i);\n        suggested.add(alternative);\n        SuggestWord sug = mergeData.suggestedVsWord.get(alternative);\n        if (sug == null)  {\n          sug = new SuggestWord();\n          mergeData.suggestedVsWord.put(alternative, sug);\n        }\n        sug.string = alternative;\n        // alternative frequency is present only for extendedResults=true\n        if (suggestion.getAlternativeFrequencies() != null && suggestion.getAlternativeFrequencies().size() > 0) {\n          Integer freq = suggestion.getAlternativeFrequencies().get(i);\n          if (freq != null) sug.freq += freq;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8e65acce892eede973379cb2fb3b90ea49a4a5ed"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"541f6605a29362fa8a42f33b69069e7da5178034","date":1337786849,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardSuggestions(NamedList,SpellCheckMergeData).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardSuggestions(NamedList,SpellCheckMergeData).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardSuggestions(NamedList nl, SpellCheckMergeData mergeData) {\n    SpellCheckResponse spellCheckResp = new SpellCheckResponse(nl);\n    for (SpellCheckResponse.Suggestion suggestion : spellCheckResp.getSuggestions()) {\n      mergeData.origVsSuggestion.put(suggestion.getToken(), suggestion);\n      HashSet<String> suggested = mergeData.origVsSuggested.get(suggestion.getToken());\n      if (suggested == null) {\n        suggested = new HashSet<String>();\n        mergeData.origVsSuggested.put(suggestion.getToken(), suggested);\n      }\n\n      // sum up original frequency          \n      int origFreq = 0;\n      Integer o = mergeData.origVsFreq.get(suggestion.getToken());\n      if (o != null)  origFreq += o;\n      origFreq += suggestion.getOriginalFrequency();\n      mergeData.origVsFreq.put(suggestion.getToken(), origFreq);\n      \n      //# shards reporting\n      Integer origShards = mergeData.origVsShards.get(suggestion.getToken());\n      if(origShards==null) {\n        mergeData.origVsShards.put(suggestion.getToken(), 1);\n      } else {\n        mergeData.origVsShards.put(suggestion.getToken(), ++origShards);\n      }            \n\n      // find best suggestions\n      for (int i = 0; i < suggestion.getNumFound(); i++) {\n        String alternative = suggestion.getAlternatives().get(i);\n        suggested.add(alternative);\n        SuggestWord sug = mergeData.suggestedVsWord.get(alternative);\n        if (sug == null)  {\n          sug = new SuggestWord();\n          mergeData.suggestedVsWord.put(alternative, sug);\n        }\n        sug.string = alternative;\n        // alternative frequency is present only for extendedResults=true\n        if (suggestion.getAlternativeFrequencies() != null\n            && suggestion.getAlternativeFrequencies().size() > 0) {\n          Integer freq = suggestion.getAlternativeFrequencies().get(i);\n          if (freq != null) sug.freq += freq;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardSuggestions(NamedList nl, SpellCheckMergeData mergeData) {\n    SpellCheckResponse spellCheckResp = new SpellCheckResponse(nl);\n    for (SpellCheckResponse.Suggestion suggestion : spellCheckResp.getSuggestions()) {\n      mergeData.origVsSuggestion.put(suggestion.getToken(), suggestion);\n      HashSet<String> suggested = mergeData.origVsSuggested.get(suggestion.getToken());\n      if (suggested == null) {\n        suggested = new HashSet<String>();\n        mergeData.origVsSuggested.put(suggestion.getToken(), suggested);\n      }\n\n      // sum up original frequency          \n      int origFreq = 0;\n      Integer o = mergeData.origVsFreq.get(suggestion.getToken());\n      if (o != null)  origFreq += o;\n      origFreq += suggestion.getOriginalFrequency();\n      mergeData.origVsFreq.put(suggestion.getToken(), origFreq);\n      \n      //# shards reporting\n      Integer origShards = mergeData.origVsShards.get(suggestion.getToken());\n      if(origShards==null) {\n        mergeData.origVsShards.put(suggestion.getToken(), 1);\n      } else {\n        mergeData.origVsShards.put(suggestion.getToken(), ++origShards);\n      }            \n\n      // find best suggestions\n      for (int i = 0; i < suggestion.getNumFound(); i++) {\n        String alternative = suggestion.getAlternatives().get(i);\n        suggested.add(alternative);\n        SuggestWord sug = mergeData.suggestedVsWord.get(alternative);\n        if (sug == null)  {\n          sug = new SuggestWord();\n          mergeData.suggestedVsWord.put(alternative, sug);\n        }\n        sug.string = alternative;\n        // alternative frequency is present only for extendedResults=true\n        if (suggestion.getAlternativeFrequencies() != null && suggestion.getAlternativeFrequencies().size() > 0) {\n          Integer freq = suggestion.getAlternativeFrequencies().get(i);\n          if (freq != null) sug.freq += freq;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardSuggestions(NamedList,SpellCheckMergeData).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardSuggestions(NamedList,SpellCheckMergeData).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardSuggestions(NamedList nl, SpellCheckMergeData mergeData) {\n    SpellCheckResponse spellCheckResp = new SpellCheckResponse(nl);\n    for (SpellCheckResponse.Suggestion suggestion : spellCheckResp.getSuggestions()) {\n      mergeData.origVsSuggestion.put(suggestion.getToken(), suggestion);\n      HashSet<String> suggested = mergeData.origVsSuggested.get(suggestion.getToken());\n      if (suggested == null) {\n        suggested = new HashSet<String>();\n        mergeData.origVsSuggested.put(suggestion.getToken(), suggested);\n      }\n\n      // sum up original frequency          \n      int origFreq = 0;\n      Integer o = mergeData.origVsFreq.get(suggestion.getToken());\n      if (o != null)  origFreq += o;\n      origFreq += suggestion.getOriginalFrequency();\n      mergeData.origVsFreq.put(suggestion.getToken(), origFreq);\n      \n      //# shards reporting\n      Integer origShards = mergeData.origVsShards.get(suggestion.getToken());\n      if(origShards==null) {\n        mergeData.origVsShards.put(suggestion.getToken(), 1);\n      } else {\n        mergeData.origVsShards.put(suggestion.getToken(), ++origShards);\n      }            \n\n      // find best suggestions\n      for (int i = 0; i < suggestion.getNumFound(); i++) {\n        String alternative = suggestion.getAlternatives().get(i);\n        suggested.add(alternative);\n        SuggestWord sug = mergeData.suggestedVsWord.get(alternative);\n        if (sug == null)  {\n          sug = new SuggestWord();\n          mergeData.suggestedVsWord.put(alternative, sug);\n        }\n        sug.string = alternative;\n        // alternative frequency is present only for extendedResults=true\n        if (suggestion.getAlternativeFrequencies() != null\n            && suggestion.getAlternativeFrequencies().size() > 0) {\n          Integer freq = suggestion.getAlternativeFrequencies().get(i);\n          if (freq != null) sug.freq += freq;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardSuggestions(NamedList nl, SpellCheckMergeData mergeData) {\n    SpellCheckResponse spellCheckResp = new SpellCheckResponse(nl);\n    for (SpellCheckResponse.Suggestion suggestion : spellCheckResp.getSuggestions()) {\n      mergeData.origVsSuggestion.put(suggestion.getToken(), suggestion);\n      HashSet<String> suggested = mergeData.origVsSuggested.get(suggestion.getToken());\n      if (suggested == null) {\n        suggested = new HashSet<String>();\n        mergeData.origVsSuggested.put(suggestion.getToken(), suggested);\n      }\n\n      // sum up original frequency          \n      int origFreq = 0;\n      Integer o = mergeData.origVsFreq.get(suggestion.getToken());\n      if (o != null)  origFreq += o;\n      origFreq += suggestion.getOriginalFrequency();\n      mergeData.origVsFreq.put(suggestion.getToken(), origFreq);\n      \n      //# shards reporting\n      Integer origShards = mergeData.origVsShards.get(suggestion.getToken());\n      if(origShards==null) {\n        mergeData.origVsShards.put(suggestion.getToken(), 1);\n      } else {\n        mergeData.origVsShards.put(suggestion.getToken(), ++origShards);\n      }            \n\n      // find best suggestions\n      for (int i = 0; i < suggestion.getNumFound(); i++) {\n        String alternative = suggestion.getAlternatives().get(i);\n        suggested.add(alternative);\n        SuggestWord sug = mergeData.suggestedVsWord.get(alternative);\n        if (sug == null)  {\n          sug = new SuggestWord();\n          mergeData.suggestedVsWord.put(alternative, sug);\n        }\n        sug.string = alternative;\n        // alternative frequency is present only for extendedResults=true\n        if (suggestion.getAlternativeFrequencies() != null && suggestion.getAlternativeFrequencies().size() > 0) {\n          Integer freq = suggestion.getAlternativeFrequencies().get(i);\n          if (freq != null) sug.freq += freq;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardSuggestions(NamedList,SpellCheckMergeData).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardSuggestions(NamedList,SpellCheckMergeData).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardSuggestions(NamedList nl, SpellCheckMergeData mergeData) {\n    SpellCheckResponse spellCheckResp = new SpellCheckResponse(nl);\n    for (SpellCheckResponse.Suggestion suggestion : spellCheckResp.getSuggestions()) {\n      mergeData.origVsSuggestion.put(suggestion.getToken(), suggestion);\n      HashSet<String> suggested = mergeData.origVsSuggested.get(suggestion.getToken());\n      if (suggested == null) {\n        suggested = new HashSet<>();\n        mergeData.origVsSuggested.put(suggestion.getToken(), suggested);\n      }\n\n      // sum up original frequency          \n      int origFreq = 0;\n      Integer o = mergeData.origVsFreq.get(suggestion.getToken());\n      if (o != null)  origFreq += o;\n      origFreq += suggestion.getOriginalFrequency();\n      mergeData.origVsFreq.put(suggestion.getToken(), origFreq);\n      \n      //# shards reporting\n      Integer origShards = mergeData.origVsShards.get(suggestion.getToken());\n      if(origShards==null) {\n        mergeData.origVsShards.put(suggestion.getToken(), 1);\n      } else {\n        mergeData.origVsShards.put(suggestion.getToken(), ++origShards);\n      }            \n\n      // find best suggestions\n      for (int i = 0; i < suggestion.getNumFound(); i++) {\n        String alternative = suggestion.getAlternatives().get(i);\n        suggested.add(alternative);\n        SuggestWord sug = mergeData.suggestedVsWord.get(alternative);\n        if (sug == null)  {\n          sug = new SuggestWord();\n          mergeData.suggestedVsWord.put(alternative, sug);\n        }\n        sug.string = alternative;\n        // alternative frequency is present only for extendedResults=true\n        if (suggestion.getAlternativeFrequencies() != null\n            && suggestion.getAlternativeFrequencies().size() > 0) {\n          Integer freq = suggestion.getAlternativeFrequencies().get(i);\n          if (freq != null) sug.freq += freq;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardSuggestions(NamedList nl, SpellCheckMergeData mergeData) {\n    SpellCheckResponse spellCheckResp = new SpellCheckResponse(nl);\n    for (SpellCheckResponse.Suggestion suggestion : spellCheckResp.getSuggestions()) {\n      mergeData.origVsSuggestion.put(suggestion.getToken(), suggestion);\n      HashSet<String> suggested = mergeData.origVsSuggested.get(suggestion.getToken());\n      if (suggested == null) {\n        suggested = new HashSet<String>();\n        mergeData.origVsSuggested.put(suggestion.getToken(), suggested);\n      }\n\n      // sum up original frequency          \n      int origFreq = 0;\n      Integer o = mergeData.origVsFreq.get(suggestion.getToken());\n      if (o != null)  origFreq += o;\n      origFreq += suggestion.getOriginalFrequency();\n      mergeData.origVsFreq.put(suggestion.getToken(), origFreq);\n      \n      //# shards reporting\n      Integer origShards = mergeData.origVsShards.get(suggestion.getToken());\n      if(origShards==null) {\n        mergeData.origVsShards.put(suggestion.getToken(), 1);\n      } else {\n        mergeData.origVsShards.put(suggestion.getToken(), ++origShards);\n      }            \n\n      // find best suggestions\n      for (int i = 0; i < suggestion.getNumFound(); i++) {\n        String alternative = suggestion.getAlternatives().get(i);\n        suggested.add(alternative);\n        SuggestWord sug = mergeData.suggestedVsWord.get(alternative);\n        if (sug == null)  {\n          sug = new SuggestWord();\n          mergeData.suggestedVsWord.put(alternative, sug);\n        }\n        sug.string = alternative;\n        // alternative frequency is present only for extendedResults=true\n        if (suggestion.getAlternativeFrequencies() != null\n            && suggestion.getAlternativeFrequencies().size() > 0) {\n          Integer freq = suggestion.getAlternativeFrequencies().get(i);\n          if (freq != null) sug.freq += freq;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"343d2d9477b299075fa3a19a46e654b6c3bf552b","date":1407872410,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardSuggestions(NamedList,SpellCheckMergeData).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardSuggestions(NamedList,SpellCheckMergeData).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardSuggestions(NamedList nl, SpellCheckMergeData mergeData) {\n    System.out.println(nl);\n    SpellCheckResponse spellCheckResp = new SpellCheckResponse(nl);\n    for (SpellCheckResponse.Suggestion suggestion : spellCheckResp.getSuggestions()) {\n      mergeData.origVsSuggestion.put(suggestion.getToken(), suggestion);\n      HashSet<String> suggested = mergeData.origVsSuggested.get(suggestion.getToken());\n      if (suggested == null) {\n        suggested = new HashSet<>();\n        mergeData.origVsSuggested.put(suggestion.getToken(), suggested);\n      }\n\n      // sum up original frequency          \n      int origFreq = 0;\n      Integer o = mergeData.origVsFreq.get(suggestion.getToken());\n      if (o != null)  origFreq += o;\n      origFreq += suggestion.getOriginalFrequency();\n      mergeData.origVsFreq.put(suggestion.getToken(), origFreq);\n      \n      //# shards reporting\n      Integer origShards = mergeData.origVsShards.get(suggestion.getToken());\n      if(origShards==null) {\n        mergeData.origVsShards.put(suggestion.getToken(), 1);\n      } else {\n        mergeData.origVsShards.put(suggestion.getToken(), ++origShards);\n      }            \n\n      // find best suggestions\n      for (int i = 0; i < suggestion.getNumFound(); i++) {\n        String alternative = suggestion.getAlternatives().get(i);\n        suggested.add(alternative);\n        SuggestWord sug = mergeData.suggestedVsWord.get(alternative);\n        if (sug == null)  {\n          sug = new SuggestWord();\n          mergeData.suggestedVsWord.put(alternative, sug);\n        }\n        sug.string = alternative;\n        // alternative frequency is present only for extendedResults=true\n        if (suggestion.getAlternativeFrequencies() != null\n            && suggestion.getAlternativeFrequencies().size() > 0) {\n          Integer freq = suggestion.getAlternativeFrequencies().get(i);\n          if (freq != null) sug.freq += freq;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardSuggestions(NamedList nl, SpellCheckMergeData mergeData) {\n    SpellCheckResponse spellCheckResp = new SpellCheckResponse(nl);\n    for (SpellCheckResponse.Suggestion suggestion : spellCheckResp.getSuggestions()) {\n      mergeData.origVsSuggestion.put(suggestion.getToken(), suggestion);\n      HashSet<String> suggested = mergeData.origVsSuggested.get(suggestion.getToken());\n      if (suggested == null) {\n        suggested = new HashSet<>();\n        mergeData.origVsSuggested.put(suggestion.getToken(), suggested);\n      }\n\n      // sum up original frequency          \n      int origFreq = 0;\n      Integer o = mergeData.origVsFreq.get(suggestion.getToken());\n      if (o != null)  origFreq += o;\n      origFreq += suggestion.getOriginalFrequency();\n      mergeData.origVsFreq.put(suggestion.getToken(), origFreq);\n      \n      //# shards reporting\n      Integer origShards = mergeData.origVsShards.get(suggestion.getToken());\n      if(origShards==null) {\n        mergeData.origVsShards.put(suggestion.getToken(), 1);\n      } else {\n        mergeData.origVsShards.put(suggestion.getToken(), ++origShards);\n      }            \n\n      // find best suggestions\n      for (int i = 0; i < suggestion.getNumFound(); i++) {\n        String alternative = suggestion.getAlternatives().get(i);\n        suggested.add(alternative);\n        SuggestWord sug = mergeData.suggestedVsWord.get(alternative);\n        if (sug == null)  {\n          sug = new SuggestWord();\n          mergeData.suggestedVsWord.put(alternative, sug);\n        }\n        sug.string = alternative;\n        // alternative frequency is present only for extendedResults=true\n        if (suggestion.getAlternativeFrequencies() != null\n            && suggestion.getAlternativeFrequencies().size() > 0) {\n          Integer freq = suggestion.getAlternativeFrequencies().get(i);\n          if (freq != null) sug.freq += freq;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["8e65acce892eede973379cb2fb3b90ea49a4a5ed"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8e65acce892eede973379cb2fb3b90ea49a4a5ed","date":1409839025,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardSuggestions(NamedList,SpellCheckMergeData).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardSuggestions(NamedList,SpellCheckMergeData).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardSuggestions(NamedList nl, SpellCheckMergeData mergeData) {\n    SpellCheckResponse spellCheckResp = new SpellCheckResponse(nl);    \n    Iterable<Object> originalTermStrings = (Iterable<Object>) nl.get(\"originalTerms\");\n    if(originalTermStrings!=null) {\n      mergeData.originalTerms = new HashSet<>();\n      for (Object originalTermObj : originalTermStrings) {\n        mergeData.originalTerms.add(originalTermObj.toString());\n      }\n    }\n    for (SpellCheckResponse.Suggestion suggestion : spellCheckResp.getSuggestions()) {\n      mergeData.origVsSuggestion.put(suggestion.getToken(), suggestion);\n      HashSet<String> suggested = mergeData.origVsSuggested.get(suggestion.getToken());\n      if (suggested == null) {\n        suggested = new HashSet<>();\n        mergeData.origVsSuggested.put(suggestion.getToken(), suggested);\n      }\n\n      // sum up original frequency          \n      int origFreq = 0;\n      Integer o = mergeData.origVsFreq.get(suggestion.getToken());\n      if (o != null)  origFreq += o;\n      origFreq += suggestion.getOriginalFrequency();\n      mergeData.origVsFreq.put(suggestion.getToken(), origFreq);\n      \n      //# shards reporting\n      Integer origShards = mergeData.origVsShards.get(suggestion.getToken());\n      if(origShards==null) {\n        mergeData.origVsShards.put(suggestion.getToken(), 1);\n      } else {\n        mergeData.origVsShards.put(suggestion.getToken(), ++origShards);\n      }            \n\n      // find best suggestions\n      for (int i = 0; i < suggestion.getNumFound(); i++) {\n        String alternative = suggestion.getAlternatives().get(i);\n        suggested.add(alternative);\n        SuggestWord sug = mergeData.suggestedVsWord.get(alternative);\n        if (sug == null)  {\n          sug = new SuggestWord();\n          mergeData.suggestedVsWord.put(alternative, sug);\n        }\n        sug.string = alternative;\n        // alternative frequency is present only for extendedResults=true\n        if (suggestion.getAlternativeFrequencies() != null\n            && suggestion.getAlternativeFrequencies().size() > 0) {\n          Integer freq = suggestion.getAlternativeFrequencies().get(i);\n          if (freq != null) sug.freq += freq;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardSuggestions(NamedList nl, SpellCheckMergeData mergeData) {\n    System.out.println(nl);\n    SpellCheckResponse spellCheckResp = new SpellCheckResponse(nl);\n    for (SpellCheckResponse.Suggestion suggestion : spellCheckResp.getSuggestions()) {\n      mergeData.origVsSuggestion.put(suggestion.getToken(), suggestion);\n      HashSet<String> suggested = mergeData.origVsSuggested.get(suggestion.getToken());\n      if (suggested == null) {\n        suggested = new HashSet<>();\n        mergeData.origVsSuggested.put(suggestion.getToken(), suggested);\n      }\n\n      // sum up original frequency          \n      int origFreq = 0;\n      Integer o = mergeData.origVsFreq.get(suggestion.getToken());\n      if (o != null)  origFreq += o;\n      origFreq += suggestion.getOriginalFrequency();\n      mergeData.origVsFreq.put(suggestion.getToken(), origFreq);\n      \n      //# shards reporting\n      Integer origShards = mergeData.origVsShards.get(suggestion.getToken());\n      if(origShards==null) {\n        mergeData.origVsShards.put(suggestion.getToken(), 1);\n      } else {\n        mergeData.origVsShards.put(suggestion.getToken(), ++origShards);\n      }            \n\n      // find best suggestions\n      for (int i = 0; i < suggestion.getNumFound(); i++) {\n        String alternative = suggestion.getAlternatives().get(i);\n        suggested.add(alternative);\n        SuggestWord sug = mergeData.suggestedVsWord.get(alternative);\n        if (sug == null)  {\n          sug = new SuggestWord();\n          mergeData.suggestedVsWord.put(alternative, sug);\n        }\n        sug.string = alternative;\n        // alternative frequency is present only for extendedResults=true\n        if (suggestion.getAlternativeFrequencies() != null\n            && suggestion.getAlternativeFrequencies().size() > 0) {\n          Integer freq = suggestion.getAlternativeFrequencies().get(i);\n          if (freq != null) sug.freq += freq;\n        }\n      }\n    }\n  }\n\n","bugFix":["51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5","343d2d9477b299075fa3a19a46e654b6c3bf552b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90","date":1443533495,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardSuggestions(NamedList,SpellCheckMergeData).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardSuggestions(NamedList,SpellCheckMergeData).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardSuggestions(NamedList nl, SpellCheckMergeData mergeData) {\n    SpellCheckResponse spellCheckResp = new SpellCheckResponse(nl);\n    Iterable<Object> originalTermStrings = (Iterable<Object>) nl.get(\"originalTerms\");\n    if(originalTermStrings!=null) {\n      mergeData.originalTerms = new HashSet<>();\n      for (Object originalTermObj : originalTermStrings) {\n        mergeData.originalTerms.add(originalTermObj.toString());\n      }\n    }\n    for (SpellCheckResponse.Suggestion suggestion : spellCheckResp.getSuggestions()) {\n      mergeData.origVsSuggestion.put(suggestion.getToken(), suggestion);\n      HashSet<String> suggested = mergeData.origVsSuggested.get(suggestion.getToken());\n      if (suggested == null) {\n        suggested = new HashSet<>();\n        mergeData.origVsSuggested.put(suggestion.getToken(), suggested);\n      }\n\n      // sum up original frequency          \n      int origFreq = 0;\n      Integer o = mergeData.origVsFreq.get(suggestion.getToken());\n      if (o != null)  origFreq += o;\n      origFreq += suggestion.getOriginalFrequency();\n      mergeData.origVsFreq.put(suggestion.getToken(), origFreq);\n\n      //# shards reporting\n      Integer origShards = mergeData.origVsShards.get(suggestion.getToken());\n      if(origShards==null) {\n        mergeData.origVsShards.put(suggestion.getToken(), 1);\n      } else {\n        mergeData.origVsShards.put(suggestion.getToken(), ++origShards);\n      }\n\n      // find best suggestions\n      for (int i = 0; i < suggestion.getNumFound(); i++) {\n        String alternative = suggestion.getAlternatives().get(i);\n        suggested.add(alternative);\n        SuggestWord sug = mergeData.suggestedVsWord.get(alternative);\n        if (sug == null)  {\n          sug = new SuggestWord();\n          mergeData.suggestedVsWord.put(alternative, sug);\n        }\n        sug.string = alternative;\n        // alternative frequency is present only for extendedResults=true\n        if (suggestion.getAlternativeFrequencies() != null\n            && suggestion.getAlternativeFrequencies().size() > 0) {\n          Integer freq = suggestion.getAlternativeFrequencies().get(i);\n          if (freq != null) sug.freq += freq;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardSuggestions(NamedList nl, SpellCheckMergeData mergeData) {\n    SpellCheckResponse spellCheckResp = new SpellCheckResponse(nl);    \n    Iterable<Object> originalTermStrings = (Iterable<Object>) nl.get(\"originalTerms\");\n    if(originalTermStrings!=null) {\n      mergeData.originalTerms = new HashSet<>();\n      for (Object originalTermObj : originalTermStrings) {\n        mergeData.originalTerms.add(originalTermObj.toString());\n      }\n    }\n    for (SpellCheckResponse.Suggestion suggestion : spellCheckResp.getSuggestions()) {\n      mergeData.origVsSuggestion.put(suggestion.getToken(), suggestion);\n      HashSet<String> suggested = mergeData.origVsSuggested.get(suggestion.getToken());\n      if (suggested == null) {\n        suggested = new HashSet<>();\n        mergeData.origVsSuggested.put(suggestion.getToken(), suggested);\n      }\n\n      // sum up original frequency          \n      int origFreq = 0;\n      Integer o = mergeData.origVsFreq.get(suggestion.getToken());\n      if (o != null)  origFreq += o;\n      origFreq += suggestion.getOriginalFrequency();\n      mergeData.origVsFreq.put(suggestion.getToken(), origFreq);\n      \n      //# shards reporting\n      Integer origShards = mergeData.origVsShards.get(suggestion.getToken());\n      if(origShards==null) {\n        mergeData.origVsShards.put(suggestion.getToken(), 1);\n      } else {\n        mergeData.origVsShards.put(suggestion.getToken(), ++origShards);\n      }            \n\n      // find best suggestions\n      for (int i = 0; i < suggestion.getNumFound(); i++) {\n        String alternative = suggestion.getAlternatives().get(i);\n        suggested.add(alternative);\n        SuggestWord sug = mergeData.suggestedVsWord.get(alternative);\n        if (sug == null)  {\n          sug = new SuggestWord();\n          mergeData.suggestedVsWord.put(alternative, sug);\n        }\n        sug.string = alternative;\n        // alternative frequency is present only for extendedResults=true\n        if (suggestion.getAlternativeFrequencies() != null\n            && suggestion.getAlternativeFrequencies().size() > 0) {\n          Integer freq = suggestion.getAlternativeFrequencies().get(i);\n          if (freq != null) sug.freq += freq;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardSuggestions(NamedList,SpellCheckMergeData).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardSuggestions(NamedList,SpellCheckMergeData).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardSuggestions(@SuppressWarnings({\"rawtypes\"})NamedList nl, SpellCheckMergeData mergeData) {\n    SpellCheckResponse spellCheckResp = new SpellCheckResponse(nl);\n    Iterable<Object> originalTermStrings = (Iterable<Object>) nl.get(\"originalTerms\");\n    if(originalTermStrings!=null) {\n      mergeData.originalTerms = new HashSet<>();\n      for (Object originalTermObj : originalTermStrings) {\n        mergeData.originalTerms.add(originalTermObj.toString());\n      }\n    }\n    for (SpellCheckResponse.Suggestion suggestion : spellCheckResp.getSuggestions()) {\n      mergeData.origVsSuggestion.put(suggestion.getToken(), suggestion);\n      HashSet<String> suggested = mergeData.origVsSuggested.get(suggestion.getToken());\n      if (suggested == null) {\n        suggested = new HashSet<>();\n        mergeData.origVsSuggested.put(suggestion.getToken(), suggested);\n      }\n\n      // sum up original frequency          \n      int origFreq = 0;\n      Integer o = mergeData.origVsFreq.get(suggestion.getToken());\n      if (o != null)  origFreq += o;\n      origFreq += suggestion.getOriginalFrequency();\n      mergeData.origVsFreq.put(suggestion.getToken(), origFreq);\n\n      //# shards reporting\n      Integer origShards = mergeData.origVsShards.get(suggestion.getToken());\n      if(origShards==null) {\n        mergeData.origVsShards.put(suggestion.getToken(), 1);\n      } else {\n        mergeData.origVsShards.put(suggestion.getToken(), ++origShards);\n      }\n\n      // find best suggestions\n      for (int i = 0; i < suggestion.getNumFound(); i++) {\n        String alternative = suggestion.getAlternatives().get(i);\n        suggested.add(alternative);\n        SuggestWord sug = mergeData.suggestedVsWord.get(alternative);\n        if (sug == null)  {\n          sug = new SuggestWord();\n          mergeData.suggestedVsWord.put(alternative, sug);\n        }\n        sug.string = alternative;\n        // alternative frequency is present only for extendedResults=true\n        if (suggestion.getAlternativeFrequencies() != null\n            && suggestion.getAlternativeFrequencies().size() > 0) {\n          Integer freq = suggestion.getAlternativeFrequencies().get(i);\n          if (freq != null) sug.freq += freq;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardSuggestions(NamedList nl, SpellCheckMergeData mergeData) {\n    SpellCheckResponse spellCheckResp = new SpellCheckResponse(nl);\n    Iterable<Object> originalTermStrings = (Iterable<Object>) nl.get(\"originalTerms\");\n    if(originalTermStrings!=null) {\n      mergeData.originalTerms = new HashSet<>();\n      for (Object originalTermObj : originalTermStrings) {\n        mergeData.originalTerms.add(originalTermObj.toString());\n      }\n    }\n    for (SpellCheckResponse.Suggestion suggestion : spellCheckResp.getSuggestions()) {\n      mergeData.origVsSuggestion.put(suggestion.getToken(), suggestion);\n      HashSet<String> suggested = mergeData.origVsSuggested.get(suggestion.getToken());\n      if (suggested == null) {\n        suggested = new HashSet<>();\n        mergeData.origVsSuggested.put(suggestion.getToken(), suggested);\n      }\n\n      // sum up original frequency          \n      int origFreq = 0;\n      Integer o = mergeData.origVsFreq.get(suggestion.getToken());\n      if (o != null)  origFreq += o;\n      origFreq += suggestion.getOriginalFrequency();\n      mergeData.origVsFreq.put(suggestion.getToken(), origFreq);\n\n      //# shards reporting\n      Integer origShards = mergeData.origVsShards.get(suggestion.getToken());\n      if(origShards==null) {\n        mergeData.origVsShards.put(suggestion.getToken(), 1);\n      } else {\n        mergeData.origVsShards.put(suggestion.getToken(), ++origShards);\n      }\n\n      // find best suggestions\n      for (int i = 0; i < suggestion.getNumFound(); i++) {\n        String alternative = suggestion.getAlternatives().get(i);\n        suggested.add(alternative);\n        SuggestWord sug = mergeData.suggestedVsWord.get(alternative);\n        if (sug == null)  {\n          sug = new SuggestWord();\n          mergeData.suggestedVsWord.put(alternative, sug);\n        }\n        sug.string = alternative;\n        // alternative frequency is present only for extendedResults=true\n        if (suggestion.getAlternativeFrequencies() != null\n            && suggestion.getAlternativeFrequencies().size() > 0) {\n          Integer freq = suggestion.getAlternativeFrequencies().get(i);\n          if (freq != null) sug.freq += freq;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["541f6605a29362fa8a42f33b69069e7da5178034"],"8e65acce892eede973379cb2fb3b90ea49a4a5ed":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5","541f6605a29362fa8a42f33b69069e7da5178034"],"51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90":["8e65acce892eede973379cb2fb3b90ea49a4a5ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90"],"541f6605a29362fa8a42f33b69069e7da5178034":["51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"8e65acce892eede973379cb2fb3b90ea49a4a5ed":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["8e65acce892eede973379cb2fb3b90ea49a4a5ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5"],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5":["3599646b4d4c346cf74d334813488b8b337b5bf5","541f6605a29362fa8a42f33b69069e7da5178034"],"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"541f6605a29362fa8a42f33b69069e7da5178034":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","3599646b4d4c346cf74d334813488b8b337b5bf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3599646b4d4c346cf74d334813488b8b337b5bf5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}