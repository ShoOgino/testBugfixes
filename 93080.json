{"path":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,int).mjava","commits":[{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher, int postingsFlags)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = (postingsFlags & PostingsEnum.FLAG_FREQS) != 0;\n      this.postingsFlags = postingsFlags | PostingsEnum.FLAG_POSITIONS;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher,int).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher, boolean needsScores)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = needsScores;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher, int postingsFlags)\n      throws IOException {\n      super(MultiPhraseQuery.this);\n      this.needsScores = (postingsFlags & PostingsEnum.FLAG_FREQS) != 0;\n      this.postingsFlags = postingsFlags | PostingsEnum.FLAG_POSITIONS;\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"954e59be3da8dc1b046646ad7af4b466852009d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a47d642ab24da1a811adce4bda9cc52c520ca13"]},"commit2Childs":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["954e59be3da8dc1b046646ad7af4b466852009d3"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}