{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#toString().mjava","commits":[{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#toString().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String toString() {\n    final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream out;\n    try {\n      out = new PrintStream(bos, false, IOUtils.UTF_8);\n    } catch (UnsupportedEncodingException bogus) {\n      throw new RuntimeException(bogus);\n    }\n      \n    out.println(\"  index FST:\");\n    out.println(\"    \" + indexNodeCount + \" nodes\");\n    out.println(\"    \" + indexArcCount + \" arcs\");\n    out.println(\"    \" + indexNumBytes + \" bytes\");\n    out.println(\"  terms:\");\n    out.println(\"    \" + totalTermCount + \" terms\");\n    out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n    out.println(\"  blocks:\");\n    out.println(\"    \" + totalBlockCount + \" blocks\");\n    out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n    out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n    out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n    out.println(\"    \" + floorBlockCount + \" floor blocks\");\n    out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n    out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n    out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n    out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n    out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n    if (totalBlockCount != 0) {\n      out.println(\"    by prefix length:\");\n      int total = 0;\n      for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n        final int blockCount = blockCountByPrefixLen[prefix];\n        total += blockCount;\n        if (blockCount != 0) {\n          out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n        }\n      }\n      assert totalBlockCount == total;\n    }\n\n    try {\n      return bos.toString(IOUtils.UTF_8);\n    } catch (UnsupportedEncodingException bogus) {\n      throw new RuntimeException(bogus);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#toString().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String toString() {\n    final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream out;\n    try {\n      out = new PrintStream(bos, false, IOUtils.UTF_8);\n    } catch (UnsupportedEncodingException bogus) {\n      throw new RuntimeException(bogus);\n    }\n      \n    out.println(\"  index FST:\");\n    out.println(\"    \" + indexNodeCount + \" nodes\");\n    out.println(\"    \" + indexArcCount + \" arcs\");\n    out.println(\"    \" + indexNumBytes + \" bytes\");\n    out.println(\"  terms:\");\n    out.println(\"    \" + totalTermCount + \" terms\");\n    out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n    out.println(\"  blocks:\");\n    out.println(\"    \" + totalBlockCount + \" blocks\");\n    out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n    out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n    out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n    out.println(\"    \" + floorBlockCount + \" floor blocks\");\n    out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n    out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n    out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n    out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n    out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n    if (totalBlockCount != 0) {\n      out.println(\"    by prefix length:\");\n      int total = 0;\n      for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n        final int blockCount = blockCountByPrefixLen[prefix];\n        total += blockCount;\n        if (blockCount != 0) {\n          out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n        }\n      }\n      assert totalBlockCount == total;\n    }\n\n    try {\n      return bos.toString(IOUtils.UTF_8);\n    } catch (UnsupportedEncodingException bogus) {\n      throw new RuntimeException(bogus);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1abb939fb41b2fe4f89fd518f3da288c0213341d","date":1435657417,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream out;\n    try {\n      out = new PrintStream(bos, false, IOUtils.UTF_8);\n    } catch (UnsupportedEncodingException bogus) {\n      throw new RuntimeException(bogus);\n    }\n      \n    out.println(\"  index FST:\");\n    out.println(\"    \" + indexNumBytes + \" bytes\");\n    out.println(\"  terms:\");\n    out.println(\"    \" + totalTermCount + \" terms\");\n    out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n    out.println(\"  blocks:\");\n    out.println(\"    \" + totalBlockCount + \" blocks\");\n    out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n    out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n    out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n    out.println(\"    \" + floorBlockCount + \" floor blocks\");\n    out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n    out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n    out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n    out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n    out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n    if (totalBlockCount != 0) {\n      out.println(\"    by prefix length:\");\n      int total = 0;\n      for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n        final int blockCount = blockCountByPrefixLen[prefix];\n        total += blockCount;\n        if (blockCount != 0) {\n          out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n        }\n      }\n      assert totalBlockCount == total;\n    }\n\n    try {\n      return bos.toString(IOUtils.UTF_8);\n    } catch (UnsupportedEncodingException bogus) {\n      throw new RuntimeException(bogus);\n    }\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream out;\n    try {\n      out = new PrintStream(bos, false, IOUtils.UTF_8);\n    } catch (UnsupportedEncodingException bogus) {\n      throw new RuntimeException(bogus);\n    }\n      \n    out.println(\"  index FST:\");\n    out.println(\"    \" + indexNodeCount + \" nodes\");\n    out.println(\"    \" + indexArcCount + \" arcs\");\n    out.println(\"    \" + indexNumBytes + \" bytes\");\n    out.println(\"  terms:\");\n    out.println(\"    \" + totalTermCount + \" terms\");\n    out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n    out.println(\"  blocks:\");\n    out.println(\"    \" + totalBlockCount + \" blocks\");\n    out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n    out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n    out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n    out.println(\"    \" + floorBlockCount + \" floor blocks\");\n    out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n    out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n    out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n    out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n    out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n    if (totalBlockCount != 0) {\n      out.println(\"    by prefix length:\");\n      int total = 0;\n      for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n        final int blockCount = blockCountByPrefixLen[prefix];\n        total += blockCount;\n        if (blockCount != 0) {\n          out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n        }\n      }\n      assert totalBlockCount == total;\n    }\n\n    try {\n      return bos.toString(IOUtils.UTF_8);\n    } catch (UnsupportedEncodingException bogus) {\n      throw new RuntimeException(bogus);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9407318969e8504257b4c5764c65755a043e5404","date":1579873617,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream out;\n    try {\n      out = new PrintStream(bos, false, IOUtils.UTF_8);\n    } catch (UnsupportedEncodingException bogus) {\n      throw new RuntimeException(bogus);\n    }\n      \n    out.println(\"  index FST:\");\n    out.println(\"    \" + indexNumBytes + \" bytes\");\n    out.println(\"  terms:\");\n    out.println(\"    \" + totalTermCount + \" terms\");\n    out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n    out.println(\"  blocks:\");\n    out.println(\"    \" + totalBlockCount + \" blocks\");\n    out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n    out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n    out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n    out.println(\"    \" + floorBlockCount + \" floor blocks\");\n    out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n    out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n    out.println(\"    \" + totalUncompressedBlockSuffixBytes + \" term suffix bytes before compression\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n    StringBuilder compressionCounts = new StringBuilder();\n    for (int code = 0; code < compressionAlgorithms.length; ++code) {\n      if (compressionAlgorithms[code] == 0) {\n        continue;\n      }\n      if (compressionCounts.length() > 0) {\n        compressionCounts.append(\", \");\n      }\n      compressionCounts.append(CompressionAlgorithm.byCode(code));\n      compressionCounts.append(\": \");\n      compressionCounts.append(compressionAlgorithms[code]);\n    }\n    out.println(\"    \" + totalBlockSuffixBytes + \" compressed term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.2f\", ((double) totalBlockSuffixBytes)/totalUncompressedBlockSuffixBytes) +\n        \" compression ratio - compression count by algorithm: \" + compressionCounts : \"\") + \")\");\n    out.println(\"    \" + totalUncompressedBlockStatsBytes + \" term stats bytes before compression\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalUncompressedBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n    out.println(\"    \" + totalBlockStatsBytes + \" compressed term stats bytes (\" + String.format(Locale.ROOT, \"%.2f\", (double)totalBlockStatsBytes / totalUncompressedBlockStatsBytes) + \" compression ratio)\");\n    out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n    if (totalBlockCount != 0) {\n      out.println(\"    by prefix length:\");\n      int total = 0;\n      for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n        final int blockCount = blockCountByPrefixLen[prefix];\n        total += blockCount;\n        if (blockCount != 0) {\n          out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n        }\n      }\n      assert totalBlockCount == total;\n    }\n\n    try {\n      return bos.toString(IOUtils.UTF_8);\n    } catch (UnsupportedEncodingException bogus) {\n      throw new RuntimeException(bogus);\n    }\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream out;\n    try {\n      out = new PrintStream(bos, false, IOUtils.UTF_8);\n    } catch (UnsupportedEncodingException bogus) {\n      throw new RuntimeException(bogus);\n    }\n      \n    out.println(\"  index FST:\");\n    out.println(\"    \" + indexNumBytes + \" bytes\");\n    out.println(\"  terms:\");\n    out.println(\"    \" + totalTermCount + \" terms\");\n    out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n    out.println(\"  blocks:\");\n    out.println(\"    \" + totalBlockCount + \" blocks\");\n    out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n    out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n    out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n    out.println(\"    \" + floorBlockCount + \" floor blocks\");\n    out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n    out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n    out.println(\"    \" + totalBlockSuffixBytes + \" term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n    out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n    out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n    if (totalBlockCount != 0) {\n      out.println(\"    by prefix length:\");\n      int total = 0;\n      for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n        final int blockCount = blockCountByPrefixLen[prefix];\n        total += blockCount;\n        if (blockCount != 0) {\n          out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n        }\n      }\n      assert totalBlockCount == total;\n    }\n\n    try {\n      return bos.toString(IOUtils.UTF_8);\n    } catch (UnsupportedEncodingException bogus) {\n      throw new RuntimeException(bogus);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a356e37aed258bcd168680472f8d1dbc6f396935","date":1580233110,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/Stats#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream out;\n    try {\n      out = new PrintStream(bos, false, IOUtils.UTF_8);\n    } catch (UnsupportedEncodingException bogus) {\n      throw new RuntimeException(bogus);\n    }\n      \n    out.println(\"  index FST:\");\n    out.println(\"    \" + indexNumBytes + \" bytes\");\n    out.println(\"  terms:\");\n    out.println(\"    \" + totalTermCount + \" terms\");\n    out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n    out.println(\"  blocks:\");\n    out.println(\"    \" + totalBlockCount + \" blocks\");\n    out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n    out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n    out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n    out.println(\"    \" + floorBlockCount + \" floor blocks\");\n    out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n    out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n    out.println(\"    \" + totalUncompressedBlockSuffixBytes + \" term suffix bytes before compression\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n    StringBuilder compressionCounts = new StringBuilder();\n    for (int code = 0; code < compressionAlgorithms.length; ++code) {\n      if (compressionAlgorithms[code] == 0) {\n        continue;\n      }\n      if (compressionCounts.length() > 0) {\n        compressionCounts.append(\", \");\n      }\n      compressionCounts.append(CompressionAlgorithm.byCode(code));\n      compressionCounts.append(\": \");\n      compressionCounts.append(compressionAlgorithms[code]);\n    }\n    out.println(\"    \" + totalBlockSuffixBytes + \" compressed term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.2f\", ((double) totalBlockSuffixBytes)/totalUncompressedBlockSuffixBytes) +\n        \" compression ratio - compression count by algorithm: \" + compressionCounts : \"\") + \")\");\n    out.println(\"    \" + totalBlockStatsBytes + \" term stats bytes \" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n    out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n    if (totalBlockCount != 0) {\n      out.println(\"    by prefix length:\");\n      int total = 0;\n      for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n        final int blockCount = blockCountByPrefixLen[prefix];\n        total += blockCount;\n        if (blockCount != 0) {\n          out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n        }\n      }\n      assert totalBlockCount == total;\n    }\n\n    try {\n      return bos.toString(IOUtils.UTF_8);\n    } catch (UnsupportedEncodingException bogus) {\n      throw new RuntimeException(bogus);\n    }\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    final ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    PrintStream out;\n    try {\n      out = new PrintStream(bos, false, IOUtils.UTF_8);\n    } catch (UnsupportedEncodingException bogus) {\n      throw new RuntimeException(bogus);\n    }\n      \n    out.println(\"  index FST:\");\n    out.println(\"    \" + indexNumBytes + \" bytes\");\n    out.println(\"  terms:\");\n    out.println(\"    \" + totalTermCount + \" terms\");\n    out.println(\"    \" + totalTermBytes + \" bytes\" + (totalTermCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalTermBytes)/totalTermCount) + \" bytes/term)\" : \"\"));\n    out.println(\"  blocks:\");\n    out.println(\"    \" + totalBlockCount + \" blocks\");\n    out.println(\"    \" + termsOnlyBlockCount + \" terms-only blocks\");\n    out.println(\"    \" + subBlocksOnlyBlockCount + \" sub-block-only blocks\");\n    out.println(\"    \" + mixedBlockCount + \" mixed blocks\");\n    out.println(\"    \" + floorBlockCount + \" floor blocks\");\n    out.println(\"    \" + (totalBlockCount-floorSubBlockCount) + \" non-floor blocks\");\n    out.println(\"    \" + floorSubBlockCount + \" floor sub-blocks\");\n    out.println(\"    \" + totalUncompressedBlockSuffixBytes + \" term suffix bytes before compression\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockSuffixBytes)/totalBlockCount) + \" suffix-bytes/block)\" : \"\"));\n    StringBuilder compressionCounts = new StringBuilder();\n    for (int code = 0; code < compressionAlgorithms.length; ++code) {\n      if (compressionAlgorithms[code] == 0) {\n        continue;\n      }\n      if (compressionCounts.length() > 0) {\n        compressionCounts.append(\", \");\n      }\n      compressionCounts.append(CompressionAlgorithm.byCode(code));\n      compressionCounts.append(\": \");\n      compressionCounts.append(compressionAlgorithms[code]);\n    }\n    out.println(\"    \" + totalBlockSuffixBytes + \" compressed term suffix bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.2f\", ((double) totalBlockSuffixBytes)/totalUncompressedBlockSuffixBytes) +\n        \" compression ratio - compression count by algorithm: \" + compressionCounts : \"\") + \")\");\n    out.println(\"    \" + totalUncompressedBlockStatsBytes + \" term stats bytes before compression\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalUncompressedBlockStatsBytes)/totalBlockCount) + \" stats-bytes/block)\" : \"\"));\n    out.println(\"    \" + totalBlockStatsBytes + \" compressed term stats bytes (\" + String.format(Locale.ROOT, \"%.2f\", (double)totalBlockStatsBytes / totalUncompressedBlockStatsBytes) + \" compression ratio)\");\n    out.println(\"    \" + totalBlockOtherBytes + \" other bytes\" + (totalBlockCount != 0 ? \" (\" + String.format(Locale.ROOT, \"%.1f\", ((double) totalBlockOtherBytes)/totalBlockCount) + \" other-bytes/block)\" : \"\"));\n    if (totalBlockCount != 0) {\n      out.println(\"    by prefix length:\");\n      int total = 0;\n      for(int prefix=0;prefix<blockCountByPrefixLen.length;prefix++) {\n        final int blockCount = blockCountByPrefixLen[prefix];\n        total += blockCount;\n        if (blockCount != 0) {\n          out.println(\"      \" + String.format(Locale.ROOT, \"%2d\", prefix) + \": \" + blockCount);\n        }\n      }\n      assert totalBlockCount == total;\n    }\n\n    try {\n      return bos.toString(IOUtils.UTF_8);\n    } catch (UnsupportedEncodingException bogus) {\n      throw new RuntimeException(bogus);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1abb939fb41b2fe4f89fd518f3da288c0213341d":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9407318969e8504257b4c5764c65755a043e5404":["1abb939fb41b2fe4f89fd518f3da288c0213341d"],"a356e37aed258bcd168680472f8d1dbc6f396935":["9407318969e8504257b4c5764c65755a043e5404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a356e37aed258bcd168680472f8d1dbc6f396935"]},"commit2Childs":{"1abb939fb41b2fe4f89fd518f3da288c0213341d":["9407318969e8504257b4c5764c65755a043e5404"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["1abb939fb41b2fe4f89fd518f3da288c0213341d"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"9407318969e8504257b4c5764c65755a043e5404":["a356e37aed258bcd168680472f8d1dbc6f396935"],"a356e37aed258bcd168680472f8d1dbc6f396935":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}