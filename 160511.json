{"path":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  public final void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    int start = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = start + length;\n    if (preUTF8Strings) {\n      text.setLength(totalLength);\n      input.readChars(text.result, start, length);\n    } else {\n\n      if (dirty) {\n        // Fully convert all bytes since bytes is dirty\n        UnicodeUtil.UTF16toUTF8(text.result, 0, text.length, bytes);\n        if (bytes.bytes.length < totalLength)\n          bytes.bytes = new byte[totalLength];\n        bytes.length = totalLength;\n        input.readBytes(bytes.bytes, start, length);\n        UnicodeUtil.UTF8toUTF16(bytes.bytes, 0, totalLength, text);\n        dirty = false;\n      } else {\n        // Incrementally convert only the UTF8 bytes that are new:\n        if (bytes.bytes.length < totalLength)\n          bytes.bytes = ArrayUtil.grow(bytes.bytes, totalLength);\n        bytes.length = totalLength;\n        input.readBytes(bytes.bytes, start, length);\n        UnicodeUtil.UTF8toUTF16(bytes.bytes, start, length, text);\n      }\n    }\n    this.field = fieldInfos.fieldName(input.readVInt());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","sourceNew":"  public final void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    int start = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = start + length;\n    if (dirty) {\n      // Fully convert all bytes since bytes is dirty\n      UnicodeUtil.UTF16toUTF8(text.result, 0, text.length, bytes);\n      if (bytes.bytes.length < totalLength)\n        bytes.bytes = new byte[totalLength];\n      bytes.length = totalLength;\n      input.readBytes(bytes.bytes, start, length);\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, 0, totalLength, text);\n      dirty = false;\n    } else {\n      // Incrementally convert only the UTF8 bytes that are new:\n      if (bytes.bytes.length < totalLength)\n        bytes.bytes = ArrayUtil.grow(bytes.bytes, totalLength);\n      bytes.length = totalLength;\n      input.readBytes(bytes.bytes, start, length);\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, start, length, text);\n    }\n    this.field = fieldInfos.fieldName(input.readVInt());\n  }\n\n","sourceOld":"  public final void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    int start = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = start + length;\n    if (preUTF8Strings) {\n      text.setLength(totalLength);\n      input.readChars(text.result, start, length);\n    } else {\n\n      if (dirty) {\n        // Fully convert all bytes since bytes is dirty\n        UnicodeUtil.UTF16toUTF8(text.result, 0, text.length, bytes);\n        if (bytes.bytes.length < totalLength)\n          bytes.bytes = new byte[totalLength];\n        bytes.length = totalLength;\n        input.readBytes(bytes.bytes, start, length);\n        UnicodeUtil.UTF8toUTF16(bytes.bytes, 0, totalLength, text);\n        dirty = false;\n      } else {\n        // Incrementally convert only the UTF8 bytes that are new:\n        if (bytes.bytes.length < totalLength)\n          bytes.bytes = ArrayUtil.grow(bytes.bytes, totalLength);\n        bytes.length = totalLength;\n        input.readBytes(bytes.bytes, start, length);\n        UnicodeUtil.UTF8toUTF16(bytes.bytes, start, length, text);\n      }\n    }\n    this.field = fieldInfos.fieldName(input.readVInt());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","sourceNew":"  public final void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    int start = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = start + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    if (dirty) {\n      // Fully convert all bytes since bytes is dirty\n      UnicodeUtil.UTF16toUTF8(text.result, 0, text.length, bytes);\n      bytes.length = totalLength;\n      input.readBytes(bytes.bytes, start, length);\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, 0, totalLength, text);\n      dirty = false;\n    } else {\n      // Incrementally convert only the UTF8 bytes that are new:\n      bytes.length = totalLength;\n      input.readBytes(bytes.bytes, start, length);\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, start, length, text);\n    }\n\n    while(true) {\n      newSuffixStart = text.offsets[start];\n      if (newSuffixStart != -1) {\n        break;\n      }\n      if (--start == 0) {\n        newSuffixStart = 0;\n        break;\n      }\n    }\n    this.field = fieldInfos.fieldName(input.readVInt());\n  }\n\n","sourceOld":"  public final void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    int start = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = start + length;\n    if (dirty) {\n      // Fully convert all bytes since bytes is dirty\n      UnicodeUtil.UTF16toUTF8(text.result, 0, text.length, bytes);\n      if (bytes.bytes.length < totalLength)\n        bytes.bytes = new byte[totalLength];\n      bytes.length = totalLength;\n      input.readBytes(bytes.bytes, start, length);\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, 0, totalLength, text);\n      dirty = false;\n    } else {\n      // Incrementally convert only the UTF8 bytes that are new:\n      if (bytes.bytes.length < totalLength)\n        bytes.bytes = ArrayUtil.grow(bytes.bytes, totalLength);\n      bytes.length = totalLength;\n      input.readBytes(bytes.bytes, start, length);\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, start, length, text);\n    }\n    this.field = fieldInfos.fieldName(input.readVInt());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","sourceNew":"  public final void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    int start = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = start + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    if (dirty) {\n      // Fully convert all bytes since bytes is dirty\n      UnicodeUtil.UTF16toUTF8(text.result, 0, text.length, bytes);\n      bytes.length = totalLength;\n      input.readBytes(bytes.bytes, start, length);\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, 0, totalLength, text);\n      dirty = false;\n    } else {\n      // Incrementally convert only the UTF8 bytes that are new:\n      bytes.length = totalLength;\n      input.readBytes(bytes.bytes, start, length);\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, start, length, text);\n    }\n\n    while(true) {\n      newSuffixStart = text.offsets[start];\n      if (newSuffixStart != -1) {\n        break;\n      }\n      if (--start == 0) {\n        newSuffixStart = 0;\n        break;\n      }\n    }\n    this.field = fieldInfos.fieldName(input.readVInt());\n  }\n\n","sourceOld":"  public final void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    int start = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = start + length;\n    if (dirty) {\n      // Fully convert all bytes since bytes is dirty\n      UnicodeUtil.UTF16toUTF8(text.result, 0, text.length, bytes);\n      if (bytes.bytes.length < totalLength)\n        bytes.bytes = new byte[totalLength];\n      bytes.length = totalLength;\n      input.readBytes(bytes.bytes, start, length);\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, 0, totalLength, text);\n      dirty = false;\n    } else {\n      // Incrementally convert only the UTF8 bytes that are new:\n      if (bytes.bytes.length < totalLength)\n        bytes.bytes = ArrayUtil.grow(bytes.bytes, totalLength);\n      bytes.length = totalLength;\n      input.readBytes(bytes.bytes, start, length);\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, start, length, text);\n    }\n    this.field = fieldInfos.fieldName(input.readVInt());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","sourceNew":"  public void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    newSuffixStart = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = newSuffixStart + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    bytes.length = totalLength;\n    input.readBytes(bytes.bytes, newSuffixStart, length);\n    this.field = fieldInfos.fieldName(input.readVInt());\n  }\n\n","sourceOld":"  public final void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    int start = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = start + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    if (dirty) {\n      // Fully convert all bytes since bytes is dirty\n      UnicodeUtil.UTF16toUTF8(text.result, 0, text.length, bytes);\n      bytes.length = totalLength;\n      input.readBytes(bytes.bytes, start, length);\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, 0, totalLength, text);\n      dirty = false;\n    } else {\n      // Incrementally convert only the UTF8 bytes that are new:\n      bytes.length = totalLength;\n      input.readBytes(bytes.bytes, start, length);\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, start, length, text);\n    }\n\n    while(true) {\n      newSuffixStart = text.offsets[start];\n      if (newSuffixStart != -1) {\n        break;\n      }\n      if (--start == 0) {\n        newSuffixStart = 0;\n        break;\n      }\n    }\n    this.field = fieldInfos.fieldName(input.readVInt());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","sourceNew":"  public void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    newSuffixStart = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = newSuffixStart + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    bytes.length = totalLength;\n    input.readBytes(bytes.bytes, newSuffixStart, length);\n    this.field = fieldInfos.fieldName(input.readVInt());\n  }\n\n","sourceOld":"  public final void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    int start = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = start + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    if (dirty) {\n      // Fully convert all bytes since bytes is dirty\n      UnicodeUtil.UTF16toUTF8(text.result, 0, text.length, bytes);\n      bytes.length = totalLength;\n      input.readBytes(bytes.bytes, start, length);\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, 0, totalLength, text);\n      dirty = false;\n    } else {\n      // Incrementally convert only the UTF8 bytes that are new:\n      bytes.length = totalLength;\n      input.readBytes(bytes.bytes, start, length);\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, start, length, text);\n    }\n\n    while(true) {\n      newSuffixStart = text.offsets[start];\n      if (newSuffixStart != -1) {\n        break;\n      }\n      if (--start == 0) {\n        newSuffixStart = 0;\n        break;\n      }\n    }\n    this.field = fieldInfos.fieldName(input.readVInt());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","sourceNew":"  public void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    newSuffixStart = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = newSuffixStart + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    bytes.length = totalLength;\n    input.readBytes(bytes.bytes, newSuffixStart, length);\n    this.field = fieldInfos.fieldName(input.readVInt());\n  }\n\n","sourceOld":"  public final void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    int start = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = start + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    if (dirty) {\n      // Fully convert all bytes since bytes is dirty\n      UnicodeUtil.UTF16toUTF8(text.result, 0, text.length, bytes);\n      bytes.length = totalLength;\n      input.readBytes(bytes.bytes, start, length);\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, 0, totalLength, text);\n      dirty = false;\n    } else {\n      // Incrementally convert only the UTF8 bytes that are new:\n      bytes.length = totalLength;\n      input.readBytes(bytes.bytes, start, length);\n      UnicodeUtil.UTF8toUTF16(bytes.bytes, start, length, text);\n    }\n\n    while(true) {\n      newSuffixStart = text.offsets[start];\n      if (newSuffixStart != -1) {\n        break;\n      }\n      if (--start == 0) {\n        newSuffixStart = 0;\n        break;\n      }\n    }\n    this.field = fieldInfos.fieldName(input.readVInt());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","sourceNew":"  public void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    newSuffixStart = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = newSuffixStart + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    bytes.length = totalLength;\n    input.readBytes(bytes.bytes, newSuffixStart, length);\n    final int fieldNumber = input.readVInt();\n    if (fieldNumber != currentFieldNumber) {\n      currentFieldNumber = fieldNumber;\n      field = fieldInfos.fieldName(currentFieldNumber).intern();\n    } else {\n      assert field.equals(fieldInfos.fieldName(fieldNumber)): \"currentFieldNumber=\" + currentFieldNumber + \" field=\" + field + \" vs \" + fieldInfos.fieldName(fieldNumber);\n    }\n  }\n\n","sourceOld":"  public void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    newSuffixStart = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = newSuffixStart + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    bytes.length = totalLength;\n    input.readBytes(bytes.bytes, newSuffixStart, length);\n    this.field = fieldInfos.fieldName(input.readVInt());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","sourceNew":"  public void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    newSuffixStart = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = newSuffixStart + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    bytes.length = totalLength;\n    input.readBytes(bytes.bytes, newSuffixStart, length);\n    final int fieldNumber = input.readVInt();\n    if (fieldNumber != currentFieldNumber) {\n      currentFieldNumber = fieldNumber;\n      field = fieldInfos.fieldName(currentFieldNumber).intern();\n    } else {\n      assert field.equals(fieldInfos.fieldName(fieldNumber)): \"currentFieldNumber=\" + currentFieldNumber + \" field=\" + field + \" vs \" + fieldInfos.fieldName(fieldNumber);\n    }\n  }\n\n","sourceOld":"  public void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    newSuffixStart = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = newSuffixStart + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    bytes.length = totalLength;\n    input.readBytes(bytes.bytes, newSuffixStart, length);\n    this.field = fieldInfos.fieldName(input.readVInt());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","sourceNew":"  public void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    newSuffixStart = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = newSuffixStart + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    bytes.length = totalLength;\n    input.readBytes(bytes.bytes, newSuffixStart, length);\n    final int fieldNumber = input.readVInt();\n    if (fieldNumber != currentFieldNumber) {\n      currentFieldNumber = fieldNumber;\n      field = fieldInfos.fieldName(currentFieldNumber).intern();\n    } else {\n      assert field.equals(fieldInfos.fieldName(fieldNumber)): \"currentFieldNumber=\" + currentFieldNumber + \" field=\" + field + \" vs \" + fieldInfos.fieldName(fieldNumber);\n    }\n  }\n\n","sourceOld":"  public void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    newSuffixStart = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = newSuffixStart + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    bytes.length = totalLength;\n    input.readBytes(bytes.bytes, newSuffixStart, length);\n    this.field = fieldInfos.fieldName(input.readVInt());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene3x/TermBuffer#read(IndexInput,FieldInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermBuffer#read(IndexInput,FieldInfos).mjava","sourceNew":"  public void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    newSuffixStart = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = newSuffixStart + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    bytes.length = totalLength;\n    input.readBytes(bytes.bytes, newSuffixStart, length);\n    final int fieldNumber = input.readVInt();\n    if (fieldNumber != currentFieldNumber) {\n      currentFieldNumber = fieldNumber;\n      field = fieldInfos.fieldName(currentFieldNumber).intern();\n    } else {\n      assert field.equals(fieldInfos.fieldName(fieldNumber)): \"currentFieldNumber=\" + currentFieldNumber + \" field=\" + field + \" vs \" + fieldInfos.fieldName(fieldNumber);\n    }\n  }\n\n","sourceOld":"  public void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    newSuffixStart = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = newSuffixStart + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    bytes.length = totalLength;\n    input.readBytes(bytes.bytes, newSuffixStart, length);\n    final int fieldNumber = input.readVInt();\n    if (fieldNumber != currentFieldNumber) {\n      currentFieldNumber = fieldNumber;\n      field = fieldInfos.fieldName(currentFieldNumber).intern();\n    } else {\n      assert field.equals(fieldInfos.fieldName(fieldNumber)): \"currentFieldNumber=\" + currentFieldNumber + \" field=\" + field + \" vs \" + fieldInfos.fieldName(fieldNumber);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["08932c793647a36953d1816b1060121f48820d3f","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["08932c793647a36953d1816b1060121f48820d3f"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["6267e1ce56c2eec111425690cd04e251b6f14952","08932c793647a36953d1816b1060121f48820d3f"],"2553b00f699380c64959ccb27991289aae87be2e":["4b103252dee6afa1b6d7a622c773d178788eb85a","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["4b103252dee6afa1b6d7a622c773d178788eb85a","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"7b91922b55d15444d554721b352861d028eb8278":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"6267e1ce56c2eec111425690cd04e251b6f14952":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"08932c793647a36953d1816b1060121f48820d3f":["6267e1ce56c2eec111425690cd04e251b6f14952"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"3242a09f703274d3b9283f2064a1a33064b53a1b":[],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","7b91922b55d15444d554721b352861d028eb8278"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["6267e1ce56c2eec111425690cd04e251b6f14952"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"6267e1ce56c2eec111425690cd04e251b6f14952":["5f4e87790277826a2aea119328600dfb07761f32","08932c793647a36953d1816b1060121f48820d3f"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08932c793647a36953d1816b1060121f48820d3f":["4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3242a09f703274d3b9283f2064a1a33064b53a1b","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}