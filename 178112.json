{"path":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/RussianStemmer#r_adjectival().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/RussianStemmer#r_adjectival().mjava","pathOld":"modules/analysis/common/src/java/org/tartarus/snowball/ext/RussianStemmer#r_adjectival().mjava","sourceNew":"        private boolean r_adjectival() {\n            int among_var;\n            int v_1;\n            int v_2;\n            // (, line 101\n            // call adjective, line 102\n            if (!r_adjective())\n            {\n                return false;\n            }\n            // try, line 109\n            v_1 = limit - cursor;\n            lab0: do {\n                // (, line 109\n                // [, line 110\n                ket = cursor;\n                // substring, line 110\n                among_var = find_among_b(a_2, 8);\n                if (among_var == 0)\n                {\n                    cursor = limit - v_1;\n                    break lab0;\n                }\n                // ], line 110\n                bra = cursor;\n                switch(among_var) {\n                    case 0:\n                        cursor = limit - v_1;\n                        break lab0;\n                    case 1:\n                        // (, line 115\n                        // or, line 115\n                        lab1: do {\n                            v_2 = limit - cursor;\n                            lab2: do {\n                                // literal, line 115\n                                if (!(eq_s_b(1, \"\\u0430\")))\n                                {\n                                    break lab2;\n                                }\n                                break lab1;\n                            } while (false);\n                            cursor = limit - v_2;\n                            // literal, line 115\n                            if (!(eq_s_b(1, \"\\u044F\")))\n                            {\n                                cursor = limit - v_1;\n                                break lab0;\n                            }\n                        } while (false);\n                        // delete, line 115\n                        slice_del();\n                        break;\n                    case 2:\n                        // (, line 122\n                        // delete, line 122\n                        slice_del();\n                        break;\n                }\n            } while (false);\n            return true;\n        }\n\n","sourceOld":"        private boolean r_adjectival() {\n            int among_var;\n            int v_1;\n            int v_2;\n            // (, line 101\n            // call adjective, line 102\n            if (!r_adjective())\n            {\n                return false;\n            }\n            // try, line 109\n            v_1 = limit - cursor;\n            lab0: do {\n                // (, line 109\n                // [, line 110\n                ket = cursor;\n                // substring, line 110\n                among_var = find_among_b(a_2, 8);\n                if (among_var == 0)\n                {\n                    cursor = limit - v_1;\n                    break lab0;\n                }\n                // ], line 110\n                bra = cursor;\n                switch(among_var) {\n                    case 0:\n                        cursor = limit - v_1;\n                        break lab0;\n                    case 1:\n                        // (, line 115\n                        // or, line 115\n                        lab1: do {\n                            v_2 = limit - cursor;\n                            lab2: do {\n                                // literal, line 115\n                                if (!(eq_s_b(1, \"\\u0430\")))\n                                {\n                                    break lab2;\n                                }\n                                break lab1;\n                            } while (false);\n                            cursor = limit - v_2;\n                            // literal, line 115\n                            if (!(eq_s_b(1, \"\\u044F\")))\n                            {\n                                cursor = limit - v_1;\n                                break lab0;\n                            }\n                        } while (false);\n                        // delete, line 115\n                        slice_del();\n                        break;\n                    case 2:\n                        // (, line 122\n                        // delete, line 122\n                        slice_del();\n                        break;\n                }\n            } while (false);\n            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a6a9e301c12ab07b1d0428b5aad813fff317b3","date":1343846505,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/RussianStemmer#r_adjectival().mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/RussianStemmer#r_adjectival().mjava","sourceNew":"                private boolean r_adjectival() {\n            int among_var;\n            int v_1;\n            int v_2;\n                    // (, line 101\n                    // call adjective, line 102\n                    if (!r_adjective())\n                    {\n                        return false;\n                    }\n                    // try, line 109\n                    v_1 = limit - cursor;\n                    lab0: do {\n                        // (, line 109\n                        // [, line 110\n                        ket = cursor;\n                        // substring, line 110\n                        among_var = find_among_b(a_2, 8);\n                        if (among_var == 0)\n                        {\n                            cursor = limit - v_1;\n                            break lab0;\n                        }\n                        // ], line 110\n                        bra = cursor;\n                        switch(among_var) {\n                            case 0:\n                                cursor = limit - v_1;\n                                break lab0;\n                            case 1:\n                                // (, line 115\n                                // or, line 115\n                                lab1: do {\n                                    v_2 = limit - cursor;\n                                    lab2: do {\n                                        // literal, line 115\n                                        if (!(eq_s_b(1, \"\\u0430\")))\n                                        {\n                                            break lab2;\n                                        }\n                                        break lab1;\n                                    } while (false);\n                                    cursor = limit - v_2;\n                                    // literal, line 115\n                                    if (!(eq_s_b(1, \"\\u044F\")))\n                                    {\n                                        cursor = limit - v_1;\n                                        break lab0;\n                                    }\n                                } while (false);\n                                // delete, line 115\n                                slice_del();\n                                break;\n                            case 2:\n                                // (, line 122\n                                // delete, line 122\n                                slice_del();\n                                break;\n                        }\n                    } while (false);\n                    return true;\n                }\n\n","sourceOld":"        private boolean r_adjectival() {\n            int among_var;\n            int v_1;\n            int v_2;\n            // (, line 101\n            // call adjective, line 102\n            if (!r_adjective())\n            {\n                return false;\n            }\n            // try, line 109\n            v_1 = limit - cursor;\n            lab0: do {\n                // (, line 109\n                // [, line 110\n                ket = cursor;\n                // substring, line 110\n                among_var = find_among_b(a_2, 8);\n                if (among_var == 0)\n                {\n                    cursor = limit - v_1;\n                    break lab0;\n                }\n                // ], line 110\n                bra = cursor;\n                switch(among_var) {\n                    case 0:\n                        cursor = limit - v_1;\n                        break lab0;\n                    case 1:\n                        // (, line 115\n                        // or, line 115\n                        lab1: do {\n                            v_2 = limit - cursor;\n                            lab2: do {\n                                // literal, line 115\n                                if (!(eq_s_b(1, \"\\u0430\")))\n                                {\n                                    break lab2;\n                                }\n                                break lab1;\n                            } while (false);\n                            cursor = limit - v_2;\n                            // literal, line 115\n                            if (!(eq_s_b(1, \"\\u044F\")))\n                            {\n                                cursor = limit - v_1;\n                                break lab0;\n                            }\n                        } while (false);\n                        // delete, line 115\n                        slice_del();\n                        break;\n                    case 2:\n                        // (, line 122\n                        // delete, line 122\n                        slice_del();\n                        break;\n                }\n            } while (false);\n            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/RussianStemmer#r_adjectival().mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/RussianStemmer#r_adjectival().mjava","sourceNew":"                private boolean r_adjectival() {\n            int among_var;\n            int v_1;\n            int v_2;\n                    // (, line 101\n                    // call adjective, line 102\n                    if (!r_adjective())\n                    {\n                        return false;\n                    }\n                    // try, line 109\n                    v_1 = limit - cursor;\n                    lab0: do {\n                        // (, line 109\n                        // [, line 110\n                        ket = cursor;\n                        // substring, line 110\n                        among_var = find_among_b(a_2, 8);\n                        if (among_var == 0)\n                        {\n                            cursor = limit - v_1;\n                            break lab0;\n                        }\n                        // ], line 110\n                        bra = cursor;\n                        switch(among_var) {\n                            case 0:\n                                cursor = limit - v_1;\n                                break lab0;\n                            case 1:\n                                // (, line 115\n                                // or, line 115\n                                lab1: do {\n                                    v_2 = limit - cursor;\n                                    lab2: do {\n                                        // literal, line 115\n                                        if (!(eq_s_b(1, \"\\u0430\")))\n                                        {\n                                            break lab2;\n                                        }\n                                        break lab1;\n                                    } while (false);\n                                    cursor = limit - v_2;\n                                    // literal, line 115\n                                    if (!(eq_s_b(1, \"\\u044F\")))\n                                    {\n                                        cursor = limit - v_1;\n                                        break lab0;\n                                    }\n                                } while (false);\n                                // delete, line 115\n                                slice_del();\n                                break;\n                            case 2:\n                                // (, line 122\n                                // delete, line 122\n                                slice_del();\n                                break;\n                        }\n                    } while (false);\n                    return true;\n                }\n\n","sourceOld":"        private boolean r_adjectival() {\n            int among_var;\n            int v_1;\n            int v_2;\n            // (, line 101\n            // call adjective, line 102\n            if (!r_adjective())\n            {\n                return false;\n            }\n            // try, line 109\n            v_1 = limit - cursor;\n            lab0: do {\n                // (, line 109\n                // [, line 110\n                ket = cursor;\n                // substring, line 110\n                among_var = find_among_b(a_2, 8);\n                if (among_var == 0)\n                {\n                    cursor = limit - v_1;\n                    break lab0;\n                }\n                // ], line 110\n                bra = cursor;\n                switch(among_var) {\n                    case 0:\n                        cursor = limit - v_1;\n                        break lab0;\n                    case 1:\n                        // (, line 115\n                        // or, line 115\n                        lab1: do {\n                            v_2 = limit - cursor;\n                            lab2: do {\n                                // literal, line 115\n                                if (!(eq_s_b(1, \"\\u0430\")))\n                                {\n                                    break lab2;\n                                }\n                                break lab1;\n                            } while (false);\n                            cursor = limit - v_2;\n                            // literal, line 115\n                            if (!(eq_s_b(1, \"\\u044F\")))\n                            {\n                                cursor = limit - v_1;\n                                break lab0;\n                            }\n                        } while (false);\n                        // delete, line 115\n                        slice_del();\n                        break;\n                    case 2:\n                        // (, line 122\n                        // delete, line 122\n                        slice_del();\n                        break;\n                }\n            } while (false);\n            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/RussianStemmer#r_adjectival().mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/RussianStemmer#r_adjectival().mjava","sourceNew":"                private boolean r_adjectival() {\n            int among_var;\n            int v_1;\n            int v_2;\n                    // (, line 101\n                    // call adjective, line 102\n                    if (!r_adjective())\n                    {\n                        return false;\n                    }\n                    // try, line 109\n                    v_1 = limit - cursor;\n                    lab0: do {\n                        // (, line 109\n                        // [, line 110\n                        ket = cursor;\n                        // substring, line 110\n                        among_var = find_among_b(a_2, 8);\n                        if (among_var == 0)\n                        {\n                            cursor = limit - v_1;\n                            break lab0;\n                        }\n                        // ], line 110\n                        bra = cursor;\n                        switch(among_var) {\n                            case 0:\n                                cursor = limit - v_1;\n                                break lab0;\n                            case 1:\n                                // (, line 115\n                                // or, line 115\n                                lab1: do {\n                                    v_2 = limit - cursor;\n                                    lab2: do {\n                                        // literal, line 115\n                                        if (!(eq_s_b(1, \"\\u0430\")))\n                                        {\n                                            break lab2;\n                                        }\n                                        break lab1;\n                                    } while (false);\n                                    cursor = limit - v_2;\n                                    // literal, line 115\n                                    if (!(eq_s_b(1, \"\\u044F\")))\n                                    {\n                                        cursor = limit - v_1;\n                                        break lab0;\n                                    }\n                                } while (false);\n                                // delete, line 115\n                                slice_del();\n                                break;\n                            case 2:\n                                // (, line 122\n                                // delete, line 122\n                                slice_del();\n                                break;\n                        }\n                    } while (false);\n                    return true;\n                }\n\n","sourceOld":"        private boolean r_adjectival() {\n            int among_var;\n            int v_1;\n            int v_2;\n            // (, line 101\n            // call adjective, line 102\n            if (!r_adjective())\n            {\n                return false;\n            }\n            // try, line 109\n            v_1 = limit - cursor;\n            lab0: do {\n                // (, line 109\n                // [, line 110\n                ket = cursor;\n                // substring, line 110\n                among_var = find_among_b(a_2, 8);\n                if (among_var == 0)\n                {\n                    cursor = limit - v_1;\n                    break lab0;\n                }\n                // ], line 110\n                bra = cursor;\n                switch(among_var) {\n                    case 0:\n                        cursor = limit - v_1;\n                        break lab0;\n                    case 1:\n                        // (, line 115\n                        // or, line 115\n                        lab1: do {\n                            v_2 = limit - cursor;\n                            lab2: do {\n                                // literal, line 115\n                                if (!(eq_s_b(1, \"\\u0430\")))\n                                {\n                                    break lab2;\n                                }\n                                break lab1;\n                            } while (false);\n                            cursor = limit - v_2;\n                            // literal, line 115\n                            if (!(eq_s_b(1, \"\\u044F\")))\n                            {\n                                cursor = limit - v_1;\n                                break lab0;\n                            }\n                        } while (false);\n                        // delete, line 115\n                        slice_del();\n                        break;\n                    case 2:\n                        // (, line 122\n                        // delete, line 122\n                        slice_del();\n                        break;\n                }\n            } while (false);\n            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09479cd2de06c67a115b7346a8e5de8af4d62e81","date":1581961081,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/RussianStemmer#r_adjectival().mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/RussianStemmer#r_adjectival().mjava","sourceNew":"private boolean r_adjectival() {\n  int among_var;\n  if (!r_adjective())\n  {\n    return false;\n  }\n  int v_1 = limit - cursor;\n  lab0: {\n    ket = cursor;\n    among_var = find_among_b(a_2);\n    if (among_var == 0)\n    {\n      cursor = limit - v_1;\n      break lab0;\n    }\n    bra = cursor;\n    switch (among_var) {\n      case 1:\n        lab1: {\n          int v_2 = limit - cursor;\n          lab2: {\n            if (!(eq_s_b(\"\\u0430\")))\n            {\n              break lab2;\n            }\n            break lab1;\n          }\n          cursor = limit - v_2;\n          if (!(eq_s_b(\"\\u044F\")))\n          {\n            cursor = limit - v_1;\n            break lab0;\n          }\n        }\n        slice_del();\n        break;\n      case 2:\n        slice_del();\n        break;\n    }\n  }\n  return true;\n}\n\n","sourceOld":"                private boolean r_adjectival() {\n            int among_var;\n            int v_1;\n            int v_2;\n                    // (, line 101\n                    // call adjective, line 102\n                    if (!r_adjective())\n                    {\n                        return false;\n                    }\n                    // try, line 109\n                    v_1 = limit - cursor;\n                    lab0: do {\n                        // (, line 109\n                        // [, line 110\n                        ket = cursor;\n                        // substring, line 110\n                        among_var = find_among_b(a_2, 8);\n                        if (among_var == 0)\n                        {\n                            cursor = limit - v_1;\n                            break lab0;\n                        }\n                        // ], line 110\n                        bra = cursor;\n                        switch(among_var) {\n                            case 0:\n                                cursor = limit - v_1;\n                                break lab0;\n                            case 1:\n                                // (, line 115\n                                // or, line 115\n                                lab1: do {\n                                    v_2 = limit - cursor;\n                                    lab2: do {\n                                        // literal, line 115\n                                        if (!(eq_s_b(1, \"\\u0430\")))\n                                        {\n                                            break lab2;\n                                        }\n                                        break lab1;\n                                    } while (false);\n                                    cursor = limit - v_2;\n                                    // literal, line 115\n                                    if (!(eq_s_b(1, \"\\u044F\")))\n                                    {\n                                        cursor = limit - v_1;\n                                        break lab0;\n                                    }\n                                } while (false);\n                                // delete, line 115\n                                slice_del();\n                                break;\n                            case 2:\n                                // (, line 122\n                                // delete, line 122\n                                slice_del();\n                                break;\n                        }\n                    } while (false);\n                    return true;\n                }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b6a6a9e301c12ab07b1d0428b5aad813fff317b3"],"b6a6a9e301c12ab07b1d0428b5aad813fff317b3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b6a6a9e301c12ab07b1d0428b5aad813fff317b3"],"09479cd2de06c67a115b7346a8e5de8af4d62e81":["b6a6a9e301c12ab07b1d0428b5aad813fff317b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09479cd2de06c67a115b7346a8e5de8af4d62e81"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d6f074e73200c07d54f242d3880a8da5a35ff97b","b6a6a9e301c12ab07b1d0428b5aad813fff317b3","8fd5be977c105554c6a7b68afcdbc511439723ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"b6a6a9e301c12ab07b1d0428b5aad813fff317b3":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","09479cd2de06c67a115b7346a8e5de8af4d62e81"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"09479cd2de06c67a115b7346a8e5de8af4d62e81":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}