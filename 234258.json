{"path":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checkEOF(IndexInput).mjava","commits":[{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checkEOF(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Checks that the stream is positioned at the end, and throws exception\n   * if it is not. \n   * @deprecated Use {@link #checkFooter} instead, this should only used for files without checksums \n   */\n  @Deprecated\n  public static void checkEOF(IndexInput in) throws IOException {\n    if (in.getFilePointer() != in.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file: read \" + in.getFilePointer() + \" vs size \" + in.length() + \" (resource: \" + in + \")\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checkEOF(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Checks that the stream is positioned at the end, and throws exception\n   * if it is not. \n   * @deprecated Use {@link #checkFooter} instead, this should only used for files without checksums \n   */\n  @Deprecated\n  public static void checkEOF(IndexInput in) throws IOException {\n    if (in.getFilePointer() != in.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file: read \" + in.getFilePointer() + \" vs size \" + in.length() + \" (resource: \" + in + \")\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checkEOF(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checkEOF(IndexInput).mjava","sourceNew":"  /**\n   * Checks that the stream is positioned at the end, and throws exception\n   * if it is not. \n   * @deprecated Use {@link #checkFooter} instead, this should only used for files without checksums \n   */\n  @Deprecated\n  public static void checkEOF(IndexInput in) throws IOException {\n    if (in.getFilePointer() != in.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file: read \" + in.getFilePointer() + \" vs size \" + in.length(), in);\n    }\n  }\n\n","sourceOld":"  /**\n   * Checks that the stream is positioned at the end, and throws exception\n   * if it is not. \n   * @deprecated Use {@link #checkFooter} instead, this should only used for files without checksums \n   */\n  @Deprecated\n  public static void checkEOF(IndexInput in) throws IOException {\n    if (in.getFilePointer() != in.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file: read \" + in.getFilePointer() + \" vs size \" + in.length() + \" (resource: \" + in + \")\");\n    }\n  }\n\n","bugFix":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3","date":1417215914,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checkEOF(IndexInput).mjava","sourceNew":null,"sourceOld":"  /**\n   * Checks that the stream is positioned at the end, and throws exception\n   * if it is not. \n   * @deprecated Use {@link #checkFooter} instead, this should only used for files without checksums \n   */\n  @Deprecated\n  public static void checkEOF(IndexInput in) throws IOException {\n    if (in.getFilePointer() != in.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file: read \" + in.getFilePointer() + \" vs size \" + in.length(), in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}