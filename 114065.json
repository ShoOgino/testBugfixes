{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/DisiPriorityQueue#topList().mjava","commits":[{"id":"361b1afc99f68598c73d37074aec089c9c951586","date":1522744632,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/DisiPriorityQueue#topList().mjava","pathOld":"/dev/null","sourceNew":"  /** Get the list of scorers which are on the current doc. */\n  public DisiWrapper topList() {\n    final DisiWrapper[] heap = this.heap;\n    final int size = this.size;\n    DisiWrapper list = heap[0];\n    list.next = null;\n    if (size >= 3) {\n      list = topList(list, heap, size, 1);\n      list = topList(list, heap, size, 2);\n    } else if (size == 2 && heap[1].doc == list.doc) {\n      list = prepend(heap[1], list);\n    }\n    return list;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/DisiPriorityQueue#topList().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/DisiPriorityQueue#topList().mjava","sourceNew":"  /** Get the list of scorers which are on the current doc. */\n  public DisiWrapper topList() {\n    final DisiWrapper[] heap = this.heap;\n    final int size = this.size;\n    DisiWrapper list = heap[0];\n    list.next = null;\n    if (size >= 3) {\n      list = topList(list, heap, size, 1);\n      list = topList(list, heap, size, 2);\n    } else if (size == 2 && heap[1].doc == list.doc) {\n      list = prepend(heap[1], list);\n    }\n    return list;\n  }\n\n","sourceOld":"  /** Get the list of scorers which are on the current doc. */\n  public DisiWrapper topList() {\n    final DisiWrapper[] heap = this.heap;\n    final int size = this.size;\n    DisiWrapper list = heap[0];\n    list.next = null;\n    if (size >= 3) {\n      list = topList(list, heap, size, 1);\n      list = topList(list, heap, size, 2);\n    } else if (size == 2 && heap[1].doc == list.doc) {\n      list = prepend(heap[1], list);\n    }\n    return list;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["361b1afc99f68598c73d37074aec089c9c951586"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"361b1afc99f68598c73d37074aec089c9c951586":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["361b1afc99f68598c73d37074aec089c9c951586"],"361b1afc99f68598c73d37074aec089c9c951586":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}