{"path":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testParseMath().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testParseMath().mjava","pathOld":"solr/src/test/org/apache/solr/schema/DateFieldTest#testParseMath().mjava","sourceNew":"  // as of Solr1.3\n  public void testParseMath() {\n    assertParseMath(820454699999l, \"1995-12-31T23:59:59.999765Z+5MINUTES\");\n    assertParseMath(820454699999l, \"1995-12-31T23:59:59.999Z+5MINUTES\");\n    assertParseMath(820454699990l, \"1995-12-31T23:59:59.99Z+5MINUTES\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00Z/DAY\");\n    \n    // here the input isn't in the canonical form, but we should be forgiving\n    assertParseMath(820454699990l, \"1995-12-31T23:59:59.990Z+5MINUTES\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.0Z/DAY\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.00Z/DAY\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.000Z/DAY\");\n  }\n\n","sourceOld":"  // as of Solr1.3\n  public void testParseMath() {\n    assertParseMath(820454699999l, \"1995-12-31T23:59:59.999765Z+5MINUTES\");\n    assertParseMath(820454699999l, \"1995-12-31T23:59:59.999Z+5MINUTES\");\n    assertParseMath(820454699990l, \"1995-12-31T23:59:59.99Z+5MINUTES\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00Z/DAY\");\n    \n    // here the input isn't in the canonical form, but we should be forgiving\n    assertParseMath(820454699990l, \"1995-12-31T23:59:59.990Z+5MINUTES\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.0Z/DAY\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.00Z/DAY\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.000Z/DAY\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testParseMath().mjava","pathOld":"solr/src/test/org/apache/solr/schema/DateFieldTest#testParseMath().mjava","sourceNew":"  // as of Solr1.3\n  public void testParseMath() {\n    assertParseMath(820454699999l, \"1995-12-31T23:59:59.999765Z+5MINUTES\");\n    assertParseMath(820454699999l, \"1995-12-31T23:59:59.999Z+5MINUTES\");\n    assertParseMath(820454699990l, \"1995-12-31T23:59:59.99Z+5MINUTES\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00Z/DAY\");\n    \n    // here the input isn't in the canonical form, but we should be forgiving\n    assertParseMath(820454699990l, \"1995-12-31T23:59:59.990Z+5MINUTES\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.0Z/DAY\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.00Z/DAY\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.000Z/DAY\");\n  }\n\n","sourceOld":"  // as of Solr1.3\n  public void testParseMath() {\n    assertParseMath(820454699999l, \"1995-12-31T23:59:59.999765Z+5MINUTES\");\n    assertParseMath(820454699999l, \"1995-12-31T23:59:59.999Z+5MINUTES\");\n    assertParseMath(820454699990l, \"1995-12-31T23:59:59.99Z+5MINUTES\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00Z/DAY\");\n    \n    // here the input isn't in the canonical form, but we should be forgiving\n    assertParseMath(820454699990l, \"1995-12-31T23:59:59.990Z+5MINUTES\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.0Z/DAY\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.00Z/DAY\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.000Z/DAY\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testParseMath().mjava","pathOld":"solr/src/test/org/apache/solr/schema/DateFieldTest#testParseMath().mjava","sourceNew":"  // as of Solr1.3\n  public void testParseMath() {\n    assertParseMath(820454699999l, \"1995-12-31T23:59:59.999765Z+5MINUTES\");\n    assertParseMath(820454699999l, \"1995-12-31T23:59:59.999Z+5MINUTES\");\n    assertParseMath(820454699990l, \"1995-12-31T23:59:59.99Z+5MINUTES\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00Z/DAY\");\n    \n    // here the input isn't in the canonical form, but we should be forgiving\n    assertParseMath(820454699990l, \"1995-12-31T23:59:59.990Z+5MINUTES\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.0Z/DAY\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.00Z/DAY\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.000Z/DAY\");\n  }\n\n","sourceOld":"  // as of Solr1.3\n  public void testParseMath() {\n    assertParseMath(820454699999l, \"1995-12-31T23:59:59.999765Z+5MINUTES\");\n    assertParseMath(820454699999l, \"1995-12-31T23:59:59.999Z+5MINUTES\");\n    assertParseMath(820454699990l, \"1995-12-31T23:59:59.99Z+5MINUTES\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00Z/DAY\");\n    \n    // here the input isn't in the canonical form, but we should be forgiving\n    assertParseMath(820454699990l, \"1995-12-31T23:59:59.990Z+5MINUTES\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.0Z/DAY\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.00Z/DAY\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.000Z/DAY\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/DateFieldTest#testParseMath().mjava","sourceNew":null,"sourceOld":"  // as of Solr1.3\n  public void testParseMath() {\n    assertParseMath(820454699999l, \"1995-12-31T23:59:59.999765Z+5MINUTES\");\n    assertParseMath(820454699999l, \"1995-12-31T23:59:59.999Z+5MINUTES\");\n    assertParseMath(820454699990l, \"1995-12-31T23:59:59.99Z+5MINUTES\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00Z/DAY\");\n    \n    // here the input isn't in the canonical form, but we should be forgiving\n    assertParseMath(820454699990l, \"1995-12-31T23:59:59.990Z+5MINUTES\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.0Z/DAY\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.00Z/DAY\");\n    assertParseMath(194918400000l, \"1976-03-06T03:06:00.000Z/DAY\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3f6c7717a0f1decd1668144537943efcc70cd95"]},"commit2Childs":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}