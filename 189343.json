{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredIndexReader#DocumentFilteredIndexReader(IndexReader,Filter,boolean).mjava","commits":[{"id":"bd5b0696fbde24daf807b2f98cffa838a7c0e159","date":1308394033,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredIndexReader#DocumentFilteredIndexReader(IndexReader,Filter,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public DocumentFilteredIndexReader(IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(new SlowMultiReaderWrapper(reader));\n      \n      final OpenBitSetDISI bits = new OpenBitSetDISI(in.maxDoc());\n      final DocIdSet docs = preserveFilter.getDocIdSet((AtomicReaderContext) in.getTopReaderContext());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.inPlaceOr(it);\n        }\n      }\n      // this is somehow inverse, if we negate the filter, we delete all documents it matches!\n      if (!negateFilter) {\n        bits.flip(0, in.maxDoc());\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldDelBits = in.getDeletedDocs();\n        assert oldDelBits != null;\n        for (int i = 0; i < in.maxDoc(); i++) {\n          if (oldDelBits.get(i)) {\n            bits.set(i);\n          }\n        }\n      }\n      \n      this.readerDels = bits;\n      this.numDocs = in.maxDoc() - (int) bits.cardinality();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredIndexReader#DocumentFilteredIndexReader(IndexReader,Filter,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public DocumentFilteredIndexReader(IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(new SlowMultiReaderWrapper(reader));\n      \n      final OpenBitSetDISI bits = new OpenBitSetDISI(in.maxDoc());\n      final DocIdSet docs = preserveFilter.getDocIdSet((AtomicReaderContext) in.getTopReaderContext());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.inPlaceOr(it);\n        }\n      }\n      // this is somehow inverse, if we negate the filter, we delete all documents it matches!\n      if (!negateFilter) {\n        bits.flip(0, in.maxDoc());\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldDelBits = in.getDeletedDocs();\n        assert oldDelBits != null;\n        for (int i = 0; i < in.maxDoc(); i++) {\n          if (oldDelBits.get(i)) {\n            bits.set(i);\n          }\n        }\n      }\n      \n      this.readerDels = bits;\n      this.numDocs = in.maxDoc() - (int) bits.cardinality();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredIndexReader#DocumentFilteredIndexReader(IndexReader,Filter,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredIndexReader#DocumentFilteredIndexReader(IndexReader,Filter,boolean).mjava","sourceNew":"    public DocumentFilteredIndexReader(IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(new SlowMultiReaderWrapper(reader));\n      \n      final int maxDoc = in.maxDoc();\n      final OpenBitSetDISI bits = new OpenBitSetDISI(maxDoc);\n      final DocIdSet docs = preserveFilter.getDocIdSet((AtomicReaderContext) in.getTopReaderContext());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.inPlaceOr(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.fastClear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = (int) bits.cardinality();\n    }\n\n","sourceOld":"    public DocumentFilteredIndexReader(IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(new SlowMultiReaderWrapper(reader));\n      \n      final OpenBitSetDISI bits = new OpenBitSetDISI(in.maxDoc());\n      final DocIdSet docs = preserveFilter.getDocIdSet((AtomicReaderContext) in.getTopReaderContext());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.inPlaceOr(it);\n        }\n      }\n      // this is somehow inverse, if we negate the filter, we delete all documents it matches!\n      if (!negateFilter) {\n        bits.flip(0, in.maxDoc());\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldDelBits = in.getDeletedDocs();\n        assert oldDelBits != null;\n        for (int i = 0; i < in.maxDoc(); i++) {\n          if (oldDelBits.get(i)) {\n            bits.set(i);\n          }\n        }\n      }\n      \n      this.readerDels = bits;\n      this.numDocs = in.maxDoc() - (int) bits.cardinality();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredIndexReader#DocumentFilteredIndexReader(IndexReader,Filter,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredIndexReader#DocumentFilteredIndexReader(IndexReader,Filter,boolean).mjava","sourceNew":"    public DocumentFilteredIndexReader(IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(new SlowMultiReaderWrapper(reader));\n      \n      final int maxDoc = in.maxDoc();\n      final OpenBitSetDISI bits = new OpenBitSetDISI(maxDoc);\n      final DocIdSet docs = preserveFilter.getDocIdSet((AtomicReaderContext) in.getTopReaderContext());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.inPlaceOr(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.fastClear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = (int) bits.cardinality();\n    }\n\n","sourceOld":"    public DocumentFilteredIndexReader(IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(new SlowMultiReaderWrapper(reader));\n      \n      final OpenBitSetDISI bits = new OpenBitSetDISI(in.maxDoc());\n      final DocIdSet docs = preserveFilter.getDocIdSet((AtomicReaderContext) in.getTopReaderContext());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.inPlaceOr(it);\n        }\n      }\n      // this is somehow inverse, if we negate the filter, we delete all documents it matches!\n      if (!negateFilter) {\n        bits.flip(0, in.maxDoc());\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldDelBits = in.getDeletedDocs();\n        assert oldDelBits != null;\n        for (int i = 0; i < in.maxDoc(); i++) {\n          if (oldDelBits.get(i)) {\n            bits.set(i);\n          }\n        }\n      }\n      \n      this.readerDels = bits;\n      this.numDocs = in.maxDoc() - (int) bits.cardinality();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredIndexReader#DocumentFilteredIndexReader(IndexReader,Filter,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredIndexReader#DocumentFilteredIndexReader(IndexReader,Filter,boolean).mjava","sourceNew":"    public DocumentFilteredIndexReader(IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(new SlowMultiReaderWrapper(reader));\n      \n      final int maxDoc = in.maxDoc();\n      final OpenBitSetDISI bits = new OpenBitSetDISI(maxDoc);\n      final DocIdSet docs = preserveFilter.getDocIdSet((AtomicReaderContext) in.getTopReaderContext());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.inPlaceOr(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.fastClear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = (int) bits.cardinality();\n    }\n\n","sourceOld":"    public DocumentFilteredIndexReader(IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(new SlowMultiReaderWrapper(reader));\n      \n      final OpenBitSetDISI bits = new OpenBitSetDISI(in.maxDoc());\n      final DocIdSet docs = preserveFilter.getDocIdSet((AtomicReaderContext) in.getTopReaderContext());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.inPlaceOr(it);\n        }\n      }\n      // this is somehow inverse, if we negate the filter, we delete all documents it matches!\n      if (!negateFilter) {\n        bits.flip(0, in.maxDoc());\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldDelBits = in.getDeletedDocs();\n        assert oldDelBits != null;\n        for (int i = 0; i < in.maxDoc(); i++) {\n          if (oldDelBits.get(i)) {\n            bits.set(i);\n          }\n        }\n      }\n      \n      this.readerDels = bits;\n      this.numDocs = in.maxDoc() - (int) bits.cardinality();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredIndexReader#DocumentFilteredIndexReader(IndexReader,Filter,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredIndexReader#DocumentFilteredIndexReader(IndexReader,Filter,boolean).mjava","sourceNew":"    public DocumentFilteredIndexReader(IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(new SlowMultiReaderWrapper(reader));\n      \n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      final DocIdSet docs = preserveFilter.getDocIdSet((AtomicReaderContext) in.getTopReaderContext());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = (int) bits.cardinality();\n    }\n\n","sourceOld":"    public DocumentFilteredIndexReader(IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(new SlowMultiReaderWrapper(reader));\n      \n      final int maxDoc = in.maxDoc();\n      final OpenBitSetDISI bits = new OpenBitSetDISI(maxDoc);\n      final DocIdSet docs = preserveFilter.getDocIdSet((AtomicReaderContext) in.getTopReaderContext());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.inPlaceOr(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.fastClear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = (int) bits.cardinality();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b964351932c1d9eabc51b5e8b60e388c37ce753a","date":1310638977,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredIndexReader#DocumentFilteredIndexReader(IndexReader,Filter,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredIndexReader#DocumentFilteredIndexReader(IndexReader,Filter,boolean).mjava","sourceNew":"    public DocumentFilteredIndexReader(IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(new SlowMultiReaderWrapper(reader));\n      \n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      final DocIdSet docs = preserveFilter.getDocIdSet((AtomicReaderContext) in.getTopReaderContext());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","sourceOld":"    public DocumentFilteredIndexReader(IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(new SlowMultiReaderWrapper(reader));\n      \n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      final DocIdSet docs = preserveFilter.getDocIdSet((AtomicReaderContext) in.getTopReaderContext());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = (int) bits.cardinality();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredIndexReader#DocumentFilteredIndexReader(IndexReader,Filter,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredIndexReader#DocumentFilteredIndexReader(IndexReader,Filter,boolean).mjava","sourceNew":"    public DocumentFilteredIndexReader(IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(new SlowMultiReaderWrapper(reader));\n      \n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet((AtomicReaderContext) in.getTopReaderContext(), null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","sourceOld":"    public DocumentFilteredIndexReader(IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(new SlowMultiReaderWrapper(reader));\n      \n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      final DocIdSet docs = preserveFilter.getDocIdSet((AtomicReaderContext) in.getTopReaderContext());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a118fcb91dbf1aea61227687b4241d7b136558d","date":1323554852,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredAtomicIndexReader#DocumentFilteredAtomicIndexReader(AtomicReaderContext,Filter,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredIndexReader#DocumentFilteredIndexReader(IndexReader,Filter,boolean).mjava","sourceNew":"    public DocumentFilteredAtomicIndexReader(AtomicReaderContext context, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(context.reader);\n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet(context, null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","sourceOld":"    public DocumentFilteredIndexReader(IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(new SlowMultiReaderWrapper(reader));\n      \n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet((AtomicReaderContext) in.getTopReaderContext(), null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredAtomicIndexReader#DocumentFilteredAtomicIndexReader(AtomicReaderContext,Filter,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/PKIndexSplitter.DocumentFilteredIndexReader#DocumentFilteredIndexReader(IndexReader,Filter,boolean).mjava","sourceNew":"    public DocumentFilteredAtomicIndexReader(AtomicReaderContext context, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(context.reader);\n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet(context, null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","sourceOld":"    public DocumentFilteredIndexReader(IndexReader reader, Filter preserveFilter, boolean negateFilter) throws IOException {\n      super(new SlowMultiReaderWrapper(reader));\n      \n      final int maxDoc = in.maxDoc();\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      // ignore livedocs here, as we filter them later:\n      final DocIdSet docs = preserveFilter.getDocIdSet((AtomicReaderContext) in.getTopReaderContext(), null);\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          bits.or(it);\n        }\n      }\n      if (negateFilter) {\n        bits.flip(0, maxDoc);\n      }\n\n      if (in.hasDeletions()) {\n        final Bits oldLiveDocs = in.getLiveDocs();\n        assert oldLiveDocs != null;\n        final DocIdSetIterator it = bits.iterator();\n        for (int i = it.nextDoc(); i < maxDoc; i = it.nextDoc()) {\n          if (!oldLiveDocs.get(i)) {\n            // we can safely modify the current bit, as the iterator already stepped over it:\n            bits.clear(i);\n          }\n        }\n      }\n      \n      this.liveDocs = bits;\n      this.numDocs = bits.cardinality();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["b964351932c1d9eabc51b5e8b60e388c37ce753a"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bd5b0696fbde24daf807b2f98cffa838a7c0e159"],"7a118fcb91dbf1aea61227687b4241d7b136558d":["6620df8541b174097b1133a4fc370adb2e570524"],"b964351932c1d9eabc51b5e8b60e388c37ce753a":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["6620df8541b174097b1133a4fc370adb2e570524","7a118fcb91dbf1aea61227687b4241d7b136558d"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["bd5b0696fbde24daf807b2f98cffa838a7c0e159"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"bd5b0696fbde24daf807b2f98cffa838a7c0e159":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["bd5b0696fbde24daf807b2f98cffa838a7c0e159","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a118fcb91dbf1aea61227687b4241d7b136558d"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["7a118fcb91dbf1aea61227687b4241d7b136558d","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"b964351932c1d9eabc51b5e8b60e388c37ce753a":["6620df8541b174097b1133a4fc370adb2e570524"],"7a118fcb91dbf1aea61227687b4241d7b136558d":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","bd5b0696fbde24daf807b2f98cffa838a7c0e159"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"bd5b0696fbde24daf807b2f98cffa838a7c0e159":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["b964351932c1d9eabc51b5e8b60e388c37ce753a"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}