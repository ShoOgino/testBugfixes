{"path":"lucene/backwards/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","pathOld":"backwards/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","sourceOld":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/document/TestDocument#testGetValuesForIndexedDocument().mjava","sourceNew":null,"sourceOld":"    /**\n     * Tests {@link Document#getValues(String)} method for a Document retrieved from\n     * an index.\n     *\n     * @throws Exception on error\n     */\n    public void testGetValuesForIndexedDocument() throws Exception\n    {\n        RAMDirectory dir = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.addDocument(makeDocumentWithFields());\n        writer.close();\n\n        Searcher searcher = new IndexSearcher(dir, true);\n\n\t// search for something that does exists\n\tQuery query = new TermQuery(new Term(\"keyword\", \"test1\"));\n\n\t// ensure that queries return expected results without DateFilter first\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n  assertEquals(1, hits.length);\n\n         doAssert(searcher.doc(hits[0].doc), true);\n         searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}