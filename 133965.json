{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#doTest().mjava","commits":[{"id":"de84935d1fc860da45274e111051890ba7504337","date":1407915714,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    int replicationFactor = 1;\n    int maxShardsPerNode = 5;\n\n    Map<String, Object> props = ZkNodeProps.makeMap(\n        \"router.name\", ImplicitDocRouter.NAME,\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, 1,\n        SHARDS_PROP,\"a,b\");\n\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n\n    String collectionName = \"customcollreplicadeletion\";\n\n    createCollection(collectionInfos, collectionName, props, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    DocCollection testcoll = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n    Replica replica = testcoll.getSlice(\"a\").getReplicas().iterator().next();\n\n    removeAndWaitForLastReplicaGone(collectionName, replica, \"a\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    int replicationFactor = 1;\n    int maxShardsPerNode = 5;\n\n    Map<String, Object> props = ZkNodeProps.makeMap(\n        \"router.name\", ImplicitDocRouter.NAME,\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, 1,\n        SHARDS_PROP,\"a,b\");\n\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n\n    String collectionName = \"customcollreplicadeletion\";\n\n    createCollection(collectionInfos, collectionName, props, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n    Replica replica = testcoll.getSlice(\"a\").getReplicas().iterator().next();\n\n    removeAndWaitForLastReplicaGone(collectionName, replica, \"a\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    int replicationFactor = 1;\n    int maxShardsPerNode = 5;\n\n    Map<String, Object> props = ZkNodeProps.makeMap(\n        \"router.name\", ImplicitDocRouter.NAME,\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, 1,\n        SHARDS_PROP,\"a,b\");\n\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n\n    String collectionName = \"customcollreplicadeletion\";\n\n    createCollection(collectionInfos, collectionName, props, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    DocCollection testcoll = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n    Replica replica = testcoll.getSlice(\"a\").getReplicas().iterator().next();\n\n    removeAndWaitForLastReplicaGone(collectionName, replica, \"a\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    int replicationFactor = 1;\n    int maxShardsPerNode = 5;\n\n    Map<String, Object> props = ZkNodeProps.makeMap(\n        \"router.name\", ImplicitDocRouter.NAME,\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, 1,\n        SHARDS_PROP,\"a,b\");\n\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n\n    String collectionName = \"customcollreplicadeletion\";\n\n    createCollection(collectionInfos, collectionName, props, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n    Replica replica = testcoll.getSlice(\"a\").getReplicas().iterator().next();\n\n    removeAndWaitForLastReplicaGone(collectionName, replica, \"a\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    int replicationFactor = 1;\n    int maxShardsPerNode = 5;\n\n    Map<String, Object> props = ZkNodeProps.makeMap(\n        \"router.name\", ImplicitDocRouter.NAME,\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, 1,\n        SHARDS_PROP,\"a,b\");\n\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n\n    String collectionName = \"customcollreplicadeletion\";\n\n    createCollection(collectionInfos, collectionName, props, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n    Replica replica = testcoll.getSlice(\"a\").getReplicas().iterator().next();\n\n    removeAndWaitForLastReplicaGone(collectionName, replica, \"a\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abb23fcc2461782ab204e61213240feb77d355aa":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["de84935d1fc860da45274e111051890ba7504337"],"de84935d1fc860da45274e111051890ba7504337":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de84935d1fc860da45274e111051890ba7504337"],"bafca15d8e408346a67f4282ad1143b88023893b":["abb23fcc2461782ab204e61213240feb77d355aa"],"de84935d1fc860da45274e111051890ba7504337":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}