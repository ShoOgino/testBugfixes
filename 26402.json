{"path":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(int).mjava","commits":[{"id":"605b061fadf71aa6458c0005eaae83a98350c403","date":1307117658,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#writePackedInts(int).mjava","sourceNew":"    private void writePackedInts(int docCount) throws IOException {\n      datOut.writeByte(PACKED);\n      // TODO -- long can't work right since it's signed\n      datOut.writeLong(minValue);\n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue>= 0 && minValue <=0 ? 0-minValue : ++maxValue-minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue-minValue));\n      final int limit = docToValue.length > docCount ? docCount : docToValue.length;\n      for (int i = 0; i < limit; i++) {\n        w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      \n      w.finish();\n    }\n\n","sourceOld":"    private void writePackedInts(int docCount) throws IOException {\n      datOut.writeByte(PACKED);\n      // TODO -- long can't work right since it's signed\n      datOut.writeLong(minValue);\n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue>= 0 && minValue <=0 ? 0-minValue : ++maxValue-minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue-minValue));\n      final int limit = docToValue.length > docCount ? docCount : docToValue.length;\n      for (int i = 0; i < limit; i++) {\n        w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      \n      w.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"245b64c37f29b58edef53dfa639676263fe374b6","date":1307622300,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(int).mjava","sourceNew":"    private void writePackedInts(int docCount) throws IOException {\n      datOut.writeByte(PACKED);\n      datOut.writeLong(minValue);\n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue>= 0 && minValue <=0 ? 0-minValue : ++maxValue-minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue-minValue));\n      final int limit = docToValue.length > docCount ? docCount : docToValue.length;\n      for (int i = 0; i < limit; i++) {\n        w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      \n      w.finish();\n    }\n\n","sourceOld":"    private void writePackedInts(int docCount) throws IOException {\n      datOut.writeByte(PACKED);\n      // TODO -- long can't work right since it's signed\n      datOut.writeLong(minValue);\n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue>= 0 && minValue <=0 ? 0-minValue : ++maxValue-minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue-minValue));\n      final int limit = docToValue.length > docCount ? docCount : docToValue.length;\n      for (int i = 0; i < limit; i++) {\n        w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      \n      w.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(int).mjava","pathOld":"/dev/null","sourceNew":"    private void writePackedInts(int docCount) throws IOException {\n      datOut.writeByte(PACKED);\n      datOut.writeLong(minValue);\n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue>= 0 && minValue <=0 ? 0-minValue : ++maxValue-minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue-minValue));\n      final int limit = docToValue.length > docCount ? docCount : docToValue.length;\n      for (int i = 0; i < limit; i++) {\n        w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      \n      w.finish();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(int).mjava","pathOld":"/dev/null","sourceNew":"    private void writePackedInts(int docCount) throws IOException {\n      datOut.writeByte(PACKED);\n      datOut.writeLong(minValue);\n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue>= 0 && minValue <=0 ? 0-minValue : ++maxValue-minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue-minValue));\n      final int limit = docToValue.length > docCount ? docCount : docToValue.length;\n      for (int i = 0; i < limit; i++) {\n        w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      \n      w.finish();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93c59ad5034eecd863f267bd75e1df7b8a51e427","date":1309162882,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(IndexOutput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(int).mjava","sourceNew":"    private void writePackedInts(IndexOutput datOut, int docCount) throws IOException {\n      datOut.writeByte(PACKED);\n      datOut.writeLong(minValue);\n      assert array.type() == ValueType.FIXED_INTS_64;\n      final long[] docToValue = (long[])array.getArray();\n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      final int limit = docToValue.length > docCount ? docCount\n          : docToValue.length;\n      for (int i = 0; i < limit; i++) {\n        w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n\n      w.finish();\n    }\n\n","sourceOld":"    private void writePackedInts(int docCount) throws IOException {\n      datOut.writeByte(PACKED);\n      datOut.writeLong(minValue);\n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue>= 0 && minValue <=0 ? 0-minValue : ++maxValue-minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue-minValue));\n      final int limit = docToValue.length > docCount ? docCount : docToValue.length;\n      for (int i = 0; i < limit; i++) {\n        w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      \n      w.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7","date":1309190785,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(IndexOutput,int).mjava","sourceNew":"    private void writePackedInts(int docCount) throws IOException {\n      initDataOut(PACKED);\n      datOut.writeLong(minValue);\n      assert array.type() == ValueType.FIXED_INTS_64;\n      final long[] docToValue = (long[])array.getArray();\n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      final int limit = docToValue.length > docCount ? docCount\n          : docToValue.length;\n      for (int i = 0; i < limit; i++) {\n        w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n\n      w.finish();\n    }\n\n","sourceOld":"    private void writePackedInts(IndexOutput datOut, int docCount) throws IOException {\n      datOut.writeByte(PACKED);\n      datOut.writeLong(minValue);\n      assert array.type() == ValueType.FIXED_INTS_64;\n      final long[] docToValue = (long[])array.getArray();\n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      final int limit = docToValue.length > docCount ? docCount\n          : docToValue.length;\n      for (int i = 0; i < limit; i++) {\n        w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n\n      w.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(int).mjava","sourceNew":"    private void writePackedInts(int docCount) throws IOException {\n      initDataOut(PACKED);\n      datOut.writeLong(minValue);\n      assert array.type() == ValueType.FIXED_INTS_64;\n      final long[] docToValue = (long[])array.getArray();\n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      final int limit = docToValue.length > docCount ? docCount\n          : docToValue.length;\n      for (int i = 0; i < limit; i++) {\n        w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n\n      w.finish();\n    }\n\n","sourceOld":"    private void writePackedInts(int docCount) throws IOException {\n      datOut.writeByte(PACKED);\n      datOut.writeLong(minValue);\n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue>= 0 && minValue <=0 ? 0-minValue : ++maxValue-minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue-minValue));\n      final int limit = docToValue.length > docCount ? docCount : docToValue.length;\n      for (int i = 0; i < limit; i++) {\n        w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      \n      w.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(int).mjava","sourceNew":"    private void writePackedInts(int docCount) throws IOException {\n      initDataOut(PACKED);\n      datOut.writeLong(minValue);\n      assert array.type() == ValueType.FIXED_INTS_64;\n      final long[] docToValue = (long[])array.getArray();\n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      final int limit = docToValue.length > docCount ? docCount\n          : docToValue.length;\n      for (int i = 0; i < limit; i++) {\n        w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n\n      w.finish();\n    }\n\n","sourceOld":"    private void writePackedInts(int docCount) throws IOException {\n      datOut.writeByte(PACKED);\n      datOut.writeLong(minValue);\n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue>= 0 && minValue <=0 ? 0-minValue : ++maxValue-minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue-minValue));\n      final int limit = docToValue.length > docCount ? docCount : docToValue.length;\n      for (int i = 0; i < limit; i++) {\n        w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      \n      w.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/PackedIntValues.PackedIntsWriter#writePackedInts(IndexOutput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#writePackedInts(int).mjava","sourceNew":"    private void writePackedInts(IndexOutput datOut, int docCount) throws IOException {\n      datOut.writeLong(minValue);\n      \n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      for (int i = 0; i < lastDocID + 1; i++) {\n        set(bytesRef, i);\n        long asLong = bytesRef.asLong();\n        w.add(asLong == 0 ? defaultValue : asLong - minValue);\n      }\n      for (int i = lastDocID + 1; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      w.finish();\n      w.finish();\n    }\n\n","sourceOld":"    private void writePackedInts(int docCount) throws IOException {\n      initDataOut(PACKED);\n      datOut.writeLong(minValue);\n      assert array.type() == ValueType.FIXED_INTS_64;\n      final long[] docToValue = (long[])array.getArray();\n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      final int limit = docToValue.length > docCount ? docCount\n          : docToValue.length;\n      for (int i = 0; i < limit; i++) {\n        w.add(docToValue[i] == 0 ? defaultValue : docToValue[i] - minValue);\n      }\n      for (int i = limit; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n\n      w.finish();\n    }\n\n","bugFix":null,"bugIntro":["1a65994c1e63cc607f3176b95dba35bb4e58b69f"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"245b64c37f29b58edef53dfa639676263fe374b6":["605b061fadf71aa6458c0005eaae83a98350c403"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","245b64c37f29b58edef53dfa639676263fe374b6"],"605b061fadf71aa6458c0005eaae83a98350c403":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7":["93c59ad5034eecd863f267bd75e1df7b8a51e427"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85eb75e0c0203e44dcf686f35876cf6080f3a671"]},"commit2Childs":{"245b64c37f29b58edef53dfa639676263fe374b6":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"605b061fadf71aa6458c0005eaae83a98350c403":["245b64c37f29b58edef53dfa639676263fe374b6"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","93c59ad5034eecd863f267bd75e1df7b8a51e427","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7":["85eb75e0c0203e44dcf686f35876cf6080f3a671","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","605b061fadf71aa6458c0005eaae83a98350c403"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}