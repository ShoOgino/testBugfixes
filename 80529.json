{"path":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String,int).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String,int).mjava","sourceNew":"  public CompoundFileReader(Directory dir, String name, int readBufferSize)\n    throws IOException\n    {\n        directory = dir;\n        fileName = name;\n        this.readBufferSize = readBufferSize;\n\n        boolean success = false;\n\n        try {\n            stream = dir.openInput(name, readBufferSize);\n\n            // read the directory and init files\n            int count = stream.readVInt();\n            FileEntry entry = null;\n            for (int i=0; i<count; i++) {\n                long offset = stream.readLong();\n                String id = stream.readString();\n\n                if (entry != null) {\n                    // set length of the previous entry\n                    entry.length = offset - entry.offset;\n                }\n\n                entry = new FileEntry();\n                entry.offset = offset;\n                entries.put(id, entry);\n            }\n\n            // set the length of the final entry\n            if (entry != null) {\n                entry.length = stream.length() - entry.offset;\n            }\n\n            success = true;\n\n        } finally {\n            if (! success && (stream != null)) {\n                try {\n                    stream.close();\n                } catch (IOException e) { }\n            }\n        }\n    }\n\n","sourceOld":"  public CompoundFileReader(Directory dir, String name, int readBufferSize)\n    throws IOException\n    {\n        directory = dir;\n        fileName = name;\n        this.readBufferSize = readBufferSize;\n\n        boolean success = false;\n\n        try {\n            stream = dir.openInput(name, readBufferSize);\n\n            // read the directory and init files\n            int count = stream.readVInt();\n            FileEntry entry = null;\n            for (int i=0; i<count; i++) {\n                long offset = stream.readLong();\n                String id = stream.readString();\n\n                if (entry != null) {\n                    // set length of the previous entry\n                    entry.length = offset - entry.offset;\n                }\n\n                entry = new FileEntry();\n                entry.offset = offset;\n                entries.put(id, entry);\n            }\n\n            // set the length of the final entry\n            if (entry != null) {\n                entry.length = stream.length() - entry.offset;\n            }\n\n            success = true;\n\n        } finally {\n            if (! success && (stream != null)) {\n                try {\n                    stream.close();\n                } catch (IOException e) { }\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String,int).mjava","sourceNew":"  public CompoundFileReader(Directory dir, String name, int readBufferSize) throws IOException {\n        directory = dir;\n        fileName = name;\n        this.readBufferSize = readBufferSize;\n\n        boolean success = false;\n\n        try {\n            stream = dir.openInput(name, readBufferSize);\n\n            // read the first VInt. If it is negative, it's the version number\n            // otherwise it's the count (pre-3.1 indexes)\n            int firstInt = stream.readVInt();\n            \n            final int count;\n            final boolean stripSegmentName;\n            if (firstInt < CompoundFileWriter.FORMAT_PRE_VERSION) {\n              if (firstInt < CompoundFileWriter.FORMAT_CURRENT) {\n                throw new CorruptIndexException(\"Incompatible format version: \"\n                    + firstInt + \" expected \" + CompoundFileWriter.FORMAT_CURRENT);\n              }\n              // It's a post-3.1 index, read the count.\n              count = stream.readVInt();\n              stripSegmentName = false;\n            } else {\n              count = firstInt;\n              stripSegmentName = true;\n            }\n\n            // read the directory and init files\n            FileEntry entry = null;\n            for (int i=0; i<count; i++) {\n                long offset = stream.readLong();\n                String id = stream.readString();\n\n                if (stripSegmentName) {\n                  // Fix the id to not include the segment names. This is relevant for\n                  // pre-3.1 indexes.\n                  id = IndexFileNames.stripSegmentName(id);\n                }\n                \n                if (entry != null) {\n                    // set length of the previous entry\n                    entry.length = offset - entry.offset;\n                }\n\n                entry = new FileEntry();\n                entry.offset = offset;\n                entries.put(id, entry);\n            }\n\n            // set the length of the final entry\n            if (entry != null) {\n                entry.length = stream.length() - entry.offset;\n            }\n\n            success = true;\n\n        } finally {\n            if (!success && (stream != null)) {\n                try {\n                    stream.close();\n                } catch (IOException e) { }\n            }\n        }\n    }\n\n","sourceOld":"  public CompoundFileReader(Directory dir, String name, int readBufferSize)\n    throws IOException\n    {\n        directory = dir;\n        fileName = name;\n        this.readBufferSize = readBufferSize;\n\n        boolean success = false;\n\n        try {\n            stream = dir.openInput(name, readBufferSize);\n\n            // read the directory and init files\n            int count = stream.readVInt();\n            FileEntry entry = null;\n            for (int i=0; i<count; i++) {\n                long offset = stream.readLong();\n                String id = stream.readString();\n\n                if (entry != null) {\n                    // set length of the previous entry\n                    entry.length = offset - entry.offset;\n                }\n\n                entry = new FileEntry();\n                entry.offset = offset;\n                entries.put(id, entry);\n            }\n\n            // set the length of the final entry\n            if (entry != null) {\n                entry.length = stream.length() - entry.offset;\n            }\n\n            success = true;\n\n        } finally {\n            if (! success && (stream != null)) {\n                try {\n                    stream.close();\n                } catch (IOException e) { }\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4162a1cda4082030c3dd849ade21f33fb5e6f09","date":1308020263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String,int).mjava","sourceNew":"  public CompoundFileReader(Directory dir, String name, int readBufferSize) throws IOException {\n    directory = dir;\n    fileName = name;\n    this.readBufferSize = readBufferSize;\n    \n    boolean success = false;\n    \n    try {\n      stream = dir.openInput(name, readBufferSize);\n      \n      // read the first VInt. If it is negative, it's the version number\n      // otherwise it's the count (pre-3.1 indexes)\n      int firstInt = stream.readVInt();\n      \n      final int count;\n      final boolean stripSegmentName;\n      if (firstInt < CompoundFileWriter.FORMAT_PRE_VERSION) {\n        if (firstInt < CompoundFileWriter.FORMAT_CURRENT) {\n          throw new CorruptIndexException(\"Incompatible format version: \"\n              + firstInt + \" expected \" + CompoundFileWriter.FORMAT_CURRENT);\n        }\n        // It's a post-3.1 index, read the count.\n        count = stream.readVInt();\n        stripSegmentName = false;\n      } else {\n        count = firstInt;\n        stripSegmentName = true;\n      }\n      \n      // read the directory and init files\n      FileEntry entry = null;\n      for (int i=0; i<count; i++) {\n        long offset = stream.readLong();\n        String id = stream.readString();\n        \n        if (stripSegmentName) {\n          // Fix the id to not include the segment names. This is relevant for\n          // pre-3.1 indexes.\n          id = IndexFileNames.stripSegmentName(id);\n        }\n        \n        if (entry != null) {\n          // set length of the previous entry\n          entry.length = offset - entry.offset;\n        }\n        \n        entry = new FileEntry();\n        entry.offset = offset;\n        entries.put(id, entry);\n      }\n      \n      // set the length of the final entry\n      if (entry != null) {\n        entry.length = stream.length() - entry.offset;\n      }\n      \n      success = true;\n      \n    } finally {\n      if (!success && (stream != null)) {\n        try {\n          stream.close();\n        } catch (IOException e) { }\n      }\n    }\n  }\n\n","sourceOld":"  public CompoundFileReader(Directory dir, String name, int readBufferSize) throws IOException {\n        directory = dir;\n        fileName = name;\n        this.readBufferSize = readBufferSize;\n\n        boolean success = false;\n\n        try {\n            stream = dir.openInput(name, readBufferSize);\n\n            // read the first VInt. If it is negative, it's the version number\n            // otherwise it's the count (pre-3.1 indexes)\n            int firstInt = stream.readVInt();\n            \n            final int count;\n            final boolean stripSegmentName;\n            if (firstInt < CompoundFileWriter.FORMAT_PRE_VERSION) {\n              if (firstInt < CompoundFileWriter.FORMAT_CURRENT) {\n                throw new CorruptIndexException(\"Incompatible format version: \"\n                    + firstInt + \" expected \" + CompoundFileWriter.FORMAT_CURRENT);\n              }\n              // It's a post-3.1 index, read the count.\n              count = stream.readVInt();\n              stripSegmentName = false;\n            } else {\n              count = firstInt;\n              stripSegmentName = true;\n            }\n\n            // read the directory and init files\n            FileEntry entry = null;\n            for (int i=0; i<count; i++) {\n                long offset = stream.readLong();\n                String id = stream.readString();\n\n                if (stripSegmentName) {\n                  // Fix the id to not include the segment names. This is relevant for\n                  // pre-3.1 indexes.\n                  id = IndexFileNames.stripSegmentName(id);\n                }\n                \n                if (entry != null) {\n                    // set length of the previous entry\n                    entry.length = offset - entry.offset;\n                }\n\n                entry = new FileEntry();\n                entry.offset = offset;\n                entries.put(id, entry);\n            }\n\n            // set the length of the final entry\n            if (entry != null) {\n                entry.length = stream.length() - entry.offset;\n            }\n\n            success = true;\n\n        } finally {\n            if (!success && (stream != null)) {\n                try {\n                    stream.close();\n                } catch (IOException e) { }\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a542fac560159d974d6c5f663be7b4c4a59b2db","date":1308053254,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String,int).mjava","sourceNew":"  public CompoundFileReader(Directory dir, String name, int readBufferSize) throws IOException {\n    assert !(dir instanceof CompoundFileReader) : \"compound file inside of compound file: \" + name;\n    directory = dir;\n    fileName = name;\n    this.readBufferSize = readBufferSize;\n    \n    boolean success = false;\n    \n    try {\n      stream = dir.openInput(name, readBufferSize);\n      \n      // read the first VInt. If it is negative, it's the version number\n      // otherwise it's the count (pre-3.1 indexes)\n      int firstInt = stream.readVInt();\n      \n      final int count;\n      final boolean stripSegmentName;\n      if (firstInt < CompoundFileWriter.FORMAT_PRE_VERSION) {\n        if (firstInt < CompoundFileWriter.FORMAT_CURRENT) {\n          throw new CorruptIndexException(\"Incompatible format version: \"\n              + firstInt + \" expected \" + CompoundFileWriter.FORMAT_CURRENT);\n        }\n        // It's a post-3.1 index, read the count.\n        count = stream.readVInt();\n        stripSegmentName = false;\n      } else {\n        count = firstInt;\n        stripSegmentName = true;\n      }\n      \n      // read the directory and init files\n      FileEntry entry = null;\n      for (int i=0; i<count; i++) {\n        long offset = stream.readLong();\n        String id = stream.readString();\n        \n        if (stripSegmentName) {\n          // Fix the id to not include the segment names. This is relevant for\n          // pre-3.1 indexes.\n          id = IndexFileNames.stripSegmentName(id);\n        }\n        \n        if (entry != null) {\n          // set length of the previous entry\n          entry.length = offset - entry.offset;\n        }\n        \n        entry = new FileEntry();\n        entry.offset = offset;\n        entries.put(id, entry);\n      }\n      \n      // set the length of the final entry\n      if (entry != null) {\n        entry.length = stream.length() - entry.offset;\n      }\n      \n      success = true;\n      \n    } finally {\n      if (!success && (stream != null)) {\n        try {\n          stream.close();\n        } catch (IOException e) { }\n      }\n    }\n  }\n\n","sourceOld":"  public CompoundFileReader(Directory dir, String name, int readBufferSize) throws IOException {\n    directory = dir;\n    fileName = name;\n    this.readBufferSize = readBufferSize;\n    \n    boolean success = false;\n    \n    try {\n      stream = dir.openInput(name, readBufferSize);\n      \n      // read the first VInt. If it is negative, it's the version number\n      // otherwise it's the count (pre-3.1 indexes)\n      int firstInt = stream.readVInt();\n      \n      final int count;\n      final boolean stripSegmentName;\n      if (firstInt < CompoundFileWriter.FORMAT_PRE_VERSION) {\n        if (firstInt < CompoundFileWriter.FORMAT_CURRENT) {\n          throw new CorruptIndexException(\"Incompatible format version: \"\n              + firstInt + \" expected \" + CompoundFileWriter.FORMAT_CURRENT);\n        }\n        // It's a post-3.1 index, read the count.\n        count = stream.readVInt();\n        stripSegmentName = false;\n      } else {\n        count = firstInt;\n        stripSegmentName = true;\n      }\n      \n      // read the directory and init files\n      FileEntry entry = null;\n      for (int i=0; i<count; i++) {\n        long offset = stream.readLong();\n        String id = stream.readString();\n        \n        if (stripSegmentName) {\n          // Fix the id to not include the segment names. This is relevant for\n          // pre-3.1 indexes.\n          id = IndexFileNames.stripSegmentName(id);\n        }\n        \n        if (entry != null) {\n          // set length of the previous entry\n          entry.length = offset - entry.offset;\n        }\n        \n        entry = new FileEntry();\n        entry.offset = offset;\n        entries.put(id, entry);\n      }\n      \n      // set the length of the final entry\n      if (entry != null) {\n        entry.length = stream.length() - entry.offset;\n      }\n      \n      success = true;\n      \n    } finally {\n      if (!success && (stream != null)) {\n        try {\n          stream.close();\n        } catch (IOException e) { }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String,int).mjava","sourceNew":"  public CompoundFileReader(Directory dir, String name, int readBufferSize) throws IOException {\n    assert !(dir instanceof CompoundFileReader) : \"compound file inside of compound file: \" + name;\n    directory = dir;\n    fileName = name;\n    this.readBufferSize = readBufferSize;\n    \n    boolean success = false;\n    \n    try {\n      stream = dir.openInput(name, readBufferSize);\n      \n      // read the first VInt. If it is negative, it's the version number\n      // otherwise it's the count (pre-3.1 indexes)\n      int firstInt = stream.readVInt();\n      \n      final int count;\n      final boolean stripSegmentName;\n      if (firstInt < CompoundFileWriter.FORMAT_PRE_VERSION) {\n        if (firstInt < CompoundFileWriter.FORMAT_CURRENT) {\n          throw new CorruptIndexException(\"Incompatible format version: \"\n              + firstInt + \" expected \" + CompoundFileWriter.FORMAT_CURRENT);\n        }\n        // It's a post-3.1 index, read the count.\n        count = stream.readVInt();\n        stripSegmentName = false;\n      } else {\n        count = firstInt;\n        stripSegmentName = true;\n      }\n      \n      // read the directory and init files\n      FileEntry entry = null;\n      for (int i=0; i<count; i++) {\n        long offset = stream.readLong();\n        String id = stream.readString();\n        \n        if (stripSegmentName) {\n          // Fix the id to not include the segment names. This is relevant for\n          // pre-3.1 indexes.\n          id = IndexFileNames.stripSegmentName(id);\n        }\n        \n        if (entry != null) {\n          // set length of the previous entry\n          entry.length = offset - entry.offset;\n        }\n        \n        entry = new FileEntry();\n        entry.offset = offset;\n        entries.put(id, entry);\n      }\n      \n      // set the length of the final entry\n      if (entry != null) {\n        entry.length = stream.length() - entry.offset;\n      }\n      \n      success = true;\n      \n    } finally {\n      if (!success && (stream != null)) {\n        try {\n          stream.close();\n        } catch (IOException e) { }\n      }\n    }\n  }\n\n","sourceOld":"  public CompoundFileReader(Directory dir, String name, int readBufferSize) throws IOException {\n        directory = dir;\n        fileName = name;\n        this.readBufferSize = readBufferSize;\n\n        boolean success = false;\n\n        try {\n            stream = dir.openInput(name, readBufferSize);\n\n            // read the first VInt. If it is negative, it's the version number\n            // otherwise it's the count (pre-3.1 indexes)\n            int firstInt = stream.readVInt();\n            \n            final int count;\n            final boolean stripSegmentName;\n            if (firstInt < CompoundFileWriter.FORMAT_PRE_VERSION) {\n              if (firstInt < CompoundFileWriter.FORMAT_CURRENT) {\n                throw new CorruptIndexException(\"Incompatible format version: \"\n                    + firstInt + \" expected \" + CompoundFileWriter.FORMAT_CURRENT);\n              }\n              // It's a post-3.1 index, read the count.\n              count = stream.readVInt();\n              stripSegmentName = false;\n            } else {\n              count = firstInt;\n              stripSegmentName = true;\n            }\n\n            // read the directory and init files\n            FileEntry entry = null;\n            for (int i=0; i<count; i++) {\n                long offset = stream.readLong();\n                String id = stream.readString();\n\n                if (stripSegmentName) {\n                  // Fix the id to not include the segment names. This is relevant for\n                  // pre-3.1 indexes.\n                  id = IndexFileNames.stripSegmentName(id);\n                }\n                \n                if (entry != null) {\n                    // set length of the previous entry\n                    entry.length = offset - entry.offset;\n                }\n\n                entry = new FileEntry();\n                entry.offset = offset;\n                entries.put(id, entry);\n            }\n\n            // set the length of the final entry\n            if (entry != null) {\n                entry.length = stream.length() - entry.offset;\n            }\n\n            success = true;\n\n        } finally {\n            if (!success && (stream != null)) {\n                try {\n                    stream.close();\n                } catch (IOException e) { }\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String,int).mjava","sourceNew":"  public CompoundFileReader(Directory dir, String name, IOContext context) throws IOException {\n    assert !(dir instanceof CompoundFileReader) : \"compound file inside of compound file: \" + name;\n    directory = dir;\n    fileName = name;\n    \n    boolean success = false;\n    \n    try {\n      stream = dir.openInput(name, context);\n      \n      // read the first VInt. If it is negative, it's the version number\n      // otherwise it's the count (pre-3.1 indexes)\n      int firstInt = stream.readVInt();\n      \n      final int count;\n      final boolean stripSegmentName;\n      if (firstInt < CompoundFileWriter.FORMAT_PRE_VERSION) {\n        if (firstInt < CompoundFileWriter.FORMAT_CURRENT) {\n          throw new CorruptIndexException(\"Incompatible format version: \"\n              + firstInt + \" expected \" + CompoundFileWriter.FORMAT_CURRENT);\n        }\n        // It's a post-3.1 index, read the count.\n        count = stream.readVInt();\n        stripSegmentName = false;\n      } else {\n        count = firstInt;\n        stripSegmentName = true;\n      }\n      \n      // read the directory and init files\n      FileEntry entry = null;\n      for (int i=0; i<count; i++) {\n        long offset = stream.readLong();\n        String id = stream.readString();\n        \n        if (stripSegmentName) {\n          // Fix the id to not include the segment names. This is relevant for\n          // pre-3.1 indexes.\n          id = IndexFileNames.stripSegmentName(id);\n        }\n        \n        if (entry != null) {\n          // set length of the previous entry\n          entry.length = offset - entry.offset;\n        }\n        \n        entry = new FileEntry();\n        entry.offset = offset;\n        entries.put(id, entry);\n      }\n      \n      // set the length of the final entry\n      if (entry != null) {\n        entry.length = stream.length() - entry.offset;\n      }\n      \n      success = true;\n      \n    } finally {\n      if (!success && (stream != null)) {\n        try {\n          stream.close();\n        } catch (IOException e) { }\n      }\n    }\n  }\n\n","sourceOld":"  public CompoundFileReader(Directory dir, String name, int readBufferSize) throws IOException {\n    assert !(dir instanceof CompoundFileReader) : \"compound file inside of compound file: \" + name;\n    directory = dir;\n    fileName = name;\n    this.readBufferSize = readBufferSize;\n    \n    boolean success = false;\n    \n    try {\n      stream = dir.openInput(name, readBufferSize);\n      \n      // read the first VInt. If it is negative, it's the version number\n      // otherwise it's the count (pre-3.1 indexes)\n      int firstInt = stream.readVInt();\n      \n      final int count;\n      final boolean stripSegmentName;\n      if (firstInt < CompoundFileWriter.FORMAT_PRE_VERSION) {\n        if (firstInt < CompoundFileWriter.FORMAT_CURRENT) {\n          throw new CorruptIndexException(\"Incompatible format version: \"\n              + firstInt + \" expected \" + CompoundFileWriter.FORMAT_CURRENT);\n        }\n        // It's a post-3.1 index, read the count.\n        count = stream.readVInt();\n        stripSegmentName = false;\n      } else {\n        count = firstInt;\n        stripSegmentName = true;\n      }\n      \n      // read the directory and init files\n      FileEntry entry = null;\n      for (int i=0; i<count; i++) {\n        long offset = stream.readLong();\n        String id = stream.readString();\n        \n        if (stripSegmentName) {\n          // Fix the id to not include the segment names. This is relevant for\n          // pre-3.1 indexes.\n          id = IndexFileNames.stripSegmentName(id);\n        }\n        \n        if (entry != null) {\n          // set length of the previous entry\n          entry.length = offset - entry.offset;\n        }\n        \n        entry = new FileEntry();\n        entry.offset = offset;\n        entries.put(id, entry);\n      }\n      \n      // set the length of the final entry\n      if (entry != null) {\n        entry.length = stream.length() - entry.offset;\n      }\n      \n      success = true;\n      \n    } finally {\n      if (!success && (stream != null)) {\n        try {\n          stream.close();\n        } catch (IOException e) { }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String,int).mjava","sourceNew":null,"sourceOld":"  public CompoundFileReader(Directory dir, String name, int readBufferSize) throws IOException {\n    assert !(dir instanceof CompoundFileReader) : \"compound file inside of compound file: \" + name;\n    directory = dir;\n    fileName = name;\n    this.readBufferSize = readBufferSize;\n    \n    boolean success = false;\n    \n    try {\n      stream = dir.openInput(name, readBufferSize);\n      \n      // read the first VInt. If it is negative, it's the version number\n      // otherwise it's the count (pre-3.1 indexes)\n      int firstInt = stream.readVInt();\n      \n      final int count;\n      final boolean stripSegmentName;\n      if (firstInt < CompoundFileWriter.FORMAT_PRE_VERSION) {\n        if (firstInt < CompoundFileWriter.FORMAT_CURRENT) {\n          throw new CorruptIndexException(\"Incompatible format version: \"\n              + firstInt + \" expected \" + CompoundFileWriter.FORMAT_CURRENT);\n        }\n        // It's a post-3.1 index, read the count.\n        count = stream.readVInt();\n        stripSegmentName = false;\n      } else {\n        count = firstInt;\n        stripSegmentName = true;\n      }\n      \n      // read the directory and init files\n      FileEntry entry = null;\n      for (int i=0; i<count; i++) {\n        long offset = stream.readLong();\n        String id = stream.readString();\n        \n        if (stripSegmentName) {\n          // Fix the id to not include the segment names. This is relevant for\n          // pre-3.1 indexes.\n          id = IndexFileNames.stripSegmentName(id);\n        }\n        \n        if (entry != null) {\n          // set length of the previous entry\n          entry.length = offset - entry.offset;\n        }\n        \n        entry = new FileEntry();\n        entry.offset = offset;\n        entries.put(id, entry);\n      }\n      \n      // set the length of the final entry\n      if (entry != null) {\n        entry.length = stream.length() - entry.offset;\n      }\n      \n      success = true;\n      \n    } finally {\n      if (!success && (stream != null)) {\n        try {\n          stream.close();\n        } catch (IOException e) { }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String,int).mjava","sourceNew":null,"sourceOld":"  public CompoundFileReader(Directory dir, String name, int readBufferSize) throws IOException {\n    assert !(dir instanceof CompoundFileReader) : \"compound file inside of compound file: \" + name;\n    directory = dir;\n    fileName = name;\n    this.readBufferSize = readBufferSize;\n    \n    boolean success = false;\n    \n    try {\n      stream = dir.openInput(name, readBufferSize);\n      \n      // read the first VInt. If it is negative, it's the version number\n      // otherwise it's the count (pre-3.1 indexes)\n      int firstInt = stream.readVInt();\n      \n      final int count;\n      final boolean stripSegmentName;\n      if (firstInt < CompoundFileWriter.FORMAT_PRE_VERSION) {\n        if (firstInt < CompoundFileWriter.FORMAT_CURRENT) {\n          throw new CorruptIndexException(\"Incompatible format version: \"\n              + firstInt + \" expected \" + CompoundFileWriter.FORMAT_CURRENT);\n        }\n        // It's a post-3.1 index, read the count.\n        count = stream.readVInt();\n        stripSegmentName = false;\n      } else {\n        count = firstInt;\n        stripSegmentName = true;\n      }\n      \n      // read the directory and init files\n      FileEntry entry = null;\n      for (int i=0; i<count; i++) {\n        long offset = stream.readLong();\n        String id = stream.readString();\n        \n        if (stripSegmentName) {\n          // Fix the id to not include the segment names. This is relevant for\n          // pre-3.1 indexes.\n          id = IndexFileNames.stripSegmentName(id);\n        }\n        \n        if (entry != null) {\n          // set length of the previous entry\n          entry.length = offset - entry.offset;\n        }\n        \n        entry = new FileEntry();\n        entry.offset = offset;\n        entries.put(id, entry);\n      }\n      \n      // set the length of the final entry\n      if (entry != null) {\n        entry.length = stream.length() - entry.offset;\n      }\n      \n      success = true;\n      \n    } finally {\n      if (!success && (stream != null)) {\n        try {\n          stream.close();\n        } catch (IOException e) { }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4162a1cda4082030c3dd849ade21f33fb5e6f09":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["0a542fac560159d974d6c5f663be7b4c4a59b2db"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["0a542fac560159d974d6c5f663be7b4c4a59b2db"],"2553b00f699380c64959ccb27991289aae87be2e":["9ed208afa1e7aa98899ddb1dedfddedddf898253","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"0a542fac560159d974d6c5f663be7b4c4a59b2db":["f4162a1cda4082030c3dd849ade21f33fb5e6f09"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","0a542fac560159d974d6c5f663be7b4c4a59b2db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0aab6e810b4b0d3743d6a048be0602801f4b3920"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f4162a1cda4082030c3dd849ade21f33fb5e6f09":["0a542fac560159d974d6c5f663be7b4c4a59b2db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["2553b00f699380c64959ccb27991289aae87be2e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":[],"2553b00f699380c64959ccb27991289aae87be2e":[],"0a542fac560159d974d6c5f663be7b4c4a59b2db":["0aab6e810b4b0d3743d6a048be0602801f4b3920","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["2553b00f699380c64959ccb27991289aae87be2e"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["f4162a1cda4082030c3dd849ade21f33fb5e6f09","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"]},"heads":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","2553b00f699380c64959ccb27991289aae87be2e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}