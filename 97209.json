{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#close().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   * \n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   * \n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   * \n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c2047784e704fe141e0ff36affac8a7cb6c7bbec","date":1295352100,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   * \n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   * \n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"22d5338b3f651d728dac7bfc4bd4d1b04c5d755b","date":1295364338,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   * \n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   * \n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b9dc373b96fc96e6300e2f5af947f6998e6aa6a6","date":1295759448,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   * \n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   * \n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"94ece20c86498b4bcc9ef6f2f4640f4a58e17857","date":1295785671,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   * \n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   * \n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  @Override\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   * \n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   * \n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   * \n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#close().mjava","sourceNew":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","sourceOld":"  /**\n   * Commits all changes to an index and closes all\n   * associated files.  Note that this may be a costly\n   * operation, so, try to re-use a single writer instead of\n   * closing and opening a new one.  See {@link #commit()} for\n   * caveats about write caching done by some IO devices.\n   *\n   * <p> If an Exception is hit during close, eg due to disk\n   * full or some other reason, then both the on-disk index\n   * and the internal state of the IndexWriter instance will\n   * be consistent.  However, the close will not be complete\n   * even though part of it (flushing buffered documents)\n   * may have succeeded, so the write lock will still be\n   * held.</p>\n   *\n   * <p> If you can correct the underlying cause (eg free up\n   * some disk space) then you can call close() again.\n   * Failing that, if you want to force the write lock to be\n   * released (dangerous, because you may then lose buffered\n   * docs in the IndexWriter instance) then you can do\n   * something like this:</p>\n   *\n   * <pre>\n   * try {\n   *   writer.close();\n   * } finally {\n   *   if (IndexWriter.isLocked(directory)) {\n   *     IndexWriter.unlock(directory);\n   *   }\n   * }\n   * </pre>\n   *\n   * after which, you must be certain not to use the writer\n   * instance anymore.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void close() throws CorruptIndexException, IOException {\n    close(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"94ece20c86498b4bcc9ef6f2f4640f4a58e17857":["b9dc373b96fc96e6300e2f5af947f6998e6aa6a6"],"b9dc373b96fc96e6300e2f5af947f6998e6aa6a6":["22d5338b3f651d728dac7bfc4bd4d1b04c5d755b"],"c2047784e704fe141e0ff36affac8a7cb6c7bbec":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["94ece20c86498b4bcc9ef6f2f4640f4a58e17857","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"22d5338b3f651d728dac7bfc4bd4d1b04c5d755b":["c2047784e704fe141e0ff36affac8a7cb6c7bbec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["9454a6510e2db155fb01faa5c049b06ece95fab9","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["94ece20c86498b4bcc9ef6f2f4640f4a58e17857","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"94ece20c86498b4bcc9ef6f2f4640f4a58e17857":["a3776dccca01c11e7046323cfad46a3b4a471233","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b9dc373b96fc96e6300e2f5af947f6998e6aa6a6":["94ece20c86498b4bcc9ef6f2f4640f4a58e17857"],"c2047784e704fe141e0ff36affac8a7cb6c7bbec":["22d5338b3f651d728dac7bfc4bd4d1b04c5d755b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"22d5338b3f651d728dac7bfc4bd4d1b04c5d755b":["b9dc373b96fc96e6300e2f5af947f6998e6aa6a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c2047784e704fe141e0ff36affac8a7cb6c7bbec","135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}