{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesConsumer#countToAddressIterator(Iterable[Number]).mjava","commits":[{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesConsumer#countToAddressIterator(Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Just aggregates the count values so they become\n   * \"addresses\", and adds one more value in the end\n   * (the final sum)\n   */ \n  private Iterable<Number> countToAddressIterator(final Iterable<Number> counts) {\n    return new Iterable<Number>() {\n      @Override\n      public Iterator<Number> iterator() {\n        final Iterator<Number> iter = counts.iterator();\n        \n        return new Iterator<Number>() {\n          \n          long sum;\n          boolean ended;\n          \n          @Override\n          public boolean hasNext() {\n            return iter.hasNext() || !ended;\n          }\n          \n          @Override\n          public Number next() {\n            long toReturn = sum;\n            \n            if (iter.hasNext()) {\n              Number n = iter.next();\n              if (n != null) {\n                sum += n.longValue();\n              }\n            } else if (!ended) {\n              ended = true;\n            } else {\n              assert false;\n            }\n            \n            return toReturn;\n          }\n          \n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesConsumer#countToAddressIterator(Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Just aggregates the count values so they become\n   * \"addresses\", and adds one more value in the end\n   * (the final sum)\n   */ \n  private Iterable<Number> countToAddressIterator(final Iterable<Number> counts) {\n    return new Iterable<Number>() {\n      @Override\n      public Iterator<Number> iterator() {\n        final Iterator<Number> iter = counts.iterator();\n        \n        return new Iterator<Number>() {\n          \n          long sum;\n          boolean ended;\n          \n          @Override\n          public boolean hasNext() {\n            return iter.hasNext() || !ended;\n          }\n          \n          @Override\n          public Number next() {\n            long toReturn = sum;\n            \n            if (iter.hasNext()) {\n              Number n = iter.next();\n              if (n != null) {\n                sum += n.longValue();\n              }\n            } else if (!ended) {\n              ended = true;\n            } else {\n              assert false;\n            }\n            \n            return toReturn;\n          }\n          \n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f18fb78980c55a781fd9fdc505634171059b1d","date":1567674462,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesConsumer#countToAddressIterator(Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  /** \n   * Just aggregates the count values so they become\n   * \"addresses\", and adds one more value in the end\n   * (the final sum)\n   */ \n  private Iterable<Number> countToAddressIterator(final Iterable<Number> counts) {\n    return new Iterable<Number>() {\n      @Override\n      public Iterator<Number> iterator() {\n        final Iterator<Number> iter = counts.iterator();\n        \n        return new Iterator<Number>() {\n          \n          long sum;\n          boolean ended;\n          \n          @Override\n          public boolean hasNext() {\n            return iter.hasNext() || !ended;\n          }\n          \n          @Override\n          public Number next() {\n            long toReturn = sum;\n            \n            if (iter.hasNext()) {\n              Number n = iter.next();\n              if (n != null) {\n                sum += n.longValue();\n              }\n            } else if (!ended) {\n              ended = true;\n            } else {\n              assert false;\n            }\n            \n            return toReturn;\n          }\n          \n          @Override\n          public void remove() {\n            throw new UnsupportedOperationException();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74f18fb78980c55a781fd9fdc505634171059b1d":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74f18fb78980c55a781fd9fdc505634171059b1d"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"74f18fb78980c55a781fd9fdc505634171059b1d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["74f18fb78980c55a781fd9fdc505634171059b1d","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}