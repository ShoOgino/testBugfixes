{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#toExpression(StreamFactory,boolean).mjava","commits":[{"id":"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941","date":1461079048,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#toExpression(StreamFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // stream\n    if(includeStreams){\n      expression.addParameter(stream.toExpression(factory));\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n    \n    // over\n    if(eq instanceof Expressible){\n      expression.addParameter(new StreamExpressionNamedParameter(\"by\",((Expressible)eq).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This ReducerStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n\n    if(op instanceof Expressible) {\n      expression.addParameter(op.toExpression(factory));\n    } else {\n      throw new IOException(\"This ReducerStream contains a non-expressible operation - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b71fe681187ac8552caaff9d5a7f1f3cac47b56","date":1461081992,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ReducerStream#toExpression(StreamFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // stream\n    if(includeStreams){\n      expression.addParameter(stream.toExpression(factory));\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n    \n    // over\n    if(eq instanceof Expressible){\n      expression.addParameter(new StreamExpressionNamedParameter(\"by\",((Expressible)eq).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This ReducerStream contains a non-expressible comparator - it cannot be converted to an expression\");\n    }\n\n    if(op instanceof Expressible) {\n      expression.addParameter(op.toExpression(factory));\n    } else {\n      throw new IOException(\"This ReducerStream contains a non-expressible operation - it cannot be converted to an expression\");\n    }\n    \n    return expression;   \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"]},"commit2Childs":{"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}