{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#rollback(String).mjava","commits":[{"id":"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","date":1425554964,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#rollback(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Performs a rollback of all non-committed documents pending.\n   *\n   * Note that this is not a true rollback as in databases. Content you have previously\n   * added may have been committed due to autoCommit, buffer full, other client performing\n   * a commit etc.\n   *\n   * @param collection the Solr collection to send the rollback to\n   *\n   * @return an {@link org.apache.solr.client.solrj.response.UpdateResponse} containing the response\n   *         from the server\n   *\n   * @throws IOException If there is a low-level I/O error.\n   * @throws SolrServerException if there is an error on the server\n   */\n  public UpdateResponse rollback(String collection) throws SolrServerException, IOException {\n    return new UpdateRequest().rollback().process(this, collection);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#rollback(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Performs a rollback of all non-committed documents pending.\n   *\n   * Note that this is not a true rollback as in databases. Content you have previously\n   * added may have been committed due to autoCommit, buffer full, other client performing\n   * a commit etc.\n   *\n   * @param collection the Solr collection to send the rollback to\n   *\n   * @return an {@link org.apache.solr.client.solrj.response.UpdateResponse} containing the response\n   *         from the server\n   *\n   * @throws IOException If there is a low-level I/O error.\n   * @throws SolrServerException if there is an error on the server\n   */\n  public UpdateResponse rollback(String collection) throws SolrServerException, IOException {\n    return new UpdateRequest().rollback().process(this, collection);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f11db56c6ede29e31c6a46ef65cc63dfa76193a","date":1539817856,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#rollback(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#rollback(String).mjava","sourceNew":"  /**\n   * Performs a rollback of all non-committed documents pending.\n   *\n   * Note that this is not a true rollback as in databases. Content you have previously\n   * added may have been committed due to autoCommit, buffer full, other client performing\n   * a commit etc.\n   * <p>\n   * Also note that rollbacks reset changes made by <i>all</i> clients.  Use this method carefully when multiple clients,\n   * or multithreaded clients are in use.\n   *\n   * @param collection the Solr collection to send the rollback to\n   *\n   * @return an {@link org.apache.solr.client.solrj.response.UpdateResponse} containing the response\n   *         from the server\n   *\n   * @throws IOException If there is a low-level I/O error.\n   * @throws SolrServerException if there is an error on the server\n   */\n  public UpdateResponse rollback(String collection) throws SolrServerException, IOException {\n    return new UpdateRequest().rollback().process(this, collection);\n  }\n\n","sourceOld":"  /**\n   * Performs a rollback of all non-committed documents pending.\n   *\n   * Note that this is not a true rollback as in databases. Content you have previously\n   * added may have been committed due to autoCommit, buffer full, other client performing\n   * a commit etc.\n   *\n   * @param collection the Solr collection to send the rollback to\n   *\n   * @return an {@link org.apache.solr.client.solrj.response.UpdateResponse} containing the response\n   *         from the server\n   *\n   * @throws IOException If there is a low-level I/O error.\n   * @throws SolrServerException if there is an error on the server\n   */\n  public UpdateResponse rollback(String collection) throws SolrServerException, IOException {\n    return new UpdateRequest().rollback().process(this, collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f11db56c6ede29e31c6a46ef65cc63dfa76193a":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4f11db56c6ede29e31c6a46ef65cc63dfa76193a"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"4f11db56c6ede29e31c6a46ef65cc63dfa76193a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4f11db56c6ede29e31c6a46ef65cc63dfa76193a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}