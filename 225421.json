{"path":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int,int).mjava","commits":[{"id":"e06babaa3e8b78433266149d50d1500ba941652c","date":1344293820,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  protected MultiLevelSkipListWriter(int skipInterval, int skipMultiplier, int maxSkipLevels, int df) {\n    this.skipInterval = skipInterval;\n    this.skipMultiplier = skipMultiplier;\n    \n    // calculate the maximum number of skip levels for this document frequency\n    if (df <= skipInterval) {\n      numberOfSkipLevels = 1;\n    } else {\n      numberOfSkipLevels = 1+MathUtil.log(df/skipInterval, skipMultiplier);\n    }\n    \n    // make sure it does not exceed maxSkipLevels\n    if (numberOfSkipLevels > maxSkipLevels) {\n      numberOfSkipLevels = maxSkipLevels;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  protected MultiLevelSkipListWriter(int skipInterval, int skipMultiplier, int maxSkipLevels, int df) {\n    this.skipInterval = skipInterval;\n    this.skipMultiplier = skipMultiplier;\n    \n    // calculate the maximum number of skip levels for this document frequency\n    if (df <= skipInterval) {\n      numberOfSkipLevels = 1;\n    } else {\n      numberOfSkipLevels = 1+MathUtil.log(df/skipInterval, skipMultiplier);\n    }\n    \n    // make sure it does not exceed maxSkipLevels\n    if (numberOfSkipLevels > maxSkipLevels) {\n      numberOfSkipLevels = maxSkipLevels;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  protected MultiLevelSkipListWriter(int skipInterval, int skipMultiplier, int maxSkipLevels, int df) {\n    this.skipInterval = skipInterval;\n    this.skipMultiplier = skipMultiplier;\n    \n    // calculate the maximum number of skip levels for this document frequency\n    if (df <= skipInterval) {\n      numberOfSkipLevels = 1;\n    } else {\n      numberOfSkipLevels = 1+MathUtil.log(df/skipInterval, skipMultiplier);\n    }\n    \n    // make sure it does not exceed maxSkipLevels\n    if (numberOfSkipLevels > maxSkipLevels) {\n      numberOfSkipLevels = maxSkipLevels;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519435fc0d6082a1b8081f9492b714f716877437","date":1348258553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int,int).mjava","sourceNew":"  /** Creates a {@code MultiLevelSkipListWriter}. */\n  protected MultiLevelSkipListWriter(int skipInterval, int skipMultiplier, int maxSkipLevels, int df) {\n    this.skipInterval = skipInterval;\n    this.skipMultiplier = skipMultiplier;\n    \n    // calculate the maximum number of skip levels for this document frequency\n    if (df <= skipInterval) {\n      numberOfSkipLevels = 1;\n    } else {\n      numberOfSkipLevels = 1+MathUtil.log(df/skipInterval, skipMultiplier);\n    }\n    \n    // make sure it does not exceed maxSkipLevels\n    if (numberOfSkipLevels > maxSkipLevels) {\n      numberOfSkipLevels = maxSkipLevels;\n    }\n  }\n\n","sourceOld":"  protected MultiLevelSkipListWriter(int skipInterval, int skipMultiplier, int maxSkipLevels, int df) {\n    this.skipInterval = skipInterval;\n    this.skipMultiplier = skipMultiplier;\n    \n    // calculate the maximum number of skip levels for this document frequency\n    if (df <= skipInterval) {\n      numberOfSkipLevels = 1;\n    } else {\n      numberOfSkipLevels = 1+MathUtil.log(df/skipInterval, skipMultiplier);\n    }\n    \n    // make sure it does not exceed maxSkipLevels\n    if (numberOfSkipLevels > maxSkipLevels) {\n      numberOfSkipLevels = maxSkipLevels;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int,int).mjava","sourceNew":"  /** Creates a {@code MultiLevelSkipListWriter}. */\n  protected MultiLevelSkipListWriter(int skipInterval, int skipMultiplier, int maxSkipLevels, int df) {\n    this.skipInterval = skipInterval;\n    this.skipMultiplier = skipMultiplier;\n    \n    int numberOfSkipLevels;\n    // calculate the maximum number of skip levels for this document frequency\n    if (df <= skipInterval) {\n      numberOfSkipLevels = 1;\n    } else {\n      numberOfSkipLevels = 1+MathUtil.log(df/skipInterval, skipMultiplier);\n    }\n    \n    // make sure it does not exceed maxSkipLevels\n    if (numberOfSkipLevels > maxSkipLevels) {\n      numberOfSkipLevels = maxSkipLevels;\n    }\n    this.numberOfSkipLevels = numberOfSkipLevels;\n  }\n\n","sourceOld":"  /** Creates a {@code MultiLevelSkipListWriter}. */\n  protected MultiLevelSkipListWriter(int skipInterval, int skipMultiplier, int maxSkipLevels, int df) {\n    this.skipInterval = skipInterval;\n    this.skipMultiplier = skipMultiplier;\n    \n    // calculate the maximum number of skip levels for this document frequency\n    if (df <= skipInterval) {\n      numberOfSkipLevels = 1;\n    } else {\n      numberOfSkipLevels = 1+MathUtil.log(df/skipInterval, skipMultiplier);\n    }\n    \n    // make sure it does not exceed maxSkipLevels\n    if (numberOfSkipLevels > maxSkipLevels) {\n      numberOfSkipLevels = maxSkipLevels;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"519435fc0d6082a1b8081f9492b714f716877437":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["519435fc0d6082a1b8081f9492b714f716877437"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e06babaa3e8b78433266149d50d1500ba941652c"],"e06babaa3e8b78433266149d50d1500ba941652c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["622a708571e534680618b3c5e0c28ac539a47776"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"519435fc0d6082a1b8081f9492b714f716877437":["622a708571e534680618b3c5e0c28ac539a47776"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","f8615860cb50aefb8eebca1d1b3893dbe21cf126","e06babaa3e8b78433266149d50d1500ba941652c"],"622a708571e534680618b3c5e0c28ac539a47776":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","519435fc0d6082a1b8081f9492b714f716877437"],"e06babaa3e8b78433266149d50d1500ba941652c":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}