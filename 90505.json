{"path":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String).mjava","commits":[{"id":"36b1ce25b5b465615c00f409ce694664abbe7bd2","date":1481836328,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  private Enumerable<Object> query(final Properties properties,\n                                   final List<Map.Entry<String, Class>> fields,\n                                   final String query,\n                                   final List<Pair<String, String>> orders,\n                                   final List<String> buckets,\n                                   final List<Pair<String, String>> metricPairs,\n                                   final String limit,\n                                   final String negativeQuery) {\n    // SolrParams should be a ModifiableParams instead of a map\n    boolean mapReduce = \"map_reduce\".equals(properties.getProperty(\"aggregationMode\"));\n    boolean negative = Boolean.parseBoolean(negativeQuery);\n\n    String q = null;\n\n    if (query == null) {\n      q = DEFAULT_QUERY;\n    } else {\n      if(negative) {\n        q = DEFAULT_QUERY + \" AND \" + query;\n      } else {\n        q = query;\n      }\n    }\n\n    TupleStream tupleStream;\n    String zk = properties.getProperty(\"zk\");\n    try {\n      if (metricPairs.isEmpty() && buckets.isEmpty()) {\n        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);\n      } else {\n        if(buckets.isEmpty()) {\n          tupleStream = handleStats(zk, collection, q, metricPairs);\n        } else {\n          if(mapReduce) {\n            tupleStream = handleGroupByMapReduce(zk,\n                                                 collection,\n                                                 properties,\n                                                 fields,\n                                                 q,\n                                                 orders,\n                                                 buckets,\n                                                 metricPairs,\n                                                 limit);\n          } else {\n            tupleStream = handleGroupByFacet(zk,\n                                             collection,\n                                             fields,\n                                             q,\n                                             orders,\n                                             buckets,\n                                             metricPairs,\n                                             limit);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      // Use original fields list to make sure only the fields specified are enumerated\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4e643056790ca1e73898892ffb5b50ae883232","date":1486576891,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String).mjava","sourceNew":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  private Enumerable<Object> query(final Properties properties,\n                                   final List<Map.Entry<String, Class>> fields,\n                                   final String query,\n                                   final List<Pair<String, String>> orders,\n                                   final List<String> buckets,\n                                   final List<Pair<String, String>> metricPairs,\n                                   final String limit,\n                                   final String negativeQuery) {\n    // SolrParams should be a ModifiableParams instead of a map\n    boolean mapReduce = \"map_reduce\".equals(properties.getProperty(\"aggregationMode\"));\n    boolean negative = Boolean.parseBoolean(negativeQuery);\n\n    String q = null;\n\n    if (query == null) {\n      q = DEFAULT_QUERY;\n    } else {\n      if(negative) {\n        q = DEFAULT_QUERY + \" AND \" + query;\n      } else {\n        q = query;\n      }\n    }\n\n    System.out.println(\"####### Limit:\"+limit);\n\n    TupleStream tupleStream;\n    String zk = properties.getProperty(\"zk\");\n    try {\n      if (metricPairs.isEmpty() && buckets.isEmpty()) {\n        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);\n      } else {\n        if(buckets.isEmpty()) {\n          tupleStream = handleStats(zk, collection, q, metricPairs);\n        } else {\n          if(mapReduce) {\n            tupleStream = handleGroupByMapReduce(zk,\n                                                 collection,\n                                                 properties,\n                                                 fields,\n                                                 q,\n                                                 orders,\n                                                 buckets,\n                                                 metricPairs,\n                                                 limit);\n          } else {\n            tupleStream = handleGroupByFacet(zk,\n                                             collection,\n                                             fields,\n                                             q,\n                                             orders,\n                                             buckets,\n                                             metricPairs,\n                                             limit);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      // Use original fields list to make sure only the fields specified are enumerated\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","sourceOld":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  private Enumerable<Object> query(final Properties properties,\n                                   final List<Map.Entry<String, Class>> fields,\n                                   final String query,\n                                   final List<Pair<String, String>> orders,\n                                   final List<String> buckets,\n                                   final List<Pair<String, String>> metricPairs,\n                                   final String limit,\n                                   final String negativeQuery) {\n    // SolrParams should be a ModifiableParams instead of a map\n    boolean mapReduce = \"map_reduce\".equals(properties.getProperty(\"aggregationMode\"));\n    boolean negative = Boolean.parseBoolean(negativeQuery);\n\n    String q = null;\n\n    if (query == null) {\n      q = DEFAULT_QUERY;\n    } else {\n      if(negative) {\n        q = DEFAULT_QUERY + \" AND \" + query;\n      } else {\n        q = query;\n      }\n    }\n\n    TupleStream tupleStream;\n    String zk = properties.getProperty(\"zk\");\n    try {\n      if (metricPairs.isEmpty() && buckets.isEmpty()) {\n        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);\n      } else {\n        if(buckets.isEmpty()) {\n          tupleStream = handleStats(zk, collection, q, metricPairs);\n        } else {\n          if(mapReduce) {\n            tupleStream = handleGroupByMapReduce(zk,\n                                                 collection,\n                                                 properties,\n                                                 fields,\n                                                 q,\n                                                 orders,\n                                                 buckets,\n                                                 metricPairs,\n                                                 limit);\n          } else {\n            tupleStream = handleGroupByFacet(zk,\n                                             collection,\n                                             fields,\n                                             q,\n                                             orders,\n                                             buckets,\n                                             metricPairs,\n                                             limit);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      // Use original fields list to make sure only the fields specified are enumerated\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5cb41f0427fb7a75b0bfefe992561738c11fd80","date":1486576891,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrTable#query(Properties,List[Map.Entry[String,Class]],String,List[Pair[String,String]],List[String],List[Pair[String,String]],String,String).mjava","sourceNew":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  private Enumerable<Object> query(final Properties properties,\n                                   final List<Map.Entry<String, Class>> fields,\n                                   final String query,\n                                   final List<Pair<String, String>> orders,\n                                   final List<String> buckets,\n                                   final List<Pair<String, String>> metricPairs,\n                                   final String limit,\n                                   final String negativeQuery,\n                                   final String havingPredicate) {\n    // SolrParams should be a ModifiableParams instead of a map\n    boolean mapReduce = \"map_reduce\".equals(properties.getProperty(\"aggregationMode\"));\n    boolean negative = Boolean.parseBoolean(negativeQuery);\n\n    String q = null;\n\n    if (query == null) {\n      q = DEFAULT_QUERY;\n    } else {\n      if(negative) {\n        q = DEFAULT_QUERY + \" AND \" + query;\n      } else {\n        q = query;\n      }\n    }\n\n    TupleStream tupleStream;\n    String zk = properties.getProperty(\"zk\");\n    try {\n      if (metricPairs.isEmpty() && buckets.isEmpty()) {\n        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);\n      } else {\n        if(buckets.isEmpty()) {\n          tupleStream = handleStats(zk, collection, q, metricPairs);\n        } else {\n          if(mapReduce) {\n            tupleStream = handleGroupByMapReduce(zk,\n                                                 collection,\n                                                 properties,\n                                                 fields,\n                                                 q,\n                                                 orders,\n                                                 buckets,\n                                                 metricPairs,\n                                                 limit,\n                                                 havingPredicate);\n          } else {\n            tupleStream = handleGroupByFacet(zk,\n                                             collection,\n                                             fields,\n                                             q,\n                                             orders,\n                                             buckets,\n                                             metricPairs,\n                                             limit,\n                                             havingPredicate);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      // Use original fields list to make sure only the fields specified are enumerated\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","sourceOld":"  /** Executes a Solr query on the underlying table.\n   *\n   * @param properties Connections properties\n   * @param fields List of fields to project\n   * @param query A string for the query\n   * @return Enumerator of results\n   */\n  private Enumerable<Object> query(final Properties properties,\n                                   final List<Map.Entry<String, Class>> fields,\n                                   final String query,\n                                   final List<Pair<String, String>> orders,\n                                   final List<String> buckets,\n                                   final List<Pair<String, String>> metricPairs,\n                                   final String limit,\n                                   final String negativeQuery) {\n    // SolrParams should be a ModifiableParams instead of a map\n    boolean mapReduce = \"map_reduce\".equals(properties.getProperty(\"aggregationMode\"));\n    boolean negative = Boolean.parseBoolean(negativeQuery);\n\n    String q = null;\n\n    if (query == null) {\n      q = DEFAULT_QUERY;\n    } else {\n      if(negative) {\n        q = DEFAULT_QUERY + \" AND \" + query;\n      } else {\n        q = query;\n      }\n    }\n\n    System.out.println(\"####### Limit:\"+limit);\n\n    TupleStream tupleStream;\n    String zk = properties.getProperty(\"zk\");\n    try {\n      if (metricPairs.isEmpty() && buckets.isEmpty()) {\n        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);\n      } else {\n        if(buckets.isEmpty()) {\n          tupleStream = handleStats(zk, collection, q, metricPairs);\n        } else {\n          if(mapReduce) {\n            tupleStream = handleGroupByMapReduce(zk,\n                                                 collection,\n                                                 properties,\n                                                 fields,\n                                                 q,\n                                                 orders,\n                                                 buckets,\n                                                 metricPairs,\n                                                 limit);\n          } else {\n            tupleStream = handleGroupByFacet(zk,\n                                             collection,\n                                             fields,\n                                             q,\n                                             orders,\n                                             buckets,\n                                             metricPairs,\n                                             limit);\n          }\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    final TupleStream finalStream = tupleStream;\n\n    return new AbstractEnumerable<Object>() {\n      // Use original fields list to make sure only the fields specified are enumerated\n      public Enumerator<Object> enumerator() {\n        return new SolrEnumerator(finalStream, fields);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d5cb41f0427fb7a75b0bfefe992561738c11fd80":["3e4e643056790ca1e73898892ffb5b50ae883232"],"3e4e643056790ca1e73898892ffb5b50ae883232":["36b1ce25b5b465615c00f409ce694664abbe7bd2"],"36b1ce25b5b465615c00f409ce694664abbe7bd2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d5cb41f0427fb7a75b0bfefe992561738c11fd80":[],"3e4e643056790ca1e73898892ffb5b50ae883232":["d5cb41f0427fb7a75b0bfefe992561738c11fd80"],"36b1ce25b5b465615c00f409ce694664abbe7bd2":["3e4e643056790ca1e73898892ffb5b50ae883232"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36b1ce25b5b465615c00f409ce694664abbe7bd2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d5cb41f0427fb7a75b0bfefe992561738c11fd80","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}