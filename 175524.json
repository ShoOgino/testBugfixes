{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarIntsField(FieldInfo,IndexOutput,Iterable[Number],long,long).mjava","commits":[{"id":"1982459c2ac4916bf3c0644b801f0cb3e4ee159f","date":1359034079,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarIntsField(FieldInfo,IndexOutput,Iterable[Number],long,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarIntsField(FieldInfo,IndexOutput,Iterable[Number]).mjava","sourceNew":"  private void addVarIntsField(FieldInfo field, IndexOutput output, Iterable<Number> values, long minValue, long maxValue) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.VAR_INTS.name());\n    \n    CodecUtil.writeHeader(output, \n                          Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME, \n                          Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);\n    \n    final long delta = maxValue - minValue;\n    \n    if (delta < 0) {\n      // writes longs\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_FIXED_64);\n      for (Number n : values) {\n        output.writeLong(n.longValue());\n      }\n    } else {\n      // writes packed ints\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_PACKED);\n      output.writeLong(minValue);\n      output.writeLong(0 - minValue); // default value (representation of 0)\n      PackedInts.Writer writer = PackedInts.getWriter(output, \n                                                      state.segmentInfo.getDocCount(),\n                                                      PackedInts.bitsRequired(delta), \n                                                      PackedInts.DEFAULT);\n      for (Number n : values) {\n        writer.add(n.longValue() - minValue);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  private void addVarIntsField(FieldInfo field, IndexOutput output, Iterable<Number> values) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.VAR_INTS.name());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (Number n : values) {\n      long v = n.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n    }\n    \n    CodecUtil.writeHeader(output, \n                          Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME, \n                          Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);\n    \n    final long delta = maxValue - minValue;\n    \n    if (delta < 0) {\n      // writes longs\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_FIXED_64);\n      for (Number n : values) {\n        output.writeLong(n.longValue());\n      }\n    } else {\n      // writes packed ints\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_PACKED);\n      output.writeLong(minValue);\n      output.writeLong(0 - minValue); // default value (representation of 0)\n      PackedInts.Writer writer = PackedInts.getWriter(output, \n                                                      state.segmentInfo.getDocCount(),\n                                                      PackedInts.bitsRequired(delta), \n                                                      PackedInts.DEFAULT);\n      for (Number n : values) {\n        writer.add(n.longValue() - minValue);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarIntsField(FieldInfo,IndexOutput,Iterable[Number],long,long).mjava","pathOld":"/dev/null","sourceNew":"  private void addVarIntsField(FieldInfo field, IndexOutput output, Iterable<Number> values, long minValue, long maxValue) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.VAR_INTS.name());\n    \n    CodecUtil.writeHeader(output, \n                          Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME, \n                          Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);\n    \n    final long delta = maxValue - minValue;\n    \n    if (delta < 0) {\n      // writes longs\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_FIXED_64);\n      for (Number n : values) {\n        output.writeLong(n.longValue());\n      }\n    } else {\n      // writes packed ints\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_PACKED);\n      output.writeLong(minValue);\n      output.writeLong(0 - minValue); // default value (representation of 0)\n      PackedInts.Writer writer = PackedInts.getWriter(output, \n                                                      state.segmentInfo.getDocCount(),\n                                                      PackedInts.bitsRequired(delta), \n                                                      PackedInts.DEFAULT);\n      for (Number n : values) {\n        writer.add(n.longValue() - minValue);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarIntsField(FieldInfo,IndexOutput,Iterable[Number],long,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarIntsField(FieldInfo,IndexOutput,Iterable[Number],long,long).mjava","sourceNew":"  private void addVarIntsField(FieldInfo field, IndexOutput output, Iterable<Number> values, long minValue, long maxValue) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.VAR_INTS.name());\n    \n    CodecUtil.writeHeader(output, \n                          Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME, \n                          Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);\n    \n    final long delta = maxValue - minValue;\n    \n    if (delta < 0) {\n      // writes longs\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_FIXED_64);\n      for (Number n : values) {\n        output.writeLong(n == null ? 0 : n.longValue());\n      }\n    } else {\n      // writes packed ints\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_PACKED);\n      output.writeLong(minValue);\n      output.writeLong(0 - minValue); // default value (representation of 0)\n      PackedInts.Writer writer = PackedInts.getWriter(output, \n                                                      state.segmentInfo.getDocCount(),\n                                                      PackedInts.bitsRequired(delta), \n                                                      PackedInts.DEFAULT);\n      for (Number n : values) {\n        long v = n == null ? 0 : n.longValue();\n        writer.add(v - minValue);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  private void addVarIntsField(FieldInfo field, IndexOutput output, Iterable<Number> values, long minValue, long maxValue) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.VAR_INTS.name());\n    \n    CodecUtil.writeHeader(output, \n                          Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME, \n                          Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);\n    \n    final long delta = maxValue - minValue;\n    \n    if (delta < 0) {\n      // writes longs\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_FIXED_64);\n      for (Number n : values) {\n        output.writeLong(n.longValue());\n      }\n    } else {\n      // writes packed ints\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_PACKED);\n      output.writeLong(minValue);\n      output.writeLong(0 - minValue); // default value (representation of 0)\n      PackedInts.Writer writer = PackedInts.getWriter(output, \n                                                      state.segmentInfo.getDocCount(),\n                                                      PackedInts.bitsRequired(delta), \n                                                      PackedInts.DEFAULT);\n      for (Number n : values) {\n        writer.add(n.longValue() - minValue);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarIntsField(FieldInfo,IndexOutput,Iterable[Number],long,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarIntsField(FieldInfo,IndexOutput,Iterable[Number],long,long).mjava","sourceNew":"  private void addVarIntsField(FieldInfo field, IndexOutput output, Iterable<Number> values, long minValue, long maxValue) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.VAR_INTS.name());\n    \n    CodecUtil.writeHeader(output, \n                          Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME, \n                          Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);\n    \n    final long delta = maxValue - minValue;\n    \n    if (delta < 0) {\n      // writes longs\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_FIXED_64);\n      for (Number n : values) {\n        output.writeLong(n == null ? 0 : n.longValue());\n      }\n    } else {\n      // writes packed ints\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_PACKED);\n      output.writeLong(minValue);\n      output.writeLong(0 - minValue); // default value (representation of 0)\n      PackedInts.Writer writer = PackedInts.getWriter(output, \n                                                      state.segmentInfo.getDocCount(),\n                                                      PackedInts.bitsRequired(delta), \n                                                      PackedInts.DEFAULT);\n      for (Number n : values) {\n        long v = n == null ? 0 : n.longValue();\n        writer.add(v - minValue);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  private void addVarIntsField(FieldInfo field, IndexOutput output, Iterable<Number> values, long minValue, long maxValue) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.VAR_INTS.name());\n    \n    CodecUtil.writeHeader(output, \n                          Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME, \n                          Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);\n    \n    final long delta = maxValue - minValue;\n    \n    if (delta < 0) {\n      // writes longs\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_FIXED_64);\n      for (Number n : values) {\n        output.writeLong(n.longValue());\n      }\n    } else {\n      // writes packed ints\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_PACKED);\n      output.writeLong(minValue);\n      output.writeLong(0 - minValue); // default value (representation of 0)\n      PackedInts.Writer writer = PackedInts.getWriter(output, \n                                                      state.segmentInfo.getDocCount(),\n                                                      PackedInts.bitsRequired(delta), \n                                                      PackedInts.DEFAULT);\n      for (Number n : values) {\n        writer.add(n.longValue() - minValue);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarIntsField(FieldInfo,IndexOutput,Iterable[Number],long,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarIntsField(FieldInfo,IndexOutput,Iterable[Number],long,long).mjava","sourceNew":"  private void addVarIntsField(FieldInfo field, IndexOutput output, Iterable<Number> values, long minValue, long maxValue) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.VAR_INTS.name());\n    \n    CodecUtil.writeHeader(output, \n                          Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME, \n                          Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);\n    \n    final long delta = maxValue - minValue;\n    \n    if (delta < 0) {\n      // writes longs\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_FIXED_64);\n      for (Number n : values) {\n        output.writeLong(n == null ? 0 : n.longValue());\n      }\n    } else {\n      // writes packed ints\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_PACKED);\n      output.writeLong(minValue);\n      output.writeLong(0 - minValue); // default value (representation of 0)\n      PackedInts.Writer writer = PackedInts.getWriter(output, \n                                                      state.segmentInfo.getDocCount(),\n                                                      PackedInts.bitsRequired(delta), \n                                                      PackedInts.DEFAULT);\n      for (Number n : values) {\n        long v = n == null ? 0 : n.longValue();\n        writer.add(v - minValue);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  private void addVarIntsField(FieldInfo field, IndexOutput output, Iterable<Number> values, long minValue, long maxValue) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.VAR_INTS.name());\n    \n    CodecUtil.writeHeader(output, \n                          Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME, \n                          Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);\n    \n    final long delta = maxValue - minValue;\n    \n    if (delta < 0) {\n      // writes longs\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_FIXED_64);\n      for (Number n : values) {\n        output.writeLong(n.longValue());\n      }\n    } else {\n      // writes packed ints\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_PACKED);\n      output.writeLong(minValue);\n      output.writeLong(0 - minValue); // default value (representation of 0)\n      PackedInts.Writer writer = PackedInts.getWriter(output, \n                                                      state.segmentInfo.getDocCount(),\n                                                      PackedInts.bitsRequired(delta), \n                                                      PackedInts.DEFAULT);\n      for (Number n : values) {\n        writer.add(n.longValue() - minValue);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarIntsField(FieldInfo,IndexOutput,Iterable[Number],long,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarIntsField(FieldInfo,IndexOutput,Iterable[Number],long,long).mjava","sourceNew":"  private void addVarIntsField(FieldInfo field, IndexOutput output, Iterable<Number> values, long minValue, long maxValue) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.VAR_INTS.name());\n    \n    CodecUtil.writeHeader(output, \n                          Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME, \n                          Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);\n    \n    final long delta = maxValue - minValue;\n    \n    if (delta < 0) {\n      // writes longs\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_FIXED_64);\n      for (Number n : values) {\n        output.writeLong(n == null ? 0 : n.longValue());\n      }\n    } else {\n      // writes packed ints\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_PACKED);\n      output.writeLong(minValue);\n      output.writeLong(0 - minValue); // default value (representation of 0)\n      PackedInts.Writer writer = PackedInts.getWriter(output, \n                                                      state.segmentInfo.getDocCount(),\n                                                      PackedInts.bitsRequired(delta), \n                                                      PackedInts.DEFAULT);\n      for (Number n : values) {\n        long v = n == null ? 0 : n.longValue();\n        writer.add(v - minValue);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  private void addVarIntsField(FieldInfo field, IndexOutput output, Iterable<Number> values, long minValue, long maxValue) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.VAR_INTS.name());\n    \n    CodecUtil.writeHeader(output, \n                          Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME, \n                          Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);\n    \n    final long delta = maxValue - minValue;\n    \n    if (delta < 0) {\n      // writes longs\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_FIXED_64);\n      for (Number n : values) {\n        output.writeLong(n == null ? 0 : n.longValue());\n      }\n    } else {\n      // writes packed ints\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_PACKED);\n      output.writeLong(minValue);\n      output.writeLong(0 - minValue); // default value (representation of 0)\n      PackedInts.Writer writer = PackedInts.getWriter(output, \n                                                      state.segmentInfo.getDocCount(),\n                                                      PackedInts.bitsRequired(delta), \n                                                      PackedInts.DEFAULT);\n      for (Number n : values) {\n        long v = n == null ? 0 : n.longValue();\n        writer.add(v - minValue);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarIntsField(FieldInfo,IndexOutput,Iterable[Number],long,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addVarIntsField(FieldInfo,IndexOutput,Iterable[Number],long,long).mjava","sourceNew":"  private void addVarIntsField(FieldInfo field, IndexOutput output, Iterable<Number> values, long minValue, long maxValue) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.VAR_INTS.name());\n    \n    CodecUtil.writeHeader(output, \n                          Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME, \n                          Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);\n    \n    final long delta = maxValue - minValue;\n    \n    if (delta < 0) {\n      // writes longs\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_FIXED_64);\n      for (Number n : values) {\n        output.writeLong(n == null ? 0 : n.longValue());\n      }\n    } else {\n      // writes packed ints\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_PACKED);\n      output.writeLong(minValue);\n      output.writeLong(0 - minValue); // default value (representation of 0)\n      PackedInts.Writer writer = PackedInts.getWriter(output, \n                                                      state.segmentInfo.getDocCount(),\n                                                      PackedInts.bitsRequired(delta), \n                                                      PackedInts.DEFAULT);\n      for (Number n : values) {\n        long v = n == null ? 0 : n.longValue();\n        writer.add(v - minValue);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  private void addVarIntsField(FieldInfo field, IndexOutput output, Iterable<Number> values, long minValue, long maxValue) throws IOException {\n    field.putAttribute(legacyKey, LegacyDocValuesType.VAR_INTS.name());\n    \n    CodecUtil.writeHeader(output, \n                          Lucene40DocValuesFormat.VAR_INTS_CODEC_NAME, \n                          Lucene40DocValuesFormat.VAR_INTS_VERSION_CURRENT);\n    \n    final long delta = maxValue - minValue;\n    \n    if (delta < 0) {\n      // writes longs\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_FIXED_64);\n      for (Number n : values) {\n        output.writeLong(n == null ? 0 : n.longValue());\n      }\n    } else {\n      // writes packed ints\n      output.writeByte(Lucene40DocValuesFormat.VAR_INTS_PACKED);\n      output.writeLong(minValue);\n      output.writeLong(0 - minValue); // default value (representation of 0)\n      PackedInts.Writer writer = PackedInts.getWriter(output, \n                                                      state.segmentInfo.getDocCount(),\n                                                      PackedInts.bitsRequired(delta), \n                                                      PackedInts.DEFAULT);\n      for (Number n : values) {\n        long v = n == null ? 0 : n.longValue();\n        writer.add(v - minValue);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1982459c2ac4916bf3c0644b801f0cb3e4ee159f"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["d4d69c535930b5cce125cff868d40f6373dc27d4","9faa42f41b6adb98daf009cf99a4ee239189e469"],"1982459c2ac4916bf3c0644b801f0cb3e4ee159f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","1982459c2ac4916bf3c0644b801f0cb3e4ee159f"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"1982459c2ac4916bf3c0644b801f0cb3e4ee159f":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}