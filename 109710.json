{"path":"backwards/src/java/org/apache/lucene/index/SegmentMerger#appendPostings(FormatPostingsTermsConsumer,SegmentMergeInfo[],int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/SegmentMerger#appendPostings(FormatPostingsTermsConsumer,SegmentMergeInfo[],int).mjava","pathOld":"/dev/null","sourceNew":"  /** Process postings from multiple segments all positioned on the\n   *  same term. Writes out merged entries into freqOutput and\n   *  the proxOutput streams.\n   *\n   * @param smis array of segments\n   * @param n number of cells in the array actually occupied\n   * @return number of documents across all segments where this term was found\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private final int appendPostings(final FormatPostingsTermsConsumer termsConsumer, SegmentMergeInfo[] smis, int n)\n        throws CorruptIndexException, IOException {\n\n    final FormatPostingsDocsConsumer docConsumer = termsConsumer.addTerm(smis[0].term.text);\n    int df = 0;\n    for (int i = 0; i < n; i++) {\n      SegmentMergeInfo smi = smis[i];\n      TermPositions postings = smi.getPositions();\n      assert postings != null;\n      int base = smi.base;\n      int[] docMap = smi.getDocMap();\n      postings.seek(smi.termEnum);\n\n      while (postings.next()) {\n        df++;\n        int doc = postings.doc();\n        if (docMap != null)\n          doc = docMap[doc];                      // map around deletions\n        doc += base;                              // convert to merged space\n\n        final int freq = postings.freq();\n        final FormatPostingsPositionsConsumer posConsumer = docConsumer.addDoc(doc, freq);\n\n        if (!omitTermFreqAndPositions) {\n          for (int j = 0; j < freq; j++) {\n            final int position = postings.nextPosition();\n            final int payloadLength = postings.getPayloadLength();\n            if (payloadLength > 0) {\n              if (payloadBuffer == null || payloadBuffer.length < payloadLength)\n                payloadBuffer = new byte[payloadLength];\n              postings.getPayload(payloadBuffer, 0);\n            }\n            posConsumer.addPosition(position, payloadBuffer, 0, payloadLength);\n          }\n          posConsumer.finish();\n        }\n      }\n    }\n    docConsumer.finish();\n\n    return df;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/SegmentMerger#appendPostings(FormatPostingsTermsConsumer,SegmentMergeInfo[],int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/SegmentMerger#appendPostings(FormatPostingsTermsConsumer,SegmentMergeInfo[],int).mjava","sourceNew":"  /** Process postings from multiple segments all positioned on the\n   *  same term. Writes out merged entries into freqOutput and\n   *  the proxOutput streams.\n   *\n   * @param smis array of segments\n   * @param n number of cells in the array actually occupied\n   * @return number of documents across all segments where this term was found\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private final int appendPostings(final FormatPostingsTermsConsumer termsConsumer, SegmentMergeInfo[] smis, int n)\n        throws CorruptIndexException, IOException {\n\n    final FormatPostingsDocsConsumer docConsumer = termsConsumer.addTerm(smis[0].term.text);\n    int df = 0;\n    for (int i = 0; i < n; i++) {\n      SegmentMergeInfo smi = smis[i];\n      TermPositions postings = smi.getPositions();\n      assert postings != null;\n      int base = smi.base;\n      int[] docMap = smi.getDocMap();\n      postings.seek(smi.termEnum);\n\n      while (postings.next()) {\n        df++;\n        int doc = postings.doc();\n        if (docMap != null)\n          doc = docMap[doc];                      // map around deletions\n        doc += base;                              // convert to merged space\n\n        final int freq = postings.freq();\n        final FormatPostingsPositionsConsumer posConsumer = docConsumer.addDoc(doc, freq);\n\n        if (!omitTermFreqAndPositions) {\n          for (int j = 0; j < freq; j++) {\n            final int position = postings.nextPosition();\n            final int payloadLength = postings.getPayloadLength();\n            if (payloadLength > 0) {\n              if (payloadBuffer == null || payloadBuffer.length < payloadLength)\n                payloadBuffer = new byte[payloadLength];\n              postings.getPayload(payloadBuffer, 0);\n            }\n            posConsumer.addPosition(position, payloadBuffer, 0, payloadLength);\n          }\n          posConsumer.finish();\n        }\n      }\n    }\n    docConsumer.finish();\n\n    return df;\n  }\n\n","sourceOld":"  /** Process postings from multiple segments all positioned on the\n   *  same term. Writes out merged entries into freqOutput and\n   *  the proxOutput streams.\n   *\n   * @param smis array of segments\n   * @param n number of cells in the array actually occupied\n   * @return number of documents across all segments where this term was found\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  private final int appendPostings(final FormatPostingsTermsConsumer termsConsumer, SegmentMergeInfo[] smis, int n)\n        throws CorruptIndexException, IOException {\n\n    final FormatPostingsDocsConsumer docConsumer = termsConsumer.addTerm(smis[0].term.text);\n    int df = 0;\n    for (int i = 0; i < n; i++) {\n      SegmentMergeInfo smi = smis[i];\n      TermPositions postings = smi.getPositions();\n      assert postings != null;\n      int base = smi.base;\n      int[] docMap = smi.getDocMap();\n      postings.seek(smi.termEnum);\n\n      while (postings.next()) {\n        df++;\n        int doc = postings.doc();\n        if (docMap != null)\n          doc = docMap[doc];                      // map around deletions\n        doc += base;                              // convert to merged space\n\n        final int freq = postings.freq();\n        final FormatPostingsPositionsConsumer posConsumer = docConsumer.addDoc(doc, freq);\n\n        if (!omitTermFreqAndPositions) {\n          for (int j = 0; j < freq; j++) {\n            final int position = postings.nextPosition();\n            final int payloadLength = postings.getPayloadLength();\n            if (payloadLength > 0) {\n              if (payloadBuffer == null || payloadBuffer.length < payloadLength)\n                payloadBuffer = new byte[payloadLength];\n              postings.getPayload(payloadBuffer, 0);\n            }\n            posConsumer.addPosition(position, payloadBuffer, 0, payloadLength);\n          }\n          posConsumer.finish();\n        }\n      }\n    }\n    docConsumer.finish();\n\n    return df;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}