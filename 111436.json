{"path":"lucene/core/src/java/org/apache/lucene/search/RegexpQuery#RegexpQuery(Term,int,LightAutomatonProvider).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/RegexpQuery#RegexpQuery(Term,int,LightAutomatonProvider).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/RegexpQuery#RegexpQuery(Term,int,AutomatonProvider).mjava","sourceNew":"  /**\n   * Constructs a query for terms matching <code>term</code>.\n   * \n   * @param term regular expression.\n   * @param flags optional RegExp features from {@link RegExp}\n   * @param provider custom AutomatonProvider for named automata\n   */\n  public RegexpQuery(Term term, int flags, LightAutomatonProvider provider) {\n    super(term, new RegExp(term.text(), flags).toLightAutomaton(provider));\n  }\n\n","sourceOld":"  /**\n   * Constructs a query for terms matching <code>term</code>.\n   * \n   * @param term regular expression.\n   * @param flags optional RegExp features from {@link RegExp}\n   * @param provider custom AutomatonProvider for named automata\n   */\n  public RegexpQuery(Term term, int flags, AutomatonProvider provider) {\n    super(term, new RegExp(term.text(), flags).toAutomaton(provider));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/RegexpQuery#RegexpQuery(Term,int,AutomatonProvider).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/RegexpQuery#RegexpQuery(Term,int,LightAutomatonProvider).mjava","sourceNew":"  /**\n   * Constructs a query for terms matching <code>term</code>.\n   * \n   * @param term regular expression.\n   * @param flags optional RegExp features from {@link RegExp}\n   * @param provider custom AutomatonProvider for named automata\n   */\n  public RegexpQuery(Term term, int flags, AutomatonProvider provider) {\n    super(term, new RegExp(term.text(), flags).toAutomaton(provider));\n  }\n\n","sourceOld":"  /**\n   * Constructs a query for terms matching <code>term</code>.\n   * \n   * @param term regular expression.\n   * @param flags optional RegExp features from {@link RegExp}\n   * @param provider custom AutomatonProvider for named automata\n   */\n  public RegexpQuery(Term term, int flags, LightAutomatonProvider provider) {\n    super(term, new RegExp(term.text(), flags).toLightAutomaton(provider));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}