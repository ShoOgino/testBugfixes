{"path":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#run(FST[T],IntsRef,int[]).mjava","commits":[{"id":"5ebe14aae60589c9bb6423f3cce02d5f599e1540","date":1348361556,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#run(FST[T],IntsRef,int[]).mjava","pathOld":"/dev/null","sourceNew":"  // runs the term, returning the output, or null if term\n  // isn't accepted.  if prefixLength is non-null it must be\n  // length 1 int array; prefixLength[0] is set to the length\n  // of the term prefix that matches\n  private T run(FST<T> fst, IntsRef term, int[] prefixLength) throws IOException {\n    assert prefixLength == null || prefixLength.length == 1;\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    for(int i=0;i<=term.length;i++) {\n      final int label;\n      if (i == term.length) {\n        label = FST.END_LABEL;\n      } else {\n        label = term.ints[term.offset+i];\n      }\n      // System.out.println(\"   loop i=\" + i + \" label=\" + label + \" output=\" + fst.outputs.outputToString(output) + \" curArc: target=\" + arc.target + \" isFinal?=\" + arc.isFinal());\n      if (fst.findTargetArc(label, arc, arc, fstReader) == null) {\n        // System.out.println(\"    not found\");\n        if (prefixLength != null) {\n          prefixLength[0] = i;\n          return output;\n        } else {\n          return null;\n        }\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (prefixLength != null) {\n      prefixLength[0] = term.length;\n    }\n\n    return output;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82557a475db3e0849171dc0be5b02e3ae0745ddb","date":1358195918,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#run(FST[T],IntsRef,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#run(FST[T],IntsRef,int[]).mjava","sourceNew":"  // runs the term, returning the output, or null if term\n  // isn't accepted.  if prefixLength is non-null it must be\n  // length 1 int array; prefixLength[0] is set to the length\n  // of the term prefix that matches\n  private T run(FST<T> fst, IntsRef term, int[] prefixLength) throws IOException {\n    assert prefixLength == null || prefixLength.length == 1;\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    for(int i=0;i<=term.length;i++) {\n      final int label;\n      if (i == term.length) {\n        label = FST.END_LABEL;\n      } else {\n        label = term.ints[term.offset+i];\n      }\n      // System.out.println(\"   loop i=\" + i + \" label=\" + label + \" output=\" + fst.outputs.outputToString(output) + \" curArc: target=\" + arc.target + \" isFinal?=\" + arc.isFinal());\n      if (fst.findTargetArc(label, arc, arc, fstReader) == null) {\n        // System.out.println(\"    not found\");\n        if (prefixLength != null) {\n          prefixLength[0] = i;\n          return output;\n        } else {\n          return null;\n        }\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (prefixLength != null) {\n      prefixLength[0] = term.length;\n    }\n\n    return output;\n  }\n\n","sourceOld":"  // runs the term, returning the output, or null if term\n  // isn't accepted.  if prefixLength is non-null it must be\n  // length 1 int array; prefixLength[0] is set to the length\n  // of the term prefix that matches\n  private T run(FST<T> fst, IntsRef term, int[] prefixLength) throws IOException {\n    assert prefixLength == null || prefixLength.length == 1;\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    for(int i=0;i<=term.length;i++) {\n      final int label;\n      if (i == term.length) {\n        label = FST.END_LABEL;\n      } else {\n        label = term.ints[term.offset+i];\n      }\n      // System.out.println(\"   loop i=\" + i + \" label=\" + label + \" output=\" + fst.outputs.outputToString(output) + \" curArc: target=\" + arc.target + \" isFinal?=\" + arc.isFinal());\n      if (fst.findTargetArc(label, arc, arc, fstReader) == null) {\n        // System.out.println(\"    not found\");\n        if (prefixLength != null) {\n          prefixLength[0] = i;\n          return output;\n        } else {\n          return null;\n        }\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (prefixLength != null) {\n      prefixLength[0] = term.length;\n    }\n\n    return output;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#run(FST[T],IntsRef,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#run(FST[T],IntsRef,int[]).mjava","sourceNew":"  // runs the term, returning the output, or null if term\n  // isn't accepted.  if prefixLength is non-null it must be\n  // length 1 int array; prefixLength[0] is set to the length\n  // of the term prefix that matches\n  private T run(FST<T> fst, IntsRef term, int[] prefixLength) throws IOException {\n    assert prefixLength == null || prefixLength.length == 1;\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    for(int i=0;i<=term.length;i++) {\n      final int label;\n      if (i == term.length) {\n        label = FST.END_LABEL;\n      } else {\n        label = term.ints[term.offset+i];\n      }\n      // System.out.println(\"   loop i=\" + i + \" label=\" + label + \" output=\" + fst.outputs.outputToString(output) + \" curArc: target=\" + arc.target + \" isFinal?=\" + arc.isFinal());\n      if (fst.findTargetArc(label, arc, arc, fstReader) == null) {\n        // System.out.println(\"    not found\");\n        if (prefixLength != null) {\n          prefixLength[0] = i;\n          return output;\n        } else {\n          return null;\n        }\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (prefixLength != null) {\n      prefixLength[0] = term.length;\n    }\n\n    return output;\n  }\n\n","sourceOld":"  // runs the term, returning the output, or null if term\n  // isn't accepted.  if prefixLength is non-null it must be\n  // length 1 int array; prefixLength[0] is set to the length\n  // of the term prefix that matches\n  private T run(FST<T> fst, IntsRef term, int[] prefixLength) throws IOException {\n    assert prefixLength == null || prefixLength.length == 1;\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    for(int i=0;i<=term.length;i++) {\n      final int label;\n      if (i == term.length) {\n        label = FST.END_LABEL;\n      } else {\n        label = term.ints[term.offset+i];\n      }\n      // System.out.println(\"   loop i=\" + i + \" label=\" + label + \" output=\" + fst.outputs.outputToString(output) + \" curArc: target=\" + arc.target + \" isFinal?=\" + arc.isFinal());\n      if (fst.findTargetArc(label, arc, arc, fstReader) == null) {\n        // System.out.println(\"    not found\");\n        if (prefixLength != null) {\n          prefixLength[0] = i;\n          return output;\n        } else {\n          return null;\n        }\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (prefixLength != null) {\n      prefixLength[0] = term.length;\n    }\n\n    return output;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#run(FST[T],IntsRef,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#run(FST[T],IntsRef,int[]).mjava","sourceNew":"  // runs the term, returning the output, or null if term\n  // isn't accepted.  if prefixLength is non-null it must be\n  // length 1 int array; prefixLength[0] is set to the length\n  // of the term prefix that matches\n  private T run(FST<T> fst, IntsRef term, int[] prefixLength) throws IOException {\n    assert prefixLength == null || prefixLength.length == 1;\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    for(int i=0;i<=term.length;i++) {\n      final int label;\n      if (i == term.length) {\n        label = FST.END_LABEL;\n      } else {\n        label = term.ints[term.offset+i];\n      }\n      // System.out.println(\"   loop i=\" + i + \" label=\" + label + \" output=\" + fst.outputs.outputToString(output) + \" curArc: target=\" + arc.target + \" isFinal?=\" + arc.isFinal());\n      if (fst.findTargetArc(label, arc, arc, fstReader) == null) {\n        // System.out.println(\"    not found\");\n        if (prefixLength != null) {\n          prefixLength[0] = i;\n          return output;\n        } else {\n          return null;\n        }\n      }\n      output = fst.outputs.add(output, arc.output());\n    }\n\n    if (prefixLength != null) {\n      prefixLength[0] = term.length;\n    }\n\n    return output;\n  }\n\n","sourceOld":"  // runs the term, returning the output, or null if term\n  // isn't accepted.  if prefixLength is non-null it must be\n  // length 1 int array; prefixLength[0] is set to the length\n  // of the term prefix that matches\n  private T run(FST<T> fst, IntsRef term, int[] prefixLength) throws IOException {\n    assert prefixLength == null || prefixLength.length == 1;\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    for(int i=0;i<=term.length;i++) {\n      final int label;\n      if (i == term.length) {\n        label = FST.END_LABEL;\n      } else {\n        label = term.ints[term.offset+i];\n      }\n      // System.out.println(\"   loop i=\" + i + \" label=\" + label + \" output=\" + fst.outputs.outputToString(output) + \" curArc: target=\" + arc.target + \" isFinal?=\" + arc.isFinal());\n      if (fst.findTargetArc(label, arc, arc, fstReader) == null) {\n        // System.out.println(\"    not found\");\n        if (prefixLength != null) {\n          prefixLength[0] = i;\n          return output;\n        } else {\n          return null;\n        }\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (prefixLength != null) {\n      prefixLength[0] = term.length;\n    }\n\n    return output;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#run(FST[T],IntsRef,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/fst/FSTTester#run(FST[T],IntsRef,int[]).mjava","sourceNew":"  // runs the term, returning the output, or null if term\n  // isn't accepted.  if prefixLength is non-null it must be\n  // length 1 int array; prefixLength[0] is set to the length\n  // of the term prefix that matches\n  private T run(FST<T> fst, IntsRef term, int[] prefixLength) throws IOException {\n    assert prefixLength == null || prefixLength.length == 1;\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    for(int i=0;i<=term.length;i++) {\n      final int label;\n      if (i == term.length) {\n        label = FST.END_LABEL;\n      } else {\n        label = term.ints[term.offset+i];\n      }\n      // System.out.println(\"   loop i=\" + i + \" label=\" + label + \" output=\" + fst.outputs.outputToString(output) + \" curArc: target=\" + arc.target + \" isFinal?=\" + arc.isFinal());\n      if (fst.findTargetArc(label, arc, arc, fstReader) == null) {\n        // System.out.println(\"    not found\");\n        if (prefixLength != null) {\n          prefixLength[0] = i;\n          return output;\n        } else {\n          return null;\n        }\n      }\n      output = fst.outputs.add(output, arc.output());\n    }\n\n    if (prefixLength != null) {\n      prefixLength[0] = term.length;\n    }\n\n    return output;\n  }\n\n","sourceOld":"  // runs the term, returning the output, or null if term\n  // isn't accepted.  if prefixLength is non-null it must be\n  // length 1 int array; prefixLength[0] is set to the length\n  // of the term prefix that matches\n  private T run(FST<T> fst, IntsRef term, int[] prefixLength) throws IOException {\n    assert prefixLength == null || prefixLength.length == 1;\n    final FST.Arc<T> arc = fst.getFirstArc(new FST.Arc<T>());\n    final T NO_OUTPUT = fst.outputs.getNoOutput();\n    T output = NO_OUTPUT;\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    for(int i=0;i<=term.length;i++) {\n      final int label;\n      if (i == term.length) {\n        label = FST.END_LABEL;\n      } else {\n        label = term.ints[term.offset+i];\n      }\n      // System.out.println(\"   loop i=\" + i + \" label=\" + label + \" output=\" + fst.outputs.outputToString(output) + \" curArc: target=\" + arc.target + \" isFinal?=\" + arc.isFinal());\n      if (fst.findTargetArc(label, arc, arc, fstReader) == null) {\n        // System.out.println(\"    not found\");\n        if (prefixLength != null) {\n          prefixLength[0] = i;\n          return output;\n        } else {\n          return null;\n        }\n      }\n      output = fst.outputs.add(output, arc.output);\n    }\n\n    if (prefixLength != null) {\n      prefixLength[0] = term.length;\n    }\n\n    return output;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["82557a475db3e0849171dc0be5b02e3ae0745ddb"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["5ebe14aae60589c9bb6423f3cce02d5f599e1540","82557a475db3e0849171dc0be5b02e3ae0745ddb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["82557a475db3e0849171dc0be5b02e3ae0745ddb","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["54204c8a3ca26aeafd273139fc29baf70d0f6786","c4015cd39dff8d4dec562d909f9766debac53aa6","f8061ddd97f3352007d927dae445884a6f3d857b"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["82557a475db3e0849171dc0be5b02e3ae0745ddb","c4015cd39dff8d4dec562d909f9766debac53aa6"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}