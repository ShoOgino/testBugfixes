{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/MessageHandler#run().mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/MessageHandler#run().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     *  the main messageHandler-Thread.\n     */\n    public void run()\n    {\n        while(running)\n        {\n            //System.out.println(\"MessageHandler-Thread started\");\n\n            synchronized(queueMonitor)\n            {\n                // wait for new messages\n                workingOnMessage=false;\n                try\n                {\n                    queueMonitor.wait();\n                }\n                catch(InterruptedException e)\n                {\n                    System.out.println(\"MessageHandler: Caught InterruptedException\");\n                }\n                workingOnMessage=true;\n            }\n            //messagesWaiting = false;\n            Message m;\n            try\n            {\n                while(messagesWaiting)\n                {\n                    synchronized(this.queueMonitor)\n                    {\n                        m = (Message)messageQueue.remove();\n                        if(messageQueue.size() == 0)\n                        {\n                            messagesWaiting = false;\n                        }\n\n                    }\n                    //System.out.println(\"MessageHandler:run: Entferne erstes Element\");\n\n                    messageQueueObservable.setChanged();\n                    messageQueueObservable.notifyObservers(new Integer(-1));      // Message processed\n\n                    // und verteilen. Die Listener erhalten die Message in ihrer\n                    // Eintragungsreihenfolge und k�nnen die Message auch ver�ndern\n\n                    Iterator i = listeners.iterator();\n                    while(i.hasNext())\n                    {\n                        //System.out.println(\"Verteile...\");\n                        try\n                        {\n                            MessageListener listener = (MessageListener)i.next();\n                            m = (Message)listener.handleRequest(m);\n                            if (m == null)\n                            {\n                                messageProcessorObservable.setChanged();\n                                messageProcessorObservable.notifyObservers(listener);\n                                break;     // Handler hat die Message konsumiert\n                            }\n                        }\n                        catch(ClassCastException e)\n                        {\n                          System.out.println(\"MessageHandler:run: ClassCastException(2): \" + e.getMessage());\n                        }\n                    }\n                }\n            }\n            catch (ClassCastException e)\n            {\n                System.out.println(\"MessageHandler:run: ClassCastException: \" + e.getMessage());\n            }\n            catch (UnderflowException e)\n            {\n                messagesWaiting = false;\n                // System.out.println(\"MessageHandler: messagesWaiting = true although nothing queued!\");\n                // @FIXME: here is still a multi threading issue. I don't get it why this happens.\n                //         does someone want to draw a petri net of this?\n            }\n            catch (Exception e)\n            {\n                System.out.println(\"MessageHandler: \" + e.getClass() + \" \" + e.getMessage());\n                e.printStackTrace();\n            }\n\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e","date":1022957716,"type":3,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/MessageHandler#run().mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/MessageHandler#run().mjava","sourceNew":"    /**\n     *  the main messageHandler-Thread.\n     */\n    public void run()\n    {\n        while(running)\n        {\n            //System.out.println(\"MessageHandler-Thread started\");\n\n            synchronized(queueMonitor)\n            {\n                // wait for new messages\n                workingOnMessage=false;\n                try\n                {\n                    queueMonitor.wait();\n                }\n                catch(InterruptedException e)\n                {\n                    System.out.println(\"MessageHandler: Caught InterruptedException\");\n                }\n                workingOnMessage=true;\n            }\n            //messagesWaiting = false;\n            Message m;\n            try\n            {\n                while(messagesWaiting)\n                {\n                    synchronized(this.queueMonitor)\n                    {\n                        m = (Message)messageQueue.remove();\n                        if(messageQueue.size() == 0)\n                        {\n                            messagesWaiting = false;\n                        }\n\n                    }\n                    //System.out.println(\"MessageHandler:run: Entferne erstes Element\");\n\n                    messageQueueObservable.setChanged();\n                    messageQueueObservable.notifyObservers(new Integer(-1));      // Message processed\n\n                    // now distribute them. The handlers get the messages in the order\n                    // of insertion and have the right to change them\n\n                    Iterator i = listeners.iterator();\n                    while(i.hasNext())\n                    {\n                        try\n                        {\n                            MessageListener listener = (MessageListener)i.next();\n                            m = (Message)listener.handleRequest(m);\n                            if (m == null)\n                            {\n                                // handler has consumed the message\n                                messageProcessorObservable.setChanged();\n                                messageProcessorObservable.notifyObservers(listener);\n                                break;\n                            }\n                        }\n                        catch(ClassCastException e)\n                        {\n                          System.out.println(\"MessageHandler:run: ClassCastException(2): \" + e.getMessage());\n                        }\n                    }\n                }\n            }\n            catch (ClassCastException e)\n            {\n                System.out.println(\"MessageHandler:run: ClassCastException: \" + e.getMessage());\n            }\n            catch (UnderflowException e)\n            {\n                messagesWaiting = false;\n                // System.out.println(\"MessageHandler: messagesWaiting = true although nothing queued!\");\n                // @FIXME: here is still a multi threading issue. I don't get it why this happens.\n                //         does someone want to draw a petri net of this? ;-)\n            }\n            catch (Exception e)\n            {\n                System.out.println(\"MessageHandler: \" + e.getClass() + \" \" + e.getMessage());\n                e.printStackTrace();\n            }\n\n        }\n    }\n\n","sourceOld":"    /**\n     *  the main messageHandler-Thread.\n     */\n    public void run()\n    {\n        while(running)\n        {\n            //System.out.println(\"MessageHandler-Thread started\");\n\n            synchronized(queueMonitor)\n            {\n                // wait for new messages\n                workingOnMessage=false;\n                try\n                {\n                    queueMonitor.wait();\n                }\n                catch(InterruptedException e)\n                {\n                    System.out.println(\"MessageHandler: Caught InterruptedException\");\n                }\n                workingOnMessage=true;\n            }\n            //messagesWaiting = false;\n            Message m;\n            try\n            {\n                while(messagesWaiting)\n                {\n                    synchronized(this.queueMonitor)\n                    {\n                        m = (Message)messageQueue.remove();\n                        if(messageQueue.size() == 0)\n                        {\n                            messagesWaiting = false;\n                        }\n\n                    }\n                    //System.out.println(\"MessageHandler:run: Entferne erstes Element\");\n\n                    messageQueueObservable.setChanged();\n                    messageQueueObservable.notifyObservers(new Integer(-1));      // Message processed\n\n                    // und verteilen. Die Listener erhalten die Message in ihrer\n                    // Eintragungsreihenfolge und k�nnen die Message auch ver�ndern\n\n                    Iterator i = listeners.iterator();\n                    while(i.hasNext())\n                    {\n                        //System.out.println(\"Verteile...\");\n                        try\n                        {\n                            MessageListener listener = (MessageListener)i.next();\n                            m = (Message)listener.handleRequest(m);\n                            if (m == null)\n                            {\n                                messageProcessorObservable.setChanged();\n                                messageProcessorObservable.notifyObservers(listener);\n                                break;     // Handler hat die Message konsumiert\n                            }\n                        }\n                        catch(ClassCastException e)\n                        {\n                          System.out.println(\"MessageHandler:run: ClassCastException(2): \" + e.getMessage());\n                        }\n                    }\n                }\n            }\n            catch (ClassCastException e)\n            {\n                System.out.println(\"MessageHandler:run: ClassCastException: \" + e.getMessage());\n            }\n            catch (UnderflowException e)\n            {\n                messagesWaiting = false;\n                // System.out.println(\"MessageHandler: messagesWaiting = true although nothing queued!\");\n                // @FIXME: here is still a multi threading issue. I don't get it why this happens.\n                //         does someone want to draw a petri net of this?\n            }\n            catch (Exception e)\n            {\n                System.out.println(\"MessageHandler: \" + e.getClass() + \" \" + e.getMessage());\n                e.printStackTrace();\n            }\n\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92c298fa9bb561ad114817421c566c12149f02b5","date":1032037092,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/MessageHandler#run().mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/MessageHandler#run().mjava","sourceNew":"    /**\n     *  the main messageHandler-Thread.\n     */\n    public void run()\n    {\n        while(running)\n        {\n            //System.out.println(\"MessageHandler-Thread started\");\n\n            synchronized(queueMonitor)\n            {\n                // wait for new messages\n                workingOnMessage=false;\n                try\n                {\n                    queueMonitor.wait();\n                }\n                catch(InterruptedException e)\n                {\n                    System.out.println(\"MessageHandler: Caught InterruptedException\");\n                }\n                workingOnMessage=true;\n            }\n            //messagesWaiting = false;\n            Message m;\n            try\n            {\n                while(messagesWaiting)\n                {\n                    synchronized(this.queueMonitor)\n                    {\n\t\t\t// note: another thread may put a new message in the queue after\n\t\t\t// messageQueue.size() is called below, which would result in the\n\t\t\t// inconsistent state: messageWaiting would be set to false, but\n\t\t\t// the queue would actually not be empty\n                        m = (Message)messageQueue.remove();\n                        if (messageQueue.size() == 0)\n                        {\n                            messagesWaiting = false;\n                        }\n\n                    }\n                    //System.out.println(\"MessageHandler:run: Entferne erstes Element\");\n\n                    messageQueueObservable.setChanged();\n                    messageQueueObservable.notifyObservers(new Integer(-1));      // Message processed\n\n                    // now distribute them. The handlers get the messages in the order\n                    // of insertion and have the right to change them\n\n                    Iterator i = listeners.iterator();\n                    while(i.hasNext())\n                    {\n                        try\n                        {\n                            MessageListener listener = (MessageListener)i.next();\n                            m = (Message)listener.handleRequest(m);\n                            if (m == null)\n                            {\n                                // handler has consumed the message\n                                messageProcessorObservable.setChanged();\n                                messageProcessorObservable.notifyObservers(listener);\n                                break;\n                            }\n                        }\n                        catch(ClassCastException e)\n                        {\n\t\t\t    System.out.println(\"MessageHandler:run: ClassCastException(2): \" + e.getMessage());\n                        }\n                    }\n                }\n            }\n            catch (ClassCastException e)\n            {\n                System.out.println(\"MessageHandler:run: ClassCastException: \" + e.getMessage());\n            }\n            catch (UnderflowException e)\n            {\n                messagesWaiting = false;\n                // System.out.println(\"MessageHandler: messagesWaiting = true although nothing queued!\");\n                // @FIXME: here is still a multi threading issue. I don't get it why this happens.\n                //         does someone want to draw a petri net of this? ;-)\n            }\n            catch (Exception e)\n            {\n                System.out.println(\"MessageHandler: \" + e.getClass() + \" \" + e.getMessage());\n                e.printStackTrace();\n            }\n\n        }\n    }\n\n","sourceOld":"    /**\n     *  the main messageHandler-Thread.\n     */\n    public void run()\n    {\n        while(running)\n        {\n            //System.out.println(\"MessageHandler-Thread started\");\n\n            synchronized(queueMonitor)\n            {\n                // wait for new messages\n                workingOnMessage=false;\n                try\n                {\n                    queueMonitor.wait();\n                }\n                catch(InterruptedException e)\n                {\n                    System.out.println(\"MessageHandler: Caught InterruptedException\");\n                }\n                workingOnMessage=true;\n            }\n            //messagesWaiting = false;\n            Message m;\n            try\n            {\n                while(messagesWaiting)\n                {\n                    synchronized(this.queueMonitor)\n                    {\n                        m = (Message)messageQueue.remove();\n                        if(messageQueue.size() == 0)\n                        {\n                            messagesWaiting = false;\n                        }\n\n                    }\n                    //System.out.println(\"MessageHandler:run: Entferne erstes Element\");\n\n                    messageQueueObservable.setChanged();\n                    messageQueueObservable.notifyObservers(new Integer(-1));      // Message processed\n\n                    // now distribute them. The handlers get the messages in the order\n                    // of insertion and have the right to change them\n\n                    Iterator i = listeners.iterator();\n                    while(i.hasNext())\n                    {\n                        try\n                        {\n                            MessageListener listener = (MessageListener)i.next();\n                            m = (Message)listener.handleRequest(m);\n                            if (m == null)\n                            {\n                                // handler has consumed the message\n                                messageProcessorObservable.setChanged();\n                                messageProcessorObservable.notifyObservers(listener);\n                                break;\n                            }\n                        }\n                        catch(ClassCastException e)\n                        {\n                          System.out.println(\"MessageHandler:run: ClassCastException(2): \" + e.getMessage());\n                        }\n                    }\n                }\n            }\n            catch (ClassCastException e)\n            {\n                System.out.println(\"MessageHandler:run: ClassCastException: \" + e.getMessage());\n            }\n            catch (UnderflowException e)\n            {\n                messagesWaiting = false;\n                // System.out.println(\"MessageHandler: messagesWaiting = true although nothing queued!\");\n                // @FIXME: here is still a multi threading issue. I don't get it why this happens.\n                //         does someone want to draw a petri net of this? ;-)\n            }\n            catch (Exception e)\n            {\n                System.out.println(\"MessageHandler: \" + e.getClass() + \" \" + e.getMessage());\n                e.printStackTrace();\n            }\n\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/fetcher/MessageHandler#run().mjava","sourceNew":null,"sourceOld":"    /**\n     *  the main messageHandler-Thread.\n     */\n    public void run()\n    {\n        while(running)\n        {\n            //System.out.println(\"MessageHandler-Thread started\");\n\n            synchronized(queueMonitor)\n            {\n                // wait for new messages\n                workingOnMessage=false;\n                try\n                {\n                    queueMonitor.wait();\n                }\n                catch(InterruptedException e)\n                {\n                    System.out.println(\"MessageHandler: Caught InterruptedException\");\n                }\n                workingOnMessage=true;\n            }\n            //messagesWaiting = false;\n            Message m;\n            try\n            {\n                while(messagesWaiting)\n                {\n                    synchronized(this.queueMonitor)\n                    {\n\t\t\t// note: another thread may put a new message in the queue after\n\t\t\t// messageQueue.size() is called below, which would result in the\n\t\t\t// inconsistent state: messageWaiting would be set to false, but\n\t\t\t// the queue would actually not be empty\n                        m = (Message)messageQueue.remove();\n                        if (messageQueue.size() == 0)\n                        {\n                            messagesWaiting = false;\n                        }\n\n                    }\n                    //System.out.println(\"MessageHandler:run: Entferne erstes Element\");\n\n                    messageQueueObservable.setChanged();\n                    messageQueueObservable.notifyObservers(new Integer(-1));      // Message processed\n\n                    // now distribute them. The handlers get the messages in the order\n                    // of insertion and have the right to change them\n\n                    Iterator i = listeners.iterator();\n                    while(i.hasNext())\n                    {\n                        try\n                        {\n                            MessageListener listener = (MessageListener)i.next();\n                            m = (Message)listener.handleRequest(m);\n                            if (m == null)\n                            {\n                                // handler has consumed the message\n                                messageProcessorObservable.setChanged();\n                                messageProcessorObservable.notifyObservers(listener);\n                                break;\n                            }\n                        }\n                        catch(ClassCastException e)\n                        {\n\t\t\t    System.out.println(\"MessageHandler:run: ClassCastException(2): \" + e.getMessage());\n                        }\n                    }\n                }\n            }\n            catch (ClassCastException e)\n            {\n                System.out.println(\"MessageHandler:run: ClassCastException: \" + e.getMessage());\n            }\n            catch (UnderflowException e)\n            {\n                messagesWaiting = false;\n                // System.out.println(\"MessageHandler: messagesWaiting = true although nothing queued!\");\n                // @FIXME: here is still a multi threading issue. I don't get it why this happens.\n                //         does someone want to draw a petri net of this? ;-)\n            }\n            catch (Exception e)\n            {\n                System.out.println(\"MessageHandler: \" + e.getClass() + \" \" + e.getMessage());\n                e.printStackTrace();\n            }\n\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e":["05d36e0b328ec96237035fbcca240e73631396e5"],"92c298fa9bb561ad114817421c566c12149f02b5":["12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["92c298fa9bb561ad114817421c566c12149f02b5"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e":["92c298fa9bb561ad114817421c566c12149f02b5"],"92c298fa9bb561ad114817421c566c12149f02b5":["afc16d717d9ed1a8e45371668ca6de674164d624"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d36e0b328ec96237035fbcca240e73631396e5":["12c7634bf3bb6da687c9b32ca310e7fb8fac8e1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}