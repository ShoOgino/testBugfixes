{"path":"lucene/core/src/test/org/apache/lucene/document/TestField#testReusableStringReader().mjava","commits":[{"id":"190bb9bef51c64832a51cf820b20992d4cf60c51","date":1345670976,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestField#testReusableStringReader().mjava","pathOld":"/dev/null","sourceNew":"  public void testReusableStringReader() throws Exception {\n    ReusableStringReader reader = new ReusableStringReader();\n    assertEquals(-1, reader.read());\n    assertEquals(-1, reader.read(new char[1]));\n    assertEquals(-1, reader.read(new char[2], 1, 1));\n    assertEquals(-1, reader.read(CharBuffer.wrap(new char[2])));\n    \n    reader.setValue(\"foobar\");\n    char[] buf = new char[4];\n    assertEquals(4, reader.read(buf));\n    assertEquals(\"foob\", new String(buf));\n    assertEquals(2, reader.read(buf));\n    assertEquals(\"ar\", new String(buf, 0, 2));\n    assertEquals(-1, reader.read(buf));\n    reader.close();\n\n    reader.setValue(\"foobar\");\n    assertEquals(0, reader.read(buf, 1, 0));\n    assertEquals(3, reader.read(buf, 1, 3));\n    assertEquals(\"foo\", new String(buf, 1, 3));\n    assertEquals(2, reader.read(CharBuffer.wrap(buf, 2, 2)));\n    assertEquals(\"ba\", new String(buf, 2, 2));\n    assertEquals('r', (char) reader.read());\n    assertEquals(-1, reader.read(buf));\n    reader.close();\n\n    reader.setValue(\"foobar\");\n    StringBuilder sb = new StringBuilder();\n    int ch;\n    while ((ch = reader.read()) != -1) {\n      sb.append((char) ch);\n    }\n    reader.close();\n    assertEquals(\"foobar\", sb.toString());    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestField#testReusableStringReader().mjava","pathOld":"/dev/null","sourceNew":"  public void testReusableStringReader() throws Exception {\n    ReusableStringReader reader = new ReusableStringReader();\n    assertEquals(-1, reader.read());\n    assertEquals(-1, reader.read(new char[1]));\n    assertEquals(-1, reader.read(new char[2], 1, 1));\n    assertEquals(-1, reader.read(CharBuffer.wrap(new char[2])));\n    \n    reader.setValue(\"foobar\");\n    char[] buf = new char[4];\n    assertEquals(4, reader.read(buf));\n    assertEquals(\"foob\", new String(buf));\n    assertEquals(2, reader.read(buf));\n    assertEquals(\"ar\", new String(buf, 0, 2));\n    assertEquals(-1, reader.read(buf));\n    reader.close();\n\n    reader.setValue(\"foobar\");\n    assertEquals(0, reader.read(buf, 1, 0));\n    assertEquals(3, reader.read(buf, 1, 3));\n    assertEquals(\"foo\", new String(buf, 1, 3));\n    assertEquals(2, reader.read(CharBuffer.wrap(buf, 2, 2)));\n    assertEquals(\"ba\", new String(buf, 2, 2));\n    assertEquals('r', (char) reader.read());\n    assertEquals(-1, reader.read(buf));\n    reader.close();\n\n    reader.setValue(\"foobar\");\n    StringBuilder sb = new StringBuilder();\n    int ch;\n    while ((ch = reader.read()) != -1) {\n      sb.append((char) ch);\n    }\n    reader.close();\n    assertEquals(\"foobar\", sb.toString());    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestReusableStringReader#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestField#testReusableStringReader().mjava","sourceNew":"  public void test() throws Exception {\n    ReusableStringReader reader = new ReusableStringReader();\n    assertEquals(-1, reader.read());\n    assertEquals(-1, reader.read(new char[1]));\n    assertEquals(-1, reader.read(new char[2], 1, 1));\n    assertEquals(-1, reader.read(CharBuffer.wrap(new char[2])));\n    \n    reader.setValue(\"foobar\");\n    char[] buf = new char[4];\n    assertEquals(4, reader.read(buf));\n    assertEquals(\"foob\", new String(buf));\n    assertEquals(2, reader.read(buf));\n    assertEquals(\"ar\", new String(buf, 0, 2));\n    assertEquals(-1, reader.read(buf));\n    reader.close();\n\n    reader.setValue(\"foobar\");\n    assertEquals(0, reader.read(buf, 1, 0));\n    assertEquals(3, reader.read(buf, 1, 3));\n    assertEquals(\"foo\", new String(buf, 1, 3));\n    assertEquals(2, reader.read(CharBuffer.wrap(buf, 2, 2)));\n    assertEquals(\"ba\", new String(buf, 2, 2));\n    assertEquals('r', (char) reader.read());\n    assertEquals(-1, reader.read(buf));\n    reader.close();\n\n    reader.setValue(\"foobar\");\n    StringBuilder sb = new StringBuilder();\n    int ch;\n    while ((ch = reader.read()) != -1) {\n      sb.append((char) ch);\n    }\n    reader.close();\n    assertEquals(\"foobar\", sb.toString());    \n  }\n\n","sourceOld":"  public void testReusableStringReader() throws Exception {\n    ReusableStringReader reader = new ReusableStringReader();\n    assertEquals(-1, reader.read());\n    assertEquals(-1, reader.read(new char[1]));\n    assertEquals(-1, reader.read(new char[2], 1, 1));\n    assertEquals(-1, reader.read(CharBuffer.wrap(new char[2])));\n    \n    reader.setValue(\"foobar\");\n    char[] buf = new char[4];\n    assertEquals(4, reader.read(buf));\n    assertEquals(\"foob\", new String(buf));\n    assertEquals(2, reader.read(buf));\n    assertEquals(\"ar\", new String(buf, 0, 2));\n    assertEquals(-1, reader.read(buf));\n    reader.close();\n\n    reader.setValue(\"foobar\");\n    assertEquals(0, reader.read(buf, 1, 0));\n    assertEquals(3, reader.read(buf, 1, 3));\n    assertEquals(\"foo\", new String(buf, 1, 3));\n    assertEquals(2, reader.read(CharBuffer.wrap(buf, 2, 2)));\n    assertEquals(\"ba\", new String(buf, 2, 2));\n    assertEquals('r', (char) reader.read());\n    assertEquals(-1, reader.read(buf));\n    reader.close();\n\n    reader.setValue(\"foobar\");\n    StringBuilder sb = new StringBuilder();\n    int ch;\n    while ((ch = reader.read()) != -1) {\n      sb.append((char) ch);\n    }\n    reader.close();\n    assertEquals(\"foobar\", sb.toString());    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestField#testReusableStringReader().mjava","sourceNew":null,"sourceOld":"  public void testReusableStringReader() throws Exception {\n    ReusableStringReader reader = new ReusableStringReader();\n    assertEquals(-1, reader.read());\n    assertEquals(-1, reader.read(new char[1]));\n    assertEquals(-1, reader.read(new char[2], 1, 1));\n    assertEquals(-1, reader.read(CharBuffer.wrap(new char[2])));\n    \n    reader.setValue(\"foobar\");\n    char[] buf = new char[4];\n    assertEquals(4, reader.read(buf));\n    assertEquals(\"foob\", new String(buf));\n    assertEquals(2, reader.read(buf));\n    assertEquals(\"ar\", new String(buf, 0, 2));\n    assertEquals(-1, reader.read(buf));\n    reader.close();\n\n    reader.setValue(\"foobar\");\n    assertEquals(0, reader.read(buf, 1, 0));\n    assertEquals(3, reader.read(buf, 1, 3));\n    assertEquals(\"foo\", new String(buf, 1, 3));\n    assertEquals(2, reader.read(CharBuffer.wrap(buf, 2, 2)));\n    assertEquals(\"ba\", new String(buf, 2, 2));\n    assertEquals('r', (char) reader.read());\n    assertEquals(-1, reader.read(buf));\n    reader.close();\n\n    reader.setValue(\"foobar\");\n    StringBuilder sb = new StringBuilder();\n    int ch;\n    while ((ch = reader.read()) != -1) {\n      sb.append((char) ch);\n    }\n    reader.close();\n    assertEquals(\"foobar\", sb.toString());    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","190bb9bef51c64832a51cf820b20992d4cf60c51"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["190bb9bef51c64832a51cf820b20992d4cf60c51","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["190bb9bef51c64832a51cf820b20992d4cf60c51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"190bb9bef51c64832a51cf820b20992d4cf60c51":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c83d6c4335f31cae14f625a222bc842f20073dcd"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","190bb9bef51c64832a51cf820b20992d4cf60c51"],"190bb9bef51c64832a51cf820b20992d4cf60c51":["001b25b42373b22a52f399dbf072f1224632e8e6","37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}