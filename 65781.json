{"path":"lucene/src/test/org/apache/lucene/index/TestStressNRT#test().mjava","commits":[{"id":"c00afe74a80796ed1f30a9509b150ff104746a1f","date":1312881735,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressNRT#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#testStressLuceneNRT().mjava","sourceNew":"  public void test() throws Exception {\n    // update variables\n    final int commitPercent = random.nextInt(20);\n    final int softCommitPercent = random.nextInt(100); // what percent of the commits are soft\n    final int deletePercent = random.nextInt(50);\n    final int deleteByQueryPercent = random.nextInt(25);\n    final int ndocs = atLeast(50);\n    final int nWriteThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    final int maxConcurrentCommits = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    \n    final boolean tombstones = random.nextBoolean();\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(atLeast(50000));  // number of query operations to perform in total\n\n    final int nReadThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    initModel(ndocs);\n\n    if (VERBOSE) {\n      System.out.println(\"\\n\");\n      System.out.println(\"TEST: commitPercent=\" + commitPercent);\n      System.out.println(\"TEST: softCommitPercent=\" + softCommitPercent);\n      System.out.println(\"TEST: deletePercent=\" + deletePercent);\n      System.out.println(\"TEST: deleteByQueryPercent=\" + deleteByQueryPercent);\n      System.out.println(\"TEST: ndocs=\" + ndocs);\n      System.out.println(\"TEST: nWriteThreads=\" + nWriteThreads);\n      System.out.println(\"TEST: nReadThreads=\" + nReadThreads);\n      System.out.println(\"TEST: maxConcurrentCommits=\" + maxConcurrentCommits);\n      System.out.println(\"TEST: tombstones=\" + tombstones);\n      System.out.println(\"TEST: operations=\" + operations);\n      System.out.println(\"\\n\");\n    }\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomOptimizeAssert(false);\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestStressNRT.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    if (random.nextBoolean()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": call writer.getReader\");\n                      }\n                      newReader = writer.getReader(true);\n                    } else {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": reopen reader=\" + oldReader + \" version=\" + version);\n                      }\n                      newReader = oldReader.reopen(writer.w, true);\n                    }\n                  } else {\n                    // assertU(commit());\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": commit+reopen reader=\" + oldReader + \" version=\" + version);\n                    }\n                    writer.commit();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": now reopen after commit\");\n                    }\n                    newReader = oldReader.reopen();\n                  }\n\n                  // Code below assumes newReader comes w/\n                  // extra ref:\n                  if (newReader == oldReader) {\n                    newReader.incRef();\n                  }\n\n                  oldReader.decRef();\n\n                  synchronized(TestStressNRT.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    //System.out.println(Thread.currentThread().getName() + \": newVersion=\" + newReader.getVersion());\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new reader=\" + newReader);\n                      }\n                      reader.decRef();\n                      reader = newReader;\n\n                      // Silly: forces fieldInfos to be\n                      // loaded so we don't hit IOE on later\n                      // reader.toString\n                      newReader.toString();\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new model version=\" + version);\n                        }\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      } else {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new model version=\" + version);\n                        }\n                      }\n                    } else {\n                      // if the same reader, don't decRef.\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new reader=\" + newReader);\n                      }\n                      newReader.decRef();\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n              } else {\n\n                int id = rand.nextInt(ndocs);\n                Object sync = syncArr[id];\n\n                // set the lastId before we actually change it sometimes to try and\n                // uncover more race conditions between writing and reading\n                boolean before = random.nextBoolean();\n                if (before) {\n                  lastId = id;\n                }\n\n                // We can't concurrently update the same document and retain our invariants of increasing values\n                // since we can't guarantee what order the updates will be executed.\n                synchronized (sync) {\n                  Long val = model.get(id);\n                  long nextVal = Math.abs(val)+1;\n\n                  if (oper < commitPercent + deletePercent) {\n                    // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(new Field(\"id\",\"-\"+Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                      d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": term delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                    model.put(id, -nextVal);\n                  } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                    //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(new Field(\"id\",\"-\"+Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                      d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": query delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                    model.put(id, -nextVal);\n                  } else {\n                    // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                    Document d = new Document();\n                    d.add(newField(\"id\",Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                    d.add(newField(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": u id:\" + id + \" val=\" + nextVal);\n                    }\n                    writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                    if (tombstones) {\n                      // remove tombstone after new addition (this should be optional?)\n                      writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    }\n                    model.put(id, nextVal);\n                  }\n                }\n\n                if (!before) {\n                  lastId = id;\n                }\n              }\n            }\n          } catch (Throwable e) {\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n              IndexReader r;\n              synchronized(TestStressNRT.this) {\n                val = committedModel.get(id);\n                r = reader;\n                r.incRef();\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": s id=\" + id + \" val=\" + val + \" r=\" + r.getVersion());\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for its tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val + \" reader=\" + r);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                // we should have found the document, or its tombstone\n                if (results.totalHits != 1) {\n                  System.out.println(\"FAIL: hits id:\" + id + \" val=\" + val);\n                  for(ScoreDoc sd : results.scoreDocs) {\n                    final Document doc = r.document(sd.doc);\n                    System.out.println(\"  docID=\" + sd.doc + \" id:\" + doc.get(\"id\") + \" foundVal=\" + doc.get(field));\n                  }\n                  fail(\"id=\" + id + \" reader=\" + r + \" totalHits=\" + results.totalHits);\n                }\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  fail(\"foundVal=\" + foundVal + \" val=\" + val + \" id=\" + id + \" reader=\" + r);\n                }\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader=\" + reader);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Ignore\n  @Test\n  public void testStressLuceneNRT() throws Exception {\n    // update variables\n    final int commitPercent = 10;\n    final int softCommitPercent = 50; // what percent of the commits are soft\n    final int deletePercent = 8;\n    final int deleteByQueryPercent = 4;\n    final int ndocs = 100;\n    int nWriteThreads = 10;\n    final int maxConcurrentCommits = 2;   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    final boolean tombstones = false;\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(0);  // number of query operations to perform in total       // TODO: temporarily high due to lack of stability\n    int nReadThreads = 10;\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    RAMDirectory dir = new RAMDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_40, new WhitespaceAnalyzer(Version.LUCENE_40)));\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestRealTimeGet.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    newReader = oldReader.reopen(writer, true);\n                  } else {\n                    // assertU(commit());\n                    writer.commit();\n                    newReader = oldReader.reopen();\n                  }\n\n                  synchronized(TestRealTimeGet.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      reader.decRef();\n                      reader = newReader;\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      }\n\n                    } else if (newReader != oldReader) {\n                      // if the same reader, don't decRef.\n                      newReader.decRef();\n                    }\n\n                    oldReader.decRef();\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id = rand.nextInt(ndocs);\n              Object sync = syncArr[id];\n\n              // set the lastId before we actually change it sometimes to try and\n              // uncover more race conditions between writing and reading\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              // We can't concurrently update the same document and retain our invariants of increasing values\n              // since we can't guarantee what order the updates will be executed.\n              synchronized (sync) {\n                Long val = model.get(id);\n                long nextVal = Math.abs(val)+1;\n\n                if (oper < commitPercent + deletePercent) {\n                  // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                    d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                  model.put(id, -nextVal);\n                } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                  //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                  // add tombstone first\n                  if (tombstones) {\n                    Document d = new Document();\n                    d.add(new Field(\"id\",\"-\"+Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                    d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                    writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                  }\n\n                  writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                  model.put(id, -nextVal);\n                } else {\n                  // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                  Document d = new Document();\n                  d.add(new Field(\"id\",Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                  d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                  writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n\n                  if (tombstones) {\n                    // remove tombstone after new addition (this should be optional?)\n                    writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                  }\n\n                  model.put(id, nextVal);\n                }\n              }\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Exception  ex) {\n            throw new RuntimeException(ex);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n\n              synchronized(TestRealTimeGet.this) {\n                val = committedModel.get(id);\n              }\n\n\n              IndexReader r;\n              synchronized(TestRealTimeGet.this) {\n                r = reader;\n                r.incRef();\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 1);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for it's tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                assertEquals(1, results.totalHits);   // we should have found the document, or it's tombstone\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  System.out.println(\"model_val=\"+val+\" foundVal=\"+foundVal);\n                }\n                assertTrue(foundVal >= Math.abs(val));\n              }\n\n              r.decRef();\n            }\n          }\n          catch (Throwable e) {\n            operations.set(-1L);\n            SolrException.log(log,e);\n            fail(e.toString());\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressNRT#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressNRT#test().mjava","sourceNew":"  public void test() throws Exception {\n    // update variables\n    final int commitPercent = random.nextInt(20);\n    final int softCommitPercent = random.nextInt(100); // what percent of the commits are soft\n    final int deletePercent = random.nextInt(50);\n    final int deleteByQueryPercent = random.nextInt(25);\n    final int ndocs = atLeast(50);\n    final int nWriteThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    final int maxConcurrentCommits = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    \n    final boolean tombstones = random.nextBoolean();\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(atLeast(50000));  // number of query operations to perform in total\n\n    final int nReadThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    initModel(ndocs);\n\n    final FieldType storedOnlyType = new FieldType();\n    storedOnlyType.setStored(true);\n\n    if (VERBOSE) {\n      System.out.println(\"\\n\");\n      System.out.println(\"TEST: commitPercent=\" + commitPercent);\n      System.out.println(\"TEST: softCommitPercent=\" + softCommitPercent);\n      System.out.println(\"TEST: deletePercent=\" + deletePercent);\n      System.out.println(\"TEST: deleteByQueryPercent=\" + deleteByQueryPercent);\n      System.out.println(\"TEST: ndocs=\" + ndocs);\n      System.out.println(\"TEST: nWriteThreads=\" + nWriteThreads);\n      System.out.println(\"TEST: nReadThreads=\" + nReadThreads);\n      System.out.println(\"TEST: maxConcurrentCommits=\" + maxConcurrentCommits);\n      System.out.println(\"TEST: tombstones=\" + tombstones);\n      System.out.println(\"TEST: operations=\" + operations);\n      System.out.println(\"\\n\");\n    }\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomOptimizeAssert(false);\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestStressNRT.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    if (random.nextBoolean()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": call writer.getReader\");\n                      }\n                      newReader = writer.getReader(true);\n                    } else {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": reopen reader=\" + oldReader + \" version=\" + version);\n                      }\n                      newReader = oldReader.reopen(writer.w, true);\n                    }\n                  } else {\n                    // assertU(commit());\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": commit+reopen reader=\" + oldReader + \" version=\" + version);\n                    }\n                    writer.commit();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": now reopen after commit\");\n                    }\n                    newReader = oldReader.reopen();\n                  }\n\n                  // Code below assumes newReader comes w/\n                  // extra ref:\n                  if (newReader == oldReader) {\n                    newReader.incRef();\n                  }\n\n                  oldReader.decRef();\n\n                  synchronized(TestStressNRT.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    //System.out.println(Thread.currentThread().getName() + \": newVersion=\" + newReader.getVersion());\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new reader=\" + newReader);\n                      }\n                      reader.decRef();\n                      reader = newReader;\n\n                      // Silly: forces fieldInfos to be\n                      // loaded so we don't hit IOE on later\n                      // reader.toString\n                      newReader.toString();\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new model version=\" + version);\n                        }\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      } else {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new model version=\" + version);\n                        }\n                      }\n                    } else {\n                      // if the same reader, don't decRef.\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new reader=\" + newReader);\n                      }\n                      newReader.decRef();\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n              } else {\n\n                int id = rand.nextInt(ndocs);\n                Object sync = syncArr[id];\n\n                // set the lastId before we actually change it sometimes to try and\n                // uncover more race conditions between writing and reading\n                boolean before = random.nextBoolean();\n                if (before) {\n                  lastId = id;\n                }\n\n                // We can't concurrently update the same document and retain our invariants of increasing values\n                // since we can't guarantee what order the updates will be executed.\n                synchronized (sync) {\n                  Long val = model.get(id);\n                  long nextVal = Math.abs(val)+1;\n\n                  if (oper < commitPercent + deletePercent) {\n                    // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": term delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                    model.put(id, -nextVal);\n                  } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                    //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": query delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                    model.put(id, -nextVal);\n                  } else {\n                    // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                    Document d = new Document();\n                    d.add(newField(\"id\", Integer.toString(id), StringField.TYPE_STORED));\n                    d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": u id:\" + id + \" val=\" + nextVal);\n                    }\n                    writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                    if (tombstones) {\n                      // remove tombstone after new addition (this should be optional?)\n                      writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    }\n                    model.put(id, nextVal);\n                  }\n                }\n\n                if (!before) {\n                  lastId = id;\n                }\n              }\n            }\n          } catch (Throwable e) {\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n              IndexReader r;\n              synchronized(TestStressNRT.this) {\n                val = committedModel.get(id);\n                r = reader;\n                r.incRef();\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": s id=\" + id + \" val=\" + val + \" r=\" + r.getVersion());\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for its tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val + \" reader=\" + r);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                // we should have found the document, or its tombstone\n                if (results.totalHits != 1) {\n                  System.out.println(\"FAIL: hits id:\" + id + \" val=\" + val);\n                  for(ScoreDoc sd : results.scoreDocs) {\n                    final Document doc = r.document(sd.doc);\n                    System.out.println(\"  docID=\" + sd.doc + \" id:\" + doc.get(\"id\") + \" foundVal=\" + doc.get(field));\n                  }\n                  fail(\"id=\" + id + \" reader=\" + r + \" totalHits=\" + results.totalHits);\n                }\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  fail(\"foundVal=\" + foundVal + \" val=\" + val + \" id=\" + id + \" reader=\" + r);\n                }\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader=\" + reader);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    // update variables\n    final int commitPercent = random.nextInt(20);\n    final int softCommitPercent = random.nextInt(100); // what percent of the commits are soft\n    final int deletePercent = random.nextInt(50);\n    final int deleteByQueryPercent = random.nextInt(25);\n    final int ndocs = atLeast(50);\n    final int nWriteThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    final int maxConcurrentCommits = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    \n    final boolean tombstones = random.nextBoolean();\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(atLeast(50000));  // number of query operations to perform in total\n\n    final int nReadThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    initModel(ndocs);\n\n    if (VERBOSE) {\n      System.out.println(\"\\n\");\n      System.out.println(\"TEST: commitPercent=\" + commitPercent);\n      System.out.println(\"TEST: softCommitPercent=\" + softCommitPercent);\n      System.out.println(\"TEST: deletePercent=\" + deletePercent);\n      System.out.println(\"TEST: deleteByQueryPercent=\" + deleteByQueryPercent);\n      System.out.println(\"TEST: ndocs=\" + ndocs);\n      System.out.println(\"TEST: nWriteThreads=\" + nWriteThreads);\n      System.out.println(\"TEST: nReadThreads=\" + nReadThreads);\n      System.out.println(\"TEST: maxConcurrentCommits=\" + maxConcurrentCommits);\n      System.out.println(\"TEST: tombstones=\" + tombstones);\n      System.out.println(\"TEST: operations=\" + operations);\n      System.out.println(\"\\n\");\n    }\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomOptimizeAssert(false);\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestStressNRT.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    if (random.nextBoolean()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": call writer.getReader\");\n                      }\n                      newReader = writer.getReader(true);\n                    } else {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": reopen reader=\" + oldReader + \" version=\" + version);\n                      }\n                      newReader = oldReader.reopen(writer.w, true);\n                    }\n                  } else {\n                    // assertU(commit());\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": commit+reopen reader=\" + oldReader + \" version=\" + version);\n                    }\n                    writer.commit();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": now reopen after commit\");\n                    }\n                    newReader = oldReader.reopen();\n                  }\n\n                  // Code below assumes newReader comes w/\n                  // extra ref:\n                  if (newReader == oldReader) {\n                    newReader.incRef();\n                  }\n\n                  oldReader.decRef();\n\n                  synchronized(TestStressNRT.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    //System.out.println(Thread.currentThread().getName() + \": newVersion=\" + newReader.getVersion());\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new reader=\" + newReader);\n                      }\n                      reader.decRef();\n                      reader = newReader;\n\n                      // Silly: forces fieldInfos to be\n                      // loaded so we don't hit IOE on later\n                      // reader.toString\n                      newReader.toString();\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new model version=\" + version);\n                        }\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      } else {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new model version=\" + version);\n                        }\n                      }\n                    } else {\n                      // if the same reader, don't decRef.\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new reader=\" + newReader);\n                      }\n                      newReader.decRef();\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n              } else {\n\n                int id = rand.nextInt(ndocs);\n                Object sync = syncArr[id];\n\n                // set the lastId before we actually change it sometimes to try and\n                // uncover more race conditions between writing and reading\n                boolean before = random.nextBoolean();\n                if (before) {\n                  lastId = id;\n                }\n\n                // We can't concurrently update the same document and retain our invariants of increasing values\n                // since we can't guarantee what order the updates will be executed.\n                synchronized (sync) {\n                  Long val = model.get(id);\n                  long nextVal = Math.abs(val)+1;\n\n                  if (oper < commitPercent + deletePercent) {\n                    // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(new Field(\"id\",\"-\"+Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                      d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": term delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                    model.put(id, -nextVal);\n                  } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                    //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(new Field(\"id\",\"-\"+Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                      d.add(new Field(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": query delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                    model.put(id, -nextVal);\n                  } else {\n                    // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                    Document d = new Document();\n                    d.add(newField(\"id\",Integer.toString(id), Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n                    d.add(newField(field, Long.toString(nextVal), Field.Store.YES, Field.Index.NO));\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": u id:\" + id + \" val=\" + nextVal);\n                    }\n                    writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                    if (tombstones) {\n                      // remove tombstone after new addition (this should be optional?)\n                      writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    }\n                    model.put(id, nextVal);\n                  }\n                }\n\n                if (!before) {\n                  lastId = id;\n                }\n              }\n            }\n          } catch (Throwable e) {\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n              IndexReader r;\n              synchronized(TestStressNRT.this) {\n                val = committedModel.get(id);\n                r = reader;\n                r.incRef();\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": s id=\" + id + \" val=\" + val + \" r=\" + r.getVersion());\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for its tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val + \" reader=\" + r);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                // we should have found the document, or its tombstone\n                if (results.totalHits != 1) {\n                  System.out.println(\"FAIL: hits id:\" + id + \" val=\" + val);\n                  for(ScoreDoc sd : results.scoreDocs) {\n                    final Document doc = r.document(sd.doc);\n                    System.out.println(\"  docID=\" + sd.doc + \" id:\" + doc.get(\"id\") + \" foundVal=\" + doc.get(field));\n                  }\n                  fail(\"id=\" + id + \" reader=\" + r + \" totalHits=\" + results.totalHits);\n                }\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  fail(\"foundVal=\" + foundVal + \" val=\" + val + \" id=\" + id + \" reader=\" + r);\n                }\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader=\" + reader);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressNRT#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressNRT#test().mjava","sourceNew":"  public void test() throws Exception {\n    // update variables\n    final int commitPercent = random.nextInt(20);\n    final int softCommitPercent = random.nextInt(100); // what percent of the commits are soft\n    final int deletePercent = random.nextInt(50);\n    final int deleteByQueryPercent = random.nextInt(25);\n    final int ndocs = atLeast(50);\n    final int nWriteThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    final int maxConcurrentCommits = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    \n    final boolean tombstones = random.nextBoolean();\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(atLeast(50000));  // number of query operations to perform in total\n\n    final int nReadThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    initModel(ndocs);\n\n    final FieldType storedOnlyType = new FieldType();\n    storedOnlyType.setStored(true);\n\n    if (VERBOSE) {\n      System.out.println(\"\\n\");\n      System.out.println(\"TEST: commitPercent=\" + commitPercent);\n      System.out.println(\"TEST: softCommitPercent=\" + softCommitPercent);\n      System.out.println(\"TEST: deletePercent=\" + deletePercent);\n      System.out.println(\"TEST: deleteByQueryPercent=\" + deleteByQueryPercent);\n      System.out.println(\"TEST: ndocs=\" + ndocs);\n      System.out.println(\"TEST: nWriteThreads=\" + nWriteThreads);\n      System.out.println(\"TEST: nReadThreads=\" + nReadThreads);\n      System.out.println(\"TEST: maxConcurrentCommits=\" + maxConcurrentCommits);\n      System.out.println(\"TEST: tombstones=\" + tombstones);\n      System.out.println(\"TEST: operations=\" + operations);\n      System.out.println(\"\\n\");\n    }\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomOptimizeAssert(false);\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestStressNRT.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    if (random.nextBoolean()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": call writer.getReader\");\n                      }\n                      newReader = writer.getReader(true);\n                    } else {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": reopen reader=\" + oldReader + \" version=\" + version);\n                      }\n                      newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                    }\n                  } else {\n                    // assertU(commit());\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": commit+reopen reader=\" + oldReader + \" version=\" + version);\n                    }\n                    writer.commit();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": now reopen after commit\");\n                    }\n                    newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n                  // Code below assumes newReader comes w/\n                  // extra ref:\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n\n                  oldReader.decRef();\n\n                  synchronized(TestStressNRT.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    //System.out.println(Thread.currentThread().getName() + \": newVersion=\" + newReader.getVersion());\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new reader=\" + newReader);\n                      }\n                      reader.decRef();\n                      reader = newReader;\n\n                      // Silly: forces fieldInfos to be\n                      // loaded so we don't hit IOE on later\n                      // reader.toString\n                      newReader.toString();\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new model version=\" + version);\n                        }\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      } else {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new model version=\" + version);\n                        }\n                      }\n                    } else {\n                      // if the same reader, don't decRef.\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new reader=\" + newReader);\n                      }\n                      newReader.decRef();\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n              } else {\n\n                int id = rand.nextInt(ndocs);\n                Object sync = syncArr[id];\n\n                // set the lastId before we actually change it sometimes to try and\n                // uncover more race conditions between writing and reading\n                boolean before = random.nextBoolean();\n                if (before) {\n                  lastId = id;\n                }\n\n                // We can't concurrently update the same document and retain our invariants of increasing values\n                // since we can't guarantee what order the updates will be executed.\n                synchronized (sync) {\n                  Long val = model.get(id);\n                  long nextVal = Math.abs(val)+1;\n\n                  if (oper < commitPercent + deletePercent) {\n                    // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": term delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                    model.put(id, -nextVal);\n                  } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                    //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": query delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                    model.put(id, -nextVal);\n                  } else {\n                    // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                    Document d = new Document();\n                    d.add(newField(\"id\", Integer.toString(id), StringField.TYPE_STORED));\n                    d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": u id:\" + id + \" val=\" + nextVal);\n                    }\n                    writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                    if (tombstones) {\n                      // remove tombstone after new addition (this should be optional?)\n                      writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    }\n                    model.put(id, nextVal);\n                  }\n                }\n\n                if (!before) {\n                  lastId = id;\n                }\n              }\n            }\n          } catch (Throwable e) {\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n              IndexReader r;\n              synchronized(TestStressNRT.this) {\n                val = committedModel.get(id);\n                r = reader;\n                r.incRef();\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": s id=\" + id + \" val=\" + val + \" r=\" + r.getVersion());\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for its tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val + \" reader=\" + r);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                // we should have found the document, or its tombstone\n                if (results.totalHits != 1) {\n                  System.out.println(\"FAIL: hits id:\" + id + \" val=\" + val);\n                  for(ScoreDoc sd : results.scoreDocs) {\n                    final Document doc = r.document(sd.doc);\n                    System.out.println(\"  docID=\" + sd.doc + \" id:\" + doc.get(\"id\") + \" foundVal=\" + doc.get(field));\n                  }\n                  fail(\"id=\" + id + \" reader=\" + r + \" totalHits=\" + results.totalHits);\n                }\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  fail(\"foundVal=\" + foundVal + \" val=\" + val + \" id=\" + id + \" reader=\" + r);\n                }\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader=\" + reader);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    // update variables\n    final int commitPercent = random.nextInt(20);\n    final int softCommitPercent = random.nextInt(100); // what percent of the commits are soft\n    final int deletePercent = random.nextInt(50);\n    final int deleteByQueryPercent = random.nextInt(25);\n    final int ndocs = atLeast(50);\n    final int nWriteThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    final int maxConcurrentCommits = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    \n    final boolean tombstones = random.nextBoolean();\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(atLeast(50000));  // number of query operations to perform in total\n\n    final int nReadThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    initModel(ndocs);\n\n    final FieldType storedOnlyType = new FieldType();\n    storedOnlyType.setStored(true);\n\n    if (VERBOSE) {\n      System.out.println(\"\\n\");\n      System.out.println(\"TEST: commitPercent=\" + commitPercent);\n      System.out.println(\"TEST: softCommitPercent=\" + softCommitPercent);\n      System.out.println(\"TEST: deletePercent=\" + deletePercent);\n      System.out.println(\"TEST: deleteByQueryPercent=\" + deleteByQueryPercent);\n      System.out.println(\"TEST: ndocs=\" + ndocs);\n      System.out.println(\"TEST: nWriteThreads=\" + nWriteThreads);\n      System.out.println(\"TEST: nReadThreads=\" + nReadThreads);\n      System.out.println(\"TEST: maxConcurrentCommits=\" + maxConcurrentCommits);\n      System.out.println(\"TEST: tombstones=\" + tombstones);\n      System.out.println(\"TEST: operations=\" + operations);\n      System.out.println(\"\\n\");\n    }\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomOptimizeAssert(false);\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestStressNRT.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    if (random.nextBoolean()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": call writer.getReader\");\n                      }\n                      newReader = writer.getReader(true);\n                    } else {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": reopen reader=\" + oldReader + \" version=\" + version);\n                      }\n                      newReader = oldReader.reopen(writer.w, true);\n                    }\n                  } else {\n                    // assertU(commit());\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": commit+reopen reader=\" + oldReader + \" version=\" + version);\n                    }\n                    writer.commit();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": now reopen after commit\");\n                    }\n                    newReader = oldReader.reopen();\n                  }\n\n                  // Code below assumes newReader comes w/\n                  // extra ref:\n                  if (newReader == oldReader) {\n                    newReader.incRef();\n                  }\n\n                  oldReader.decRef();\n\n                  synchronized(TestStressNRT.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    //System.out.println(Thread.currentThread().getName() + \": newVersion=\" + newReader.getVersion());\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new reader=\" + newReader);\n                      }\n                      reader.decRef();\n                      reader = newReader;\n\n                      // Silly: forces fieldInfos to be\n                      // loaded so we don't hit IOE on later\n                      // reader.toString\n                      newReader.toString();\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new model version=\" + version);\n                        }\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      } else {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new model version=\" + version);\n                        }\n                      }\n                    } else {\n                      // if the same reader, don't decRef.\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new reader=\" + newReader);\n                      }\n                      newReader.decRef();\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n              } else {\n\n                int id = rand.nextInt(ndocs);\n                Object sync = syncArr[id];\n\n                // set the lastId before we actually change it sometimes to try and\n                // uncover more race conditions between writing and reading\n                boolean before = random.nextBoolean();\n                if (before) {\n                  lastId = id;\n                }\n\n                // We can't concurrently update the same document and retain our invariants of increasing values\n                // since we can't guarantee what order the updates will be executed.\n                synchronized (sync) {\n                  Long val = model.get(id);\n                  long nextVal = Math.abs(val)+1;\n\n                  if (oper < commitPercent + deletePercent) {\n                    // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": term delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                    model.put(id, -nextVal);\n                  } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                    //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": query delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                    model.put(id, -nextVal);\n                  } else {\n                    // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                    Document d = new Document();\n                    d.add(newField(\"id\", Integer.toString(id), StringField.TYPE_STORED));\n                    d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": u id:\" + id + \" val=\" + nextVal);\n                    }\n                    writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                    if (tombstones) {\n                      // remove tombstone after new addition (this should be optional?)\n                      writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    }\n                    model.put(id, nextVal);\n                  }\n                }\n\n                if (!before) {\n                  lastId = id;\n                }\n              }\n            }\n          } catch (Throwable e) {\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n              IndexReader r;\n              synchronized(TestStressNRT.this) {\n                val = committedModel.get(id);\n                r = reader;\n                r.incRef();\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": s id=\" + id + \" val=\" + val + \" r=\" + r.getVersion());\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for its tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val + \" reader=\" + r);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                // we should have found the document, or its tombstone\n                if (results.totalHits != 1) {\n                  System.out.println(\"FAIL: hits id:\" + id + \" val=\" + val);\n                  for(ScoreDoc sd : results.scoreDocs) {\n                    final Document doc = r.document(sd.doc);\n                    System.out.println(\"  docID=\" + sd.doc + \" id:\" + doc.get(\"id\") + \" foundVal=\" + doc.get(field));\n                  }\n                  fail(\"id=\" + id + \" reader=\" + r + \" totalHits=\" + results.totalHits);\n                }\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  fail(\"foundVal=\" + foundVal + \" val=\" + val + \" id=\" + id + \" reader=\" + r);\n                }\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader=\" + reader);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressNRT#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressNRT#test().mjava","sourceNew":"  public void test() throws Exception {\n    // update variables\n    final int commitPercent = random.nextInt(20);\n    final int softCommitPercent = random.nextInt(100); // what percent of the commits are soft\n    final int deletePercent = random.nextInt(50);\n    final int deleteByQueryPercent = random.nextInt(25);\n    final int ndocs = atLeast(50);\n    final int nWriteThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    final int maxConcurrentCommits = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    \n    final boolean tombstones = random.nextBoolean();\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(atLeast(50000));  // number of query operations to perform in total\n\n    final int nReadThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    initModel(ndocs);\n\n    final FieldType storedOnlyType = new FieldType();\n    storedOnlyType.setStored(true);\n\n    if (VERBOSE) {\n      System.out.println(\"\\n\");\n      System.out.println(\"TEST: commitPercent=\" + commitPercent);\n      System.out.println(\"TEST: softCommitPercent=\" + softCommitPercent);\n      System.out.println(\"TEST: deletePercent=\" + deletePercent);\n      System.out.println(\"TEST: deleteByQueryPercent=\" + deleteByQueryPercent);\n      System.out.println(\"TEST: ndocs=\" + ndocs);\n      System.out.println(\"TEST: nWriteThreads=\" + nWriteThreads);\n      System.out.println(\"TEST: nReadThreads=\" + nReadThreads);\n      System.out.println(\"TEST: maxConcurrentCommits=\" + maxConcurrentCommits);\n      System.out.println(\"TEST: tombstones=\" + tombstones);\n      System.out.println(\"TEST: operations=\" + operations);\n      System.out.println(\"\\n\");\n    }\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomOptimizeAssert(false);\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestStressNRT.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    if (random.nextBoolean()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": call writer.getReader\");\n                      }\n                      newReader = writer.getReader(true);\n                    } else {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": reopen reader=\" + oldReader + \" version=\" + version);\n                      }\n                      newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                    }\n                  } else {\n                    // assertU(commit());\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": commit+reopen reader=\" + oldReader + \" version=\" + version);\n                    }\n                    writer.commit();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": now reopen after commit\");\n                    }\n                    newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n                  // Code below assumes newReader comes w/\n                  // extra ref:\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n\n                  oldReader.decRef();\n\n                  synchronized(TestStressNRT.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    //System.out.println(Thread.currentThread().getName() + \": newVersion=\" + newReader.getVersion());\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new reader=\" + newReader);\n                      }\n                      reader.decRef();\n                      reader = newReader;\n\n                      // Silly: forces fieldInfos to be\n                      // loaded so we don't hit IOE on later\n                      // reader.toString\n                      newReader.toString();\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new model version=\" + version);\n                        }\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      } else {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new model version=\" + version);\n                        }\n                      }\n                    } else {\n                      // if the same reader, don't decRef.\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new reader=\" + newReader);\n                      }\n                      newReader.decRef();\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n              } else {\n\n                int id = rand.nextInt(ndocs);\n                Object sync = syncArr[id];\n\n                // set the lastId before we actually change it sometimes to try and\n                // uncover more race conditions between writing and reading\n                boolean before = random.nextBoolean();\n                if (before) {\n                  lastId = id;\n                }\n\n                // We can't concurrently update the same document and retain our invariants of increasing values\n                // since we can't guarantee what order the updates will be executed.\n                synchronized (sync) {\n                  Long val = model.get(id);\n                  long nextVal = Math.abs(val)+1;\n\n                  if (oper < commitPercent + deletePercent) {\n                    // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": term delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                    model.put(id, -nextVal);\n                  } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                    //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": query delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                    model.put(id, -nextVal);\n                  } else {\n                    // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                    Document d = new Document();\n                    d.add(newField(\"id\", Integer.toString(id), StringField.TYPE_STORED));\n                    d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": u id:\" + id + \" val=\" + nextVal);\n                    }\n                    writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                    if (tombstones) {\n                      // remove tombstone after new addition (this should be optional?)\n                      writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    }\n                    model.put(id, nextVal);\n                  }\n                }\n\n                if (!before) {\n                  lastId = id;\n                }\n              }\n            }\n          } catch (Throwable e) {\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n              IndexReader r;\n              synchronized(TestStressNRT.this) {\n                val = committedModel.get(id);\n                r = reader;\n                r.incRef();\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": s id=\" + id + \" val=\" + val + \" r=\" + r.getVersion());\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for its tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val + \" reader=\" + r);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                // we should have found the document, or its tombstone\n                if (results.totalHits != 1) {\n                  System.out.println(\"FAIL: hits id:\" + id + \" val=\" + val);\n                  for(ScoreDoc sd : results.scoreDocs) {\n                    final Document doc = r.document(sd.doc);\n                    System.out.println(\"  docID=\" + sd.doc + \" id:\" + doc.get(\"id\") + \" foundVal=\" + doc.get(field));\n                  }\n                  fail(\"id=\" + id + \" reader=\" + r + \" totalHits=\" + results.totalHits);\n                }\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  fail(\"foundVal=\" + foundVal + \" val=\" + val + \" id=\" + id + \" reader=\" + r);\n                }\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader=\" + reader);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    // update variables\n    final int commitPercent = random.nextInt(20);\n    final int softCommitPercent = random.nextInt(100); // what percent of the commits are soft\n    final int deletePercent = random.nextInt(50);\n    final int deleteByQueryPercent = random.nextInt(25);\n    final int ndocs = atLeast(50);\n    final int nWriteThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    final int maxConcurrentCommits = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    \n    final boolean tombstones = random.nextBoolean();\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(atLeast(50000));  // number of query operations to perform in total\n\n    final int nReadThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    initModel(ndocs);\n\n    final FieldType storedOnlyType = new FieldType();\n    storedOnlyType.setStored(true);\n\n    if (VERBOSE) {\n      System.out.println(\"\\n\");\n      System.out.println(\"TEST: commitPercent=\" + commitPercent);\n      System.out.println(\"TEST: softCommitPercent=\" + softCommitPercent);\n      System.out.println(\"TEST: deletePercent=\" + deletePercent);\n      System.out.println(\"TEST: deleteByQueryPercent=\" + deleteByQueryPercent);\n      System.out.println(\"TEST: ndocs=\" + ndocs);\n      System.out.println(\"TEST: nWriteThreads=\" + nWriteThreads);\n      System.out.println(\"TEST: nReadThreads=\" + nReadThreads);\n      System.out.println(\"TEST: maxConcurrentCommits=\" + maxConcurrentCommits);\n      System.out.println(\"TEST: tombstones=\" + tombstones);\n      System.out.println(\"TEST: operations=\" + operations);\n      System.out.println(\"\\n\");\n    }\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomOptimizeAssert(false);\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestStressNRT.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    if (random.nextBoolean()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": call writer.getReader\");\n                      }\n                      newReader = writer.getReader(true);\n                    } else {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": reopen reader=\" + oldReader + \" version=\" + version);\n                      }\n                      newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                    }\n                  } else {\n                    // assertU(commit());\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": commit+reopen reader=\" + oldReader + \" version=\" + version);\n                    }\n                    writer.commit();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": now reopen after commit\");\n                    }\n                    newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n                  // Code below assumes newReader comes w/\n                  // extra ref:\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n\n                  oldReader.decRef();\n\n                  synchronized(TestStressNRT.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    //System.out.println(Thread.currentThread().getName() + \": newVersion=\" + newReader.getVersion());\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new reader=\" + newReader);\n                      }\n                      reader.decRef();\n                      reader = newReader;\n\n                      // Silly: forces fieldInfos to be\n                      // loaded so we don't hit IOE on later\n                      // reader.toString\n                      newReader.toString();\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new model version=\" + version);\n                        }\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      } else {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new model version=\" + version);\n                        }\n                      }\n                    } else {\n                      // if the same reader, don't decRef.\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new reader=\" + newReader);\n                      }\n                      newReader.decRef();\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n              } else {\n\n                int id = rand.nextInt(ndocs);\n                Object sync = syncArr[id];\n\n                // set the lastId before we actually change it sometimes to try and\n                // uncover more race conditions between writing and reading\n                boolean before = random.nextBoolean();\n                if (before) {\n                  lastId = id;\n                }\n\n                // We can't concurrently update the same document and retain our invariants of increasing values\n                // since we can't guarantee what order the updates will be executed.\n                synchronized (sync) {\n                  Long val = model.get(id);\n                  long nextVal = Math.abs(val)+1;\n\n                  if (oper < commitPercent + deletePercent) {\n                    // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": term delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                    model.put(id, -nextVal);\n                  } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                    //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": query delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                    model.put(id, -nextVal);\n                  } else {\n                    // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                    Document d = new Document();\n                    d.add(newField(\"id\", Integer.toString(id), StringField.TYPE_STORED));\n                    d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": u id:\" + id + \" val=\" + nextVal);\n                    }\n                    writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                    if (tombstones) {\n                      // remove tombstone after new addition (this should be optional?)\n                      writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    }\n                    model.put(id, nextVal);\n                  }\n                }\n\n                if (!before) {\n                  lastId = id;\n                }\n              }\n            }\n          } catch (Throwable e) {\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n              IndexReader r;\n              synchronized(TestStressNRT.this) {\n                val = committedModel.get(id);\n                r = reader;\n                r.incRef();\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": s id=\" + id + \" val=\" + val + \" r=\" + r.getVersion());\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for its tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val + \" reader=\" + r);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                // we should have found the document, or its tombstone\n                if (results.totalHits != 1) {\n                  System.out.println(\"FAIL: hits id:\" + id + \" val=\" + val);\n                  for(ScoreDoc sd : results.scoreDocs) {\n                    final Document doc = r.document(sd.doc);\n                    System.out.println(\"  docID=\" + sd.doc + \" id:\" + doc.get(\"id\") + \" foundVal=\" + doc.get(field));\n                  }\n                  fail(\"id=\" + id + \" reader=\" + r + \" totalHits=\" + results.totalHits);\n                }\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  fail(\"foundVal=\" + foundVal + \" val=\" + val + \" id=\" + id + \" reader=\" + r);\n                }\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader=\" + reader);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressNRT#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressNRT#test().mjava","sourceNew":"  public void test() throws Exception {\n    // update variables\n    final int commitPercent = random.nextInt(20);\n    final int softCommitPercent = random.nextInt(100); // what percent of the commits are soft\n    final int deletePercent = random.nextInt(50);\n    final int deleteByQueryPercent = random.nextInt(25);\n    final int ndocs = atLeast(50);\n    final int nWriteThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    final int maxConcurrentCommits = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    \n    final boolean tombstones = random.nextBoolean();\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(atLeast(50000));  // number of query operations to perform in total\n\n    final int nReadThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    initModel(ndocs);\n\n    final FieldType storedOnlyType = new FieldType();\n    storedOnlyType.setStored(true);\n\n    if (VERBOSE) {\n      System.out.println(\"\\n\");\n      System.out.println(\"TEST: commitPercent=\" + commitPercent);\n      System.out.println(\"TEST: softCommitPercent=\" + softCommitPercent);\n      System.out.println(\"TEST: deletePercent=\" + deletePercent);\n      System.out.println(\"TEST: deleteByQueryPercent=\" + deleteByQueryPercent);\n      System.out.println(\"TEST: ndocs=\" + ndocs);\n      System.out.println(\"TEST: nWriteThreads=\" + nWriteThreads);\n      System.out.println(\"TEST: nReadThreads=\" + nReadThreads);\n      System.out.println(\"TEST: maxConcurrentCommits=\" + maxConcurrentCommits);\n      System.out.println(\"TEST: tombstones=\" + tombstones);\n      System.out.println(\"TEST: operations=\" + operations);\n      System.out.println(\"\\n\");\n    }\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestStressNRT.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    if (random.nextBoolean()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": call writer.getReader\");\n                      }\n                      newReader = writer.getReader(true);\n                    } else {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": reopen reader=\" + oldReader + \" version=\" + version);\n                      }\n                      newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                    }\n                  } else {\n                    // assertU(commit());\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": commit+reopen reader=\" + oldReader + \" version=\" + version);\n                    }\n                    writer.commit();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": now reopen after commit\");\n                    }\n                    newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n                  // Code below assumes newReader comes w/\n                  // extra ref:\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n\n                  oldReader.decRef();\n\n                  synchronized(TestStressNRT.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    //System.out.println(Thread.currentThread().getName() + \": newVersion=\" + newReader.getVersion());\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new reader=\" + newReader);\n                      }\n                      reader.decRef();\n                      reader = newReader;\n\n                      // Silly: forces fieldInfos to be\n                      // loaded so we don't hit IOE on later\n                      // reader.toString\n                      newReader.toString();\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new model version=\" + version);\n                        }\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      } else {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new model version=\" + version);\n                        }\n                      }\n                    } else {\n                      // if the same reader, don't decRef.\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new reader=\" + newReader);\n                      }\n                      newReader.decRef();\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n              } else {\n\n                int id = rand.nextInt(ndocs);\n                Object sync = syncArr[id];\n\n                // set the lastId before we actually change it sometimes to try and\n                // uncover more race conditions between writing and reading\n                boolean before = random.nextBoolean();\n                if (before) {\n                  lastId = id;\n                }\n\n                // We can't concurrently update the same document and retain our invariants of increasing values\n                // since we can't guarantee what order the updates will be executed.\n                synchronized (sync) {\n                  Long val = model.get(id);\n                  long nextVal = Math.abs(val)+1;\n\n                  if (oper < commitPercent + deletePercent) {\n                    // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": term delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                    model.put(id, -nextVal);\n                  } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                    //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": query delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                    model.put(id, -nextVal);\n                  } else {\n                    // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                    Document d = new Document();\n                    d.add(newField(\"id\", Integer.toString(id), StringField.TYPE_STORED));\n                    d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": u id:\" + id + \" val=\" + nextVal);\n                    }\n                    writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                    if (tombstones) {\n                      // remove tombstone after new addition (this should be optional?)\n                      writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    }\n                    model.put(id, nextVal);\n                  }\n                }\n\n                if (!before) {\n                  lastId = id;\n                }\n              }\n            }\n          } catch (Throwable e) {\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n              IndexReader r;\n              synchronized(TestStressNRT.this) {\n                val = committedModel.get(id);\n                r = reader;\n                r.incRef();\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": s id=\" + id + \" val=\" + val + \" r=\" + r.getVersion());\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for its tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val + \" reader=\" + r);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                // we should have found the document, or its tombstone\n                if (results.totalHits != 1) {\n                  System.out.println(\"FAIL: hits id:\" + id + \" val=\" + val);\n                  for(ScoreDoc sd : results.scoreDocs) {\n                    final Document doc = r.document(sd.doc);\n                    System.out.println(\"  docID=\" + sd.doc + \" id:\" + doc.get(\"id\") + \" foundVal=\" + doc.get(field));\n                  }\n                  fail(\"id=\" + id + \" reader=\" + r + \" totalHits=\" + results.totalHits);\n                }\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  fail(\"foundVal=\" + foundVal + \" val=\" + val + \" id=\" + id + \" reader=\" + r);\n                }\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader=\" + reader);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    // update variables\n    final int commitPercent = random.nextInt(20);\n    final int softCommitPercent = random.nextInt(100); // what percent of the commits are soft\n    final int deletePercent = random.nextInt(50);\n    final int deleteByQueryPercent = random.nextInt(25);\n    final int ndocs = atLeast(50);\n    final int nWriteThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    final int maxConcurrentCommits = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    \n    final boolean tombstones = random.nextBoolean();\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(atLeast(50000));  // number of query operations to perform in total\n\n    final int nReadThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    initModel(ndocs);\n\n    final FieldType storedOnlyType = new FieldType();\n    storedOnlyType.setStored(true);\n\n    if (VERBOSE) {\n      System.out.println(\"\\n\");\n      System.out.println(\"TEST: commitPercent=\" + commitPercent);\n      System.out.println(\"TEST: softCommitPercent=\" + softCommitPercent);\n      System.out.println(\"TEST: deletePercent=\" + deletePercent);\n      System.out.println(\"TEST: deleteByQueryPercent=\" + deleteByQueryPercent);\n      System.out.println(\"TEST: ndocs=\" + ndocs);\n      System.out.println(\"TEST: nWriteThreads=\" + nWriteThreads);\n      System.out.println(\"TEST: nReadThreads=\" + nReadThreads);\n      System.out.println(\"TEST: maxConcurrentCommits=\" + maxConcurrentCommits);\n      System.out.println(\"TEST: tombstones=\" + tombstones);\n      System.out.println(\"TEST: operations=\" + operations);\n      System.out.println(\"\\n\");\n    }\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomOptimizeAssert(false);\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestStressNRT.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    if (random.nextBoolean()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": call writer.getReader\");\n                      }\n                      newReader = writer.getReader(true);\n                    } else {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": reopen reader=\" + oldReader + \" version=\" + version);\n                      }\n                      newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                    }\n                  } else {\n                    // assertU(commit());\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": commit+reopen reader=\" + oldReader + \" version=\" + version);\n                    }\n                    writer.commit();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": now reopen after commit\");\n                    }\n                    newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n                  // Code below assumes newReader comes w/\n                  // extra ref:\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n\n                  oldReader.decRef();\n\n                  synchronized(TestStressNRT.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    //System.out.println(Thread.currentThread().getName() + \": newVersion=\" + newReader.getVersion());\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new reader=\" + newReader);\n                      }\n                      reader.decRef();\n                      reader = newReader;\n\n                      // Silly: forces fieldInfos to be\n                      // loaded so we don't hit IOE on later\n                      // reader.toString\n                      newReader.toString();\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new model version=\" + version);\n                        }\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      } else {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new model version=\" + version);\n                        }\n                      }\n                    } else {\n                      // if the same reader, don't decRef.\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new reader=\" + newReader);\n                      }\n                      newReader.decRef();\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n              } else {\n\n                int id = rand.nextInt(ndocs);\n                Object sync = syncArr[id];\n\n                // set the lastId before we actually change it sometimes to try and\n                // uncover more race conditions between writing and reading\n                boolean before = random.nextBoolean();\n                if (before) {\n                  lastId = id;\n                }\n\n                // We can't concurrently update the same document and retain our invariants of increasing values\n                // since we can't guarantee what order the updates will be executed.\n                synchronized (sync) {\n                  Long val = model.get(id);\n                  long nextVal = Math.abs(val)+1;\n\n                  if (oper < commitPercent + deletePercent) {\n                    // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": term delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                    model.put(id, -nextVal);\n                  } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                    //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": query delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                    model.put(id, -nextVal);\n                  } else {\n                    // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                    Document d = new Document();\n                    d.add(newField(\"id\", Integer.toString(id), StringField.TYPE_STORED));\n                    d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": u id:\" + id + \" val=\" + nextVal);\n                    }\n                    writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                    if (tombstones) {\n                      // remove tombstone after new addition (this should be optional?)\n                      writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    }\n                    model.put(id, nextVal);\n                  }\n                }\n\n                if (!before) {\n                  lastId = id;\n                }\n              }\n            }\n          } catch (Throwable e) {\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n              IndexReader r;\n              synchronized(TestStressNRT.this) {\n                val = committedModel.get(id);\n                r = reader;\n                r.incRef();\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": s id=\" + id + \" val=\" + val + \" r=\" + r.getVersion());\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for its tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val + \" reader=\" + r);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                // we should have found the document, or its tombstone\n                if (results.totalHits != 1) {\n                  System.out.println(\"FAIL: hits id:\" + id + \" val=\" + val);\n                  for(ScoreDoc sd : results.scoreDocs) {\n                    final Document doc = r.document(sd.doc);\n                    System.out.println(\"  docID=\" + sd.doc + \" id:\" + doc.get(\"id\") + \" foundVal=\" + doc.get(field));\n                  }\n                  fail(\"id=\" + id + \" reader=\" + r + \" totalHits=\" + results.totalHits);\n                }\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  fail(\"foundVal=\" + foundVal + \" val=\" + val + \" id=\" + id + \" reader=\" + r);\n                }\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader=\" + reader);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressNRT#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressNRT#test().mjava","sourceNew":"  public void test() throws Exception {\n    // update variables\n    final int commitPercent = random.nextInt(20);\n    final int softCommitPercent = random.nextInt(100); // what percent of the commits are soft\n    final int deletePercent = random.nextInt(50);\n    final int deleteByQueryPercent = random.nextInt(25);\n    final int ndocs = atLeast(50);\n    final int nWriteThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    final int maxConcurrentCommits = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    \n    final boolean tombstones = random.nextBoolean();\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(atLeast(10000));  // number of query operations to perform in total\n\n    final int nReadThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    initModel(ndocs);\n\n    final FieldType storedOnlyType = new FieldType();\n    storedOnlyType.setStored(true);\n\n    if (VERBOSE) {\n      System.out.println(\"\\n\");\n      System.out.println(\"TEST: commitPercent=\" + commitPercent);\n      System.out.println(\"TEST: softCommitPercent=\" + softCommitPercent);\n      System.out.println(\"TEST: deletePercent=\" + deletePercent);\n      System.out.println(\"TEST: deleteByQueryPercent=\" + deleteByQueryPercent);\n      System.out.println(\"TEST: ndocs=\" + ndocs);\n      System.out.println(\"TEST: nWriteThreads=\" + nWriteThreads);\n      System.out.println(\"TEST: nReadThreads=\" + nReadThreads);\n      System.out.println(\"TEST: maxConcurrentCommits=\" + maxConcurrentCommits);\n      System.out.println(\"TEST: tombstones=\" + tombstones);\n      System.out.println(\"TEST: operations=\" + operations);\n      System.out.println(\"\\n\");\n    }\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestStressNRT.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    if (random.nextBoolean()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": call writer.getReader\");\n                      }\n                      newReader = writer.getReader(true);\n                    } else {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": reopen reader=\" + oldReader + \" version=\" + version);\n                      }\n                      newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                    }\n                  } else {\n                    // assertU(commit());\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": commit+reopen reader=\" + oldReader + \" version=\" + version);\n                    }\n                    writer.commit();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": now reopen after commit\");\n                    }\n                    newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n                  // Code below assumes newReader comes w/\n                  // extra ref:\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n\n                  oldReader.decRef();\n\n                  synchronized(TestStressNRT.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    //System.out.println(Thread.currentThread().getName() + \": newVersion=\" + newReader.getVersion());\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new reader=\" + newReader);\n                      }\n                      reader.decRef();\n                      reader = newReader;\n\n                      // Silly: forces fieldInfos to be\n                      // loaded so we don't hit IOE on later\n                      // reader.toString\n                      newReader.toString();\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new model version=\" + version);\n                        }\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      } else {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new model version=\" + version);\n                        }\n                      }\n                    } else {\n                      // if the same reader, don't decRef.\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new reader=\" + newReader);\n                      }\n                      newReader.decRef();\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n              } else {\n\n                int id = rand.nextInt(ndocs);\n                Object sync = syncArr[id];\n\n                // set the lastId before we actually change it sometimes to try and\n                // uncover more race conditions between writing and reading\n                boolean before = random.nextBoolean();\n                if (before) {\n                  lastId = id;\n                }\n\n                // We can't concurrently update the same document and retain our invariants of increasing values\n                // since we can't guarantee what order the updates will be executed.\n                synchronized (sync) {\n                  Long val = model.get(id);\n                  long nextVal = Math.abs(val)+1;\n\n                  if (oper < commitPercent + deletePercent) {\n                    // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": term delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                    model.put(id, -nextVal);\n                  } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                    //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": query delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                    model.put(id, -nextVal);\n                  } else {\n                    // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                    Document d = new Document();\n                    d.add(newField(\"id\", Integer.toString(id), StringField.TYPE_STORED));\n                    d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": u id:\" + id + \" val=\" + nextVal);\n                    }\n                    writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                    if (tombstones) {\n                      // remove tombstone after new addition (this should be optional?)\n                      writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    }\n                    model.put(id, nextVal);\n                  }\n                }\n\n                if (!before) {\n                  lastId = id;\n                }\n              }\n            }\n          } catch (Throwable e) {\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n              IndexReader r;\n              synchronized(TestStressNRT.this) {\n                val = committedModel.get(id);\n                r = reader;\n                r.incRef();\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": s id=\" + id + \" val=\" + val + \" r=\" + r.getVersion());\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for its tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val + \" reader=\" + r);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                // we should have found the document, or its tombstone\n                if (results.totalHits != 1) {\n                  System.out.println(\"FAIL: hits id:\" + id + \" val=\" + val);\n                  for(ScoreDoc sd : results.scoreDocs) {\n                    final Document doc = r.document(sd.doc);\n                    System.out.println(\"  docID=\" + sd.doc + \" id:\" + doc.get(\"id\") + \" foundVal=\" + doc.get(field));\n                  }\n                  fail(\"id=\" + id + \" reader=\" + r + \" totalHits=\" + results.totalHits);\n                }\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  fail(\"foundVal=\" + foundVal + \" val=\" + val + \" id=\" + id + \" reader=\" + r);\n                }\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader=\" + reader);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    // update variables\n    final int commitPercent = random.nextInt(20);\n    final int softCommitPercent = random.nextInt(100); // what percent of the commits are soft\n    final int deletePercent = random.nextInt(50);\n    final int deleteByQueryPercent = random.nextInt(25);\n    final int ndocs = atLeast(50);\n    final int nWriteThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    final int maxConcurrentCommits = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    \n    final boolean tombstones = random.nextBoolean();\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(atLeast(50000));  // number of query operations to perform in total\n\n    final int nReadThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    initModel(ndocs);\n\n    final FieldType storedOnlyType = new FieldType();\n    storedOnlyType.setStored(true);\n\n    if (VERBOSE) {\n      System.out.println(\"\\n\");\n      System.out.println(\"TEST: commitPercent=\" + commitPercent);\n      System.out.println(\"TEST: softCommitPercent=\" + softCommitPercent);\n      System.out.println(\"TEST: deletePercent=\" + deletePercent);\n      System.out.println(\"TEST: deleteByQueryPercent=\" + deleteByQueryPercent);\n      System.out.println(\"TEST: ndocs=\" + ndocs);\n      System.out.println(\"TEST: nWriteThreads=\" + nWriteThreads);\n      System.out.println(\"TEST: nReadThreads=\" + nReadThreads);\n      System.out.println(\"TEST: maxConcurrentCommits=\" + maxConcurrentCommits);\n      System.out.println(\"TEST: tombstones=\" + tombstones);\n      System.out.println(\"TEST: operations=\" + operations);\n      System.out.println(\"\\n\");\n    }\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestStressNRT.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    if (random.nextBoolean()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": call writer.getReader\");\n                      }\n                      newReader = writer.getReader(true);\n                    } else {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": reopen reader=\" + oldReader + \" version=\" + version);\n                      }\n                      newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                    }\n                  } else {\n                    // assertU(commit());\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": commit+reopen reader=\" + oldReader + \" version=\" + version);\n                    }\n                    writer.commit();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": now reopen after commit\");\n                    }\n                    newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n                  // Code below assumes newReader comes w/\n                  // extra ref:\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n\n                  oldReader.decRef();\n\n                  synchronized(TestStressNRT.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    //System.out.println(Thread.currentThread().getName() + \": newVersion=\" + newReader.getVersion());\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new reader=\" + newReader);\n                      }\n                      reader.decRef();\n                      reader = newReader;\n\n                      // Silly: forces fieldInfos to be\n                      // loaded so we don't hit IOE on later\n                      // reader.toString\n                      newReader.toString();\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new model version=\" + version);\n                        }\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      } else {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new model version=\" + version);\n                        }\n                      }\n                    } else {\n                      // if the same reader, don't decRef.\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new reader=\" + newReader);\n                      }\n                      newReader.decRef();\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n              } else {\n\n                int id = rand.nextInt(ndocs);\n                Object sync = syncArr[id];\n\n                // set the lastId before we actually change it sometimes to try and\n                // uncover more race conditions between writing and reading\n                boolean before = random.nextBoolean();\n                if (before) {\n                  lastId = id;\n                }\n\n                // We can't concurrently update the same document and retain our invariants of increasing values\n                // since we can't guarantee what order the updates will be executed.\n                synchronized (sync) {\n                  Long val = model.get(id);\n                  long nextVal = Math.abs(val)+1;\n\n                  if (oper < commitPercent + deletePercent) {\n                    // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": term delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                    model.put(id, -nextVal);\n                  } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                    //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": query delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                    model.put(id, -nextVal);\n                  } else {\n                    // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                    Document d = new Document();\n                    d.add(newField(\"id\", Integer.toString(id), StringField.TYPE_STORED));\n                    d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": u id:\" + id + \" val=\" + nextVal);\n                    }\n                    writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                    if (tombstones) {\n                      // remove tombstone after new addition (this should be optional?)\n                      writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    }\n                    model.put(id, nextVal);\n                  }\n                }\n\n                if (!before) {\n                  lastId = id;\n                }\n              }\n            }\n          } catch (Throwable e) {\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n              IndexReader r;\n              synchronized(TestStressNRT.this) {\n                val = committedModel.get(id);\n                r = reader;\n                r.incRef();\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": s id=\" + id + \" val=\" + val + \" r=\" + r.getVersion());\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for its tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val + \" reader=\" + r);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                // we should have found the document, or its tombstone\n                if (results.totalHits != 1) {\n                  System.out.println(\"FAIL: hits id:\" + id + \" val=\" + val);\n                  for(ScoreDoc sd : results.scoreDocs) {\n                    final Document doc = r.document(sd.doc);\n                    System.out.println(\"  docID=\" + sd.doc + \" id:\" + doc.get(\"id\") + \" foundVal=\" + doc.get(field));\n                  }\n                  fail(\"id=\" + id + \" reader=\" + r + \" totalHits=\" + results.totalHits);\n                }\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  fail(\"foundVal=\" + foundVal + \" val=\" + val + \" id=\" + id + \" reader=\" + r);\n                }\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader=\" + reader);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"539f3288b4d7cc9e05a96e17d2a4b1d40d5a2be1","date":1327856616,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressNRT#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressNRT#test().mjava","sourceNew":"  public void test() throws Exception {\n    // update variables\n    final int commitPercent = random.nextInt(20);\n    final int softCommitPercent = random.nextInt(100); // what percent of the commits are soft\n    final int deletePercent = random.nextInt(50);\n    final int deleteByQueryPercent = random.nextInt(25);\n    final int ndocs = atLeast(50);\n    final int nWriteThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    final int maxConcurrentCommits = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    \n    final boolean tombstones = random.nextBoolean();\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(atLeast(10000));  // number of query operations to perform in total\n\n    final int nReadThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    initModel(ndocs);\n\n    final FieldType storedOnlyType = new FieldType();\n    storedOnlyType.setStored(true);\n\n    if (VERBOSE) {\n      System.out.println(\"\\n\");\n      System.out.println(\"TEST: commitPercent=\" + commitPercent);\n      System.out.println(\"TEST: softCommitPercent=\" + softCommitPercent);\n      System.out.println(\"TEST: deletePercent=\" + deletePercent);\n      System.out.println(\"TEST: deleteByQueryPercent=\" + deleteByQueryPercent);\n      System.out.println(\"TEST: ndocs=\" + ndocs);\n      System.out.println(\"TEST: nWriteThreads=\" + nWriteThreads);\n      System.out.println(\"TEST: nReadThreads=\" + nReadThreads);\n      System.out.println(\"TEST: maxConcurrentCommits=\" + maxConcurrentCommits);\n      System.out.println(\"TEST: tombstones=\" + tombstones);\n      System.out.println(\"TEST: operations=\" + operations);\n      System.out.println(\"\\n\");\n    }\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  DirectoryReader oldReader;\n\n                  synchronized(TestStressNRT.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  DirectoryReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    if (random.nextBoolean()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": call writer.getReader\");\n                      }\n                      newReader = writer.getReader(true);\n                    } else {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": reopen reader=\" + oldReader + \" version=\" + version);\n                      }\n                      newReader = DirectoryReader.openIfChanged(oldReader, writer.w, true);\n                    }\n                  } else {\n                    // assertU(commit());\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": commit+reopen reader=\" + oldReader + \" version=\" + version);\n                    }\n                    writer.commit();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": now reopen after commit\");\n                    }\n                    newReader = DirectoryReader.openIfChanged(oldReader);\n                  }\n\n                  // Code below assumes newReader comes w/\n                  // extra ref:\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n\n                  oldReader.decRef();\n\n                  synchronized(TestStressNRT.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    //System.out.println(Thread.currentThread().getName() + \": newVersion=\" + newReader.getVersion());\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new reader=\" + newReader);\n                      }\n                      reader.decRef();\n                      reader = newReader;\n\n                      // Silly: forces fieldInfos to be\n                      // loaded so we don't hit IOE on later\n                      // reader.toString\n                      newReader.toString();\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new model version=\" + version);\n                        }\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      } else {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new model version=\" + version);\n                        }\n                      }\n                    } else {\n                      // if the same reader, don't decRef.\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new reader=\" + newReader);\n                      }\n                      newReader.decRef();\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n              } else {\n\n                int id = rand.nextInt(ndocs);\n                Object sync = syncArr[id];\n\n                // set the lastId before we actually change it sometimes to try and\n                // uncover more race conditions between writing and reading\n                boolean before = random.nextBoolean();\n                if (before) {\n                  lastId = id;\n                }\n\n                // We can't concurrently update the same document and retain our invariants of increasing values\n                // since we can't guarantee what order the updates will be executed.\n                synchronized (sync) {\n                  Long val = model.get(id);\n                  long nextVal = Math.abs(val)+1;\n\n                  if (oper < commitPercent + deletePercent) {\n                    // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": term delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                    model.put(id, -nextVal);\n                  } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                    //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": query delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                    model.put(id, -nextVal);\n                  } else {\n                    // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                    Document d = new Document();\n                    d.add(newField(\"id\", Integer.toString(id), StringField.TYPE_STORED));\n                    d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": u id:\" + id + \" val=\" + nextVal);\n                    }\n                    writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                    if (tombstones) {\n                      // remove tombstone after new addition (this should be optional?)\n                      writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    }\n                    model.put(id, nextVal);\n                  }\n                }\n\n                if (!before) {\n                  lastId = id;\n                }\n              }\n            }\n          } catch (Throwable e) {\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n              DirectoryReader r;\n              synchronized(TestStressNRT.this) {\n                val = committedModel.get(id);\n                r = reader;\n                r.incRef();\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": s id=\" + id + \" val=\" + val + \" r=\" + r.getVersion());\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for its tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val + \" reader=\" + r);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                // we should have found the document, or its tombstone\n                if (results.totalHits != 1) {\n                  System.out.println(\"FAIL: hits id:\" + id + \" val=\" + val);\n                  for(ScoreDoc sd : results.scoreDocs) {\n                    final Document doc = r.document(sd.doc);\n                    System.out.println(\"  docID=\" + sd.doc + \" id:\" + doc.get(\"id\") + \" foundVal=\" + doc.get(field));\n                  }\n                  fail(\"id=\" + id + \" reader=\" + r + \" totalHits=\" + results.totalHits);\n                }\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  fail(\"foundVal=\" + foundVal + \" val=\" + val + \" id=\" + id + \" reader=\" + r);\n                }\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader=\" + reader);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    // update variables\n    final int commitPercent = random.nextInt(20);\n    final int softCommitPercent = random.nextInt(100); // what percent of the commits are soft\n    final int deletePercent = random.nextInt(50);\n    final int deleteByQueryPercent = random.nextInt(25);\n    final int ndocs = atLeast(50);\n    final int nWriteThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    final int maxConcurrentCommits = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    \n    final boolean tombstones = random.nextBoolean();\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(atLeast(10000));  // number of query operations to perform in total\n\n    final int nReadThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    initModel(ndocs);\n\n    final FieldType storedOnlyType = new FieldType();\n    storedOnlyType.setStored(true);\n\n    if (VERBOSE) {\n      System.out.println(\"\\n\");\n      System.out.println(\"TEST: commitPercent=\" + commitPercent);\n      System.out.println(\"TEST: softCommitPercent=\" + softCommitPercent);\n      System.out.println(\"TEST: deletePercent=\" + deletePercent);\n      System.out.println(\"TEST: deleteByQueryPercent=\" + deleteByQueryPercent);\n      System.out.println(\"TEST: ndocs=\" + ndocs);\n      System.out.println(\"TEST: nWriteThreads=\" + nWriteThreads);\n      System.out.println(\"TEST: nReadThreads=\" + nReadThreads);\n      System.out.println(\"TEST: maxConcurrentCommits=\" + maxConcurrentCommits);\n      System.out.println(\"TEST: tombstones=\" + tombstones);\n      System.out.println(\"TEST: operations=\" + operations);\n      System.out.println(\"\\n\");\n    }\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestStressNRT.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    if (random.nextBoolean()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": call writer.getReader\");\n                      }\n                      newReader = writer.getReader(true);\n                    } else {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": reopen reader=\" + oldReader + \" version=\" + version);\n                      }\n                      newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                    }\n                  } else {\n                    // assertU(commit());\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": commit+reopen reader=\" + oldReader + \" version=\" + version);\n                    }\n                    writer.commit();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": now reopen after commit\");\n                    }\n                    newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n                  // Code below assumes newReader comes w/\n                  // extra ref:\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n\n                  oldReader.decRef();\n\n                  synchronized(TestStressNRT.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    //System.out.println(Thread.currentThread().getName() + \": newVersion=\" + newReader.getVersion());\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new reader=\" + newReader);\n                      }\n                      reader.decRef();\n                      reader = newReader;\n\n                      // Silly: forces fieldInfos to be\n                      // loaded so we don't hit IOE on later\n                      // reader.toString\n                      newReader.toString();\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new model version=\" + version);\n                        }\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      } else {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new model version=\" + version);\n                        }\n                      }\n                    } else {\n                      // if the same reader, don't decRef.\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new reader=\" + newReader);\n                      }\n                      newReader.decRef();\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n              } else {\n\n                int id = rand.nextInt(ndocs);\n                Object sync = syncArr[id];\n\n                // set the lastId before we actually change it sometimes to try and\n                // uncover more race conditions between writing and reading\n                boolean before = random.nextBoolean();\n                if (before) {\n                  lastId = id;\n                }\n\n                // We can't concurrently update the same document and retain our invariants of increasing values\n                // since we can't guarantee what order the updates will be executed.\n                synchronized (sync) {\n                  Long val = model.get(id);\n                  long nextVal = Math.abs(val)+1;\n\n                  if (oper < commitPercent + deletePercent) {\n                    // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": term delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                    model.put(id, -nextVal);\n                  } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                    //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": query delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                    model.put(id, -nextVal);\n                  } else {\n                    // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                    Document d = new Document();\n                    d.add(newField(\"id\", Integer.toString(id), StringField.TYPE_STORED));\n                    d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": u id:\" + id + \" val=\" + nextVal);\n                    }\n                    writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                    if (tombstones) {\n                      // remove tombstone after new addition (this should be optional?)\n                      writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    }\n                    model.put(id, nextVal);\n                  }\n                }\n\n                if (!before) {\n                  lastId = id;\n                }\n              }\n            }\n          } catch (Throwable e) {\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n              IndexReader r;\n              synchronized(TestStressNRT.this) {\n                val = committedModel.get(id);\n                r = reader;\n                r.incRef();\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": s id=\" + id + \" val=\" + val + \" r=\" + r.getVersion());\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for its tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val + \" reader=\" + r);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                // we should have found the document, or its tombstone\n                if (results.totalHits != 1) {\n                  System.out.println(\"FAIL: hits id:\" + id + \" val=\" + val);\n                  for(ScoreDoc sd : results.scoreDocs) {\n                    final Document doc = r.document(sd.doc);\n                    System.out.println(\"  docID=\" + sd.doc + \" id:\" + doc.get(\"id\") + \" foundVal=\" + doc.get(field));\n                  }\n                  fail(\"id=\" + id + \" reader=\" + r + \" totalHits=\" + results.totalHits);\n                }\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  fail(\"foundVal=\" + foundVal + \" val=\" + val + \" id=\" + id + \" reader=\" + r);\n                }\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader=\" + reader);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressNRT#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressNRT#test().mjava","sourceNew":"  public void test() throws Exception {\n    // update variables\n    final int commitPercent = random.nextInt(20);\n    final int softCommitPercent = random.nextInt(100); // what percent of the commits are soft\n    final int deletePercent = random.nextInt(50);\n    final int deleteByQueryPercent = random.nextInt(25);\n    final int ndocs = atLeast(50);\n    final int nWriteThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    final int maxConcurrentCommits = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    \n    final boolean tombstones = random.nextBoolean();\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(atLeast(10000));  // number of query operations to perform in total\n\n    final int nReadThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    initModel(ndocs);\n\n    final FieldType storedOnlyType = new FieldType();\n    storedOnlyType.setStored(true);\n\n    if (VERBOSE) {\n      System.out.println(\"\\n\");\n      System.out.println(\"TEST: commitPercent=\" + commitPercent);\n      System.out.println(\"TEST: softCommitPercent=\" + softCommitPercent);\n      System.out.println(\"TEST: deletePercent=\" + deletePercent);\n      System.out.println(\"TEST: deleteByQueryPercent=\" + deleteByQueryPercent);\n      System.out.println(\"TEST: ndocs=\" + ndocs);\n      System.out.println(\"TEST: nWriteThreads=\" + nWriteThreads);\n      System.out.println(\"TEST: nReadThreads=\" + nReadThreads);\n      System.out.println(\"TEST: maxConcurrentCommits=\" + maxConcurrentCommits);\n      System.out.println(\"TEST: tombstones=\" + tombstones);\n      System.out.println(\"TEST: operations=\" + operations);\n      System.out.println(\"\\n\");\n    }\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  DirectoryReader oldReader;\n\n                  synchronized(TestStressNRT.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  DirectoryReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    if (random.nextBoolean()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": call writer.getReader\");\n                      }\n                      newReader = writer.getReader(true);\n                    } else {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": reopen reader=\" + oldReader + \" version=\" + version);\n                      }\n                      newReader = DirectoryReader.openIfChanged(oldReader, writer.w, true);\n                    }\n                  } else {\n                    // assertU(commit());\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": commit+reopen reader=\" + oldReader + \" version=\" + version);\n                    }\n                    writer.commit();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": now reopen after commit\");\n                    }\n                    newReader = DirectoryReader.openIfChanged(oldReader);\n                  }\n\n                  // Code below assumes newReader comes w/\n                  // extra ref:\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n\n                  oldReader.decRef();\n\n                  synchronized(TestStressNRT.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    //System.out.println(Thread.currentThread().getName() + \": newVersion=\" + newReader.getVersion());\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new reader=\" + newReader);\n                      }\n                      reader.decRef();\n                      reader = newReader;\n\n                      // Silly: forces fieldInfos to be\n                      // loaded so we don't hit IOE on later\n                      // reader.toString\n                      newReader.toString();\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new model version=\" + version);\n                        }\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      } else {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new model version=\" + version);\n                        }\n                      }\n                    } else {\n                      // if the same reader, don't decRef.\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new reader=\" + newReader);\n                      }\n                      newReader.decRef();\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n              } else {\n\n                int id = rand.nextInt(ndocs);\n                Object sync = syncArr[id];\n\n                // set the lastId before we actually change it sometimes to try and\n                // uncover more race conditions between writing and reading\n                boolean before = random.nextBoolean();\n                if (before) {\n                  lastId = id;\n                }\n\n                // We can't concurrently update the same document and retain our invariants of increasing values\n                // since we can't guarantee what order the updates will be executed.\n                synchronized (sync) {\n                  Long val = model.get(id);\n                  long nextVal = Math.abs(val)+1;\n\n                  if (oper < commitPercent + deletePercent) {\n                    // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": term delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                    model.put(id, -nextVal);\n                  } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                    //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": query delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                    model.put(id, -nextVal);\n                  } else {\n                    // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                    Document d = new Document();\n                    d.add(newField(\"id\", Integer.toString(id), StringField.TYPE_STORED));\n                    d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": u id:\" + id + \" val=\" + nextVal);\n                    }\n                    writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                    if (tombstones) {\n                      // remove tombstone after new addition (this should be optional?)\n                      writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    }\n                    model.put(id, nextVal);\n                  }\n                }\n\n                if (!before) {\n                  lastId = id;\n                }\n              }\n            }\n          } catch (Throwable e) {\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n              DirectoryReader r;\n              synchronized(TestStressNRT.this) {\n                val = committedModel.get(id);\n                r = reader;\n                r.incRef();\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": s id=\" + id + \" val=\" + val + \" r=\" + r.getVersion());\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for its tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val + \" reader=\" + r);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                // we should have found the document, or its tombstone\n                if (results.totalHits != 1) {\n                  System.out.println(\"FAIL: hits id:\" + id + \" val=\" + val);\n                  for(ScoreDoc sd : results.scoreDocs) {\n                    final Document doc = r.document(sd.doc);\n                    System.out.println(\"  docID=\" + sd.doc + \" id:\" + doc.get(\"id\") + \" foundVal=\" + doc.get(field));\n                  }\n                  fail(\"id=\" + id + \" reader=\" + r + \" totalHits=\" + results.totalHits);\n                }\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  fail(\"foundVal=\" + foundVal + \" val=\" + val + \" id=\" + id + \" reader=\" + r);\n                }\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader=\" + reader);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    // update variables\n    final int commitPercent = random.nextInt(20);\n    final int softCommitPercent = random.nextInt(100); // what percent of the commits are soft\n    final int deletePercent = random.nextInt(50);\n    final int deleteByQueryPercent = random.nextInt(25);\n    final int ndocs = atLeast(50);\n    final int nWriteThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    final int maxConcurrentCommits = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    \n    final boolean tombstones = random.nextBoolean();\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(atLeast(10000));  // number of query operations to perform in total\n\n    final int nReadThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    initModel(ndocs);\n\n    final FieldType storedOnlyType = new FieldType();\n    storedOnlyType.setStored(true);\n\n    if (VERBOSE) {\n      System.out.println(\"\\n\");\n      System.out.println(\"TEST: commitPercent=\" + commitPercent);\n      System.out.println(\"TEST: softCommitPercent=\" + softCommitPercent);\n      System.out.println(\"TEST: deletePercent=\" + deletePercent);\n      System.out.println(\"TEST: deleteByQueryPercent=\" + deleteByQueryPercent);\n      System.out.println(\"TEST: ndocs=\" + ndocs);\n      System.out.println(\"TEST: nWriteThreads=\" + nWriteThreads);\n      System.out.println(\"TEST: nReadThreads=\" + nReadThreads);\n      System.out.println(\"TEST: maxConcurrentCommits=\" + maxConcurrentCommits);\n      System.out.println(\"TEST: tombstones=\" + tombstones);\n      System.out.println(\"TEST: operations=\" + operations);\n      System.out.println(\"\\n\");\n    }\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  IndexReader oldReader;\n\n                  synchronized(TestStressNRT.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  IndexReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    if (random.nextBoolean()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": call writer.getReader\");\n                      }\n                      newReader = writer.getReader(true);\n                    } else {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": reopen reader=\" + oldReader + \" version=\" + version);\n                      }\n                      newReader = IndexReader.openIfChanged(oldReader, writer.w, true);\n                    }\n                  } else {\n                    // assertU(commit());\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": commit+reopen reader=\" + oldReader + \" version=\" + version);\n                    }\n                    writer.commit();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": now reopen after commit\");\n                    }\n                    newReader = IndexReader.openIfChanged(oldReader);\n                  }\n\n                  // Code below assumes newReader comes w/\n                  // extra ref:\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n\n                  oldReader.decRef();\n\n                  synchronized(TestStressNRT.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    //System.out.println(Thread.currentThread().getName() + \": newVersion=\" + newReader.getVersion());\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new reader=\" + newReader);\n                      }\n                      reader.decRef();\n                      reader = newReader;\n\n                      // Silly: forces fieldInfos to be\n                      // loaded so we don't hit IOE on later\n                      // reader.toString\n                      newReader.toString();\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new model version=\" + version);\n                        }\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      } else {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new model version=\" + version);\n                        }\n                      }\n                    } else {\n                      // if the same reader, don't decRef.\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new reader=\" + newReader);\n                      }\n                      newReader.decRef();\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n              } else {\n\n                int id = rand.nextInt(ndocs);\n                Object sync = syncArr[id];\n\n                // set the lastId before we actually change it sometimes to try and\n                // uncover more race conditions between writing and reading\n                boolean before = random.nextBoolean();\n                if (before) {\n                  lastId = id;\n                }\n\n                // We can't concurrently update the same document and retain our invariants of increasing values\n                // since we can't guarantee what order the updates will be executed.\n                synchronized (sync) {\n                  Long val = model.get(id);\n                  long nextVal = Math.abs(val)+1;\n\n                  if (oper < commitPercent + deletePercent) {\n                    // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": term delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                    model.put(id, -nextVal);\n                  } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                    //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": query delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                    model.put(id, -nextVal);\n                  } else {\n                    // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                    Document d = new Document();\n                    d.add(newField(\"id\", Integer.toString(id), StringField.TYPE_STORED));\n                    d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": u id:\" + id + \" val=\" + nextVal);\n                    }\n                    writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                    if (tombstones) {\n                      // remove tombstone after new addition (this should be optional?)\n                      writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    }\n                    model.put(id, nextVal);\n                  }\n                }\n\n                if (!before) {\n                  lastId = id;\n                }\n              }\n            }\n          } catch (Throwable e) {\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n              IndexReader r;\n              synchronized(TestStressNRT.this) {\n                val = committedModel.get(id);\n                r = reader;\n                r.incRef();\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": s id=\" + id + \" val=\" + val + \" r=\" + r.getVersion());\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for its tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val + \" reader=\" + r);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                // we should have found the document, or its tombstone\n                if (results.totalHits != 1) {\n                  System.out.println(\"FAIL: hits id:\" + id + \" val=\" + val);\n                  for(ScoreDoc sd : results.scoreDocs) {\n                    final Document doc = r.document(sd.doc);\n                    System.out.println(\"  docID=\" + sd.doc + \" id:\" + doc.get(\"id\") + \" foundVal=\" + doc.get(field));\n                  }\n                  fail(\"id=\" + id + \" reader=\" + r + \" totalHits=\" + results.totalHits);\n                }\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  fail(\"foundVal=\" + foundVal + \" val=\" + val + \" id=\" + id + \" reader=\" + r);\n                }\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader=\" + reader);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressNRT#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressNRT#test().mjava","sourceNew":"  public void test() throws Exception {\n    // update variables\n    final int commitPercent = random.nextInt(20);\n    final int softCommitPercent = random.nextInt(100); // what percent of the commits are soft\n    final int deletePercent = random.nextInt(50);\n    final int deleteByQueryPercent = random.nextInt(25);\n    final int ndocs = atLeast(50);\n    final int nWriteThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    final int maxConcurrentCommits = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    \n    final boolean tombstones = random.nextBoolean();\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(atLeast(10000));  // number of query operations to perform in total\n\n    final int nReadThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    initModel(ndocs);\n\n    final FieldType storedOnlyType = new FieldType();\n    storedOnlyType.setStored(true);\n\n    if (VERBOSE) {\n      System.out.println(\"\\n\");\n      System.out.println(\"TEST: commitPercent=\" + commitPercent);\n      System.out.println(\"TEST: softCommitPercent=\" + softCommitPercent);\n      System.out.println(\"TEST: deletePercent=\" + deletePercent);\n      System.out.println(\"TEST: deleteByQueryPercent=\" + deleteByQueryPercent);\n      System.out.println(\"TEST: ndocs=\" + ndocs);\n      System.out.println(\"TEST: nWriteThreads=\" + nWriteThreads);\n      System.out.println(\"TEST: nReadThreads=\" + nReadThreads);\n      System.out.println(\"TEST: maxConcurrentCommits=\" + maxConcurrentCommits);\n      System.out.println(\"TEST: tombstones=\" + tombstones);\n      System.out.println(\"TEST: operations=\" + operations);\n      System.out.println(\"\\n\");\n    }\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  DirectoryReader oldReader;\n\n                  synchronized(TestStressNRT.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  DirectoryReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    if (random.nextBoolean()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": call writer.getReader\");\n                      }\n                      newReader = writer.getReader(true);\n                    } else {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": reopen reader=\" + oldReader + \" version=\" + version);\n                      }\n                      newReader = DirectoryReader.openIfChanged(oldReader, writer.w, true);\n                    }\n                  } else {\n                    // assertU(commit());\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": commit+reopen reader=\" + oldReader + \" version=\" + version);\n                    }\n                    writer.commit();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": now reopen after commit\");\n                    }\n                    newReader = DirectoryReader.openIfChanged(oldReader);\n                  }\n\n                  // Code below assumes newReader comes w/\n                  // extra ref:\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n\n                  oldReader.decRef();\n\n                  synchronized(TestStressNRT.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    //System.out.println(Thread.currentThread().getName() + \": newVersion=\" + newReader.getVersion());\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new reader=\" + newReader);\n                      }\n                      reader.decRef();\n                      reader = newReader;\n\n                      // Silly: forces fieldInfos to be\n                      // loaded so we don't hit IOE on later\n                      // reader.toString\n                      newReader.toString();\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new model version=\" + version);\n                        }\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      } else {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new model version=\" + version);\n                        }\n                      }\n                    } else {\n                      // if the same reader, don't decRef.\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new reader=\" + newReader);\n                      }\n                      newReader.decRef();\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n              } else {\n\n                int id = rand.nextInt(ndocs);\n                Object sync = syncArr[id];\n\n                // set the lastId before we actually change it sometimes to try and\n                // uncover more race conditions between writing and reading\n                boolean before = random.nextBoolean();\n                if (before) {\n                  lastId = id;\n                }\n\n                // We can't concurrently update the same document and retain our invariants of increasing values\n                // since we can't guarantee what order the updates will be executed.\n                synchronized (sync) {\n                  Long val = model.get(id);\n                  long nextVal = Math.abs(val)+1;\n\n                  if (oper < commitPercent + deletePercent) {\n                    // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": term delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                    model.put(id, -nextVal);\n                  } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                    //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": query delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                    model.put(id, -nextVal);\n                  } else {\n                    // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                    Document d = new Document();\n                    d.add(newField(\"id\", Integer.toString(id), StringField.TYPE_STORED));\n                    d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": u id:\" + id + \" val=\" + nextVal);\n                    }\n                    writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                    if (tombstones) {\n                      // remove tombstone after new addition (this should be optional?)\n                      writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    }\n                    model.put(id, nextVal);\n                  }\n                }\n\n                if (!before) {\n                  lastId = id;\n                }\n              }\n            }\n          } catch (Throwable e) {\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n              DirectoryReader r;\n              synchronized(TestStressNRT.this) {\n                val = committedModel.get(id);\n                r = reader;\n                r.incRef();\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": s id=\" + id + \" val=\" + val + \" r=\" + r.getVersion());\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for its tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val + \" reader=\" + r);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                // we should have found the document, or its tombstone\n                if (results.totalHits != 1) {\n                  System.out.println(\"FAIL: hits id:\" + id + \" val=\" + val);\n                  for(ScoreDoc sd : results.scoreDocs) {\n                    final Document doc = r.document(sd.doc);\n                    System.out.println(\"  docID=\" + sd.doc + \" id:\" + doc.get(\"id\") + \" foundVal=\" + doc.get(field));\n                  }\n                  fail(\"id=\" + id + \" reader=\" + r + \" totalHits=\" + results.totalHits);\n                }\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  fail(\"foundVal=\" + foundVal + \" val=\" + val + \" id=\" + id + \" reader=\" + r);\n                }\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader=\" + reader);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    // update variables\n    final int commitPercent = random.nextInt(20);\n    final int softCommitPercent = random.nextInt(100); // what percent of the commits are soft\n    final int deletePercent = random.nextInt(50);\n    final int deleteByQueryPercent = random.nextInt(25);\n    final int ndocs = atLeast(50);\n    final int nWriteThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    final int maxConcurrentCommits = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);   // number of committers at a time... needed if we want to avoid commit errors due to exceeding the max\n    \n    final boolean tombstones = random.nextBoolean();\n\n    // query variables\n    final AtomicLong operations = new AtomicLong(atLeast(10000));  // number of query operations to perform in total\n\n    final int nReadThreads = _TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 10 : 5);\n    initModel(ndocs);\n\n    final FieldType storedOnlyType = new FieldType();\n    storedOnlyType.setStored(true);\n\n    if (VERBOSE) {\n      System.out.println(\"\\n\");\n      System.out.println(\"TEST: commitPercent=\" + commitPercent);\n      System.out.println(\"TEST: softCommitPercent=\" + softCommitPercent);\n      System.out.println(\"TEST: deletePercent=\" + deletePercent);\n      System.out.println(\"TEST: deleteByQueryPercent=\" + deleteByQueryPercent);\n      System.out.println(\"TEST: ndocs=\" + ndocs);\n      System.out.println(\"TEST: nWriteThreads=\" + nWriteThreads);\n      System.out.println(\"TEST: nReadThreads=\" + nReadThreads);\n      System.out.println(\"TEST: maxConcurrentCommits=\" + maxConcurrentCommits);\n      System.out.println(\"TEST: tombstones=\" + tombstones);\n      System.out.println(\"TEST: operations=\" + operations);\n      System.out.println(\"\\n\");\n    }\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n    Directory dir = newDirectory();\n\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.setDoRandomForceMergeAssert(false);\n    writer.commit();\n    reader = IndexReader.open(dir);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,Long> newCommittedModel;\n                  long version;\n                  DirectoryReader oldReader;\n\n                  synchronized(TestStressNRT.this) {\n                    newCommittedModel = new HashMap<Integer,Long>(model);  // take a snapshot\n                    version = snapshotCount++;\n                    oldReader = reader;\n                    oldReader.incRef();  // increment the reference since we will use this for reopening\n                  }\n\n                  DirectoryReader newReader;\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    // assertU(h.commit(\"softCommit\",\"true\"));\n                    if (random.nextBoolean()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": call writer.getReader\");\n                      }\n                      newReader = writer.getReader(true);\n                    } else {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": reopen reader=\" + oldReader + \" version=\" + version);\n                      }\n                      newReader = DirectoryReader.openIfChanged(oldReader, writer.w, true);\n                    }\n                  } else {\n                    // assertU(commit());\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": commit+reopen reader=\" + oldReader + \" version=\" + version);\n                    }\n                    writer.commit();\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": now reopen after commit\");\n                    }\n                    newReader = DirectoryReader.openIfChanged(oldReader);\n                  }\n\n                  // Code below assumes newReader comes w/\n                  // extra ref:\n                  if (newReader == null) {\n                    oldReader.incRef();\n                    newReader = oldReader;\n                  }\n\n                  oldReader.decRef();\n\n                  synchronized(TestStressNRT.this) {\n                    // install the new reader if it's newest (and check the current version since another reader may have already been installed)\n                    //System.out.println(Thread.currentThread().getName() + \": newVersion=\" + newReader.getVersion());\n                    assert newReader.getRefCount() > 0;\n                    assert reader.getRefCount() > 0;\n                    if (newReader.getVersion() > reader.getVersion()) {\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new reader=\" + newReader);\n                      }\n                      reader.decRef();\n                      reader = newReader;\n\n                      // Silly: forces fieldInfos to be\n                      // loaded so we don't hit IOE on later\n                      // reader.toString\n                      newReader.toString();\n\n                      // install this snapshot only if it's newer than the current one\n                      if (version >= committedModelClock) {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": install new model version=\" + version);\n                        }\n                        committedModel = newCommittedModel;\n                        committedModelClock = version;\n                      } else {\n                        if (VERBOSE) {\n                          System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new model version=\" + version);\n                        }\n                      }\n                    } else {\n                      // if the same reader, don't decRef.\n                      if (VERBOSE) {\n                        System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": skip install new reader=\" + newReader);\n                      }\n                      newReader.decRef();\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n              } else {\n\n                int id = rand.nextInt(ndocs);\n                Object sync = syncArr[id];\n\n                // set the lastId before we actually change it sometimes to try and\n                // uncover more race conditions between writing and reading\n                boolean before = random.nextBoolean();\n                if (before) {\n                  lastId = id;\n                }\n\n                // We can't concurrently update the same document and retain our invariants of increasing values\n                // since we can't guarantee what order the updates will be executed.\n                synchronized (sync) {\n                  Long val = model.get(id);\n                  long nextVal = Math.abs(val)+1;\n\n                  if (oper < commitPercent + deletePercent) {\n                    // assertU(\"<delete><id>\" + id + \"</id></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": term delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new Term(\"id\",Integer.toString(id)));\n                    model.put(id, -nextVal);\n                  } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n                    //assertU(\"<delete><query>id:\" + id + \"</query></delete>\");\n\n                    // add tombstone first\n                    if (tombstones) {\n                      Document d = new Document();\n                      d.add(newField(\"id\", \"-\"+Integer.toString(id), StringField.TYPE_STORED));\n                      d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                      writer.updateDocument(new Term(\"id\", \"-\"+Integer.toString(id)), d);\n                    }\n\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": query delDocs id:\" + id + \" nextVal=\" + nextVal);\n                    }\n                    writer.deleteDocuments(new TermQuery(new Term(\"id\", Integer.toString(id))));\n                    model.put(id, -nextVal);\n                  } else {\n                    // assertU(adoc(\"id\",Integer.toString(id), field, Long.toString(nextVal)));\n                    Document d = new Document();\n                    d.add(newField(\"id\", Integer.toString(id), StringField.TYPE_STORED));\n                    d.add(newField(field, Long.toString(nextVal), storedOnlyType));\n                    if (VERBOSE) {\n                      System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": u id:\" + id + \" val=\" + nextVal);\n                    }\n                    writer.updateDocument(new Term(\"id\", Integer.toString(id)), d);\n                    if (tombstones) {\n                      // remove tombstone after new addition (this should be optional?)\n                      writer.deleteDocuments(new Term(\"id\",\"-\"+Integer.toString(id)));\n                    }\n                    model.put(id, nextVal);\n                  }\n                }\n\n                if (!before) {\n                  lastId = id;\n                }\n              }\n            }\n          } catch (Throwable e) {\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random.nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              // bias toward a recently changed doc\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              // when indexing, we update the index, then the model\n              // so when querying, we should first check the model, and then the index\n\n              long val;\n              DirectoryReader r;\n              synchronized(TestStressNRT.this) {\n                val = committedModel.get(id);\n                r = reader;\n                r.incRef();\n              }\n\n              if (VERBOSE) {\n                System.out.println(\"TEST: \" + Thread.currentThread().getName() + \": s id=\" + id + \" val=\" + val + \" r=\" + r.getVersion());\n              }\n\n              //  sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              IndexSearcher searcher = new IndexSearcher(r);\n              Query q = new TermQuery(new Term(\"id\",Integer.toString(id)));\n              TopDocs results = searcher.search(q, 10);\n\n              if (results.totalHits == 0 && tombstones) {\n                // if we couldn't find the doc, look for its tombstone\n                q = new TermQuery(new Term(\"id\",\"-\"+Integer.toString(id)));\n                results = searcher.search(q, 1);\n                if (results.totalHits == 0) {\n                  if (val == -1L) {\n                    // expected... no doc was added yet\n                    r.decRef();\n                    continue;\n                  }\n                  fail(\"No documents or tombstones found for id \" + id + \", expected at least \" + val + \" reader=\" + r);\n                }\n              }\n\n              if (results.totalHits == 0 && !tombstones) {\n                // nothing to do - we can't tell anything from a deleted doc without tombstones\n              } else {\n                // we should have found the document, or its tombstone\n                if (results.totalHits != 1) {\n                  System.out.println(\"FAIL: hits id:\" + id + \" val=\" + val);\n                  for(ScoreDoc sd : results.scoreDocs) {\n                    final Document doc = r.document(sd.doc);\n                    System.out.println(\"  docID=\" + sd.doc + \" id:\" + doc.get(\"id\") + \" foundVal=\" + doc.get(field));\n                  }\n                  fail(\"id=\" + id + \" reader=\" + r + \" totalHits=\" + results.totalHits);\n                }\n                Document doc = searcher.doc(results.scoreDocs[0].doc);\n                long foundVal = Long.parseLong(doc.get(field));\n                if (foundVal < Math.abs(val)) {\n                  fail(\"foundVal=\" + foundVal + \" val=\" + val + \" id=\" + id + \" reader=\" + r);\n                }\n              }\n\n              r.decRef();\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            System.out.println(Thread.currentThread().getName() + \": FAILED: unexpected exception\");\n            e.printStackTrace(System.out);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n    writer.close();\n    if (VERBOSE) {\n      System.out.println(\"TEST: close reader=\" + reader);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"539f3288b4d7cc9e05a96e17d2a4b1d40d5a2be1":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"06584e6e98d592b34e1329b384182f368d2025e8":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8be580b58bcc650d428f3f22de81cadcf51d650a":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["8be580b58bcc650d428f3f22de81cadcf51d650a","539f3288b4d7cc9e05a96e17d2a4b1d40d5a2be1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["06584e6e98d592b34e1329b384182f368d2025e8"],"539f3288b4d7cc9e05a96e17d2a4b1d40d5a2be1":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["539f3288b4d7cc9e05a96e17d2a4b1d40d5a2be1","5cab9a86bd67202d20b6adc463008c8e982b070a"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}