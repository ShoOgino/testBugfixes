{"path":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#parse(Reader,AttributeSource).mjava","commits":[{"id":"232d48b2fd10ac5189a0ac4480ace7421be9de93","date":1334848212,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#parse(Reader,AttributeSource).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ParseResult parse(Reader reader, AttributeSource parent) throws IOException {\n    ParseResult res = new ParseResult();\n    StringBuilder sb = new StringBuilder();\n    char[] buf = new char[128];\n    int cnt;\n    while ((cnt = reader.read(buf)) > 0) {\n      sb.append(buf, 0, cnt);\n    }\n    String val = sb.toString();\n    // empty string - accept even without version number\n    if (val.length() == 0) {\n      return res;\n    }\n    // first consume the version\n    int idx = val.indexOf(' ');\n    if (idx == -1) {\n      throw new IOException(\"Missing VERSION token\");\n    }\n    String version = val.substring(0, idx);\n    if (!VERSION.equals(version)) {\n      throw new IOException(\"Unknown VERSION \" + version);\n    }\n    val = val.substring(idx + 1);\n    // then consume the optional stored part\n    int tsStart = 0;\n    boolean hasStored = false;\n    StringBuilder storedBuf = new StringBuilder();\n    if (val.charAt(0) == '=') {\n      hasStored = true;\n      if (val.length() > 1) {\n        for (int i = 1; i < val.length(); i++) {\n          char c = val.charAt(i);\n          if (c == '\\\\') {\n            if (i < val.length() - 1) {\n              c = val.charAt(++i);\n              if (c == '=') { // we recognize only \\= escape in the stored part\n                storedBuf.append('=');\n              } else {\n                storedBuf.append('\\\\');\n                storedBuf.append(c);\n                continue;\n              }\n            } else {\n              storedBuf.append(c);\n              continue;\n            }\n          } else if (c == '=') {\n            // end of stored text\n            tsStart = i + 1;\n            break;\n          } else {\n            storedBuf.append(c);\n          }\n        }\n        if (tsStart == 0) { // missing end-of-stored marker\n          throw new IOException(\"Missing end marker of stored part\");\n        }\n      } else {\n        throw new IOException(\"Unexpected end of stored field\");\n      }\n    }\n    if (hasStored) {\n      res.str = storedBuf.toString();\n    }\n    Tok tok = new Tok();\n    StringBuilder attName = new StringBuilder();\n    StringBuilder attVal = new StringBuilder();\n    // parser state\n    S s = S.UNDEF;\n    int lastPos = 0;\n    for (int i = tsStart; i < val.length(); i++) {\n      char c = val.charAt(i);\n      if (c == ' ') {\n        // collect leftovers\n        switch (s) {\n        case VALUE :\n          if (attVal.length() == 0) {\n            throw new IOException(\"Unexpected character '\" + c + \"' at position \" + i + \" - empty value of attribute.\");\n          }\n          if (attName.length() > 0) {\n            tok.attr.put(attName.toString(), attVal.toString());\n          }\n          break;\n        case NAME: // attr name without a value ?\n          if (attName.length() > 0) {\n            throw new IOException(\"Unexpected character '\" + c + \"' at position \" + i + \" - missing attribute value.\");\n          } else {\n            // accept missing att name and value\n          }\n          break;\n        case TOKEN:\n        case UNDEF:\n          // do nothing, advance to next token\n        }\n        attName.setLength(0);\n        attVal.setLength(0);\n        if (!tok.isEmpty() || s == S.NAME) {\n          AttributeSource.State state = createState(parent, tok, lastPos);\n          if (state != null) res.states.add(state.clone());\n        }\n        // reset tok\n        s = S.UNDEF;\n        tok.reset();\n        // skip\n        lastPos++;\n        continue;\n      }\n      StringBuilder tgt = null;\n      switch (s) {\n      case TOKEN:\n        tgt = tok.token;\n        break;\n      case NAME:\n        tgt = attName;\n        break;\n      case VALUE:\n        tgt = attVal;\n        break;\n      case UNDEF:\n        tgt = tok.token;\n        s = S.TOKEN;\n      }\n      if (c == '\\\\') {\n        if (s == S.TOKEN) lastPos++;\n        if (i >= val.length() - 1) { // end\n          \n          tgt.append(c);\n          continue;\n        } else {\n          c = val.charAt(++i);\n          switch (c) {\n          case '\\\\' :\n          case '=' :\n          case ',' :\n          case ' ' :\n            tgt.append(c);\n            break;\n          case 'n':\n            tgt.append('\\n');\n            break;\n          case 'r':\n            tgt.append('\\r');\n            break;\n          case 't':\n            tgt.append('\\t');\n            break;\n          default:\n            tgt.append('\\\\');\n            tgt.append(c);\n            lastPos++;\n          }\n        }\n      } else {\n        // state switch\n        if (c == ',') {\n          if (s == S.TOKEN) {\n            s = S.NAME;\n          } else if (s == S.VALUE) { // end of value, start of next attr\n            if (attVal.length() == 0) {\n              throw new IOException(\"Unexpected character '\" + c + \"' at position \" + i + \" - empty value of attribute.\");\n            }\n            if (attName.length() > 0 && attVal.length() > 0) {\n              tok.attr.put(attName.toString(), attVal.toString());\n            }\n            // reset\n            attName.setLength(0);\n            attVal.setLength(0);\n            s = S.NAME;\n          } else {\n            throw new IOException(\"Unexpected character '\" + c + \"' at position \" + i + \" - missing attribute value.\");\n          }\n        } else if (c == '=') {\n          if (s == S.NAME) {\n            s = S.VALUE;\n          } else {\n            throw new IOException(\"Unexpected character '\" + c + \"' at position \" + i + \" - empty value of attribute.\");\n          }\n        } else {\n          tgt.append(c);\n          if (s == S.TOKEN) lastPos++;\n        }\n      }\n    }\n    // collect leftovers\n    if (!tok.isEmpty() || s == S.NAME || s == S.VALUE) {\n      // remaining attrib?\n      if (s == S.VALUE) {\n        if (attName.length() > 0 && attVal.length() > 0) {\n          tok.attr.put(attName.toString(), attVal.toString());\n        }        \n      }\n      AttributeSource.State state = createState(parent, tok, lastPos);\n      if (state != null) res.states.add(state.clone());\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"232d48b2fd10ac5189a0ac4480ace7421be9de93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["232d48b2fd10ac5189a0ac4480ace7421be9de93"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"232d48b2fd10ac5189a0ac4480ace7421be9de93":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}