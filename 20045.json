{"path":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getDocMap(MergeState).mjava","commits":[{"id":"66b61ab77ab36893d701d693f1b6df2a383bb7b5","date":1364405461,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getDocMap(MergeState).mjava","pathOld":"/dev/null","sourceNew":"    /** Expert: If {@link #getMergeReaders()} reorders document IDs, this method\n     *  must be overridden to return a mapping from the <i>natural</i> doc ID\n     *  (the doc ID that would result from a natural merge) to the actual doc\n     *  ID. This mapping is used to apply deletions that happened during the\n     *  merge to the new segment. */\n    public DocMap getDocMap(MergeState mergeState) {\n      return new DocMap() {\n        @Override\n        public int map(int docID) {\n          return docID;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getDocMap(MergeState).mjava","sourceNew":null,"sourceOld":"    /** Expert: If {@link #getMergeReaders()} reorders document IDs, this method\n     *  must be overridden to return a mapping from the <i>natural</i> doc ID\n     *  (the doc ID that would result from a natural merge) to the actual doc\n     *  ID. This mapping is used to apply deletions that happened during the\n     *  merge to the new segment. */\n    public DocMap getDocMap(MergeState mergeState) {\n      return new DocMap() {\n        @Override\n        public int map(int docID) {\n          return docID;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getDocMap(MergeState).mjava","sourceNew":null,"sourceOld":"    /** Expert: If {@link #getMergeReaders()} reorders document IDs, this method\n     *  must be overridden to return a mapping from the <i>natural</i> doc ID\n     *  (the doc ID that would result from a natural merge) to the actual doc\n     *  ID. This mapping is used to apply deletions that happened during the\n     *  merge to the new segment. */\n    public DocMap getDocMap(MergeState mergeState) {\n      return new DocMap() {\n        @Override\n        public int map(int docID) {\n          return docID;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getDocMap(MergeState).mjava","sourceNew":null,"sourceOld":"    /** Expert: If {@link #getMergeReaders()} reorders document IDs, this method\n     *  must be overridden to return a mapping from the <i>natural</i> doc ID\n     *  (the doc ID that would result from a natural merge) to the actual doc\n     *  ID. This mapping is used to apply deletions that happened during the\n     *  merge to the new segment. */\n    public DocMap getDocMap(MergeState mergeState) {\n      return new DocMap() {\n        @Override\n        public int map(int docID) {\n          return docID;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getDocMap(MergeState).mjava","sourceNew":null,"sourceOld":"    /** Expert: If {@link #getMergeReaders()} reorders document IDs, this method\n     *  must be overridden to return a mapping from the <i>natural</i> doc ID\n     *  (the doc ID that would result from a natural merge) to the actual doc\n     *  ID. This mapping is used to apply deletions that happened during the\n     *  merge to the new segment. */\n    public DocMap getDocMap(MergeState mergeState) {\n      return new DocMap() {\n        @Override\n        public int map(int docID) {\n          return docID;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#getDocMap(MergeState).mjava","sourceNew":null,"sourceOld":"    /** Expert: If {@link #getMergeReaders()} reorders document IDs, this method\n     *  must be overridden to return a mapping from the <i>natural</i> doc ID\n     *  (the doc ID that would result from a natural merge) to the actual doc\n     *  ID. This mapping is used to apply deletions that happened during the\n     *  merge to the new segment. */\n    public DocMap getDocMap(MergeState mergeState) {\n      return new DocMap() {\n        @Override\n        public int map(int docID) {\n          return docID;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["66b61ab77ab36893d701d693f1b6df2a383bb7b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["66b61ab77ab36893d701d693f1b6df2a383bb7b5","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["66b61ab77ab36893d701d693f1b6df2a383bb7b5","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"66b61ab77ab36893d701d693f1b6df2a383bb7b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["66b61ab77ab36893d701d693f1b6df2a383bb7b5","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["66b61ab77ab36893d701d693f1b6df2a383bb7b5","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66b61ab77ab36893d701d693f1b6df2a383bb7b5"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"66b61ab77ab36893d701d693f1b6df2a383bb7b5":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}