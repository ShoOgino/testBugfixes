{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestBackgroundOptimize().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestBackgroundOptimize().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testBackgroundOptimize().mjava","sourceNew":"    // Test calling optimize(false) whereby optimize is kicked\n    // off but we don't wait for it to finish (but\n    // writer.close()) does wait\n    public void xxxtestBackgroundOptimize() throws IOException {\n\n      Directory dir = new MockRAMDirectory();\n      for(int pass=0;pass<2;pass++) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergeScheduler(new ConcurrentMergeScheduler());\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(101);\n        for(int i=0;i<200;i++)\n          writer.addDocument(doc);\n        writer.optimize(false);\n\n        if (0 == pass) {\n          writer.close();\n          IndexReader reader = IndexReader.open(dir);\n          assertTrue(reader.isOptimized());\n          reader.close();\n        } else {\n          // Get another segment to flush so we can verify it is\n          // NOT included in the optimization\n          writer.addDocument(doc);\n          writer.addDocument(doc);\n          writer.close();\n\n          IndexReader reader = IndexReader.open(dir);\n          assertTrue(!reader.isOptimized());\n          reader.close();\n\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          assertEquals(2, infos.size());\n        }\n      }      \n\n      dir.close();\n    }\n\n","sourceOld":"    // Test calling optimize(false) whereby optimize is kicked\n    // off but we don't wait for it to finish (but\n    // writer.close()) does wait\n    public void testBackgroundOptimize() throws IOException {\n\n      Directory dir = new MockRAMDirectory();\n      for(int pass=0;pass<2;pass++) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergeScheduler(new ConcurrentMergeScheduler());\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(101);\n        for(int i=0;i<200;i++)\n          writer.addDocument(doc);\n        writer.optimize(false);\n\n        if (0 == pass) {\n          writer.close();\n          IndexReader reader = IndexReader.open(dir);\n          assertTrue(reader.isOptimized());\n          reader.close();\n        } else {\n          // Get another segment to flush so we can verify it is\n          // NOT included in the optimization\n          writer.addDocument(doc);\n          writer.addDocument(doc);\n          writer.close();\n\n          IndexReader reader = IndexReader.open(dir);\n          assertTrue(!reader.isOptimized());\n          reader.close();\n\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          assertEquals(2, infos.size());\n        }\n      }      \n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testBackgroundOptimize().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestBackgroundOptimize().mjava","sourceNew":"    // Test calling optimize(false) whereby optimize is kicked\n    // off but we don't wait for it to finish (but\n    // writer.close()) does wait\n    public void testBackgroundOptimize() throws IOException {\n\n      Directory dir = new MockRAMDirectory();\n      for(int pass=0;pass<2;pass++) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergeScheduler(new ConcurrentMergeScheduler());\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(101);\n        for(int i=0;i<200;i++)\n          writer.addDocument(doc);\n        writer.optimize(false);\n\n        if (0 == pass) {\n          writer.close();\n          IndexReader reader = IndexReader.open(dir);\n          assertTrue(reader.isOptimized());\n          reader.close();\n        } else {\n          // Get another segment to flush so we can verify it is\n          // NOT included in the optimization\n          writer.addDocument(doc);\n          writer.addDocument(doc);\n          writer.close();\n\n          IndexReader reader = IndexReader.open(dir);\n          assertTrue(!reader.isOptimized());\n          reader.close();\n\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          assertEquals(2, infos.size());\n        }\n      }      \n\n      dir.close();\n    }\n\n","sourceOld":"    // Test calling optimize(false) whereby optimize is kicked\n    // off but we don't wait for it to finish (but\n    // writer.close()) does wait\n    public void xxxtestBackgroundOptimize() throws IOException {\n\n      Directory dir = new MockRAMDirectory();\n      for(int pass=0;pass<2;pass++) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergeScheduler(new ConcurrentMergeScheduler());\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.setMaxBufferedDocs(2);\n        writer.setMergeFactor(101);\n        for(int i=0;i<200;i++)\n          writer.addDocument(doc);\n        writer.optimize(false);\n\n        if (0 == pass) {\n          writer.close();\n          IndexReader reader = IndexReader.open(dir);\n          assertTrue(reader.isOptimized());\n          reader.close();\n        } else {\n          // Get another segment to flush so we can verify it is\n          // NOT included in the optimization\n          writer.addDocument(doc);\n          writer.addDocument(doc);\n          writer.close();\n\n          IndexReader reader = IndexReader.open(dir);\n          assertTrue(!reader.isOptimized());\n          reader.close();\n\n          SegmentInfos infos = new SegmentInfos();\n          infos.read(dir);\n          assertEquals(2, infos.size());\n        }\n      }      \n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}