{"path":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","commits":[{"id":"205c262e058cd0f7d3b92d4742749368cada2eb2","date":1271674460,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","sourceNew":"  @Test\n  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, \n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    IndexCommit cp = dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp));\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp));\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","sourceOld":"  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, \n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    IndexCommit cp = dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp));\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp));\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","sourceNew":"  @Test\n  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, \n        new MockAnalyzer()).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    IndexCommit cp = dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setIndexDeletionPolicy(dp));\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setIndexDeletionPolicy(dp));\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, \n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    IndexCommit cp = dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp));\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp));\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3cefb552695b930cefe85eb7880cccdb914be6b","date":1275316631,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testReuseAcrossWriters().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testReuseAcrossWriters() throws Exception {\n    Directory dir = new MockRAMDirectory();\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, \n        new MockAnalyzer()).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    IndexCommit cp = dp.snapshot();\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    \n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setIndexDeletionPolicy(dp));\n    copyFiles(dir, cp);\n    for(int i=0;i<7;i++) {\n      writer.addDocument(doc);\n      if (i % 2 == 0) {\n        writer.commit();\n      }\n    }\n    copyFiles(dir, cp);\n    writer.close();\n    copyFiles(dir, cp);\n    dp.release();\n    writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setIndexDeletionPolicy(dp));\n    writer.close();\n    try {\n      copyFiles(dir, cp);\n      fail(\"did not hit expected IOException\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"205c262e058cd0f7d3b92d4742749368cada2eb2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3cefb552695b930cefe85eb7880cccdb914be6b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["205c262e058cd0f7d3b92d4742749368cada2eb2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3cefb552695b930cefe85eb7880cccdb914be6b"]},"commit2Childs":{"205c262e058cd0f7d3b92d4742749368cada2eb2":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["205c262e058cd0f7d3b92d4742749368cada2eb2"],"b3cefb552695b930cefe85eb7880cccdb914be6b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d572389229127c297dd1fa5ce4758e1cec41e799":["b3cefb552695b930cefe85eb7880cccdb914be6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}