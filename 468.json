{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testRescorer().mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testRescorer().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore\n  @Test\n  public void testRescorer() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n    hits = rescorer.rescore(searcher, hits, 2);\n\n    // rerank using the field final-score\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testRescorer().mjava","pathOld":"/dev/null","sourceNew":"  @Ignore\n  @Test\n  public void testRescorer() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n    hits = rescorer.rescore(searcher, hits, 2);\n\n    // rerank using the field final-score\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29514ce99b5036f405d8ac886578639d8d8f6336","date":1500647906,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testRescorer().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testRescorer().mjava","sourceNew":"  @Test\n  public void testRescorer() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(newStringField(\"final-score\", \"F\", Field.Store.YES)); // TODO: change to numeric field\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(newStringField(\"final-score\", \"T\", Field.Store.YES)); // TODO: change to numeric field\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n    hits = rescorer.rescore(searcher, hits, 2);\n\n    // rerank using the field final-score\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  @Ignore\n  @Test\n  public void testRescorer() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n    hits = rescorer.rescore(searcher, hits, 2);\n\n    // rerank using the field final-score\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testRescorer().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testRescorer().mjava","sourceNew":"  @Test\n  public void testRescorer() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(newStringField(\"final-score\", \"F\", Field.Store.YES)); // TODO: change to numeric field\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(newStringField(\"final-score\", \"T\", Field.Store.YES)); // TODO: change to numeric field\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n    hits = rescorer.rescore(searcher, hits, 2);\n\n    // rerank using the field final-score\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  @Ignore\n  @Test\n  public void testRescorer() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n    hits = rescorer.rescore(searcher, hits, 2);\n\n    // rerank using the field final-score\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testRescorer().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testRescorer().mjava","sourceNew":"  @Test\n  public void testRescorer() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(newStringField(\"final-score\", \"F\", Field.Store.YES)); // TODO: change to numeric field\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(newStringField(\"final-score\", \"T\", Field.Store.YES)); // TODO: change to numeric field\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n    hits = rescorer.rescore(searcher, hits, 2);\n\n    // rerank using the field final-score\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  @Ignore\n  @Test\n  public void testRescorer() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 1.0f));\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(new FloatDocValuesField(\"final-score\", 2.0f));\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, null);\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n    hits = rescorer.rescore(searcher, hits, 2);\n\n    // rerank using the field final-score\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testRescorer().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTRReRankingPipeline#testRescorer().mjava","sourceNew":"  @Test\n  public void testRescorer() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(newStringField(\"final-score\", \"F\", Field.Store.YES)); // TODO: change to numeric field\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(newStringField(\"final-score\", \"T\", Field.Store.YES)); // TODO: change to numeric field\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits.value);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n    hits = rescorer.rescore(searcher, hits, 2);\n\n    // rerank using the field final-score\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  @Test\n  public void testRescorer() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newStringField(\"id\", \"0\", Field.Store.YES));\n    doc.add(newTextField(\"field\", \"wizard the the the the the oz\",\n        Field.Store.NO));\n    doc.add(newStringField(\"final-score\", \"F\", Field.Store.YES)); // TODO: change to numeric field\n\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newStringField(\"id\", \"1\", Field.Store.YES));\n    // 1 extra token, but wizard and oz are close;\n    doc.add(newTextField(\"field\", \"wizard oz the the the the the the\",\n        Field.Store.NO));\n    doc.add(newStringField(\"final-score\", \"T\", Field.Store.YES)); // TODO: change to numeric field\n    w.addDocument(doc);\n\n    final IndexReader r = w.getReader();\n    w.close();\n\n    // Do ordinary BooleanQuery:\n    final BooleanQuery.Builder bqBuilder = new BooleanQuery.Builder();\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"wizard\")), BooleanClause.Occur.SHOULD);\n    bqBuilder.add(new TermQuery(new Term(\"field\", \"oz\")), BooleanClause.Occur.SHOULD);\n    final IndexSearcher searcher = getSearcher(r);\n    // first run the standard query\n    TopDocs hits = searcher.search(bqBuilder.build(), 10);\n    assertEquals(2, hits.totalHits);\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    final List<Feature> features = makeFieldValueFeatures(new int[] {0, 1, 2},\n        \"final-score\");\n    final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final List<Feature> allFeatures = makeFieldValueFeatures(new int[] {0, 1,\n        2, 3, 4, 5, 6, 7, 8, 9}, \"final-score\");\n    final LTRScoringModel ltrScoringModel = TestLinearModel.createLinearModel(\"test\",\n        features, norms, \"test\", allFeatures, TestLinearModel.makeFeatureWeights(features));\n\n    final LTRRescorer rescorer = new LTRRescorer(new LTRScoringQuery(ltrScoringModel));\n    hits = rescorer.rescore(searcher, hits, 2);\n\n    // rerank using the field final-score\n    assertEquals(\"1\", searcher.doc(hits.scoreDocs[0].doc).get(\"id\"));\n    assertEquals(\"0\", searcher.doc(hits.scoreDocs[1].doc).get(\"id\"));\n\n    r.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a52341299179de5479672f7cf518bf4b173f34b3":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","29514ce99b5036f405d8ac886578639d8d8f6336"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29514ce99b5036f405d8ac886578639d8d8f6336":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","29514ce99b5036f405d8ac886578639d8d8f6336"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"a52341299179de5479672f7cf518bf4b173f34b3":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a52341299179de5479672f7cf518bf4b173f34b3","9720b151fde2073f4e401450f4574e5f31c2d0ff","29514ce99b5036f405d8ac886578639d8d8f6336","936cdd5882761db3b844afd6f84ab81cbb011a75"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"29514ce99b5036f405d8ac886578639d8d8f6336":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}