{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKBigramFilter#flushBigram().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKBigramFilter#flushBigram().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKBigramFilter#flushBigram().mjava","sourceNew":"  /** \n   * Flushes a bigram token to output from our buffer \n   * This is the normal case, e.g. ABC -> AB BC\n   */\n  private void flushBigram() {\n    clearAttributes();\n    char termBuffer[] = termAtt.resizeBuffer(4); // maximum bigram length in code units (2 supplementaries)\n    int len1 = Character.toChars(buffer[index], termBuffer, 0);\n    int len2 = len1 + Character.toChars(buffer[index+1], termBuffer, len1);\n    termAtt.setLength(len2);\n    offsetAtt.setOffset(startOffset[index], endOffset[index+1]);\n    typeAtt.setType(DOUBLE_TYPE);\n    index++;\n  }\n\n","sourceOld":"  /** \n   * Flushes a bigram token to output from our buffer \n   * This is the normal case, e.g. ABC -> AB BC\n   */\n  private void flushBigram() {\n    clearAttributes();\n    char termBuffer[] = termAtt.resizeBuffer(4); // maximum bigram length in code units (2 supplementaries)\n    int len1 = Character.toChars(buffer[index], termBuffer, 0);\n    int len2 = len1 + Character.toChars(buffer[index+1], termBuffer, len1);\n    termAtt.setLength(len2);\n    offsetAtt.setOffset(startOffset[index], endOffset[index+1]);\n    typeAtt.setType(DOUBLE_TYPE);\n    index++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1548959d8ee1230b6fe5bc9da6115d9fc4019bc9","date":1344119834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKBigramFilter#flushBigram().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKBigramFilter#flushBigram().mjava","sourceNew":"  /** \n   * Flushes a bigram token to output from our buffer \n   * This is the normal case, e.g. ABC -> AB BC\n   */\n  private void flushBigram() {\n    clearAttributes();\n    char termBuffer[] = termAtt.resizeBuffer(4); // maximum bigram length in code units (2 supplementaries)\n    int len1 = Character.toChars(buffer[index], termBuffer, 0);\n    int len2 = len1 + Character.toChars(buffer[index+1], termBuffer, len1);\n    termAtt.setLength(len2);\n    offsetAtt.setOffset(startOffset[index], endOffset[index+1]);\n    typeAtt.setType(DOUBLE_TYPE);\n    // when outputting unigrams, all bigrams are synonyms that span two unigrams\n    if (outputUnigrams) {\n      posIncAtt.setPositionIncrement(0);\n      posLengthAtt.setPositionLength(2);\n    }\n    index++;\n  }\n\n","sourceOld":"  /** \n   * Flushes a bigram token to output from our buffer \n   * This is the normal case, e.g. ABC -> AB BC\n   */\n  private void flushBigram() {\n    clearAttributes();\n    char termBuffer[] = termAtt.resizeBuffer(4); // maximum bigram length in code units (2 supplementaries)\n    int len1 = Character.toChars(buffer[index], termBuffer, 0);\n    int len2 = len1 + Character.toChars(buffer[index+1], termBuffer, len1);\n    termAtt.setLength(len2);\n    offsetAtt.setOffset(startOffset[index], endOffset[index+1]);\n    typeAtt.setType(DOUBLE_TYPE);\n    index++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKBigramFilter#flushBigram().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKBigramFilter#flushBigram().mjava","sourceNew":"  /** \n   * Flushes a bigram token to output from our buffer \n   * This is the normal case, e.g. ABC -> AB BC\n   */\n  private void flushBigram() {\n    clearAttributes();\n    char termBuffer[] = termAtt.resizeBuffer(4); // maximum bigram length in code units (2 supplementaries)\n    int len1 = Character.toChars(buffer[index], termBuffer, 0);\n    int len2 = len1 + Character.toChars(buffer[index+1], termBuffer, len1);\n    termAtt.setLength(len2);\n    offsetAtt.setOffset(startOffset[index], endOffset[index+1]);\n    typeAtt.setType(DOUBLE_TYPE);\n    // when outputting unigrams, all bigrams are synonyms that span two unigrams\n    if (outputUnigrams) {\n      posIncAtt.setPositionIncrement(0);\n      posLengthAtt.setPositionLength(2);\n    }\n    index++;\n  }\n\n","sourceOld":"  /** \n   * Flushes a bigram token to output from our buffer \n   * This is the normal case, e.g. ABC -> AB BC\n   */\n  private void flushBigram() {\n    clearAttributes();\n    char termBuffer[] = termAtt.resizeBuffer(4); // maximum bigram length in code units (2 supplementaries)\n    int len1 = Character.toChars(buffer[index], termBuffer, 0);\n    int len2 = len1 + Character.toChars(buffer[index+1], termBuffer, len1);\n    termAtt.setLength(len2);\n    offsetAtt.setOffset(startOffset[index], endOffset[index+1]);\n    typeAtt.setType(DOUBLE_TYPE);\n    index++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKBigramFilter#flushBigram().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKBigramFilter#flushBigram().mjava","sourceNew":"  /** \n   * Flushes a bigram token to output from our buffer \n   * This is the normal case, e.g. ABC -> AB BC\n   */\n  private void flushBigram() {\n    clearAttributes();\n    char termBuffer[] = termAtt.resizeBuffer(4); // maximum bigram length in code units (2 supplementaries)\n    int len1 = Character.toChars(buffer[index], termBuffer, 0);\n    int len2 = len1 + Character.toChars(buffer[index+1], termBuffer, len1);\n    termAtt.setLength(len2);\n    offsetAtt.setOffset(startOffset[index], endOffset[index+1]);\n    typeAtt.setType(DOUBLE_TYPE);\n    // when outputting unigrams, all bigrams are synonyms that span two unigrams\n    if (outputUnigrams) {\n      posIncAtt.setPositionIncrement(0);\n      posLengthAtt.setPositionLength(2);\n    }\n    index++;\n  }\n\n","sourceOld":"  /** \n   * Flushes a bigram token to output from our buffer \n   * This is the normal case, e.g. ABC -> AB BC\n   */\n  private void flushBigram() {\n    clearAttributes();\n    char termBuffer[] = termAtt.resizeBuffer(4); // maximum bigram length in code units (2 supplementaries)\n    int len1 = Character.toChars(buffer[index], termBuffer, 0);\n    int len2 = len1 + Character.toChars(buffer[index+1], termBuffer, len1);\n    termAtt.setLength(len2);\n    offsetAtt.setOffset(startOffset[index], endOffset[index+1]);\n    typeAtt.setType(DOUBLE_TYPE);\n    index++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKBigramFilter#flushBigram().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/cjk/CJKBigramFilter#flushBigram().mjava","sourceNew":"  /** \n   * Flushes a bigram token to output from our buffer \n   * This is the normal case, e.g. ABC -&gt; AB BC\n   */\n  private void flushBigram() {\n    clearAttributes();\n    char termBuffer[] = termAtt.resizeBuffer(4); // maximum bigram length in code units (2 supplementaries)\n    int len1 = Character.toChars(buffer[index], termBuffer, 0);\n    int len2 = len1 + Character.toChars(buffer[index+1], termBuffer, len1);\n    termAtt.setLength(len2);\n    offsetAtt.setOffset(startOffset[index], endOffset[index+1]);\n    typeAtt.setType(DOUBLE_TYPE);\n    // when outputting unigrams, all bigrams are synonyms that span two unigrams\n    if (outputUnigrams) {\n      posIncAtt.setPositionIncrement(0);\n      posLengthAtt.setPositionLength(2);\n    }\n    index++;\n  }\n\n","sourceOld":"  /** \n   * Flushes a bigram token to output from our buffer \n   * This is the normal case, e.g. ABC -> AB BC\n   */\n  private void flushBigram() {\n    clearAttributes();\n    char termBuffer[] = termAtt.resizeBuffer(4); // maximum bigram length in code units (2 supplementaries)\n    int len1 = Character.toChars(buffer[index], termBuffer, 0);\n    int len2 = len1 + Character.toChars(buffer[index+1], termBuffer, len1);\n    termAtt.setLength(len2);\n    offsetAtt.setOffset(startOffset[index], endOffset[index+1]);\n    typeAtt.setType(DOUBLE_TYPE);\n    // when outputting unigrams, all bigrams are synonyms that span two unigrams\n    if (outputUnigrams) {\n      posIncAtt.setPositionIncrement(0);\n      posLengthAtt.setPositionLength(2);\n    }\n    index++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["1548959d8ee1230b6fe5bc9da6115d9fc4019bc9"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","1548959d8ee1230b6fe5bc9da6115d9fc4019bc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","1548959d8ee1230b6fe5bc9da6115d9fc4019bc9"],"1548959d8ee1230b6fe5bc9da6115d9fc4019bc9":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1eb427f2c6beed80d1724555fc1db003ccf3030"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","1548959d8ee1230b6fe5bc9da6115d9fc4019bc9"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"1548959d8ee1230b6fe5bc9da6115d9fc4019bc9":["b1eb427f2c6beed80d1724555fc1db003ccf3030","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}