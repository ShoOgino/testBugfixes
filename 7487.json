{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","sourceNew":"  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n    return bq;\n  }\n\n","sourceOld":"  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n    return bq;\n  }\n\n","sourceOld":"  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n    return bq;\n  }\n\n","sourceOld":"  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, text);\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n    return bq;\n  }\n\n","bugFix":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, text);\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, new StringReader(text));\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"782ed6a4b4ba50ec19734fc8db4e570ee193d627","date":1381127065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try (TokenStream ts = analyzer.tokenStream(fieldName, text)) {\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try {\n      TokenStream ts = analyzer.tokenStream(fieldName, text);\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n      ts.close();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n    return bq;\n  }\n\n","bugFix":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","c83d6c4335f31cae14f625a222bc842f20073dcd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try (TokenStream ts = analyzer.tokenStream(fieldName, text)) {\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    Query q = bq.build();\n    q.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n    return q;\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery bq = new BooleanQuery(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try (TokenStream ts = analyzer.tokenStream(fieldName, text)) {\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    bq.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804b857d1066ab5185b3b9101bde41b0b71426ec","date":1435846169,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try (TokenStream ts = analyzer.tokenStream(fieldName, text)) {\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      ts.reset();\n      while (ts.incrementToken()) {\n        term = new Term(fieldName, BytesRef.deepCopyOf(termAtt.getBytesRef()));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    Query q = bq.build();\n    q.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n    return q;\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try (TokenStream ts = analyzer.tokenStream(fieldName, text)) {\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      BytesRef bytes = termAtt.getBytesRef();\n      ts.reset();\n      while (ts.incrementToken()) {\n        termAtt.fillBytesRef();\n        term = new Term(fieldName, BytesRef.deepCopyOf(bytes));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    Query q = bq.build();\n    q.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try (TokenStream ts = analyzer.tokenStream(fieldName, text)) {\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      ts.reset();\n      while (ts.incrementToken()) {\n        term = new Term(fieldName, BytesRef.deepCopyOf(termAtt.getBytesRef()));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    Query q = bq.build();\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    return new BoostQuery(q, boost);\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try (TokenStream ts = analyzer.tokenStream(fieldName, text)) {\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      ts.reset();\n      while (ts.incrementToken()) {\n        term = new Term(fieldName, BytesRef.deepCopyOf(termAtt.getBytesRef()));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    Query q = bq.build();\n    q.setBoost(DOMUtils.getAttribute(e, \"boost\", 1.0f));\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try (TokenStream ts = analyzer.tokenStream(fieldName, text)) {\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      ts.reset();\n      while (ts.incrementToken()) {\n        term = new Term(fieldName, BytesRef.deepCopyOf(termAtt.getBytesRef()));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    Query q = bq.build();\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    return new BoostQuery(q, boost);\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try (TokenStream ts = analyzer.tokenStream(fieldName, text)) {\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      ts.reset();\n      while (ts.incrementToken()) {\n        term = new Term(fieldName, BytesRef.deepCopyOf(termAtt.getBytesRef()));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    Query q = bq.build();\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    return new BoostQuery(q, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/TermsQueryBuilder#getQuery(Element).mjava","sourceNew":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try (TokenStream ts = analyzer.tokenStream(fieldName, text)) {\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      ts.reset();\n      while (ts.incrementToken()) {\n        term = new Term(fieldName, BytesRef.deepCopyOf(termAtt.getBytesRef()));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    Query q = bq.build();\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    return new BoostQuery(q, boost);\n  }\n\n","sourceOld":"  @Override\n  public Query getQuery(Element e) throws ParserException {\n    String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n    String text = DOMUtils.getNonBlankTextOrFail(e);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.setDisableCoord(DOMUtils.getAttribute(e, \"disableCoord\", false));\n    bq.setMinimumNumberShouldMatch(DOMUtils.getAttribute(e, \"minimumNumberShouldMatch\", 0));\n    try (TokenStream ts = analyzer.tokenStream(fieldName, text)) {\n      TermToBytesRefAttribute termAtt = ts.addAttribute(TermToBytesRefAttribute.class);\n      Term term = null;\n      ts.reset();\n      while (ts.incrementToken()) {\n        term = new Term(fieldName, BytesRef.deepCopyOf(termAtt.getBytesRef()));\n        bq.add(new BooleanClause(new TermQuery(term), BooleanClause.Occur.SHOULD));\n      }\n      ts.end();\n    }\n    catch (IOException ioe) {\n      throw new RuntimeException(\"Error constructing terms from index:\" + ioe);\n    }\n\n    Query q = bq.build();\n    float boost = DOMUtils.getAttribute(e, \"boost\", 1.0f);\n    return new BoostQuery(q, boost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"804b857d1066ab5185b3b9101bde41b0b71426ec":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["7530de27b87b961b51f01bd1299b7004d46e8823","c83d6c4335f31cae14f625a222bc842f20073dcd"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["804b857d1066ab5185b3b9101bde41b0b71426ec"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","c8a0e442f7b61f811680273b25da95994a724466"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"804b857d1066ab5185b3b9101bde41b0b71426ec":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c8a0e442f7b61f811680273b25da95994a724466"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["804b857d1066ab5185b3b9101bde41b0b71426ec"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}