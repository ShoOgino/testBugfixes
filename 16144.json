{"path":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#bitSpans(AtomicReaderContext,Bits).mjava","commits":[{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#bitSpans(AtomicReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SpanFilterResult bitSpans(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    final SpanFilterResult result = getCachedResult(context);\n    if (acceptDocs == null) {\n      return result;\n    } else {\n      // TODO: filter positions more efficient\n      List<SpanFilterResult.PositionInfo> allPositions = result.getPositions();\n      List<SpanFilterResult.PositionInfo> positions = new ArrayList<SpanFilterResult.PositionInfo>(allPositions.size() / 2 + 1);\n      for (SpanFilterResult.PositionInfo p : allPositions) {\n        if (acceptDocs.get(p.getDoc())) {\n          positions.add(p);\n        }        \n      }\n      return new SpanFilterResult(BitsFilteredDocIdSet.wrap(result.getDocIdSet(), acceptDocs), positions);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a015474a0e3185be4c42ed156c0f1e88b90b1ace","date":1321290150,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#bitSpans(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SpanFilterResult bitSpans(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    final SpanFilterResult result = getCachedResult(context);\n    if (acceptDocs == null) {\n      return result;\n    } else {\n      // TODO: filter positions more efficient\n      List<SpanFilterResult.PositionInfo> allPositions = result.getPositions();\n      List<SpanFilterResult.PositionInfo> positions = new ArrayList<SpanFilterResult.PositionInfo>(allPositions.size() / 2 + 1);\n      for (SpanFilterResult.PositionInfo p : allPositions) {\n        if (acceptDocs.get(p.getDoc())) {\n          positions.add(p);\n        }        \n      }\n      return new SpanFilterResult(BitsFilteredDocIdSet.wrap(result.getDocIdSet(), acceptDocs), positions);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["6620df8541b174097b1133a4fc370adb2e570524"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6620df8541b174097b1133a4fc370adb2e570524"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}