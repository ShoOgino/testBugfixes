{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  merge=\" + merge + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && !closed && !closing)\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  merge=\" + merge + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && !closed && !closing)\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#merge(MergePolicy.OneMerge).mjava","sourceNew":null,"sourceOld":"  /**\n   * Merges the indicated segments, replacing them in the stack with a\n   * single segment.\n   */\n\n  final void merge(MergePolicy.OneMerge merge)\n    throws CorruptIndexException, IOException {\n\n    boolean success = false;\n\n    try {\n      try {\n        try {\n          mergeInit(merge);\n\n          if (infoStream != null)\n            message(\"now merge\\n  merge=\" + merge.segString(directory) + \"\\n  merge=\" + merge + \"\\n  index=\" + segString());\n\n          mergeMiddle(merge);\n          mergeSuccess(merge);\n          success = true;\n        } catch (Throwable t) {\n          handleMergeException(t, merge);\n        }\n      } finally {\n        synchronized(this) {\n          mergeFinish(merge);\n\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception during merge\");\n            if (merge.info != null && !segmentInfos.contains(merge.info))\n              deleter.refresh(merge.info.name);\n          }\n\n          // This merge (and, generally, any change to the\n          // segments) may now enable new merges, so we call\n          // merge policy & update pending merges.\n          if (success && !merge.isAborted() && !closed && !closing)\n            updatePendingMerges(merge.maxNumSegmentsOptimize, merge.optimize);\n        }\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"merge\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}