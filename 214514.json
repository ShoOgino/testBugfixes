{"path":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomRanges() throws Exception {\n    final Random r = random;\n    int ITERS = 10;\n    int ITERS_PER_DFA = 100;\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","sourceNew":"  public void testRandomRanges() throws Exception {\n    final Random r = random;\n    int ITERS = 10*_TestUtil.getRandomMultiplier();\n    int ITERS_PER_DFA = 100*_TestUtil.getRandomMultiplier();\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","sourceOld":"  public void testRandomRanges() throws Exception {\n    final Random r = random;\n    int ITERS = 10;\n    int ITERS_PER_DFA = 100;\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90f6725e0dcb9d05a0953b2d96c8642684d57ef","date":1280179847,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","sourceNew":"  public void testRandomRanges() throws Exception {\n    final Random r = random;\n    int ITERS = 10*_TestUtil.getRandomMultiplier();\n    int ITERS_PER_DFA = 100*_TestUtil.getRandomMultiplier();\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","sourceOld":"  public void testRandomRanges() throws Exception {\n    final Random r = random;\n    int ITERS = 10*_TestUtil.getRandomMultiplier();\n    int ITERS_PER_DFA = 100*_TestUtil.getRandomMultiplier();\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","sourceNew":"  public void testRandomRanges() throws Exception {\n    final Random r = random;\n    int ITERS = 10 * RANDOM_MULTIPLIER;\n    int ITERS_PER_DFA = 100 * RANDOM_MULTIPLIER;\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","sourceOld":"  public void testRandomRanges() throws Exception {\n    final Random r = random;\n    int ITERS = 10*_TestUtil.getRandomMultiplier();\n    int ITERS_PER_DFA = 100*_TestUtil.getRandomMultiplier();\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","sourceNew":"  public void testRandomRanges() throws Exception {\n    final Random r = random;\n    int ITERS = 10 * RANDOM_MULTIPLIER;\n    int ITERS_PER_DFA = 100 * RANDOM_MULTIPLIER;\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","sourceOld":"  public void testRandomRanges() throws Exception {\n    final Random r = random;\n    int ITERS = 10*_TestUtil.getRandomMultiplier();\n    int ITERS_PER_DFA = 100*_TestUtil.getRandomMultiplier();\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","sourceNew":"  public void testRandomRanges() throws Exception {\n    final Random r = random;\n    int ITERS = atLeast(10);\n    int ITERS_PER_DFA = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","sourceOld":"  public void testRandomRanges() throws Exception {\n    final Random r = random;\n    int ITERS = 10 * RANDOM_MULTIPLIER;\n    int ITERS_PER_DFA = 100 * RANDOM_MULTIPLIER;\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","sourceNew":"  public void testRandomRanges() throws Exception {\n    final Random r = random;\n    int ITERS = atLeast(10);\n    int ITERS_PER_DFA = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","sourceOld":"  public void testRandomRanges() throws Exception {\n    final Random r = random;\n    int ITERS = 10 * RANDOM_MULTIPLIER;\n    int ITERS_PER_DFA = 100 * RANDOM_MULTIPLIER;\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","sourceNew":"  public void testRandomRanges() throws Exception {\n    final Random r = random;\n    int ITERS = atLeast(10);\n    int ITERS_PER_DFA = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","sourceOld":"  public void testRandomRanges() throws Exception {\n    final Random r = random;\n    int ITERS = 10 * RANDOM_MULTIPLIER;\n    int ITERS_PER_DFA = 100 * RANDOM_MULTIPLIER;\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testRandomRanges().mjava","sourceNew":"  public void testRandomRanges() throws Exception {\n    final Random r = random;\n    int ITERS = atLeast(10);\n    int ITERS_PER_DFA = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","sourceOld":"  public void testRandomRanges() throws Exception {\n    final Random r = random;\n    int ITERS = atLeast(10);\n    int ITERS_PER_DFA = atLeast(100);\n    for(int iter=0;iter<ITERS;iter++) {\n      int x1 = getCodeStart(r);\n      int x2 = getCodeStart(r);\n      final int startCode, endCode;\n\n      if (x1 < x2) {\n        startCode = x1;\n        endCode = x2;\n      } else {\n        startCode = x2;\n        endCode = x1;\n      }\n\n      if (isSurrogate(startCode) && isSurrogate(endCode)) {\n        iter--;\n        continue;\n      }\n      \n      final Automaton a = new Automaton();\n      final State end = new State();\n      end.setAccept(true);\n      a.getInitialState().addTransition(new Transition(startCode, endCode, end));\n      a.setDeterministic(true);\n\n      testOne(r, new ByteRunAutomaton(a), startCode, endCode, ITERS_PER_DFA);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["d90f6725e0dcb9d05a0953b2d96c8642684d57ef"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["2aafd88401639311b0404e67c94e829e123a0e45","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","f83af14a2a8131b14d7aee6274c740334e0363d3"],"2aafd88401639311b0404e67c94e829e123a0e45":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"d90f6725e0dcb9d05a0953b2d96c8642684d57ef":["2aafd88401639311b0404e67c94e829e123a0e45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","f83af14a2a8131b14d7aee6274c740334e0363d3","3242a09f703274d3b9283f2064a1a33064b53a1b","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3242a09f703274d3b9283f2064a1a33064b53a1b":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["2aafd88401639311b0404e67c94e829e123a0e45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"2aafd88401639311b0404e67c94e829e123a0e45":["3242a09f703274d3b9283f2064a1a33064b53a1b","d90f6725e0dcb9d05a0953b2d96c8642684d57ef"],"d90f6725e0dcb9d05a0953b2d96c8642684d57ef":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3242a09f703274d3b9283f2064a1a33064b53a1b","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}