{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver(dataImporter);\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, null, resolver,\n            dataImporter, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      deleteAll(deletedKeys);\n      importStatistics.deletedDocCount.addAndGet(deletedKeys.size());\n      // Make sure that documents are not re-created\n      allPks.removeAll(deletedKeys);\n    }\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    for (Map<String, Object> pk : allPks) {\n      VariableResolverImpl vri = getVariableResolver(dataImporter);\n      vri.addNamespace(DataConfig.IMPORTER_NS + \".delta\", pk);\n      buildDocument(vri, null, pk, root, true, null);\n    }\n\n    if (!stop.get()) {\n      writer.persistIndexStartTime(dataImporter.getIndexStartTime());\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2dcb3817c18e041efa9fd5355edb3a9b1376a8e4","c1830bd439a127bb3dc9c376f8c6d0cc667c67ef"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dcb3817c18e041efa9fd5355edb3a9b1376a8e4","date":1228986339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver(dataImporter);\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, null, resolver,\n            dataImporter, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      deleteAll(deletedKeys);\n      importStatistics.deletedDocCount.addAndGet(deletedKeys.size());\n      // Make sure that documents are not re-created\n      allPks.removeAll(deletedKeys);\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver(dataImporter);\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n    }\n\n    if (!stop.get()) {\n      writer.persistIndexStartTime(dataImporter.getIndexStartTime());\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver(dataImporter);\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, null, resolver,\n            dataImporter, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      deleteAll(deletedKeys);\n      importStatistics.deletedDocCount.addAndGet(deletedKeys.size());\n      // Make sure that documents are not re-created\n      allPks.removeAll(deletedKeys);\n    }\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    for (Map<String, Object> pk : allPks) {\n      VariableResolverImpl vri = getVariableResolver(dataImporter);\n      vri.addNamespace(DataConfig.IMPORTER_NS + \".delta\", pk);\n      buildDocument(vri, null, pk, root, true, null);\n    }\n\n    if (!stop.get()) {\n      writer.persistIndexStartTime(dataImporter.getIndexStartTime());\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db6dfac30d1553e9356900c2b76b768139483a62","date":1230619368,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, null, resolver,\n            dataImporter, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      deleteAll(deletedKeys);\n      importStatistics.deletedDocCount.addAndGet(deletedKeys.size());\n      // Make sure that documents are not re-created\n      allPks.removeAll(deletedKeys);\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n    }\n\n    if (!stop.get()) {\n      writer.persistIndexStartTime(dataImporter.getIndexStartTime());\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver(dataImporter);\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, null, resolver,\n            dataImporter, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      deleteAll(deletedKeys);\n      importStatistics.deletedDocCount.addAndGet(deletedKeys.size());\n      // Make sure that documents are not re-created\n      allPks.removeAll(deletedKeys);\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver(dataImporter);\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n    }\n\n    if (!stop.get()) {\n      writer.persistIndexStartTime(dataImporter.getIndexStartTime());\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"35d71c83578c6e08733e7a584ca744c7c66d60a6","date":1235022186,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, null, resolver,\n            dataImporter, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      deleteAll(deletedKeys);\n      importStatistics.deletedDocCount.addAndGet(deletedKeys.size());\n      // Make sure that documents are not re-created\n      allPks.removeAll(deletedKeys);\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      writer.persistIndexStartTime(dataImporter.getIndexStartTime());\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, null, resolver,\n            dataImporter, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      deleteAll(deletedKeys);\n      importStatistics.deletedDocCount.addAndGet(deletedKeys.size());\n      // Make sure that documents are not re-created\n      allPks.removeAll(deletedKeys);\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n    }\n\n    if (!stop.get()) {\n      writer.persistIndexStartTime(dataImporter.getIndexStartTime());\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5850c9b195a2c8b5a2ef6d4775d905dfcd1eca1d","date":1235123016,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, null, resolver,\n            dataImporter, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      deleteAll(deletedKeys);\n      importStatistics.deletedDocCount.addAndGet(deletedKeys.size());\n      // Make sure that documents are not re-created\n      allPks.removeAll(deletedKeys);\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, null, resolver,\n            dataImporter, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      deleteAll(deletedKeys);\n      importStatistics.deletedDocCount.addAndGet(deletedKeys.size());\n      // Make sure that documents are not re-created\n      allPks.removeAll(deletedKeys);\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      writer.persistIndexStartTime(dataImporter.getIndexStartTime());\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"18b5e8b70d18c7d8fb665bb1abd1154166882745","date":1240851346,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, null, resolver,\n            dataImporter, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      deleteAll(deletedKeys);\n      importStatistics.deletedDocCount.addAndGet(deletedKeys.size());\n      // Make sure that documents are not re-created\n      allPks.removeAll(deletedKeys);\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, null, resolver,\n            dataImporter, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      deleteAll(deletedKeys);\n      importStatistics.deletedDocCount.addAndGet(deletedKeys.size());\n      // Make sure that documents are not re-created\n      allPks.removeAll(deletedKeys);\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1830bd439a127bb3dc9c376f8c6d0cc667c67ef","date":1242991637,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, null, resolver,\n            dataImporter, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);      \n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, null, resolver,\n            dataImporter, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      deleteAll(deletedKeys);\n      importStatistics.deletedDocCount.addAndGet(deletedKeys.size());\n      // Make sure that documents are not re-created\n      allPks.removeAll(deletedKeys);\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20840b87796f014c4ac2434f49511268d5f7e663","date":1243341614,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, null, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);      \n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, null, resolver,\n            dataImporter, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);      \n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["c8dc32eb86895b9e6625afad8d7071931ee0f0b2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c8dc32eb86895b9e6625afad8d7071931ee0f0b2","date":1244184369,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);      \n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, null, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);      \n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","bugFix":["20840b87796f014c4ac2434f49511268d5f7e663"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65f4e997b946a4eadce22b758749046a63ba2eff","date":1263282580,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);\n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);      \n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#doDelta().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);\n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void doDelta() {\n    addStatusMessage(\"Delta Dump started\");\n    VariableResolverImpl resolver = getVariableResolver();\n\n    if (document.deleteQuery != null) {\n      writer.deleteByQuery(document.deleteQuery);\n    }\n\n    addStatusMessage(\"Identifying Delta\");\n    LOG.info(\"Starting delta collection.\");\n    Set<Map<String, Object>> deletedKeys = new HashSet<Map<String, Object>>();\n    Set<Map<String, Object>> allPks = collectDelta(root, resolver, deletedKeys);\n    if (stop.get())\n      return;\n    addStatusMessage(\"Deltas Obtained\");\n    addStatusMessage(\"Building documents\");\n    if (!deletedKeys.isEmpty()) {\n      allPks.removeAll(deletedKeys);\n      deleteAll(deletedKeys);\n      // Make sure that documents are not re-created\n    }\n    deletedKeys = null;\n\n    statusMessages.put(\"Total Changed Documents\", allPks.size());\n    VariableResolverImpl vri = getVariableResolver();\n    Iterator<Map<String, Object>> pkIter = allPks.iterator();\n    while (pkIter.hasNext()) {\n      Map<String, Object> map = pkIter.next();\n      vri.addNamespace(DataConfig.IMPORTER_NS_SHORT + \".delta\", map);\n      buildDocument(vri, null, map, root, true, null);\n      pkIter.remove();\n      // check for abort\n      if (stop.get())\n        break;\n    }\n\n    if (!stop.get()) {\n      LOG.info(\"Delta Import completed successfully\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5850c9b195a2c8b5a2ef6d4775d905dfcd1eca1d":["35d71c83578c6e08733e7a584ca744c7c66d60a6"],"c8dc32eb86895b9e6625afad8d7071931ee0f0b2":["20840b87796f014c4ac2434f49511268d5f7e663"],"18b5e8b70d18c7d8fb665bb1abd1154166882745":["5850c9b195a2c8b5a2ef6d4775d905dfcd1eca1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c1830bd439a127bb3dc9c376f8c6d0cc667c67ef":["18b5e8b70d18c7d8fb665bb1abd1154166882745"],"20840b87796f014c4ac2434f49511268d5f7e663":["c1830bd439a127bb3dc9c376f8c6d0cc667c67ef"],"2dcb3817c18e041efa9fd5355edb3a9b1376a8e4":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"65f4e997b946a4eadce22b758749046a63ba2eff":["c8dc32eb86895b9e6625afad8d7071931ee0f0b2"],"35d71c83578c6e08733e7a584ca744c7c66d60a6":["db6dfac30d1553e9356900c2b76b768139483a62"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["65f4e997b946a4eadce22b758749046a63ba2eff"],"db6dfac30d1553e9356900c2b76b768139483a62":["2dcb3817c18e041efa9fd5355edb3a9b1376a8e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5850c9b195a2c8b5a2ef6d4775d905dfcd1eca1d":["18b5e8b70d18c7d8fb665bb1abd1154166882745"],"c8dc32eb86895b9e6625afad8d7071931ee0f0b2":["65f4e997b946a4eadce22b758749046a63ba2eff"],"18b5e8b70d18c7d8fb665bb1abd1154166882745":["c1830bd439a127bb3dc9c376f8c6d0cc667c67ef"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"c1830bd439a127bb3dc9c376f8c6d0cc667c67ef":["20840b87796f014c4ac2434f49511268d5f7e663"],"20840b87796f014c4ac2434f49511268d5f7e663":["c8dc32eb86895b9e6625afad8d7071931ee0f0b2"],"2dcb3817c18e041efa9fd5355edb3a9b1376a8e4":["db6dfac30d1553e9356900c2b76b768139483a62"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["2dcb3817c18e041efa9fd5355edb3a9b1376a8e4"],"35d71c83578c6e08733e7a584ca744c7c66d60a6":["5850c9b195a2c8b5a2ef6d4775d905dfcd1eca1d"],"65f4e997b946a4eadce22b758749046a63ba2eff":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"db6dfac30d1553e9356900c2b76b768139483a62":["35d71c83578c6e08733e7a584ca744c7c66d60a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}