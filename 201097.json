{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/PointRangeQueryNode#setBounds(PointQueryNode,PointQueryNode,boolean,boolean,PointsConfig).mjava","commits":[{"id":"683242c67a3f6086bae8b1354748fcaa38edfbd5","date":1457575601,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/PointRangeQueryNode#setBounds(PointQueryNode,PointQueryNode,boolean,boolean,PointsConfig).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the upper and lower bounds of this range query node and the\n   * {@link PointsConfig} associated with these bounds.\n   * \n   * @param lower the lower bound\n   * @param upper the upper bound\n   * @param lowerInclusive <code>true</code> if the lower bound is inclusive, otherwise, <code>false</code>\n   * @param upperInclusive <code>true</code> if the upper bound is inclusive, otherwise, <code>false</code>\n   * @param pointsConfig the {@link PointsConfig} that represents associated with the upper and lower bounds\n   * \n   */\n  public void setBounds(PointQueryNode lower, PointQueryNode upper,\n      boolean lowerInclusive, boolean upperInclusive, PointsConfig pointsConfig) throws QueryNodeException {\n    \n    if (pointsConfig == null) {\n      throw new IllegalArgumentException(\"pointsConfig cannot be null!\");\n    }\n    \n    Class<? extends Number> lowerNumberType, upperNumberType;\n    \n    if (lower != null && lower.getValue() != null) {\n      lowerNumberType = lower.getValue().getClass();\n    } else {\n      lowerNumberType = null;\n    }\n    \n    if (upper != null && upper.getValue() != null) {\n      upperNumberType = upper.getValue().getClass();\n    } else {\n      upperNumberType = null;\n    }\n    \n    if (lowerNumberType != null\n        && !lowerNumberType.equals(pointsConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"lower value's type should be the same as numericConfig type: \"\n              + lowerNumberType + \" != \" + pointsConfig.getType());\n    }\n    \n    if (upperNumberType != null\n        && !upperNumberType.equals(pointsConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"upper value's type should be the same as numericConfig type: \"\n              + upperNumberType + \" != \" + pointsConfig.getType());\n    }\n    \n    super.setBounds(lower, upper, lowerInclusive, upperInclusive);\n    this.numericConfig = pointsConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad0d09e969f4763b0df4230f8e3f74357872a4e4","date":1459188769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/PointRangeQueryNode#setBounds(PointQueryNode,PointQueryNode,boolean,boolean,PointsConfig).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/nodes/PointRangeQueryNode#setBounds(PointQueryNode,PointQueryNode,boolean,boolean,PointsConfig).mjava","sourceNew":"  /**\n   * Sets the upper and lower bounds of this range query node and the\n   * {@link PointsConfig} associated with these bounds.\n   * \n   * @param lower the lower bound\n   * @param upper the upper bound\n   * @param lowerInclusive <code>true</code> if the lower bound is inclusive, otherwise, <code>false</code>\n   * @param upperInclusive <code>true</code> if the upper bound is inclusive, otherwise, <code>false</code>\n   * @param pointsConfig the {@link PointsConfig} that represents associated with the upper and lower bounds\n   * \n   */\n  public void setBounds(PointQueryNode lower, PointQueryNode upper,\n      boolean lowerInclusive, boolean upperInclusive, PointsConfig pointsConfig) throws QueryNodeException {\n    \n    if (pointsConfig == null) {\n      throw new IllegalArgumentException(\"pointsConfig must not be null!\");\n    }\n    \n    Class<? extends Number> lowerNumberType, upperNumberType;\n    \n    if (lower != null && lower.getValue() != null) {\n      lowerNumberType = lower.getValue().getClass();\n    } else {\n      lowerNumberType = null;\n    }\n    \n    if (upper != null && upper.getValue() != null) {\n      upperNumberType = upper.getValue().getClass();\n    } else {\n      upperNumberType = null;\n    }\n    \n    if (lowerNumberType != null\n        && !lowerNumberType.equals(pointsConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"lower value's type should be the same as numericConfig type: \"\n              + lowerNumberType + \" != \" + pointsConfig.getType());\n    }\n    \n    if (upperNumberType != null\n        && !upperNumberType.equals(pointsConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"upper value's type should be the same as numericConfig type: \"\n              + upperNumberType + \" != \" + pointsConfig.getType());\n    }\n    \n    super.setBounds(lower, upper, lowerInclusive, upperInclusive);\n    this.numericConfig = pointsConfig;\n  }\n\n","sourceOld":"  /**\n   * Sets the upper and lower bounds of this range query node and the\n   * {@link PointsConfig} associated with these bounds.\n   * \n   * @param lower the lower bound\n   * @param upper the upper bound\n   * @param lowerInclusive <code>true</code> if the lower bound is inclusive, otherwise, <code>false</code>\n   * @param upperInclusive <code>true</code> if the upper bound is inclusive, otherwise, <code>false</code>\n   * @param pointsConfig the {@link PointsConfig} that represents associated with the upper and lower bounds\n   * \n   */\n  public void setBounds(PointQueryNode lower, PointQueryNode upper,\n      boolean lowerInclusive, boolean upperInclusive, PointsConfig pointsConfig) throws QueryNodeException {\n    \n    if (pointsConfig == null) {\n      throw new IllegalArgumentException(\"pointsConfig cannot be null!\");\n    }\n    \n    Class<? extends Number> lowerNumberType, upperNumberType;\n    \n    if (lower != null && lower.getValue() != null) {\n      lowerNumberType = lower.getValue().getClass();\n    } else {\n      lowerNumberType = null;\n    }\n    \n    if (upper != null && upper.getValue() != null) {\n      upperNumberType = upper.getValue().getClass();\n    } else {\n      upperNumberType = null;\n    }\n    \n    if (lowerNumberType != null\n        && !lowerNumberType.equals(pointsConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"lower value's type should be the same as numericConfig type: \"\n              + lowerNumberType + \" != \" + pointsConfig.getType());\n    }\n    \n    if (upperNumberType != null\n        && !upperNumberType.equals(pointsConfig.getType())) {\n      throw new IllegalArgumentException(\n          \"upper value's type should be the same as numericConfig type: \"\n              + upperNumberType + \" != \" + pointsConfig.getType());\n    }\n    \n    super.setBounds(lower, upper, lowerInclusive, upperInclusive);\n    this.numericConfig = pointsConfig;\n  }\n\n","bugFix":["683242c67a3f6086bae8b1354748fcaa38edfbd5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["683242c67a3f6086bae8b1354748fcaa38edfbd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"]},"commit2Childs":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["683242c67a3f6086bae8b1354748fcaa38edfbd5"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}