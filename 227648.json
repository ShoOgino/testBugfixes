{"path":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testRamBytesUsed().mjava","commits":[{"id":"8d73510b39df24d6b65de48e56f8dccb136b9d01","date":1483971905,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testRamBytesUsed().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() {\n    List<Term> terms = new ArrayList<>();\n    final int numTerms = 1000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new Term(\"f\", RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermInSetQuery query = new TermInSetQuery(terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","sourceOld":"  public void testRamBytesUsed() {\n    List<Term> terms = new ArrayList<>();\n    final int numTerms = 1000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new Term(\"f\", RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermsQuery query = new TermsQuery(terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testRamBytesUsed().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() {\n    List<Term> terms = new ArrayList<>();\n    final int numTerms = 1000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new Term(\"f\", RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermInSetQuery query = new TermInSetQuery(terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","sourceOld":"  public void testRamBytesUsed() {\n    List<Term> terms = new ArrayList<>();\n    final int numTerms = 1000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new Term(\"f\", RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermsQuery query = new TermsQuery(terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"830a7b9be2f498e249b346796921c94cdd39d98f","date":1484639518,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testRamBytesUsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() {\n    List<BytesRef> terms = new ArrayList<>();\n    final int numTerms = 1000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new BytesRef(RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermInSetQuery query = new TermInSetQuery(\"f\", terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","sourceOld":"  public void testRamBytesUsed() {\n    List<Term> terms = new ArrayList<>();\n    final int numTerms = 1000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new Term(\"f\", RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermInSetQuery query = new TermInSetQuery(terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testRamBytesUsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() {\n    List<BytesRef> terms = new ArrayList<>();\n    final int numTerms = 1000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new BytesRef(RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermInSetQuery query = new TermInSetQuery(\"f\", terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","sourceOld":"  public void testRamBytesUsed() {\n    List<Term> terms = new ArrayList<>();\n    final int numTerms = 1000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new Term(\"f\", RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermInSetQuery query = new TermInSetQuery(terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testRamBytesUsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() {\n    List<BytesRef> terms = new ArrayList<>();\n    final int numTerms = 10000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new BytesRef(RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermInSetQuery query = new TermInSetQuery(\"f\", terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(expectedRamBytesUsed, actualRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","sourceOld":"  public void testRamBytesUsed() {\n    List<BytesRef> terms = new ArrayList<>();\n    final int numTerms = 1000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new BytesRef(RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermInSetQuery query = new TermInSetQuery(\"f\", terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4a3eb9ce075446a0db113ff7bf2561b7817f602","date":1547634011,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testRamBytesUsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testRamBytesUsed().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-8641\")\n  public void testRamBytesUsed() {\n    List<BytesRef> terms = new ArrayList<>();\n    final int numTerms = 10000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new BytesRef(RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermInSetQuery query = new TermInSetQuery(\"f\", terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(expectedRamBytesUsed, actualRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","sourceOld":"  public void testRamBytesUsed() {\n    List<BytesRef> terms = new ArrayList<>();\n    final int numTerms = 10000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new BytesRef(RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermInSetQuery query = new TermInSetQuery(\"f\", terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(expectedRamBytesUsed, actualRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0509386580032996a559871d20e73d0ab67a5be","date":1547724210,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testRamBytesUsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() {\n    List<BytesRef> terms = new ArrayList<>();\n    final int numTerms = 10000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new BytesRef(RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermInSetQuery query = new TermInSetQuery(\"f\", terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(expectedRamBytesUsed, actualRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-8641\")\n  public void testRamBytesUsed() {\n    List<BytesRef> terms = new ArrayList<>();\n    final int numTerms = 10000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new BytesRef(RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermInSetQuery query = new TermInSetQuery(\"f\", terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(expectedRamBytesUsed, actualRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"015fe54423e69e4d1c2fe80205f847d915d36413","date":1547726736,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testRamBytesUsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testRamBytesUsed().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-8641\")\n  public void testRamBytesUsed() {\n    List<BytesRef> terms = new ArrayList<>();\n    final int numTerms = 10000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new BytesRef(RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermInSetQuery query = new TermInSetQuery(\"f\", terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(expectedRamBytesUsed, actualRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","sourceOld":"  public void testRamBytesUsed() {\n    List<BytesRef> terms = new ArrayList<>();\n    final int numTerms = 10000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new BytesRef(RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermInSetQuery query = new TermInSetQuery(\"f\", terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(expectedRamBytesUsed, actualRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","bugFix":null,"bugIntro":["8913cb9a44846cb65e41bee682ba0372f1636056"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8913cb9a44846cb65e41bee682ba0372f1636056","date":1547808953,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testRamBytesUsed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() {\n    List<BytesRef> terms = new ArrayList<>();\n    final int numTerms = 10000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new BytesRef(RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermInSetQuery query = new TermInSetQuery(\"f\", terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(expectedRamBytesUsed, actualRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-8641\")\n  public void testRamBytesUsed() {\n    List<BytesRef> terms = new ArrayList<>();\n    final int numTerms = 10000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new BytesRef(RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermInSetQuery query = new TermInSetQuery(\"f\", terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(expectedRamBytesUsed, actualRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","bugFix":["015fe54423e69e4d1c2fe80205f847d915d36413"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["830a7b9be2f498e249b346796921c94cdd39d98f"],"a4a3eb9ce075446a0db113ff7bf2561b7817f602":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"8913cb9a44846cb65e41bee682ba0372f1636056":["015fe54423e69e4d1c2fe80205f847d915d36413"],"830a7b9be2f498e249b346796921c94cdd39d98f":["8d73510b39df24d6b65de48e56f8dccb136b9d01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d73510b39df24d6b65de48e56f8dccb136b9d01"],"015fe54423e69e4d1c2fe80205f847d915d36413":["e0509386580032996a559871d20e73d0ab67a5be"],"e0509386580032996a559871d20e73d0ab67a5be":["a4a3eb9ce075446a0db113ff7bf2561b7817f602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8913cb9a44846cb65e41bee682ba0372f1636056"],"302d34f2c66e8d489ee13078305c330cbf67b226":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","830a7b9be2f498e249b346796921c94cdd39d98f"]},"commit2Childs":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["a4a3eb9ce075446a0db113ff7bf2561b7817f602"],"a4a3eb9ce075446a0db113ff7bf2561b7817f602":["e0509386580032996a559871d20e73d0ab67a5be"],"8913cb9a44846cb65e41bee682ba0372f1636056":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"830a7b9be2f498e249b346796921c94cdd39d98f":["409da428f28953cf35fddd5c9ff5c7e4f5439863","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d73510b39df24d6b65de48e56f8dccb136b9d01","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["830a7b9be2f498e249b346796921c94cdd39d98f","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["302d34f2c66e8d489ee13078305c330cbf67b226"],"015fe54423e69e4d1c2fe80205f847d915d36413":["8913cb9a44846cb65e41bee682ba0372f1636056"],"e0509386580032996a559871d20e73d0ab67a5be":["015fe54423e69e4d1c2fe80205f847d915d36413"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}