{"path":"modules/spatial/src/java/org/apache/lucene/spatial/strategy/prefix/tree/SpatialPrefixTree#recursiveGetNodes(Node,Point,int,boolean,Collection[Node]).mjava","commits":[{"id":"7313a9540ff291178aa787bab4a0467caeea59a2","date":1330587303,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/strategy/prefix/tree/SpatialPrefixTree#recursiveGetNodes(Node,Point,int,boolean,Collection[Node]).mjava","pathOld":"/dev/null","sourceNew":"  private void recursiveGetNodes(Node node, Point point, int detailLevel, boolean inclParents,\n                                 Collection<Node> result) {\n    if (inclParents) {\n      result.add(node);\n    }\n    final Node pCell = node.getSubCell(point);\n    if (node.getLevel() == detailLevel - 1) {\n      pCell.setLeaf();\n      result.add(pCell);\n    } else {\n      recursiveGetNodes(pCell, point, detailLevel, inclParents, result);//tail call\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e","date":1330665960,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#recursiveGetNodes(Node,Point,int,boolean,Collection[Node]).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/strategy/prefix/tree/SpatialPrefixTree#recursiveGetNodes(Node,Point,int,boolean,Collection[Node]).mjava","sourceNew":"  private void recursiveGetNodes(Node node, Point point, int detailLevel, boolean inclParents,\n                                 Collection<Node> result) {\n    if (inclParents) {\n      result.add(node);\n    }\n    final Node pCell = node.getSubCell(point);\n    if (node.getLevel() == detailLevel - 1) {\n      pCell.setLeaf();\n      result.add(pCell);\n    } else {\n      recursiveGetNodes(pCell, point, detailLevel, inclParents, result);//tail call\n    }\n  }\n\n","sourceOld":"  private void recursiveGetNodes(Node node, Point point, int detailLevel, boolean inclParents,\n                                 Collection<Node> result) {\n    if (inclParents) {\n      result.add(node);\n    }\n    final Node pCell = node.getSubCell(point);\n    if (node.getLevel() == detailLevel - 1) {\n      pCell.setLeaf();\n      result.add(pCell);\n    } else {\n      recursiveGetNodes(pCell, point, detailLevel, inclParents, result);//tail call\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7313a9540ff291178aa787bab4a0467caeea59a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e":["7313a9540ff291178aa787bab4a0467caeea59a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7313a9540ff291178aa787bab4a0467caeea59a2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7313a9540ff291178aa787bab4a0467caeea59a2":["de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e"],"de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}