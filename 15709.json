{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexInput#checkReads(IndexInput).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexInput#checkReads(IndexInput).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexInput#checkReads(IndexInput).mjava","sourceNew":"  private void checkReads(IndexInput is) throws IOException {\n    assertEquals(128,is.readVInt());\n    assertEquals(16383,is.readVInt());\n    assertEquals(16384,is.readVInt());\n    assertEquals(16385,is.readVInt());\n    assertEquals(Integer.MAX_VALUE, is.readVInt());\n    assertEquals((long) Integer.MAX_VALUE, is.readVLong());\n    assertEquals(Long.MAX_VALUE, is.readVLong());\n    assertEquals(\"Lucene\",is.readString());\n\n    assertEquals(\"\\u00BF\",is.readString());\n    assertEquals(\"Lu\\u00BFce\\u00BFne\",is.readString());\n\n    assertEquals(\"\\u2620\",is.readString());\n    assertEquals(\"Lu\\u2620ce\\u2620ne\",is.readString());\n\n    assertEquals(\"\\uD834\\uDD1E\",is.readString());\n    assertEquals(\"\\uD834\\uDD1E\\uD834\\uDD60\",is.readString());\n    assertEquals(\"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne\",is.readString());\n    \n    assertEquals(\"\\u0000\",is.readString());\n    assertEquals(\"Lu\\u0000ce\\u0000ne\",is.readString());\n  }\n\n","sourceOld":"  private void checkReads(IndexInput is) throws IOException {\n    assertEquals(128,is.readVInt());\n    assertEquals(16383,is.readVInt());\n    assertEquals(16384,is.readVInt());\n    assertEquals(16385,is.readVInt());\n    assertEquals(Integer.MAX_VALUE, is.readVInt());\n    assertEquals((long) Integer.MAX_VALUE, is.readVLong());\n    assertEquals(Long.MAX_VALUE, is.readVLong());\n    assertEquals(\"Lucene\",is.readString());\n\n    assertEquals(\"\\u00BF\",is.readString());\n    assertEquals(\"Lu\\u00BFce\\u00BFne\",is.readString());\n\n    assertEquals(\"\\u2620\",is.readString());\n    assertEquals(\"Lu\\u2620ce\\u2620ne\",is.readString());\n\n    assertEquals(\"\\uD834\\uDD1E\",is.readString());\n    assertEquals(\"\\uD834\\uDD1E\\uD834\\uDD60\",is.readString());\n    assertEquals(\"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne\",is.readString());\n    \n    assertEquals(\"\\u0000\",is.readString());\n    assertEquals(\"Lu\\u0000ce\\u0000ne\",is.readString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d91b7936af3081e704512ac1234340133e59904","date":1332109642,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexInput#checkReads(DataInput,Class[#-extends-Exception]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexInput#checkReads(IndexInput).mjava","sourceNew":"  private void checkReads(DataInput is, Class<? extends Exception> expectedEx) throws IOException {\n    assertEquals(128,is.readVInt());\n    assertEquals(16383,is.readVInt());\n    assertEquals(16384,is.readVInt());\n    assertEquals(16385,is.readVInt());\n    assertEquals(Integer.MAX_VALUE, is.readVInt());\n    assertEquals(-1, is.readVInt());\n    assertEquals((long) Integer.MAX_VALUE, is.readVLong());\n    assertEquals(Long.MAX_VALUE, is.readVLong());\n    assertEquals(\"Lucene\",is.readString());\n\n    assertEquals(\"\\u00BF\",is.readString());\n    assertEquals(\"Lu\\u00BFce\\u00BFne\",is.readString());\n\n    assertEquals(\"\\u2620\",is.readString());\n    assertEquals(\"Lu\\u2620ce\\u2620ne\",is.readString());\n\n    assertEquals(\"\\uD834\\uDD1E\",is.readString());\n    assertEquals(\"\\uD834\\uDD1E\\uD834\\uDD60\",is.readString());\n    assertEquals(\"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne\",is.readString());\n    \n    assertEquals(\"\\u0000\",is.readString());\n    assertEquals(\"Lu\\u0000ce\\u0000ne\",is.readString());\n    \n    try {\n      is.readVInt();\n      fail(\"Should throw \" + expectedEx.getName());\n    } catch (Exception e) {\n      assertTrue(e.getMessage().startsWith(\"Invalid vInt\"));\n      assertTrue(expectedEx.isInstance(e));\n    }\n    assertEquals(1, is.readVInt()); // guard value\n    \n    try {\n      is.readVLong();\n      fail(\"Should throw \" + expectedEx.getName());\n    } catch (Exception e) {\n      assertTrue(e.getMessage().startsWith(\"Invalid vLong\"));\n      assertTrue(expectedEx.isInstance(e));\n    }\n    assertEquals(1L, is.readVLong()); // guard value\n  }\n\n","sourceOld":"  private void checkReads(IndexInput is) throws IOException {\n    assertEquals(128,is.readVInt());\n    assertEquals(16383,is.readVInt());\n    assertEquals(16384,is.readVInt());\n    assertEquals(16385,is.readVInt());\n    assertEquals(Integer.MAX_VALUE, is.readVInt());\n    assertEquals((long) Integer.MAX_VALUE, is.readVLong());\n    assertEquals(Long.MAX_VALUE, is.readVLong());\n    assertEquals(\"Lucene\",is.readString());\n\n    assertEquals(\"\\u00BF\",is.readString());\n    assertEquals(\"Lu\\u00BFce\\u00BFne\",is.readString());\n\n    assertEquals(\"\\u2620\",is.readString());\n    assertEquals(\"Lu\\u2620ce\\u2620ne\",is.readString());\n\n    assertEquals(\"\\uD834\\uDD1E\",is.readString());\n    assertEquals(\"\\uD834\\uDD1E\\uD834\\uDD60\",is.readString());\n    assertEquals(\"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne\",is.readString());\n    \n    assertEquals(\"\\u0000\",is.readString());\n    assertEquals(\"Lu\\u0000ce\\u0000ne\",is.readString());\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d91b7936af3081e704512ac1234340133e59904":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d91b7936af3081e704512ac1234340133e59904"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7d91b7936af3081e704512ac1234340133e59904"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7d91b7936af3081e704512ac1234340133e59904":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}