{"path":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#add(BooleanQuery,String,String,float).mjava","commits":[{"id":"aa8dcd4adc562c6e8da67c42872ef9194f8598fa","date":1108145465,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#add(BooleanQuery,String,String,float).mjava","pathOld":"sandbox/contributions/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#add(BooleanQuery,String,String,float).mjava","sourceNew":"    /**\n     * Add a clause to a boolean query.\n     */\n    private static void add (BooleanQuery q, String k, String v, float boost) {\n        Query tq=new TermQuery(new Term(k, v));\n        tq.setBoost(boost);\n        q.add(new BooleanClause(tq, false, false));\n    }\n\n","sourceOld":"    /**\n     * Add a clause to a boolean query.\n     */\n    private static void add (BooleanQuery q, String k, String v, float boost) {\n        Query tq=new TermQuery(new Term(k, v));\n        tq.setBoost(boost);\n        q.add(new BooleanClause(tq, false, false));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a614b98c1cfd216f3f63751e3ae13364a3bb2810","date":1113263282,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#add(BooleanQuery,String,String,float).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#add(BooleanQuery,String,String,float).mjava","sourceNew":"    /**\n     * Add a clause to a boolean query.\n     */\n    private static void add (BooleanQuery q, String k, String v, float boost) {\n        Query tq=new TermQuery(new Term(k, v));\n        tq.setBoost(boost);\n        q.add(new BooleanClause(tq, BooleanClause.Occur.SHOULD));\n    }\n\n","sourceOld":"    /**\n     * Add a clause to a boolean query.\n     */\n    private static void add (BooleanQuery q, String k, String v, float boost) {\n        Query tq=new TermQuery(new Term(k, v));\n        tq.setBoost(boost);\n        q.add(new BooleanClause(tq, false, false));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515","date":1153458899,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#add(BooleanQuery,String,String,float).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#add(BooleanQuery,String,String,float).mjava","sourceNew":"  /**\n   * Add a clause to a boolean query.\n   */\n  private static void add(BooleanQuery q, String k, String v, float boost) {\n    Query tq = new TermQuery(new Term(k, v));\n    tq.setBoost(boost);\n    q.add(new BooleanClause(tq, BooleanClause.Occur.SHOULD));\n  }\n\n","sourceOld":"    /**\n     * Add a clause to a boolean query.\n     */\n    private static void add (BooleanQuery q, String k, String v, float boost) {\n        Query tq=new TermQuery(new Term(k, v));\n        tq.setBoost(boost);\n        q.add(new BooleanClause(tq, BooleanClause.Occur.SHOULD));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d6c8635b7359c78703bca99eed29c45ed44ac7f","date":1153471142,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#add(BooleanQuery,String,String,float).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#add(BooleanQuery,String,String,float).mjava","sourceNew":"  /**\n   * Add a clause to a boolean query.\n   */\n  private static void add(BooleanQuery q, String name, String value, float boost) {\n    Query tq = new TermQuery(new Term(name, value));\n    tq.setBoost(boost);\n    q.add(new BooleanClause(tq, BooleanClause.Occur.SHOULD));\n  }\n\n","sourceOld":"  /**\n   * Add a clause to a boolean query.\n   */\n  private static void add(BooleanQuery q, String k, String v, float boost) {\n    Query tq = new TermQuery(new Term(k, v));\n    tq.setBoost(boost);\n    q.add(new BooleanClause(tq, BooleanClause.Occur.SHOULD));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#add(BooleanQuery,String,String,float).mjava","pathOld":"contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#add(BooleanQuery,String,String,float).mjava","sourceNew":"  /**\n   * Add a clause to a boolean query.\n   */\n  private static void add(BooleanQuery q, String name, String value, float boost) {\n    Query tq = new TermQuery(new Term(name, value));\n    tq.setBoost(boost);\n    q.add(new BooleanClause(tq, BooleanClause.Occur.SHOULD));\n  }\n\n","sourceOld":"  /**\n   * Add a clause to a boolean query.\n   */\n  private static void add(BooleanQuery q, String name, String value, float boost) {\n    Query tq = new TermQuery(new Term(name, value));\n    tq.setBoost(boost);\n    q.add(new BooleanClause(tq, BooleanClause.Occur.SHOULD));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515":["a614b98c1cfd216f3f63751e3ae13364a3bb2810"],"a614b98c1cfd216f3f63751e3ae13364a3bb2810":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d6c8635b7359c78703bca99eed29c45ed44ac7f":["7cd0a7a7985f8ec8f8f5af8022077ddc4846d515"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3d6c8635b7359c78703bca99eed29c45ed44ac7f"]},"commit2Childs":{"7cd0a7a7985f8ec8f8f5af8022077ddc4846d515":["3d6c8635b7359c78703bca99eed29c45ed44ac7f"],"a614b98c1cfd216f3f63751e3ae13364a3bb2810":["7cd0a7a7985f8ec8f8f5af8022077ddc4846d515"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["a614b98c1cfd216f3f63751e3ae13364a3bb2810"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"3d6c8635b7359c78703bca99eed29c45ed44ac7f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}