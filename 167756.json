{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","sourceNew":"  protected NamedList<Object> readNamedList( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n\n    StringBuilder builder = new StringBuilder();\n    NamedList<Object> nl = new SimpleOrderedMap<Object>();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n\n        /** The name in a NamedList can actually be null\n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        **/\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    nl.add( name, readNamedList( parser ) ); depth--; continue;\n          case ARR:    nl.add( name, readArray(     parser ) ); depth--; continue;\n          case RESULT: nl.add( name, readDocuments( parser ) ); depth--; continue;\n          case DOC:    nl.add( name, readDocument(  parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return nl;\n        }\n        //System.out.println( \"NL:ELEM:\"+type+\"::\"+name+\"::\"+builder );\n        nl.add( name, type.read( builder.toString().trim() ) );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> readNamedList( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n\n    StringBuilder builder = new StringBuilder();\n    NamedList<Object> nl = new SimpleOrderedMap<Object>();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n\n        /** The name in a NamedList can actually be null\n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        **/\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    nl.add( name, readNamedList( parser ) ); depth--; continue;\n          case ARR:    nl.add( name, readArray(     parser ) ); depth--; continue;\n          case RESULT: nl.add( name, readDocuments( parser ) ); depth--; continue;\n          case DOC:    nl.add( name, readDocument(  parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return nl;\n        }\n        //System.out.println( \"NL:ELEM:\"+type+\"::\"+name+\"::\"+builder );\n        nl.add( name, type.read( builder.toString().trim() ) );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","sourceNew":"  protected NamedList<Object> readNamedList( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n\n    StringBuilder builder = new StringBuilder();\n    NamedList<Object> nl = new SimpleOrderedMap<Object>();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n\n        /** The name in a NamedList can actually be null\n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        **/\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    nl.add( name, readNamedList( parser ) ); depth--; continue;\n          case ARR:    nl.add( name, readArray(     parser ) ); depth--; continue;\n          case RESULT: nl.add( name, readDocuments( parser ) ); depth--; continue;\n          case DOC:    nl.add( name, readDocument(  parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return nl;\n        }\n        //System.out.println( \"NL:ELEM:\"+type+\"::\"+name+\"::\"+builder );\n        nl.add( name, type.read( builder.toString().trim() ) );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> readNamedList( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n\n    StringBuilder builder = new StringBuilder();\n    NamedList<Object> nl = new SimpleOrderedMap<Object>();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n\n        /** The name in a NamedList can actually be null\n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        **/\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    nl.add( name, readNamedList( parser ) ); depth--; continue;\n          case ARR:    nl.add( name, readArray(     parser ) ); depth--; continue;\n          case RESULT: nl.add( name, readDocuments( parser ) ); depth--; continue;\n          case DOC:    nl.add( name, readDocument(  parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return nl;\n        }\n        //System.out.println( \"NL:ELEM:\"+type+\"::\"+name+\"::\"+builder );\n        nl.add( name, type.read( builder.toString().trim() ) );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","sourceNew":"  protected NamedList<Object> readNamedList( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n\n    StringBuilder builder = new StringBuilder();\n    NamedList<Object> nl = new SimpleOrderedMap<Object>();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n\n        /** The name in a NamedList can actually be null\n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        **/\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    nl.add( name, readNamedList( parser ) ); depth--; continue;\n          case ARR:    nl.add( name, readArray(     parser ) ); depth--; continue;\n          case RESULT: nl.add( name, readDocuments( parser ) ); depth--; continue;\n          case DOC:    nl.add( name, readDocument(  parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return nl;\n        }\n        //System.out.println( \"NL:ELEM:\"+type+\"::\"+name+\"::\"+builder );\n        nl.add( name, type.read( builder.toString().trim() ) );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> readNamedList( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n\n    StringBuilder builder = new StringBuilder();\n    NamedList<Object> nl = new SimpleOrderedMap<Object>();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n\n        /** The name in a NamedList can actually be null\n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        **/\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    nl.add( name, readNamedList( parser ) ); depth--; continue;\n          case ARR:    nl.add( name, readArray(     parser ) ); depth--; continue;\n          case RESULT: nl.add( name, readDocuments( parser ) ); depth--; continue;\n          case DOC:    nl.add( name, readDocument(  parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return nl;\n        }\n        //System.out.println( \"NL:ELEM:\"+type+\"::\"+name+\"::\"+builder );\n        nl.add( name, type.read( builder.toString().trim() ) );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","sourceNew":"  protected NamedList<Object> readNamedList( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n\n    StringBuilder builder = new StringBuilder();\n    NamedList<Object> nl = new SimpleOrderedMap<>();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n\n        /** The name in a NamedList can actually be null\n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        **/\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    nl.add( name, readNamedList( parser ) ); depth--; continue;\n          case ARR:    nl.add( name, readArray(     parser ) ); depth--; continue;\n          case RESULT: nl.add( name, readDocuments( parser ) ); depth--; continue;\n          case DOC:    nl.add( name, readDocument(  parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return nl;\n        }\n        //System.out.println( \"NL:ELEM:\"+type+\"::\"+name+\"::\"+builder );\n        nl.add( name, type.read( builder.toString().trim() ) );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> readNamedList( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n\n    StringBuilder builder = new StringBuilder();\n    NamedList<Object> nl = new SimpleOrderedMap<Object>();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n\n        /** The name in a NamedList can actually be null\n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        **/\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    nl.add( name, readNamedList( parser ) ); depth--; continue;\n          case ARR:    nl.add( name, readArray(     parser ) ); depth--; continue;\n          case RESULT: nl.add( name, readDocuments( parser ) ); depth--; continue;\n          case DOC:    nl.add( name, readDocument(  parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return nl;\n        }\n        //System.out.println( \"NL:ELEM:\"+type+\"::\"+name+\"::\"+builder );\n        nl.add( name, type.read( builder.toString().trim() ) );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"165b9f5714e75d5242c0953800b3257db2dc4137","date":1518457431,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","sourceNew":"  protected NamedList<Object> readNamedList( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n\n    StringBuilder builder = new StringBuilder();\n    NamedList<Object> nl = new SimpleOrderedMap<>();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n\n        /** The name in a NamedList can actually be null\n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        **/\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    nl.add( name, readNamedList( parser ) ); depth--; continue;\n          case ARR:    nl.add( name, readArray(     parser ) ); depth--; continue;\n          case RESULT: nl.add( name, readDocuments( parser ) ); depth--; continue;\n          case DOC:    nl.add( name, readDocument(  parser ) ); depth--; continue;\n          case BOOL:\n          case DATE:\n          case DOUBLE:\n          case FLOAT:\n          case INT:\n          case LONG:\n          case NULL:\n          case STR:\n            break;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return nl;\n        }\n        //System.out.println( \"NL:ELEM:\"+type+\"::\"+name+\"::\"+builder );\n        nl.add( name, type.read( builder.toString().trim() ) );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> readNamedList( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n\n    StringBuilder builder = new StringBuilder();\n    NamedList<Object> nl = new SimpleOrderedMap<>();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n\n        /** The name in a NamedList can actually be null\n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        **/\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    nl.add( name, readNamedList( parser ) ); depth--; continue;\n          case ARR:    nl.add( name, readArray(     parser ) ); depth--; continue;\n          case RESULT: nl.add( name, readDocuments( parser ) ); depth--; continue;\n          case DOC:    nl.add( name, readDocument(  parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return nl;\n        }\n        //System.out.println( \"NL:ELEM:\"+type+\"::\"+name+\"::\"+builder );\n        nl.add( name, type.read( builder.toString().trim() ) );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfcdec9fcf0409223f35c5ec3bc14094314941b4","date":1518533599,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","sourceNew":"  protected NamedList<Object> readNamedList( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n\n    StringBuilder builder = new StringBuilder();\n    NamedList<Object> nl = new SimpleOrderedMap<>();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n\n        /** The name in a NamedList can actually be null\n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        **/\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    nl.add( name, readNamedList( parser ) ); depth--; continue;\n          case ARR:    nl.add( name, readArray(     parser ) ); depth--; continue;\n          case RESULT: nl.add( name, readDocuments( parser ) ); depth--; continue;\n          case DOC:    nl.add( name, readDocument(  parser ) ); depth--; continue;\n          case BOOL:\n          case DATE:\n          case DOUBLE:\n          case FLOAT:\n          case INT:\n          case LONG:\n          case NULL:\n          case STR:\n            break;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return nl;\n        }\n        //System.out.println( \"NL:ELEM:\"+type+\"::\"+name+\"::\"+builder );\n        nl.add( name, type.read( builder.toString().trim() ) );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> readNamedList( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n\n    StringBuilder builder = new StringBuilder();\n    NamedList<Object> nl = new SimpleOrderedMap<>();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n\n        /** The name in a NamedList can actually be null\n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        **/\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    nl.add( name, readNamedList( parser ) ); depth--; continue;\n          case ARR:    nl.add( name, readArray(     parser ) ); depth--; continue;\n          case RESULT: nl.add( name, readDocuments( parser ) ); depth--; continue;\n          case DOC:    nl.add( name, readDocument(  parser ) ); depth--; continue;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return nl;\n        }\n        //System.out.println( \"NL:ELEM:\"+type+\"::\"+name+\"::\"+builder );\n        nl.add( name, type.read( builder.toString().trim() ) );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readNamedList(XMLStreamReader).mjava","sourceNew":"  protected NamedList<Object> readNamedList( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n\n    StringBuilder builder = new StringBuilder();\n    NamedList<Object> nl = new SimpleOrderedMap<>();\n    KnownType type = null;\n    String name = null;\n\n    // just eat up the events...\n    int depth = 0;\n    while( true )\n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n\n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n\n        /** The name in a NamedList can actually be null\n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        **/\n\n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    nl.add( name, readNamedList( parser ) ); depth--; continue;\n          case ARR:    nl.add( name, readArray(     parser ) ); depth--; continue;\n          case RESULT: nl.add( name, readDocuments( parser ) ); depth--; continue;\n          case DOC:    nl.add( name, readDocument(  parser ) ); depth--; continue;\n          case BOOL:\n          case DATE:\n          case DOUBLE:\n          case FLOAT:\n          case INT:\n          case LONG:\n          case NULL:\n          case STR:\n            break;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n\n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return nl;\n        }\n        //System.out.println( \"NL:ELEM:\"+type+\"::\"+name+\"::\"+builder );\n        nl.add( name, type.read( builder.toString().trim() ) );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> readNamedList( XMLStreamReader parser ) throws XMLStreamException\n  {\n    if( XMLStreamConstants.START_ELEMENT != parser.getEventType() ) {\n      throw new RuntimeException( \"must be start element, not: \"+parser.getEventType() );\n    }\n\n    StringBuilder builder = new StringBuilder();\n    NamedList<Object> nl = new SimpleOrderedMap<>();\n    KnownType type = null;\n    String name = null;\n    \n    // just eat up the events...\n    int depth = 0;\n    while( true ) \n    {\n      switch (parser.next()) {\n      case XMLStreamConstants.START_ELEMENT:\n        depth++;\n        builder.setLength( 0 ); // reset the text\n        type = KnownType.get( parser.getLocalName() );\n        if( type == null ) {\n          throw new RuntimeException( \"this must be known type! not: \"+parser.getLocalName() );\n        }\n        \n        name = null;\n        int cnt = parser.getAttributeCount();\n        for( int i=0; i<cnt; i++ ) {\n          if( \"name\".equals( parser.getAttributeLocalName( i ) ) ) {\n            name = parser.getAttributeValue( i );\n            break;\n          }\n        }\n\n        /** The name in a NamedList can actually be null\n        if( name == null ) {\n          throw new XMLStreamException( \"requires 'name' attribute: \"+parser.getLocalName(), parser.getLocation() );\n        }\n        **/\n        \n        if( !type.isLeaf ) {\n          switch( type ) {\n          case LST:    nl.add( name, readNamedList( parser ) ); depth--; continue;\n          case ARR:    nl.add( name, readArray(     parser ) ); depth--; continue;\n          case RESULT: nl.add( name, readDocuments( parser ) ); depth--; continue;\n          case DOC:    nl.add( name, readDocument(  parser ) ); depth--; continue;\n          case BOOL:\n          case DATE:\n          case DOUBLE:\n          case FLOAT:\n          case INT:\n          case LONG:\n          case NULL:\n          case STR:\n            break;\n          }\n          throw new XMLStreamException( \"branch element not handled!\", parser.getLocation() );\n        }\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if( --depth < 0 ) {\n          return nl;\n        }\n        //System.out.println( \"NL:ELEM:\"+type+\"::\"+name+\"::\"+builder );\n        nl.add( name, type.read( builder.toString().trim() ) );\n        break;\n\n      case XMLStreamConstants.SPACE: // TODO?  should this be trimmed? make sure it only gets one/two space?\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        builder.append( parser.getText() );\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"165b9f5714e75d5242c0953800b3257db2dc4137":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","165b9f5714e75d5242c0953800b3257db2dc4137"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["165b9f5714e75d5242c0953800b3257db2dc4137","bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"165b9f5714e75d5242c0953800b3257db2dc4137":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}