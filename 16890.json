{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader#read(Directory,String).mjava","commits":[{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader#read(Directory,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfosFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final String version = input.readString();\n      final int docCount = input.readInt();\n        // this is still written in 4.0 if we open a 3.x and upgrade the SI\n      final int docStoreOffset = input.readInt();\n      final String docStoreSegment;\n      final boolean docStoreIsCompoundFile;\n      if (docStoreOffset != -1) { \n        docStoreSegment = input.readString();\n        docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n      } else {\n        docStoreSegment = segment;\n        docStoreIsCompoundFile = false;\n      }\n      final int numNormGen = input.readInt();\n      final Map<Integer,Long> normGen;\n      if (numNormGen == SegmentInfo.NO) {\n        normGen = null;\n      } else {\n        normGen = new HashMap<Integer, Long>();\n        for(int j=0;j<numNormGen;j++) {\n          normGen.put(input.readInt(), input.readLong());\n        }\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n      final int delCount = input.readInt();\n      assert delCount <= docCount;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n\n      success = true;\n      return new SegmentInfo(dir, version, segment, docCount, docStoreOffset,\n                             docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                             delCount, null, diagnostics);\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"352763be0465236f8e2ac188aa1b761cb3e1c9ee","date":1337516554,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader#read(Directory,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader#read(Directory,String).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfosFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      final int docStoreOffset = -1;\n      final String docStoreSegment = segment;\n      final boolean docStoreIsCompoundFile = false;\n      final Map<Integer,Long> normGen = null;\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, docStoreOffset,\n                                             docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                             0, null, diagnostics);\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfosFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final String version = input.readString();\n      final int docCount = input.readInt();\n        // this is still written in 4.0 if we open a 3.x and upgrade the SI\n      final int docStoreOffset = input.readInt();\n      final String docStoreSegment;\n      final boolean docStoreIsCompoundFile;\n      if (docStoreOffset != -1) { \n        docStoreSegment = input.readString();\n        docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n      } else {\n        docStoreSegment = segment;\n        docStoreIsCompoundFile = false;\n      }\n      final int numNormGen = input.readInt();\n      final Map<Integer,Long> normGen;\n      if (numNormGen == SegmentInfo.NO) {\n        normGen = null;\n      } else {\n        normGen = new HashMap<Integer, Long>();\n        for(int j=0;j<numNormGen;j++) {\n          normGen.put(input.readInt(), input.readLong());\n        }\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n      final int delCount = input.readInt();\n      assert delCount <= docCount;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n\n      success = true;\n      return new SegmentInfo(dir, version, segment, docCount, docStoreOffset,\n                             docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                             delCount, null, diagnostics);\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b2af6b2c05418fb9df466c739ed5b3a153eadde","date":1337520269,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader#read(Directory,String).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfosFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      final int docStoreOffset = -1;\n      final String docStoreSegment = segment;\n      final boolean docStoreIsCompoundFile = false;\n      final Map<Integer,Long> normGen = null;\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, docStoreOffset,\n                                             docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                             0, null, diagnostics);\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfosFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, IOContext.READONCE);\n    boolean success = false;\n    try {\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      final int docStoreOffset = -1;\n      final String docStoreSegment = segment;\n      final boolean docStoreIsCompoundFile = false;\n      final Map<Integer,Long> normGen = null;\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, docStoreOffset,\n                                             docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                             0, null, diagnostics);\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4356000e349e38c9fb48034695b7c309abd54557":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"352763be0465236f8e2ac188aa1b761cb3e1c9ee":["4356000e349e38c9fb48034695b7c309abd54557"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b2af6b2c05418fb9df466c739ed5b3a153eadde":["352763be0465236f8e2ac188aa1b761cb3e1c9ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4356000e349e38c9fb48034695b7c309abd54557":["352763be0465236f8e2ac188aa1b761cb3e1c9ee"],"352763be0465236f8e2ac188aa1b761cb3e1c9ee":["9b2af6b2c05418fb9df466c739ed5b3a153eadde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4356000e349e38c9fb48034695b7c309abd54557","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9b2af6b2c05418fb9df466c739ed5b3a153eadde":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9b2af6b2c05418fb9df466c739ed5b3a153eadde","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}