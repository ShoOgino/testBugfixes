{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTAutocomplete#balancedTree(Object[],Object[],int,int,TernaryTreeNode).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTAutocomplete#balancedTree(Object[],Object[],int,int,TernaryTreeNode).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTAutocomplete#balancedTree(Object[],Object[],int,int,TernaryTreeNode).mjava","sourceNew":"  /**\n   * Inserting keys in TST in the order middle,small,big (lexicographic measure)\n   * recursively creates a balanced tree which reduces insertion and search\n   * times significantly.\n   * \n   * @param tokens\n   *          Sorted list of keys to be inserted in TST.\n   * @param lo\n   *          stores the lower index of current list.\n   * @param hi\n   *          stores the higher index of current list.\n   * @param root\n   *          a reference object to root of TST.\n   */\n  public void balancedTree(Object[] tokens, Object[] vals, int lo, int hi,\n          TernaryTreeNode root) {\n    if (lo > hi) return;\n    int mid = (lo + hi) / 2;\n    root = insert(root, (String) tokens[mid], vals[mid], 0);\n    balancedTree(tokens, vals, lo, mid - 1, root);\n    balancedTree(tokens, vals, mid + 1, hi, root);\n  }\n\n","sourceOld":"  /**\n   * Inserting keys in TST in the order middle,small,big (lexicographic measure)\n   * recursively creates a balanced tree which reduces insertion and search\n   * times significantly.\n   * \n   * @param tokens\n   *          Sorted list of keys to be inserted in TST.\n   * @param lo\n   *          stores the lower index of current list.\n   * @param hi\n   *          stores the higher index of current list.\n   * @param root\n   *          a reference object to root of TST.\n   */\n  public void balancedTree(Object[] tokens, Object[] vals, int lo, int hi,\n          TernaryTreeNode root) {\n    if (lo > hi) return;\n    int mid = (lo + hi) / 2;\n    root = insert(root, (String) tokens[mid], vals[mid], 0);\n    balancedTree(tokens, vals, lo, mid - 1, root);\n    balancedTree(tokens, vals, mid + 1, hi, root);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}