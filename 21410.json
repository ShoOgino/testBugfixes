{"path":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#toString().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      MergePolicy.OneMerge merge = getRunningMerge();\n      if (merge == null) {\n        merge = startMerge;\n      }\n      try {\n        return \"merge thread: \" + tWriter.segString(merge.segments);\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      MergePolicy.OneMerge merge = getRunningMerge();\n      if (merge == null) {\n        merge = startMerge;\n      }\n      try {\n        return \"merge thread: \" + tWriter.segString(merge.segments);\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12bb0837f99e5072c9df9514f9de62afc1a13561","date":1330515843,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      try {\n        MergePolicy.OneMerge merge = getRunningMerge();\n        if (merge == null) {\n          merge = startMerge;\n        }\n        return \"merge thread: \" + tWriter.segString(merge.segments);\n      } catch (Throwable e) {\n        return \"merge thread: \" + e.toString();\n      }\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      MergePolicy.OneMerge merge = getRunningMerge();\n      if (merge == null) {\n        merge = startMerge;\n      }\n      try {\n        return \"merge thread: \" + tWriter.segString(merge.segments);\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n\n","bugFix":["9ce667c6d3400b22523701c549c0d35e26da8b46","c507fbcc682939239c013568bca7ca40ea6bd844"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1070251684d541057be191d4d02f1379fffdba37","date":1330640892,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#toString().mjava","sourceNew":null,"sourceOld":"    @Override\n    public String toString() {\n      try {\n        MergePolicy.OneMerge merge = getRunningMerge();\n        if (merge == null) {\n          merge = startMerge;\n        }\n        return \"merge thread: \" + tWriter.segString(merge.segments);\n      } catch (Throwable e) {\n        return \"merge thread: \" + e.toString();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler.MergeThread#toString().mjava","sourceNew":null,"sourceOld":"    @Override\n    public String toString() {\n      MergePolicy.OneMerge merge = getRunningMerge();\n      if (merge == null) {\n        merge = startMerge;\n      }\n      try {\n        return \"merge thread: \" + tWriter.segString(merge.segments);\n      } catch (IOException ioe) {\n        throw new RuntimeException(ioe);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12bb0837f99e5072c9df9514f9de62afc1a13561":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","1070251684d541057be191d4d02f1379fffdba37"],"1070251684d541057be191d4d02f1379fffdba37":["12bb0837f99e5072c9df9514f9de62afc1a13561"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1070251684d541057be191d4d02f1379fffdba37"]},"commit2Childs":{"12bb0837f99e5072c9df9514f9de62afc1a13561":["1070251684d541057be191d4d02f1379fffdba37"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["12bb0837f99e5072c9df9514f9de62afc1a13561","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"1070251684d541057be191d4d02f1379fffdba37":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}