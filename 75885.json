{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollection().mjava","commits":[{"id":"8854763f018feadbb30c35a83fd9599adb51ef63","date":1534341747,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollection().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollection() throws Exception  {\n    String commands =  \"{ set-cluster-policy: [ {cores: '0', node: '#ANY'} ] }\"; // disallow replica placement anywhere\n    cluster.getSolrClient().request(createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    String collectionName = \"testCreateCollection\";\n    expectThrows(HttpSolrClient.RemoteSolrException.class,\n        () -> CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient()));\n\n    CollectionAdminRequest.deleteCollection(collectionName).processAndWait(cluster.getSolrClient(), 60);\n\n    commands =  \"{ set-cluster-policy: [ {cores: '<2', node: '#ANY'} ] }\";\n    cluster.getSolrClient().request(createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["042da0877b8e28fd372a8ed80d11c4506a466ad7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"042da0877b8e28fd372a8ed80d11c4506a466ad7","date":1534516670,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollection().mjava","sourceNew":"  public void testCreateCollection() throws Exception  {\n    String commands =  \"{ set-cluster-policy: [ {cores: '0', node: '#ANY'} ] }\"; // disallow replica placement anywhere\n    cluster.getSolrClient().request(createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    String collectionName = \"testCreateCollection\";\n    HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class,\n        () -> CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient()));\n\n    assertTrue(exp.getMessage().contains(\"No node can satisfy the rules\"));\n    assertTrue(exp.getMessage().contains(\"AutoScaling.error.diagnostics\"));\n    CollectionAdminRequest.deleteCollection(collectionName).processAndWait(cluster.getSolrClient(), 60);\n\n    commands =  \"{ set-cluster-policy: [ {cores: '<2', node: '#ANY'} ] }\";\n    cluster.getSolrClient().request(createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient());\n    SolrClientCloudManager scm = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getSolrClient().getZkStateReader().getZkClient()), cluster.getSolrClient());\n    Policy.Session session = scm.getDistribStateManager().getAutoScalingConfig().getPolicy().createSession(scm);\n    System.out.println(Utils.writeJson(PolicyHelper.getDiagnostics(session), new StringWriter(), true).toString());\n\n  }\n\n","sourceOld":"  public void testCreateCollection() throws Exception  {\n    String commands =  \"{ set-cluster-policy: [ {cores: '0', node: '#ANY'} ] }\"; // disallow replica placement anywhere\n    cluster.getSolrClient().request(createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    String collectionName = \"testCreateCollection\";\n    expectThrows(HttpSolrClient.RemoteSolrException.class,\n        () -> CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient()));\n\n    CollectionAdminRequest.deleteCollection(collectionName).processAndWait(cluster.getSolrClient(), 60);\n\n    commands =  \"{ set-cluster-policy: [ {cores: '<2', node: '#ANY'} ] }\";\n    cluster.getSolrClient().request(createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient());\n  }\n\n","bugFix":["8854763f018feadbb30c35a83fd9599adb51ef63"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf8a7ced1e96b646081915c332618d854944666e","date":1535687605,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollection().mjava","sourceNew":"  public void testCreateCollection() throws Exception  {\n    String commands =  \"{ set-cluster-policy: [ {cores: '0', node: '#ANY'} ] }\"; // disallow replica placement anywhere\n    cluster.getSolrClient().request(createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    String collectionName = \"testCreateCollection\";\n    HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class,\n        () -> CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient()));\n\n    assertTrue(exp.getMessage().contains(\"No node can satisfy the rules\"));\n    assertTrue(exp.getMessage().contains(\"AutoScaling.error.diagnostics\"));\n\n    // wait for a while until we don't see the collection\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n    boolean removed = false;\n    while (! timeout.hasTimedOut()) {\n      timeout.sleep(100);\n      removed = !cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(collectionName);\n      if (removed) {\n        timeout.sleep(500); // just a bit of time so it's more likely other\n        // readers see on return\n        break;\n      }\n    }\n    if (!removed) {\n      fail(\"Collection should have been deleted from cluster state but still exists: \" + collectionName);\n    }\n\n    commands =  \"{ set-cluster-policy: [ {cores: '<2', node: '#ANY'} ] }\";\n    cluster.getSolrClient().request(createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient());\n    SolrClientCloudManager scm = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getSolrClient().getZkStateReader().getZkClient()), cluster.getSolrClient());\n    Policy.Session session = scm.getDistribStateManager().getAutoScalingConfig().getPolicy().createSession(scm);\n    System.out.println(Utils.writeJson(PolicyHelper.getDiagnostics(session), new StringWriter(), true).toString());\n\n  }\n\n","sourceOld":"  public void testCreateCollection() throws Exception  {\n    String commands =  \"{ set-cluster-policy: [ {cores: '0', node: '#ANY'} ] }\"; // disallow replica placement anywhere\n    cluster.getSolrClient().request(createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    String collectionName = \"testCreateCollection\";\n    HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class,\n        () -> CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient()));\n\n    assertTrue(exp.getMessage().contains(\"No node can satisfy the rules\"));\n    assertTrue(exp.getMessage().contains(\"AutoScaling.error.diagnostics\"));\n    CollectionAdminRequest.deleteCollection(collectionName).processAndWait(cluster.getSolrClient(), 60);\n\n    commands =  \"{ set-cluster-policy: [ {cores: '<2', node: '#ANY'} ] }\";\n    cluster.getSolrClient().request(createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient());\n    SolrClientCloudManager scm = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getSolrClient().getZkStateReader().getZkClient()), cluster.getSolrClient());\n    Policy.Session session = scm.getDistribStateManager().getAutoScalingConfig().getPolicy().createSession(scm);\n    System.out.println(Utils.writeJson(PolicyHelper.getDiagnostics(session), new StringWriter(), true).toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollection().mjava","sourceNew":"  public void testCreateCollection() throws Exception  {\n    String commands =  \"{ set-cluster-policy: [ {cores: '0', node: '#ANY'} ] }\"; // disallow replica placement anywhere\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    String collectionName = \"testCreateCollection\";\n    HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class,\n        () -> CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient()));\n\n    assertTrue(exp.getMessage().contains(\"No node can satisfy the rules\"));\n    assertTrue(exp.getMessage().contains(\"AutoScaling.error.diagnostics\"));\n\n    // wait for a while until we don't see the collection\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n    boolean removed = false;\n    while (! timeout.hasTimedOut()) {\n      timeout.sleep(100);\n      removed = !cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(collectionName);\n      if (removed) {\n        timeout.sleep(500); // just a bit of time so it's more likely other\n        // readers see on return\n        break;\n      }\n    }\n    if (!removed) {\n      fail(\"Collection should have been deleted from cluster state but still exists: \" + collectionName);\n    }\n\n    commands =  \"{ set-cluster-policy: [ {cores: '<2', node: '#ANY'} ] }\";\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient());\n    SolrClientCloudManager scm = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getSolrClient().getZkStateReader().getZkClient()), cluster.getSolrClient());\n    Policy.Session session = scm.getDistribStateManager().getAutoScalingConfig().getPolicy().createSession(scm);\n    System.out.println(Utils.writeJson(PolicyHelper.getDiagnostics(session), new StringWriter(), true).toString());\n\n  }\n\n","sourceOld":"  public void testCreateCollection() throws Exception  {\n    String commands =  \"{ set-cluster-policy: [ {cores: '0', node: '#ANY'} ] }\"; // disallow replica placement anywhere\n    cluster.getSolrClient().request(createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    String collectionName = \"testCreateCollection\";\n    HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class,\n        () -> CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient()));\n\n    assertTrue(exp.getMessage().contains(\"No node can satisfy the rules\"));\n    assertTrue(exp.getMessage().contains(\"AutoScaling.error.diagnostics\"));\n\n    // wait for a while until we don't see the collection\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n    boolean removed = false;\n    while (! timeout.hasTimedOut()) {\n      timeout.sleep(100);\n      removed = !cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(collectionName);\n      if (removed) {\n        timeout.sleep(500); // just a bit of time so it's more likely other\n        // readers see on return\n        break;\n      }\n    }\n    if (!removed) {\n      fail(\"Collection should have been deleted from cluster state but still exists: \" + collectionName);\n    }\n\n    commands =  \"{ set-cluster-policy: [ {cores: '<2', node: '#ANY'} ] }\";\n    cluster.getSolrClient().request(createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient());\n    SolrClientCloudManager scm = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getSolrClient().getZkStateReader().getZkClient()), cluster.getSolrClient());\n    Policy.Session session = scm.getDistribStateManager().getAutoScalingConfig().getPolicy().createSession(scm);\n    System.out.println(Utils.writeJson(PolicyHelper.getDiagnostics(session), new StringWriter(), true).toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6ae69e36b15b227a219d4e334ccf5f58fb8affd","date":1562804219,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollection().mjava","sourceNew":"  public void testCreateCollection() throws Exception  {\n    String commands =  \"{ set-cluster-policy: [ {cores: '0', node: '#ANY'} ] }\"; // disallow replica placement anywhere\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    String collectionName = \"testCreateCollection\";\n    HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class,\n        () -> CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient()));\n\n    assertTrue(exp.getMessage().contains(\"No node can satisfy the rules\"));\n    assertTrue(exp.getMessage().contains(\"AutoScaling.error.diagnostics\"));\n\n    // wait for a while until we don't see the collection\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n    boolean removed = false;\n    while (! timeout.hasTimedOut()) {\n      timeout.sleep(100);\n      removed = !cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(collectionName);\n      if (removed) {\n        timeout.sleep(500); // just a bit of time so it's more likely other\n        // readers see on return\n        break;\n      }\n    }\n    if (!removed) {\n      fail(\"Collection should have been deleted from cluster state but still exists: \" + collectionName);\n    }\n\n    commands =  \"{ set-cluster-policy: [ {cores: '<2', node: '#ANY'} ] }\";\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 2, 2);\n    \n  }\n\n","sourceOld":"  public void testCreateCollection() throws Exception  {\n    String commands =  \"{ set-cluster-policy: [ {cores: '0', node: '#ANY'} ] }\"; // disallow replica placement anywhere\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    String collectionName = \"testCreateCollection\";\n    HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class,\n        () -> CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient()));\n\n    assertTrue(exp.getMessage().contains(\"No node can satisfy the rules\"));\n    assertTrue(exp.getMessage().contains(\"AutoScaling.error.diagnostics\"));\n\n    // wait for a while until we don't see the collection\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n    boolean removed = false;\n    while (! timeout.hasTimedOut()) {\n      timeout.sleep(100);\n      removed = !cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(collectionName);\n      if (removed) {\n        timeout.sleep(500); // just a bit of time so it's more likely other\n        // readers see on return\n        break;\n      }\n    }\n    if (!removed) {\n      fail(\"Collection should have been deleted from cluster state but still exists: \" + collectionName);\n    }\n\n    commands =  \"{ set-cluster-policy: [ {cores: '<2', node: '#ANY'} ] }\";\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient());\n    SolrClientCloudManager scm = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getSolrClient().getZkStateReader().getZkClient()), cluster.getSolrClient());\n    Policy.Session session = scm.getDistribStateManager().getAutoScalingConfig().getPolicy().createSession(scm);\n    System.out.println(Utils.writeJson(PolicyHelper.getDiagnostics(session), new StringWriter(), true).toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollection().mjava","sourceNew":"  public void testCreateCollection() throws Exception  {\n    String commands =  \"{ set-cluster-policy: [ {cores: '0', node: '#ANY'} ] }\"; // disallow replica placement anywhere\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    String collectionName = \"testCreateCollection\";\n    BaseHttpSolrClient.RemoteSolrException exp = expectThrows(BaseHttpSolrClient.RemoteSolrException.class,\n        () -> CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient()));\n\n    assertTrue(exp.getMessage().contains(\"No node can satisfy the rules\"));\n    assertTrue(exp.getMessage().contains(\"AutoScaling.error.diagnostics\"));\n\n    // wait for a while until we don't see the collection\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n    boolean removed = false;\n    while (! timeout.hasTimedOut()) {\n      timeout.sleep(100);\n      removed = !cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(collectionName);\n      if (removed) {\n        timeout.sleep(500); // just a bit of time so it's more likely other\n        // readers see on return\n        break;\n      }\n    }\n    if (!removed) {\n      fail(\"Collection should have been deleted from cluster state but still exists: \" + collectionName);\n    }\n\n    commands =  \"{ set-cluster-policy: [ {cores: '<2', node: '#ANY'} ] }\";\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 2, 2);\n    \n  }\n\n","sourceOld":"  public void testCreateCollection() throws Exception  {\n    String commands =  \"{ set-cluster-policy: [ {cores: '0', node: '#ANY'} ] }\"; // disallow replica placement anywhere\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    String collectionName = \"testCreateCollection\";\n    HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class,\n        () -> CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient()));\n\n    assertTrue(exp.getMessage().contains(\"No node can satisfy the rules\"));\n    assertTrue(exp.getMessage().contains(\"AutoScaling.error.diagnostics\"));\n\n    // wait for a while until we don't see the collection\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n    boolean removed = false;\n    while (! timeout.hasTimedOut()) {\n      timeout.sleep(100);\n      removed = !cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(collectionName);\n      if (removed) {\n        timeout.sleep(500); // just a bit of time so it's more likely other\n        // readers see on return\n        break;\n      }\n    }\n    if (!removed) {\n      fail(\"Collection should have been deleted from cluster state but still exists: \" + collectionName);\n    }\n\n    commands =  \"{ set-cluster-policy: [ {cores: '<2', node: '#ANY'} ] }\";\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 2, 2);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TestPolicyCloud#testCreateCollection().mjava","sourceNew":null,"sourceOld":"  public void testCreateCollection() throws Exception  {\n    String commands =  \"{ set-cluster-policy: [ {cores: '0', node: '#ANY'} ] }\"; // disallow replica placement anywhere\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    String collectionName = \"testCreateCollection\";\n    BaseHttpSolrClient.RemoteSolrException exp = expectThrows(BaseHttpSolrClient.RemoteSolrException.class,\n        () -> CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient()));\n\n    assertTrue(exp.getMessage().contains(\"No node can satisfy the rules\"));\n    assertTrue(exp.getMessage().contains(\"AutoScaling.error.diagnostics\"));\n\n    // wait for a while until we don't see the collection\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());\n    boolean removed = false;\n    while (! timeout.hasTimedOut()) {\n      timeout.sleep(100);\n      removed = !cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(collectionName);\n      if (removed) {\n        timeout.sleep(500); // just a bit of time so it's more likely other\n        // readers see on return\n        break;\n      }\n    }\n    if (!removed) {\n      fail(\"Collection should have been deleted from cluster state but still exists: \" + collectionName);\n    }\n\n    commands =  \"{ set-cluster-policy: [ {cores: '<2', node: '#ANY'} ] }\";\n    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 1).process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 2, 2);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["db96734b79e26d948b59f68bd4564c4836a71acf"],"bf8a7ced1e96b646081915c332618d854944666e":["042da0877b8e28fd372a8ed80d11c4506a466ad7"],"f6ae69e36b15b227a219d4e334ccf5f58fb8affd":["89948af0461fead48f44ba8fb7866f107ce83f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db96734b79e26d948b59f68bd4564c4836a71acf":["f6ae69e36b15b227a219d4e334ccf5f58fb8affd"],"8854763f018feadbb30c35a83fd9599adb51ef63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bf8a7ced1e96b646081915c332618d854944666e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"042da0877b8e28fd372a8ed80d11c4506a466ad7":["8854763f018feadbb30c35a83fd9599adb51ef63"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bf8a7ced1e96b646081915c332618d854944666e":["89948af0461fead48f44ba8fb7866f107ce83f22"],"f6ae69e36b15b227a219d4e334ccf5f58fb8affd":["db96734b79e26d948b59f68bd4564c4836a71acf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8854763f018feadbb30c35a83fd9599adb51ef63"],"db96734b79e26d948b59f68bd4564c4836a71acf":["3f504512a03d978990cbff30db0522b354e846db"],"8854763f018feadbb30c35a83fd9599adb51ef63":["042da0877b8e28fd372a8ed80d11c4506a466ad7"],"89948af0461fead48f44ba8fb7866f107ce83f22":["f6ae69e36b15b227a219d4e334ccf5f58fb8affd"],"042da0877b8e28fd372a8ed80d11c4506a466ad7":["bf8a7ced1e96b646081915c332618d854944666e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}