{"path":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","sourceNew":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static List<String> splitSmart(String s, char separator) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n    return lst;\n  }\n\n","sourceOld":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static List<String> splitSmart(String s, char separator) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","sourceNew":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static List<String> splitSmart(String s, char separator) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n    return lst;\n  }\n\n","sourceOld":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static List<String> splitSmart(String s, char separator) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","sourceNew":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static List<String> splitSmart(String s, char separator) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n    return lst;\n  }\n\n","sourceOld":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static List<String> splitSmart(String s, char separator) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","sourceNew":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static List<String> splitSmart(String s, char separator) {\n    ArrayList<String> lst = new ArrayList<>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n    return lst;\n  }\n\n","sourceOld":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static List<String> splitSmart(String s, char separator) {\n    ArrayList<String> lst = new ArrayList<String>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403083ff7458a420d21d0aef7488ba088755894f","date":1474889417,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","sourceNew":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static List<String> splitSmart(String s, char separator) {\n    if(s.indexOf(separator) == -1) return singletonList(s);\n    ArrayList<String> lst = new ArrayList<>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n    return lst;\n  }\n\n","sourceOld":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static List<String> splitSmart(String s, char separator) {\n    ArrayList<String> lst = new ArrayList<>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63c9098ef3a36487f6a0fb11907a1753d4eadc05","date":1474907371,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","sourceNew":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static List<String> splitSmart(String s, char separator) {\n    ArrayList<String> lst = new ArrayList<>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n    return lst;\n  }\n\n","sourceOld":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static List<String> splitSmart(String s, char separator) {\n    if(s.indexOf(separator) == -1) return singletonList(s);\n    ArrayList<String> lst = new ArrayList<>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","sourceNew":"  public static List<String> splitSmart(String s, char separator) {\n    ArrayList<String> lst = new ArrayList<>(4);\n    splitSmart(s, separator, lst);\n    return lst;\n\n  }\n\n","sourceOld":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static List<String> splitSmart(String s, char separator) {\n    ArrayList<String> lst = new ArrayList<>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#splitSmart(String,char).mjava","sourceNew":"  public static List<String> splitSmart(String s, char separator) {\n    ArrayList<String> lst = new ArrayList<>(4);\n    splitSmart(s, separator, lst);\n    return lst;\n\n  }\n\n","sourceOld":"  /**\n   * Split a string based on a separator, but don't split if it's inside\n   * a string.  Assume '\\' escapes the next char both inside and\n   * outside strings.\n   */\n  public static List<String> splitSmart(String s, char separator) {\n    ArrayList<String> lst = new ArrayList<>(4);\n    int pos=0, start=0, end=s.length();\n    char inString=0;\n    char ch=0;\n    while (pos < end) {\n      char prevChar=ch;\n      ch = s.charAt(pos++);\n      if (ch=='\\\\') {    // skip escaped chars\n        pos++;\n      } else if (inString != 0 && ch==inString) {\n        inString=0;\n      } else if (ch=='\\'' || ch=='\"') {\n        // If char is directly preceeded by a number or letter\n        // then don't treat it as the start of a string.\n        // Examples: 50\" TV, or can't\n        if (!Character.isLetterOrDigit(prevChar)) {\n          inString=ch;\n        }\n      } else if (ch==separator && inString==0) {\n        lst.add(s.substring(start,pos-1));\n        start=pos;\n      }\n    }\n    if (start < end) {\n      lst.add(s.substring(start,end));\n    }\n\n    /***\n    if (SolrCore.log.isLoggable(Level.FINEST)) {\n      SolrCore.log.trace(\"splitCommand=\" + lst);\n    }\n    ***/\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403083ff7458a420d21d0aef7488ba088755894f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"63c9098ef3a36487f6a0fb11907a1753d4eadc05":["403083ff7458a420d21d0aef7488ba088755894f"]},"commit2Childs":{"403083ff7458a420d21d0aef7488ba088755894f":["63c9098ef3a36487f6a0fb11907a1753d4eadc05"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["403083ff7458a420d21d0aef7488ba088755894f","fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"63c9098ef3a36487f6a0fb11907a1753d4eadc05":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","63c9098ef3a36487f6a0fb11907a1753d4eadc05"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}