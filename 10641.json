{"path":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testCalcDistinctStats().mjava","commits":[{"id":"d12bbc45d641864ffe03291bc30f178eb34e434c","date":1426001646,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testCalcDistinctStats().mjava","pathOld":"/dev/null","sourceNew":"  // Test for Solr-6349\n  public void testCalcDistinctStats() throws Exception {\n    final String kpre = XPRE + \"lst[@name='stats_fields']/lst[@name='k']/\";\n    final String min = \"count(\" + kpre +\"/double[@name='min'])\";\n    final String countDistinct = \"count(\" + kpre +\"/long[@name='countDistinct'])\";\n    final String distinctValues = \"count(\" + kpre +\"/arr[@name='distinctValues'])\";\n\n    final int count = 20;\n    for (int i = 0; i < count; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), \"a_f\", \"2.3\", \"b_f\", \"9.7\", \"a_i\",\n                   String.valueOf(i % 10), \"foo_t\", \"how now brown cow\"));\n    }\n    \n    assertU(commit());\n    \n    String[] baseParams = new String[] { \"q\", \"*:*\", \"stats\", \"true\",\"indent\", \"true\" };\n\n    for (SolrParams p : new SolrParams[] { \n        params(\"stats.field\", \"{!key=k}a_i\"),\n        params(StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"stats.field\", \"{!key=k}a_i\"),\n        params(\"f.a_i.\" + StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"stats.field\", \"{!key=k}a_i\"),\n        params(StatsParams.STATS_CALC_DISTINCT, \"true\", \n               \"f.a_i.\" + StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"stats.field\", \"{!key=k}a_i\"),\n        params(\"stats.field\", \"{!key=k min='true'}a_i\"),\n        params(StatsParams.STATS_CALC_DISTINCT, \"true\", \n               \"f.a_i.\" + StatsParams.STATS_CALC_DISTINCT, \"true\", \n               \"stats.field\", \"{!key=k min='true' calcdistinct='false'}a_i\"),\n      }) {\n\n      assertQ(\"min is either default or explicitly requested; \"+\n              \"countDistinct & distinctValues either default or explicitly prevented\"\n              , req(p, baseParams)\n              , min + \"=1\"\n              , countDistinct + \"=0\"\n              , distinctValues + \"=0\");\n    }\n    \n    for (SolrParams p : new SolrParams[] { \n        params(\"stats.calcdistinct\", \"true\",\n               \"stats.field\", \"{!key=k}a_i\"),\n        params(\"f.a_i.\" + StatsParams.STATS_CALC_DISTINCT, \"true\", \n               \"stats.field\", \"{!key=k}a_i\"),\n        params(\"stats.calcdistinct\", \"false\",\n               \"f.a_i.\" + StatsParams.STATS_CALC_DISTINCT, \"true\", \n               \"stats.field\", \"{!key=k}a_i\"),\n        params(\"stats.calcdistinct\", \"false \", \n               \"stats.field\", \"{!key=k min=true calcdistinct=true}a_i\"),\n        params(\"f.a_i.\" + StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"stats.field\", \"{!key=k min=true calcdistinct=true}a_i\"),\n        params(\"stats.calcdistinct\", \"false \", \n               \"f.a_i.\" + StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"stats.field\", \"{!key=k min=true calcdistinct=true}a_i\"),\n      }) {\n\n      assertQ(\"min is either default or explicitly requested; \" +\n              \"countDistinct & distinctValues explicitly requested\"\n              , req(p, baseParams)\n              , min + \"=1\"\n              , countDistinct + \"=1\"\n              , distinctValues + \"=1\");\n    }\n    \n    for (SolrParams p : new SolrParams[] { \n        params(\"stats.field\", \"{!key=k calcdistinct=true}a_i\"),\n\n        params(\"stats.calcdistinct\", \"true\",\n               \"stats.field\", \"{!key=k min='false'}a_i\"),\n\n        params(\"stats.calcdistinct\", \"true\",\n               \"stats.field\", \"{!key=k max='true' min='false'}a_i\"),\n        \n        params(\"stats.calcdistinct\", \"false\",\n               \"stats.field\", \"{!key=k calcdistinct=true}a_i\"),\n        params(\"f.a_i.\" + StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"stats.field\", \"{!key=k calcdistinct=true}a_i\"),\n        params(\"stats.calcdistinct\", \"false\",\n               \"f.a_i.\" + StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"stats.field\", \"{!key=k calcdistinct=true}a_i\"),\n        params(\"stats.calcdistinct\", \"false\",\n               \"f.a_i.\" + StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"stats.field\", \"{!key=k min='false' calcdistinct=true}a_i\"),\n      }) {\n\n      assertQ(\"min is explicitly excluded; \" +\n              \"countDistinct & distinctValues explicitly requested\"\n              , req(p, baseParams)\n              , min + \"=0\"\n              , countDistinct + \"=1\"\n              , distinctValues + \"=1\");\n    }\n    \n    for (SolrParams p : new SolrParams[] { \n        params(StatsParams.STATS_CALC_DISTINCT, \"true\", \n               \"stats.field\", \"{!key=k min=true}a_i\"),\n        params(\"f.a_i.stats.calcdistinct\", \"true\", \n               \"stats.field\", \"{!key=k min=true}a_i\"),\n        params(StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"f.a_i.stats.calcdistinct\", \"true\", \n               \"stats.field\", \"{!key=k min=true}a_i\"),\n        params(\"f.a_i.stats.calcdistinct\", \"false\", \n               \"stats.field\", \"{!key=k min=true calcdistinct=true}a_i\"),\n        params(StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"stats.field\", \"{!key=k min=true calcdistinct=true}a_i\"),\n        params(StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"f.a_i.stats.calcdistinct\", \"false\", \n               \"stats.field\", \"{!key=k min=true calcdistinct=true}a_i\"),\n      }) {\n\n      assertQ(\"min is explicitly requested; \" +\n              \"countDistinct & distinctValues explicitly requested\"\n              , req(p, baseParams)\n              , min + \"=1\"\n              , countDistinct + \"=1\"\n              , distinctValues + \"=1\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testCalcDistinctStats().mjava","pathOld":"/dev/null","sourceNew":"  // Test for Solr-6349\n  public void testCalcDistinctStats() throws Exception {\n    final String kpre = XPRE + \"lst[@name='stats_fields']/lst[@name='k']/\";\n    final String min = \"count(\" + kpre +\"/double[@name='min'])\";\n    final String countDistinct = \"count(\" + kpre +\"/long[@name='countDistinct'])\";\n    final String distinctValues = \"count(\" + kpre +\"/arr[@name='distinctValues'])\";\n\n    final int count = 20;\n    for (int i = 0; i < count; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), \"a_f\", \"2.3\", \"b_f\", \"9.7\", \"a_i\",\n                   String.valueOf(i % 10), \"foo_t\", \"how now brown cow\"));\n    }\n    \n    assertU(commit());\n    \n    String[] baseParams = new String[] { \"q\", \"*:*\", \"stats\", \"true\",\"indent\", \"true\" };\n\n    for (SolrParams p : new SolrParams[] { \n        params(\"stats.field\", \"{!key=k}a_i\"),\n        params(StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"stats.field\", \"{!key=k}a_i\"),\n        params(\"f.a_i.\" + StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"stats.field\", \"{!key=k}a_i\"),\n        params(StatsParams.STATS_CALC_DISTINCT, \"true\", \n               \"f.a_i.\" + StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"stats.field\", \"{!key=k}a_i\"),\n        params(\"stats.field\", \"{!key=k min='true'}a_i\"),\n        params(StatsParams.STATS_CALC_DISTINCT, \"true\", \n               \"f.a_i.\" + StatsParams.STATS_CALC_DISTINCT, \"true\", \n               \"stats.field\", \"{!key=k min='true' calcdistinct='false'}a_i\"),\n      }) {\n\n      assertQ(\"min is either default or explicitly requested; \"+\n              \"countDistinct & distinctValues either default or explicitly prevented\"\n              , req(p, baseParams)\n              , min + \"=1\"\n              , countDistinct + \"=0\"\n              , distinctValues + \"=0\");\n    }\n    \n    for (SolrParams p : new SolrParams[] { \n        params(\"stats.calcdistinct\", \"true\",\n               \"stats.field\", \"{!key=k}a_i\"),\n        params(\"f.a_i.\" + StatsParams.STATS_CALC_DISTINCT, \"true\", \n               \"stats.field\", \"{!key=k}a_i\"),\n        params(\"stats.calcdistinct\", \"false\",\n               \"f.a_i.\" + StatsParams.STATS_CALC_DISTINCT, \"true\", \n               \"stats.field\", \"{!key=k}a_i\"),\n        params(\"stats.calcdistinct\", \"false \", \n               \"stats.field\", \"{!key=k min=true calcdistinct=true}a_i\"),\n        params(\"f.a_i.\" + StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"stats.field\", \"{!key=k min=true calcdistinct=true}a_i\"),\n        params(\"stats.calcdistinct\", \"false \", \n               \"f.a_i.\" + StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"stats.field\", \"{!key=k min=true calcdistinct=true}a_i\"),\n      }) {\n\n      assertQ(\"min is either default or explicitly requested; \" +\n              \"countDistinct & distinctValues explicitly requested\"\n              , req(p, baseParams)\n              , min + \"=1\"\n              , countDistinct + \"=1\"\n              , distinctValues + \"=1\");\n    }\n    \n    for (SolrParams p : new SolrParams[] { \n        params(\"stats.field\", \"{!key=k calcdistinct=true}a_i\"),\n\n        params(\"stats.calcdistinct\", \"true\",\n               \"stats.field\", \"{!key=k min='false'}a_i\"),\n\n        params(\"stats.calcdistinct\", \"true\",\n               \"stats.field\", \"{!key=k max='true' min='false'}a_i\"),\n        \n        params(\"stats.calcdistinct\", \"false\",\n               \"stats.field\", \"{!key=k calcdistinct=true}a_i\"),\n        params(\"f.a_i.\" + StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"stats.field\", \"{!key=k calcdistinct=true}a_i\"),\n        params(\"stats.calcdistinct\", \"false\",\n               \"f.a_i.\" + StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"stats.field\", \"{!key=k calcdistinct=true}a_i\"),\n        params(\"stats.calcdistinct\", \"false\",\n               \"f.a_i.\" + StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"stats.field\", \"{!key=k min='false' calcdistinct=true}a_i\"),\n      }) {\n\n      assertQ(\"min is explicitly excluded; \" +\n              \"countDistinct & distinctValues explicitly requested\"\n              , req(p, baseParams)\n              , min + \"=0\"\n              , countDistinct + \"=1\"\n              , distinctValues + \"=1\");\n    }\n    \n    for (SolrParams p : new SolrParams[] { \n        params(StatsParams.STATS_CALC_DISTINCT, \"true\", \n               \"stats.field\", \"{!key=k min=true}a_i\"),\n        params(\"f.a_i.stats.calcdistinct\", \"true\", \n               \"stats.field\", \"{!key=k min=true}a_i\"),\n        params(StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"f.a_i.stats.calcdistinct\", \"true\", \n               \"stats.field\", \"{!key=k min=true}a_i\"),\n        params(\"f.a_i.stats.calcdistinct\", \"false\", \n               \"stats.field\", \"{!key=k min=true calcdistinct=true}a_i\"),\n        params(StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"stats.field\", \"{!key=k min=true calcdistinct=true}a_i\"),\n        params(StatsParams.STATS_CALC_DISTINCT, \"false\", \n               \"f.a_i.stats.calcdistinct\", \"false\", \n               \"stats.field\", \"{!key=k min=true calcdistinct=true}a_i\"),\n      }) {\n\n      assertQ(\"min is explicitly requested; \" +\n              \"countDistinct & distinctValues explicitly requested\"\n              , req(p, baseParams)\n              , min + \"=1\"\n              , countDistinct + \"=1\"\n              , distinctValues + \"=1\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d12bbc45d641864ffe03291bc30f178eb34e434c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d12bbc45d641864ffe03291bc30f178eb34e434c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d12bbc45d641864ffe03291bc30f178eb34e434c"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d12bbc45d641864ffe03291bc30f178eb34e434c"],"d12bbc45d641864ffe03291bc30f178eb34e434c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}