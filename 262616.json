{"path":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#getApi(V2EndPoint).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#getApi(V2EndPoint).mjava","pathOld":"/dev/null","sourceNew":"  private Api getApi(final V2EndPoint op) {\n    final BaseHandlerApiSupport apiHandler = this;\n    return new Api(ApiBag.getSpec(op.getSpecName())) {\n      @Override\n      public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n        SolrParams params = req.getParams();\n        SolrRequest.METHOD method = SolrRequest.METHOD.valueOf(req.getHttpMethod());\n        List<ApiCommand> commands = commandsMapping.get(method).get(op);\n        try {\n          if (method == POST) {\n            List<CommandOperation> cmds = req.getCommands(true);\n            if (cmds.size() > 1)\n              throw new SolrException(BAD_REQUEST, \"Only one command is allowed\");\n            CommandOperation c = cmds.size() == 0 ? null : cmds.get(0);\n            ApiCommand command = null;\n            String commandName = c == null ? null : c.name;\n            for (ApiCommand cmd : commands) {\n              if (Objects.equals(cmd.getName(), commandName)) {\n                command = cmd;\n                break;\n              }\n            }\n\n            if (command == null) {\n              throw new SolrException(BAD_REQUEST, \" no such command \" + c);\n            }\n            wrapParams(req, c, command, false);\n            command.invoke(req, rsp, apiHandler);\n\n          } else {\n            if (commands == null || commands.isEmpty()) {\n              rsp.add(\"error\", \"No support for : \" + method + \" at :\" + req.getPath());\n              return;\n            }\n            if (commands.size() > 1) {\n              for (ApiCommand command : commands) {\n                if (command.getName().equals(req.getPath())) {\n                  commands = Collections.singletonList(command);\n                  break;\n                }\n              }\n            }\n            wrapParams(req, new CommandOperation(\"\", Collections.EMPTY_MAP), commands.get(0), true);\n            commands.get(0).invoke(req, rsp, apiHandler);\n          }\n\n        } catch (SolrException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new SolrException(BAD_REQUEST, e);\n        } finally {\n          req.setParams(params);\n        }\n\n      }\n    };\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#getApi(V2EndPoint).mjava","pathOld":"/dev/null","sourceNew":"  private Api getApi(final V2EndPoint op) {\n    final BaseHandlerApiSupport apiHandler = this;\n    return new Api(ApiBag.getSpec(op.getSpecName())) {\n      @Override\n      public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n        SolrParams params = req.getParams();\n        SolrRequest.METHOD method = SolrRequest.METHOD.valueOf(req.getHttpMethod());\n        List<ApiCommand> commands = commandsMapping.get(method).get(op);\n        try {\n          if (method == POST) {\n            List<CommandOperation> cmds = req.getCommands(true);\n            if (cmds.size() > 1)\n              throw new SolrException(BAD_REQUEST, \"Only one command is allowed\");\n            CommandOperation c = cmds.size() == 0 ? null : cmds.get(0);\n            ApiCommand command = null;\n            String commandName = c == null ? null : c.name;\n            for (ApiCommand cmd : commands) {\n              if (Objects.equals(cmd.getName(), commandName)) {\n                command = cmd;\n                break;\n              }\n            }\n\n            if (command == null) {\n              throw new SolrException(BAD_REQUEST, \" no such command \" + c);\n            }\n            wrapParams(req, c, command, false);\n            command.invoke(req, rsp, apiHandler);\n\n          } else {\n            if (commands == null || commands.isEmpty()) {\n              rsp.add(\"error\", \"No support for : \" + method + \" at :\" + req.getPath());\n              return;\n            }\n            if (commands.size() > 1) {\n              for (ApiCommand command : commands) {\n                if (command.getName().equals(req.getPath())) {\n                  commands = Collections.singletonList(command);\n                  break;\n                }\n              }\n            }\n            wrapParams(req, new CommandOperation(\"\", Collections.EMPTY_MAP), commands.get(0), true);\n            commands.get(0).invoke(req, rsp, apiHandler);\n          }\n\n        } catch (SolrException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new SolrException(BAD_REQUEST, e);\n        } finally {\n          req.setParams(params);\n        }\n\n      }\n    };\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d21112928e2aedcec0c17025bc0e91f8fcfcf30","date":1494423367,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#getApi(V2EndPoint).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#getApi(V2EndPoint).mjava","sourceNew":"  private Api getApi(final V2EndPoint op) {\n    final BaseHandlerApiSupport apiHandler = this;\n    return new Api(ApiBag.getSpec(op.getSpecName())) {\n      @Override\n      public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n        SolrParams params = req.getParams();\n        SolrRequest.METHOD method = SolrRequest.METHOD.valueOf(req.getHttpMethod());\n        List<ApiCommand> commands = commandsMapping.get(method).get(op);\n        try {\n          if (method == POST) {\n            List<CommandOperation> cmds = req.getCommands(true);\n            if (cmds.size() > 1)\n              throw new SolrException(BAD_REQUEST, \"Only one command is allowed\");\n            CommandOperation c = cmds.size() == 0 ? null : cmds.get(0);\n            ApiCommand command = null;\n            String commandName = c == null ? null : c.name;\n            for (ApiCommand cmd : commands) {\n              if (Objects.equals(cmd.meta().getName(), commandName)) {\n                command = cmd;\n                break;\n              }\n            }\n\n            if (command == null) {\n              throw new SolrException(BAD_REQUEST, \" no such command \" + c);\n            }\n            wrapParams(req, c, command, false);\n            command.invoke(req, rsp, apiHandler);\n\n          } else {\n            if (commands == null || commands.isEmpty()) {\n              rsp.add(\"error\", \"No support for : \" + method + \" at :\" + req.getPath());\n              return;\n            }\n            if (commands.size() > 1) {\n              for (ApiCommand command : commands) {\n                if (command.meta().getName().equals(req.getPath())) {\n                  commands = Collections.singletonList(command);\n                  break;\n                }\n              }\n            }\n            wrapParams(req, new CommandOperation(\"\", Collections.EMPTY_MAP), commands.get(0), true);\n            commands.get(0).invoke(req, rsp, apiHandler);\n          }\n\n        } catch (SolrException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new SolrException(BAD_REQUEST, e);\n        } finally {\n          req.setParams(params);\n        }\n\n      }\n    };\n\n  }\n\n","sourceOld":"  private Api getApi(final V2EndPoint op) {\n    final BaseHandlerApiSupport apiHandler = this;\n    return new Api(ApiBag.getSpec(op.getSpecName())) {\n      @Override\n      public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n        SolrParams params = req.getParams();\n        SolrRequest.METHOD method = SolrRequest.METHOD.valueOf(req.getHttpMethod());\n        List<ApiCommand> commands = commandsMapping.get(method).get(op);\n        try {\n          if (method == POST) {\n            List<CommandOperation> cmds = req.getCommands(true);\n            if (cmds.size() > 1)\n              throw new SolrException(BAD_REQUEST, \"Only one command is allowed\");\n            CommandOperation c = cmds.size() == 0 ? null : cmds.get(0);\n            ApiCommand command = null;\n            String commandName = c == null ? null : c.name;\n            for (ApiCommand cmd : commands) {\n              if (Objects.equals(cmd.getName(), commandName)) {\n                command = cmd;\n                break;\n              }\n            }\n\n            if (command == null) {\n              throw new SolrException(BAD_REQUEST, \" no such command \" + c);\n            }\n            wrapParams(req, c, command, false);\n            command.invoke(req, rsp, apiHandler);\n\n          } else {\n            if (commands == null || commands.isEmpty()) {\n              rsp.add(\"error\", \"No support for : \" + method + \" at :\" + req.getPath());\n              return;\n            }\n            if (commands.size() > 1) {\n              for (ApiCommand command : commands) {\n                if (command.getName().equals(req.getPath())) {\n                  commands = Collections.singletonList(command);\n                  break;\n                }\n              }\n            }\n            wrapParams(req, new CommandOperation(\"\", Collections.EMPTY_MAP), commands.get(0), true);\n            commands.get(0).invoke(req, rsp, apiHandler);\n          }\n\n        } catch (SolrException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new SolrException(BAD_REQUEST, e);\n        } finally {\n          req.setParams(params);\n        }\n\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#getApi(V2EndPoint).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#getApi(V2EndPoint).mjava","sourceNew":"  private Api getApi(final V2EndPoint op) {\n    final BaseHandlerApiSupport apiHandler = this;\n    return new Api(ApiBag.getSpec(op.getSpecName())) {\n      @Override\n      public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n        SolrParams params = req.getParams();\n        SolrRequest.METHOD method = SolrRequest.METHOD.valueOf(req.getHttpMethod());\n        List<ApiCommand> commands = commandsMapping.get(method).get(op);\n        try {\n          if (method == POST) {\n            List<CommandOperation> cmds = req.getCommands(true);\n            if (cmds.size() > 1)\n              throw new SolrException(BAD_REQUEST, \"Only one command is allowed\");\n            CommandOperation c = cmds.size() == 0 ? null : cmds.get(0);\n            ApiCommand command = null;\n            String commandName = c == null ? null : c.name;\n            for (ApiCommand cmd : commands) {\n              if (Objects.equals(cmd.meta().getName(), commandName)) {\n                command = cmd;\n                break;\n              }\n            }\n\n            if (command == null) {\n              throw new SolrException(BAD_REQUEST, \" no such command \" + c);\n            }\n            wrapParams(req, c, command, false);\n            command.invoke(req, rsp, apiHandler);\n\n          } else {\n            if (commands == null || commands.isEmpty()) {\n              rsp.add(\"error\", \"No support for : \" + method + \" at :\" + req.getPath());\n              return;\n            }\n            if (commands.size() > 1) {\n              for (ApiCommand command : commands) {\n                if (command.meta().getName().equals(req.getPath())) {\n                  commands = Collections.singletonList(command);\n                  break;\n                }\n              }\n            }\n            wrapParams(req, new CommandOperation(\"\", Collections.EMPTY_MAP), commands.get(0), true);\n            commands.get(0).invoke(req, rsp, apiHandler);\n          }\n\n        } catch (SolrException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new SolrException(BAD_REQUEST, e);\n        } finally {\n          req.setParams(params);\n        }\n\n      }\n    };\n\n  }\n\n","sourceOld":"  private Api getApi(final V2EndPoint op) {\n    final BaseHandlerApiSupport apiHandler = this;\n    return new Api(ApiBag.getSpec(op.getSpecName())) {\n      @Override\n      public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n        SolrParams params = req.getParams();\n        SolrRequest.METHOD method = SolrRequest.METHOD.valueOf(req.getHttpMethod());\n        List<ApiCommand> commands = commandsMapping.get(method).get(op);\n        try {\n          if (method == POST) {\n            List<CommandOperation> cmds = req.getCommands(true);\n            if (cmds.size() > 1)\n              throw new SolrException(BAD_REQUEST, \"Only one command is allowed\");\n            CommandOperation c = cmds.size() == 0 ? null : cmds.get(0);\n            ApiCommand command = null;\n            String commandName = c == null ? null : c.name;\n            for (ApiCommand cmd : commands) {\n              if (Objects.equals(cmd.getName(), commandName)) {\n                command = cmd;\n                break;\n              }\n            }\n\n            if (command == null) {\n              throw new SolrException(BAD_REQUEST, \" no such command \" + c);\n            }\n            wrapParams(req, c, command, false);\n            command.invoke(req, rsp, apiHandler);\n\n          } else {\n            if (commands == null || commands.isEmpty()) {\n              rsp.add(\"error\", \"No support for : \" + method + \" at :\" + req.getPath());\n              return;\n            }\n            if (commands.size() > 1) {\n              for (ApiCommand command : commands) {\n                if (command.getName().equals(req.getPath())) {\n                  commands = Collections.singletonList(command);\n                  break;\n                }\n              }\n            }\n            wrapParams(req, new CommandOperation(\"\", Collections.EMPTY_MAP), commands.get(0), true);\n            commands.get(0).invoke(req, rsp, apiHandler);\n          }\n\n        } catch (SolrException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new SolrException(BAD_REQUEST, e);\n        } finally {\n          req.setParams(params);\n        }\n\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5174b677b2536f97776e6b67e8c10ae5c66e6fa2","date":1496916595,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#getApi(V2EndPoint).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#getApi(V2EndPoint).mjava","sourceNew":"  private Api getApi(final V2EndPoint op) {\n    final BaseHandlerApiSupport apiHandler = this;\n    return new Api(Utils.getSpec(op.getSpecName())) {\n      @Override\n      public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n        SolrParams params = req.getParams();\n        SolrRequest.METHOD method = SolrRequest.METHOD.valueOf(req.getHttpMethod());\n        List<ApiCommand> commands = commandsMapping.get(method).get(op);\n        try {\n          if (method == POST) {\n            List<CommandOperation> cmds = req.getCommands(true);\n            if (cmds.size() > 1)\n              throw new SolrException(BAD_REQUEST, \"Only one command is allowed\");\n            CommandOperation c = cmds.size() == 0 ? null : cmds.get(0);\n            ApiCommand command = null;\n            String commandName = c == null ? null : c.name;\n            for (ApiCommand cmd : commands) {\n              if (Objects.equals(cmd.meta().getName(), commandName)) {\n                command = cmd;\n                break;\n              }\n            }\n\n            if (command == null) {\n              throw new SolrException(BAD_REQUEST, \" no such command \" + c);\n            }\n            wrapParams(req, c, command, false);\n            command.invoke(req, rsp, apiHandler);\n\n          } else {\n            if (commands == null || commands.isEmpty()) {\n              rsp.add(\"error\", \"No support for : \" + method + \" at :\" + req.getPath());\n              return;\n            }\n            if (commands.size() > 1) {\n              for (ApiCommand command : commands) {\n                if (command.meta().getName().equals(req.getPath())) {\n                  commands = Collections.singletonList(command);\n                  break;\n                }\n              }\n            }\n            wrapParams(req, new CommandOperation(\"\", Collections.EMPTY_MAP), commands.get(0), true);\n            commands.get(0).invoke(req, rsp, apiHandler);\n          }\n\n        } catch (SolrException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new SolrException(BAD_REQUEST, e);\n        } finally {\n          req.setParams(params);\n        }\n\n      }\n    };\n\n  }\n\n","sourceOld":"  private Api getApi(final V2EndPoint op) {\n    final BaseHandlerApiSupport apiHandler = this;\n    return new Api(ApiBag.getSpec(op.getSpecName())) {\n      @Override\n      public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n        SolrParams params = req.getParams();\n        SolrRequest.METHOD method = SolrRequest.METHOD.valueOf(req.getHttpMethod());\n        List<ApiCommand> commands = commandsMapping.get(method).get(op);\n        try {\n          if (method == POST) {\n            List<CommandOperation> cmds = req.getCommands(true);\n            if (cmds.size() > 1)\n              throw new SolrException(BAD_REQUEST, \"Only one command is allowed\");\n            CommandOperation c = cmds.size() == 0 ? null : cmds.get(0);\n            ApiCommand command = null;\n            String commandName = c == null ? null : c.name;\n            for (ApiCommand cmd : commands) {\n              if (Objects.equals(cmd.meta().getName(), commandName)) {\n                command = cmd;\n                break;\n              }\n            }\n\n            if (command == null) {\n              throw new SolrException(BAD_REQUEST, \" no such command \" + c);\n            }\n            wrapParams(req, c, command, false);\n            command.invoke(req, rsp, apiHandler);\n\n          } else {\n            if (commands == null || commands.isEmpty()) {\n              rsp.add(\"error\", \"No support for : \" + method + \" at :\" + req.getPath());\n              return;\n            }\n            if (commands.size() > 1) {\n              for (ApiCommand command : commands) {\n                if (command.meta().getName().equals(req.getPath())) {\n                  commands = Collections.singletonList(command);\n                  break;\n                }\n              }\n            }\n            wrapParams(req, new CommandOperation(\"\", Collections.EMPTY_MAP), commands.get(0), true);\n            commands.get(0).invoke(req, rsp, apiHandler);\n          }\n\n        } catch (SolrException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new SolrException(BAD_REQUEST, e);\n        } finally {\n          req.setParams(params);\n        }\n\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#getApi(V2EndPoint).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#getApi(V2EndPoint).mjava","sourceNew":"  private Api getApi(final V2EndPoint op) {\n    final BaseHandlerApiSupport apiHandler = this;\n    return new Api(Utils.getSpec(op.getSpecName())) {\n      @Override\n      public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n        SolrParams params = req.getParams();\n        SolrRequest.METHOD method = SolrRequest.METHOD.valueOf(req.getHttpMethod());\n        List<ApiCommand> commands = commandsMapping.get(method).get(op);\n        try {\n          if (method == POST) {\n            List<CommandOperation> cmds = req.getCommands(true);\n            if (cmds.size() > 1)\n              throw new SolrException(BAD_REQUEST, \"Only one command is allowed\");\n            CommandOperation c = cmds.size() == 0 ? null : cmds.get(0);\n            ApiCommand command = null;\n            String commandName = c == null ? null : c.name;\n            for (ApiCommand cmd : commands) {\n              if (Objects.equals(cmd.meta().getName(), commandName)) {\n                command = cmd;\n                break;\n              }\n            }\n\n            if (command == null) {\n              throw new SolrException(BAD_REQUEST, \" no such command \" + c);\n            }\n            wrapParams(req, c, command, false);\n            command.invoke(req, rsp, apiHandler);\n\n          } else {\n            if (commands == null || commands.isEmpty()) {\n              rsp.add(\"error\", \"No support for : \" + method + \" at :\" + req.getPath());\n              return;\n            }\n            if (commands.size() > 1) {\n              for (ApiCommand command : commands) {\n                if (command.meta().getName().equals(req.getPath())) {\n                  commands = Collections.singletonList(command);\n                  break;\n                }\n              }\n            }\n            wrapParams(req, new CommandOperation(\"\", Collections.EMPTY_MAP), commands.get(0), true);\n            commands.get(0).invoke(req, rsp, apiHandler);\n          }\n\n        } catch (SolrException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new SolrException(BAD_REQUEST, e);\n        } finally {\n          req.setParams(params);\n        }\n\n      }\n    };\n\n  }\n\n","sourceOld":"  private Api getApi(final V2EndPoint op) {\n    final BaseHandlerApiSupport apiHandler = this;\n    return new Api(ApiBag.getSpec(op.getSpecName())) {\n      @Override\n      public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n        SolrParams params = req.getParams();\n        SolrRequest.METHOD method = SolrRequest.METHOD.valueOf(req.getHttpMethod());\n        List<ApiCommand> commands = commandsMapping.get(method).get(op);\n        try {\n          if (method == POST) {\n            List<CommandOperation> cmds = req.getCommands(true);\n            if (cmds.size() > 1)\n              throw new SolrException(BAD_REQUEST, \"Only one command is allowed\");\n            CommandOperation c = cmds.size() == 0 ? null : cmds.get(0);\n            ApiCommand command = null;\n            String commandName = c == null ? null : c.name;\n            for (ApiCommand cmd : commands) {\n              if (Objects.equals(cmd.meta().getName(), commandName)) {\n                command = cmd;\n                break;\n              }\n            }\n\n            if (command == null) {\n              throw new SolrException(BAD_REQUEST, \" no such command \" + c);\n            }\n            wrapParams(req, c, command, false);\n            command.invoke(req, rsp, apiHandler);\n\n          } else {\n            if (commands == null || commands.isEmpty()) {\n              rsp.add(\"error\", \"No support for : \" + method + \" at :\" + req.getPath());\n              return;\n            }\n            if (commands.size() > 1) {\n              for (ApiCommand command : commands) {\n                if (command.meta().getName().equals(req.getPath())) {\n                  commands = Collections.singletonList(command);\n                  break;\n                }\n              }\n            }\n            wrapParams(req, new CommandOperation(\"\", Collections.EMPTY_MAP), commands.get(0), true);\n            commands.get(0).invoke(req, rsp, apiHandler);\n          }\n\n        } catch (SolrException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new SolrException(BAD_REQUEST, e);\n        } finally {\n          req.setParams(params);\n        }\n\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#getApi(V2EndPoint).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#getApi(V2EndPoint).mjava","sourceNew":"  private Api getApi(final V2EndPoint op) {\n    final BaseHandlerApiSupport apiHandler = this;\n    return new Api(Utils.getSpec(op.getSpecName())) {\n      @Override\n      public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n        SolrParams params = req.getParams();\n        SolrRequest.METHOD method = SolrRequest.METHOD.valueOf(req.getHttpMethod());\n        List<ApiCommand> commands = commandsMapping.get(method).get(op);\n        try {\n          if (method == POST) {\n            List<CommandOperation> cmds = req.getCommands(true);\n            if (cmds.size() > 1)\n              throw new SolrException(BAD_REQUEST, \"Only one command is allowed\");\n            CommandOperation c = cmds.size() == 0 ? null : cmds.get(0);\n            ApiCommand command = null;\n            String commandName = c == null ? null : c.name;\n            for (ApiCommand cmd : commands) {\n              if (Objects.equals(cmd.meta().getName(), commandName)) {\n                command = cmd;\n                break;\n              }\n            }\n\n            if (command == null) {\n              throw new SolrException(BAD_REQUEST, \" no such command \" + c);\n            }\n            wrapParams(req, c, command, false);\n            command.invoke(req, rsp, apiHandler);\n\n          } else {\n            if (commands == null || commands.isEmpty()) {\n              rsp.add(\"error\", \"No support for : \" + method + \" at :\" + req.getPath());\n              return;\n            }\n            if (commands.size() > 1) {\n              for (ApiCommand command : commands) {\n                if (command.meta().getName().equals(req.getPath())) {\n                  commands = Collections.singletonList(command);\n                  break;\n                }\n              }\n            }\n            wrapParams(req, new CommandOperation(\"\", Collections.EMPTY_MAP), commands.get(0), true);\n            commands.get(0).invoke(req, rsp, apiHandler);\n          }\n\n        } catch (SolrException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new SolrException(BAD_REQUEST, e);\n        } finally {\n          req.setParams(params);\n        }\n\n      }\n    };\n\n  }\n\n","sourceOld":"  private Api getApi(final V2EndPoint op) {\n    final BaseHandlerApiSupport apiHandler = this;\n    return new Api(ApiBag.getSpec(op.getSpecName())) {\n      @Override\n      public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n        SolrParams params = req.getParams();\n        SolrRequest.METHOD method = SolrRequest.METHOD.valueOf(req.getHttpMethod());\n        List<ApiCommand> commands = commandsMapping.get(method).get(op);\n        try {\n          if (method == POST) {\n            List<CommandOperation> cmds = req.getCommands(true);\n            if (cmds.size() > 1)\n              throw new SolrException(BAD_REQUEST, \"Only one command is allowed\");\n            CommandOperation c = cmds.size() == 0 ? null : cmds.get(0);\n            ApiCommand command = null;\n            String commandName = c == null ? null : c.name;\n            for (ApiCommand cmd : commands) {\n              if (Objects.equals(cmd.meta().getName(), commandName)) {\n                command = cmd;\n                break;\n              }\n            }\n\n            if (command == null) {\n              throw new SolrException(BAD_REQUEST, \" no such command \" + c);\n            }\n            wrapParams(req, c, command, false);\n            command.invoke(req, rsp, apiHandler);\n\n          } else {\n            if (commands == null || commands.isEmpty()) {\n              rsp.add(\"error\", \"No support for : \" + method + \" at :\" + req.getPath());\n              return;\n            }\n            if (commands.size() > 1) {\n              for (ApiCommand command : commands) {\n                if (command.meta().getName().equals(req.getPath())) {\n                  commands = Collections.singletonList(command);\n                  break;\n                }\n              }\n            }\n            wrapParams(req, new CommandOperation(\"\", Collections.EMPTY_MAP), commands.get(0), true);\n            commands.get(0).invoke(req, rsp, apiHandler);\n          }\n\n        } catch (SolrException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new SolrException(BAD_REQUEST, e);\n        } finally {\n          req.setParams(params);\n        }\n\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26de7f978abe868807e55377d3e5837c0a7883d3","date":1516908224,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#getApi(V2EndPoint).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/BaseHandlerApiSupport#getApi(V2EndPoint).mjava","sourceNew":"  private Api getApi(final V2EndPoint op) {\n    final BaseHandlerApiSupport apiHandler = this;\n    return new Api(Utils.getSpec(op.getSpecName())) {\n      @Override\n      public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n        SolrParams params = req.getParams();\n        SolrRequest.METHOD method = SolrRequest.METHOD.valueOf(req.getHttpMethod());\n        List<ApiCommand> commands = commandsMapping.get(method).get(op);\n        try {\n          if (method == POST) {\n            List<CommandOperation> cmds = req.getCommands(true);\n            if (cmds.size() > 1)\n              throw new SolrException(BAD_REQUEST, \"Only one command is allowed\");\n            CommandOperation c = cmds.size() == 0 ? null : cmds.get(0);\n            ApiCommand command = null;\n            String commandName = c == null ? null : c.name;\n            for (ApiCommand cmd : commands) {\n              if (Objects.equals(cmd.meta().getName(), commandName)) {\n                command = cmd;\n                break;\n              }\n            }\n\n            if (command == null) {\n              throw new SolrException(BAD_REQUEST, \" no such command \" + c);\n            }\n            wrapParams(req, c, command, false);\n            command.invoke(req, rsp, apiHandler);\n\n          } else {\n            if (commands == null || commands.isEmpty()) {\n              rsp.add(\"error\", \"No support for : \" + method + \" at :\" + req.getPath());\n              return;\n            }\n            if (commands.size() > 1) {\n              for (ApiCommand command : commands) {\n                if (command.meta().getName().equals(req.getPath())) {\n                  commands = Collections.singletonList(command);\n                  break;\n                }\n              }\n            }\n            wrapParams(req, new CommandOperation(\"\", Collections.EMPTY_MAP), commands.get(0), true);\n            commands.get(0).invoke(req, rsp, apiHandler);\n          }\n\n        } catch (SolrException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new SolrException(BAD_REQUEST, e); //TODO BAD_REQUEST is a wild guess; should we flip the default?  fail here to investigate how this happens in tests\n        } finally {\n          req.setParams(params);\n        }\n\n      }\n    };\n\n  }\n\n","sourceOld":"  private Api getApi(final V2EndPoint op) {\n    final BaseHandlerApiSupport apiHandler = this;\n    return new Api(Utils.getSpec(op.getSpecName())) {\n      @Override\n      public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n        SolrParams params = req.getParams();\n        SolrRequest.METHOD method = SolrRequest.METHOD.valueOf(req.getHttpMethod());\n        List<ApiCommand> commands = commandsMapping.get(method).get(op);\n        try {\n          if (method == POST) {\n            List<CommandOperation> cmds = req.getCommands(true);\n            if (cmds.size() > 1)\n              throw new SolrException(BAD_REQUEST, \"Only one command is allowed\");\n            CommandOperation c = cmds.size() == 0 ? null : cmds.get(0);\n            ApiCommand command = null;\n            String commandName = c == null ? null : c.name;\n            for (ApiCommand cmd : commands) {\n              if (Objects.equals(cmd.meta().getName(), commandName)) {\n                command = cmd;\n                break;\n              }\n            }\n\n            if (command == null) {\n              throw new SolrException(BAD_REQUEST, \" no such command \" + c);\n            }\n            wrapParams(req, c, command, false);\n            command.invoke(req, rsp, apiHandler);\n\n          } else {\n            if (commands == null || commands.isEmpty()) {\n              rsp.add(\"error\", \"No support for : \" + method + \" at :\" + req.getPath());\n              return;\n            }\n            if (commands.size() > 1) {\n              for (ApiCommand command : commands) {\n                if (command.meta().getName().equals(req.getPath())) {\n                  commands = Collections.singletonList(command);\n                  break;\n                }\n              }\n            }\n            wrapParams(req, new CommandOperation(\"\", Collections.EMPTY_MAP), commands.get(0), true);\n            commands.get(0).invoke(req, rsp, apiHandler);\n          }\n\n        } catch (SolrException e) {\n          throw e;\n        } catch (Exception e) {\n          throw new SolrException(BAD_REQUEST, e);\n        } finally {\n          req.setParams(params);\n        }\n\n      }\n    };\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2d21112928e2aedcec0c17025bc0e91f8fcfcf30":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","2d21112928e2aedcec0c17025bc0e91f8fcfcf30"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"26de7f978abe868807e55377d3e5837c0a7883d3":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["26de7f978abe868807e55377d3e5837c0a7883d3"]},"commit2Childs":{"2d21112928e2aedcec0c17025bc0e91f8fcfcf30":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["2d21112928e2aedcec0c17025bc0e91f8fcfcf30","e9017cf144952056066919f1ebc7897ff9bd71b1","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"26de7f978abe868807e55377d3e5837c0a7883d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["26de7f978abe868807e55377d3e5837c0a7883d3"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}