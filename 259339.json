{"path":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#setMaxMergeWriteMBPerSec(Double).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#setMaxMergeWriteMBPerSec(Double).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/FSDirectory#setMaxMergeWriteMBPerSec(Double).mjava","sourceNew":"  /** Sets the maximum (approx) MB/sec allowed by all write\n   *  IO performed by merging.  Pass null to have no limit.\n   *\n   *  <p><b>NOTE</b>: if merges are already running there is\n   *  no guarantee this new rate will apply to them; it will\n   *  only apply for certain to new merges.\n   *\n   * @lucene.experimental */\n  public void setMaxMergeWriteMBPerSec(Double mbPerSec) {\n    RateLimiter limiter = mergeWriteRateLimiter;\n    if (mbPerSec == null) {\n      if (limiter != null) {\n        limiter.setMbPerSec(Double.MAX_VALUE);\n        mergeWriteRateLimiter = null;\n      }\n    } else if (limiter != null) {\n      limiter.setMbPerSec(mbPerSec);\n    } else {\n      mergeWriteRateLimiter = new RateLimiter(mbPerSec);\n    }\n  }\n\n","sourceOld":"  /** Sets the maximum (approx) MB/sec allowed by all write\n   *  IO performed by merging.  Pass null to have no limit.\n   *\n   *  <p><b>NOTE</b>: if merges are already running there is\n   *  no guarantee this new rate will apply to them; it will\n   *  only apply for certain to new merges.\n   *\n   * @lucene.experimental */\n  public void setMaxMergeWriteMBPerSec(Double mbPerSec) {\n    RateLimiter limiter = mergeWriteRateLimiter;\n    if (mbPerSec == null) {\n      if (limiter != null) {\n        limiter.setMbPerSec(Double.MAX_VALUE);\n        mergeWriteRateLimiter = null;\n      }\n    } else if (limiter != null) {\n      limiter.setMbPerSec(mbPerSec);\n    } else {\n      mergeWriteRateLimiter = new RateLimiter(mbPerSec);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4583d4aac44f313f9af74ab6d81baab3f976232","date":1352409883,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#setMaxMergeWriteMBPerSec(Double).mjava","sourceNew":null,"sourceOld":"  /** Sets the maximum (approx) MB/sec allowed by all write\n   *  IO performed by merging.  Pass null to have no limit.\n   *\n   *  <p><b>NOTE</b>: if merges are already running there is\n   *  no guarantee this new rate will apply to them; it will\n   *  only apply for certain to new merges.\n   *\n   * @lucene.experimental */\n  public void setMaxMergeWriteMBPerSec(Double mbPerSec) {\n    RateLimiter limiter = mergeWriteRateLimiter;\n    if (mbPerSec == null) {\n      if (limiter != null) {\n        limiter.setMbPerSec(Double.MAX_VALUE);\n        mergeWriteRateLimiter = null;\n      }\n    } else if (limiter != null) {\n      limiter.setMbPerSec(mbPerSec);\n    } else {\n      mergeWriteRateLimiter = new RateLimiter(mbPerSec);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#setMaxMergeWriteMBPerSec(Double).mjava","sourceNew":null,"sourceOld":"  /** Sets the maximum (approx) MB/sec allowed by all write\n   *  IO performed by merging.  Pass null to have no limit.\n   *\n   *  <p><b>NOTE</b>: if merges are already running there is\n   *  no guarantee this new rate will apply to them; it will\n   *  only apply for certain to new merges.\n   *\n   * @lucene.experimental */\n  public void setMaxMergeWriteMBPerSec(Double mbPerSec) {\n    RateLimiter limiter = mergeWriteRateLimiter;\n    if (mbPerSec == null) {\n      if (limiter != null) {\n        limiter.setMbPerSec(Double.MAX_VALUE);\n        mergeWriteRateLimiter = null;\n      }\n    } else if (limiter != null) {\n      limiter.setMbPerSec(mbPerSec);\n    } else {\n      mergeWriteRateLimiter = new RateLimiter(mbPerSec);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e4583d4aac44f313f9af74ab6d81baab3f976232":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","e4583d4aac44f313f9af74ab6d81baab3f976232"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e4583d4aac44f313f9af74ab6d81baab3f976232"]},"commit2Childs":{"e4583d4aac44f313f9af74ab6d81baab3f976232":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e4583d4aac44f313f9af74ab6d81baab3f976232","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}