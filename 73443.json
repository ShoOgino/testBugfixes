{"path":"lucene/src/java/org/apache/lucene/search/Filter#getDocIdSet(AtomicReaderContext).mjava","commits":[{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Filter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Filter#getDocIdSet(ReaderContext).mjava","sourceNew":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param context a {@link AtomicReaderContext} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader info does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *         The provided context is always an atomic context, so you can call \n   *         {@link IndexReader#fields()} or  {@link IndexReader#getDeletedDocs()}\n   *         on the context's reader, for example.\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public abstract DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException;\n\n","sourceOld":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param context a {@link ReaderContext} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader info does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *         The provided context is always an atomic context, so you can call \n   *         {@link IndexReader#fields()} or  {@link IndexReader#getDeletedDocs()}\n   *         on the context's reader, for example.\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  // TODO make this context an AtomicContext\n  public abstract DocIdSet getDocIdSet(ReaderContext context) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Filter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param context a {@link AtomicReaderContext} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader info does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *         The provided context is always an atomic context, so you can call \n   *         {@link IndexReader#fields()} or  {@link IndexReader#getDeletedDocs()}\n   *         on the context's reader, for example.\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public abstract DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Filter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param context a {@link AtomicReaderContext} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader info does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *         The provided context is always an atomic context, so you can call \n   *         {@link IndexReader#fields()} or  {@link IndexReader#getDeletedDocs()}\n   *         on the context's reader, for example.\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public abstract DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Filter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Filter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param context a {@link AtomicReaderContext} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader info does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *         The provided context is always an atomic context, so you can call \n   *         {@link IndexReader#fields()} or {@link IndexReader#getLiveDocs()}\n   *         on the context's reader, for example.\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public abstract DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException;\n\n","sourceOld":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param context a {@link AtomicReaderContext} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader info does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *         The provided context is always an atomic context, so you can call \n   *         {@link IndexReader#fields()} or  {@link IndexReader#getDeletedDocs()}\n   *         on the context's reader, for example.\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public abstract DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Filter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Filter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param context a {@link AtomicReaderContext} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader info does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *         The provided context is always an atomic context, so you can call \n   *         {@link IndexReader#fields()} or {@link IndexReader#getLiveDocs()}\n   *         on the context's reader, for example.\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public abstract DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException;\n\n","sourceOld":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param context a {@link AtomicReaderContext} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader info does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *         The provided context is always an atomic context, so you can call \n   *         {@link IndexReader#fields()} or  {@link IndexReader#getDeletedDocs()}\n   *         on the context's reader, for example.\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public abstract DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Filter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Filter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param context a {@link AtomicReaderContext} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader info does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *         The provided context is always an atomic context, so you can call \n   *         {@link IndexReader#fields()} or {@link IndexReader#getLiveDocs()}\n   *         on the context's reader, for example.\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public abstract DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException;\n\n","sourceOld":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param context a {@link AtomicReaderContext} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader info does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *         The provided context is always an atomic context, so you can call \n   *         {@link IndexReader#fields()} or  {@link IndexReader#getDeletedDocs()}\n   *         on the context's reader, for example.\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public abstract DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Filter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Filter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param context a {@link AtomicReaderContext} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader info does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *         The provided context is always an atomic context, so you can call \n   *         {@link IndexReader#fields()}\n   *         on the context's reader, for example.\n   *\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   */\n  public abstract DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException;\n\n","sourceOld":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param context a {@link AtomicReaderContext} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader info does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *         The provided context is always an atomic context, so you can call \n   *         {@link IndexReader#fields()} or {@link IndexReader#getLiveDocs()}\n   *         on the context's reader, for example.\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   * \n   * @see DocIdBitSet\n   */\n  public abstract DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6620df8541b174097b1133a4fc370adb2e570524"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["6620df8541b174097b1133a4fc370adb2e570524","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["29ef99d61cda9641b6250bf9567329a6e65f901d","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","868da859b43505d9d2a023bfeae6dd0c795f5295","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","d083e83f225b11e5fdd900e83d26ddb385b6955c","868da859b43505d9d2a023bfeae6dd0c795f5295","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}