{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava15().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava15().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava15().mjava","sourceNew":"  @Test\n  public void testFillJava15() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance(TEST_VERSION_CURRENT);\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(2, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(1, buffer.getLength());\n    assertEquals(\"\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n  }\n\n","sourceOld":"  @Test\n  public void testFillJava15() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance(TEST_VERSION_CURRENT);\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(2, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(1, buffer.getLength());\n    assertEquals(\"\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704","date":1371043069,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava15().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava15().mjava","sourceNew":"  @Test\n  public void testFillJava15() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance(TEST_VERSION_CURRENT);\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(3, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(0, buffer.getLength());\n  }\n\n","sourceOld":"  @Test\n  public void testFillJava15() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance(TEST_VERSION_CURRENT);\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(2, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(1, buffer.getLength());\n    assertEquals(\"\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava15().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava15().mjava","sourceNew":"  @Test\n  public void testFillJava15() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance();\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(3, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(0, buffer.getLength());\n  }\n\n","sourceOld":"  @Test\n  public void testFillJava15() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance(TEST_VERSION_CURRENT);\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(3, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(0, buffer.getLength());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava15().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava15().mjava","sourceNew":"  @Test\n  public void testFillJava15() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance(TEST_VERSION_CURRENT);\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(3, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(0, buffer.getLength());\n  }\n\n","sourceOld":"  @Test\n  public void testFillJava15() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance();\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(3, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(0, buffer.getLength());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava15().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava15().mjava","sourceNew":"  @Test\n  public void testFillJava15() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance();\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(3, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(0, buffer.getLength());\n  }\n\n","sourceOld":"  @Test\n  public void testFillJava15() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance(TEST_VERSION_CURRENT);\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(3, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(0, buffer.getLength());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","date":1465824262,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFill().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava15().mjava","sourceNew":"  @Test\n  public void testFill() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(CharacterUtils.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(CharacterUtils.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(CharacterUtils.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertFalse(CharacterUtils.fill(buffer, reader));\n    assertEquals(3, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(CharacterUtils.fill(buffer, reader));\n    assertEquals(0, buffer.getLength());\n  }\n\n","sourceOld":"  @Test\n  public void testFillJava15() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance();\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(3, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(0, buffer.getLength());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFill().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava15().mjava","sourceNew":"  @Test\n  public void testFill() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(CharacterUtils.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(CharacterUtils.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(CharacterUtils.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertFalse(CharacterUtils.fill(buffer, reader));\n    assertEquals(3, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(CharacterUtils.fill(buffer, reader));\n    assertEquals(0, buffer.getLength());\n  }\n\n","sourceOld":"  @Test\n  public void testFillJava15() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance();\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(3, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(0, buffer.getLength());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharacterUtils#testFillJava15().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testFillJava15() throws IOException {\n    String input = \"1234\\ud801\\udc1c789123\\ud801\\ud801\\udc1c\\ud801\";\n    CharacterUtils instance = CharacterUtils.getInstance();\n    Reader reader = new StringReader(input);\n    CharacterBuffer buffer = CharacterUtils.newCharacterBuffer(5);\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"1234\", new String(buffer.getBuffer(), buffer.getOffset(),\n        buffer.getLength()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(5, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c789\", new String(buffer.getBuffer()));\n    assertTrue(instance.fill(buffer, reader));\n    assertEquals(4, buffer.getLength());\n    assertEquals(\"123\\ud801\", new String(buffer.getBuffer(),\n        buffer.getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(3, buffer.getLength());\n    assertEquals(\"\\ud801\\udc1c\\ud801\", new String(buffer.getBuffer(), buffer\n        .getOffset(), buffer.getLength()));\n    assertFalse(instance.fill(buffer, reader));\n    assertEquals(0, buffer.getLength());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["379db3ad24c4f0214f30a122265a6d6be003a99d","fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["379db3ad24c4f0214f30a122265a6d6be003a99d","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704"],"bd095de1c7ac6b6ab3a330b5fbe8cb37e4f34704":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["fba4cd6a5aae0bc17cc1cbf1e84b0ae32ee039dc","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}