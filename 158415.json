{"path":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testStarParsing().mjava","commits":[{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testStarParsing().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestQPHelper#testStarParsing().mjava","sourceNew":"  public void testStarParsing() throws Exception {\n    // final int[] type = new int[1];\n    // StandardQueryParser qp = new StandardQueryParser(\"field\", new\n    // WhitespaceAnalyzer()) {\n    // protected Query getWildcardQuery(String field, String termStr) throws\n    // ParseException {\n    // // override error checking of superclass\n    // type[0]=1;\n    // return new TermQuery(new Term(field,termStr));\n    // }\n    // protected Query getPrefixQuery(String field, String termStr) throws\n    // ParseException {\n    // // override error checking of superclass\n    // type[0]=2;\n    // return new TermQuery(new Term(field,termStr));\n    // }\n    //\n    // protected Query getFieldQuery(String field, String queryText) throws\n    // ParseException {\n    // type[0]=3;\n    // return super.getFieldQuery(field, queryText);\n    // }\n    // };\n    //\n    // TermQuery tq;\n    //\n    // tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    // assertEquals(\"zoo\",tq.getTerm().text());\n    // assertEquals(2,type[0]);\n    //\n    // tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    // assertEquals(\"zoo\",tq.getTerm().text());\n    // assertEquals(2,type[0]);\n    // assertEquals(tq.getBoost(),2,0);\n    //\n    // tq = (TermQuery)qp.parse(\"foo:*\");\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]); // could be a valid prefix query in the\n    // future too\n    //\n    // tq = (TermQuery)qp.parse(\"foo:*^2\");\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]);\n    // assertEquals(tq.getBoost(),2,0);\n    //\n    // tq = (TermQuery)qp.parse(\"*:foo\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"foo\",tq.getTerm().text());\n    // assertEquals(3,type[0]);\n    //\n    // tq = (TermQuery)qp.parse(\"*:*\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]); // could be handled as a prefix query in the\n    // future\n    //\n    // tq = (TermQuery)qp.parse(\"(*:*)\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":"  public void testStarParsing() throws Exception {\n    // final int[] type = new int[1];\n    // OriginalQueryParserHelper qp = new OriginalQueryParserHelper(\"field\", new\n    // WhitespaceAnalyzer()) {\n    // protected Query getWildcardQuery(String field, String termStr) throws\n    // ParseException {\n    // // override error checking of superclass\n    // type[0]=1;\n    // return new TermQuery(new Term(field,termStr));\n    // }\n    // protected Query getPrefixQuery(String field, String termStr) throws\n    // ParseException {\n    // // override error checking of superclass\n    // type[0]=2;\n    // return new TermQuery(new Term(field,termStr));\n    // }\n    //\n    // protected Query getFieldQuery(String field, String queryText) throws\n    // ParseException {\n    // type[0]=3;\n    // return super.getFieldQuery(field, queryText);\n    // }\n    // };\n    //\n    // TermQuery tq;\n    //\n    // tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    // assertEquals(\"zoo\",tq.getTerm().text());\n    // assertEquals(2,type[0]);\n    //\n    // tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    // assertEquals(\"zoo\",tq.getTerm().text());\n    // assertEquals(2,type[0]);\n    // assertEquals(tq.getBoost(),2,0);\n    //\n    // tq = (TermQuery)qp.parse(\"foo:*\");\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]); // could be a valid prefix query in the\n    // future too\n    //\n    // tq = (TermQuery)qp.parse(\"foo:*^2\");\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]);\n    // assertEquals(tq.getBoost(),2,0);\n    //\n    // tq = (TermQuery)qp.parse(\"*:foo\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"foo\",tq.getTerm().text());\n    // assertEquals(3,type[0]);\n    //\n    // tq = (TermQuery)qp.parse(\"*:*\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]); // could be handled as a prefix query in the\n    // future\n    //\n    // tq = (TermQuery)qp.parse(\"(*:*)\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testStarParsing().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQPHelper#testStarParsing().mjava","sourceNew":"  public void testStarParsing() throws Exception {\n    // final int[] type = new int[1];\n    // StandardQueryParser qp = new StandardQueryParser(\"field\", new\n    // WhitespaceAnalyzer()) {\n    // protected Query getWildcardQuery(String field, String termStr) throws\n    // ParseException {\n    // // override error checking of superclass\n    // type[0]=1;\n    // return new TermQuery(new Term(field,termStr));\n    // }\n    // protected Query getPrefixQuery(String field, String termStr) throws\n    // ParseException {\n    // // override error checking of superclass\n    // type[0]=2;\n    // return new TermQuery(new Term(field,termStr));\n    // }\n    //\n    // protected Query getFieldQuery(String field, String queryText) throws\n    // ParseException {\n    // type[0]=3;\n    // return super.getFieldQuery(field, queryText);\n    // }\n    // };\n    //\n    // TermQuery tq;\n    //\n    // tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    // assertEquals(\"zoo\",tq.getTerm().text());\n    // assertEquals(2,type[0]);\n    //\n    // tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    // assertEquals(\"zoo\",tq.getTerm().text());\n    // assertEquals(2,type[0]);\n    // assertEquals(tq.getBoost(),2,0);\n    //\n    // tq = (TermQuery)qp.parse(\"foo:*\");\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]); // could be a valid prefix query in the\n    // future too\n    //\n    // tq = (TermQuery)qp.parse(\"foo:*^2\");\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]);\n    // assertEquals(tq.getBoost(),2,0);\n    //\n    // tq = (TermQuery)qp.parse(\"*:foo\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"foo\",tq.getTerm().text());\n    // assertEquals(3,type[0]);\n    //\n    // tq = (TermQuery)qp.parse(\"*:*\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]); // could be handled as a prefix query in the\n    // future\n    //\n    // tq = (TermQuery)qp.parse(\"(*:*)\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]);\n\n  }\n\n","sourceOld":"  public void testStarParsing() throws Exception {\n    // final int[] type = new int[1];\n    // StandardQueryParser qp = new StandardQueryParser(\"field\", new\n    // WhitespaceAnalyzer()) {\n    // protected Query getWildcardQuery(String field, String termStr) throws\n    // ParseException {\n    // // override error checking of superclass\n    // type[0]=1;\n    // return new TermQuery(new Term(field,termStr));\n    // }\n    // protected Query getPrefixQuery(String field, String termStr) throws\n    // ParseException {\n    // // override error checking of superclass\n    // type[0]=2;\n    // return new TermQuery(new Term(field,termStr));\n    // }\n    //\n    // protected Query getFieldQuery(String field, String queryText) throws\n    // ParseException {\n    // type[0]=3;\n    // return super.getFieldQuery(field, queryText);\n    // }\n    // };\n    //\n    // TermQuery tq;\n    //\n    // tq = (TermQuery)qp.parse(\"foo:zoo*\");\n    // assertEquals(\"zoo\",tq.getTerm().text());\n    // assertEquals(2,type[0]);\n    //\n    // tq = (TermQuery)qp.parse(\"foo:zoo*^2\");\n    // assertEquals(\"zoo\",tq.getTerm().text());\n    // assertEquals(2,type[0]);\n    // assertEquals(tq.getBoost(),2,0);\n    //\n    // tq = (TermQuery)qp.parse(\"foo:*\");\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]); // could be a valid prefix query in the\n    // future too\n    //\n    // tq = (TermQuery)qp.parse(\"foo:*^2\");\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]);\n    // assertEquals(tq.getBoost(),2,0);\n    //\n    // tq = (TermQuery)qp.parse(\"*:foo\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"foo\",tq.getTerm().text());\n    // assertEquals(3,type[0]);\n    //\n    // tq = (TermQuery)qp.parse(\"*:*\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]); // could be handled as a prefix query in the\n    // future\n    //\n    // tq = (TermQuery)qp.parse(\"(*:*)\");\n    // assertEquals(\"*\",tq.getTerm().field());\n    // assertEquals(\"*\",tq.getTerm().text());\n    // assertEquals(1,type[0]);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e8a848e758754282137f42bf85793c278e250390"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}