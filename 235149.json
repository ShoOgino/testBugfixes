{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#addZkShardsNode(String,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#addZkShardsNode(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#addZkShardsNode(String,String).mjava","sourceNew":"  /**\n   * @param shardId\n   * @param collection\n   * @throws IOException\n   * @throws InterruptedException \n   * @throws KeeperException \n   */\n  private void addZkShardsNode(String shardId, String collection) throws IOException, InterruptedException, KeeperException {\n\n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + shardId;\n    \n    try {\n      \n      // shards node\n      if (!zkClient.exists(shardsZkPath)) {\n        if (log.isInfoEnabled()) {\n          log.info(\"creating zk shards node:\" + shardsZkPath);\n        }\n        // makes shards zkNode if it doesn't exist\n        zkClient.makePath(shardsZkPath, CreateMode.PERSISTENT, null);\n        \n        // TODO: consider how these notifications are being done\n        // ping that there is a new shardId\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n\n      }\n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @param shardId\n   * @param collection\n   * @throws IOException\n   * @throws InterruptedException \n   * @throws KeeperException \n   */\n  private void addZkShardsNode(String shardId, String collection) throws IOException, InterruptedException, KeeperException {\n\n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + shardId;\n    \n    try {\n      \n      // shards node\n      if (!zkClient.exists(shardsZkPath)) {\n        if (log.isInfoEnabled()) {\n          log.info(\"creating zk shards node:\" + shardsZkPath);\n        }\n        // makes shards zkNode if it doesn't exist\n        zkClient.makePath(shardsZkPath, CreateMode.PERSISTENT, null);\n        \n        // TODO: consider how these notifications are being done\n        // ping that there is a new shardId\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n\n      }\n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#addZkShardsNode(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#addZkShardsNode(String,String).mjava","sourceNew":"  /**\n   * @param shardId\n   * @param collection\n   * @throws IOException\n   * @throws InterruptedException \n   * @throws KeeperException \n   */\n  private void addZkShardsNode(String shardId, String collection) throws IOException, InterruptedException, KeeperException {\n\n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + shardId;\n    \n    try {\n      \n      // shards node\n      if (!zkClient.exists(shardsZkPath)) {\n        if (log.isInfoEnabled()) {\n          log.info(\"creating zk shards node:\" + shardsZkPath);\n        }\n        // makes shards zkNode if it doesn't exist\n        zkClient.makePath(shardsZkPath, CreateMode.PERSISTENT, null);\n        \n        // TODO: consider how these notifications are being done\n        // ping that there is a new shardId\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n\n      }\n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @param shardId\n   * @param collection\n   * @throws IOException\n   * @throws InterruptedException \n   * @throws KeeperException \n   */\n  private void addZkShardsNode(String shardId, String collection) throws IOException, InterruptedException, KeeperException {\n\n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + shardId;\n    \n    try {\n      \n      // shards node\n      if (!zkClient.exists(shardsZkPath)) {\n        if (log.isInfoEnabled()) {\n          log.info(\"creating zk shards node:\" + shardsZkPath);\n        }\n        // makes shards zkNode if it doesn't exist\n        zkClient.makePath(shardsZkPath, CreateMode.PERSISTENT, null);\n        \n        // TODO: consider how these notifications are being done\n        // ping that there is a new shardId\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n\n      }\n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#addZkShardsNode(String,String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#addZkShardsNode(String,String).mjava","sourceNew":"  /**\n   * @param shardId\n   * @param collection\n   * @throws IOException\n   * @throws InterruptedException \n   * @throws KeeperException \n   */\n  private void addZkShardsNode(String shardId, String collection) throws IOException, InterruptedException, KeeperException {\n\n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + shardId;\n    \n    try {\n      \n      // shards node\n      if (!zkClient.exists(shardsZkPath)) {\n        if (log.isInfoEnabled()) {\n          log.info(\"creating zk shards node:\" + shardsZkPath);\n        }\n        // makes shards zkNode if it doesn't exist\n        zkClient.makePath(shardsZkPath, CreateMode.PERSISTENT, null);\n        \n        // TODO: consider how these notifications are being done\n        // ping that there is a new shardId\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n\n      }\n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @param shardId\n   * @param collection\n   * @throws IOException\n   * @throws InterruptedException \n   * @throws KeeperException \n   */\n  private void addZkShardsNode(String shardId, String collection) throws IOException, InterruptedException, KeeperException {\n\n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + shardId;\n    \n    try {\n      \n      // shards node\n      if (!zkClient.exists(shardsZkPath)) {\n        if (log.isInfoEnabled()) {\n          log.info(\"creating zk shards node:\" + shardsZkPath);\n        }\n        // makes shards zkNode if it doesn't exist\n        zkClient.makePath(shardsZkPath, CreateMode.PERSISTENT, null);\n        \n        // TODO: consider how these notifications are being done\n        // ping that there is a new shardId\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n\n      }\n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#addZkShardsNode(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param shardId\n   * @param collection\n   * @throws IOException\n   * @throws InterruptedException \n   * @throws KeeperException \n   */\n  private void addZkShardsNode(String shardId, String collection) throws IOException, InterruptedException, KeeperException {\n\n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + shardId;\n    \n    try {\n      \n      // shards node\n      if (!zkClient.exists(shardsZkPath)) {\n        if (log.isInfoEnabled()) {\n          log.info(\"creating zk shards node:\" + shardsZkPath);\n        }\n        // makes shards zkNode if it doesn't exist\n        zkClient.makePath(shardsZkPath, CreateMode.PERSISTENT, null);\n        \n        // TODO: consider how these notifications are being done\n        // ping that there is a new shardId\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n\n      }\n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#addZkShardsNode(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param shardId\n   * @param collection\n   * @throws IOException\n   * @throws InterruptedException \n   * @throws KeeperException \n   */\n  private void addZkShardsNode(String shardId, String collection) throws IOException, InterruptedException, KeeperException {\n\n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + shardId;\n    \n    try {\n      \n      // shards node\n      if (!zkClient.exists(shardsZkPath)) {\n        if (log.isInfoEnabled()) {\n          log.info(\"creating zk shards node:\" + shardsZkPath);\n        }\n        // makes shards zkNode if it doesn't exist\n        zkClient.makePath(shardsZkPath, CreateMode.PERSISTENT, null);\n        \n        // TODO: consider how these notifications are being done\n        // ping that there is a new shardId\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n\n      }\n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#addZkShardsNode(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param shardId\n   * @param collection\n   * @throws IOException\n   * @throws InterruptedException \n   * @throws KeeperException \n   */\n  private void addZkShardsNode(String shardId, String collection) throws IOException, InterruptedException, KeeperException {\n\n    String shardsZkPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection + ZkStateReader.SHARDS_ZKNODE + \"/\" + shardId;\n    \n    try {\n      \n      // shards node\n      if (!zkClient.exists(shardsZkPath)) {\n        if (log.isInfoEnabled()) {\n          log.info(\"creating zk shards node:\" + shardsZkPath);\n        }\n        // makes shards zkNode if it doesn't exist\n        zkClient.makePath(shardsZkPath, CreateMode.PERSISTENT, null);\n        \n        // TODO: consider how these notifications are being done\n        // ping that there is a new shardId\n        zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n\n      }\n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}