{"path":"lucene/core/src/java/org/apache/lucene/geo/Polygon#relate(Polygon[],double,double,double,double).mjava","commits":[{"id":"82235a501cff963da53cb98d86009e33e15cf47f","date":1459788663,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon#relate(Polygon[],double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the multipolygon relation for the rectangle */\n  public static Relation relate(Polygon[] polygons, double minLat, double maxLat, double minLon, double maxLon) {\n    for (Polygon polygon : polygons) {\n      Relation relation = polygon.relate(minLat, maxLat, minLon, maxLon);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        // note: we optimize for non-overlapping multipolygons. so if we cross one,\n        // we won't keep iterating to try to find a contains.\n        return relation;\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon#relate(Polygon[],double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the multipolygon relation for the rectangle */\n  public static Relation relate(Polygon[] polygons, double minLat, double maxLat, double minLon, double maxLon) {\n    for (Polygon polygon : polygons) {\n      Relation relation = polygon.relate(minLat, maxLat, minLon, maxLon);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        // note: we optimize for non-overlapping multipolygons. so if we cross one,\n        // we won't keep iterating to try to find a contains.\n        return relation;\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon#relate(Polygon[],double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /** Returns the multipolygon relation for the rectangle */\n  public static Relation relate(Polygon[] polygons, double minLat, double maxLat, double minLon, double maxLon) {\n    for (Polygon polygon : polygons) {\n      Relation relation = polygon.relate(minLat, maxLat, minLon, maxLon);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        // note: we optimize for non-overlapping multipolygons. so if we cross one,\n        // we won't keep iterating to try to find a contains.\n        return relation;\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Polygon#relate(Polygon[],double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /** Returns the multipolygon relation for the rectangle */\n  public static Relation relate(Polygon[] polygons, double minLat, double maxLat, double minLon, double maxLon) {\n    for (Polygon polygon : polygons) {\n      Relation relation = polygon.relate(minLat, maxLat, minLon, maxLon);\n      if (relation != Relation.CELL_OUTSIDE_QUERY) {\n        // note: we optimize for non-overlapping multipolygons. so if we cross one,\n        // we won't keep iterating to try to find a contains.\n        return relation;\n      }\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"82235a501cff963da53cb98d86009e33e15cf47f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","82235a501cff963da53cb98d86009e33e15cf47f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["82235a501cff963da53cb98d86009e33e15cf47f","925fce43f3bac029d912b9b7de03c789e258a333"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"925fce43f3bac029d912b9b7de03c789e258a333":["82235a501cff963da53cb98d86009e33e15cf47f"]},"commit2Childs":{"82235a501cff963da53cb98d86009e33e15cf47f":["09af2c9610ce53a4b25fd99344299b40318a4a1a","f7f901826e47f75f810d7aae24b0455d21ea1fe2","925fce43f3bac029d912b9b7de03c789e258a333"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82235a501cff963da53cb98d86009e33e15cf47f","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}