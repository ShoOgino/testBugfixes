{"path":"solr/core/src/java/org/apache/solr/util/ExportTool.Info#exportDocsWithCursorMark().mjava","commits":[{"id":"b26d91db0d1d754936add788fa3a21acaadc9685","date":1565418863,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ExportTool.Info#exportDocsWithCursorMark().mjava","pathOld":"/dev/null","sourceNew":"    void exportDocsWithCursorMark() throws SolrServerException, IOException {\n      DocsSink sink = getSink();\n      solrClient = new CloudSolrClient.Builder(Collections.singletonList(baseurl)).build();\n      NamedList<Object> rsp1 = solrClient.request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/schema/uniquekey\",\n          new MapSolrParams(Collections.singletonMap(\"collection\", coll))));\n      String uniqueKey = (String) rsp1.get(\"uniqueKey\");\n\n      sink.start();\n      try {\n        NamedList<Object> rsp;\n        SolrQuery q = (new SolrQuery(query))\n            .setParam(\"collection\", coll)\n            .setRows(100)\n            .setSort(SolrQuery.SortClause.asc(uniqueKey));\n        if (fields != null) {\n          q.setParam(FL, fields);\n        }\n\n        String cursorMark = CursorMarkParams.CURSOR_MARK_START;\n        boolean done = false;\n        StreamingResponseCallback streamer = getStreamer(sink);\n\n        if(output!= null) output.println(\"Exporting data to : \"+ out);\n        while (!done) {\n          if (docsWritten >= limit) break;\n          QueryRequest request = new QueryRequest(q);\n          request.setResponseParser(new StreamingBinaryResponseParser(streamer));\n          q.set(CursorMarkParams.CURSOR_MARK_PARAM, cursorMark);\n          rsp = solrClient.request(request);\n          String nextCursorMark = (String) rsp.get(CursorMarkParams.CURSOR_MARK_NEXT);\n          if (nextCursorMark == null || Objects.equals(cursorMark, nextCursorMark)) {\n            break;\n          }\n          cursorMark = nextCursorMark;\n          if(output!= null) output.print(\".\");\n        }\n        if(output!= null) output.println(\"\\n DONE!\");\n      } finally {\n        sink.end();\n        solrClient.close();\n\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b373db031e25f03ad6783efcfb77809dcd963565","date":1565686445,"type":4,"author":"noble","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/ExportTool.Info#exportDocsWithCursorMark().mjava","sourceNew":null,"sourceOld":"    void exportDocsWithCursorMark() throws SolrServerException, IOException {\n      DocsSink sink = getSink();\n      solrClient = new CloudSolrClient.Builder(Collections.singletonList(baseurl)).build();\n      NamedList<Object> rsp1 = solrClient.request(new GenericSolrRequest(SolrRequest.METHOD.GET, \"/schema/uniquekey\",\n          new MapSolrParams(Collections.singletonMap(\"collection\", coll))));\n      String uniqueKey = (String) rsp1.get(\"uniqueKey\");\n\n      sink.start();\n      try {\n        NamedList<Object> rsp;\n        SolrQuery q = (new SolrQuery(query))\n            .setParam(\"collection\", coll)\n            .setRows(100)\n            .setSort(SolrQuery.SortClause.asc(uniqueKey));\n        if (fields != null) {\n          q.setParam(FL, fields);\n        }\n\n        String cursorMark = CursorMarkParams.CURSOR_MARK_START;\n        boolean done = false;\n        StreamingResponseCallback streamer = getStreamer(sink);\n\n        if(output!= null) output.println(\"Exporting data to : \"+ out);\n        while (!done) {\n          if (docsWritten >= limit) break;\n          QueryRequest request = new QueryRequest(q);\n          request.setResponseParser(new StreamingBinaryResponseParser(streamer));\n          q.set(CursorMarkParams.CURSOR_MARK_PARAM, cursorMark);\n          rsp = solrClient.request(request);\n          String nextCursorMark = (String) rsp.get(CursorMarkParams.CURSOR_MARK_NEXT);\n          if (nextCursorMark == null || Objects.equals(cursorMark, nextCursorMark)) {\n            break;\n          }\n          cursorMark = nextCursorMark;\n          if(output!= null) output.print(\".\");\n        }\n        if(output!= null) output.println(\"\\n DONE!\");\n      } finally {\n        sink.end();\n        solrClient.close();\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b373db031e25f03ad6783efcfb77809dcd963565":["b26d91db0d1d754936add788fa3a21acaadc9685"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b373db031e25f03ad6783efcfb77809dcd963565"],"b26d91db0d1d754936add788fa3a21acaadc9685":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b373db031e25f03ad6783efcfb77809dcd963565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b26d91db0d1d754936add788fa3a21acaadc9685"],"b26d91db0d1d754936add788fa3a21acaadc9685":["b373db031e25f03ad6783efcfb77809dcd963565"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}