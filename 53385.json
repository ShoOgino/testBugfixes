{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#callAndCheckCreateFields(String,Class[#],Object).mjava","commits":[{"id":"0ff61c2e5ce6b1f26a271d9d454206db1917d628","date":1491505661,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#callAndCheckCreateFields(String,Class[#],Object).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Calls {@link SchemaField#createFields} on the specified value for the specified field name, and asserts \n   * that the results match the SchemaField propeties, with an additional check that the <code>pointType</code> \n   * is included if and only if the SchemaField is \"indexed\" \n   */\n  private List<IndexableField> callAndCheckCreateFields(final String fieldName, final Class<?> pointType, final Object value) throws Exception {\n    final SchemaField sf = h.getCore().getLatestSchema().getField(fieldName);\n    final List<IndexableField> results = sf.createFields(value);\n    final Set<IndexableField> resultSet = new LinkedHashSet<>(results);\n    assertEquals(\"duplicates found in results? \" + results.toString(),\n                 results.size(), resultSet.size());\n\n    final Set<Class<?>> resultClasses = new HashSet<>();\n    for (IndexableField f : results) {\n      resultClasses.add(f.getClass());\n      \n      if (!sf.hasDocValues() ) {\n        assertFalse(f.toString(),\n                    (f instanceof NumericDocValuesField) ||\n                    (f instanceof SortedNumericDocValuesField));\n      }\n    }\n    assertEquals(fieldName + \" stored? Result Fields: \" + Arrays.toString(results.toArray()),\n                 sf.stored(), resultClasses.contains(StoredField.class));\n    assertEquals(fieldName + \" indexed? Result Fields: \" + Arrays.toString(results.toArray()),\n                 sf.indexed(), resultClasses.contains(pointType));\n    if (sf.multiValued()) {\n      assertEquals(fieldName + \" docvalues? Result Fields: \" + Arrays.toString(results.toArray()),\n                   sf.hasDocValues(), resultClasses.contains(SortedNumericDocValuesField.class));\n    } else {\n      assertEquals(fieldName + \" docvalues? Result Fields: \" + Arrays.toString(results.toArray()),\n                   sf.hasDocValues(), resultClasses.contains(NumericDocValuesField.class));\n    }\n\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#callAndCheckCreateFields(String,Class[#],Object).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Calls {@link SchemaField#createFields} on the specified value for the specified field name, and asserts \n   * that the results match the SchemaField propeties, with an additional check that the <code>pointType</code> \n   * is included if and only if the SchemaField is \"indexed\" \n   */\n  private List<IndexableField> callAndCheckCreateFields(final String fieldName, final Class<?> pointType, final Object value) throws Exception {\n    final SchemaField sf = h.getCore().getLatestSchema().getField(fieldName);\n    final List<IndexableField> results = sf.createFields(value);\n    final Set<IndexableField> resultSet = new LinkedHashSet<>(results);\n    assertEquals(\"duplicates found in results? \" + results.toString(),\n                 results.size(), resultSet.size());\n\n    final Set<Class<?>> resultClasses = new HashSet<>();\n    for (IndexableField f : results) {\n      resultClasses.add(f.getClass());\n      \n      if (!sf.hasDocValues() ) {\n        assertFalse(f.toString(),\n                    (f instanceof NumericDocValuesField) ||\n                    (f instanceof SortedNumericDocValuesField));\n      }\n    }\n    assertEquals(fieldName + \" stored? Result Fields: \" + Arrays.toString(results.toArray()),\n                 sf.stored(), resultClasses.contains(StoredField.class));\n    assertEquals(fieldName + \" indexed? Result Fields: \" + Arrays.toString(results.toArray()),\n                 sf.indexed(), resultClasses.contains(pointType));\n    if (sf.multiValued()) {\n      assertEquals(fieldName + \" docvalues? Result Fields: \" + Arrays.toString(results.toArray()),\n                   sf.hasDocValues(), resultClasses.contains(SortedNumericDocValuesField.class));\n    } else {\n      assertEquals(fieldName + \" docvalues? Result Fields: \" + Arrays.toString(results.toArray()),\n                   sf.hasDocValues(), resultClasses.contains(NumericDocValuesField.class));\n    }\n\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}