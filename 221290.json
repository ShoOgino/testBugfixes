{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#CompressingStoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","commits":[{"id":"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","date":1349450075,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#CompressingStoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  public CompressingStoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    numDocs = si.getDocCount();\n    IndexInput indexStream = null;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n\n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n\n      final int storedFieldsIndexId = indexStream.readVInt();\n      final CompressingStoredFieldsIndex storedFieldsIndex = CompressingStoredFieldsIndex.byId(storedFieldsIndexId);\n      indexReader = storedFieldsIndex.newReader(indexStream, si);\n      indexStream = null;\n\n      packedIntsVersion = fieldsStream.readVInt();\n      final int compressionModeId = fieldsStream.readVInt();\n      compressionMode = CompressionMode.byId(compressionModeId);\n      uncompressor = compressionMode.newUncompressor();\n      this.bytes = new BytesRef();\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this, indexStream);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1","date":1351696336,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#CompressingStoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#CompressingStoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public CompressingStoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    numDocs = si.getDocCount();\n    IndexInput indexStream = null;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n\n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n\n      final int storedFieldsIndexId = indexStream.readVInt();\n      final CompressingStoredFieldsIndex storedFieldsIndex = CompressingStoredFieldsIndex.byId(storedFieldsIndexId);\n      indexReader = storedFieldsIndex.newReader(indexStream, si);\n      indexStream = null;\n\n      packedIntsVersion = fieldsStream.readVInt();\n      final int compressionModeId = fieldsStream.readVInt();\n      compressionMode = CompressionMode.byId(compressionModeId);\n      decompressor = compressionMode.newDecompressor();\n      this.bytes = new BytesRef();\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this, indexStream);\n      }\n    }\n  }\n\n","sourceOld":"  public CompressingStoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    numDocs = si.getDocCount();\n    IndexInput indexStream = null;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n\n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n\n      final int storedFieldsIndexId = indexStream.readVInt();\n      final CompressingStoredFieldsIndex storedFieldsIndex = CompressingStoredFieldsIndex.byId(storedFieldsIndexId);\n      indexReader = storedFieldsIndex.newReader(indexStream, si);\n      indexStream = null;\n\n      packedIntsVersion = fieldsStream.readVInt();\n      final int compressionModeId = fieldsStream.readVInt();\n      compressionMode = CompressionMode.byId(compressionModeId);\n      uncompressor = compressionMode.newUncompressor();\n      this.bytes = new BytesRef();\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this, indexStream);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a96cceee825e15cd8e042b683d404086e2a58d1","date":1351872237,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#CompressingStoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#CompressingStoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public CompressingStoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    numDocs = si.getDocCount();\n    IndexInput indexStream = null;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n\n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n\n      indexReader = new CompressingStoredFieldsIndexReader(indexStream, si);\n      indexStream = null;\n\n      packedIntsVersion = fieldsStream.readVInt();\n      final int compressionModeId = fieldsStream.readVInt();\n      compressionMode = CompressionMode.byId(compressionModeId);\n      decompressor = compressionMode.newDecompressor();\n      this.bytes = new BytesRef();\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this, indexStream);\n      }\n    }\n  }\n\n","sourceOld":"  public CompressingStoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    numDocs = si.getDocCount();\n    IndexInput indexStream = null;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n\n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n\n      final int storedFieldsIndexId = indexStream.readVInt();\n      final CompressingStoredFieldsIndex storedFieldsIndex = CompressingStoredFieldsIndex.byId(storedFieldsIndexId);\n      indexReader = storedFieldsIndex.newReader(indexStream, si);\n      indexStream = null;\n\n      packedIntsVersion = fieldsStream.readVInt();\n      final int compressionModeId = fieldsStream.readVInt();\n      compressionMode = CompressionMode.byId(compressionModeId);\n      decompressor = compressionMode.newDecompressor();\n      this.bytes = new BytesRef();\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this, indexStream);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#CompressingStoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#CompressingStoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  public CompressingStoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    numDocs = si.getDocCount();\n    IndexInput indexStream = null;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n\n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n\n      indexReader = new CompressingStoredFieldsIndexReader(indexStream, si);\n      indexStream = null;\n\n      packedIntsVersion = fieldsStream.readVInt();\n      final int compressionModeId = fieldsStream.readVInt();\n      compressionMode = CompressionMode.byId(compressionModeId);\n      decompressor = compressionMode.newDecompressor();\n      this.bytes = new BytesRef();\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this, indexStream);\n      }\n    }\n  }\n\n","sourceOld":"  public CompressingStoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    numDocs = si.getDocCount();\n    IndexInput indexStream = null;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n\n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n\n      indexReader = new CompressingStoredFieldsIndexReader(indexStream, si);\n      indexStream = null;\n\n      packedIntsVersion = fieldsStream.readVInt();\n      final int compressionModeId = fieldsStream.readVInt();\n      compressionMode = CompressionMode.byId(compressionModeId);\n      decompressor = compressionMode.newDecompressor();\n      this.bytes = new BytesRef();\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this, indexStream);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader#CompressingStoredFieldsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":null,"sourceOld":"  public CompressingStoredFieldsReader(Directory d, SegmentInfo si, FieldInfos fn, IOContext context) throws IOException {\n    final String segment = si.name;\n    boolean success = false;\n    fieldInfos = fn;\n    numDocs = si.getDocCount();\n    IndexInput indexStream = null;\n    try {\n      fieldsStream = d.openInput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n      final String indexStreamFN = IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION);\n      indexStream = d.openInput(indexStreamFN, context);\n\n      CodecUtil.checkHeader(indexStream, CODEC_NAME_IDX, VERSION_START, VERSION_CURRENT);\n      CodecUtil.checkHeader(fieldsStream, CODEC_NAME_DAT, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n\n      indexReader = new CompressingStoredFieldsIndexReader(indexStream, si);\n      indexStream = null;\n\n      packedIntsVersion = fieldsStream.readVInt();\n      final int compressionModeId = fieldsStream.readVInt();\n      compressionMode = CompressionMode.byId(compressionModeId);\n      decompressor = compressionMode.newDecompressor();\n      this.bytes = new BytesRef();\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(this, indexStream);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["0a96cceee825e15cd8e042b683d404086e2a58d1"],"0a96cceee825e15cd8e042b683d404086e2a58d1":["5af6a67fb827380f7fe2fdf3baa34b10b783f2f1"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["0a96cceee825e15cd8e042b683d404086e2a58d1","5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"]},"commit2Childs":{"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1":["0a96cceee825e15cd8e042b683d404086e2a58d1"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0a96cceee825e15cd8e042b683d404086e2a58d1":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","407687e67faf6e1f02a211ca078d8e3eed631027"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["5af6a67fb827380f7fe2fdf3baa34b10b783f2f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}