{"path":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testKillPullReplica().mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testKillPullReplica().mjava","pathOld":"/dev/null","sourceNew":"  public void testKillPullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 1)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n//    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Is this needed? \n    waitForState(\"Expected collection to be created with 1 shard and 2 replicas\", collectionName, clusterShape(1, 2));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, 1, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    waitForNumDocsInAllActiveReplicas(0);\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    waitForNumDocsInAllActiveReplicas(1);\n    \n    JettySolrRunner pullReplicaJetty = cluster.getReplicaJetty(docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0));\n    ChaosMonkey.kill(pullReplicaJetty);\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(1, 0, 0));\n    // Also wait for the replica to be placed in state=\"down\"\n    waitForState(\"Didn't update state\", collectionName, clusterStateReflectsActiveAndDownReplicas());\n    \n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    waitForNumDocsInAllActiveReplicas(2);\n    \n    ChaosMonkey.start(pullReplicaJetty);\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 1));\n    waitForNumDocsInAllActiveReplicas(2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testKillPullReplica().mjava","pathOld":"/dev/null","sourceNew":"  public void testKillPullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 1)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n//    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Is this needed? \n    waitForState(\"Expected collection to be created with 1 shard and 2 replicas\", collectionName, clusterShape(1, 2));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, 1, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    waitForNumDocsInAllActiveReplicas(0);\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    waitForNumDocsInAllActiveReplicas(1);\n    \n    JettySolrRunner pullReplicaJetty = cluster.getReplicaJetty(docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0));\n    ChaosMonkey.kill(pullReplicaJetty);\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(1, 0, 0));\n    // Also wait for the replica to be placed in state=\"down\"\n    waitForState(\"Didn't update state\", collectionName, clusterStateReflectsActiveAndDownReplicas());\n    \n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    waitForNumDocsInAllActiveReplicas(2);\n    \n    ChaosMonkey.start(pullReplicaJetty);\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 1));\n    waitForNumDocsInAllActiveReplicas(2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testKillPullReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testKillPullReplica().mjava","sourceNew":"  public void testKillPullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 1)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n//    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Is this needed? \n    waitForState(\"Expected collection to be created with 1 shard and 2 replicas\", collectionName, clusterShape(1, 2));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, 1, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    waitForNumDocsInAllActiveReplicas(0);\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    waitForNumDocsInAllActiveReplicas(1);\n    \n    JettySolrRunner pullReplicaJetty = cluster.getReplicaJetty(docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0));\n    pullReplicaJetty.stop();\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(1, 0, 0));\n    // Also wait for the replica to be placed in state=\"down\"\n    waitForState(\"Didn't update state\", collectionName, clusterStateReflectsActiveAndDownReplicas());\n    \n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    waitForNumDocsInAllActiveReplicas(2);\n    \n    pullReplicaJetty.start();\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 1));\n    waitForNumDocsInAllActiveReplicas(2);\n  }\n\n","sourceOld":"  public void testKillPullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 1)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n//    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Is this needed? \n    waitForState(\"Expected collection to be created with 1 shard and 2 replicas\", collectionName, clusterShape(1, 2));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, 1, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    waitForNumDocsInAllActiveReplicas(0);\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    waitForNumDocsInAllActiveReplicas(1);\n    \n    JettySolrRunner pullReplicaJetty = cluster.getReplicaJetty(docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0));\n    ChaosMonkey.kill(pullReplicaJetty);\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(1, 0, 0));\n    // Also wait for the replica to be placed in state=\"down\"\n    waitForState(\"Didn't update state\", collectionName, clusterStateReflectsActiveAndDownReplicas());\n    \n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    waitForNumDocsInAllActiveReplicas(2);\n    \n    ChaosMonkey.start(pullReplicaJetty);\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 1));\n    waitForNumDocsInAllActiveReplicas(2);\n  }\n\n","bugFix":["61c45e99cf6676da48f19d7511c73712ad39402b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testKillPullReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testKillPullReplica().mjava","sourceNew":"  public void testKillPullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 1)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n//    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Is this needed?\n    waitForState(\"Expected collection to be created with 1 shard and 2 replicas\", collectionName, clusterShape(1, 2));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, 1, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n\n    waitForNumDocsInAllActiveReplicas(0);\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    waitForNumDocsInAllActiveReplicas(1);\n\n    JettySolrRunner pullReplicaJetty = cluster.getReplicaJetty(docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0));\n    pullReplicaJetty.stop();\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(1, 0, 0));\n    // Also wait for the replica to be placed in state=\"down\"\n    waitForState(\"Didn't update state\", collectionName, clusterStateReflectsActiveAndDownReplicas());\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    waitForNumDocsInAllActiveReplicas(2);\n\n    pullReplicaJetty.start();\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 1));\n    waitForNumDocsInAllActiveReplicas(2);\n  }\n\n","sourceOld":"  public void testKillPullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 1)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n//    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Is this needed? \n    waitForState(\"Expected collection to be created with 1 shard and 2 replicas\", collectionName, clusterShape(1, 2));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, 1, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n    \n    waitForNumDocsInAllActiveReplicas(0);\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    waitForNumDocsInAllActiveReplicas(1);\n    \n    JettySolrRunner pullReplicaJetty = cluster.getReplicaJetty(docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0));\n    pullReplicaJetty.stop();\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(1, 0, 0));\n    // Also wait for the replica to be placed in state=\"down\"\n    waitForState(\"Didn't update state\", collectionName, clusterStateReflectsActiveAndDownReplicas());\n    \n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    waitForNumDocsInAllActiveReplicas(2);\n    \n    pullReplicaJetty.start();\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 1));\n    waitForNumDocsInAllActiveReplicas(2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testKillPullReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestPullReplica#testKillPullReplica().mjava","sourceNew":"  public void testKillPullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 1)\n      .process(cluster.getSolrClient());\n//    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Is this needed?\n    waitForState(\"Expected collection to be created with 1 shard and 2 replicas\", collectionName, clusterShape(1, 2));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, 1, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n\n    waitForNumDocsInAllActiveReplicas(0);\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    waitForNumDocsInAllActiveReplicas(1);\n\n    JettySolrRunner pullReplicaJetty = cluster.getReplicaJetty(docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0));\n    pullReplicaJetty.stop();\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(1, 0, 0));\n    // Also wait for the replica to be placed in state=\"down\"\n    waitForState(\"Didn't update state\", collectionName, clusterStateReflectsActiveAndDownReplicas());\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    waitForNumDocsInAllActiveReplicas(2);\n\n    pullReplicaJetty.start();\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 1));\n    waitForNumDocsInAllActiveReplicas(2);\n  }\n\n","sourceOld":"  public void testKillPullReplica() throws Exception {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1, 0, 1)\n      .setMaxShardsPerNode(100)\n      .process(cluster.getSolrClient());\n//    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Is this needed?\n    waitForState(\"Expected collection to be created with 1 shard and 2 replicas\", collectionName, clusterShape(1, 2));\n    DocCollection docCollection = assertNumberOfReplicas(1, 0, 1, false, true);\n    assertEquals(1, docCollection.getSlices().size());\n\n    waitForNumDocsInAllActiveReplicas(0);\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    waitForNumDocsInAllActiveReplicas(1);\n\n    JettySolrRunner pullReplicaJetty = cluster.getReplicaJetty(docCollection.getSlice(\"shard1\").getReplicas(EnumSet.of(Replica.Type.PULL)).get(0));\n    pullReplicaJetty.stop();\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(1, 0, 0));\n    // Also wait for the replica to be placed in state=\"down\"\n    waitForState(\"Didn't update state\", collectionName, clusterStateReflectsActiveAndDownReplicas());\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\", \"foo\", \"bar\"));\n    cluster.getSolrClient().commit(collectionName);\n    waitForNumDocsInAllActiveReplicas(2);\n\n    pullReplicaJetty.start();\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(1, 0, 1));\n    waitForNumDocsInAllActiveReplicas(2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["61c45e99cf6676da48f19d7511c73712ad39402b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}