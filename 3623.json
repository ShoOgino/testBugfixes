{"path":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","commits":[{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T]).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param willPackFST Pass true if you will rewrite (compact) the FST before saving.  This\n   *    causes the FST to create additional data structures intenrally to facilitate rewriting, but\n   *    it means the resulting FST cannot be saved: it must first be rewritten using {@link FST#FST(FST,int[])}}\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean willPackFST) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    fst = new FST<T>(inputType, outputs, willPackFST);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    fst = new FST<T>(inputType, outputs);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T]).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param willPackFST Pass true if you will rewrite (compact) the FST before saving.  This\n   *    causes the FST to create additional data structures intenrally to facilitate rewriting, but\n   *    it means the resulting FST cannot be saved: it must first be rewritten using {@link FST#FST(FST,int[])}}\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean willPackFST) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    fst = new FST<T>(inputType, outputs, willPackFST);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    fst = new FST<T>(inputType, outputs);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0811a6a338aca969600effa62f34f93c1b5f198","date":1327879365,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param willPackFST Pass true if you will pack the FST before saving.  This\n   *    causes the FST to create additional data structures internally to facilitate packing, but\n   *    it means the resulting FST cannot be saved: it must\n   *    first be packed using {@link FST#pack(int, int)}}.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean willPackFST) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    fst = new FST<T>(inputType, outputs, willPackFST);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param willPackFST Pass true if you will rewrite (compact) the FST before saving.  This\n   *    causes the FST to create additional data structures intenrally to facilitate rewriting, but\n   *    it means the resulting FST cannot be saved: it must first be rewritten using {@link FST#FST(FST,int[])}}\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean willPackFST) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    fst = new FST<T>(inputType, outputs, willPackFST);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ee93262320c801eafdbc0a54fc8c8d392b7f009","date":1327886547,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param willPackFST Pass true if you will pack the FST before saving.  This\n   *    causes the FST to create additional data structures internally to facilitate packing, but\n   *    it means the resulting FST cannot be saved: it must\n   *    first be packed using {@link FST#pack(int, int)}}.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean willPackFST) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    fst = new FST<T>(inputType, outputs, willPackFST);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param willPackFST Pass true if you will rewrite (compact) the FST before saving.  This\n   *    causes the FST to create additional data structures intenrally to facilitate rewriting, but\n   *    it means the resulting FST cannot be saved: it must first be rewritten using {@link FST#FST(FST,int[])}}\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean willPackFST) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    fst = new FST<T>(inputType, outputs, willPackFST);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T]).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param willPackFST Pass true if you will pack the FST before saving.  This\n   *    causes the FST to create additional data structures internally to facilitate packing, but\n   *    it means the resulting FST cannot be saved: it must\n   *    first be packed using {@link FST#pack(int, int)}}.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean willPackFST) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    fst = new FST<T>(inputType, outputs, willPackFST);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    fst = new FST<T>(inputType, outputs);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/Builder#Builder(FST.INPUT_TYPE,int,int,boolean,boolean,int,Outputs[T],FreezeTail[T],boolean).mjava","sourceNew":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param willPackFST Pass true if you will pack the FST before saving.  This\n   *    causes the FST to create additional data structures internally to facilitate packing, but\n   *    it means the resulting FST cannot be saved: it must\n   *    first be packed using {@link FST#pack(int, int)}}.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean willPackFST) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    fst = new FST<T>(inputType, outputs, willPackFST);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","sourceOld":"  /**\n   * Instantiates an FST/FSA builder with all the possible tuning and construction\n   * tweaks. Read parameter documentation carefully.\n   * \n   * @param inputType \n   *    The input type (transition labels). Can be anything from {@link INPUT_TYPE}\n   *    enumeration. Shorter types will consume less memory. Strings (character sequences) are \n   *    represented as {@link INPUT_TYPE#BYTE4} (full unicode codepoints). \n   *     \n   * @param minSuffixCount1\n   *    If pruning the input graph during construction, this threshold is used for telling\n   *    if a node is kept or pruned. If transition_count(node) &gt;= minSuffixCount1, the node\n   *    is kept. \n   *    \n   * @param minSuffixCount2\n   *    (Note: only Mike McCandless knows what this one is really doing...) \n   * \n   * @param doShareSuffix \n   *    If <code>true</code>, the shared suffixes will be compacted into unique paths.\n   *    This requires an additional hash map for lookups in memory. Setting this parameter to\n   *    <code>false</code> creates a single path for all input sequences. This will result in a larger\n   *    graph, but may require less memory and will speed up construction.  \n   *\n   * @param doShareNonSingletonNodes\n   *    Only used if doShareSuffix is true.  Set this to\n   *    true to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param shareMaxTailLength\n   *    Only used if doShareSuffix is true.  Set this to\n   *    Integer.MAX_VALUE to ensure FST is fully minimal, at cost of more\n   *    CPU and more RAM during building.\n   *\n   * @param outputs The output type for each input sequence. Applies only if building an FST. For\n   *    FSA, use {@link NoOutputs#getSingleton()} and {@link NoOutputs#getNoOutput()} as the\n   *    singleton output object.\n   *\n   * @param willPackFST Pass true if you will pack the FST before saving.  This\n   *    causes the FST to create additional data structures internally to facilitate packing, but\n   *    it means the resulting FST cannot be saved: it must\n   *    first be packed using {@link FST#pack(int, int)}}.\n   */\n  public Builder(FST.INPUT_TYPE inputType, int minSuffixCount1, int minSuffixCount2, boolean doShareSuffix,\n                 boolean doShareNonSingletonNodes, int shareMaxTailLength, Outputs<T> outputs,\n                 FreezeTail<T> freezeTail, boolean willPackFST) {\n    this.minSuffixCount1 = minSuffixCount1;\n    this.minSuffixCount2 = minSuffixCount2;\n    this.freezeTail = freezeTail;\n    this.doShareNonSingletonNodes = doShareNonSingletonNodes;\n    this.shareMaxTailLength = shareMaxTailLength;\n    fst = new FST<T>(inputType, outputs, willPackFST);\n    if (doShareSuffix) {\n      dedupHash = new NodeHash<T>(fst);\n    } else {\n      dedupHash = null;\n    }\n    NO_OUTPUT = outputs.getNoOutput();\n\n    @SuppressWarnings(\"unchecked\") final UnCompiledNode<T>[] f = (UnCompiledNode<T>[]) new UnCompiledNode[10];\n    frontier = f;\n    for(int idx=0;idx<frontier.length;idx++) {\n      frontier[idx] = new UnCompiledNode<T>(this, idx);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ee93262320c801eafdbc0a54fc8c8d392b7f009":["817882884229bace7dc5d1b75f6b0e4aa1e47122","c0811a6a338aca969600effa62f34f93c1b5f198"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c0811a6a338aca969600effa62f34f93c1b5f198"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c0811a6a338aca969600effa62f34f93c1b5f198":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c0811a6a338aca969600effa62f34f93c1b5f198"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"5ee93262320c801eafdbc0a54fc8c8d392b7f009":[],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["5ee93262320c801eafdbc0a54fc8c8d392b7f009"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","c0811a6a338aca969600effa62f34f93c1b5f198"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"c0811a6a338aca969600effa62f34f93c1b5f198":["5ee93262320c801eafdbc0a54fc8c8d392b7f009","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5ee93262320c801eafdbc0a54fc8c8d392b7f009","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}