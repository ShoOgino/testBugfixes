{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can call {@link #isDeleted(int)} with the requested document ID to verify\n   * the document is not deleted.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public Document document(int n) throws CorruptIndexException, IOException {\n    ensureOpen();\n    return document(n, null);\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can call {@link #isDeleted(int)} with the requested document ID to verify\n   * the document is not deleted.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public Document document(int n) throws CorruptIndexException, IOException {\n    ensureOpen();\n    return document(n, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da47e95aa8dbf16793306d1a42d22d75213c880f","date":1283182125,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getDeletedDocs}.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public Document document(int n) throws CorruptIndexException, IOException {\n    ensureOpen();\n    return document(n, null);\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can call {@link #isDeleted(int)} with the requested document ID to verify\n   * the document is not deleted.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public Document document(int n) throws CorruptIndexException, IOException {\n    ensureOpen();\n    return document(n, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getDeletedDocs}.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public Document document(int n) throws CorruptIndexException, IOException {\n    ensureOpen();\n    return document(n, null);\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can call {@link #isDeleted(int)} with the requested document ID to verify\n   * the document is not deleted.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public Document document(int n) throws CorruptIndexException, IOException {\n    ensureOpen();\n    return document(n, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public Document document(int n) throws CorruptIndexException, IOException {\n    ensureOpen();\n    return document(n, null);\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getDeletedDocs}.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public Document document(int n) throws CorruptIndexException, IOException {\n    ensureOpen();\n    return document(n, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public Document document(int n) throws CorruptIndexException, IOException {\n    ensureOpen();\n    return document(n, null);\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getDeletedDocs}.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public Document document(int n) throws CorruptIndexException, IOException {\n    ensureOpen();\n    return document(n, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public Document document(int n) throws CorruptIndexException, IOException {\n    ensureOpen();\n    return document(n, null);\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getDeletedDocs}.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public Document document(int n) throws CorruptIndexException, IOException {\n    ensureOpen();\n    return document(n, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public Document document(int docID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public Document document(int n) throws CorruptIndexException, IOException {\n    ensureOpen();\n    return document(n, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f1e03050bb2a220e7b206bfd1b2c0e63db32b3","date":1314981811,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public Document document(int docID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (docID < 0 || docID >= maxDoc()) {\n      throw new IllegalArgumentException(\"docID must be >= 0 and < maxDoc=\" + maxDoc() + \" (got docID=\" + docID + \")\");\n    }\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public Document document(int docID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936f1eae75daf11568fe1480aec9e06d2ef55367","date":1323215013,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (docID < 0 || docID >= maxDoc()) {\n      throw new IllegalArgumentException(\"docID must be >= 0 and < maxDoc=\" + maxDoc() + \" (got docID=\" + docID + \")\");\n    }\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public Document document(int docID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (docID < 0 || docID >= maxDoc()) {\n      throw new IllegalArgumentException(\"docID must be >= 0 and < maxDoc=\" + maxDoc() + \" (got docID=\" + docID + \")\");\n    }\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (docID < 0 || docID >= maxDoc()) {\n      throw new IllegalArgumentException(\"docID must be >= 0 and < maxDoc=\" + maxDoc() + \" (got docID=\" + docID + \")\");\n    }\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public Document document(int docID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (docID < 0 || docID >= maxDoc()) {\n      throw new IllegalArgumentException(\"docID must be >= 0 and < maxDoc=\" + maxDoc() + \" (got docID=\" + docID + \")\");\n    }\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (docID < 0 || docID >= maxDoc()) {\n      throw new IllegalArgumentException(\"docID must be >= 0 and < maxDoc=\" + maxDoc() + \" (got docID=\" + docID + \")\");\n    }\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public Document document(int docID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (docID < 0 || docID >= maxDoc()) {\n      throw new IllegalArgumentException(\"docID must be >= 0 and < maxDoc=\" + maxDoc() + \" (got docID=\" + docID + \")\");\n    }\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16ff2a12177d39097e8fd5793e7f7b49c435a953","date":1323614672,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (docID < 0 || docID >= maxDoc()) {\n      throw new IllegalArgumentException(\"docID must be >= 0 and < maxDoc=\" + maxDoc() + \" (got docID=\" + docID + \")\");\n    }\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    if (docID < 0 || docID >= maxDoc()) {\n      throw new IllegalArgumentException(\"docID must be >= 0 and < maxDoc=\" + maxDoc() + \" (got docID=\" + docID + \")\");\n    }\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a284cf07ab511aa26e65113739cea9f6b89883af","date":1328039396,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws CorruptIndexException, IOException {\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws CorruptIndexException, IOException {\n    ensureOpen();\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#document(int).mjava","sourceNew":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws CorruptIndexException, IOException {\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","sourceOld":"  /**\n   * Returns the stored fields of the <code>n</code><sup>th</sup>\n   * <code>Document</code> in this index.  This is just\n   * sugar for using {@link DocumentStoredFieldVisitor}.\n   * <p>\n   * <b>NOTE:</b> for performance reasons, this method does not check if the\n   * requested document is deleted, and therefore asking for a deleted document\n   * may yield unspecified results. Usually this is not required, however you\n   * can test if the doc is deleted by checking the {@link\n   * Bits} returned from {@link MultiFields#getLiveDocs}.\n   *\n   * <b>NOTE:</b> only the content of a field is returned,\n   * if that field was stored during indexing.  Metadata\n   * like boost, omitNorm, IndexOptions, tokenized, etc.,\n   * are not preserved.\n   * \n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  // TODO: we need a separate StoredField, so that the\n  // Document returned here contains that class not\n  // IndexableField\n  public final Document document(int docID) throws CorruptIndexException, IOException {\n    final DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor();\n    document(docID, visitor);\n    return visitor.getDocument();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["98f1e03050bb2a220e7b206bfd1b2c0e63db32b3","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a284cf07ab511aa26e65113739cea9f6b89883af"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","16ff2a12177d39097e8fd5793e7f7b49c435a953"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["da47e95aa8dbf16793306d1a42d22d75213c880f"],"936f1eae75daf11568fe1480aec9e06d2ef55367":["98f1e03050bb2a220e7b206bfd1b2c0e63db32b3"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","da47e95aa8dbf16793306d1a42d22d75213c880f"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["da47e95aa8dbf16793306d1a42d22d75213c880f","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["da47e95aa8dbf16793306d1a42d22d75213c880f","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"a284cf07ab511aa26e65113739cea9f6b89883af":["16ff2a12177d39097e8fd5793e7f7b49c435a953"],"da47e95aa8dbf16793306d1a42d22d75213c880f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["98f1e03050bb2a220e7b206bfd1b2c0e63db32b3","936f1eae75daf11568fe1480aec9e06d2ef55367"],"98f1e03050bb2a220e7b206bfd1b2c0e63db32b3":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"16ff2a12177d39097e8fd5793e7f7b49c435a953":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"936f1eae75daf11568fe1480aec9e06d2ef55367":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"a284cf07ab511aa26e65113739cea9f6b89883af":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"da47e95aa8dbf16793306d1a42d22d75213c880f":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","16ff2a12177d39097e8fd5793e7f7b49c435a953"],"98f1e03050bb2a220e7b206bfd1b2c0e63db32b3":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","936f1eae75daf11568fe1480aec9e06d2ef55367","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"16ff2a12177d39097e8fd5793e7f7b49c435a953":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","a284cf07ab511aa26e65113739cea9f6b89883af"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["98f1e03050bb2a220e7b206bfd1b2c0e63db32b3"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","da47e95aa8dbf16793306d1a42d22d75213c880f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}