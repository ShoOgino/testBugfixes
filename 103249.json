{"path":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","sourceNew":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Private until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  private MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n  }\n\n","sourceOld":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Private until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  private MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","sourceNew":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Private until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  private MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n    fieldInfos = new FieldInfos();\n  }\n\n","sourceOld":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Private until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  private MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"214f697dffd3b41ffe286f7f67afd54e51b13935","date":1330349733,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","sourceNew":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Protected until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  protected MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n    fieldInfos = new FieldInfos();\n  }\n\n","sourceOld":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Private until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  private MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n    fieldInfos = new FieldInfos();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","sourceNew":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Protected until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  protected MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n    fieldInfos = new FieldInfos();\n  }\n\n","sourceOld":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Private until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  private MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n    fieldInfos = new FieldInfos();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","sourceNew":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Protected until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  protected MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n    fieldInfos = new FieldInfos();\n  }\n\n","sourceOld":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Protected until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  protected MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n    fieldInfos = new FieldInfos();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["214f697dffd3b41ffe286f7f67afd54e51b13935"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","214f697dffd3b41ffe286f7f67afd54e51b13935"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"214f697dffd3b41ffe286f7f67afd54e51b13935":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"214f697dffd3b41ffe286f7f67afd54e51b13935":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","214f697dffd3b41ffe286f7f67afd54e51b13935"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}