{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<SearchGroup<BytesRef>>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<BytesRef>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    } else if (DVFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      Collection<SearchGroup<BytesRef>> topGroups = ((DVFirstPassGroupingCollector<BytesRef>) c).getTopGroups(groupOffset, fillFields);\n      return topGroups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<SearchGroup<BytesRef>>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<BytesRef>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    } else if (DVFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      Collection<SearchGroup<BytesRef>> topGroups = ((DVFirstPassGroupingCollector<BytesRef>) c).getTopGroups(groupOffset, fillFields);\n      return topGroups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<SearchGroup<BytesRef>>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<BytesRef>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<SearchGroup<BytesRef>>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<BytesRef>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    } else if (DVFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      Collection<SearchGroup<BytesRef>> topGroups = ((DVFirstPassGroupingCollector<BytesRef>) c).getTopGroups(groupOffset, fillFields);\n      return topGroups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<SearchGroup<BytesRef>>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<BytesRef>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<SearchGroup<BytesRef>>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<BytesRef>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    } else if (DVFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      Collection<SearchGroup<BytesRef>> topGroups = ((DVFirstPassGroupingCollector<BytesRef>) c).getTopGroups(groupOffset, fillFields);\n      return topGroups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":["4739c84c362b9673ab5ed3e038ff760c718c30c8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"97d4692d0c601ff773f0a2231967312428a904e4","date":1366026608,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<SearchGroup<BytesRef>>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<BytesRef>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) throws IOException {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":["6005b05c19356dfca18f39979caeeb6b85bc88bb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) throws IOException {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(FirstPassGroupingCollector[#],int,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(FirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) throws IOException {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) throws IOException {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(FirstPassGroupingCollector[#],int,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(FirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) throws IOException {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) throws IOException {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value.get() : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7558b5077dd4abd457be151475f13b541f4f13e":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20e94e61fe5291647346b70437617e6b6c370408":["f7558b5077dd4abd457be151475f13b541f4f13e"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099","0837ab0472feecb3a54260729d845f839e1cbd72"],"97d4692d0c601ff773f0a2231967312428a904e4":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","20e94e61fe5291647346b70437617e6b6c370408"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["97d4692d0c601ff773f0a2231967312428a904e4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","f7558b5077dd4abd457be151475f13b541f4f13e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"f7558b5077dd4abd457be151475f13b541f4f13e":["20e94e61fe5291647346b70437617e6b6c370408","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"20e94e61fe5291647346b70437617e6b6c370408":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["97d4692d0c601ff773f0a2231967312428a904e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"97d4692d0c601ff773f0a2231967312428a904e4":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["f7558b5077dd4abd457be151475f13b541f4f13e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}