{"path":"src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,String]).mjava","commits":[{"id":"abec2fd822be07fc74ef5ba3609b9c5625a87d6d","date":1261659802,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  static int calcProps(String name, FieldType ft, Map<String, String> props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY | COMPRESSED;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED | OMIT_NORMS | OMIT_TF_POSITIONS\n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n    return p;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cf718fc7210fb8e7744d4b69704a4c9f732d1e92","cf718fc7210fb8e7744d4b69704a4c9f732d1e92","cf718fc7210fb8e7744d4b69704a4c9f732d1e92","6e61f8b6e1b607d67d9e0f477d711a92a0dfcde3","6e61f8b6e1b607d67d9e0f477d711a92a0dfcde3","6e61f8b6e1b607d67d9e0f477d711a92a0dfcde3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abdb6dddeb9ee17be5f51bf7c75b2405393b72ac","date":1268682985,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,String]).mjava","sourceNew":"  static int calcProps(String name, FieldType ft, Map<String, String> props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED | OMIT_NORMS | OMIT_TF_POSITIONS\n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n    return p;\n  }\n\n","sourceOld":"  static int calcProps(String name, FieldType ft, Map<String, String> props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY | COMPRESSED;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED | OMIT_NORMS | OMIT_TF_POSITIONS\n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n    return p;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,String]).mjava","sourceNew":"  static int calcProps(String name, FieldType ft, Map<String, String> props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED | OMIT_NORMS | OMIT_TF_POSITIONS\n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n    return p;\n  }\n\n","sourceOld":"  static int calcProps(String name, FieldType ft, Map<String, String> props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED | OMIT_NORMS | OMIT_TF_POSITIONS\n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n    return p;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["abdb6dddeb9ee17be5f51bf7c75b2405393b72ac"],"abdb6dddeb9ee17be5f51bf7c75b2405393b72ac":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abec2fd822be07fc74ef5ba3609b9c5625a87d6d":["abdb6dddeb9ee17be5f51bf7c75b2405393b72ac"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"abdb6dddeb9ee17be5f51bf7c75b2405393b72ac":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}