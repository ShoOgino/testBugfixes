{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSortedShards(List[Row],Collection[String],String).mjava","commits":[{"id":"6428b274f6593f368c4f838379620e7f5d196d65","date":1537799661,"type":1,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSortedShards(List[Row],Collection[String],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSortedShards(Suggestion.Ctx,Set[String]).mjava","sourceNew":"  static List<String> getSortedShards(List<Row> matrix, Collection<String> shardSet, String coll) {\n    return  shardSet.stream()\n        .map(shard1 -> {\n          AtomicReference<Pair<String, Long>> result = new AtomicReference<>();\n          for (Row node : matrix) {\n            node.forEachShard(coll, (s, ri) -> {\n              if (result.get() != null) return;\n              if (s.equals(shard1) && ri.size() > 0) {\n                Number sz = ((Number) ri.get(0).getVariable(CORE_IDX.tagName));\n                if (sz != null) result.set(new Pair<>(shard1, sz.longValue()));\n              }\n            });\n          }\n          return result.get() == null ? new Pair<>(shard1, 0L) : result.get();\n        })\n        .sorted(Comparator.comparingLong(Pair::second))\n        .map(Pair::first)\n        .collect(Collectors.toList());\n\n  }\n\n","sourceOld":"  private List<String> getSortedShards(Suggestion.Ctx ctx, Set<String> shardSet) {\n    return  shardSet.stream()\n        .map(shard1 -> {\n          AtomicReference<Pair<String, Long>> result = new AtomicReference<>();\n          for (Row node : ctx.session.matrix) {\n            node.forEachShard(ctx.violation.coll, (s, ri) -> {\n              if (result.get() != null) return;\n              if (s.equals(shard1) && ri.size() > 0) {\n                Number sz = ((Number) ri.get(0).getVariable(CORE_IDX.tagName));\n                if (sz != null) result.set(new Pair<>(shard1, sz.longValue()));\n              }\n            });\n          }\n          return result.get() == null ? new Pair<>(shard1, 0L) : result.get();\n        })\n        .sorted(Comparator.comparingLong(Pair::second))\n        .map(Pair::first)\n        .collect(Collectors.toList());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSortedShards(List[Row],Collection[String],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSortedShards(List[Row],Collection[String],String).mjava","sourceNew":"  static List<String> getSortedShards(List<Row> matrix, Collection<String> shardSet, String coll) {\n    return  shardSet.stream()\n        .map(shard1 -> {\n          AtomicReference<Pair<String, Long>> result = new AtomicReference<>();\n          for (Row node : matrix) {\n            node.forEachShard(coll, (s, ri) -> {\n              if (result.get() != null) return;\n              if (s.equals(shard1) && ri.size() > 0) {\n                Number sz = ((Number) ri.get(0).get(CORE_IDX.tagName));\n                if (sz != null) result.set(new Pair<>(shard1, sz.longValue()));\n              }\n            });\n          }\n          return result.get() == null ? new Pair<>(shard1, 0L) : result.get();\n        })\n        .sorted(Comparator.comparingLong(Pair::second))\n        .map(Pair::first)\n        .collect(Collectors.toList());\n\n  }\n\n","sourceOld":"  static List<String> getSortedShards(List<Row> matrix, Collection<String> shardSet, String coll) {\n    return  shardSet.stream()\n        .map(shard1 -> {\n          AtomicReference<Pair<String, Long>> result = new AtomicReference<>();\n          for (Row node : matrix) {\n            node.forEachShard(coll, (s, ri) -> {\n              if (result.get() != null) return;\n              if (s.equals(shard1) && ri.size() > 0) {\n                Number sz = ((Number) ri.get(0).getVariable(CORE_IDX.tagName));\n                if (sz != null) result.set(new Pair<>(shard1, sz.longValue()));\n              }\n            });\n          }\n          return result.get() == null ? new Pair<>(shard1, 0L) : result.get();\n        })\n        .sorted(Comparator.comparingLong(Pair::second))\n        .map(Pair::first)\n        .collect(Collectors.toList());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSortedShards(List[Row],Collection[String],String).mjava","sourceNew":null,"sourceOld":"  static List<String> getSortedShards(List<Row> matrix, Collection<String> shardSet, String coll) {\n    return  shardSet.stream()\n        .map(shard1 -> {\n          AtomicReference<Pair<String, Long>> result = new AtomicReference<>();\n          for (Row node : matrix) {\n            node.forEachShard(coll, (s, ri) -> {\n              if (result.get() != null) return;\n              if (s.equals(shard1) && ri.size() > 0) {\n                Number sz = ((Number) ri.get(0).get(CORE_IDX.tagName));\n                if (sz != null) result.set(new Pair<>(shard1, sz.longValue()));\n              }\n            });\n          }\n          return result.get() == null ? new Pair<>(shard1, 0L) : result.get();\n        })\n        .sorted(Comparator.comparingLong(Pair::second))\n        .map(Pair::first)\n        .collect(Collectors.toList());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["6428b274f6593f368c4f838379620e7f5d196d65"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6428b274f6593f368c4f838379620e7f5d196d65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6428b274f6593f368c4f838379620e7f5d196d65"],"6428b274f6593f368c4f838379620e7f5d196d65":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}