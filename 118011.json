{"path":"solr/core/src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,String]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,String]).mjava","sourceNew":"  static int calcProps(String name, FieldType ft, Map<String, String> props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED | OMIT_NORMS | OMIT_TF_POSITIONS\n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n    return p;\n  }\n\n","sourceOld":"  static int calcProps(String name, FieldType ft, Map<String, String> props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED | OMIT_NORMS | OMIT_TF_POSITIONS\n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n    return p;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,String]).mjava","sourceNew":"  static int calcProps(String name, FieldType ft, Map<String, String> props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED | OMIT_NORMS | OMIT_TF_POSITIONS\n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n    return p;\n  }\n\n","sourceOld":"  static int calcProps(String name, FieldType ft, Map<String, String> props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED | OMIT_NORMS | OMIT_TF_POSITIONS\n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n    return p;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,String]).mjava","pathOld":"solr/src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,String]).mjava","sourceNew":"  static int calcProps(String name, FieldType ft, Map<String, String> props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED | OMIT_NORMS | OMIT_TF_POSITIONS\n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n    return p;\n  }\n\n","sourceOld":"  static int calcProps(String name, FieldType ft, Map<String, String> props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED | OMIT_NORMS | OMIT_TF_POSITIONS\n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n    return p;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,String]).mjava","sourceNew":"  static int calcProps(String name, FieldType ft, Map<String, String> props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED | OMIT_NORMS | OMIT_TF_POSITIONS | OMIT_POSITIONS\n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(falseProps,OMIT_TF_POSITIONS)) {\n      int pp = (OMIT_POSITIONS | OMIT_TF_POSITIONS);\n      if (on(pp, trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n    return p;\n  }\n\n","sourceOld":"  static int calcProps(String name, FieldType ft, Map<String, String> props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED | OMIT_NORMS | OMIT_TF_POSITIONS\n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n    return p;\n  }\n\n","bugFix":null,"bugIntro":["cf718fc7210fb8e7744d4b69704a4c9f732d1e92"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf718fc7210fb8e7744d4b69704a4c9f732d1e92","date":1311538183,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,String]).mjava","sourceNew":"  static int calcProps(String name, FieldType ft, Map<String, String> props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED \n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting 'true' field options for non-indexed field:\" + props);\n      }\n      p &= ~pp;\n    }\n    if (on(falseProps,INDEXED)) {\n      int pp = (OMIT_NORMS | OMIT_TF_POSITIONS | OMIT_POSITIONS);\n      if (on(pp,falseProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting 'false' field options for non-indexed field:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(trueProps,OMIT_TF_POSITIONS)) {\n      int pp = (OMIT_POSITIONS | OMIT_TF_POSITIONS);\n      if (on(pp, falseProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting tf and position field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n    return p;\n  }\n\n","sourceOld":"  static int calcProps(String name, FieldType ft, Map<String, String> props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED | OMIT_NORMS | OMIT_TF_POSITIONS | OMIT_POSITIONS\n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(falseProps,OMIT_TF_POSITIONS)) {\n      int pp = (OMIT_POSITIONS | OMIT_TF_POSITIONS);\n      if (on(pp, trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n    return p;\n  }\n\n","bugFix":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d","2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e61f8b6e1b607d67d9e0f477d711a92a0dfcde3","date":1364572018,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,String]).mjava","sourceNew":"  static int calcProps(String name, FieldType ft, Map<String, String> props) {\n    int trueProps = parseProperties(props,true,true);\n    int falseProps = parseProperties(props,false,true);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED \n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting 'true' field options for non-indexed field:\" + props);\n      }\n      p &= ~pp;\n    }\n    if (on(falseProps,INDEXED)) {\n      int pp = (OMIT_NORMS | OMIT_TF_POSITIONS | OMIT_POSITIONS);\n      if (on(pp,falseProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting 'false' field options for non-indexed field:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(trueProps,OMIT_TF_POSITIONS)) {\n      int pp = (OMIT_POSITIONS | OMIT_TF_POSITIONS);\n      if (on(pp, falseProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting tf and position field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n    return p;\n  }\n\n","sourceOld":"  static int calcProps(String name, FieldType ft, Map<String, String> props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED \n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting 'true' field options for non-indexed field:\" + props);\n      }\n      p &= ~pp;\n    }\n    if (on(falseProps,INDEXED)) {\n      int pp = (OMIT_NORMS | OMIT_TF_POSITIONS | OMIT_POSITIONS);\n      if (on(pp,falseProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting 'false' field options for non-indexed field:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(trueProps,OMIT_TF_POSITIONS)) {\n      int pp = (OMIT_POSITIONS | OMIT_TF_POSITIONS);\n      if (on(pp, falseProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting tf and position field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n    return p;\n  }\n\n","bugFix":["abec2fd822be07fc74ef5ba3609b9c5625a87d6d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,#]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#calcProps(String,FieldType,Map[String,String]).mjava","sourceNew":"  static int calcProps(String name, FieldType ft, Map<String,?> props) {\n    int trueProps = parseProperties(props,true,true);\n    int falseProps = parseProperties(props,false,true);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED \n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting 'true' field options for non-indexed field:\" + props);\n      }\n      p &= ~pp;\n    }\n    if (on(falseProps,INDEXED)) {\n      int pp = (OMIT_NORMS | OMIT_TF_POSITIONS | OMIT_POSITIONS);\n      if (on(pp,falseProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting 'false' field options for non-indexed field:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(trueProps,OMIT_TF_POSITIONS)) {\n      int pp = (OMIT_POSITIONS | OMIT_TF_POSITIONS);\n      if (on(pp, falseProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting tf and position field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n    return p;\n  }\n\n","sourceOld":"  static int calcProps(String name, FieldType ft, Map<String, String> props) {\n    int trueProps = parseProperties(props,true,true);\n    int falseProps = parseProperties(props,false,true);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED \n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting 'true' field options for non-indexed field:\" + props);\n      }\n      p &= ~pp;\n    }\n    if (on(falseProps,INDEXED)) {\n      int pp = (OMIT_NORMS | OMIT_TF_POSITIONS | OMIT_POSITIONS);\n      if (on(pp,falseProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting 'false' field options for non-indexed field:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(trueProps,OMIT_TF_POSITIONS)) {\n      int pp = (OMIT_POSITIONS | OMIT_TF_POSITIONS);\n      if (on(pp, falseProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting tf and position field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n    return p;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf718fc7210fb8e7744d4b69704a4c9f732d1e92":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e61f8b6e1b607d67d9e0f477d711a92a0dfcde3":["cf718fc7210fb8e7744d4b69704a4c9f732d1e92"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["6e61f8b6e1b607d67d9e0f477d711a92a0dfcde3"]},"commit2Childs":{"cf718fc7210fb8e7744d4b69704a4c9f732d1e92":["6e61f8b6e1b607d67d9e0f477d711a92a0dfcde3"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["cf718fc7210fb8e7744d4b69704a4c9f732d1e92"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"6e61f8b6e1b607d67d9e0f477d711a92a0dfcde3":["08970e5b8411182a29412c177eff67ec1110095b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"08970e5b8411182a29412c177eff67ec1110095b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}