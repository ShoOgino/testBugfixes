{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadNumeric(NumericEntry).mjava","commits":[{"id":"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1","date":1383143016,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadNumeric(NumericEntry).mjava","pathOld":"/dev/null","sourceNew":"  private NumericDocValues loadNumeric(NumericEntry entry) throws IOException {\n    data.seek(entry.offset + entry.missingBytes);\n    switch (entry.byteWidth) {\n    case 1:\n      {\n        final byte[] values = new byte[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readByte();\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n      }\n\n    case 2:\n      {\n        final short[] values = new short[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readShort();\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n      }\n\n    case 4:\n      {\n        final int[] values = new int[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readInt();\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n      }\n\n    case 8:\n      {\n        final long[] values = new long[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readLong();\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n      }\n    \n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["dac1db31006989ae24922811f00f909d30f1391d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dac1db31006989ae24922811f00f909d30f1391d","date":1387560411,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadNumeric(NumericEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadNumeric(NumericEntry).mjava","sourceNew":"  private NumericDocValues loadNumeric(NumericEntry entry) throws IOException {\n    data.seek(entry.offset + entry.missingBytes);\n    switch (entry.byteWidth) {\n    case 1:\n      {\n        final byte[] values = new byte[entry.count];\n        data.readBytes(values, 0, entry.count);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(values));\n        return new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n      }\n\n    case 2:\n      {\n        final short[] values = new short[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readShort();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(values));\n        return new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n      }\n\n    case 4:\n      {\n        final int[] values = new int[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readInt();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(values));\n        return new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n      }\n\n    case 8:\n      {\n        final long[] values = new long[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readLong();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(values));\n        return new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n      }\n    \n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNumeric(NumericEntry entry) throws IOException {\n    data.seek(entry.offset + entry.missingBytes);\n    switch (entry.byteWidth) {\n    case 1:\n      {\n        final byte[] values = new byte[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readByte();\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n      }\n\n    case 2:\n      {\n        final short[] values = new short[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readShort();\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n      }\n\n    case 4:\n      {\n        final int[] values = new int[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readInt();\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n      }\n\n    case 8:\n      {\n        final long[] values = new long[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readLong();\n        }\n        return new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n      }\n    \n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadNumeric(NumericEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadNumeric(NumericEntry).mjava","sourceNew":"  private NumericRawValues loadNumeric(NumericEntry entry) throws IOException {\n    NumericRawValues ret = new NumericRawValues();\n    data.seek(entry.offset + entry.missingBytes);\n    switch (entry.byteWidth) {\n    case 1:\n      {\n        final byte[] values = new byte[entry.count];\n        data.readBytes(values, 0, entry.count);\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ramBytesUsed.addAndGet(ret.bytesUsed);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 2:\n      {\n        final short[] values = new short[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readShort();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ramBytesUsed.addAndGet(ret.bytesUsed);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 4:\n      {\n        final int[] values = new int[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readInt();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ramBytesUsed.addAndGet(ret.bytesUsed);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 8:\n      {\n        final long[] values = new long[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readLong();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ramBytesUsed.addAndGet(ret.bytesUsed);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n    \n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private NumericDocValues loadNumeric(NumericEntry entry) throws IOException {\n    data.seek(entry.offset + entry.missingBytes);\n    switch (entry.byteWidth) {\n    case 1:\n      {\n        final byte[] values = new byte[entry.count];\n        data.readBytes(values, 0, entry.count);\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(values));\n        return new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n      }\n\n    case 2:\n      {\n        final short[] values = new short[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readShort();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(values));\n        return new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n      }\n\n    case 4:\n      {\n        final int[] values = new int[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readInt();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(values));\n        return new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n      }\n\n    case 8:\n      {\n        final long[] values = new long[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readLong();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(values));\n        return new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n      }\n    \n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadNumeric(NumericEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadNumeric(NumericEntry).mjava","sourceNew":"  private NumericRawValues loadNumeric(NumericEntry entry) throws IOException {\n    NumericRawValues ret = new NumericRawValues();\n    data.seek(entry.offset + entry.missingBytes);\n    switch (entry.byteWidth) {\n    case 1:\n      {\n        final byte[] values = new byte[entry.count];\n        data.readBytes(values, 0, entry.count);\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 2:\n      {\n        final short[] values = new short[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readShort();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 4:\n      {\n        final int[] values = new int[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readInt();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 8:\n      {\n        final long[] values = new long[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readLong();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n    \n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private NumericRawValues loadNumeric(NumericEntry entry) throws IOException {\n    NumericRawValues ret = new NumericRawValues();\n    data.seek(entry.offset + entry.missingBytes);\n    switch (entry.byteWidth) {\n    case 1:\n      {\n        final byte[] values = new byte[entry.count];\n        data.readBytes(values, 0, entry.count);\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ramBytesUsed.addAndGet(ret.bytesUsed);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 2:\n      {\n        final short[] values = new short[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readShort();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ramBytesUsed.addAndGet(ret.bytesUsed);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 4:\n      {\n        final int[] values = new int[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readInt();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ramBytesUsed.addAndGet(ret.bytesUsed);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 8:\n      {\n        final long[] values = new long[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readLong();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ramBytesUsed.addAndGet(ret.bytesUsed);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n    \n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadNumeric(NumericEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadNumeric(NumericEntry).mjava","sourceNew":"  private NumericRawValues loadNumeric(NumericEntry entry) throws IOException {\n    NumericRawValues ret = new NumericRawValues();\n    data.seek(entry.offset + entry.missingBytes);\n    switch (entry.byteWidth) {\n    case 1:\n      {\n        final byte[] values = new byte[entry.count];\n        data.readBytes(values, 0, entry.count);\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 2:\n      {\n        final short[] values = new short[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readShort();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 4:\n      {\n        final int[] values = new int[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readInt();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 8:\n      {\n        final long[] values = new long[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readLong();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n    \n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private NumericRawValues loadNumeric(NumericEntry entry) throws IOException {\n    NumericRawValues ret = new NumericRawValues();\n    data.seek(entry.offset + entry.missingBytes);\n    switch (entry.byteWidth) {\n    case 1:\n      {\n        final byte[] values = new byte[entry.count];\n        data.readBytes(values, 0, entry.count);\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ramBytesUsed.addAndGet(ret.bytesUsed);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 2:\n      {\n        final short[] values = new short[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readShort();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ramBytesUsed.addAndGet(ret.bytesUsed);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 4:\n      {\n        final int[] values = new int[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readInt();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ramBytesUsed.addAndGet(ret.bytesUsed);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 8:\n      {\n        final long[] values = new long[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readLong();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ramBytesUsed.addAndGet(ret.bytesUsed);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n    \n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e1de7ca6cb231a67006f9dc4842722d219629fb","date":1453654393,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadNumeric(NumericEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadNumeric(NumericEntry).mjava","sourceNew":"  private NumericRawValues loadNumeric(NumericEntry entry) throws IOException {\n    NumericRawValues ret = new NumericRawValues();\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset + entry.missingBytes);\n    switch (entry.byteWidth) {\n    case 1:\n      {\n        final byte[] values = new byte[entry.count];\n        data.readBytes(values, 0, entry.count);\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 2:\n      {\n        final short[] values = new short[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readShort();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 4:\n      {\n        final int[] values = new int[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readInt();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 8:\n      {\n        final long[] values = new long[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readLong();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n    \n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private NumericRawValues loadNumeric(NumericEntry entry) throws IOException {\n    NumericRawValues ret = new NumericRawValues();\n    data.seek(entry.offset + entry.missingBytes);\n    switch (entry.byteWidth) {\n    case 1:\n      {\n        final byte[] values = new byte[entry.count];\n        data.readBytes(values, 0, entry.count);\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 2:\n      {\n        final short[] values = new short[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readShort();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 4:\n      {\n        final int[] values = new int[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readInt();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 8:\n      {\n        final long[] values = new long[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readLong();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n    \n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadNumeric(NumericEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadNumeric(NumericEntry).mjava","sourceNew":"  private NumericRawValues loadNumeric(NumericEntry entry) throws IOException {\n    NumericRawValues ret = new NumericRawValues();\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset + entry.missingBytes);\n    switch (entry.byteWidth) {\n    case 1:\n      {\n        final byte[] values = new byte[entry.count];\n        data.readBytes(values, 0, entry.count);\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new LegacyNumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 2:\n      {\n        final short[] values = new short[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readShort();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new LegacyNumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 4:\n      {\n        final int[] values = new int[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readInt();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new LegacyNumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 8:\n      {\n        final long[] values = new long[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readLong();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new LegacyNumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n    \n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private NumericRawValues loadNumeric(NumericEntry entry) throws IOException {\n    NumericRawValues ret = new NumericRawValues();\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset + entry.missingBytes);\n    switch (entry.byteWidth) {\n    case 1:\n      {\n        final byte[] values = new byte[entry.count];\n        data.readBytes(values, 0, entry.count);\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 2:\n      {\n        final short[] values = new short[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readShort();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 4:\n      {\n        final int[] values = new int[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readInt();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 8:\n      {\n        final long[] values = new long[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readLong();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n    \n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadNumeric(NumericEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadNumeric(NumericEntry).mjava","sourceNew":"  private NumericRawValues loadNumeric(NumericEntry entry) throws IOException {\n    NumericRawValues ret = new NumericRawValues();\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset + entry.missingBytes);\n    switch (entry.byteWidth) {\n    case 1:\n      {\n        final byte[] values = new byte[entry.count];\n        data.readBytes(values, 0, entry.count);\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new LegacyNumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 2:\n      {\n        final short[] values = new short[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readShort();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new LegacyNumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 4:\n      {\n        final int[] values = new int[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readInt();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new LegacyNumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 8:\n      {\n        final long[] values = new long[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readLong();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new LegacyNumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n    \n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private NumericRawValues loadNumeric(NumericEntry entry) throws IOException {\n    NumericRawValues ret = new NumericRawValues();\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset + entry.missingBytes);\n    switch (entry.byteWidth) {\n    case 1:\n      {\n        final byte[] values = new byte[entry.count];\n        data.readBytes(values, 0, entry.count);\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 2:\n      {\n        final short[] values = new short[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readShort();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 4:\n      {\n        final int[] values = new int[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readInt();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 8:\n      {\n        final long[] values = new long[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readLong();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n    \n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadNumeric(NumericEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadNumeric(NumericEntry).mjava","sourceNew":"  private NumericRawValues loadNumeric(NumericEntry entry) throws IOException {\n    NumericRawValues ret = new NumericRawValues();\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset + entry.missingBytes);\n    switch (entry.byteWidth) {\n    case 1:\n      {\n        final byte[] values = new byte[entry.count];\n        data.readBytes(values, 0, entry.count);\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new LegacyNumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 2:\n      {\n        final short[] values = new short[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readShort();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new LegacyNumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 4:\n      {\n        final int[] values = new int[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readInt();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new LegacyNumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 8:\n      {\n        final long[] values = new long[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readLong();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new LegacyNumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n    \n    default:\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  private NumericRawValues loadNumeric(NumericEntry entry) throws IOException {\n    NumericRawValues ret = new NumericRawValues();\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset + entry.missingBytes);\n    switch (entry.byteWidth) {\n    case 1:\n      {\n        final byte[] values = new byte[entry.count];\n        data.readBytes(values, 0, entry.count);\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 2:\n      {\n        final short[] values = new short[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readShort();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 4:\n      {\n        final int[] values = new int[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readInt();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 8:\n      {\n        final long[] values = new long[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readLong();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new NumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n    \n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f18fb78980c55a781fd9fdc505634171059b1d","date":1567674462,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadNumeric(NumericEntry).mjava","sourceNew":null,"sourceOld":"  private NumericRawValues loadNumeric(NumericEntry entry) throws IOException {\n    NumericRawValues ret = new NumericRawValues();\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset + entry.missingBytes);\n    switch (entry.byteWidth) {\n    case 1:\n      {\n        final byte[] values = new byte[entry.count];\n        data.readBytes(values, 0, entry.count);\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new LegacyNumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 2:\n      {\n        final short[] values = new short[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readShort();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new LegacyNumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 4:\n      {\n        final int[] values = new int[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readInt();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new LegacyNumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n\n    case 8:\n      {\n        final long[] values = new long[entry.count];\n        for(int i=0;i<entry.count;i++) {\n          values[i] = data.readLong();\n        }\n        ret.bytesUsed = RamUsageEstimator.sizeOf(values);\n        ret.numerics = new LegacyNumericDocValues() {\n          @Override\n          public long get(int idx) {\n            return values[idx];\n          }\n        };\n        return ret;\n      }\n    \n    default:\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bc8f80fee115148a0e4a0574560be06b494de821":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["0936055c0eed56be3e4ae5c9db5b0e355390736a","bc8f80fee115148a0e4a0574560be06b494de821"],"74f18fb78980c55a781fd9fdc505634171059b1d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["3e1de7ca6cb231a67006f9dc4842722d219629fb","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["3e1de7ca6cb231a67006f9dc4842722d219629fb"],"dac1db31006989ae24922811f00f909d30f1391d":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["dac1db31006989ae24922811f00f909d30f1391d"],"3e1de7ca6cb231a67006f9dc4842722d219629fb":["9bb9a29a5e71a90295f175df8919802993142c9a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3e1de7ca6cb231a67006f9dc4842722d219629fb","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74f18fb78980c55a781fd9fdc505634171059b1d"]},"commit2Childs":{"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1":["dac1db31006989ae24922811f00f909d30f1391d"],"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["3e1de7ca6cb231a67006f9dc4842722d219629fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"],"74f18fb78980c55a781fd9fdc505634171059b1d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["74f18fb78980c55a781fd9fdc505634171059b1d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"dac1db31006989ae24922811f00f909d30f1391d":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"3e1de7ca6cb231a67006f9dc4842722d219629fb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}