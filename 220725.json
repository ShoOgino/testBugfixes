{"path":"solr/core/src/java/org/apache/solr/cloud/SizeLimitedDistributedMap#put(String,byte[]).mjava","commits":[{"id":"b34744cdee27b92844fd3b14211ae16ea1d50413","date":1434566770,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SizeLimitedDistributedMap#put(String,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean put(String trackingId, byte[] data) throws KeeperException, InterruptedException {\n    if(this.size() >= maxSize) {\n      // Bring down the size\n      List<String> children = zookeeper.getChildren(dir, null, true);\n\n      int cleanupSize = maxSize / 10;\n      \n      final PriorityQueue priorityQueue = new PriorityQueue<Long>(cleanupSize) {\n        @Override\n        protected boolean lessThan(Long a, Long b) {\n          return (a > b);\n        }\n      };\n      \n      for(String child: children) {\n        Stat stat = zookeeper.exists(dir + \"/\" + child, null, true);\n        priorityQueue.insertWithOverflow(stat.getMzxid());\n      }\n      \n      long topElementMzxId = (Long) priorityQueue.top();\n      \n      for(String child:children) {\n        Stat stat = zookeeper.exists(dir + \"/\" + child, null, true);\n        if(stat.getMzxid() <= topElementMzxId)\n          zookeeper.delete(dir + \"/\" + child, -1, true);\n      }\n    }\n      \n    return createData(dir + \"/\" + prefix + trackingId, data,\n        CreateMode.PERSISTENT) != null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c4240d54e1e9886aff46e198b55314039ba37397","7741c4ff051707a6a5cb61529f6aee77c2420351"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4240d54e1e9886aff46e198b55314039ba37397","date":1455910430,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SizeLimitedDistributedMap#put(String,byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SizeLimitedDistributedMap#put(String,byte[]).mjava","sourceNew":"  @Override\n  public void put(String trackingId, byte[] data) throws KeeperException, InterruptedException {\n    if (this.size() >= maxSize) {\n      // Bring down the size\n      List<String> children = zookeeper.getChildren(dir, null, true);\n\n      int cleanupSize = maxSize / 10;\n\n      final PriorityQueue priorityQueue = new PriorityQueue<Long>(cleanupSize) {\n        @Override\n        protected boolean lessThan(Long a, Long b) {\n          return (a > b);\n        }\n      };\n\n      for (String child : children) {\n        Stat stat = zookeeper.exists(dir + \"/\" + child, null, true);\n        priorityQueue.insertWithOverflow(stat.getMzxid());\n      }\n\n      long topElementMzxId = (Long) priorityQueue.top();\n\n      for (String child : children) {\n        Stat stat = zookeeper.exists(dir + \"/\" + child, null, true);\n        if (stat.getMzxid() <= topElementMzxId)\n          zookeeper.delete(dir + \"/\" + child, -1, true);\n      }\n    }\n\n    super.put(trackingId, data);\n  }\n\n","sourceOld":"  @Override\n  public boolean put(String trackingId, byte[] data) throws KeeperException, InterruptedException {\n    if(this.size() >= maxSize) {\n      // Bring down the size\n      List<String> children = zookeeper.getChildren(dir, null, true);\n\n      int cleanupSize = maxSize / 10;\n      \n      final PriorityQueue priorityQueue = new PriorityQueue<Long>(cleanupSize) {\n        @Override\n        protected boolean lessThan(Long a, Long b) {\n          return (a > b);\n        }\n      };\n      \n      for(String child: children) {\n        Stat stat = zookeeper.exists(dir + \"/\" + child, null, true);\n        priorityQueue.insertWithOverflow(stat.getMzxid());\n      }\n      \n      long topElementMzxId = (Long) priorityQueue.top();\n      \n      for(String child:children) {\n        Stat stat = zookeeper.exists(dir + \"/\" + child, null, true);\n        if(stat.getMzxid() <= topElementMzxId)\n          zookeeper.delete(dir + \"/\" + child, -1, true);\n      }\n    }\n      \n    return createData(dir + \"/\" + prefix + trackingId, data,\n        CreateMode.PERSISTENT) != null;\n  }\n\n","bugFix":["b34744cdee27b92844fd3b14211ae16ea1d50413"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd8a9ad1acc754f713e220250044c2bf06a22a0b","date":1518740056,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SizeLimitedDistributedMap#put(String,byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SizeLimitedDistributedMap#put(String,byte[]).mjava","sourceNew":"  @Override\n  public void put(String trackingId, byte[] data) throws KeeperException, InterruptedException {\n    if (this.size() >= maxSize) {\n      // Bring down the size\n      List<String> children = zookeeper.getChildren(dir, null, true);\n\n      int cleanupSize = maxSize / 10;\n\n      final PriorityQueue<Long> priorityQueue = new PriorityQueue<Long>(cleanupSize) {\n        @Override\n        protected boolean lessThan(Long a, Long b) {\n          return (a > b);\n        }\n      };\n\n      for (String child : children) {\n        Stat stat = zookeeper.exists(dir + \"/\" + child, null, true);\n        priorityQueue.insertWithOverflow(stat.getMzxid());\n      }\n\n      long topElementMzxId = (Long) priorityQueue.top();\n\n      for (String child : children) {\n        Stat stat = zookeeper.exists(dir + \"/\" + child, null, true);\n        if (stat.getMzxid() <= topElementMzxId) {\n          zookeeper.delete(dir + \"/\" + child, -1, true);\n          if (onOverflowObserver != null) onOverflowObserver.onChildDelete(child.substring(PREFIX.length()));\n        }\n      }\n    }\n\n    super.put(trackingId, data);\n  }\n\n","sourceOld":"  @Override\n  public void put(String trackingId, byte[] data) throws KeeperException, InterruptedException {\n    if (this.size() >= maxSize) {\n      // Bring down the size\n      List<String> children = zookeeper.getChildren(dir, null, true);\n\n      int cleanupSize = maxSize / 10;\n\n      final PriorityQueue priorityQueue = new PriorityQueue<Long>(cleanupSize) {\n        @Override\n        protected boolean lessThan(Long a, Long b) {\n          return (a > b);\n        }\n      };\n\n      for (String child : children) {\n        Stat stat = zookeeper.exists(dir + \"/\" + child, null, true);\n        priorityQueue.insertWithOverflow(stat.getMzxid());\n      }\n\n      long topElementMzxId = (Long) priorityQueue.top();\n\n      for (String child : children) {\n        Stat stat = zookeeper.exists(dir + \"/\" + child, null, true);\n        if (stat.getMzxid() <= topElementMzxId)\n          zookeeper.delete(dir + \"/\" + child, -1, true);\n      }\n    }\n\n    super.put(trackingId, data);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7741c4ff051707a6a5cb61529f6aee77c2420351","date":1518740548,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SizeLimitedDistributedMap#put(String,byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SizeLimitedDistributedMap#put(String,byte[]).mjava","sourceNew":"  @Override\n  public void put(String trackingId, byte[] data) throws KeeperException, InterruptedException {\n    if (this.size() >= maxSize) {\n      // Bring down the size\n      List<String> children = zookeeper.getChildren(dir, null, true);\n\n      int cleanupSize = maxSize / 10;\n\n      final PriorityQueue<Long> priorityQueue = new PriorityQueue<Long>(cleanupSize) {\n        @Override\n        protected boolean lessThan(Long a, Long b) {\n          return (a > b);\n        }\n      };\n\n      for (String child : children) {\n        Stat stat = zookeeper.exists(dir + \"/\" + child, null, true);\n        priorityQueue.insertWithOverflow(stat.getMzxid());\n      }\n\n      long topElementMzxId = priorityQueue.top();\n\n      for (String child : children) {\n        Stat stat = zookeeper.exists(dir + \"/\" + child, null, true);\n        if (stat.getMzxid() <= topElementMzxId) {\n          zookeeper.delete(dir + \"/\" + child, -1, true);\n          if (onOverflowObserver != null) onOverflowObserver.onChildDelete(child.substring(PREFIX.length()));\n        }\n      }\n    }\n\n    super.put(trackingId, data);\n  }\n\n","sourceOld":"  @Override\n  public void put(String trackingId, byte[] data) throws KeeperException, InterruptedException {\n    if (this.size() >= maxSize) {\n      // Bring down the size\n      List<String> children = zookeeper.getChildren(dir, null, true);\n\n      int cleanupSize = maxSize / 10;\n\n      final PriorityQueue<Long> priorityQueue = new PriorityQueue<Long>(cleanupSize) {\n        @Override\n        protected boolean lessThan(Long a, Long b) {\n          return (a > b);\n        }\n      };\n\n      for (String child : children) {\n        Stat stat = zookeeper.exists(dir + \"/\" + child, null, true);\n        priorityQueue.insertWithOverflow(stat.getMzxid());\n      }\n\n      long topElementMzxId = (Long) priorityQueue.top();\n\n      for (String child : children) {\n        Stat stat = zookeeper.exists(dir + \"/\" + child, null, true);\n        if (stat.getMzxid() <= topElementMzxId) {\n          zookeeper.delete(dir + \"/\" + child, -1, true);\n          if (onOverflowObserver != null) onOverflowObserver.onChildDelete(child.substring(PREFIX.length()));\n        }\n      }\n    }\n\n    super.put(trackingId, data);\n  }\n\n","bugFix":["b34744cdee27b92844fd3b14211ae16ea1d50413"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd8a9ad1acc754f713e220250044c2bf06a22a0b":["c4240d54e1e9886aff46e198b55314039ba37397"],"c4240d54e1e9886aff46e198b55314039ba37397":["b34744cdee27b92844fd3b14211ae16ea1d50413"],"b34744cdee27b92844fd3b14211ae16ea1d50413":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7741c4ff051707a6a5cb61529f6aee77c2420351":["dd8a9ad1acc754f713e220250044c2bf06a22a0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7741c4ff051707a6a5cb61529f6aee77c2420351"]},"commit2Childs":{"dd8a9ad1acc754f713e220250044c2bf06a22a0b":["7741c4ff051707a6a5cb61529f6aee77c2420351"],"c4240d54e1e9886aff46e198b55314039ba37397":["dd8a9ad1acc754f713e220250044c2bf06a22a0b"],"b34744cdee27b92844fd3b14211ae16ea1d50413":["c4240d54e1e9886aff46e198b55314039ba37397"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b34744cdee27b92844fd3b14211ae16ea1d50413"],"7741c4ff051707a6a5cb61529f6aee77c2420351":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}