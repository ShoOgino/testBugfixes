{"path":"lucene/src/java/org/apache/lucene/index/MultiFields#getLiveDocs(IndexReader).mjava","commits":[{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getLiveDocs(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getDeletedDocs(IndexReader).mjava","sourceNew":"  public static Bits getLiveDocs(IndexReader r) {\n    Bits result;\n    if (r.hasDeletions()) {\n\n      final List<Bits> liveDocs = new ArrayList<Bits>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, IndexReader r) throws IOException {\n              // record all liveDocs, even if they are null\n              liveDocs.add(r.getLiveDocs());\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert liveDocs.size() > 0;\n      if (liveDocs.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        result = liveDocs.get(0);\n      } else {\n        result = new MultiBits(liveDocs, starts, true);\n      }\n\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n\n","sourceOld":"  public static Bits getDeletedDocs(IndexReader r) {\n    Bits result;\n    if (r.hasDeletions()) {\n\n      final List<Bits> delDocs = new ArrayList<Bits>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, IndexReader r) throws IOException {\n              // record all delDocs, even if they are null\n              delDocs.add(r.getDeletedDocs());\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert delDocs.size() > 0;\n      if (delDocs.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        result = delDocs.get(0);\n      } else {\n        result = new MultiBits(delDocs, starts);\n      }\n\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getLiveDocs(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public static Bits getLiveDocs(IndexReader r) {\n    Bits result;\n    if (r.hasDeletions()) {\n\n      final List<Bits> liveDocs = new ArrayList<Bits>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, IndexReader r) throws IOException {\n              // record all liveDocs, even if they are null\n              liveDocs.add(r.getLiveDocs());\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert liveDocs.size() > 0;\n      if (liveDocs.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        result = liveDocs.get(0);\n      } else {\n        result = new MultiBits(liveDocs, starts, true);\n      }\n\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getLiveDocs(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public static Bits getLiveDocs(IndexReader r) {\n    Bits result;\n    if (r.hasDeletions()) {\n\n      final List<Bits> liveDocs = new ArrayList<Bits>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, IndexReader r) throws IOException {\n              // record all liveDocs, even if they are null\n              liveDocs.add(r.getLiveDocs());\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert liveDocs.size() > 0;\n      if (liveDocs.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        result = liveDocs.get(0);\n      } else {\n        result = new MultiBits(liveDocs, starts, true);\n      }\n\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getLiveDocs(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getLiveDocs(IndexReader).mjava","sourceNew":"  public static Bits getLiveDocs(IndexReader r) {\n    if (r.hasDeletions()) {\n      final List<Bits> liveDocs = new ArrayList<Bits>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, AtomicIndexReader r) throws IOException {\n              // record all liveDocs, even if they are null\n              liveDocs.add(r.getLiveDocs());\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert liveDocs.size() > 0;\n      if (liveDocs.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        return liveDocs.get(0);\n      } else {\n        return new MultiBits(liveDocs, starts, true);\n      }\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  public static Bits getLiveDocs(IndexReader r) {\n    Bits result;\n    if (r.hasDeletions()) {\n\n      final List<Bits> liveDocs = new ArrayList<Bits>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, IndexReader r) throws IOException {\n              // record all liveDocs, even if they are null\n              liveDocs.add(r.getLiveDocs());\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert liveDocs.size() > 0;\n      if (liveDocs.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        result = liveDocs.get(0);\n      } else {\n        result = new MultiBits(liveDocs, starts, true);\n      }\n\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getLiveDocs(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getLiveDocs(IndexReader).mjava","sourceNew":"  public static Bits getLiveDocs(IndexReader r) {\n    if (r.hasDeletions()) {\n      final List<Bits> liveDocs = new ArrayList<Bits>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, AtomicReader r) throws IOException {\n              // record all liveDocs, even if they are null\n              liveDocs.add(r.getLiveDocs());\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert liveDocs.size() > 0;\n      if (liveDocs.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        return liveDocs.get(0);\n      } else {\n        return new MultiBits(liveDocs, starts, true);\n      }\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  public static Bits getLiveDocs(IndexReader r) {\n    if (r.hasDeletions()) {\n      final List<Bits> liveDocs = new ArrayList<Bits>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, AtomicIndexReader r) throws IOException {\n              // record all liveDocs, even if they are null\n              liveDocs.add(r.getLiveDocs());\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert liveDocs.size() > 0;\n      if (liveDocs.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        return liveDocs.get(0);\n      } else {\n        return new MultiBits(liveDocs, starts, true);\n      }\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFields#getLiveDocs(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getLiveDocs(IndexReader).mjava","sourceNew":"  public static Bits getLiveDocs(IndexReader r) {\n    if (r.hasDeletions()) {\n      final List<Bits> liveDocs = new ArrayList<Bits>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, AtomicReader r) throws IOException {\n              // record all liveDocs, even if they are null\n              liveDocs.add(r.getLiveDocs());\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert liveDocs.size() > 0;\n      if (liveDocs.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        return liveDocs.get(0);\n      } else {\n        return new MultiBits(liveDocs, starts, true);\n      }\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  public static Bits getLiveDocs(IndexReader r) {\n    Bits result;\n    if (r.hasDeletions()) {\n\n      final List<Bits> liveDocs = new ArrayList<Bits>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, IndexReader r) throws IOException {\n              // record all liveDocs, even if they are null\n              liveDocs.add(r.getLiveDocs());\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert liveDocs.size() > 0;\n      if (liveDocs.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        result = liveDocs.get(0);\n      } else {\n        result = new MultiBits(liveDocs, starts, true);\n      }\n\n    } else {\n      result = null;\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiFields#getLiveDocs(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFields#getLiveDocs(IndexReader).mjava","sourceNew":"  public static Bits getLiveDocs(IndexReader r) {\n    if (r.hasDeletions()) {\n      final List<Bits> liveDocs = new ArrayList<Bits>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, AtomicReader r) throws IOException {\n              // record all liveDocs, even if they are null\n              liveDocs.add(r.getLiveDocs());\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert liveDocs.size() > 0;\n      if (liveDocs.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        return liveDocs.get(0);\n      } else {\n        return new MultiBits(liveDocs, starts, true);\n      }\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  public static Bits getLiveDocs(IndexReader r) {\n    if (r.hasDeletions()) {\n      final List<Bits> liveDocs = new ArrayList<Bits>();\n      final List<Integer> starts = new ArrayList<Integer>();\n\n      try {\n        final int maxDoc = new ReaderUtil.Gather(r) {\n            @Override\n            protected void add(int base, AtomicReader r) throws IOException {\n              // record all liveDocs, even if they are null\n              liveDocs.add(r.getLiveDocs());\n              starts.add(base);\n            }\n          }.run();\n        starts.add(maxDoc);\n      } catch (IOException ioe) {\n        // should not happen\n        throw new RuntimeException(ioe);\n      }\n\n      assert liveDocs.size() > 0;\n      if (liveDocs.size() == 1) {\n        // Only one actual sub reader -- optimize this case\n        return liveDocs.get(0);\n      } else {\n        return new MultiBits(liveDocs, starts, true);\n      }\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","da6d5ac19a80d65b1e864251f155d30960353b7e"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["d083e83f225b11e5fdd900e83d26ddb385b6955c","5cab9a86bd67202d20b6adc463008c8e982b070a","817d8435e9135b756f08ce6710ab0baac51bdf88","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}