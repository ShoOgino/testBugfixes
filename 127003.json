{"path":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean).mjava","commits":[{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean).mjava","pathOld":"/dev/null","sourceNew":"    // Returns a ref to a clone.  NOTE: this clone is not\n    // enrolled in the pool, so you should simply close()\n    // it when you're done (ie, do not call release()).\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores) throws IOException {\n      SegmentReader sr = get(info, doOpenStores);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"961159f13aece73fbb30aea720e77a2237e8bafd","date":1247258916,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean).mjava","sourceNew":"    // Returns a ref to a clone.  NOTE: this clone is not\n    // enrolled in the pool, so you should simply close()\n    // it when you're done (ie, do not call release()).\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, int termInfosIndexDivisor) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, termInfosIndexDivisor);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    // Returns a ref to a clone.  NOTE: this clone is not\n    // enrolled in the pool, so you should simply close()\n    // it when you're done (ie, do not call release()).\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores) throws IOException {\n      SegmentReader sr = get(info, doOpenStores);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"961159f13aece73fbb30aea720e77a2237e8bafd":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4ff8864209d2e972cb4393600c26082f9a6533d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["961159f13aece73fbb30aea720e77a2237e8bafd"]},"commit2Childs":{"961159f13aece73fbb30aea720e77a2237e8bafd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["961159f13aece73fbb30aea720e77a2237e8bafd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}