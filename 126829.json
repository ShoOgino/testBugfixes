{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, 250);\n    params.set(HttpClientUtil.PROP_SO_TIMEOUT, 250);\n    HttpClient myHttpClient = HttpClientUtil.createClient(params);\n\n    LBHttpSolrClient client = new LBHttpSolrClient(myHttpClient, s);\n    client.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      client.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, client, 3, \"solr1\");\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, 250);\n    params.set(HttpClientUtil.PROP_SO_TIMEOUT, 250);\n    HttpClient myHttpClient = HttpClientUtil.createClient(params);\n\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(myHttpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      lbHttpSolrServer.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, lbHttpSolrServer, 3, \"solr1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, 250);\n    params.set(HttpClientUtil.PROP_SO_TIMEOUT, 250);\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(params);\n    try {\n      LBHttpSolrClient client = new LBHttpSolrClient(myHttpClient, s);\n      client.setAliveCheckInterval(500);\n  \n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n  \n      // query the servers\n      for (String value : s)\n        client.query(new SolrQuery(\"*:*\"));\n  \n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      waitForServer(30000, client, 3, \"solr1\");\n    } finally {\n      myHttpClient.close();\n    }\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, 250);\n    params.set(HttpClientUtil.PROP_SO_TIMEOUT, 250);\n    HttpClient myHttpClient = HttpClientUtil.createClient(params);\n\n    LBHttpSolrClient client = new LBHttpSolrClient(myHttpClient, s);\n    client.setAliveCheckInterval(500);\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n\n    // query the servers\n    for (String value : s)\n      client.query(new SolrQuery(\"*:*\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    waitForServer(30000, client, 3, \"solr1\");\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, 250);\n    params.set(HttpClientUtil.PROP_SO_TIMEOUT, 250);\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(params);\n    try {\n      LBHttpSolrClient client = new LBHttpSolrClient(myHttpClient, s);\n      client.setAliveCheckInterval(500);\n  \n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n  \n      // query the servers\n      for (String value : s)\n        client.query(new SolrQuery(\"*:*\"));\n  \n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      waitForServer(30, client, 3, \"solr1\");\n    } finally {\n      myHttpClient.close();\n    }\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, 250);\n    params.set(HttpClientUtil.PROP_SO_TIMEOUT, 250);\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(params);\n    try {\n      LBHttpSolrClient client = new LBHttpSolrClient(myHttpClient, s);\n      client.setAliveCheckInterval(500);\n  \n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n  \n      // query the servers\n      for (String value : s)\n        client.query(new SolrQuery(\"*:*\"));\n  \n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      waitForServer(30000, client, 3, \"solr1\");\n    } finally {\n      myHttpClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(null);\n    try {\n      LBHttpSolrClient client = new LBHttpSolrClient(myHttpClient, s);\n      client.setConnectionTimeout(250);\n      client.setSoTimeout(250);\n      client.setAliveCheckInterval(500);\n  \n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n  \n      // query the servers\n      for (String value : s)\n        client.query(new SolrQuery(\"*:*\"));\n  \n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      waitForServer(30, client, 3, \"solr1\");\n    } finally {\n      HttpClientUtil.close(myHttpClient);\n    }\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_CONNECTION_TIMEOUT, 250);\n    params.set(HttpClientUtil.PROP_SO_TIMEOUT, 250);\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(params);\n    try {\n      LBHttpSolrClient client = new LBHttpSolrClient(myHttpClient, s);\n      client.setAliveCheckInterval(500);\n  \n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n  \n      // query the servers\n      for (String value : s)\n        client.query(new SolrQuery(\"*:*\"));\n  \n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      waitForServer(30, client, 3, \"solr1\");\n    } finally {\n      myHttpClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(null);\n    try {\n      LBHttpSolrClient client = getLBHttpSolrClient(myHttpClient, s);\n      client.setConnectionTimeout(250);\n      client.setSoTimeout(250);\n      client.setAliveCheckInterval(500);\n  \n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n  \n      // query the servers\n      for (String value : s)\n        client.query(new SolrQuery(\"*:*\"));\n  \n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      waitForServer(30, client, 3, \"solr1\");\n    } finally {\n      HttpClientUtil.close(myHttpClient);\n    }\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(null);\n    try {\n      LBHttpSolrClient client = new LBHttpSolrClient(myHttpClient, s);\n      client.setConnectionTimeout(250);\n      client.setSoTimeout(250);\n      client.setAliveCheckInterval(500);\n  \n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n  \n      // query the servers\n      for (String value : s)\n        client.query(new SolrQuery(\"*:*\"));\n  \n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      waitForServer(30, client, 3, \"solr1\");\n    } finally {\n      HttpClientUtil.close(myHttpClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(null);\n    try {\n      LBHttpSolrClient client = getLBHttpSolrClient(myHttpClient, s);\n      client.setConnectionTimeout(250);\n      client.setSoTimeout(250);\n      client.setAliveCheckInterval(500);\n  \n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n  \n      // query the servers\n      for (String value : s)\n        client.query(new SolrQuery(\"*:*\"));\n  \n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      waitForServer(30, client, 3, \"solr1\");\n    } finally {\n      HttpClientUtil.close(myHttpClient);\n    }\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(null);\n    try {\n      LBHttpSolrClient client = new LBHttpSolrClient(myHttpClient, s);\n      client.setConnectionTimeout(250);\n      client.setSoTimeout(250);\n      client.setAliveCheckInterval(500);\n  \n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n  \n      // query the servers\n      for (String value : s)\n        client.query(new SolrQuery(\"*:*\"));\n  \n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      waitForServer(30, client, 3, \"solr1\");\n    } finally {\n      HttpClientUtil.close(myHttpClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d24a6ef30a2cc374f56b48f3f7e6eac53482eea8","date":1487554711,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(null);\n    try {\n      LBHttpSolrClient client = getLBHttpSolrClient(myHttpClient, s);\n      client.setConnectionTimeout(500);\n      client.setSoTimeout(500);\n      client.setAliveCheckInterval(500);\n  \n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n  \n      // query the servers\n      for (String value : s)\n        client.query(new SolrQuery(\"*:*\"));\n  \n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      waitForServer(30, client, 3, \"solr1\");\n    } finally {\n      HttpClientUtil.close(myHttpClient);\n    }\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(null);\n    try {\n      LBHttpSolrClient client = getLBHttpSolrClient(myHttpClient, s);\n      client.setConnectionTimeout(250);\n      client.setSoTimeout(250);\n      client.setAliveCheckInterval(500);\n  \n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n  \n      // query the servers\n      for (String value : s)\n        client.query(new SolrQuery(\"*:*\"));\n  \n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      waitForServer(30, client, 3, \"solr1\");\n    } finally {\n      HttpClientUtil.close(myHttpClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(null);\n    try {\n      LBHttpSolrClient client = getLBHttpSolrClient(myHttpClient, 500, 500, s);\n      client.setAliveCheckInterval(500);\n  \n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n  \n      // query the servers\n      for (String value : s)\n        client.query(new SolrQuery(\"*:*\"));\n  \n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      waitForServer(30, client, 3, \"solr1\");\n    } finally {\n      HttpClientUtil.close(myHttpClient);\n    }\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(null);\n    try {\n      LBHttpSolrClient client = getLBHttpSolrClient(myHttpClient, s);\n      client.setConnectionTimeout(500);\n      client.setSoTimeout(500);\n      client.setAliveCheckInterval(500);\n  \n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n  \n      // query the servers\n      for (String value : s)\n        client.query(new SolrQuery(\"*:*\"));\n  \n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      waitForServer(30, client, 3, \"solr1\");\n    } finally {\n      HttpClientUtil.close(myHttpClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(null);\n    try {\n      LBHttpSolrClient client = getLBHttpSolrClient(myHttpClient, 500, 500, s);\n      client.setAliveCheckInterval(500);\n  \n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n  \n      // query the servers\n      for (String value : s)\n        client.query(new SolrQuery(\"*:*\"));\n  \n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      waitForServer(30, client, 3, \"solr1\");\n    } finally {\n      HttpClientUtil.close(myHttpClient);\n    }\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(null);\n    try {\n      LBHttpSolrClient client = getLBHttpSolrClient(myHttpClient, s);\n      client.setConnectionTimeout(500);\n      client.setSoTimeout(500);\n      client.setAliveCheckInterval(500);\n  \n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n  \n      // query the servers\n      for (String value : s)\n        client.query(new SolrQuery(\"*:*\"));\n  \n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      waitForServer(30, client, 3, \"solr1\");\n    } finally {\n      HttpClientUtil.close(myHttpClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8de8196ffd9f1a63a4e69a7088ee96de6a92aeb1","date":1500391895,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(null);\n    try {\n      LBHttpSolrClient client = getLBHttpSolrClient(myHttpClient, 500, 500, s);\n      client.setAliveCheckInterval(500);\n  \n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n  \n      // query the servers\n      for (String value : s)\n        client.query(new SolrQuery(\"*:*\"));\n  \n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      waitForServer(30, client, 3, solr[1].name);\n    } finally {\n      HttpClientUtil.close(myHttpClient);\n    }\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(null);\n    try {\n      LBHttpSolrClient client = getLBHttpSolrClient(myHttpClient, 500, 500, s);\n      client.setAliveCheckInterval(500);\n  \n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n  \n      // query the servers\n      for (String value : s)\n        client.query(new SolrQuery(\"*:*\"));\n  \n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      waitForServer(30, client, 3, \"solr1\");\n    } finally {\n      HttpClientUtil.close(myHttpClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(null);\n    try {\n      LBHttpSolrClient client = getLBHttpSolrClient(myHttpClient, 500, 500, s);\n      client.setAliveCheckInterval(500);\n  \n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n  \n      // query the servers\n      for (String value : s)\n        client.query(new SolrQuery(\"*:*\"));\n  \n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      waitForServer(30, client, 3, solr[1].name);\n    } finally {\n      HttpClientUtil.close(myHttpClient);\n    }\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(null);\n    try {\n      LBHttpSolrClient client = getLBHttpSolrClient(myHttpClient, 500, 500, s);\n      client.setAliveCheckInterval(500);\n  \n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n  \n      // query the servers\n      for (String value : s)\n        client.query(new SolrQuery(\"*:*\"));\n  \n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      waitForServer(30, client, 3, \"solr1\");\n    } finally {\n      HttpClientUtil.close(myHttpClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testReliability().mjava","sourceNew":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(null);\n    try {\n      try (LBHttpSolrClient client = getLBHttpSolrClient(myHttpClient, 500, 500, s)) {\n        client.setAliveCheckInterval(500);\n\n        // Kill a server and test again\n        solr[1].jetty.stop();\n        solr[1].jetty = null;\n\n        // query the servers\n        for (String value : s)\n          client.query(new SolrQuery(\"*:*\"));\n\n        // Start the killed server once again\n        solr[1].startJetty();\n        // Wait for the alive check to complete\n        waitForServer(30, client, 3, solr[1].name);\n      }\n    } finally {\n      HttpClientUtil.close(myHttpClient);\n    }\n  }\n\n","sourceOld":"  public void testReliability() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n\n    CloseableHttpClient myHttpClient = HttpClientUtil.createClient(null);\n    try {\n      LBHttpSolrClient client = getLBHttpSolrClient(myHttpClient, 500, 500, s);\n      client.setAliveCheckInterval(500);\n  \n      // Kill a server and test again\n      solr[1].jetty.stop();\n      solr[1].jetty = null;\n  \n      // query the servers\n      for (String value : s)\n        client.query(new SolrQuery(\"*:*\"));\n  \n      // Start the killed server once again\n      solr[1].startJetty();\n      // Wait for the alive check to complete\n      waitForServer(30, client, 3, solr[1].name);\n    } finally {\n      HttpClientUtil.close(myHttpClient);\n    }\n  }\n\n","bugFix":["6784d0cc613dc1ee97030eaaa5e0754edc22d164","43d1e498704edd2bba13548a189eed4dfccff11b","8de8196ffd9f1a63a4e69a7088ee96de6a92aeb1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["8de8196ffd9f1a63a4e69a7088ee96de6a92aeb1"],"d24a6ef30a2cc374f56b48f3f7e6eac53482eea8":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["859081acf00749f5dd462772c571d611d4a4d2db"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","8de8196ffd9f1a63a4e69a7088ee96de6a92aeb1"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"43d1e498704edd2bba13548a189eed4dfccff11b":["d24a6ef30a2cc374f56b48f3f7e6eac53482eea8"],"859081acf00749f5dd462772c571d611d4a4d2db":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["d24a6ef30a2cc374f56b48f3f7e6eac53482eea8","43d1e498704edd2bba13548a189eed4dfccff11b"],"8de8196ffd9f1a63a4e69a7088ee96de6a92aeb1":["43d1e498704edd2bba13548a189eed4dfccff11b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["859081acf00749f5dd462772c571d611d4a4d2db","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d24a6ef30a2cc374f56b48f3f7e6eac53482eea8":["43d1e498704edd2bba13548a189eed4dfccff11b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"bafca15d8e408346a67f4282ad1143b88023893b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"43d1e498704edd2bba13548a189eed4dfccff11b":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","8de8196ffd9f1a63a4e69a7088ee96de6a92aeb1"],"859081acf00749f5dd462772c571d611d4a4d2db":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"8de8196ffd9f1a63a4e69a7088ee96de6a92aeb1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","936cdd5882761db3b844afd6f84ab81cbb011a75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["d24a6ef30a2cc374f56b48f3f7e6eac53482eea8"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["859081acf00749f5dd462772c571d611d4a4d2db"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}