{"path":"src/test/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","commits":[{"id":"0b1460ee2827b26dc3a41a6c403bb5872f87ddaa","date":1080060596,"type":0,"author":"Tim Jones","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","pathOld":"/dev/null","sourceNew":"\t// test that the relevancy scores are the same even if\n\t// hits are sorted\n\tpublic void testNormalizedScores() throws Exception {\n\n\t\t// capture relevancy scores\n\t\tHashMap scoresX = getScores (full.search (queryX));\n\t\tHashMap scoresY = getScores (full.search (queryY));\n\t\tHashMap scoresA = getScores (full.search (queryA));\n\n\t\t// we'll test searching locally, remote and multi\n\t\t// note: the multi test depends on each separate index containing\n\t\t// the same documents as our local index, so the computed normalization\n\t\t// will be the same.  so we make a multi searcher over two equal document\n\t\t// sets - not realistic, but necessary for testing.\n\t\tMultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\t\tMultiSearcher multi  = new MultiSearcher (new Searchable[] { full, full });\n\n\t\t// change sorting and make sure relevancy stays the same\n\n\t\tsort = new Sort();\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort(SortField.FIELD_DOC);\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"int\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"float\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"string\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new String[] {\"int\",\"float\"});\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\", true), new SortField (null, SortField.DOC, true) });\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new String[] {\"float\",\"string\"});\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceaa9738cad9616d1831286111af106e13e0e4b","date":1114543820,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","sourceNew":"\t// test that the relevancy scores are the same even if\n\t// hits are sorted\n\tpublic void testNormalizedScores() throws Exception {\n\n\t\t// capture relevancy scores\n\t\tHashMap scoresX = getScores (full.search (queryX));\n\t\tHashMap scoresY = getScores (full.search (queryY));\n\t\tHashMap scoresA = getScores (full.search (queryA));\n\n\t\t// we'll test searching locally, remote and multi\n\t\tMultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\t\tMultiSearcher multi  = new MultiSearcher (new Searchable[] { searchX, searchY });\n\n\t\t// change sorting and make sure relevancy stays the same\n\n\t\tsort = new Sort();\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort(SortField.FIELD_DOC);\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"int\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"float\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"string\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new String[] {\"int\",\"float\"});\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\", true), new SortField (null, SortField.DOC, true) });\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new String[] {\"float\",\"string\"});\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t}\n\n","sourceOld":"\t// test that the relevancy scores are the same even if\n\t// hits are sorted\n\tpublic void testNormalizedScores() throws Exception {\n\n\t\t// capture relevancy scores\n\t\tHashMap scoresX = getScores (full.search (queryX));\n\t\tHashMap scoresY = getScores (full.search (queryY));\n\t\tHashMap scoresA = getScores (full.search (queryA));\n\n\t\t// we'll test searching locally, remote and multi\n\t\t// note: the multi test depends on each separate index containing\n\t\t// the same documents as our local index, so the computed normalization\n\t\t// will be the same.  so we make a multi searcher over two equal document\n\t\t// sets - not realistic, but necessary for testing.\n\t\tMultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\t\tMultiSearcher multi  = new MultiSearcher (new Searchable[] { full, full });\n\n\t\t// change sorting and make sure relevancy stays the same\n\n\t\tsort = new Sort();\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort(SortField.FIELD_DOC);\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"int\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"float\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"string\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new String[] {\"int\",\"float\"});\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\", true), new SortField (null, SortField.DOC, true) });\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new String[] {\"float\",\"string\"});\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","sourceNew":"\t// test that the relevancy scores are the same even if\n\t// hits are sorted\n\tpublic void testNormalizedScores() throws Exception {\n\n\t\t// capture relevancy scores\n    HashMap scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n\t\t// we'll test searching locally, remote and multi\n\t\tMultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\t\tMultiSearcher multi  = new MultiSearcher (new Searchable[] { searchX, searchY });\n\n\t\t// change sorting and make sure relevancy stays the same\n\n\t\tsort = new Sort();\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n\t\tsort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n\t\tsort.setSort (\"int\");\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n\t\tsort.setSort (\"float\");\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n\t\tsort.setSort (\"string\");\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n\t\tsort.setSort (new String[] {\"int\",\"float\"});\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\", true), new SortField (null, SortField.DOC, true) });\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n\t\tsort.setSort (new String[] {\"float\",\"string\"});\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n\t}\n\n","sourceOld":"\t// test that the relevancy scores are the same even if\n\t// hits are sorted\n\tpublic void testNormalizedScores() throws Exception {\n\n\t\t// capture relevancy scores\n\t\tHashMap scoresX = getScores (full.search (queryX));\n\t\tHashMap scoresY = getScores (full.search (queryY));\n\t\tHashMap scoresA = getScores (full.search (queryA));\n\n\t\t// we'll test searching locally, remote and multi\n\t\tMultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\t\tMultiSearcher multi  = new MultiSearcher (new Searchable[] { searchX, searchY });\n\n\t\t// change sorting and make sure relevancy stays the same\n\n\t\tsort = new Sort();\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort(SortField.FIELD_DOC);\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"int\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"float\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (\"string\");\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new String[] {\"int\",\"float\"});\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\", true), new SortField (null, SortField.DOC, true) });\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t\tsort.setSort (new String[] {\"float\",\"string\"});\n\t\tassertSameValues (scoresX, getScores(full.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(remote.search(queryX,sort)));\n\t\tassertSameValues (scoresX, getScores(multi.search(queryX,sort)));\n\t\tassertSameValues (scoresY, getScores(full.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(remote.search(queryY,sort)));\n\t\tassertSameValues (scoresY, getScores(multi.search(queryY,sort)));\n\t\tassertSameValues (scoresA, getScores(full.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(remote.search(queryA,sort)));\n\t\tassertSameValues (scoresA, getScores(multi.search(queryA,sort)));\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","sourceNew":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n    MultiSearcher multi  = new MultiSearcher (new Searchable[] { searchX, searchY });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (\"int\");\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (\"float\");\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (\"string\");\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new String[] {\"int\",\"float\"});\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField[] { new SortField (\"int\", true), new SortField (null, SortField.DOC, true) });\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new String[] {\"float\",\"string\"});\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n  }\n\n","sourceOld":"\t// test that the relevancy scores are the same even if\n\t// hits are sorted\n\tpublic void testNormalizedScores() throws Exception {\n\n\t\t// capture relevancy scores\n    HashMap scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n\t\t// we'll test searching locally, remote and multi\n\t\tMultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n\t\tMultiSearcher multi  = new MultiSearcher (new Searchable[] { searchX, searchY });\n\n\t\t// change sorting and make sure relevancy stays the same\n\n\t\tsort = new Sort();\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n\t\tsort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n\t\tsort.setSort (\"int\");\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n\t\tsort.setSort (\"float\");\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n\t\tsort.setSort (\"string\");\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n\t\tsort.setSort (new String[] {\"int\",\"float\"});\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n\t\tsort.setSort (new SortField[] { new SortField (\"int\", true), new SortField (null, SortField.DOC, true) });\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n\t\tsort.setSort (new String[] {\"float\",\"string\"});\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02","date":1244977984,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","sourceNew":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    \n    MultiSearcher multi  = new MultiSearcher (new Searchable[] { searchX, searchY });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (\"int\");\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (\"float\");\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (\"string\");\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new String[] {\"int\",\"float\"});\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField[] { new SortField (\"int\", true), new SortField (null, SortField.DOC, true) });\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new String[] {\"float\",\"string\"});\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n  }\n\n","sourceOld":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    MultiSearcher remote = new MultiSearcher (new Searchable[] { getRemote() });\n    MultiSearcher multi  = new MultiSearcher (new Searchable[] { searchX, searchY });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (\"int\");\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (\"float\");\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (\"string\");\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new String[] {\"int\",\"float\"});\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField[] { new SortField (\"int\", true), new SortField (null, SortField.DOC, true) });\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new String[] {\"float\",\"string\"});\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (remote.search (queryX, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (remote.search (queryY, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (remote.search (queryA, null, 1000, sort).scoreDocs, remote));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99","date":1255432705,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","sourceNew":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    \n    MultiSearcher multi  = new MultiSearcher (new Searchable[] { searchX, searchY });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"int\", SortField.INT),new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n  }\n\n","sourceOld":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    \n    MultiSearcher multi  = new MultiSearcher (new Searchable[] { searchX, searchY });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (\"int\");\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (\"float\");\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (\"string\");\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new String[] {\"int\",\"float\"});\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField[] { new SortField (\"int\", true), new SortField (null, SortField.DOC, true) });\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new String[] {\"float\",\"string\"});\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","sourceNew":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    \n    MultiSearcher multi  = new MultiSearcher (new Searchable[] { searchX, searchY });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"int\", SortField.INT),new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n  }\n\n","sourceOld":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    \n    MultiSearcher multi  = new MultiSearcher (new Searchable[] { searchX, searchY });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"int\", SortField.INT),new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testNormalizedScores().mjava","sourceNew":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    \n    MultiSearcher multi  = new MultiSearcher (new Searchable[] { searchX, searchY });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"int\", SortField.INT),new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n  }\n\n","sourceOld":"  // test that the relevancy scores are the same even if\n  // hits are sorted\n  public void testNormalizedScores() throws Exception {\n\n    // capture relevancy scores\n    HashMap<String,Float> scoresX = getScores (full.search (queryX, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresY = getScores (full.search (queryY, null, 1000).scoreDocs, full);\n    HashMap<String,Float> scoresA = getScores (full.search (queryA, null, 1000).scoreDocs, full);\n\n    // we'll test searching locally, remote and multi\n    \n    MultiSearcher multi  = new MultiSearcher (new Searchable[] { searchX, searchY });\n\n    // change sorting and make sure relevancy stays the same\n\n    sort = new Sort();\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort(SortField.FIELD_DOC);\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"int\", SortField.INT));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"int\", SortField.INT),new SortField(\"float\", SortField.FLOAT));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField (\"int\", SortField.INT, true), new SortField (null, SortField.DOC, true) );\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n    sort.setSort (new SortField(\"int\", SortField.INT),new SortField(\"string\", SortField.STRING));\n    assertSameValues (scoresX, getScores (full.search (queryX, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresX, getScores (multi.search (queryX, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresY, getScores (full.search (queryY, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresY, getScores (multi.search (queryY, null, 1000, sort).scoreDocs, multi));\n    assertSameValues (scoresA, getScores (full.search (queryA, null, 1000, sort).scoreDocs, full));\n    assertSameValues (scoresA, getScores (multi.search (queryA, null, 1000, sort).scoreDocs, multi));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02":["63bc3238545c6012bd44f5d294077997f236bc4e"],"4ceaa9738cad9616d1831286111af106e13e0e4b":["0b1460ee2827b26dc3a41a6c403bb5872f87ddaa"],"0b1460ee2827b26dc3a41a6c403bb5872f87ddaa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["4ceaa9738cad9616d1831286111af106e13e0e4b"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["1474a58d42cdf3b9e16ffe07bce31e4abffe5e02"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"63bc3238545c6012bd44f5d294077997f236bc4e":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"4ceaa9738cad9616d1831286111af106e13e0e4b":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"0b1460ee2827b26dc3a41a6c403bb5872f87ddaa":["4ceaa9738cad9616d1831286111af106e13e0e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0b1460ee2827b26dc3a41a6c403bb5872f87ddaa"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["63bc3238545c6012bd44f5d294077997f236bc4e"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"63bc3238545c6012bd44f5d294077997f236bc4e":["1474a58d42cdf3b9e16ffe07bce31e4abffe5e02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}