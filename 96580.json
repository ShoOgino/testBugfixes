{"path":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLVisitor#visitQuery(Query,Integer).mjava","commits":[{"id":"7b2c4e17100e207bc842e56d016b9f91f411304e","date":1434336696,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLVisitor#visitQuery(Query,Integer).mjava","pathOld":"/dev/null","sourceNew":"    protected Void visitQuery(Query node, Integer indent) {\n      if(node.getWith().isPresent()) {\n        With confidence = (With)node.getWith().get();\n        this.append(indent.intValue(), \"WITH\");\n        if(confidence.isRecursive()) {\n        }\n\n        Iterator queries = confidence.getQueries().iterator();\n\n        while(queries.hasNext()) {\n          WithQuery query = (WithQuery)queries.next();\n          this.process(new TableSubquery(query.getQuery()), indent);\n          if(queries.hasNext()) {\n          }\n        }\n      }\n\n      this.processRelation(node.getQueryBody(), indent);\n      if(!node.getOrderBy().isEmpty()) {\n        this.sorts = node.getOrderBy();\n      }\n\n      if(node.getLimit().isPresent()) {\n      }\n\n      if(node.getApproximate().isPresent()) {\n\n      }\n\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLVisitor#visitQuery(Query,Integer).mjava","sourceNew":null,"sourceOld":"    protected Void visitQuery(Query node, Integer indent) {\n      if(node.getWith().isPresent()) {\n        With confidence = (With)node.getWith().get();\n        this.append(indent.intValue(), \"WITH\");\n        if(confidence.isRecursive()) {\n        }\n\n        Iterator queries = confidence.getQueries().iterator();\n\n        while(queries.hasNext()) {\n          WithQuery query = (WithQuery)queries.next();\n          this.process(new TableSubquery(query.getQuery()), indent);\n          if(queries.hasNext()) {\n          }\n        }\n      }\n\n      this.processRelation(node.getQueryBody(), indent);\n      if(!node.getOrderBy().isEmpty()) {\n        this.sorts = node.getOrderBy();\n      }\n\n      if(node.getLimit().isPresent()) {\n      }\n\n      if(node.getApproximate().isPresent()) {\n\n      }\n\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":4,"author":"Joel Bernstein","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLVisitor#visitQuery(Query,Integer).mjava","sourceNew":null,"sourceOld":"    protected Void visitQuery(Query node, Integer indent) {\n      if(node.getWith().isPresent()) {\n        With confidence = (With)node.getWith().get();\n        this.append(indent.intValue(), \"WITH\");\n        if(confidence.isRecursive()) {\n        }\n\n        Iterator queries = confidence.getQueries().iterator();\n\n        while(queries.hasNext()) {\n          WithQuery query = (WithQuery)queries.next();\n          this.process(new TableSubquery(query.getQuery()), indent);\n          if(queries.hasNext()) {\n          }\n        }\n      }\n\n      this.processRelation(node.getQueryBody(), indent);\n      if(!node.getOrderBy().isEmpty()) {\n        this.sorts = node.getOrderBy();\n      }\n\n      if(node.getLimit().isPresent()) {\n      }\n\n      if(node.getApproximate().isPresent()) {\n\n      }\n\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["7b2c4e17100e207bc842e56d016b9f91f411304e","d984627825732e682759c22df7a3b171a80f3812"],"d984627825732e682759c22df7a3b171a80f3812":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b2c4e17100e207bc842e56d016b9f91f411304e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"]},"commit2Childs":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d984627825732e682759c22df7a3b171a80f3812":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"7b2c4e17100e207bc842e56d016b9f91f411304e":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","d984627825732e682759c22df7a3b171a80f3812"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}