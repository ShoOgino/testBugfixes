{"path":"modules/spatial-TEMP/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","commits":[{"id":"33ee89d976c91275e5be5da438ca0977b1c5b90f","date":1329808149,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial-TEMP/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","pathOld":"modules/spatial/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","sourceNew":"  /**\n   * Get Test Queries\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n    return new LineReader<SpatialTestQuery>(new InputStreamReader(in,\"UTF-8\")) {\n\n      @Override\n      public SpatialTestQuery parseLine(String line) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = getLineNumber();\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          return test;\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Get Test Queries\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n    return new LineReader<SpatialTestQuery>(new InputStreamReader(in,\"UTF-8\")) {\n\n      @Override\n      public SpatialTestQuery parseLine(String line) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = getLineNumber();\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          return test;\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2047ba81272a0c4edeb11b1c7810ee23ba73502","date":1329808655,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/strategy/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","pathOld":"modules/spatial-TEMP/src/test/org/apache/lucene/spatial/SpatialTestQuery#getTestQueries(SpatialArgsParser,SpatialContext,String,InputStream).mjava","sourceNew":"  /**\n   * Get Test Queries\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n    return new LineReader<SpatialTestQuery>(new InputStreamReader(in,\"UTF-8\")) {\n\n      @Override\n      public SpatialTestQuery parseLine(String line) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = getLineNumber();\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          return test;\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Get Test Queries\n   */\n  public static Iterator<SpatialTestQuery> getTestQueries(\n      final SpatialArgsParser parser,\n      final SpatialContext ctx,\n      final String name,\n      final InputStream in ) throws IOException {\n    return new LineReader<SpatialTestQuery>(new InputStreamReader(in,\"UTF-8\")) {\n\n      @Override\n      public SpatialTestQuery parseLine(String line) {\n        SpatialTestQuery test = new SpatialTestQuery();\n        test.line = line;\n        test.lineNumber = getLineNumber();\n\n        try {\n          // skip a comment\n          if( line.startsWith( \"[\" ) ) {\n            int idx = line.indexOf( ']' );\n            if( idx > 0 ) {\n              line = line.substring( idx+1 );\n            }\n          }\n\n          int idx = line.indexOf('@');\n          StringTokenizer st = new StringTokenizer(line.substring(0, idx));\n          while (st.hasMoreTokens()) {\n            test.ids.add(st.nextToken().trim());\n          }\n          test.args = parser.parse(line.substring(idx + 1).trim(), ctx);\n          return test;\n        }\n        catch( Exception ex ) {\n          throw new RuntimeException( \"invalid query line: \"+test.line, ex );\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["33ee89d976c91275e5be5da438ca0977b1c5b90f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33ee89d976c91275e5be5da438ca0977b1c5b90f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":[],"33ee89d976c91275e5be5da438ca0977b1c5b90f":["c2047ba81272a0c4edeb11b1c7810ee23ba73502"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33ee89d976c91275e5be5da438ca0977b1c5b90f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c2047ba81272a0c4edeb11b1c7810ee23ba73502","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}