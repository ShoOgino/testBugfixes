{"path":"lucene/backwards/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","pathOld":"backwards/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","sourceNew":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(String,\n   * FieldInvertState)} method, the boost value is multipled\n   * by the {@link\n   * org.apache.lucene.search.Similarity#lengthNorm(String,\n   * int)} and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNorm(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(String, org.apache.lucene.index.FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNorm(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","sourceOld":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(String,\n   * FieldInvertState)} method, the boost value is multipled\n   * by the {@link\n   * org.apache.lucene.search.Similarity#lengthNorm(String,\n   * int)} and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNorm(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(String, org.apache.lucene.index.FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNorm(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/document/AbstractField#setBoost(float).mjava","sourceNew":null,"sourceOld":"  /** Sets the boost factor hits on this field.  This value will be\n   * multiplied into the score of all hits on this this field of this\n   * document.\n   *\n   * <p>The boost is multiplied by {@link org.apache.lucene.document.Document#getBoost()} of the document\n   * containing this field.  If a document has multiple fields with the same\n   * name, all such values are multiplied together.  This product is then\n   * used to compute the norm factor for the field.  By\n   * default, in the {@link\n   * org.apache.lucene.search.Similarity#computeNorm(String,\n   * FieldInvertState)} method, the boost value is multipled\n   * by the {@link\n   * org.apache.lucene.search.Similarity#lengthNorm(String,\n   * int)} and then\n   * rounded by {@link org.apache.lucene.search.Similarity#encodeNorm(float)} before it is stored in the\n   * index.  One should attempt to ensure that this product does not overflow\n   * the range of that encoding.\n   *\n   * @see org.apache.lucene.document.Document#setBoost(float)\n   * @see org.apache.lucene.search.Similarity#computeNorm(String, org.apache.lucene.index.FieldInvertState)\n   * @see org.apache.lucene.search.Similarity#encodeNorm(float)\n   */\n  public void setBoost(float boost) {\n    this.boost = boost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}