{"path":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testWrongEncoding().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testWrongEncoding().mjava","pathOld":"solr/src/test/org/apache/solr/core/ResourceLoaderTest#testWrongEncoding().mjava","sourceNew":"  public void testWrongEncoding() throws Exception {\n    String wrongEncoding = \"stopwordsWrongEncoding.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(null);\n    // ensure we get our exception\n    try {\n      List<String> lines = loader.getLines(wrongEncoding);\n      fail();\n    } catch (SolrException expected) {\n      assertTrue(expected.getCause() instanceof CharacterCodingException);\n    }\n  }\n\n","sourceOld":"  public void testWrongEncoding() throws Exception {\n    String wrongEncoding = \"stopwordsWrongEncoding.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(null);\n    // ensure we get our exception\n    try {\n      List<String> lines = loader.getLines(wrongEncoding);\n      fail();\n    } catch (SolrException expected) {\n      assertTrue(expected.getCause() instanceof CharacterCodingException);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testWrongEncoding().mjava","pathOld":"solr/src/test/org/apache/solr/core/ResourceLoaderTest#testWrongEncoding().mjava","sourceNew":"  public void testWrongEncoding() throws Exception {\n    String wrongEncoding = \"stopwordsWrongEncoding.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(null);\n    // ensure we get our exception\n    try {\n      List<String> lines = loader.getLines(wrongEncoding);\n      fail();\n    } catch (SolrException expected) {\n      assertTrue(expected.getCause() instanceof CharacterCodingException);\n    }\n  }\n\n","sourceOld":"  public void testWrongEncoding() throws Exception {\n    String wrongEncoding = \"stopwordsWrongEncoding.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(null);\n    // ensure we get our exception\n    try {\n      List<String> lines = loader.getLines(wrongEncoding);\n      fail();\n    } catch (SolrException expected) {\n      assertTrue(expected.getCause() instanceof CharacterCodingException);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testWrongEncoding().mjava","pathOld":"solr/src/test/org/apache/solr/core/ResourceLoaderTest#testWrongEncoding().mjava","sourceNew":"  public void testWrongEncoding() throws Exception {\n    String wrongEncoding = \"stopwordsWrongEncoding.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(null);\n    // ensure we get our exception\n    try {\n      List<String> lines = loader.getLines(wrongEncoding);\n      fail();\n    } catch (SolrException expected) {\n      assertTrue(expected.getCause() instanceof CharacterCodingException);\n    }\n  }\n\n","sourceOld":"  public void testWrongEncoding() throws Exception {\n    String wrongEncoding = \"stopwordsWrongEncoding.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(null);\n    // ensure we get our exception\n    try {\n      List<String> lines = loader.getLines(wrongEncoding);\n      fail();\n    } catch (SolrException expected) {\n      assertTrue(expected.getCause() instanceof CharacterCodingException);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21591922fb4db3e2a6ffb2cb342b3d61c053a973","date":1340761680,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testWrongEncoding().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testWrongEncoding().mjava","sourceNew":"  public void testWrongEncoding() throws Exception {\n    String wrongEncoding = \"stopwordsWrongEncoding.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    // ensure we get our exception\n    try {\n      List<String> lines = loader.getLines(wrongEncoding);\n      fail();\n    } catch (SolrException expected) {\n      assertTrue(expected.getCause() instanceof CharacterCodingException);\n    }\n  }\n\n","sourceOld":"  public void testWrongEncoding() throws Exception {\n    String wrongEncoding = \"stopwordsWrongEncoding.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(null);\n    // ensure we get our exception\n    try {\n      List<String> lines = loader.getLines(wrongEncoding);\n      fail();\n    } catch (SolrException expected) {\n      assertTrue(expected.getCause() instanceof CharacterCodingException);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testWrongEncoding().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testWrongEncoding().mjava","sourceNew":"  public void testWrongEncoding() throws Exception {\n    String wrongEncoding = \"stopwordsWrongEncoding.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    // ensure we get our exception\n    try {\n      List<String> lines = loader.getLines(wrongEncoding);\n      fail();\n    } catch (SolrException expected) {\n      assertTrue(expected.getCause() instanceof CharacterCodingException);\n    }\n  }\n\n","sourceOld":"  public void testWrongEncoding() throws Exception {\n    String wrongEncoding = \"stopwordsWrongEncoding.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(null);\n    // ensure we get our exception\n    try {\n      List<String> lines = loader.getLines(wrongEncoding);\n      fail();\n    } catch (SolrException expected) {\n      assertTrue(expected.getCause() instanceof CharacterCodingException);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"824d674c7c80eeddb2c2e429f92d3b15688d8393","date":1379775111,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testWrongEncoding().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testWrongEncoding().mjava","sourceNew":"  public void testWrongEncoding() throws Exception {\n    String wrongEncoding = \"stopwordsWrongEncoding.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    // ensure we get our exception\n    try {\n      loader.getLines(wrongEncoding);\n      fail();\n    } catch (SolrException expected) {\n      assertTrue(expected.getCause() instanceof CharacterCodingException);\n    }\n    loader.close();\n  }\n\n","sourceOld":"  public void testWrongEncoding() throws Exception {\n    String wrongEncoding = \"stopwordsWrongEncoding.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    // ensure we get our exception\n    try {\n      List<String> lines = loader.getLines(wrongEncoding);\n      fail();\n    } catch (SolrException expected) {\n      assertTrue(expected.getCause() instanceof CharacterCodingException);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testWrongEncoding().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testWrongEncoding().mjava","sourceNew":"  public void testWrongEncoding() throws Exception {\n    String wrongEncoding = \"stopwordsWrongEncoding.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(TEST_PATH().resolve(\"collection1\"));\n    // ensure we get our exception\n    try {\n      loader.getLines(wrongEncoding);\n      fail();\n    } catch (SolrException expected) {\n      assertTrue(expected.getCause() instanceof CharacterCodingException);\n    }\n    loader.close();\n  }\n\n","sourceOld":"  public void testWrongEncoding() throws Exception {\n    String wrongEncoding = \"stopwordsWrongEncoding.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    // ensure we get our exception\n    try {\n      loader.getLines(wrongEncoding);\n      fail();\n    } catch (SolrException expected) {\n      assertTrue(expected.getCause() instanceof CharacterCodingException);\n    }\n    loader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68cb00b5f16300efa7bd172de723d9ac91d38cc2","date":1543702774,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testWrongEncoding().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testWrongEncoding().mjava","sourceNew":"  public void testWrongEncoding() throws Exception {\n    String wrongEncoding = \"stopwordsWrongEncoding.txt\";\n    try(SolrResourceLoader loader = new SolrResourceLoader(TEST_PATH().resolve(\"collection1\"))) {\n      // ensure we get our exception\n      SolrException thrown = expectThrows(SolrException.class, () -> loader.getLines(wrongEncoding));\n      assertTrue(thrown.getCause() instanceof CharacterCodingException);\n    }\n  }\n\n","sourceOld":"  public void testWrongEncoding() throws Exception {\n    String wrongEncoding = \"stopwordsWrongEncoding.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(TEST_PATH().resolve(\"collection1\"));\n    // ensure we get our exception\n    try {\n      loader.getLines(wrongEncoding);\n      fail();\n    } catch (SolrException expected) {\n      assertTrue(expected.getCause() instanceof CharacterCodingException);\n    }\n    loader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["c26f00b574427b55127e869b935845554afde1fa"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["824d674c7c80eeddb2c2e429f92d3b15688d8393"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","21591922fb4db3e2a6ffb2cb342b3d61c053a973"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68cb00b5f16300efa7bd172de723d9ac91d38cc2":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"824d674c7c80eeddb2c2e429f92d3b15688d8393":["21591922fb4db3e2a6ffb2cb342b3d61c053a973"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68cb00b5f16300efa7bd172de723d9ac91d38cc2"]},"commit2Childs":{"21591922fb4db3e2a6ffb2cb342b3d61c053a973":["fe33227f6805edab2036cbb80645cc4e2d1fa424","824d674c7c80eeddb2c2e429f92d3b15688d8393"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["68cb00b5f16300efa7bd172de723d9ac91d38cc2"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["21591922fb4db3e2a6ffb2cb342b3d61c053a973","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"68cb00b5f16300efa7bd172de723d9ac91d38cc2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"824d674c7c80eeddb2c2e429f92d3b15688d8393":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}