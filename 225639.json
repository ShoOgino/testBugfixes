{"path":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#spanFilterResultToCache(SpanFilterResult,IndexReader).mjava","commits":[{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#spanFilterResultToCache(SpanFilterResult,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  an {@link FixedBitSet}.\n   */\n  protected SpanFilterResult spanFilterResultToCache(SpanFilterResult result, IndexReader reader) throws IOException {\n    if (result == null || result.getDocIdSet() == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return SpanFilterResult.EMPTY_SPAN_FILTER_RESULT;\n    } else if (result.getDocIdSet().isCacheable()) {\n      return result;\n    } else {\n      final DocIdSetIterator it = result.getDocIdSet().iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      if (it == null) {\n        return SpanFilterResult.EMPTY_SPAN_FILTER_RESULT;\n      } else {\n        final FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n        bits.or(it);\n        return new SpanFilterResult(bits, result.getPositions());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a015474a0e3185be4c42ed156c0f1e88b90b1ace","date":1321290150,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/CachingSpanFilter#spanFilterResultToCache(SpanFilterResult,IndexReader).mjava","sourceNew":null,"sourceOld":"  /** Provide the DocIdSet to be cached, using the DocIdSet provided\n   *  by the wrapped Filter.\n   *  <p>This implementation returns the given {@link DocIdSet}, if {@link DocIdSet#isCacheable}\n   *  returns <code>true</code>, else it copies the {@link DocIdSetIterator} into\n   *  an {@link FixedBitSet}.\n   */\n  protected SpanFilterResult spanFilterResultToCache(SpanFilterResult result, IndexReader reader) throws IOException {\n    if (result == null || result.getDocIdSet() == null) {\n      // this is better than returning null, as the nonnull result can be cached\n      return SpanFilterResult.EMPTY_SPAN_FILTER_RESULT;\n    } else if (result.getDocIdSet().isCacheable()) {\n      return result;\n    } else {\n      final DocIdSetIterator it = result.getDocIdSet().iterator();\n      // null is allowed to be returned by iterator(),\n      // in this case we wrap with the empty set,\n      // which is cacheable.\n      if (it == null) {\n        return SpanFilterResult.EMPTY_SPAN_FILTER_RESULT;\n      } else {\n        final FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n        bits.or(it);\n        return new SpanFilterResult(bits, result.getPositions());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["6620df8541b174097b1133a4fc370adb2e570524"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["a015474a0e3185be4c42ed156c0f1e88b90b1ace"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6620df8541b174097b1133a4fc370adb2e570524"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a015474a0e3185be4c42ed156c0f1e88b90b1ace":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}