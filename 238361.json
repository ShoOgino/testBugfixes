{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","commits":[{"id":"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe","date":1430750405,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","pathOld":"/dev/null","sourceNew":"  private Map<Position, String> identifyNodes(ClusterState clusterState,\n                                              List<String> nodeList,\n                                              ZkNodeProps message,\n                                              List<String> shardNames,\n                                              int repFactor) throws IOException {\n    List<Map> maps = (List) message.get(\"rule\");\n    if (maps == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : maps) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n    maps = (List<Map>) message.get(\"snitch\");\n    List snitchList = maps == null? Collections.emptyList(): maps;\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        snitchList,\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    Map<Position, String> nodeMappings = replicaAssigner.getNodeMappings();\n    if(nodeMappings == null){\n      String msg = \"Could not identify nodes matching the rules \" + rules ;\n      if(!replicaAssigner.failedNodes.isEmpty()){\n        Map<String, String> failedNodes = new HashMap<>();\n        for (Map.Entry<String, SnitchContext> e : replicaAssigner.failedNodes.entrySet()) {\n          failedNodes.put(e.getKey(), e.getValue().getErrMsg());\n        }\n        msg+=\" Some nodes where excluded from assigning replicas because tags could not be obtained from them \"+ failedNodes;\n      }\n      msg+= ZkStateReader.toJSONString(replicaAssigner.getNodeVsTags());\n\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n    return nodeMappings;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec4fc24ecd353171e03bd016c1681cd97476015f","date":1432214672,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","sourceNew":"  private Map<Position, String> identifyNodes(ClusterState clusterState,\n                                              List<String> nodeList,\n                                              ZkNodeProps message,\n                                              List<String> shardNames,\n                                              int repFactor) throws IOException {\n    List<Map> maps = (List) message.get(\"rule\");\n    if (maps == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : maps) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","sourceOld":"  private Map<Position, String> identifyNodes(ClusterState clusterState,\n                                              List<String> nodeList,\n                                              ZkNodeProps message,\n                                              List<String> shardNames,\n                                              int repFactor) throws IOException {\n    List<Map> maps = (List) message.get(\"rule\");\n    if (maps == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : maps) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n    maps = (List<Map>) message.get(\"snitch\");\n    List snitchList = maps == null? Collections.emptyList(): maps;\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        snitchList,\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    Map<Position, String> nodeMappings = replicaAssigner.getNodeMappings();\n    if(nodeMappings == null){\n      String msg = \"Could not identify nodes matching the rules \" + rules ;\n      if(!replicaAssigner.failedNodes.isEmpty()){\n        Map<String, String> failedNodes = new HashMap<>();\n        for (Map.Entry<String, SnitchContext> e : replicaAssigner.failedNodes.entrySet()) {\n          failedNodes.put(e.getKey(), e.getValue().getErrMsg());\n        }\n        msg+=\" Some nodes where excluded from assigning replicas because tags could not be obtained from them \"+ failedNodes;\n      }\n      msg+= ZkStateReader.toJSONString(replicaAssigner.getNodeVsTags());\n\n      throw new SolrException(ErrorCode.BAD_REQUEST, msg);\n    }\n    return nodeMappings;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","sourceNew":"  private Map<Position, String> identifyNodes(ClusterState clusterState,\n                                              List<String> nodeList,\n                                              ZkNodeProps message,\n                                              List<String> shardNames,\n                                              int repFactor) throws IOException {\n    List<Map> maps = (List) message.get(\"rule\");\n    if (maps == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : maps) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","sourceOld":"  private Map<Position, String> identifyNodes(ClusterState clusterState,\n                                              List<String> nodeList,\n                                              ZkNodeProps message,\n                                              List<String> shardNames,\n                                              int repFactor) throws IOException {\n    List<Map> maps = (List) message.get(\"rule\");\n    if (maps == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : maps) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["ec4fc24ecd353171e03bd016c1681cd97476015f"],"ec4fc24ecd353171e03bd016c1681cd97476015f":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec4fc24ecd353171e03bd016c1681cd97476015f":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["ec4fc24ecd353171e03bd016c1681cd97476015f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}