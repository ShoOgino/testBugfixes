{"path":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#checkDeleteTerm(Term).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#checkDeleteTerm(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#checkDeleteTerm(Term).mjava","sourceNew":"  // used only by assert\n  private boolean checkDeleteTerm(Term term) {\n    if (term != null) {\n      assert lastDeleteTerm == null || term.compareTo(lastDeleteTerm) > 0: \"lastTerm=\" + lastDeleteTerm + \" vs term=\" + term;\n    }\n    // TODO: we re-use term now in our merged iterable, but we shouldn't clone, instead copy for this assert\n    lastDeleteTerm = term == null ? null : new Term(term.field(), BytesRef.deepCopyOf(term.bytes));\n    return true;\n  }\n\n","sourceOld":"  // used only by assert\n  private boolean checkDeleteTerm(Term term) {\n    if (term != null) {\n      assert lastDeleteTerm == null || term.compareTo(lastDeleteTerm) > 0: \"lastTerm=\" + lastDeleteTerm + \" vs term=\" + term;\n    }\n    // TODO: we re-use term now in our merged iterable, but we shouldn't clone, instead copy for this assert\n    lastDeleteTerm = term == null ? null : new Term(term.field(), BytesRef.deepCopyOf(term.bytes));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4c214a1f904dde76f5611b56d4081533055b3b","date":1421938451,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#checkDeleteTerm(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#checkDeleteTerm(Term).mjava","sourceNew":"  // used only by assert\n  private boolean checkDeleteTerm(BytesRef term) {\n    if (term != null) {\n      assert lastDeleteTerm == null || term.compareTo(lastDeleteTerm) >= 0: \"lastTerm=\" + lastDeleteTerm + \" vs term=\" + term;\n    }\n    // TODO: we re-use term now in our merged iterable, but we shouldn't clone, instead copy for this assert\n    lastDeleteTerm = term == null ? null : BytesRef.deepCopyOf(term);\n    return true;\n  }\n\n","sourceOld":"  // used only by assert\n  private boolean checkDeleteTerm(Term term) {\n    if (term != null) {\n      assert lastDeleteTerm == null || term.compareTo(lastDeleteTerm) > 0: \"lastTerm=\" + lastDeleteTerm + \" vs term=\" + term;\n    }\n    // TODO: we re-use term now in our merged iterable, but we shouldn't clone, instead copy for this assert\n    lastDeleteTerm = term == null ? null : new Term(term.field(), BytesRef.deepCopyOf(term.bytes));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7e4c214a1f904dde76f5611b56d4081533055b3b":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e4c214a1f904dde76f5611b56d4081533055b3b"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"7e4c214a1f904dde76f5611b56d4081533055b3b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}