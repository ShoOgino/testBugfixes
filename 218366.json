{"path":"modules/spatial/base/src/java/org/apache/lucene/spatial/base/prefix/quad/QuadPrefixTree#checkBattenberg(char,double,double,int,List[Node],StringBuilder,Shape,int).mjava","commits":[{"id":"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a","date":1329809096,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/base/src/java/org/apache/lucene/spatial/base/prefix/quad/QuadPrefixTree#checkBattenberg(char,double,double,int,List[Node],StringBuilder,Shape,int).mjava","pathOld":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/prefix/quad/QuadPrefixTree#checkBattenberg(char,double,double,int,List[Node],StringBuilder,Shape,int).mjava","sourceNew":"  private void checkBattenberg(\n      char c,\n      double cx,\n      double cy,\n      int level,\n      List<Node> matches,\n      StringBuilder str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length() == level;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    int strlen = str.length();\n    Rectangle rectangle = ctx.makeRect(cx - w, cx + w, cy - h, cy + h);\n    SpatialRelation v = shape.relate(rectangle, ctx);\n    if (SpatialRelation.CONTAINS == v) {\n      str.append(c);\n      //str.append(SpatialPrefixGrid.COVER);\n      matches.add(new QuadCell(str.toString(),v.transpose()));\n    } else if (SpatialRelation.DISJOINT == v) {\n      // nothing\n    } else { // SpatialRelation.WITHIN, SpatialRelation.INTERSECTS\n      str.append(c);\n\n      int nextLevel = level+1;\n      if (nextLevel >= maxLevel) {\n        //str.append(SpatialPrefixGrid.INTERSECTS);\n        matches.add(new QuadCell(str.toString(),v.transpose()));\n      } else {\n        build(cx, cy, nextLevel, matches, str, shape, maxLevel);\n      }\n    }\n    str.setLength(strlen);\n  }\n\n","sourceOld":"  private void checkBattenberg(\n      char c,\n      double cx,\n      double cy,\n      int level,\n      List<Node> matches,\n      StringBuilder str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length() == level;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    int strlen = str.length();\n    Rectangle rectangle = ctx.makeRect(cx - w, cx + w, cy - h, cy + h);\n    SpatialRelation v = shape.relate(rectangle, ctx);\n    if (SpatialRelation.CONTAINS == v) {\n      str.append(c);\n      //str.append(SpatialPrefixGrid.COVER);\n      matches.add(new QuadCell(str.toString(),v.transpose()));\n    } else if (SpatialRelation.DISJOINT == v) {\n      // nothing\n    } else { // SpatialRelation.WITHIN, SpatialRelation.INTERSECTS\n      str.append(c);\n\n      int nextLevel = level+1;\n      if (nextLevel >= maxLevel) {\n        //str.append(SpatialPrefixGrid.INTERSECTS);\n        matches.add(new QuadCell(str.toString(),v.transpose()));\n      } else {\n        build(cx, cy, nextLevel, matches, str, shape, maxLevel);\n      }\n    }\n    str.setLength(strlen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25738042b3fdefd34091f8a386e2ce94d892a505","date":1330492659,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/spatial/base/src/java/org/apache/lucene/spatial/base/prefix/quad/QuadPrefixTree#checkBattenberg(char,double,double,int,List[Node],StringBuilder,Shape,int).mjava","sourceNew":null,"sourceOld":"  private void checkBattenberg(\n      char c,\n      double cx,\n      double cy,\n      int level,\n      List<Node> matches,\n      StringBuilder str,\n      Shape shape,\n      int maxLevel) {\n    assert str.length() == level;\n    double w = levelW[level] / 2;\n    double h = levelH[level] / 2;\n\n    int strlen = str.length();\n    Rectangle rectangle = ctx.makeRect(cx - w, cx + w, cy - h, cy + h);\n    SpatialRelation v = shape.relate(rectangle, ctx);\n    if (SpatialRelation.CONTAINS == v) {\n      str.append(c);\n      //str.append(SpatialPrefixGrid.COVER);\n      matches.add(new QuadCell(str.toString(),v.transpose()));\n    } else if (SpatialRelation.DISJOINT == v) {\n      // nothing\n    } else { // SpatialRelation.WITHIN, SpatialRelation.INTERSECTS\n      str.append(c);\n\n      int nextLevel = level+1;\n      if (nextLevel >= maxLevel) {\n        //str.append(SpatialPrefixGrid.INTERSECTS);\n        matches.add(new QuadCell(str.toString(),v.transpose()));\n      } else {\n        build(cx, cy, nextLevel, matches, str, shape, maxLevel);\n      }\n    }\n    str.setLength(strlen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"25738042b3fdefd34091f8a386e2ce94d892a505":["d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a"],"25738042b3fdefd34091f8a386e2ce94d892a505":[],"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a":["25738042b3fdefd34091f8a386e2ce94d892a505"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["25738042b3fdefd34091f8a386e2ce94d892a505","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}