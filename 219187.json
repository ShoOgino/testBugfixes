{"path":"solr/core/src/java/org/apache/solr/handler/component/StatsValues#accumulate(NamedList).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValues#accumulate(NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/StatsValues#accumulate(NamedList).mjava","sourceNew":"  public void accumulate(NamedList stv){\n    min = Math.min(min, (Double)stv.get(\"min\"));\n    max = Math.max(max, (Double)stv.get(\"max\"));\n    sum += (Double)stv.get(\"sum\");\n    count += (Long)stv.get(\"count\");\n    missing += (Long)stv.get(\"missing\");\n    sumOfSquares += (Double)stv.get(\"sumOfSquares\");\n    \n    NamedList f = (NamedList)stv.get( FACETS );\n    if( f != null ) {\n      if( facets == null ) {\n        facets = new HashMap<String, Map<String,StatsValues>>();\n      }\n      \n      for( int i=0; i< f.size(); i++ ) {\n        String field = f.getName(i);\n        NamedList vals = (NamedList)f.getVal( i );\n        Map<String,StatsValues> addTo = facets.get( field );\n        if( addTo == null ) {\n          addTo = new HashMap<String,StatsValues>();\n          facets.put( field, addTo );\n        }\n        for( int j=0; j< vals.size(); j++ ) {\n          String val = vals.getName(j);\n          StatsValues vvals = addTo.get( val );\n          if( vvals == null ) {\n            vvals = new StatsValues();\n            addTo.put( val, vvals );\n          }\n          vvals.accumulate( (NamedList)vals.getVal( j ) );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void accumulate(NamedList stv){\n    min = Math.min(min, (Double)stv.get(\"min\"));\n    max = Math.max(max, (Double)stv.get(\"max\"));\n    sum += (Double)stv.get(\"sum\");\n    count += (Long)stv.get(\"count\");\n    missing += (Long)stv.get(\"missing\");\n    sumOfSquares += (Double)stv.get(\"sumOfSquares\");\n    \n    NamedList f = (NamedList)stv.get( FACETS );\n    if( f != null ) {\n      if( facets == null ) {\n        facets = new HashMap<String, Map<String,StatsValues>>();\n      }\n      \n      for( int i=0; i< f.size(); i++ ) {\n        String field = f.getName(i);\n        NamedList vals = (NamedList)f.getVal( i );\n        Map<String,StatsValues> addTo = facets.get( field );\n        if( addTo == null ) {\n          addTo = new HashMap<String,StatsValues>();\n          facets.put( field, addTo );\n        }\n        for( int j=0; j< vals.size(); j++ ) {\n          String val = vals.getName(j);\n          StatsValues vvals = addTo.get( val );\n          if( vvals == null ) {\n            vvals = new StatsValues();\n            addTo.put( val, vvals );\n          }\n          vvals.accumulate( (NamedList)vals.getVal( j ) );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValues#accumulate(NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/StatsValues#accumulate(NamedList).mjava","sourceNew":"  public void accumulate(NamedList stv){\n    min = Math.min(min, (Double)stv.get(\"min\"));\n    max = Math.max(max, (Double)stv.get(\"max\"));\n    sum += (Double)stv.get(\"sum\");\n    count += (Long)stv.get(\"count\");\n    missing += (Long)stv.get(\"missing\");\n    sumOfSquares += (Double)stv.get(\"sumOfSquares\");\n    \n    NamedList f = (NamedList)stv.get( FACETS );\n    if( f != null ) {\n      if( facets == null ) {\n        facets = new HashMap<String, Map<String,StatsValues>>();\n      }\n      \n      for( int i=0; i< f.size(); i++ ) {\n        String field = f.getName(i);\n        NamedList vals = (NamedList)f.getVal( i );\n        Map<String,StatsValues> addTo = facets.get( field );\n        if( addTo == null ) {\n          addTo = new HashMap<String,StatsValues>();\n          facets.put( field, addTo );\n        }\n        for( int j=0; j< vals.size(); j++ ) {\n          String val = vals.getName(j);\n          StatsValues vvals = addTo.get( val );\n          if( vvals == null ) {\n            vvals = new StatsValues();\n            addTo.put( val, vvals );\n          }\n          vvals.accumulate( (NamedList)vals.getVal( j ) );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void accumulate(NamedList stv){\n    min = Math.min(min, (Double)stv.get(\"min\"));\n    max = Math.max(max, (Double)stv.get(\"max\"));\n    sum += (Double)stv.get(\"sum\");\n    count += (Long)stv.get(\"count\");\n    missing += (Long)stv.get(\"missing\");\n    sumOfSquares += (Double)stv.get(\"sumOfSquares\");\n    \n    NamedList f = (NamedList)stv.get( FACETS );\n    if( f != null ) {\n      if( facets == null ) {\n        facets = new HashMap<String, Map<String,StatsValues>>();\n      }\n      \n      for( int i=0; i< f.size(); i++ ) {\n        String field = f.getName(i);\n        NamedList vals = (NamedList)f.getVal( i );\n        Map<String,StatsValues> addTo = facets.get( field );\n        if( addTo == null ) {\n          addTo = new HashMap<String,StatsValues>();\n          facets.put( field, addTo );\n        }\n        for( int j=0; j< vals.size(); j++ ) {\n          String val = vals.getName(j);\n          StatsValues vvals = addTo.get( val );\n          if( vvals == null ) {\n            vvals = new StatsValues();\n            addTo.put( val, vvals );\n          }\n          vvals.accumulate( (NamedList)vals.getVal( j ) );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValues#accumulate(NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/StatsValues#accumulate(NamedList).mjava","sourceNew":"  public void accumulate(NamedList stv){\n    min = Math.min(min, (Double)stv.get(\"min\"));\n    max = Math.max(max, (Double)stv.get(\"max\"));\n    sum += (Double)stv.get(\"sum\");\n    count += (Long)stv.get(\"count\");\n    missing += (Long)stv.get(\"missing\");\n    sumOfSquares += (Double)stv.get(\"sumOfSquares\");\n    \n    NamedList f = (NamedList)stv.get( FACETS );\n    if( f != null ) {\n      if( facets == null ) {\n        facets = new HashMap<String, Map<String,StatsValues>>();\n      }\n      \n      for( int i=0; i< f.size(); i++ ) {\n        String field = f.getName(i);\n        NamedList vals = (NamedList)f.getVal( i );\n        Map<String,StatsValues> addTo = facets.get( field );\n        if( addTo == null ) {\n          addTo = new HashMap<String,StatsValues>();\n          facets.put( field, addTo );\n        }\n        for( int j=0; j< vals.size(); j++ ) {\n          String val = vals.getName(j);\n          StatsValues vvals = addTo.get( val );\n          if( vvals == null ) {\n            vvals = new StatsValues();\n            addTo.put( val, vvals );\n          }\n          vvals.accumulate( (NamedList)vals.getVal( j ) );\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void accumulate(NamedList stv){\n    min = Math.min(min, (Double)stv.get(\"min\"));\n    max = Math.max(max, (Double)stv.get(\"max\"));\n    sum += (Double)stv.get(\"sum\");\n    count += (Long)stv.get(\"count\");\n    missing += (Long)stv.get(\"missing\");\n    sumOfSquares += (Double)stv.get(\"sumOfSquares\");\n    \n    NamedList f = (NamedList)stv.get( FACETS );\n    if( f != null ) {\n      if( facets == null ) {\n        facets = new HashMap<String, Map<String,StatsValues>>();\n      }\n      \n      for( int i=0; i< f.size(); i++ ) {\n        String field = f.getName(i);\n        NamedList vals = (NamedList)f.getVal( i );\n        Map<String,StatsValues> addTo = facets.get( field );\n        if( addTo == null ) {\n          addTo = new HashMap<String,StatsValues>();\n          facets.put( field, addTo );\n        }\n        for( int j=0; j< vals.size(); j++ ) {\n          String val = vals.getName(j);\n          StatsValues vvals = addTo.get( val );\n          if( vvals == null ) {\n            vvals = new StatsValues();\n            addTo.put( val, vvals );\n          }\n          vvals.accumulate( (NamedList)vals.getVal( j ) );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11982a7b6834a8571852448312db4624c32990b5","date":1321300684,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValues#accumulate(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValues#accumulate(NamedList).mjava","sourceNew":"  /**\n   * Accumulate the values based on those in the given NamedList\n   *\n   * @param stv NamedList whose values will be used to accumulate the current values\n   */\n  void accumulate(NamedList stv);\n\n","sourceOld":"  public void accumulate(NamedList stv){\n    min = Math.min(min, (Double)stv.get(\"min\"));\n    max = Math.max(max, (Double)stv.get(\"max\"));\n    sum += (Double)stv.get(\"sum\");\n    count += (Long)stv.get(\"count\");\n    missing += (Long)stv.get(\"missing\");\n    sumOfSquares += (Double)stv.get(\"sumOfSquares\");\n    \n    NamedList f = (NamedList)stv.get( FACETS );\n    if( f != null ) {\n      if( facets == null ) {\n        facets = new HashMap<String, Map<String,StatsValues>>();\n      }\n      \n      for( int i=0; i< f.size(); i++ ) {\n        String field = f.getName(i);\n        NamedList vals = (NamedList)f.getVal( i );\n        Map<String,StatsValues> addTo = facets.get( field );\n        if( addTo == null ) {\n          addTo = new HashMap<String,StatsValues>();\n          facets.put( field, addTo );\n        }\n        for( int j=0; j< vals.size(); j++ ) {\n          String val = vals.getName(j);\n          StatsValues vvals = addTo.get( val );\n          if( vvals == null ) {\n            vvals = new StatsValues();\n            addTo.put( val, vvals );\n          }\n          vvals.accumulate( (NamedList)vals.getVal( j ) );\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValues#accumulate(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValues#accumulate(NamedList).mjava","sourceNew":"  /**\n   * Accumulate the values based on those in the given NamedList\n   *\n   * @param stv NamedList whose values will be used to accumulate the current values\n   */\n  void accumulate(@SuppressWarnings({\"rawtypes\"})NamedList stv);\n\n","sourceOld":"  /**\n   * Accumulate the values based on those in the given NamedList\n   *\n   * @param stv NamedList whose values will be used to accumulate the current values\n   */\n  void accumulate(NamedList stv);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["11982a7b6834a8571852448312db4624c32990b5"],"11982a7b6834a8571852448312db4624c32990b5":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["11982a7b6834a8571852448312db4624c32990b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11982a7b6834a8571852448312db4624c32990b5":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}