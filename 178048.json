{"path":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#nextBuffer().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#nextBuffer().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#nextBuffer().mjava","sourceNew":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      byte[][] newBuffers = new byte[ArrayUtil.oversize(buffers.length+1,\n                                                        NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = allocator.getByteBlock();\n    bufferUpto++;\n\n    byteUpto = 0;\n    byteOffset += BYTE_BLOCK_SIZE;\n  }\n\n","sourceOld":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      byte[][] newBuffers = new byte[ArrayUtil.oversize(buffers.length+1,\n                                                        NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = allocator.getByteBlock();\n    bufferUpto++;\n\n    byteUpto = 0;\n    byteOffset += BYTE_BLOCK_SIZE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#nextBuffer().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#nextBuffer().mjava","sourceNew":"  /**\n   * Advances the pool to its next buffer. This method should be called once\n   * after the constructor to initialize the pool. In contrast to the\n   * constructor a {@link ByteBlockPool#reset()} call will advance the pool to\n   * its first buffer immediately.\n   */\n  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      byte[][] newBuffers = new byte[ArrayUtil.oversize(buffers.length+1,\n                                                        NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = allocator.getByteBlock();\n    bufferUpto++;\n\n    byteUpto = 0;\n    byteOffset += BYTE_BLOCK_SIZE;\n  }\n\n","sourceOld":"  public void nextBuffer() {\n    if (1+bufferUpto == buffers.length) {\n      byte[][] newBuffers = new byte[ArrayUtil.oversize(buffers.length+1,\n                                                        NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(buffers, 0, newBuffers, 0, buffers.length);\n      buffers = newBuffers;\n    }\n    buffer = buffers[1+bufferUpto] = allocator.getByteBlock();\n    bufferUpto++;\n\n    byteUpto = 0;\n    byteOffset += BYTE_BLOCK_SIZE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}