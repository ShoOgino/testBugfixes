{"path":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testNewReplicaOldLeader().mjava","commits":[{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testNewReplicaOldLeader().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNewReplicaOldLeader() throws Exception {\n\n    String collection = \"testNewReplicaOldLeader\";\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    addDocs(collection, 2, 0);\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    //introduce network partition between leader & replica\n    Replica notLeader = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    assertTrue(runInOldLIRMode(collection, \"shard1\", notLeader));\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 2, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    // make sure that, when new replica works with old leader, it still can recovery normally\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 2);\n\n    // make sure that, when new replica restart during LIR, it still can recovery normally (by looking at LIR node)\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 3, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n\n    JettySolrRunner notLeaderJetty = getJettyForReplica(notLeader);\n    notLeaderJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState) -> liveNodes.size() == 2);\n    upgrade(notLeaderJetty);\n    notLeaderJetty.start();\n\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", notLeader));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 3);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bedc8e5595055009e34aaa41f94d3645ba103d98","date":1520708295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testNewReplicaOldLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testNewReplicaOldLeader().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testNewReplicaOldLeader() throws Exception {\n\n    String collection = \"testNewReplicaOldLeader\";\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    addDocs(collection, 2, 0);\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    //introduce network partition between leader & replica\n    Replica notLeader = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    assertTrue(runInOldLIRMode(collection, \"shard1\", notLeader));\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 2, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    // make sure that, when new replica works with old leader, it still can recovery normally\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 2);\n\n    // make sure that, when new replica restart during LIR, it still can recovery normally (by looking at LIR node)\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 3, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n\n    JettySolrRunner notLeaderJetty = getJettyForReplica(notLeader);\n    notLeaderJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState) -> liveNodes.size() == 2);\n    upgrade(notLeaderJetty);\n    notLeaderJetty.start();\n\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", notLeader));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 3);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testNewReplicaOldLeader() throws Exception {\n\n    String collection = \"testNewReplicaOldLeader\";\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    addDocs(collection, 2, 0);\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    //introduce network partition between leader & replica\n    Replica notLeader = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    assertTrue(runInOldLIRMode(collection, \"shard1\", notLeader));\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 2, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    // make sure that, when new replica works with old leader, it still can recovery normally\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 2);\n\n    // make sure that, when new replica restart during LIR, it still can recovery normally (by looking at LIR node)\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 3, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n\n    JettySolrRunner notLeaderJetty = getJettyForReplica(notLeader);\n    notLeaderJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState) -> liveNodes.size() == 2);\n    upgrade(notLeaderJetty);\n    notLeaderJetty.start();\n\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", notLeader));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 3);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"755a288a255ef805898652744dc5b055f44cb6bc","date":1520851176,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testNewReplicaOldLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testNewReplicaOldLeader().mjava","sourceNew":"  @Test\n  public void testNewReplicaOldLeader() throws Exception {\n\n    String collection = \"testNewReplicaOldLeader\";\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Time waiting for 1x2 collection\", collection, clusterShape(1, 2));\n\n    addDocs(collection, 2, 0);\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    //introduce network partition between leader & replica\n    Replica notLeader = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    assertTrue(runInOldLIRMode(collection, \"shard1\", notLeader));\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 2, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    // make sure that, when new replica works with old leader, it still can recovery normally\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 2);\n\n    // make sure that, when new replica restart during LIR, it still can recovery normally (by looking at LIR node)\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 3, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n\n    JettySolrRunner notLeaderJetty = getJettyForReplica(notLeader);\n    notLeaderJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState) -> liveNodes.size() == 2);\n    upgrade(notLeaderJetty);\n    notLeaderJetty.start();\n\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", notLeader));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 3);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testNewReplicaOldLeader() throws Exception {\n\n    String collection = \"testNewReplicaOldLeader\";\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    addDocs(collection, 2, 0);\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    //introduce network partition between leader & replica\n    Replica notLeader = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    assertTrue(runInOldLIRMode(collection, \"shard1\", notLeader));\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 2, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    // make sure that, when new replica works with old leader, it still can recovery normally\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 2);\n\n    // make sure that, when new replica restart during LIR, it still can recovery normally (by looking at LIR node)\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 3, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n\n    JettySolrRunner notLeaderJetty = getJettyForReplica(notLeader);\n    notLeaderJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState) -> liveNodes.size() == 2);\n    upgrade(notLeaderJetty);\n    notLeaderJetty.start();\n\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", notLeader));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 3);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43ad790248d7f7daee5d9cced548c546f37c7218","date":1527269998,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testNewReplicaOldLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testNewReplicaOldLeader().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testNewReplicaOldLeader() throws Exception {\n\n    String collection = \"testNewReplicaOldLeader\";\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Time waiting for 1x2 collection\", collection, clusterShape(1, 2));\n\n    addDocs(collection, 2, 0);\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    //introduce network partition between leader & replica\n    Replica notLeader = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    assertTrue(runInOldLIRMode(collection, \"shard1\", notLeader));\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 2, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    // make sure that, when new replica works with old leader, it still can recovery normally\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 2);\n\n    // make sure that, when new replica restart during LIR, it still can recovery normally (by looking at LIR node)\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 3, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n\n    JettySolrRunner notLeaderJetty = getJettyForReplica(notLeader);\n    notLeaderJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState) -> liveNodes.size() == 2);\n    upgrade(notLeaderJetty);\n    notLeaderJetty.start();\n\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", notLeader));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 3);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testNewReplicaOldLeader() throws Exception {\n\n    String collection = \"testNewReplicaOldLeader\";\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Time waiting for 1x2 collection\", collection, clusterShape(1, 2));\n\n    addDocs(collection, 2, 0);\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    //introduce network partition between leader & replica\n    Replica notLeader = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    assertTrue(runInOldLIRMode(collection, \"shard1\", notLeader));\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 2, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    // make sure that, when new replica works with old leader, it still can recovery normally\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 2);\n\n    // make sure that, when new replica restart during LIR, it still can recovery normally (by looking at LIR node)\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 3, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n\n    JettySolrRunner notLeaderJetty = getJettyForReplica(notLeader);\n    notLeaderJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState) -> liveNodes.size() == 2);\n    upgrade(notLeaderJetty);\n    notLeaderJetty.start();\n\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", notLeader));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 3);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c374690db69470f6aa4bffc43dcacf1f4e3e49","date":1529007399,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testNewReplicaOldLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testNewReplicaOldLeader().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testNewReplicaOldLeader() throws Exception {\n\n    String collection = \"testNewReplicaOldLeader\";\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Time waiting for 1x2 collection\", collection, clusterShape(1, 2));\n\n    addDocs(collection, 2, 0);\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    //introduce network partition between leader & replica\n    Replica notLeader = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    assertTrue(runInOldLIRMode(collection, \"shard1\", notLeader));\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 2, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    // make sure that, when new replica works with old leader, it still can recovery normally\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 2);\n\n    // make sure that, when new replica restart during LIR, it still can recovery normally (by looking at LIR node)\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 3, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n\n    JettySolrRunner notLeaderJetty = getJettyForReplica(notLeader);\n    notLeaderJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState) -> liveNodes.size() == 2);\n    upgrade(notLeaderJetty);\n    notLeaderJetty.start();\n\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", notLeader));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 3);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testNewReplicaOldLeader() throws Exception {\n\n    String collection = \"testNewReplicaOldLeader\";\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Time waiting for 1x2 collection\", collection, clusterShape(1, 2));\n\n    addDocs(collection, 2, 0);\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    //introduce network partition between leader & replica\n    Replica notLeader = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    assertTrue(runInOldLIRMode(collection, \"shard1\", notLeader));\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 2, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    // make sure that, when new replica works with old leader, it still can recovery normally\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 2);\n\n    // make sure that, when new replica restart during LIR, it still can recovery normally (by looking at LIR node)\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 3, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n\n    JettySolrRunner notLeaderJetty = getJettyForReplica(notLeader);\n    notLeaderJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState) -> liveNodes.size() == 2);\n    upgrade(notLeaderJetty);\n    notLeaderJetty.start();\n\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", notLeader));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 3);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testNewReplicaOldLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testNewReplicaOldLeader().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testNewReplicaOldLeader() throws Exception {\n\n    String collection = \"testNewReplicaOldLeader\";\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Time waiting for 1x2 collection\", collection, clusterShape(1, 2));\n\n    addDocs(collection, 2, 0);\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    //introduce network partition between leader & replica\n    Replica notLeader = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    assertTrue(runInOldLIRMode(collection, \"shard1\", notLeader));\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 2, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    // make sure that, when new replica works with old leader, it still can recovery normally\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 2);\n\n    // make sure that, when new replica restart during LIR, it still can recovery normally (by looking at LIR node)\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 3, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n\n    JettySolrRunner notLeaderJetty = getJettyForReplica(notLeader);\n    notLeaderJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState) -> liveNodes.size() == 2);\n    upgrade(notLeaderJetty);\n    notLeaderJetty.start();\n\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", notLeader));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 3);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testNewReplicaOldLeader() throws Exception {\n\n    String collection = \"testNewReplicaOldLeader\";\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Time waiting for 1x2 collection\", collection, clusterShape(1, 2));\n\n    addDocs(collection, 2, 0);\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    //introduce network partition between leader & replica\n    Replica notLeader = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    assertTrue(runInOldLIRMode(collection, \"shard1\", notLeader));\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 2, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    // make sure that, when new replica works with old leader, it still can recovery normally\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 2);\n\n    // make sure that, when new replica restart during LIR, it still can recovery normally (by looking at LIR node)\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 3, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n\n    JettySolrRunner notLeaderJetty = getJettyForReplica(notLeader);\n    notLeaderJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState) -> liveNodes.size() == 2);\n    upgrade(notLeaderJetty);\n    notLeaderJetty.start();\n\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", notLeader));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 3);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testNewReplicaOldLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testNewReplicaOldLeader().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testNewReplicaOldLeader() throws Exception {\n\n    String collection = \"testNewReplicaOldLeader\";\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Time waiting for 1x2 collection\", collection, clusterShape(1, 2));\n\n    addDocs(collection, 2, 0);\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    //introduce network partition between leader & replica\n    Replica notLeader = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    assertTrue(runInOldLIRMode(collection, \"shard1\", notLeader));\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 2, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    // make sure that, when new replica works with old leader, it still can recovery normally\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 2);\n\n    // make sure that, when new replica restart during LIR, it still can recovery normally (by looking at LIR node)\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 3, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n\n    JettySolrRunner notLeaderJetty = getJettyForReplica(notLeader);\n    notLeaderJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState) -> liveNodes.size() == 2);\n    upgrade(notLeaderJetty);\n    notLeaderJetty.start();\n\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", notLeader));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 3);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testNewReplicaOldLeader() throws Exception {\n\n    String collection = \"testNewReplicaOldLeader\";\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Time waiting for 1x2 collection\", collection, clusterShape(1, 2));\n\n    addDocs(collection, 2, 0);\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    //introduce network partition between leader & replica\n    Replica notLeader = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    assertTrue(runInOldLIRMode(collection, \"shard1\", notLeader));\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 2, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    // make sure that, when new replica works with old leader, it still can recovery normally\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 2);\n\n    // make sure that, when new replica restart during LIR, it still can recovery normally (by looking at LIR node)\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 3, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n\n    JettySolrRunner notLeaderJetty = getJettyForReplica(notLeader);\n    notLeaderJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState) -> liveNodes.size() == 2);\n    upgrade(notLeaderJetty);\n    notLeaderJetty.start();\n\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", notLeader));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 3);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2d6b868457b26b5a2145b8441b1cfcfc0692b02","date":1534307099,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testNewReplicaOldLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testNewReplicaOldLeader().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testNewReplicaOldLeader() throws Exception {\n\n    String collection = \"testNewReplicaOldLeader\";\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Time waiting for 1x2 collection\", collection, clusterShape(1, 2));\n\n    addDocs(collection, 2, 0);\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    //introduce network partition between leader & replica\n    Replica notLeader = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    assertTrue(runInOldLIRMode(collection, \"shard1\", notLeader));\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 2, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    // make sure that, when new replica works with old leader, it still can recovery normally\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 2);\n\n    // make sure that, when new replica restart during LIR, it still can recovery normally (by looking at LIR node)\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 3, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n\n    JettySolrRunner notLeaderJetty = getJettyForReplica(notLeader);\n    notLeaderJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState) -> liveNodes.size() == 2);\n    upgrade(notLeaderJetty);\n    notLeaderJetty.start();\n\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", notLeader));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 3);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testNewReplicaOldLeader() throws Exception {\n\n    String collection = \"testNewReplicaOldLeader\";\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Time waiting for 1x2 collection\", collection, clusterShape(1, 2));\n\n    addDocs(collection, 2, 0);\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    //introduce network partition between leader & replica\n    Replica notLeader = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    assertTrue(runInOldLIRMode(collection, \"shard1\", notLeader));\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 2, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    // make sure that, when new replica works with old leader, it still can recovery normally\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 2);\n\n    // make sure that, when new replica restart during LIR, it still can recovery normally (by looking at LIR node)\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 3, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n\n    JettySolrRunner notLeaderJetty = getJettyForReplica(notLeader);\n    notLeaderJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState) -> liveNodes.size() == 2);\n    upgrade(notLeaderJetty);\n    notLeaderJetty.start();\n\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", notLeader));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 3);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14076e7b40405aa1f08702d8df762d08b5d44f70","date":1537071979,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testNewReplicaOldLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testNewReplicaOldLeader().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented 15-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testNewReplicaOldLeader() throws Exception {\n\n    String collection = \"testNewReplicaOldLeader\";\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Time waiting for 1x2 collection\", collection, clusterShape(1, 2));\n\n    addDocs(collection, 2, 0);\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    //introduce network partition between leader & replica\n    Replica notLeader = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    assertTrue(runInOldLIRMode(collection, \"shard1\", notLeader));\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 2, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    // make sure that, when new replica works with old leader, it still can recovery normally\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 2);\n\n    // make sure that, when new replica restart during LIR, it still can recovery normally (by looking at LIR node)\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 3, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n\n    JettySolrRunner notLeaderJetty = getJettyForReplica(notLeader);\n    notLeaderJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState) -> liveNodes.size() == 2);\n    upgrade(notLeaderJetty);\n    notLeaderJetty.start();\n\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", notLeader));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 3);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testNewReplicaOldLeader() throws Exception {\n\n    String collection = \"testNewReplicaOldLeader\";\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Time waiting for 1x2 collection\", collection, clusterShape(1, 2));\n\n    addDocs(collection, 2, 0);\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    //introduce network partition between leader & replica\n    Replica notLeader = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    assertTrue(runInOldLIRMode(collection, \"shard1\", notLeader));\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 2, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    // make sure that, when new replica works with old leader, it still can recovery normally\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 2);\n\n    // make sure that, when new replica restart during LIR, it still can recovery normally (by looking at LIR node)\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 3, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n\n    JettySolrRunner notLeaderJetty = getJettyForReplica(notLeader);\n    notLeaderJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState) -> liveNodes.size() == 2);\n    upgrade(notLeaderJetty);\n    notLeaderJetty.start();\n\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", notLeader));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 3);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180","date":1539076849,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/LIRRollingUpdatesTest#testNewReplicaOldLeader().mjava","sourceNew":null,"sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented 15-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 09-Aug-2018\n  public void testNewReplicaOldLeader() throws Exception {\n\n    String collection = \"testNewReplicaOldLeader\";\n    CollectionAdminRequest.createCollection(collection, 1, 2)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    Properties oldLir = new Properties();\n    oldLir.setProperty(\"lirVersion\", \"old\");\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n\n    CollectionAdminRequest\n        .addReplicaToShard(collection, \"shard1\")\n        .setProperties(oldLir)\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Time waiting for 1x2 collection\", collection, clusterShape(1, 2));\n\n    addDocs(collection, 2, 0);\n\n    Slice shard1 = getCollectionState(collection).getSlice(\"shard1\");\n    //introduce network partition between leader & replica\n    Replica notLeader = shard1.getReplicas(x -> x != shard1.getLeader()).get(0);\n    assertTrue(runInOldLIRMode(collection, \"shard1\", notLeader));\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 2, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    // make sure that, when new replica works with old leader, it still can recovery normally\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 2);\n\n    // make sure that, when new replica restart during LIR, it still can recovery normally (by looking at LIR node)\n    getProxyForReplica(notLeader).close();\n    getProxyForReplica(shard1.getLeader()).close();\n\n    addDoc(collection, 3, getJettyForReplica(shard1.getLeader()));\n    waitForState(\"Replica \" + notLeader.getName() + \" is not put as DOWN\", collection,\n        (liveNodes, collectionState) ->\n            collectionState.getSlice(\"shard1\").getReplica(notLeader.getName()).getState() == Replica.State.DOWN);\n\n    JettySolrRunner notLeaderJetty = getJettyForReplica(notLeader);\n    notLeaderJetty.stop();\n    waitForState(\"Node did not leave\", collection, (liveNodes, collectionState) -> liveNodes.size() == 2);\n    upgrade(notLeaderJetty);\n    notLeaderJetty.start();\n\n    getProxyForReplica(shard1.getLeader()).reopen();\n    getProxyForReplica(notLeader).reopen();\n    waitForState(\"Timeout waiting for recovering\", collection, clusterShape(1, 2));\n    assertFalse(runInOldLIRMode(collection, \"shard1\", notLeader));\n    assertDocsExistInAllReplicas(Collections.singletonList(notLeader), collection, 0, 3);\n\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2d6b868457b26b5a2145b8441b1cfcfc0692b02":["a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"755a288a255ef805898652744dc5b055f44cb6bc":["bedc8e5595055009e34aaa41f94d3645ba103d98"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["43ad790248d7f7daee5d9cced548c546f37c7218","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bedc8e5595055009e34aaa41f94d3645ba103d98":["84f20f331d8001864545c7021812d8c6509c7593"],"84f20f331d8001864545c7021812d8c6509c7593":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["14076e7b40405aa1f08702d8df762d08b5d44f70"],"14076e7b40405aa1f08702d8df762d08b5d44f70":["d2d6b868457b26b5a2145b8441b1cfcfc0692b02"],"43ad790248d7f7daee5d9cced548c546f37c7218":["755a288a255ef805898652744dc5b055f44cb6bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["43ad790248d7f7daee5d9cced548c546f37c7218"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["43ad790248d7f7daee5d9cced548c546f37c7218","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"]},"commit2Childs":{"d2d6b868457b26b5a2145b8441b1cfcfc0692b02":["14076e7b40405aa1f08702d8df762d08b5d44f70"],"755a288a255ef805898652744dc5b055f44cb6bc":["43ad790248d7f7daee5d9cced548c546f37c7218"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84f20f331d8001864545c7021812d8c6509c7593"],"bedc8e5595055009e34aaa41f94d3645ba103d98":["755a288a255ef805898652744dc5b055f44cb6bc"],"84f20f331d8001864545c7021812d8c6509c7593":["bedc8e5595055009e34aaa41f94d3645ba103d98"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"14076e7b40405aa1f08702d8df762d08b5d44f70":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"],"43ad790248d7f7daee5d9cced548c546f37c7218":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1c374690db69470f6aa4bffc43dcacf1f4e3e49","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["d2d6b868457b26b5a2145b8441b1cfcfc0692b02","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}