{"path":"src/java/org/apache/lucene/index/DocFieldConsumers#flush(Map,SegmentWriteState).mjava","commits":[{"id":"4d17492f26096e19670d947d1be5e9adc52b1d3d","date":1224931200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocFieldConsumers#flush(Map,SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/DocFieldConsumers#flush(Map,DocumentsWriter.FlushState).mjava","sourceNew":"  public void flush(Map threadsAndFields, SegmentWriteState state) throws IOException {\n\n    Map oneThreadsAndFields = new HashMap();\n    Map twoThreadsAndFields = new HashMap();\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      DocFieldConsumersPerThread perThread = (DocFieldConsumersPerThread) entry.getKey();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n      Collection oneFields = new HashSet();\n      Collection twoFields = new HashSet();\n      while(fieldsIt.hasNext()) {\n        DocFieldConsumersPerField perField = (DocFieldConsumersPerField) fieldsIt.next();\n        oneFields.add(perField.one);\n        twoFields.add(perField.two);\n      }\n\n      oneThreadsAndFields.put(perThread.one, oneFields);\n      twoThreadsAndFields.put(perThread.two, twoFields);\n    }\n    \n\n    one.flush(oneThreadsAndFields, state);\n    two.flush(twoThreadsAndFields, state);\n  }\n\n","sourceOld":"  public void flush(Map threadsAndFields, DocumentsWriter.FlushState state) throws IOException {\n\n    Map oneThreadsAndFields = new HashMap();\n    Map twoThreadsAndFields = new HashMap();\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      DocFieldConsumersPerThread perThread = (DocFieldConsumersPerThread) entry.getKey();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n      Collection oneFields = new HashSet();\n      Collection twoFields = new HashSet();\n      while(fieldsIt.hasNext()) {\n        DocFieldConsumersPerField perField = (DocFieldConsumersPerField) fieldsIt.next();\n        oneFields.add(perField.one);\n        twoFields.add(perField.two);\n      }\n\n      oneThreadsAndFields.put(perThread.one, oneFields);\n      twoThreadsAndFields.put(perThread.two, twoFields);\n    }\n    \n\n    one.flush(oneThreadsAndFields, state);\n    two.flush(twoThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","date":1255859449,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocFieldConsumers#flush(Map[DocFieldConsumerPerThread,Collection[DocFieldConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/DocFieldConsumers#flush(Map,SegmentWriteState).mjava","sourceNew":"  public void flush(Map<DocFieldConsumerPerThread,Collection<DocFieldConsumerPerField>> threadsAndFields, SegmentWriteState state) throws IOException {\n\n    Map oneThreadsAndFields = new HashMap();\n    Map twoThreadsAndFields = new HashMap();\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      DocFieldConsumersPerThread perThread = (DocFieldConsumersPerThread) entry.getKey();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n      Collection oneFields = new HashSet();\n      Collection twoFields = new HashSet();\n      while(fieldsIt.hasNext()) {\n        DocFieldConsumersPerField perField = (DocFieldConsumersPerField) fieldsIt.next();\n        oneFields.add(perField.one);\n        twoFields.add(perField.two);\n      }\n\n      oneThreadsAndFields.put(perThread.one, oneFields);\n      twoThreadsAndFields.put(perThread.two, twoFields);\n    }\n    \n\n    one.flush(oneThreadsAndFields, state);\n    two.flush(twoThreadsAndFields, state);\n  }\n\n","sourceOld":"  public void flush(Map threadsAndFields, SegmentWriteState state) throws IOException {\n\n    Map oneThreadsAndFields = new HashMap();\n    Map twoThreadsAndFields = new HashMap();\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      DocFieldConsumersPerThread perThread = (DocFieldConsumersPerThread) entry.getKey();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n      Collection oneFields = new HashSet();\n      Collection twoFields = new HashSet();\n      while(fieldsIt.hasNext()) {\n        DocFieldConsumersPerField perField = (DocFieldConsumersPerField) fieldsIt.next();\n        oneFields.add(perField.one);\n        twoFields.add(perField.two);\n      }\n\n      oneThreadsAndFields.put(perThread.one, oneFields);\n      twoThreadsAndFields.put(perThread.two, twoFields);\n    }\n    \n\n    one.flush(oneThreadsAndFields, state);\n    two.flush(twoThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["4d17492f26096e19670d947d1be5e9adc52b1d3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d17492f26096e19670d947d1be5e9adc52b1d3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"]},"commit2Childs":{"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d17492f26096e19670d947d1be5e9adc52b1d3d"],"4d17492f26096e19670d947d1be5e9adc52b1d3d":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}