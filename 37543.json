{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/json/JsonQueryRequest#withFilter(Map[String,Object]).mjava","commits":[{"id":"a1f685bdd8a6bd0db4f9fb53514bf80b6b1fe8f6","date":1541507693,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/json/JsonQueryRequest#withFilter(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a filter query to run as a part of the JSON request\n   *\n   * This method may be called multiple times; each call will add a new filter to the request\n   * <p>\n   * <b>Example:</b> You wish to send the JSON request: \"{'query':'*:*', 'filter': [{'lucene': {'df':'genre_s', 'query': 'scifi'}}]}\".\n   * The filter you want to add is: \"{'lucene': {'df': 'genre_s', 'query': 'scifi'}}\".  You would represent this filter\n   * query as follows:\n   * <pre>{@code\n   *     final Map<String, Object> filterMap = new HashMap<>();\n   *     final Map<String, Object> luceneQueryParamMap = new HashMap<>();\n   *     filterMap.put(\"lucene\", luceneQueryParamMap);\n   *     luceneQueryParamMap.put(\"df\", \"genre_s\");\n   *     luceneQueryParamMap.put(\"query\", \"scifi\");\n   * }</pre>\n   *\n   * @param filterQuery a Map of values representing the filter request you wish to send.\n   * @throws IllegalArgumentException if {@code filterQuery} is null\n   */\n  public JsonQueryRequest withFilter(Map<String, Object> filterQuery) {\n    if (filterQuery == null) {\n      throw new IllegalArgumentException(\"'filterQuery' parameter must be non-null\");\n    }\n    jsonRequestMap.putIfAbsent(\"filter\", new ArrayList<Object>());\n    final List<Object> filters = (List<Object>) jsonRequestMap.get(\"filter\");\n    filters.add(filterQuery);\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a686e6ef1736c0d9ac3804b6a0f520e5982657de","date":1541787308,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/json/JsonQueryRequest#withFilter(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/json/JsonQueryRequest#withFilter(Map[String,Object]).mjava","sourceNew":"  /**\n   * Add a filter query to run as a part of the JSON request\n   *\n   * This method may be called multiple times; each call will add a new filter to the request\n   * <p>\n   * <b>Example:</b> You wish to send the JSON request: \"{'query':'*:*', 'filter': [{'lucene': {'df':'genre_s', 'query': 'scifi'}}]}\".\n   * The filter you want to add is: \"{'lucene': {'df': 'genre_s', 'query': 'scifi'}}\".  You would represent this filter\n   * query as follows:\n   * <pre>{@code\n   *     final Map<String, Object> filterMap = new HashMap<>();\n   *     final Map<String, Object> luceneQueryParamMap = new HashMap<>();\n   *     filterMap.put(\"lucene\", luceneQueryParamMap);\n   *     luceneQueryParamMap.put(\"df\", \"genre_s\");\n   *     luceneQueryParamMap.put(\"query\", \"scifi\");\n   * }</pre>\n   *\n   * @param filterQuery a Map of values representing the filter request you wish to send.\n   * @throws IllegalArgumentException if {@code filterQuery} is null\n   */\n  public JsonQueryRequest withFilter(Map<String, Object> filterQuery) {\n    if (filterQuery == null) {\n      throw new IllegalArgumentException(\"'filterQuery' parameter must be non-null\");\n    }\n    ((List)jsonRequestMap.computeIfAbsent(\"filter\", s -> new ArrayList<>())).add(filterQuery) ;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Add a filter query to run as a part of the JSON request\n   *\n   * This method may be called multiple times; each call will add a new filter to the request\n   * <p>\n   * <b>Example:</b> You wish to send the JSON request: \"{'query':'*:*', 'filter': [{'lucene': {'df':'genre_s', 'query': 'scifi'}}]}\".\n   * The filter you want to add is: \"{'lucene': {'df': 'genre_s', 'query': 'scifi'}}\".  You would represent this filter\n   * query as follows:\n   * <pre>{@code\n   *     final Map<String, Object> filterMap = new HashMap<>();\n   *     final Map<String, Object> luceneQueryParamMap = new HashMap<>();\n   *     filterMap.put(\"lucene\", luceneQueryParamMap);\n   *     luceneQueryParamMap.put(\"df\", \"genre_s\");\n   *     luceneQueryParamMap.put(\"query\", \"scifi\");\n   * }</pre>\n   *\n   * @param filterQuery a Map of values representing the filter request you wish to send.\n   * @throws IllegalArgumentException if {@code filterQuery} is null\n   */\n  public JsonQueryRequest withFilter(Map<String, Object> filterQuery) {\n    if (filterQuery == null) {\n      throw new IllegalArgumentException(\"'filterQuery' parameter must be non-null\");\n    }\n    jsonRequestMap.putIfAbsent(\"filter\", new ArrayList<Object>());\n    final List<Object> filters = (List<Object>) jsonRequestMap.get(\"filter\");\n    filters.add(filterQuery);\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7dfea4f7c80813344b0152e37fc18b31369e8ff","date":1592136683,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/json/JsonQueryRequest#withFilter(Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/json/JsonQueryRequest#withFilter(Map[String,Object]).mjava","sourceNew":"  /**\n   * Add a filter query to run as a part of the JSON request\n   *\n   * This method may be called multiple times; each call will add a new filter to the request\n   * <p>\n   * <b>Example:</b> You wish to send the JSON request: \"{'query':'*:*', 'filter': [{'lucene': {'df':'genre_s', 'query': 'scifi'}}]}\".\n   * The filter you want to add is: \"{'lucene': {'df': 'genre_s', 'query': 'scifi'}}\".  You would represent this filter\n   * query as follows:\n   * <pre>{@code\n   *     final Map<String, Object> filterMap = new HashMap<>();\n   *     final Map<String, Object> luceneQueryParamMap = new HashMap<>();\n   *     filterMap.put(\"lucene\", luceneQueryParamMap);\n   *     luceneQueryParamMap.put(\"df\", \"genre_s\");\n   *     luceneQueryParamMap.put(\"query\", \"scifi\");\n   * }</pre>\n   *\n   * @param filterQuery a Map of values representing the filter request you wish to send.\n   * @throws IllegalArgumentException if {@code filterQuery} is null\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public JsonQueryRequest withFilter(Map<String, Object> filterQuery) {\n    if (filterQuery == null) {\n      throw new IllegalArgumentException(\"'filterQuery' parameter must be non-null\");\n    }\n    ((List)jsonRequestMap.computeIfAbsent(\"filter\", s -> new ArrayList<>())).add(filterQuery) ;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Add a filter query to run as a part of the JSON request\n   *\n   * This method may be called multiple times; each call will add a new filter to the request\n   * <p>\n   * <b>Example:</b> You wish to send the JSON request: \"{'query':'*:*', 'filter': [{'lucene': {'df':'genre_s', 'query': 'scifi'}}]}\".\n   * The filter you want to add is: \"{'lucene': {'df': 'genre_s', 'query': 'scifi'}}\".  You would represent this filter\n   * query as follows:\n   * <pre>{@code\n   *     final Map<String, Object> filterMap = new HashMap<>();\n   *     final Map<String, Object> luceneQueryParamMap = new HashMap<>();\n   *     filterMap.put(\"lucene\", luceneQueryParamMap);\n   *     luceneQueryParamMap.put(\"df\", \"genre_s\");\n   *     luceneQueryParamMap.put(\"query\", \"scifi\");\n   * }</pre>\n   *\n   * @param filterQuery a Map of values representing the filter request you wish to send.\n   * @throws IllegalArgumentException if {@code filterQuery} is null\n   */\n  public JsonQueryRequest withFilter(Map<String, Object> filterQuery) {\n    if (filterQuery == null) {\n      throw new IllegalArgumentException(\"'filterQuery' parameter must be non-null\");\n    }\n    ((List)jsonRequestMap.computeIfAbsent(\"filter\", s -> new ArrayList<>())).add(filterQuery) ;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["a686e6ef1736c0d9ac3804b6a0f520e5982657de"],"a686e6ef1736c0d9ac3804b6a0f520e5982657de":["a1f685bdd8a6bd0db4f9fb53514bf80b6b1fe8f6"],"a1f685bdd8a6bd0db4f9fb53514bf80b6b1fe8f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1f685bdd8a6bd0db4f9fb53514bf80b6b1fe8f6"],"a7dfea4f7c80813344b0152e37fc18b31369e8ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a686e6ef1736c0d9ac3804b6a0f520e5982657de":["a7dfea4f7c80813344b0152e37fc18b31369e8ff"],"a1f685bdd8a6bd0db4f9fb53514bf80b6b1fe8f6":["a686e6ef1736c0d9ac3804b6a0f520e5982657de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}