{"path":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","commits":[{"id":"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4","date":1495700700,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"/dev/null","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b","date":1495756308,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa61ea06d4d27acb465d77e15f20aae84531d73","date":1495784617,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"/dev/null","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"/dev/null","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d1f7b3f5e5e45b15b9649564c72301c248de1b8","date":1498557572,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testGreedyConditions().mjava","sourceNew":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","sourceOld":"  public void testGreedyConditions() {\n    String autoscaleJson = \"{\" +\n        \"      'cluster-policy':[\" +\n        \"      {'cores':'<10','node':'#ANY'},\" +\n        \"      {'replica':'<3','shard':'#EACH','node':'#ANY'},\" +\n        \"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},\" +//greedy condition\n        \"      {'nodeRole':'overseer','replica':'0'}],\" +\n        \"      'cluster-preferences':[\" +\n        \"      {'minimize':'cores', 'precision':3},\" +\n        \"      {'maximize':'freedisk','precision':100}]}\";\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n    Policy.Suggester suggester = session.getSuggester(ADDREPLICA);\n    SolrRequest op = suggester\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\")\n        .getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node3\", op.getParams().get(\"node\"));\n\n    suggester = suggester\n        .getSession()\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"shard1\");\n    op = suggester.getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getParams().get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8","e4848fb683db0790f2847173af06e2ad2d03328e"],"901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e4848fb683db0790f2847173af06e2ad2d03328e":["74aea047dff7f7c38a2d766827bd20d356f98c6a"]},"commit2Childs":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":[],"901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e4848fb683db0790f2847173af06e2ad2d03328e"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","cd5edd1f2b162a5cfa08efd17851a07373a96817","a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}