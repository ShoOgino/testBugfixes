{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#Builder(List[String],Optional[String]).mjava","commits":[{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#Builder(List[String],Optional[String]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Provide a series of ZK hosts which will be used when configuring {@link CloudSolrClient} instances.\n     * \n     * @param zkHosts a List of at least one ZooKeeper host and port\n     * @param zkChroot the path to the root ZooKeeper node containing Solr data.  May be empty if Solr-data is located\n     * at the ZooKeeper root\n     */\n    public Builder(List<String> zkHosts, Optional<String> zkChroot) {\n      this.zkHosts = zkHosts;\n      if (zkChroot.isPresent()) this.zkChroot = zkChroot.get();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fd439bd823b208ac1c5e30d283510ed993923093"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd439bd823b208ac1c5e30d283510ed993923093","date":1530797497,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#Builder(List[String],Optional[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#Builder(List[String],Optional[String]).mjava","sourceNew":"    /**\n     * Provide a series of ZK hosts which will be used when configuring {@link CloudSolrClient} instances.\n     *\n     * Usage example when Solr stores data at the ZooKeeper root ('/'):\n     *\n     * <pre>\n     *   final List&lt;String&gt; zkServers = new ArrayList&lt;String&gt;();\n     *   zkServers.add(\"zookeeper1:2181\"); zkServers.add(\"zookeeper2:2181\"); zkServers.add(\"zookeeper3:2181\");\n     *   final SolrClient client = new CloudSolrClient.Builder(zkServers, Optional.empty()).build();\n     * </pre>\n     *\n     * Usage example when Solr data is stored in a ZooKeeper chroot:\n     *\n     *  <pre>\n     *    final List&lt;String&gt; zkServers = new ArrayList&lt;String&gt;();\n     *    zkServers.add(\"zookeeper1:2181\"); zkServers.add(\"zookeeper2:2181\"); zkServers.add(\"zookeeper3:2181\");\n     *    final SolrClient client = new CloudSolrClient.Builder(zkServers, Optional.of(\"/solr\")).build();\n     *  </pre>\n     *\n     * @param zkHosts a List of at least one ZooKeeper host and port (e.g. \"zookeeper1:2181\")\n     * @param zkChroot the path to the root ZooKeeper node containing Solr data.  Provide {@code java.util.Optional.empty()} if no ZK chroot is used.\n     */\n    public Builder(List<String> zkHosts, Optional<String> zkChroot) {\n      this.zkHosts = zkHosts;\n      if (zkChroot.isPresent()) this.zkChroot = zkChroot.get();\n    }\n\n","sourceOld":"    /**\n     * Provide a series of ZK hosts which will be used when configuring {@link CloudSolrClient} instances.\n     * \n     * @param zkHosts a List of at least one ZooKeeper host and port\n     * @param zkChroot the path to the root ZooKeeper node containing Solr data.  May be empty if Solr-data is located\n     * at the ZooKeeper root\n     */\n    public Builder(List<String> zkHosts, Optional<String> zkChroot) {\n      this.zkHosts = zkHosts;\n      if (zkChroot.isPresent()) this.zkChroot = zkChroot.get();\n    }\n\n","bugFix":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#Builder(List[String],Optional[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#Builder(List[String],Optional[String]).mjava","sourceNew":"    /**\n     * Provide a series of ZK hosts which will be used when configuring {@link CloudSolrClient} instances.\n     *\n     * Usage example when Solr stores data at the ZooKeeper root ('/'):\n     *\n     * <pre>\n     *   final List&lt;String&gt; zkServers = new ArrayList&lt;String&gt;();\n     *   zkServers.add(\"zookeeper1:2181\"); zkServers.add(\"zookeeper2:2181\"); zkServers.add(\"zookeeper3:2181\");\n     *   final SolrClient client = new CloudSolrClient.Builder(zkServers, Optional.empty()).build();\n     * </pre>\n     *\n     * Usage example when Solr data is stored in a ZooKeeper chroot:\n     *\n     *  <pre>\n     *    final List&lt;String&gt; zkServers = new ArrayList&lt;String&gt;();\n     *    zkServers.add(\"zookeeper1:2181\"); zkServers.add(\"zookeeper2:2181\"); zkServers.add(\"zookeeper3:2181\");\n     *    final SolrClient client = new CloudSolrClient.Builder(zkServers, Optional.of(\"/solr\")).build();\n     *  </pre>\n     *\n     * @param zkHosts a List of at least one ZooKeeper host and port (e.g. \"zookeeper1:2181\")\n     * @param zkChroot the path to the root ZooKeeper node containing Solr data.  Provide {@code java.util.Optional.empty()} if no ZK chroot is used.\n     */\n    public Builder(List<String> zkHosts, Optional<String> zkChroot) {\n      this.zkHosts = zkHosts;\n      if (zkChroot.isPresent()) this.zkChroot = zkChroot.get();\n    }\n\n","sourceOld":"    /**\n     * Provide a series of ZK hosts which will be used when configuring {@link CloudSolrClient} instances.\n     * \n     * @param zkHosts a List of at least one ZooKeeper host and port\n     * @param zkChroot the path to the root ZooKeeper node containing Solr data.  May be empty if Solr-data is located\n     * at the ZooKeeper root\n     */\n    public Builder(List<String> zkHosts, Optional<String> zkChroot) {\n      this.zkHosts = zkHosts;\n      if (zkChroot.isPresent()) this.zkChroot = zkChroot.get();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#Builder(List[String],Optional[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient.Builder#Builder(List[String],Optional[String]).mjava","sourceNew":"    /**\n     * Provide a series of ZK hosts which will be used when configuring {@link CloudSolrClient} instances.\n     *\n     * Usage example when Solr stores data at the ZooKeeper root ('/'):\n     *\n     * <pre>\n     *   final List&lt;String&gt; zkServers = new ArrayList&lt;String&gt;();\n     *   zkServers.add(\"zookeeper1:2181\"); zkServers.add(\"zookeeper2:2181\"); zkServers.add(\"zookeeper3:2181\");\n     *   final SolrClient client = new CloudSolrClient.Builder(zkServers, Optional.empty()).build();\n     * </pre>\n     *\n     * Usage example when Solr data is stored in a ZooKeeper chroot:\n     *\n     *  <pre>\n     *    final List&lt;String&gt; zkServers = new ArrayList&lt;String&gt;();\n     *    zkServers.add(\"zookeeper1:2181\"); zkServers.add(\"zookeeper2:2181\"); zkServers.add(\"zookeeper3:2181\");\n     *    final SolrClient client = new CloudSolrClient.Builder(zkServers, Optional.of(\"/solr\")).build();\n     *  </pre>\n     *\n     * @param zkHosts a List of at least one ZooKeeper host and port (e.g. \"zookeeper1:2181\")\n     * @param zkChroot the path to the root ZooKeeper node containing Solr data.  Provide {@code java.util.Optional.empty()} if no ZK chroot is used.\n     */\n    public Builder(List<String> zkHosts, Optional<String> zkChroot) {\n      this.zkHosts = zkHosts;\n      if (zkChroot.isPresent()) this.zkChroot = zkChroot.get();\n    }\n\n","sourceOld":"    /**\n     * Provide a series of ZK hosts which will be used when configuring {@link CloudSolrClient} instances.\n     * \n     * @param zkHosts a List of at least one ZooKeeper host and port\n     * @param zkChroot the path to the root ZooKeeper node containing Solr data.  May be empty if Solr-data is located\n     * at the ZooKeeper root\n     */\n    public Builder(List<String> zkHosts, Optional<String> zkChroot) {\n      this.zkHosts = zkHosts;\n      if (zkChroot.isPresent()) this.zkChroot = zkChroot.get();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","fd439bd823b208ac1c5e30d283510ed993923093"],"fd439bd823b208ac1c5e30d283510ed993923093":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd439bd823b208ac1c5e30d283510ed993923093"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","fd439bd823b208ac1c5e30d283510ed993923093"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"fd439bd823b208ac1c5e30d283510ed993923093":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fd439bd823b208ac1c5e30d283510ed993923093","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}