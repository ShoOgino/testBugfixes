{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#getValueOf(FacetArrays,int).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#getValueOf(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getValueOf(FacetArrays,int).mjava","sourceNew":"  /**\n   * Return the value of a category used for facets computations for this\n   * request. For a count request this would be the count for that facet, i.e.\n   * an integer number. but for other requests this can be the result of a more\n   * complex operation, and the result can be any double precision number.\n   * Having this method with a general name <b>value</b> which is double\n   * precision allows to have more compact API and code for handling counts and\n   * perhaps other requests (such as for associations) very similarly, and by\n   * the same code and API, avoiding code duplication.\n   * \n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param idx\n   *          an index into the count arrays now in effect in\n   *          <code>arrays</code>. E.g., for ordinal number <i>n</i>, with\n   *          partition, of size <i>partitionSize</i>, now covering <i>n</i>,\n   *          <code>getValueOf</code> would be invoked with <code>idx</code>\n   *          being <i>n</i> % <i>partitionSize</i>.\n   */\n  // TODO perhaps instead of getValueOf we can have a postProcess(FacetArrays)\n  // That, together with getFacetArraysSource should allow ResultHandlers to\n  // efficiently obtain the values from the arrays directly\n  public abstract double getValueOf(FacetArrays arrays, int idx);\n\n","sourceOld":"  /**\n   * Return the value of a category used for facets computations for this\n   * request. For a count request this would be the count for that facet, i.e.\n   * an integer number. but for other requests this can be the result of a more\n   * complex operation, and the result can be any double precision number.\n   * Having this method with a general name <b>value</b> which is double\n   * precision allows to have more compact API and code for handling counts and\n   * perhaps other requests (such as for associations) very similarly, and by\n   * the same code and API, avoiding code duplication.\n   * \n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param idx\n   *          an index into the count arrays now in effect in\n   *          <code>arrays</code>. E.g., for ordinal number <i>n</i>, with\n   *          partition, of size <i>partitionSize</i>, now covering <i>n</i>,\n   *          <code>getValueOf</code> would be invoked with <code>idx</code>\n   *          being <i>n</i> % <i>partitionSize</i>.\n   */\n  // TODO perhaps instead of getValueOf we can have a postProcess(FacetArrays)\n  // That, together with getFacetArraysSource should allow ResultHandlers to\n  // efficiently obtain the values from the arrays directly\n  public abstract double getValueOf(FacetArrays arrays, int idx);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7e774da82c7db7701e3fb9b13910a57e7296d0f","date":1374814904,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#getValueOf(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#getValueOf(FacetArrays,int).mjava","sourceNew":"  /**\n   * Return the weight of the requested category ordinal. A {@link FacetRequest}\n   * is responsible for resolving the weight of a category given the\n   * {@link FacetArrays} and {@link #getFacetArraysSource()}. E.g. a counting\n   * request will probably return the value of the category from\n   * {@link FacetArrays#getIntArray()} while an average-weighting request will\n   * compute the value using both arrays.\n   * \n   * @param arrays\n   *          the arrays used to aggregate the categories weights.\n   * @param ordinal\n   *          the category ordinal for which to return the weight.\n   */\n  // TODO perhaps instead of getValueOf we can have a postProcess(FacetArrays)\n  // That, together with getFacetArraysSource should allow ResultHandlers to\n  // efficiently obtain the values from the arrays directly\n  public abstract double getValueOf(FacetArrays arrays, int ordinal);\n\n","sourceOld":"  /**\n   * Return the value of a category used for facets computations for this\n   * request. For a count request this would be the count for that facet, i.e.\n   * an integer number. but for other requests this can be the result of a more\n   * complex operation, and the result can be any double precision number.\n   * Having this method with a general name <b>value</b> which is double\n   * precision allows to have more compact API and code for handling counts and\n   * perhaps other requests (such as for associations) very similarly, and by\n   * the same code and API, avoiding code duplication.\n   * \n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param idx\n   *          an index into the count arrays now in effect in\n   *          <code>arrays</code>. E.g., for ordinal number <i>n</i>, with\n   *          partition, of size <i>partitionSize</i>, now covering <i>n</i>,\n   *          <code>getValueOf</code> would be invoked with <code>idx</code>\n   *          being <i>n</i> % <i>partitionSize</i>.\n   */\n  // TODO perhaps instead of getValueOf we can have a postProcess(FacetArrays)\n  // That, together with getFacetArraysSource should allow ResultHandlers to\n  // efficiently obtain the values from the arrays directly\n  public abstract double getValueOf(FacetArrays arrays, int idx);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b1c67b5eba853532b31132bf5aef70a3b2be63f","date":1375351298,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#getValueOf(FacetArrays,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Return the weight of the requested category ordinal. A {@link FacetRequest}\n   * is responsible for resolving the weight of a category given the\n   * {@link FacetArrays} and {@link #getFacetArraysSource()}. E.g. a counting\n   * request will probably return the value of the category from\n   * {@link FacetArrays#getIntArray()} while an average-weighting request will\n   * compute the value using both arrays.\n   * \n   * @param arrays\n   *          the arrays used to aggregate the categories weights.\n   * @param ordinal\n   *          the category ordinal for which to return the weight.\n   */\n  // TODO perhaps instead of getValueOf we can have a postProcess(FacetArrays)\n  // That, together with getFacetArraysSource should allow ResultHandlers to\n  // efficiently obtain the values from the arrays directly\n  public abstract double getValueOf(FacetArrays arrays, int ordinal);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#getValueOf(FacetArrays,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Return the value of a category used for facets computations for this\n   * request. For a count request this would be the count for that facet, i.e.\n   * an integer number. but for other requests this can be the result of a more\n   * complex operation, and the result can be any double precision number.\n   * Having this method with a general name <b>value</b> which is double\n   * precision allows to have more compact API and code for handling counts and\n   * perhaps other requests (such as for associations) very similarly, and by\n   * the same code and API, avoiding code duplication.\n   * \n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param idx\n   *          an index into the count arrays now in effect in\n   *          <code>arrays</code>. E.g., for ordinal number <i>n</i>, with\n   *          partition, of size <i>partitionSize</i>, now covering <i>n</i>,\n   *          <code>getValueOf</code> would be invoked with <code>idx</code>\n   *          being <i>n</i> % <i>partitionSize</i>.\n   */\n  // TODO perhaps instead of getValueOf we can have a postProcess(FacetArrays)\n  // That, together with getFacetArraysSource should allow ResultHandlers to\n  // efficiently obtain the values from the arrays directly\n  public abstract double getValueOf(FacetArrays arrays, int idx);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b1c67b5eba853532b31132bf5aef70a3b2be63f":["d7e774da82c7db7701e3fb9b13910a57e7296d0f"],"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["607428da722dcb3e86bbd11c63de8986e6275c36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b1c67b5eba853532b31132bf5aef70a3b2be63f"],"d7e774da82c7db7701e3fb9b13910a57e7296d0f":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"3b1c67b5eba853532b31132bf5aef70a3b2be63f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"607428da722dcb3e86bbd11c63de8986e6275c36":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d7e774da82c7db7701e3fb9b13910a57e7296d0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"d7e774da82c7db7701e3fb9b13910a57e7296d0f":["3b1c67b5eba853532b31132bf5aef70a3b2be63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}