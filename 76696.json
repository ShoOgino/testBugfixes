{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readNumericEntry(FieldInfo,IndexInput).mjava","commits":[{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readNumericEntry(FieldInfo,IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  private NumericEntry readNumericEntry(FieldInfo info, IndexInput meta) throws IOException {\n    NumericEntry entry = new NumericEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    if (entry.format == SPARSE_COMPRESSED) {\n      // sparse bits need a bit more metadata\n      entry.numDocsWithValue = meta.readVLong();\n      final int blockShift = meta.readVInt();\n      entry.monotonicMeta = DirectMonotonicReader.loadMeta(meta, entry.numDocsWithValue, blockShift);\n      ramBytesUsed.addAndGet(entry.monotonicMeta.ramBytesUsed());\n      directAddressesMeta.put(info.name, entry.monotonicMeta);\n    }\n    entry.offset = meta.readLong();\n    entry.count = meta.readVLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n        entry.minValue = meta.readLong();\n        if (entry.count > Integer.MAX_VALUE) {\n          // currently just a limitation e.g. of bits interface and so on.\n          throw new CorruptIndexException(\"illegal CONST_COMPRESSED count: \" + entry.count, meta);\n        }\n        break;\n      case GCD_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.gcd = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case TABLE_COMPRESSED:\n        final int uniqueValues = meta.readVInt();\n        if (uniqueValues > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + uniqueValues, meta);\n        }\n        entry.table = new long[uniqueValues];\n        for (int i = 0; i < uniqueValues; ++i) {\n          entry.table[i] = meta.readLong();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case DELTA_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case MONOTONIC_COMPRESSED:\n        final int blockShift = meta.readVInt();\n        entry.monotonicMeta = DirectMonotonicReader.loadMeta(meta, maxDoc + 1, blockShift);\n        ramBytesUsed.addAndGet(entry.monotonicMeta.ramBytesUsed());\n        directAddressesMeta.put(info.name, entry.monotonicMeta);\n        break;\n      case SPARSE_COMPRESSED:\n        final byte numberType = meta.readByte();\n        switch (numberType) {\n          case 0:\n            entry.numberType = NumberType.VALUE;\n            break;\n          case 1:\n            entry.numberType = NumberType.ORDINAL;\n            break;\n          default:\n            throw new CorruptIndexException(\"Number type can only be 0 or 1, got=\" + numberType, meta);\n        }\n\n        // now read the numeric entry for non-missing values\n        final int fieldNumber = meta.readVInt();\n        if (fieldNumber != info.number) {\n          throw new CorruptIndexException(\"Field numbers mistmatch: \" + fieldNumber + \" != \" + info.number, meta);\n        }\n        final int dvFormat = meta.readByte();\n        if (dvFormat != NUMERIC) {\n          throw new CorruptIndexException(\"Formats mistmatch: \" + dvFormat + \" != \" + NUMERIC, meta);\n        }\n        entry.nonMissingValues = readNumericEntry(info, meta);\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\", meta);\n    }\n    entry.endOffset = meta.readLong();\n    return entry;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readNumericEntry(FieldInfo,IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  private NumericEntry readNumericEntry(FieldInfo info, IndexInput meta) throws IOException {\n    NumericEntry entry = new NumericEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    if (entry.format == SPARSE_COMPRESSED) {\n      // sparse bits need a bit more metadata\n      entry.numDocsWithValue = meta.readVLong();\n      final int blockShift = meta.readVInt();\n      entry.monotonicMeta = DirectMonotonicReader.loadMeta(meta, entry.numDocsWithValue, blockShift);\n      ramBytesUsed.addAndGet(entry.monotonicMeta.ramBytesUsed());\n      directAddressesMeta.put(info.name, entry.monotonicMeta);\n    }\n    entry.offset = meta.readLong();\n    entry.count = meta.readVLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n        entry.minValue = meta.readLong();\n        if (entry.count > Integer.MAX_VALUE) {\n          // currently just a limitation e.g. of bits interface and so on.\n          throw new CorruptIndexException(\"illegal CONST_COMPRESSED count: \" + entry.count, meta);\n        }\n        break;\n      case GCD_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.gcd = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case TABLE_COMPRESSED:\n        final int uniqueValues = meta.readVInt();\n        if (uniqueValues > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + uniqueValues, meta);\n        }\n        entry.table = new long[uniqueValues];\n        for (int i = 0; i < uniqueValues; ++i) {\n          entry.table[i] = meta.readLong();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case DELTA_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case MONOTONIC_COMPRESSED:\n        final int blockShift = meta.readVInt();\n        entry.monotonicMeta = DirectMonotonicReader.loadMeta(meta, maxDoc + 1, blockShift);\n        ramBytesUsed.addAndGet(entry.monotonicMeta.ramBytesUsed());\n        directAddressesMeta.put(info.name, entry.monotonicMeta);\n        break;\n      case SPARSE_COMPRESSED:\n        final byte numberType = meta.readByte();\n        switch (numberType) {\n          case 0:\n            entry.numberType = NumberType.VALUE;\n            break;\n          case 1:\n            entry.numberType = NumberType.ORDINAL;\n            break;\n          default:\n            throw new CorruptIndexException(\"Number type can only be 0 or 1, got=\" + numberType, meta);\n        }\n\n        // now read the numeric entry for non-missing values\n        final int fieldNumber = meta.readVInt();\n        if (fieldNumber != info.number) {\n          throw new CorruptIndexException(\"Field numbers mistmatch: \" + fieldNumber + \" != \" + info.number, meta);\n        }\n        final int dvFormat = meta.readByte();\n        if (dvFormat != NUMERIC) {\n          throw new CorruptIndexException(\"Formats mistmatch: \" + dvFormat + \" != \" + NUMERIC, meta);\n        }\n        entry.nonMissingValues = readNumericEntry(info, meta);\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\", meta);\n    }\n    entry.endOffset = meta.readLong();\n    return entry;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#readNumericEntry(FieldInfo,IndexInput).mjava","sourceNew":null,"sourceOld":"  private NumericEntry readNumericEntry(FieldInfo info, IndexInput meta) throws IOException {\n    NumericEntry entry = new NumericEntry();\n    entry.format = meta.readVInt();\n    entry.missingOffset = meta.readLong();\n    if (entry.format == SPARSE_COMPRESSED) {\n      // sparse bits need a bit more metadata\n      entry.numDocsWithValue = meta.readVLong();\n      final int blockShift = meta.readVInt();\n      entry.monotonicMeta = DirectMonotonicReader.loadMeta(meta, entry.numDocsWithValue, blockShift);\n      ramBytesUsed.addAndGet(entry.monotonicMeta.ramBytesUsed());\n      directAddressesMeta.put(info.name, entry.monotonicMeta);\n    }\n    entry.offset = meta.readLong();\n    entry.count = meta.readVLong();\n    switch(entry.format) {\n      case CONST_COMPRESSED:\n        entry.minValue = meta.readLong();\n        if (entry.count > Integer.MAX_VALUE) {\n          // currently just a limitation e.g. of bits interface and so on.\n          throw new CorruptIndexException(\"illegal CONST_COMPRESSED count: \" + entry.count, meta);\n        }\n        break;\n      case GCD_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.gcd = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case TABLE_COMPRESSED:\n        final int uniqueValues = meta.readVInt();\n        if (uniqueValues > 256) {\n          throw new CorruptIndexException(\"TABLE_COMPRESSED cannot have more than 256 distinct values, got=\" + uniqueValues, meta);\n        }\n        entry.table = new long[uniqueValues];\n        for (int i = 0; i < uniqueValues; ++i) {\n          entry.table[i] = meta.readLong();\n        }\n        ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(entry.table));\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case DELTA_COMPRESSED:\n        entry.minValue = meta.readLong();\n        entry.bitsPerValue = meta.readVInt();\n        break;\n      case MONOTONIC_COMPRESSED:\n        final int blockShift = meta.readVInt();\n        entry.monotonicMeta = DirectMonotonicReader.loadMeta(meta, maxDoc + 1, blockShift);\n        ramBytesUsed.addAndGet(entry.monotonicMeta.ramBytesUsed());\n        directAddressesMeta.put(info.name, entry.monotonicMeta);\n        break;\n      case SPARSE_COMPRESSED:\n        final byte numberType = meta.readByte();\n        switch (numberType) {\n          case 0:\n            entry.numberType = NumberType.VALUE;\n            break;\n          case 1:\n            entry.numberType = NumberType.ORDINAL;\n            break;\n          default:\n            throw new CorruptIndexException(\"Number type can only be 0 or 1, got=\" + numberType, meta);\n        }\n\n        // now read the numeric entry for non-missing values\n        final int fieldNumber = meta.readVInt();\n        if (fieldNumber != info.number) {\n          throw new CorruptIndexException(\"Field numbers mistmatch: \" + fieldNumber + \" != \" + info.number, meta);\n        }\n        final int dvFormat = meta.readByte();\n        if (dvFormat != NUMERIC) {\n          throw new CorruptIndexException(\"Formats mistmatch: \" + dvFormat + \" != \" + NUMERIC, meta);\n        }\n        entry.nonMissingValues = readNumericEntry(info, meta);\n        break;\n      default:\n        throw new CorruptIndexException(\"Unknown format: \" + entry.format + \", input=\", meta);\n    }\n    entry.endOffset = meta.readLong();\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","084884d4602f4d1c7411eab29e897e349ce62675"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"084884d4602f4d1c7411eab29e897e349ce62675":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1967bed916cc89da82a1c2085f27976da6d08cbd","084884d4602f4d1c7411eab29e897e349ce62675"],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}