{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertPivotCountsAreCorrect(String,SolrParams,PivotField).mjava","commits":[{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertPivotCountsAreCorrect(String,SolrParams,PivotField).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Recursive Helper method for asserting that pivot constraint counds match\n   * results when filtering on those constraints. Returns the recursive depth reached \n   * (for sanity checking)\n   */\n  private int assertPivotCountsAreCorrect(String pivotName,\n                                          SolrParams baseParams, \n                                          PivotField constraint) \n    throws SolrServerException {\n\n    SolrParams p = SolrParams.wrapAppended(baseParams,\n                                           params(\"fq\", buildFilter(constraint)));\n    List<PivotField> subPivots = null;\n    try {\n      assertNumFound(pivotName, constraint.getCount(), p);\n      subPivots = constraint.getPivot();\n    } catch (Exception e) {\n      throw new RuntimeException(pivotName + \": count query failed: \" + p + \": \" + \n                                 e.getMessage(), e);\n    }\n    int depth = 0;\n    if (null != subPivots) {\n      assertTraceOk(pivotName, baseParams, subPivots);\n\n      for (PivotField subPivot : subPivots) {\n        depth = assertPivotCountsAreCorrect(pivotName, p, subPivot);\n      }\n    }\n    return depth + 1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6e16ac6ee5e1ecac62d077497026318777ef3f63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c18a95e9168a30be855f5d5e7d61a863186fdc5","date":1415142581,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertPivotCountsAreCorrect(String,SolrParams,PivotField).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertPivotCountsAreCorrect(String,SolrParams,PivotField).mjava","sourceNew":"  /**\n   * Recursive Helper method for asserting that pivot constraint counds match\n   * results when filtering on those constraints. Returns the recursive depth reached \n   * (for sanity checking)\n   */\n  private int assertPivotCountsAreCorrect(String pivotName,\n                                          SolrParams baseParams, \n                                          PivotField constraint) \n    throws SolrServerException {\n\n    SolrParams p = SolrParams.wrapAppended(baseParams,\n                                           params(\"fq\", buildFilter(constraint)));\n    List<PivotField> subPivots = null;\n    try {\n      assertPivotData(pivotName, constraint, p); \n      subPivots = constraint.getPivot();\n    } catch (Exception e) {\n      throw new RuntimeException(pivotName + \": count query failed: \" + p + \": \" + \n                                 e.getMessage(), e);\n    }\n    int depth = 0;\n    if (null != subPivots) {\n      assertTraceOk(pivotName, baseParams, subPivots);\n\n      for (PivotField subPivot : subPivots) {\n        depth = assertPivotCountsAreCorrect(pivotName, p, subPivot);\n      }\n    }\n    return depth + 1;\n  }\n\n","sourceOld":"  /**\n   * Recursive Helper method for asserting that pivot constraint counds match\n   * results when filtering on those constraints. Returns the recursive depth reached \n   * (for sanity checking)\n   */\n  private int assertPivotCountsAreCorrect(String pivotName,\n                                          SolrParams baseParams, \n                                          PivotField constraint) \n    throws SolrServerException {\n\n    SolrParams p = SolrParams.wrapAppended(baseParams,\n                                           params(\"fq\", buildFilter(constraint)));\n    List<PivotField> subPivots = null;\n    try {\n      assertNumFound(pivotName, constraint.getCount(), p);\n      subPivots = constraint.getPivot();\n    } catch (Exception e) {\n      throw new RuntimeException(pivotName + \": count query failed: \" + p + \": \" + \n                                 e.getMessage(), e);\n    }\n    int depth = 0;\n    if (null != subPivots) {\n      assertTraceOk(pivotName, baseParams, subPivots);\n\n      for (PivotField subPivot : subPivots) {\n        depth = assertPivotCountsAreCorrect(pivotName, p, subPivot);\n      }\n    }\n    return depth + 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e16ac6ee5e1ecac62d077497026318777ef3f63","date":1440707333,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertPivotCountsAreCorrect(String,SolrParams,PivotField).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#assertPivotCountsAreCorrect(String,SolrParams,PivotField).mjava","sourceNew":"  /**\n   * Recursive Helper method for asserting that pivot constraint counts match\n   * results when filtering on those constraints. Returns the recursive depth reached \n   * (for sanity checking)\n   */\n  private int assertPivotCountsAreCorrect(String pivotName,\n                                          SolrParams baseParams, \n                                          PivotField constraint) \n    throws SolrServerException {\n\n    SolrParams p = SolrParams.wrapAppended(baseParams,\n                                           params(\"fq\", buildFilter(constraint)));\n    List<PivotField> subPivots = null;\n    try {\n      assertPivotData(pivotName, constraint, p); \n      subPivots = constraint.getPivot();\n    } catch (Exception e) {\n      throw new RuntimeException(pivotName + \": count query failed: \" + p + \": \" + \n                                 e.getMessage(), e);\n    }\n    int depth = 0;\n    if (null != subPivots) {\n      assertTraceOk(pivotName, baseParams, subPivots);\n\n      for (PivotField subPivot : subPivots) {\n        depth = assertPivotCountsAreCorrect(pivotName, p, subPivot);\n      }\n    }\n    return depth + 1;\n  }\n\n","sourceOld":"  /**\n   * Recursive Helper method for asserting that pivot constraint counds match\n   * results when filtering on those constraints. Returns the recursive depth reached \n   * (for sanity checking)\n   */\n  private int assertPivotCountsAreCorrect(String pivotName,\n                                          SolrParams baseParams, \n                                          PivotField constraint) \n    throws SolrServerException {\n\n    SolrParams p = SolrParams.wrapAppended(baseParams,\n                                           params(\"fq\", buildFilter(constraint)));\n    List<PivotField> subPivots = null;\n    try {\n      assertPivotData(pivotName, constraint, p); \n      subPivots = constraint.getPivot();\n    } catch (Exception e) {\n      throw new RuntimeException(pivotName + \": count query failed: \" + p + \": \" + \n                                 e.getMessage(), e);\n    }\n    int depth = 0;\n    if (null != subPivots) {\n      assertTraceOk(pivotName, baseParams, subPivots);\n\n      for (PivotField subPivot : subPivots) {\n        depth = assertPivotCountsAreCorrect(pivotName, p, subPivot);\n      }\n    }\n    return depth + 1;\n  }\n\n","bugFix":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e16ac6ee5e1ecac62d077497026318777ef3f63":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e16ac6ee5e1ecac62d077497026318777ef3f63"]},"commit2Childs":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["6e16ac6ee5e1ecac62d077497026318777ef3f63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"6e16ac6ee5e1ecac62d077497026318777ef3f63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}