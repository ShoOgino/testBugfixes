{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getReplicaInfo(Replica).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getReplicaInfo(Replica).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getReplicaInfo(Replica).mjava","sourceNew":"  private ReplicaInfo getReplicaInfo(Replica r) {\n    final List<ReplicaInfo> list = nodeReplicaMap.computeIfAbsent\n      (r.getNodeName(), Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    synchronized (list) {\n      for (ReplicaInfo ri : list) {\n        if (r.getCoreName().equals(ri.getCore())) {\n          return ri;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private ReplicaInfo getReplicaInfo(Replica r) {\n    final List<ReplicaInfo> list = nodeReplicaMap.computeIfAbsent\n      (r.getNodeName(), Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    synchronized (list) {\n      for (ReplicaInfo ri : list) {\n        if (r.getCoreName().equals(ri.getCore())) {\n          return ri;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getReplicaInfo(Replica).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getReplicaInfo(Replica).mjava","sourceNew":"  private ReplicaInfo getReplicaInfo(Replica r) {\n    final List<ReplicaInfo> list = nodeReplicaMap.computeIfAbsent\n      (r.getNodeName(), Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    synchronized (list) {\n      for (ReplicaInfo ri : list) {\n        if (r.getCoreName().equals(ri.getCore()) && r.getName().equals(ri.getName())) {\n          return ri;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private ReplicaInfo getReplicaInfo(Replica r) {\n    final List<ReplicaInfo> list = nodeReplicaMap.computeIfAbsent\n      (r.getNodeName(), Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    synchronized (list) {\n      for (ReplicaInfo ri : list) {\n        if (r.getCoreName().equals(ri.getCore())) {\n          return ri;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getReplicaInfo(Replica).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getReplicaInfo(Replica).mjava","sourceNew":"  private ReplicaInfo getReplicaInfo(Replica r) {\n    @SuppressWarnings({\"unchecked\"})\n    final List<ReplicaInfo> list = nodeReplicaMap.computeIfAbsent\n      (r.getNodeName(), Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    synchronized (list) {\n      for (ReplicaInfo ri : list) {\n        if (r.getCoreName().equals(ri.getCore()) && r.getName().equals(ri.getName())) {\n          return ri;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private ReplicaInfo getReplicaInfo(Replica r) {\n    final List<ReplicaInfo> list = nodeReplicaMap.computeIfAbsent\n      (r.getNodeName(), Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    synchronized (list) {\n      for (ReplicaInfo ri : list) {\n        if (r.getCoreName().equals(ri.getCore()) && r.getName().equals(ri.getName())) {\n          return ri;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getReplicaInfo(Replica).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getReplicaInfo(Replica).mjava","sourceNew":"  private Replica getReplicaInfo(Replica r) {\n    @SuppressWarnings({\"unchecked\"})\n    final List<Replica> list = nodeReplicaMap.computeIfAbsent\n      (r.getNodeName(), Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    synchronized (list) {\n      for (Replica ri : list) {\n        if (r.getCoreName().equals(ri.getCoreName()) && r.getName().equals(ri.getName())) {\n          return ri;\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private ReplicaInfo getReplicaInfo(Replica r) {\n    @SuppressWarnings({\"unchecked\"})\n    final List<ReplicaInfo> list = nodeReplicaMap.computeIfAbsent\n      (r.getNodeName(), Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    synchronized (list) {\n      for (ReplicaInfo ri : list) {\n        if (r.getCoreName().equals(ri.getCore()) && r.getName().equals(ri.getName())) {\n          return ri;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#getReplicaInfo(Replica).mjava","sourceNew":null,"sourceOld":"  private Replica getReplicaInfo(Replica r) {\n    @SuppressWarnings({\"unchecked\"})\n    final List<Replica> list = nodeReplicaMap.computeIfAbsent\n      (r.getNodeName(), Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n    synchronized (list) {\n      for (Replica ri : list) {\n        if (r.getCoreName().equals(ri.getCoreName()) && r.getName().equals(ri.getName())) {\n          return ri;\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edf5b262a72d10530eb2f01dc8f19060355b213e":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}