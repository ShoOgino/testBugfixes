{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeXDL(boolean,Query).mjava","commits":[{"id":"0415a016b37e58a017fed0a91234f733ab359971","date":1341458183,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeXDL(boolean,Query).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeXDL(boolean,Query,BBoxFieldInfo).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that do or do not cross the date line\n   * and match the supplied spatial query.\n   *\n   * @param crossedDateLine <code>true</true> for documents that cross the date line\n   * @param query the spatial query\n   * @return the query\n   */\n  Query makeXDL(boolean crossedDateLine, Query query) {\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(this.makeXDL(crossedDateLine), BooleanClause.Occur.MUST);\n    bq.add(query, BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that do or do not cross the date line\n   * and match the supplied spatial query.\n   *\n   * @param crossedDateLine <code>true</true> for documents that cross the date line\n   * @param query the spatial query\n   * @return the query\n   */\n  Query makeXDL(boolean crossedDateLine, Query query, BBoxFieldInfo fieldInfo) {\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(this.makeXDL(crossedDateLine, fieldInfo), BooleanClause.Occur.MUST);\n    bq.add(query, BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeXDL(boolean,Query).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a query to retrieve documents that do or do not cross the date line\n   * and match the supplied spatial query.\n   *\n   * @param crossedDateLine <code>true</true> for documents that cross the date line\n   * @param query the spatial query\n   * @return the query\n   */\n  Query makeXDL(boolean crossedDateLine, Query query) {\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(this.makeXDL(crossedDateLine), BooleanClause.Occur.MUST);\n    bq.add(query, BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018","date":1404828935,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeXDL(boolean,Query).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeXDL(boolean,Query).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that do or do not cross the date line\n   * and match the supplied spatial query.\n   *\n   * @param crossedDateLine <code>true</true> for documents that cross the date line\n   * @param query the spatial query\n   * @return the query\n   */\n  private Query makeXDL(boolean crossedDateLine, Query query) {\n    if (!ctx.isGeo()) {\n      assert !crossedDateLine;\n      return query;\n    }\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(this.makeXDL(crossedDateLine), BooleanClause.Occur.MUST);\n    bq.add(query, BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that do or do not cross the date line\n   * and match the supplied spatial query.\n   *\n   * @param crossedDateLine <code>true</true> for documents that cross the date line\n   * @param query the spatial query\n   * @return the query\n   */\n  Query makeXDL(boolean crossedDateLine, Query query) {\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(this.makeXDL(crossedDateLine), BooleanClause.Occur.MUST);\n    bq.add(query, BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeXDL(boolean,Query).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeXDL(boolean,Query).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that do or do not cross the date line\n   * and match the supplied spatial query.\n   *\n   * @param crossedDateLine <code>true</true> for documents that cross the date line\n   * @param query the spatial query\n   * @return the query\n   */\n  private Query makeXDL(boolean crossedDateLine, Query query) {\n    if (!ctx.isGeo()) {\n      assert !crossedDateLine;\n      return query;\n    }\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(this.makeXDL(crossedDateLine), BooleanClause.Occur.MUST);\n    bq.add(query, BooleanClause.Occur.MUST);\n    return bq.build();\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that do or do not cross the date line\n   * and match the supplied spatial query.\n   *\n   * @param crossedDateLine <code>true</true> for documents that cross the date line\n   * @param query the spatial query\n   * @return the query\n   */\n  private Query makeXDL(boolean crossedDateLine, Query query) {\n    if (!ctx.isGeo()) {\n      assert !crossedDateLine;\n      return query;\n    }\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(this.makeXDL(crossedDateLine), BooleanClause.Occur.MUST);\n    bq.add(query, BooleanClause.Occur.MUST);\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeXDL(boolean,Query).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeXDL(boolean,Query).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that do or do not cross the date line\n   * and match the supplied spatial query.\n   *\n   * @param crossedDateLine <code>true</true> for documents that cross the date line\n   * @param query the spatial query\n   * @return the query\n   */\n  private Query makeXDL(boolean crossedDateLine, Query query) {\n    if (!ctx.isGeo()) {\n      assert !crossedDateLine;\n      return query;\n    }\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(this.makeXDL(crossedDateLine), BooleanClause.Occur.MUST);\n    bq.add(query, BooleanClause.Occur.MUST);\n    return bq.build();\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that do or do not cross the date line\n   * and match the supplied spatial query.\n   *\n   * @param crossedDateLine <code>true</true> for documents that cross the date line\n   * @param query the spatial query\n   * @return the query\n   */\n  private Query makeXDL(boolean crossedDateLine, Query query) {\n    if (!ctx.isGeo()) {\n      assert !crossedDateLine;\n      return query;\n    }\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(this.makeXDL(crossedDateLine), BooleanClause.Occur.MUST);\n    bq.add(query, BooleanClause.Occur.MUST);\n    return bq.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeXDL(boolean,Query).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeXDL(boolean,Query).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that do or do not cross the date line\n   * and match the supplied spatial query.\n   *\n   * @param crossedDateLine <code>true</true> for documents that cross the date line\n   * @param query the spatial query\n   * @return the query\n   */\n  private Query makeXDL(boolean crossedDateLine, Query query) {\n    if (!ctx.isGeo()) {\n      assert !crossedDateLine;\n      return query;\n    }\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(this.makeXDL(crossedDateLine), BooleanClause.Occur.MUST);\n    bq.add(query, BooleanClause.Occur.MUST);\n    return bq.build();\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that do or do not cross the date line\n   * and match the supplied spatial query.\n   *\n   * @param crossedDateLine <code>true</true> for documents that cross the date line\n   * @param query the spatial query\n   * @return the query\n   */\n  private Query makeXDL(boolean crossedDateLine, Query query) {\n    if (!ctx.isGeo()) {\n      assert !crossedDateLine;\n      return query;\n    }\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(this.makeXDL(crossedDateLine), BooleanClause.Occur.MUST);\n    bq.add(query, BooleanClause.Occur.MUST);\n    return bq.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0415a016b37e58a017fed0a91234f733ab359971":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018"],"af2638813028b254a88b418ebeafb541afb49653":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","112d77ac8d3e10a362516ad834c9a11d35c94234"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0415a016b37e58a017fed0a91234f733ab359971"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018":["0415a016b37e58a017fed0a91234f733ab359971"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"0415a016b37e58a017fed0a91234f733ab359971":["fe33227f6805edab2036cbb80645cc4e2d1fa424","1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0415a016b37e58a017fed0a91234f733ab359971","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"1eb9cd4e9d9dc2a301efb4dc420fcb069a9dd018":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}