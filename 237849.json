{"path":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoEncoder#sufficientlySmallerThanBitSet(long,long).mjava","commits":[{"id":"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c","date":1373406544,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoEncoder#sufficientlySmallerThanBitSet(long,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Provide an indication that is better to use an {@link EliasFanoEncoder} than a {@link FixedBitSet}\n   *  to encode document identifiers.\n   *  This indication is not precise and may change in the future.\n   *  <br>An EliasFanoEncoder is favoured when the size of the encoding by the EliasFanoEncoder\n   *  is at most 5/6 of the size of the FixedBitSet.\n   *  <br>This condition is the same as comparing estimates of the number of bits accessed by a pair of FixedBitSets and\n   *  by a pair of non indexed EliasFanoDocIdSets when determining the intersections of the pairs.\n   *  @param numValues The number of document identifiers that is to be encoded. Should be non negative.\n   *  @param upperBound The maximum possible value for a document identifier. Should be at least numValues.\n   */\n  public static boolean sufficientlySmallerThanBitSet(long numValues, long upperBound) {\n    /* When (upperBound / 6) == numValues,\n     * the number of bits per entry for the EliasFanoEncoder is 2 + ceil(2log(upperBound/numValues)) == 5.\n     */\n    /* For intersecting two bit sets upperBound bits are accessed, roughly half of one, half of the other.\n     * For intersecting two EliasFano sequences without index on the upper bits,\n     * all (2 * 3 * numValues) upper bits are accessed.\n     */\n    return (upperBound / 6) > numValues;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoEncoder#sufficientlySmallerThanBitSet(long,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Provide an indication that is better to use an {@link EliasFanoEncoder} than a {@link FixedBitSet}\n   *  to encode document identifiers.\n   *  This indication is not precise and may change in the future.\n   *  <br>An EliasFanoEncoder is favoured when the size of the encoding by the EliasFanoEncoder\n   *  is at most 5/6 of the size of the FixedBitSet.\n   *  <br>This condition is the same as comparing estimates of the number of bits accessed by a pair of FixedBitSets and\n   *  by a pair of non indexed EliasFanoDocIdSets when determining the intersections of the pairs.\n   *  @param numValues The number of document identifiers that is to be encoded. Should be non negative.\n   *  @param upperBound The maximum possible value for a document identifier. Should be at least numValues.\n   */\n  public static boolean sufficientlySmallerThanBitSet(long numValues, long upperBound) {\n    /* When (upperBound / 6) == numValues,\n     * the number of bits per entry for the EliasFanoEncoder is 2 + ceil(2log(upperBound/numValues)) == 5.\n     */\n    /* For intersecting two bit sets upperBound bits are accessed, roughly half of one, half of the other.\n     * For intersecting two EliasFano sequences without index on the upper bits,\n     * all (2 * 3 * numValues) upper bits are accessed.\n     */\n    return (upperBound / 6) > numValues;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"423470dff9e19aa0db92590e282e2ca12e34d65a","date":1381851051,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoEncoder#sufficientlySmallerThanBitSet(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoEncoder#sufficientlySmallerThanBitSet(long,long).mjava","sourceNew":"  /** Provide an indication that it is better to use an {@link EliasFanoEncoder} than a {@link FixedBitSet}\n   *  to encode document identifiers.\n   *  This indication is not precise and may change in the future.\n   *  <br>An EliasFanoEncoder is favoured when the size of the encoding by the EliasFanoEncoder\n   *  (including some space for its index) is at most about 5/6 of the size of the FixedBitSet,\n   *  this is the same as comparing estimates of the number of bits accessed by a pair of FixedBitSets and\n   *  by a pair of non indexed EliasFanoDocIdSets when determining the intersections of the pairs.\n   *  <br>A bit set is preferred when <code>upperbound <= 256</code>.\n   *  <br>It is assumed that {@link #DEFAULT_INDEX_INTERVAL} is used.\n   *  @param numValues The number of document identifiers that is to be encoded. Should be non negative.\n   *  @param upperBound The maximum possible value for a document identifier. Should be at least <code>numValues</code>.\n   */\n  public static boolean sufficientlySmallerThanBitSet(long numValues, long upperBound) {\n    /* When (upperBound / 6) == numValues,\n     * the number of bits per entry for the EliasFanoEncoder is 2 + ceil(2log(upperBound/numValues)) == 5.\n     *\n     * For intersecting two bit sets upperBound bits are accessed, roughly half of one, half of the other.\n     * For intersecting two EliasFano sequences without index on the upper bits,\n     * all (2 * 3 * numValues) upper bits are accessed.\n     */\n    return (upperBound > (4 * Long.SIZE)) // prefer a bit set when it takes no more than 4 longs.\n            && (upperBound / 7) > numValues; // 6 + 1 to allow some room for the index.\n  }\n\n","sourceOld":"  /** Provide an indication that is better to use an {@link EliasFanoEncoder} than a {@link FixedBitSet}\n   *  to encode document identifiers.\n   *  This indication is not precise and may change in the future.\n   *  <br>An EliasFanoEncoder is favoured when the size of the encoding by the EliasFanoEncoder\n   *  is at most 5/6 of the size of the FixedBitSet.\n   *  <br>This condition is the same as comparing estimates of the number of bits accessed by a pair of FixedBitSets and\n   *  by a pair of non indexed EliasFanoDocIdSets when determining the intersections of the pairs.\n   *  @param numValues The number of document identifiers that is to be encoded. Should be non negative.\n   *  @param upperBound The maximum possible value for a document identifier. Should be at least numValues.\n   */\n  public static boolean sufficientlySmallerThanBitSet(long numValues, long upperBound) {\n    /* When (upperBound / 6) == numValues,\n     * the number of bits per entry for the EliasFanoEncoder is 2 + ceil(2log(upperBound/numValues)) == 5.\n     */\n    /* For intersecting two bit sets upperBound bits are accessed, roughly half of one, half of the other.\n     * For intersecting two EliasFano sequences without index on the upper bits,\n     * all (2 * 3 * numValues) upper bits are accessed.\n     */\n    return (upperBound / 6) > numValues;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoEncoder#sufficientlySmallerThanBitSet(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoEncoder#sufficientlySmallerThanBitSet(long,long).mjava","sourceNew":"  /** Provide an indication that it is better to use an {@link EliasFanoEncoder} than a {@link FixedBitSet}\n   *  to encode document identifiers.\n   *  This indication is not precise and may change in the future.\n   *  <br>An EliasFanoEncoder is favoured when the size of the encoding by the EliasFanoEncoder\n   *  (including some space for its index) is at most about 5/6 of the size of the FixedBitSet,\n   *  this is the same as comparing estimates of the number of bits accessed by a pair of FixedBitSets and\n   *  by a pair of non indexed EliasFanoDocIdSets when determining the intersections of the pairs.\n   *  <br>A bit set is preferred when {@code upperbound <= 256}.\n   *  <br>It is assumed that {@link #DEFAULT_INDEX_INTERVAL} is used.\n   *  @param numValues The number of document identifiers that is to be encoded. Should be non negative.\n   *  @param upperBound The maximum possible value for a document identifier. Should be at least <code>numValues</code>.\n   */\n  public static boolean sufficientlySmallerThanBitSet(long numValues, long upperBound) {\n    /* When (upperBound / 6) == numValues,\n     * the number of bits per entry for the EliasFanoEncoder is 2 + ceil(2log(upperBound/numValues)) == 5.\n     *\n     * For intersecting two bit sets upperBound bits are accessed, roughly half of one, half of the other.\n     * For intersecting two EliasFano sequences without index on the upper bits,\n     * all (2 * 3 * numValues) upper bits are accessed.\n     */\n    return (upperBound > (4 * Long.SIZE)) // prefer a bit set when it takes no more than 4 longs.\n            && (upperBound / 7) > numValues; // 6 + 1 to allow some room for the index.\n  }\n\n","sourceOld":"  /** Provide an indication that it is better to use an {@link EliasFanoEncoder} than a {@link FixedBitSet}\n   *  to encode document identifiers.\n   *  This indication is not precise and may change in the future.\n   *  <br>An EliasFanoEncoder is favoured when the size of the encoding by the EliasFanoEncoder\n   *  (including some space for its index) is at most about 5/6 of the size of the FixedBitSet,\n   *  this is the same as comparing estimates of the number of bits accessed by a pair of FixedBitSets and\n   *  by a pair of non indexed EliasFanoDocIdSets when determining the intersections of the pairs.\n   *  <br>A bit set is preferred when <code>upperbound <= 256</code>.\n   *  <br>It is assumed that {@link #DEFAULT_INDEX_INTERVAL} is used.\n   *  @param numValues The number of document identifiers that is to be encoded. Should be non negative.\n   *  @param upperBound The maximum possible value for a document identifier. Should be at least <code>numValues</code>.\n   */\n  public static boolean sufficientlySmallerThanBitSet(long numValues, long upperBound) {\n    /* When (upperBound / 6) == numValues,\n     * the number of bits per entry for the EliasFanoEncoder is 2 + ceil(2log(upperBound/numValues)) == 5.\n     *\n     * For intersecting two bit sets upperBound bits are accessed, roughly half of one, half of the other.\n     * For intersecting two EliasFano sequences without index on the upper bits,\n     * all (2 * 3 * numValues) upper bits are accessed.\n     */\n    return (upperBound > (4 * Long.SIZE)) // prefer a bit set when it takes no more than 4 longs.\n            && (upperBound / 7) > numValues; // 6 + 1 to allow some room for the index.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"556259cdb46d4f7fb27f4688c4efcb3eaee4a550","date":1432028057,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoEncoder#sufficientlySmallerThanBitSet(long,long).mjava","sourceNew":null,"sourceOld":"  /** Provide an indication that it is better to use an {@link EliasFanoEncoder} than a {@link FixedBitSet}\n   *  to encode document identifiers.\n   *  This indication is not precise and may change in the future.\n   *  <br>An EliasFanoEncoder is favoured when the size of the encoding by the EliasFanoEncoder\n   *  (including some space for its index) is at most about 5/6 of the size of the FixedBitSet,\n   *  this is the same as comparing estimates of the number of bits accessed by a pair of FixedBitSets and\n   *  by a pair of non indexed EliasFanoDocIdSets when determining the intersections of the pairs.\n   *  <br>A bit set is preferred when {@code upperbound <= 256}.\n   *  <br>It is assumed that {@link #DEFAULT_INDEX_INTERVAL} is used.\n   *  @param numValues The number of document identifiers that is to be encoded. Should be non negative.\n   *  @param upperBound The maximum possible value for a document identifier. Should be at least <code>numValues</code>.\n   */\n  public static boolean sufficientlySmallerThanBitSet(long numValues, long upperBound) {\n    /* When (upperBound / 6) == numValues,\n     * the number of bits per entry for the EliasFanoEncoder is 2 + ceil(2log(upperBound/numValues)) == 5.\n     *\n     * For intersecting two bit sets upperBound bits are accessed, roughly half of one, half of the other.\n     * For intersecting two EliasFano sequences without index on the upper bits,\n     * all (2 * 3 * numValues) upper bits are accessed.\n     */\n    return (upperBound > (4 * Long.SIZE)) // prefer a bit set when it takes no more than 4 longs.\n            && (upperBound / 7) > numValues; // 6 + 1 to allow some room for the index.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"556259cdb46d4f7fb27f4688c4efcb3eaee4a550":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"b1eb427f2c6beed80d1724555fc1db003ccf3030":["423470dff9e19aa0db92590e282e2ca12e34d65a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"423470dff9e19aa0db92590e282e2ca12e34d65a":["21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["556259cdb46d4f7fb27f4688c4efcb3eaee4a550"]},"commit2Childs":{"556259cdb46d4f7fb27f4688c4efcb3eaee4a550":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b1eb427f2c6beed80d1724555fc1db003ccf3030":["556259cdb46d4f7fb27f4688c4efcb3eaee4a550"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c":["37a0f60745e53927c4c876cfe5b5a58170f0646c","423470dff9e19aa0db92590e282e2ca12e34d65a"],"423470dff9e19aa0db92590e282e2ca12e34d65a":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}