{"path":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    int retries = 5;\n    for (int i = 0; i < retries; i++) {\n      try {\n        ServerSocket server = new ServerSocket(0);\n        try {\n          port = server.getLocalPort();\n        } finally {\n          server.close();\n        }\n        // System.out.println(\"Using port: \" + port);\n        try {\n          LocateRegistry.createRegistry(port);\n        } catch (RemoteException e) {\n          throw e;\n        }\n        String url = \"service:jmx:rmi:///jndi/rmi://:\" + port + \"/solrjmx\";\n        JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n        monitoredMap = new JmxMonitoredMap<String, SolrInfoMBean>(null, config);\n        JMXServiceURL u = new JMXServiceURL(url);\n        connector = JMXConnectorFactory.connect(u);\n        mbeanServer = connector.getMBeanServerConnection();\n        break;\n      } catch (Exception e) {\n        if(retries == (i + 1)) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    int retries = 5;\n    for (int i = 0; i < retries; i++) {\n      try {\n        ServerSocket server = new ServerSocket(0);\n        try {\n          port = server.getLocalPort();\n        } finally {\n          server.close();\n        }\n        // System.out.println(\"Using port: \" + port);\n        try {\n          LocateRegistry.createRegistry(port);\n        } catch (RemoteException e) {\n          throw e;\n        }\n        String url = \"service:jmx:rmi:///jndi/rmi://:\" + port + \"/solrjmx\";\n        JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n        monitoredMap = new JmxMonitoredMap<String, SolrInfoMBean>(null, config);\n        JMXServiceURL u = new JMXServiceURL(url);\n        connector = JMXConnectorFactory.connect(u);\n        mbeanServer = connector.getMBeanServerConnection();\n        break;\n      } catch (Exception e) {\n        if(retries == (i + 1)) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    int retries = 5;\n    for (int i = 0; i < retries; i++) {\n      try {\n        ServerSocket server = new ServerSocket(0);\n        try {\n          port = server.getLocalPort();\n        } finally {\n          server.close();\n        }\n        // System.out.println(\"Using port: \" + port);\n        try {\n          LocateRegistry.createRegistry(port);\n        } catch (RemoteException e) {\n          throw e;\n        }\n        String url = \"service:jmx:rmi:///jndi/rmi://:\" + port + \"/solrjmx\";\n        JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n        monitoredMap = new JmxMonitoredMap<String, SolrInfoMBean>(null, config);\n        JMXServiceURL u = new JMXServiceURL(url);\n        connector = JMXConnectorFactory.connect(u);\n        mbeanServer = connector.getMBeanServerConnection();\n        break;\n      } catch (Exception e) {\n        if(retries == (i + 1)) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    int retries = 5;\n    for (int i = 0; i < retries; i++) {\n      try {\n        ServerSocket server = new ServerSocket(0);\n        try {\n          port = server.getLocalPort();\n        } finally {\n          server.close();\n        }\n        // System.out.println(\"Using port: \" + port);\n        try {\n          LocateRegistry.createRegistry(port);\n        } catch (RemoteException e) {\n          throw e;\n        }\n        String url = \"service:jmx:rmi:///jndi/rmi://:\" + port + \"/solrjmx\";\n        JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n        monitoredMap = new JmxMonitoredMap<String, SolrInfoMBean>(null, config);\n        JMXServiceURL u = new JMXServiceURL(url);\n        connector = JMXConnectorFactory.connect(u);\n        mbeanServer = connector.getMBeanServerConnection();\n        break;\n      } catch (Exception e) {\n        if(retries == (i + 1)) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    int retries = 5;\n    for (int i = 0; i < retries; i++) {\n      try {\n        ServerSocket server = new ServerSocket(0);\n        try {\n          port = server.getLocalPort();\n        } finally {\n          server.close();\n        }\n        // System.out.println(\"Using port: \" + port);\n        try {\n          LocateRegistry.createRegistry(port);\n        } catch (RemoteException e) {\n          throw e;\n        }\n        String url = \"service:jmx:rmi:///jndi/rmi://:\" + port + \"/solrjmx\";\n        JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n        monitoredMap = new JmxMonitoredMap<String, SolrInfoMBean>(null, config);\n        JMXServiceURL u = new JMXServiceURL(url);\n        connector = JMXConnectorFactory.connect(u);\n        mbeanServer = connector.getMBeanServerConnection();\n        break;\n      } catch (Exception e) {\n        if(retries == (i + 1)) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    int retries = 5;\n    for (int i = 0; i < retries; i++) {\n      try {\n        ServerSocket server = new ServerSocket(0);\n        try {\n          port = server.getLocalPort();\n        } finally {\n          server.close();\n        }\n        // System.out.println(\"Using port: \" + port);\n        try {\n          LocateRegistry.createRegistry(port);\n        } catch (RemoteException e) {\n          throw e;\n        }\n        String url = \"service:jmx:rmi:///jndi/rmi://:\" + port + \"/solrjmx\";\n        JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n        monitoredMap = new JmxMonitoredMap<String, SolrInfoMBean>(null, config);\n        JMXServiceURL u = new JMXServiceURL(url);\n        connector = JMXConnectorFactory.connect(u);\n        mbeanServer = connector.getMBeanServerConnection();\n        break;\n      } catch (Exception e) {\n        if(retries == (i + 1)) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb75c13cdf6b27b36407e4b15b35cf3142ab619","date":1310465075,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    int retries = 5;\n    for (int i = 0; i < retries; i++) {\n      try {\n        ServerSocket server = new ServerSocket(0);\n        try {\n          port = server.getLocalPort();\n        } finally {\n          server.close();\n        }\n        // System.out.println(\"Using port: \" + port);\n        try {\n          LocateRegistry.createRegistry(port);\n        } catch (RemoteException e) {\n          throw e;\n        }\n        String url = \"service:jmx:rmi:///jndi/rmi://:\" + port + \"/solrjmx\";\n        JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n        monitoredMap = new JmxMonitoredMap<String, SolrInfoMBean>(\"\", \"\", config);\n        JMXServiceURL u = new JMXServiceURL(url);\n        connector = JMXConnectorFactory.connect(u);\n        mbeanServer = connector.getMBeanServerConnection();\n        break;\n      } catch (Exception e) {\n        if(retries == (i + 1)) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    int retries = 5;\n    for (int i = 0; i < retries; i++) {\n      try {\n        ServerSocket server = new ServerSocket(0);\n        try {\n          port = server.getLocalPort();\n        } finally {\n          server.close();\n        }\n        // System.out.println(\"Using port: \" + port);\n        try {\n          LocateRegistry.createRegistry(port);\n        } catch (RemoteException e) {\n          throw e;\n        }\n        String url = \"service:jmx:rmi:///jndi/rmi://:\" + port + \"/solrjmx\";\n        JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n        monitoredMap = new JmxMonitoredMap<String, SolrInfoMBean>(null, config);\n        JMXServiceURL u = new JMXServiceURL(url);\n        connector = JMXConnectorFactory.connect(u);\n        mbeanServer = connector.getMBeanServerConnection();\n        break;\n      } catch (Exception e) {\n        if(retries == (i + 1)) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e26e75cfb1a17b3f7431fafc9cb3caf5678681a5","date":1336412267,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n\n    super.setUp();\n\n    int retries = 5;\n    for (int i = 0; i < retries; i++) {\n      try {\n        ServerSocket server = new ServerSocket(0);\n        try {\n          port = server.getLocalPort();\n        } finally {\n          server.close();\n        }\n        // System.out.println(\"Using port: \" + port);\n        try {\n          LocateRegistry.createRegistry(port);\n        } catch (RemoteException e) {\n          throw e;\n        }\n        String url = \"service:jmx:rmi:///jndi/rmi://:\" + port + \"/solrjmx\";\n        JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n        monitoredMap = new JmxMonitoredMap<String, SolrInfoMBean>(\"\", \"\", config);\n        JMXServiceURL u = new JMXServiceURL(url);\n        connector = JMXConnectorFactory.connect(u);\n        mbeanServer = connector.getMBeanServerConnection();\n        break;\n      } catch (Exception e) {\n        if(retries == (i + 1)) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    int retries = 5;\n    for (int i = 0; i < retries; i++) {\n      try {\n        ServerSocket server = new ServerSocket(0);\n        try {\n          port = server.getLocalPort();\n        } finally {\n          server.close();\n        }\n        // System.out.println(\"Using port: \" + port);\n        try {\n          LocateRegistry.createRegistry(port);\n        } catch (RemoteException e) {\n          throw e;\n        }\n        String url = \"service:jmx:rmi:///jndi/rmi://:\" + port + \"/solrjmx\";\n        JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n        monitoredMap = new JmxMonitoredMap<String, SolrInfoMBean>(\"\", \"\", config);\n        JMXServiceURL u = new JMXServiceURL(url);\n        connector = JMXConnectorFactory.connect(u);\n        mbeanServer = connector.getMBeanServerConnection();\n        break;\n      } catch (Exception e) {\n        if(retries == (i + 1)) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4290ddfa982b6cadf2103ead2a0a3d0ec899da85","date":1346331246,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n\n    super.setUp();\n    String oldHost = System.getProperty(\"java.rmi.server.hostname\");\n    try {\n      // this stupid sysprop thing is needed, because remote stubs use the\n      // hostname to connect, which does not work with server bound to 127.0.0.1\n      // See: http://weblogs.java.net/blog/emcmanus/archive/2006/12/multihomed_comp.html\n      System.setProperty(\"java.rmi.server.hostname\", \"127.0.0.1\");\n      class LocalhostRMIServerSocketFactory implements RMIServerSocketFactory {\n        ServerSocket socket;\n        \n        @Override\n        public ServerSocket createServerSocket(int port) throws IOException {\n          socket = new ServerSocket();\n          socket.bind(new InetSocketAddress(\"127.0.0.1\", port));\n          return socket;\n        }\n      };\n      LocalhostRMIServerSocketFactory factory = new LocalhostRMIServerSocketFactory();\n      LocateRegistry.createRegistry(0, null, factory);\n      port = factory.socket.getLocalPort();\n      //System.out.println(\"Using port: \" + port);\n      String url = \"service:jmx:rmi://127.0.0.1:\"+port+\"/jndi/rmi://127.0.0.1:\"+port+\"/solrjmx\";\n      JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n      monitoredMap = new JmxMonitoredMap<String, SolrInfoMBean>(\"\", \"\", config,\n        Collections.singletonMap(RMIConnectorServer.RMI_SERVER_SOCKET_FACTORY_ATTRIBUTE, factory));\n      JMXServiceURL u = new JMXServiceURL(url);\n      connector = JMXConnectorFactory.connect(u);\n      mbeanServer = connector.getMBeanServerConnection();\n    } finally {\n      if (oldHost == null) {\n        System.clearProperty(\"java.rmi.server.hostname\");\n      } else {\n        System.setProperty(\"java.rmi.server.hostname\", oldHost);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n\n    super.setUp();\n\n    int retries = 5;\n    for (int i = 0; i < retries; i++) {\n      try {\n        ServerSocket server = new ServerSocket(0);\n        try {\n          port = server.getLocalPort();\n        } finally {\n          server.close();\n        }\n        // System.out.println(\"Using port: \" + port);\n        try {\n          LocateRegistry.createRegistry(port);\n        } catch (RemoteException e) {\n          throw e;\n        }\n        String url = \"service:jmx:rmi:///jndi/rmi://:\" + port + \"/solrjmx\";\n        JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n        monitoredMap = new JmxMonitoredMap<String, SolrInfoMBean>(\"\", \"\", config);\n        JMXServiceURL u = new JMXServiceURL(url);\n        connector = JMXConnectorFactory.connect(u);\n        mbeanServer = connector.getMBeanServerConnection();\n        break;\n      } catch (Exception e) {\n        if(retries == (i + 1)) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f91ea59ad86660fb3d24fde452cf98e48fcdee3","date":1346344320,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    String oldHost = System.getProperty(\"java.rmi.server.hostname\");\n    try {\n      // this stupid sysprop thing is needed, because remote stubs use an\n      // arbitrary local ip to connect\n      // See: http://weblogs.java.net/blog/emcmanus/archive/2006/12/multihomed_comp.html\n      System.setProperty(\"java.rmi.server.hostname\", \"127.0.0.1\");\n      class LocalhostRMIServerSocketFactory implements RMIServerSocketFactory {\n        ServerSocket socket;\n        \n        @Override\n        public ServerSocket createServerSocket(int port) throws IOException {\n          return socket = new ServerSocket(port);\n        }\n      };\n      LocalhostRMIServerSocketFactory factory = new LocalhostRMIServerSocketFactory();\n      LocateRegistry.createRegistry(0, null, factory);\n      port = factory.socket.getLocalPort();\n      AbstractSolrTestCase.log.info(\"Using port: \" + port);\n      String url = \"service:jmx:rmi:///jndi/rmi://127.0.0.1:\"+port+\"/solrjmx\";\n      JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n      monitoredMap = new JmxMonitoredMap<String, SolrInfoMBean>(\"\", \"\", config);\n      JMXServiceURL u = new JMXServiceURL(url);\n      connector = JMXConnectorFactory.connect(u);\n      mbeanServer = connector.getMBeanServerConnection();\n    } finally {\n      if (oldHost == null) {\n        System.clearProperty(\"java.rmi.server.hostname\");\n      } else {\n        System.setProperty(\"java.rmi.server.hostname\", oldHost);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n\n    super.setUp();\n    String oldHost = System.getProperty(\"java.rmi.server.hostname\");\n    try {\n      // this stupid sysprop thing is needed, because remote stubs use the\n      // hostname to connect, which does not work with server bound to 127.0.0.1\n      // See: http://weblogs.java.net/blog/emcmanus/archive/2006/12/multihomed_comp.html\n      System.setProperty(\"java.rmi.server.hostname\", \"127.0.0.1\");\n      class LocalhostRMIServerSocketFactory implements RMIServerSocketFactory {\n        ServerSocket socket;\n        \n        @Override\n        public ServerSocket createServerSocket(int port) throws IOException {\n          socket = new ServerSocket();\n          socket.bind(new InetSocketAddress(\"127.0.0.1\", port));\n          return socket;\n        }\n      };\n      LocalhostRMIServerSocketFactory factory = new LocalhostRMIServerSocketFactory();\n      LocateRegistry.createRegistry(0, null, factory);\n      port = factory.socket.getLocalPort();\n      //System.out.println(\"Using port: \" + port);\n      String url = \"service:jmx:rmi://127.0.0.1:\"+port+\"/jndi/rmi://127.0.0.1:\"+port+\"/solrjmx\";\n      JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n      monitoredMap = new JmxMonitoredMap<String, SolrInfoMBean>(\"\", \"\", config,\n        Collections.singletonMap(RMIConnectorServer.RMI_SERVER_SOCKET_FACTORY_ATTRIBUTE, factory));\n      JMXServiceURL u = new JMXServiceURL(url);\n      connector = JMXConnectorFactory.connect(u);\n      mbeanServer = connector.getMBeanServerConnection();\n    } finally {\n      if (oldHost == null) {\n        System.clearProperty(\"java.rmi.server.hostname\");\n      } else {\n        System.setProperty(\"java.rmi.server.hostname\", oldHost);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    String oldHost = System.getProperty(\"java.rmi.server.hostname\");\n    try {\n      // this stupid sysprop thing is needed, because remote stubs use an\n      // arbitrary local ip to connect\n      // See: http://weblogs.java.net/blog/emcmanus/archive/2006/12/multihomed_comp.html\n      System.setProperty(\"java.rmi.server.hostname\", \"127.0.0.1\");\n      class LocalhostRMIServerSocketFactory implements RMIServerSocketFactory {\n        ServerSocket socket;\n        \n        @Override\n        public ServerSocket createServerSocket(int port) throws IOException {\n          return socket = new ServerSocket(port);\n        }\n      };\n      LocalhostRMIServerSocketFactory factory = new LocalhostRMIServerSocketFactory();\n      LocateRegistry.createRegistry(0, null, factory);\n      port = factory.socket.getLocalPort();\n      AbstractSolrTestCase.log.info(\"Using port: \" + port);\n      String url = \"service:jmx:rmi:///jndi/rmi://127.0.0.1:\"+port+\"/solrjmx\";\n      JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n      monitoredMap = new JmxMonitoredMap<String, SolrInfoMBean>(\"\", \"\", config);\n      JMXServiceURL u = new JMXServiceURL(url);\n      connector = JMXConnectorFactory.connect(u);\n      mbeanServer = connector.getMBeanServerConnection();\n    } finally {\n      if (oldHost == null) {\n        System.clearProperty(\"java.rmi.server.hostname\");\n      } else {\n        System.setProperty(\"java.rmi.server.hostname\", oldHost);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n\n    super.setUp();\n\n    int retries = 5;\n    for (int i = 0; i < retries; i++) {\n      try {\n        ServerSocket server = new ServerSocket(0);\n        try {\n          port = server.getLocalPort();\n        } finally {\n          server.close();\n        }\n        // System.out.println(\"Using port: \" + port);\n        try {\n          LocateRegistry.createRegistry(port);\n        } catch (RemoteException e) {\n          throw e;\n        }\n        String url = \"service:jmx:rmi:///jndi/rmi://:\" + port + \"/solrjmx\";\n        JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n        monitoredMap = new JmxMonitoredMap<String, SolrInfoMBean>(\"\", \"\", config);\n        JMXServiceURL u = new JMXServiceURL(url);\n        connector = JMXConnectorFactory.connect(u);\n        mbeanServer = connector.getMBeanServerConnection();\n        break;\n      } catch (Exception e) {\n        if(retries == (i + 1)) {\n          throw e;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    String oldHost = System.getProperty(\"java.rmi.server.hostname\");\n    try {\n      // this stupid sysprop thing is needed, because remote stubs use an\n      // arbitrary local ip to connect\n      // See: http://weblogs.java.net/blog/emcmanus/archive/2006/12/multihomed_comp.html\n      System.setProperty(\"java.rmi.server.hostname\", \"127.0.0.1\");\n      class LocalhostRMIServerSocketFactory implements RMIServerSocketFactory {\n        ServerSocket socket;\n        \n        @Override\n        public ServerSocket createServerSocket(int port) throws IOException {\n          return socket = new ServerSocket(port);\n        }\n      };\n      LocalhostRMIServerSocketFactory factory = new LocalhostRMIServerSocketFactory();\n      LocateRegistry.createRegistry(0, null, factory);\n      port = factory.socket.getLocalPort();\n      AbstractSolrTestCase.log.info(\"Using port: \" + port);\n      String url = \"service:jmx:rmi:///jndi/rmi://127.0.0.1:\"+port+\"/solrjmx\";\n      JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n      monitoredMap = new JmxMonitoredMap<>(\"\", \"\", config);\n      JMXServiceURL u = new JMXServiceURL(url);\n      connector = JMXConnectorFactory.connect(u);\n      mbeanServer = connector.getMBeanServerConnection();\n    } finally {\n      if (oldHost == null) {\n        System.clearProperty(\"java.rmi.server.hostname\");\n      } else {\n        System.setProperty(\"java.rmi.server.hostname\", oldHost);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    String oldHost = System.getProperty(\"java.rmi.server.hostname\");\n    try {\n      // this stupid sysprop thing is needed, because remote stubs use an\n      // arbitrary local ip to connect\n      // See: http://weblogs.java.net/blog/emcmanus/archive/2006/12/multihomed_comp.html\n      System.setProperty(\"java.rmi.server.hostname\", \"127.0.0.1\");\n      class LocalhostRMIServerSocketFactory implements RMIServerSocketFactory {\n        ServerSocket socket;\n        \n        @Override\n        public ServerSocket createServerSocket(int port) throws IOException {\n          return socket = new ServerSocket(port);\n        }\n      };\n      LocalhostRMIServerSocketFactory factory = new LocalhostRMIServerSocketFactory();\n      LocateRegistry.createRegistry(0, null, factory);\n      port = factory.socket.getLocalPort();\n      AbstractSolrTestCase.log.info(\"Using port: \" + port);\n      String url = \"service:jmx:rmi:///jndi/rmi://127.0.0.1:\"+port+\"/solrjmx\";\n      JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n      monitoredMap = new JmxMonitoredMap<String, SolrInfoMBean>(\"\", \"\", config);\n      JMXServiceURL u = new JMXServiceURL(url);\n      connector = JMXConnectorFactory.connect(u);\n      mbeanServer = connector.getMBeanServerConnection();\n    } finally {\n      if (oldHost == null) {\n        System.clearProperty(\"java.rmi.server.hostname\");\n      } else {\n        System.setProperty(\"java.rmi.server.hostname\", oldHost);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    String oldHost = System.getProperty(\"java.rmi.server.hostname\");\n    try {\n      // this stupid sysprop thing is needed, because remote stubs use an\n      // arbitrary local ip to connect\n      // See: http://weblogs.java.net/blog/emcmanus/archive/2006/12/multihomed_comp.html\n      System.setProperty(\"java.rmi.server.hostname\", \"127.0.0.1\");\n      class LocalhostRMIServerSocketFactory implements RMIServerSocketFactory {\n        ServerSocket socket;\n        \n        @Override\n        public ServerSocket createServerSocket(int port) throws IOException {\n          return socket = new ServerSocket(port);\n        }\n      };\n      LocalhostRMIServerSocketFactory factory = new LocalhostRMIServerSocketFactory();\n      LocateRegistry.createRegistry(0, null, factory);\n      port = factory.socket.getLocalPort();\n      log.info(\"Using port: \" + port);\n      String url = \"service:jmx:rmi:///jndi/rmi://127.0.0.1:\"+port+\"/solrjmx\";\n      JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n      monitoredMap = new JmxMonitoredMap<>(\"\", \"\", config);\n      JMXServiceURL u = new JMXServiceURL(url);\n      connector = JMXConnectorFactory.connect(u);\n      mbeanServer = connector.getMBeanServerConnection();\n    } finally {\n      if (oldHost == null) {\n        System.clearProperty(\"java.rmi.server.hostname\");\n      } else {\n        System.setProperty(\"java.rmi.server.hostname\", oldHost);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    String oldHost = System.getProperty(\"java.rmi.server.hostname\");\n    try {\n      // this stupid sysprop thing is needed, because remote stubs use an\n      // arbitrary local ip to connect\n      // See: http://weblogs.java.net/blog/emcmanus/archive/2006/12/multihomed_comp.html\n      System.setProperty(\"java.rmi.server.hostname\", \"127.0.0.1\");\n      class LocalhostRMIServerSocketFactory implements RMIServerSocketFactory {\n        ServerSocket socket;\n        \n        @Override\n        public ServerSocket createServerSocket(int port) throws IOException {\n          return socket = new ServerSocket(port);\n        }\n      };\n      LocalhostRMIServerSocketFactory factory = new LocalhostRMIServerSocketFactory();\n      LocateRegistry.createRegistry(0, null, factory);\n      port = factory.socket.getLocalPort();\n      AbstractSolrTestCase.log.info(\"Using port: \" + port);\n      String url = \"service:jmx:rmi:///jndi/rmi://127.0.0.1:\"+port+\"/solrjmx\";\n      JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n      monitoredMap = new JmxMonitoredMap<>(\"\", \"\", config);\n      JMXServiceURL u = new JMXServiceURL(url);\n      connector = JMXConnectorFactory.connect(u);\n      mbeanServer = connector.getMBeanServerConnection();\n    } finally {\n      if (oldHost == null) {\n        System.clearProperty(\"java.rmi.server.hostname\");\n      } else {\n        System.setProperty(\"java.rmi.server.hostname\", oldHost);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","sourceNew":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    String oldHost = System.getProperty(\"java.rmi.server.hostname\");\n    try {\n      // this stupid sysprop thing is needed, because remote stubs use an\n      // arbitrary local ip to connect\n      // See: http://weblogs.java.net/blog/emcmanus/archive/2006/12/multihomed_comp.html\n      System.setProperty(\"java.rmi.server.hostname\", \"127.0.0.1\");\n      class LocalhostRMIServerSocketFactory implements RMIServerSocketFactory {\n        ServerSocket socket;\n        \n        @Override\n        public ServerSocket createServerSocket(int port) throws IOException {\n          return socket = new ServerSocket(port);\n        }\n      };\n      LocalhostRMIServerSocketFactory factory = new LocalhostRMIServerSocketFactory();\n      LocateRegistry.createRegistry(0, null, factory);\n      port = factory.socket.getLocalPort();\n      log.info(\"Using port: \" + port);\n      String url = \"service:jmx:rmi:///jndi/rmi://127.0.0.1:\"+port+\"/solrjmx\";\n      JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n      monitoredMap = new JmxMonitoredMap<>(\"\", \"\", \"\", config);\n      JMXServiceURL u = new JMXServiceURL(url);\n      connector = JMXConnectorFactory.connect(u);\n      mbeanServer = connector.getMBeanServerConnection();\n    } finally {\n      if (oldHost == null) {\n        System.clearProperty(\"java.rmi.server.hostname\");\n      } else {\n        System.setProperty(\"java.rmi.server.hostname\", oldHost);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    String oldHost = System.getProperty(\"java.rmi.server.hostname\");\n    try {\n      // this stupid sysprop thing is needed, because remote stubs use an\n      // arbitrary local ip to connect\n      // See: http://weblogs.java.net/blog/emcmanus/archive/2006/12/multihomed_comp.html\n      System.setProperty(\"java.rmi.server.hostname\", \"127.0.0.1\");\n      class LocalhostRMIServerSocketFactory implements RMIServerSocketFactory {\n        ServerSocket socket;\n        \n        @Override\n        public ServerSocket createServerSocket(int port) throws IOException {\n          return socket = new ServerSocket(port);\n        }\n      };\n      LocalhostRMIServerSocketFactory factory = new LocalhostRMIServerSocketFactory();\n      LocateRegistry.createRegistry(0, null, factory);\n      port = factory.socket.getLocalPort();\n      log.info(\"Using port: \" + port);\n      String url = \"service:jmx:rmi:///jndi/rmi://127.0.0.1:\"+port+\"/solrjmx\";\n      JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n      monitoredMap = new JmxMonitoredMap<>(\"\", \"\", config);\n      JMXServiceURL u = new JMXServiceURL(url);\n      connector = JMXConnectorFactory.connect(u);\n      mbeanServer = connector.getMBeanServerConnection();\n    } finally {\n      if (oldHost == null) {\n        System.clearProperty(\"java.rmi.server.hostname\");\n      } else {\n        System.setProperty(\"java.rmi.server.hostname\", oldHost);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","sourceNew":null,"sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    String oldHost = System.getProperty(\"java.rmi.server.hostname\");\n    try {\n      // this stupid sysprop thing is needed, because remote stubs use an\n      // arbitrary local ip to connect\n      // See: http://weblogs.java.net/blog/emcmanus/archive/2006/12/multihomed_comp.html\n      System.setProperty(\"java.rmi.server.hostname\", \"127.0.0.1\");\n      class LocalhostRMIServerSocketFactory implements RMIServerSocketFactory {\n        ServerSocket socket;\n        \n        @Override\n        public ServerSocket createServerSocket(int port) throws IOException {\n          return socket = new ServerSocket(port);\n        }\n      };\n      LocalhostRMIServerSocketFactory factory = new LocalhostRMIServerSocketFactory();\n      LocateRegistry.createRegistry(0, null, factory);\n      port = factory.socket.getLocalPort();\n      log.info(\"Using port: \" + port);\n      String url = \"service:jmx:rmi:///jndi/rmi://127.0.0.1:\"+port+\"/solrjmx\";\n      JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n      monitoredMap = new JmxMonitoredMap<>(\"\", \"\", \"\", config);\n      JMXServiceURL u = new JMXServiceURL(url);\n      connector = JMXConnectorFactory.connect(u);\n      mbeanServer = connector.getMBeanServerConnection();\n    } finally {\n      if (oldHost == null) {\n        System.clearProperty(\"java.rmi.server.hostname\");\n      } else {\n        System.setProperty(\"java.rmi.server.hostname\", oldHost);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#setUp().mjava","sourceNew":null,"sourceOld":"  @Override\n  @Before\n  public void setUp() throws Exception {\n    super.setUp();\n    String oldHost = System.getProperty(\"java.rmi.server.hostname\");\n    try {\n      // this stupid sysprop thing is needed, because remote stubs use an\n      // arbitrary local ip to connect\n      // See: http://weblogs.java.net/blog/emcmanus/archive/2006/12/multihomed_comp.html\n      System.setProperty(\"java.rmi.server.hostname\", \"127.0.0.1\");\n      class LocalhostRMIServerSocketFactory implements RMIServerSocketFactory {\n        ServerSocket socket;\n        \n        @Override\n        public ServerSocket createServerSocket(int port) throws IOException {\n          return socket = new ServerSocket(port);\n        }\n      };\n      LocalhostRMIServerSocketFactory factory = new LocalhostRMIServerSocketFactory();\n      LocateRegistry.createRegistry(0, null, factory);\n      port = factory.socket.getLocalPort();\n      log.info(\"Using port: \" + port);\n      String url = \"service:jmx:rmi:///jndi/rmi://127.0.0.1:\"+port+\"/solrjmx\";\n      JmxConfiguration config = new JmxConfiguration(true, null, url, null);\n      monitoredMap = new JmxMonitoredMap<>(\"\", \"\", \"\", config);\n      JMXServiceURL u = new JMXServiceURL(url);\n      connector = JMXConnectorFactory.connect(u);\n      mbeanServer = connector.getMBeanServerConnection();\n    } finally {\n      if (oldHost == null) {\n        System.clearProperty(\"java.rmi.server.hostname\");\n      } else {\n        System.setProperty(\"java.rmi.server.hostname\", oldHost);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7f91ea59ad86660fb3d24fde452cf98e48fcdee3"],"feb75c13cdf6b27b36407e4b15b35cf3142ab619":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["e26e75cfb1a17b3f7431fafc9cb3caf5678681a5","7f91ea59ad86660fb3d24fde452cf98e48fcdee3"],"816521ebaad5add9cb96bb88c577394e2938c40b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"7f91ea59ad86660fb3d24fde452cf98e48fcdee3":["4290ddfa982b6cadf2103ead2a0a3d0ec899da85"],"4290ddfa982b6cadf2103ead2a0a3d0ec899da85":["e26e75cfb1a17b3f7431fafc9cb3caf5678681a5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e26e75cfb1a17b3f7431fafc9cb3caf5678681a5":["feb75c13cdf6b27b36407e4b15b35cf3142ab619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"feb75c13cdf6b27b36407e4b15b35cf3142ab619":["e26e75cfb1a17b3f7431fafc9cb3caf5678681a5"],"c26f00b574427b55127e869b935845554afde1fa":["feb75c13cdf6b27b36407e4b15b35cf3142ab619"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f91ea59ad86660fb3d24fde452cf98e48fcdee3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","05a14b2611ead08655a2b2bdc61632eb31316e57"],"4290ddfa982b6cadf2103ead2a0a3d0ec899da85":["7f91ea59ad86660fb3d24fde452cf98e48fcdee3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"e26e75cfb1a17b3f7431fafc9cb3caf5678681a5":["05a14b2611ead08655a2b2bdc61632eb31316e57","4290ddfa982b6cadf2103ead2a0a3d0ec899da85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","05a14b2611ead08655a2b2bdc61632eb31316e57","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}