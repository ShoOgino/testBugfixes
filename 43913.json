{"path":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testTLong().mjava","commits":[{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testTLong().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testTLong().mjava","sourceNew":"  public void testTLong() throws Exception {\n    byte buffer[] = new byte[10]; // we never need more than 10 bytes\n    ByteArrayDataOutput out = new ByteArrayDataOutput(buffer);\n    ByteArrayDataInput in = new ByteArrayDataInput(buffer);\n\n    // round-trip small integer values\n    for (int i = Short.MIN_VALUE; i < Short.MAX_VALUE; i++) {\n      for (long mul : new long[] {SECOND, HOUR, DAY}) {\n        long l1 = (long) i * mul;\n        CompressingStoredFieldsWriter.writeTLong(out, l1);\n        in.reset(buffer, 0, out.getPosition());\n        long l2 = CompressingStoredFieldsReader.readTLong(in);\n        assertTrue(in.eof());\n        assertEquals(l1, l2);\n\n        // check that compression actually works\n        if (i >= -16 && i <= 15) {\n          assertEquals(1, out.getPosition()); // single byte compression\n        }\n        out.reset(buffer);\n      }\n    }\n\n    // round-trip random values\n    Random r = random();\n    for (int i = 0; i < 100000; i++) {\n      final int numBits = r.nextInt(65);\n      long l1 = r.nextLong() & ((1L << numBits) - 1);\n      switch (r.nextInt(4)) {\n        case 0:\n          l1 *= SECOND;\n          break;\n        case 1:\n          l1 *= HOUR;\n          break;\n        case 2:\n          l1 *= DAY;\n          break;\n        default:\n          break;\n      }\n      CompressingStoredFieldsWriter.writeTLong(out, l1);\n      in.reset(buffer, 0, out.getPosition());\n      long l2 = CompressingStoredFieldsReader.readTLong(in);\n      assertTrue(in.eof());\n      assertEquals(l1, l2);\n      out.reset(buffer);\n    }\n  }\n\n","sourceOld":"  public void testTLong() throws Exception {\n    byte buffer[] = new byte[10]; // we never need more than 10 bytes\n    ByteArrayDataOutput out = new ByteArrayDataOutput(buffer);\n    ByteArrayDataInput in = new ByteArrayDataInput(buffer);\n\n    // round-trip small integer values\n    for (int i = Short.MIN_VALUE; i < Short.MAX_VALUE; i++) {\n      for (long mul : new long[] {SECOND, HOUR, DAY}) {\n        long l1 = (long) i * mul;\n        CompressingStoredFieldsWriter.writeTLong(out, l1);\n        in.reset(buffer, 0, out.getPosition());\n        long l2 = CompressingStoredFieldsReader.readTLong(in);\n        assertTrue(in.eof());\n        assertEquals(l1, l2);\n\n        // check that compression actually works\n        if (i >= -16 && i <= 15) {\n          assertEquals(1, out.getPosition()); // single byte compression\n        }\n        out.reset(buffer);\n      }\n    }\n\n    // round-trip random values\n    Random r = random();\n    for (int i = 0; i < 100000; i++) {\n      final int numBits = r.nextInt(65);\n      long l1 = r.nextLong() & ((1L << numBits) - 1);\n      switch (r.nextInt(4)) {\n        case 0:\n          l1 *= SECOND;\n          break;\n        case 1:\n          l1 *= HOUR;\n          break;\n        case 2:\n          l1 *= DAY;\n          break;\n        default:\n          break;\n      }\n      CompressingStoredFieldsWriter.writeTLong(out, l1);\n      in.reset(buffer, 0, out.getPosition());\n      long l2 = CompressingStoredFieldsReader.readTLong(in);\n      assertTrue(in.eof());\n      assertEquals(l1, l2);\n      out.reset(buffer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}