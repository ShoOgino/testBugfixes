{"path":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","commits":[{"id":"e30e9f1cf3b50465da17956ef927e58aa97453c3","date":1321784055,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", \"bar\", analyzer);\n    IndexReader reader = memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"));\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", \"bar\", analyzer);\n    IndexReader reader = memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"), false);\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi, false);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", \"bar\", analyzer);\n    IndexReader reader = memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"));\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"572fe7e311b3f02a2b472fb0298d3a4be3cc909a","date":1327855680,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicIndexReader reader = (AtomicIndexReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"), false);\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi, false);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", \"bar\", analyzer);\n    IndexReader reader = memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"), false);\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi, false);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"), false);\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi, false);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicIndexReader reader = (AtomicIndexReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"), false);\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi, false);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"), false);\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi, false);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", \"bar\", analyzer);\n    IndexReader reader = memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"), false);\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi, false);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"214f697dffd3b41ffe286f7f67afd54e51b13935","date":1330349733,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    MemoryIndex memory = new MemoryIndex(true);\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"), false);\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, disi.nextPosition());\n    assertEquals(0, disi.startOffset());\n    assertEquals(3, disi.endOffset());\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi, false);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"), false);\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi, false);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    MemoryIndex memory = new MemoryIndex(true);\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"), false);\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, disi.nextPosition());\n    assertEquals(0, disi.startOffset());\n    assertEquals(3, disi.endOffset());\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi, false);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"), false);\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi, false);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    MemoryIndex memory = new MemoryIndex(true);\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"), false);\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, disi.nextPosition());\n    assertEquals(0, disi.startOffset());\n    assertEquals(3, disi.endOffset());\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi, false);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random);\n    MemoryIndex memory = new MemoryIndex(true);\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"), false);\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, disi.nextPosition());\n    assertEquals(0, disi.startOffset());\n    assertEquals(3, disi.endOffset());\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi, false);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","pathOld":"lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testDocsAndPositionsEnumStart().mjava","sourceNew":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    MemoryIndex memory = new MemoryIndex(true);\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"), false);\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, disi.nextPosition());\n    assertEquals(0, disi.startOffset());\n    assertEquals(3, disi.endOffset());\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi, false);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","sourceOld":"  public void testDocsAndPositionsEnumStart() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    MemoryIndex memory = new MemoryIndex(true);\n    memory.addField(\"foo\", \"bar\", analyzer);\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, \"foo\", new BytesRef(\"bar\"), false);\n    int docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    assertEquals(0, disi.nextPosition());\n    assertEquals(0, disi.startOffset());\n    assertEquals(3, disi.endOffset());\n    \n    // now reuse and check again\n    TermsEnum te = reader.terms(\"foo\").iterator(null);\n    assertTrue(te.seekExact(new BytesRef(\"bar\"), true));\n    disi = te.docsAndPositions(null, disi, false);\n    docid = disi.docID();\n    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);\n    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"572fe7e311b3f02a2b472fb0298d3a4be3cc909a":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["5cab9a86bd67202d20b6adc463008c8e982b070a","214f697dffd3b41ffe286f7f67afd54e51b13935"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["572fe7e311b3f02a2b472fb0298d3a4be3cc909a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"214f697dffd3b41ffe286f7f67afd54e51b13935":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"e30e9f1cf3b50465da17956ef927e58aa97453c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["214f697dffd3b41ffe286f7f67afd54e51b13935"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["31f025ae60076ae95274433f3fe8e6ace2857a87","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["e30e9f1cf3b50465da17956ef927e58aa97453c3"]},"commit2Childs":{"572fe7e311b3f02a2b472fb0298d3a4be3cc909a":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e30e9f1cf3b50465da17956ef927e58aa97453c3"],"214f697dffd3b41ffe286f7f67afd54e51b13935":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"e30e9f1cf3b50465da17956ef927e58aa97453c3":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","214f697dffd3b41ffe286f7f67afd54e51b13935"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["572fe7e311b3f02a2b472fb0298d3a4be3cc909a","5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}