{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache#LruTaxonomyWriterCache(int,LRUType).mjava","commits":[{"id":"5cad50ed6659649a0edef71b8cf56280b0bdadd7","date":1385496862,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache#LruTaxonomyWriterCache(int,LRUType).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/LruTaxonomyWriterCache#LruTaxonomyWriterCache(int,LRUType).mjava","sourceNew":"  public LruTaxonomyWriterCache(int cacheSize, LRUType lruType) {\n    // TODO (Facet): choose between NameHashIntCacheLRU and NameIntCacheLRU.\n    // For guaranteed correctness - not relying on no-collisions in the hash\n    // function, NameIntCacheLRU should be used:\n    // On the other hand, NameHashIntCacheLRU takes less RAM but if there\n    // are collisions (which we never found) two different paths would be\n    // mapped to the same ordinal...\n    if (lruType == LRUType.LRU_HASHED) {\n      this.cache = new NameHashIntCacheLRU(cacheSize);\n    } else {\n      this.cache = new NameIntCacheLRU(cacheSize);\n    }\n  }\n\n","sourceOld":"  public LruTaxonomyWriterCache(int cacheSize, LRUType lruType) {\n    // TODO (Facet): choose between NameHashIntCacheLRU and NameIntCacheLRU.\n    // For guaranteed correctness - not relying on no-collisions in the hash\n    // function, NameIntCacheLRU should be used:\n    // On the other hand, NameHashIntCacheLRU takes less RAM but if there\n    // are collisions (which we never found) two different paths would be\n    // mapped to the same ordinal...\n    if (lruType == LRUType.LRU_HASHED) {\n      this.cache = new NameHashIntCacheLRU(cacheSize);\n    } else {\n      this.cache = new NameIntCacheLRU(cacheSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b656cbf28fe2a4be7de3f0e561623ca39d06884","date":1388622204,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache#LruTaxonomyWriterCache(int,LRUType).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache#LruTaxonomyWriterCache(int,LRUType).mjava","sourceNew":"  /** Creates this with the specified method. */\n  public LruTaxonomyWriterCache(int cacheSize, LRUType lruType) {\n    // TODO (Facet): choose between NameHashIntCacheLRU and NameIntCacheLRU.\n    // For guaranteed correctness - not relying on no-collisions in the hash\n    // function, NameIntCacheLRU should be used:\n    // On the other hand, NameHashIntCacheLRU takes less RAM but if there\n    // are collisions (which we never found) two different paths would be\n    // mapped to the same ordinal...\n    if (lruType == LRUType.LRU_HASHED) {\n      this.cache = new NameHashIntCacheLRU(cacheSize);\n    } else {\n      this.cache = new NameIntCacheLRU(cacheSize);\n    }\n  }\n\n","sourceOld":"  public LruTaxonomyWriterCache(int cacheSize, LRUType lruType) {\n    // TODO (Facet): choose between NameHashIntCacheLRU and NameIntCacheLRU.\n    // For guaranteed correctness - not relying on no-collisions in the hash\n    // function, NameIntCacheLRU should be used:\n    // On the other hand, NameHashIntCacheLRU takes less RAM but if there\n    // are collisions (which we never found) two different paths would be\n    // mapped to the same ordinal...\n    if (lruType == LRUType.LRU_HASHED) {\n      this.cache = new NameHashIntCacheLRU(cacheSize);\n    } else {\n      this.cache = new NameIntCacheLRU(cacheSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache#LruTaxonomyWriterCache(int,LRUType).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates this with the specified method. */\n  public LruTaxonomyWriterCache(int cacheSize, LRUType lruType) {\n    // TODO (Facet): choose between NameHashIntCacheLRU and NameIntCacheLRU.\n    // For guaranteed correctness - not relying on no-collisions in the hash\n    // function, NameIntCacheLRU should be used:\n    // On the other hand, NameHashIntCacheLRU takes less RAM but if there\n    // are collisions (which we never found) two different paths would be\n    // mapped to the same ordinal...\n    if (lruType == LRUType.LRU_HASHED) {\n      this.cache = new NameHashIntCacheLRU(cacheSize);\n    } else {\n      this.cache = new NameIntCacheLRU(cacheSize);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"192421df3794405bd7104fbc120c1068b4375ec4","date":1504620838,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache#LruTaxonomyWriterCache(int,LRUType).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache#LruTaxonomyWriterCache(int,LRUType).mjava","sourceNew":"  /** Creates this with the specified method. */\n  public LruTaxonomyWriterCache(int cacheSize, LRUType lruType) {\n    // TODO (Facet): choose between NameHashIntCacheLRU and NameIntCacheLRU.\n    // For guaranteed correctness - not relying on no-collisions in the hash\n    // function, NameIntCacheLRU should be used:\n    // On the other hand, NameHashIntCacheLRU takes less RAM but if there\n    // are collisions two different paths would be mapped to the same\n    // ordinal...\n    if (lruType == LRUType.LRU_HASHED) {\n      this.cache = new NameHashIntCacheLRU(cacheSize);\n    } else {\n      this.cache = new NameIntCacheLRU(cacheSize);\n    }\n  }\n\n","sourceOld":"  /** Creates this with the specified method. */\n  public LruTaxonomyWriterCache(int cacheSize, LRUType lruType) {\n    // TODO (Facet): choose between NameHashIntCacheLRU and NameIntCacheLRU.\n    // For guaranteed correctness - not relying on no-collisions in the hash\n    // function, NameIntCacheLRU should be used:\n    // On the other hand, NameHashIntCacheLRU takes less RAM but if there\n    // are collisions (which we never found) two different paths would be\n    // mapped to the same ordinal...\n    if (lruType == LRUType.LRU_HASHED) {\n      this.cache = new NameHashIntCacheLRU(cacheSize);\n    } else {\n      this.cache = new NameIntCacheLRU(cacheSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache#LruTaxonomyWriterCache(int,LRUType).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache#LruTaxonomyWriterCache(int,LRUType).mjava","sourceNew":"  /** Creates this with the specified method. */\n  public LruTaxonomyWriterCache(int cacheSize, LRUType lruType) {\n    // TODO (Facet): choose between NameHashIntCacheLRU and NameIntCacheLRU.\n    // For guaranteed correctness - not relying on no-collisions in the hash\n    // function, NameIntCacheLRU should be used:\n    // On the other hand, NameHashIntCacheLRU takes less RAM but if there\n    // are collisions two different paths would be mapped to the same\n    // ordinal...\n    if (lruType == LRUType.LRU_HASHED) {\n      this.cache = new NameHashIntCacheLRU(cacheSize);\n    } else {\n      this.cache = new NameIntCacheLRU(cacheSize);\n    }\n  }\n\n","sourceOld":"  /** Creates this with the specified method. */\n  public LruTaxonomyWriterCache(int cacheSize, LRUType lruType) {\n    // TODO (Facet): choose between NameHashIntCacheLRU and NameIntCacheLRU.\n    // For guaranteed correctness - not relying on no-collisions in the hash\n    // function, NameIntCacheLRU should be used:\n    // On the other hand, NameHashIntCacheLRU takes less RAM but if there\n    // are collisions (which we never found) two different paths would be\n    // mapped to the same ordinal...\n    if (lruType == LRUType.LRU_HASHED) {\n      this.cache = new NameHashIntCacheLRU(cacheSize);\n    } else {\n      this.cache = new NameIntCacheLRU(cacheSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache#LruTaxonomyWriterCache(int,LRUType).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache#LruTaxonomyWriterCache(int,LRUType).mjava","sourceNew":"  /** Creates this with the specified method. */\n  public LruTaxonomyWriterCache(int cacheSize, LRUType lruType) {\n    // TODO (Facet): choose between NameHashIntCacheLRU and NameIntCacheLRU.\n    // For guaranteed correctness - not relying on no-collisions in the hash\n    // function, NameIntCacheLRU should be used:\n    // On the other hand, NameHashIntCacheLRU takes less RAM but if there\n    // are collisions two different paths would be mapped to the same\n    // ordinal...\n    if (lruType == LRUType.LRU_HASHED) {\n      this.cache = new NameHashIntCacheLRU(cacheSize);\n    } else {\n      this.cache = new NameIntCacheLRU(cacheSize);\n    }\n  }\n\n","sourceOld":"  /** Creates this with the specified method. */\n  public LruTaxonomyWriterCache(int cacheSize, LRUType lruType) {\n    // TODO (Facet): choose between NameHashIntCacheLRU and NameIntCacheLRU.\n    // For guaranteed correctness - not relying on no-collisions in the hash\n    // function, NameIntCacheLRU should be used:\n    // On the other hand, NameHashIntCacheLRU takes less RAM but if there\n    // are collisions (which we never found) two different paths would be\n    // mapped to the same ordinal...\n    if (lruType == LRUType.LRU_HASHED) {\n      this.cache = new NameHashIntCacheLRU(cacheSize);\n    } else {\n      this.cache = new NameIntCacheLRU(cacheSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache#LruTaxonomyWriterCache(int,LRUType).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache#LruTaxonomyWriterCache(int,LRUType).mjava","sourceNew":"  /** Creates this with the specified method. */\n  public LruTaxonomyWriterCache(int cacheSize, LRUType lruType) {\n    // TODO (Facet): choose between NameHashIntCacheLRU and NameIntCacheLRU.\n    // For guaranteed correctness - not relying on no-collisions in the hash\n    // function, NameIntCacheLRU should be used:\n    // On the other hand, NameHashIntCacheLRU takes less RAM but if there\n    // are collisions two different paths would be mapped to the same\n    // ordinal...\n    if (lruType == LRUType.LRU_HASHED) {\n      this.cache = new NameHashIntCacheLRU(cacheSize);\n    } else {\n      this.cache = new NameIntCacheLRU(cacheSize);\n    }\n  }\n\n","sourceOld":"  /** Creates this with the specified method. */\n  public LruTaxonomyWriterCache(int cacheSize, LRUType lruType) {\n    // TODO (Facet): choose between NameHashIntCacheLRU and NameIntCacheLRU.\n    // For guaranteed correctness - not relying on no-collisions in the hash\n    // function, NameIntCacheLRU should be used:\n    // On the other hand, NameHashIntCacheLRU takes less RAM but if there\n    // are collisions (which we never found) two different paths would be\n    // mapped to the same ordinal...\n    if (lruType == LRUType.LRU_HASHED) {\n      this.cache = new NameHashIntCacheLRU(cacheSize);\n    } else {\n      this.cache = new NameIntCacheLRU(cacheSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"192421df3794405bd7104fbc120c1068b4375ec4":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"b21283ed01203901a7257aa4b7f0a0899c86e56e":["3cc728b07df73b197e6d940d27f9b08b63918f13","192421df3794405bd7104fbc120c1068b4375ec4"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["3cc728b07df73b197e6d940d27f9b08b63918f13","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["3cc728b07df73b197e6d940d27f9b08b63918f13","b21283ed01203901a7257aa4b7f0a0899c86e56e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0b656cbf28fe2a4be7de3f0e561623ca39d06884"],"0b656cbf28fe2a4be7de3f0e561623ca39d06884":["5cad50ed6659649a0edef71b8cf56280b0bdadd7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"]},"commit2Childs":{"192421df3794405bd7104fbc120c1068b4375ec4":["b21283ed01203901a7257aa4b7f0a0899c86e56e"],"b21283ed01203901a7257aa4b7f0a0899c86e56e":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5cad50ed6659649a0edef71b8cf56280b0bdadd7","3cc728b07df73b197e6d940d27f9b08b63918f13"],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["0b656cbf28fe2a4be7de3f0e561623ca39d06884"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["192421df3794405bd7104fbc120c1068b4375ec4","b21283ed01203901a7257aa4b7f0a0899c86e56e","685bd38810c206c93e9058f3c2cfa9827c086c27","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"0b656cbf28fe2a4be7de3f0e561623ca39d06884":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}