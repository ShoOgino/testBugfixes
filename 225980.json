{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","sourceNew":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n    \n    if (tp.docID() > docId) {\n      return false;\n    }\n\n    // making sure we have the requested document\n    if (tp.docID() < docId) {\n      // Skipping to requested document\n      if (tp.advance(docId) == DocIdSetIterator.NO_MORE_DOCS) {\n        this.hasMore = false;\n        return false;\n      }\n\n      // If document not found (skipped to much)\n      if (tp.docID() != docId) {\n        return false;\n      }\n    }\n\n    // Prepare for payload extraction\n    tp.nextPosition();\n\n    // TODO: fix bug in SepCodec and then remove this check (the null check should be enough)\n    if (!tp.hasPayload()) {\n      return false;\n    }\n\n    BytesRef br = tp.getPayload();\n\n    if (br == null || br.length == 0) {\n      return false;\n    }\n\n    this.payloadLength = br.length;\n    \n    if (this.payloadLength > this.buffer.length) {\n      // Growing if necessary.\n      this.buffer = new byte[this.payloadLength * 2 + 1];\n    }\n    // Loading the payload\n    System.arraycopy(br.bytes, br.offset, this.buffer, 0, payloadLength);\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n    \n    if (tp.docID() > docId) {\n      return false;\n    }\n\n    // making sure we have the requested document\n    if (tp.docID() < docId) {\n      // Skipping to requested document\n      if (tp.advance(docId) == DocIdSetIterator.NO_MORE_DOCS) {\n        this.hasMore = false;\n        return false;\n      }\n\n      // If document not found (skipped to much)\n      if (tp.docID() != docId) {\n        return false;\n      }\n    }\n\n    // Prepare for payload extraction\n    tp.nextPosition();\n\n    // TODO: fix bug in SepCodec and then remove this check (the null check should be enough)\n    if (!tp.hasPayload()) {\n      return false;\n    }\n\n    BytesRef br = tp.getPayload();\n\n    if (br == null || br.length == 0) {\n      return false;\n    }\n\n    this.payloadLength = br.length;\n    \n    if (this.payloadLength > this.buffer.length) {\n      // Growing if necessary.\n      this.buffer = new byte[this.payloadLength * 2 + 1];\n    }\n    // Loading the payload\n    System.arraycopy(br.bytes, br.offset, this.buffer, 0, payloadLength);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","date":1344797146,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","sourceNew":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n    \n    if (tp.docID() > docId) {\n      return false;\n    }\n\n    // making sure we have the requested document\n    if (tp.docID() < docId) {\n      // Skipping to requested document\n      if (tp.advance(docId) == DocIdSetIterator.NO_MORE_DOCS) {\n        this.hasMore = false;\n        return false;\n      }\n\n      // If document not found (skipped to much)\n      if (tp.docID() != docId) {\n        return false;\n      }\n    }\n\n    // Prepare for payload extraction\n    tp.nextPosition();\n\n    BytesRef br = tp.getPayload();\n    \n    if (br == null) {\n      return false;\n    }\n    \n    assert br.length > 0;\n\n    this.payloadLength = br.length;\n    \n    if (this.payloadLength > this.buffer.length) {\n      // Growing if necessary.\n      this.buffer = new byte[this.payloadLength * 2 + 1];\n    }\n    // Loading the payload\n    System.arraycopy(br.bytes, br.offset, this.buffer, 0, payloadLength);\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n    \n    if (tp.docID() > docId) {\n      return false;\n    }\n\n    // making sure we have the requested document\n    if (tp.docID() < docId) {\n      // Skipping to requested document\n      if (tp.advance(docId) == DocIdSetIterator.NO_MORE_DOCS) {\n        this.hasMore = false;\n        return false;\n      }\n\n      // If document not found (skipped to much)\n      if (tp.docID() != docId) {\n        return false;\n      }\n    }\n\n    // Prepare for payload extraction\n    tp.nextPosition();\n\n    // TODO: fix bug in SepCodec and then remove this check (the null check should be enough)\n    if (!tp.hasPayload()) {\n      return false;\n    }\n\n    BytesRef br = tp.getPayload();\n\n    if (br == null || br.length == 0) {\n      return false;\n    }\n\n    this.payloadLength = br.length;\n    \n    if (this.payloadLength > this.buffer.length) {\n      // Growing if necessary.\n      this.buffer = new byte[this.payloadLength * 2 + 1];\n    }\n    // Loading the payload\n    System.arraycopy(br.bytes, br.offset, this.buffer, 0, payloadLength);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","sourceNew":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n    \n    if (tp.docID() > docId) {\n      return false;\n    }\n\n    // making sure we have the requested document\n    if (tp.docID() < docId) {\n      // Skipping to requested document\n      if (tp.advance(docId) == DocIdSetIterator.NO_MORE_DOCS) {\n        this.hasMore = false;\n        return false;\n      }\n\n      // If document not found (skipped to much)\n      if (tp.docID() != docId) {\n        return false;\n      }\n    }\n\n    // Prepare for payload extraction\n    tp.nextPosition();\n\n    BytesRef br = tp.getPayload();\n    \n    if (br == null) {\n      return false;\n    }\n    \n    assert br.length > 0;\n\n    this.payloadLength = br.length;\n    \n    if (this.payloadLength > this.buffer.length) {\n      // Growing if necessary.\n      this.buffer = new byte[this.payloadLength * 2 + 1];\n    }\n    // Loading the payload\n    System.arraycopy(br.bytes, br.offset, this.buffer, 0, payloadLength);\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n    \n    if (tp.docID() > docId) {\n      return false;\n    }\n\n    // making sure we have the requested document\n    if (tp.docID() < docId) {\n      // Skipping to requested document\n      if (tp.advance(docId) == DocIdSetIterator.NO_MORE_DOCS) {\n        this.hasMore = false;\n        return false;\n      }\n\n      // If document not found (skipped to much)\n      if (tp.docID() != docId) {\n        return false;\n      }\n    }\n\n    // Prepare for payload extraction\n    tp.nextPosition();\n\n    // TODO: fix bug in SepCodec and then remove this check (the null check should be enough)\n    if (!tp.hasPayload()) {\n      return false;\n    }\n\n    BytesRef br = tp.getPayload();\n\n    if (br == null || br.length == 0) {\n      return false;\n    }\n\n    this.payloadLength = br.length;\n    \n    if (this.payloadLength > this.buffer.length) {\n      // Growing if necessary.\n      this.buffer = new byte[this.payloadLength * 2 + 1];\n    }\n    // Loading the payload\n    System.arraycopy(br.bytes, br.offset, this.buffer, 0, payloadLength);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","sourceNew":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n    \n    if (tp.docID() > docId) {\n      return false;\n    }\n\n    // making sure we have the requested document\n    if (tp.docID() < docId) {\n      // Skipping to requested document\n      if (tp.advance(docId) == DocIdSetIterator.NO_MORE_DOCS) {\n        this.hasMore = false;\n        return false;\n      }\n\n      // If document not found (skipped to much)\n      if (tp.docID() != docId) {\n        return false;\n      }\n    }\n\n    // Prepare for payload extraction\n    tp.nextPosition();\n\n    BytesRef br = tp.getPayload();\n    \n    if (br == null) {\n      return false;\n    }\n    \n    assert br.length > 0;\n\n    this.payloadLength = br.length;\n    \n    if (this.payloadLength > this.buffer.length) {\n      // Growing if necessary.\n      this.buffer = new byte[this.payloadLength * 2 + 1];\n    }\n    // Loading the payload\n    System.arraycopy(br.bytes, br.offset, this.buffer, 0, payloadLength);\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n    \n    if (tp.docID() > docId) {\n      return false;\n    }\n\n    // making sure we have the requested document\n    if (tp.docID() < docId) {\n      // Skipping to requested document\n      if (tp.advance(docId) == DocIdSetIterator.NO_MORE_DOCS) {\n        this.hasMore = false;\n        return false;\n      }\n\n      // If document not found (skipped to much)\n      if (tp.docID() != docId) {\n        return false;\n      }\n    }\n\n    // Prepare for payload extraction\n    tp.nextPosition();\n\n    // TODO: fix bug in SepCodec and then remove this check (the null check should be enough)\n    if (!tp.hasPayload()) {\n      return false;\n    }\n\n    BytesRef br = tp.getPayload();\n\n    if (br == null || br.length == 0) {\n      return false;\n    }\n\n    this.payloadLength = br.length;\n    \n    if (this.payloadLength > this.buffer.length) {\n      // Growing if necessary.\n      this.buffer = new byte[this.payloadLength * 2 + 1];\n    }\n    // Loading the payload\n    System.arraycopy(br.bytes, br.offset, this.buffer, 0, payloadLength);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b65d3e2c837614823b0652e54f44ff76463de22","date":1355144308,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","sourceNew":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n\n    // re-basing docId->localDocID is done fewer times than currentDoc->globalDoc\n    int localDocID = docId - curDocBase;\n    \n    if (curDocID > localDocID) {\n      // document does not exist\n      return false;\n    }\n    \n    if (curDocID < localDocID) {\n      // look for the document either in that segment, or others\n      while (hasMore && (curDocID = currentDPE.advance(localDocID)) == DocIdSetIterator.NO_MORE_DOCS) {\n        nextSegment(); // also updates curDocID\n        localDocID = docId - curDocBase;\n        // nextSegment advances to nextDoc, so check if we still need to advance\n        if (curDocID >= localDocID) {\n          break;\n        }\n      }\n      \n      // we break from the above loop when:\n      // 1. we iterated over all segments (hasMore=false)\n      // 2. current segment advanced to a doc, either requested or higher\n      if (!hasMore || curDocID != localDocID) {\n        return false;\n      }\n    }\n\n    // we're on the document\n    assert currentDPE.freq() == 1 : \"expecting freq=1 (got \" + currentDPE.freq() + \") term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    int pos = currentDPE.nextPosition();\n    assert pos != -1 : \"no positions for term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    data = currentDPE.getPayload();\n    return data != null;\n  }\n\n","sourceOld":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n    \n    if (tp.docID() > docId) {\n      return false;\n    }\n\n    // making sure we have the requested document\n    if (tp.docID() < docId) {\n      // Skipping to requested document\n      if (tp.advance(docId) == DocIdSetIterator.NO_MORE_DOCS) {\n        this.hasMore = false;\n        return false;\n      }\n\n      // If document not found (skipped to much)\n      if (tp.docID() != docId) {\n        return false;\n      }\n    }\n\n    // Prepare for payload extraction\n    tp.nextPosition();\n\n    BytesRef br = tp.getPayload();\n    \n    if (br == null) {\n      return false;\n    }\n    \n    assert br.length > 0;\n\n    this.payloadLength = br.length;\n    \n    if (this.payloadLength > this.buffer.length) {\n      // Growing if necessary.\n      this.buffer = new byte[this.payloadLength * 2 + 1];\n    }\n    // Loading the payload\n    System.arraycopy(br.bytes, br.offset, this.buffer, 0, payloadLength);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","sourceNew":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n\n    // re-basing docId->localDocID is done fewer times than currentDoc->globalDoc\n    int localDocID = docId - curDocBase;\n    \n    if (curDocID > localDocID) {\n      // document does not exist\n      return false;\n    }\n    \n    if (curDocID < localDocID) {\n      // look for the document either in that segment, or others\n      while (hasMore && (curDocID = currentDPE.advance(localDocID)) == DocIdSetIterator.NO_MORE_DOCS) {\n        nextSegment(); // also updates curDocID\n        localDocID = docId - curDocBase;\n        // nextSegment advances to nextDoc, so check if we still need to advance\n        if (curDocID >= localDocID) {\n          break;\n        }\n      }\n      \n      // we break from the above loop when:\n      // 1. we iterated over all segments (hasMore=false)\n      // 2. current segment advanced to a doc, either requested or higher\n      if (!hasMore || curDocID != localDocID) {\n        return false;\n      }\n    }\n\n    // we're on the document\n    assert currentDPE.freq() == 1 : \"expecting freq=1 (got \" + currentDPE.freq() + \") term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    int pos = currentDPE.nextPosition();\n    assert pos != -1 : \"no positions for term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    data = currentDPE.getPayload();\n    return data != null;\n  }\n\n","sourceOld":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n    \n    if (tp.docID() > docId) {\n      return false;\n    }\n\n    // making sure we have the requested document\n    if (tp.docID() < docId) {\n      // Skipping to requested document\n      if (tp.advance(docId) == DocIdSetIterator.NO_MORE_DOCS) {\n        this.hasMore = false;\n        return false;\n      }\n\n      // If document not found (skipped to much)\n      if (tp.docID() != docId) {\n        return false;\n      }\n    }\n\n    // Prepare for payload extraction\n    tp.nextPosition();\n\n    BytesRef br = tp.getPayload();\n    \n    if (br == null) {\n      return false;\n    }\n    \n    assert br.length > 0;\n\n    this.payloadLength = br.length;\n    \n    if (this.payloadLength > this.buffer.length) {\n      // Growing if necessary.\n      this.buffer = new byte[this.payloadLength * 2 + 1];\n    }\n    // Loading the payload\n    System.arraycopy(br.bytes, br.offset, this.buffer, 0, payloadLength);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#getPayload(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","sourceNew":"  /**\n   * Returns the {@link BytesRef payload} of the given document, or {@code null}\n   * if the document does not exist, there are no more documents in the posting\n   * list, or the document exists but has not payload. You should call\n   * {@link #init()} before the first call to this method.\n   */\n  public BytesRef getPayload(int docID) throws IOException {\n    if (!hasMore) {\n      return null;\n    }\n\n    // re-basing docId->localDocID is done fewer times than currentDoc->globalDoc\n    int localDocID = docID - curDocBase;\n    \n    if (curDocID > localDocID) {\n      // document does not exist\n      return null;\n    }\n    \n    if (curDocID < localDocID) {\n      // look for the document either in that segment, or others\n      while (hasMore && (curDocID = currentDPE.advance(localDocID)) == DocIdSetIterator.NO_MORE_DOCS) {\n        nextSegment(); // also updates curDocID\n        localDocID = docID - curDocBase;\n        // nextSegment advances to nextDoc, so check if we still need to advance\n        if (curDocID >= localDocID) {\n          break;\n        }\n      }\n      \n      // we break from the above loop when:\n      // 1. we iterated over all segments (hasMore=false)\n      // 2. current segment advanced to a doc, either requested or higher\n      if (!hasMore || curDocID != localDocID) {\n        return null;\n      }\n    }\n\n    // we're on the document\n    assert currentDPE.freq() == 1 : \"expecting freq=1 (got \" + currentDPE.freq() + \") term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    int pos = currentDPE.nextPosition();\n    assert pos != -1 : \"no positions for term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    return currentDPE.getPayload();\n  }\n\n","sourceOld":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n\n    // re-basing docId->localDocID is done fewer times than currentDoc->globalDoc\n    int localDocID = docId - curDocBase;\n    \n    if (curDocID > localDocID) {\n      // document does not exist\n      return false;\n    }\n    \n    if (curDocID < localDocID) {\n      // look for the document either in that segment, or others\n      while (hasMore && (curDocID = currentDPE.advance(localDocID)) == DocIdSetIterator.NO_MORE_DOCS) {\n        nextSegment(); // also updates curDocID\n        localDocID = docId - curDocBase;\n        // nextSegment advances to nextDoc, so check if we still need to advance\n        if (curDocID >= localDocID) {\n          break;\n        }\n      }\n      \n      // we break from the above loop when:\n      // 1. we iterated over all segments (hasMore=false)\n      // 2. current segment advanced to a doc, either requested or higher\n      if (!hasMore || curDocID != localDocID) {\n        return false;\n      }\n    }\n\n    // we're on the document\n    assert currentDPE.freq() == 1 : \"expecting freq=1 (got \" + currentDPE.freq() + \") term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    int pos = currentDPE.nextPosition();\n    assert pos != -1 : \"no positions for term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    data = currentDPE.getPayload();\n    return data != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#getPayload(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/PayloadIterator#setdoc(int).mjava","sourceNew":"  /**\n   * Returns the {@link BytesRef payload} of the given document, or {@code null}\n   * if the document does not exist, there are no more documents in the posting\n   * list, or the document exists but has not payload. You should call\n   * {@link #init()} before the first call to this method.\n   */\n  public BytesRef getPayload(int docID) throws IOException {\n    if (!hasMore) {\n      return null;\n    }\n\n    // re-basing docId->localDocID is done fewer times than currentDoc->globalDoc\n    int localDocID = docID - curDocBase;\n    \n    if (curDocID > localDocID) {\n      // document does not exist\n      return null;\n    }\n    \n    if (curDocID < localDocID) {\n      // look for the document either in that segment, or others\n      while (hasMore && (curDocID = currentDPE.advance(localDocID)) == DocIdSetIterator.NO_MORE_DOCS) {\n        nextSegment(); // also updates curDocID\n        localDocID = docID - curDocBase;\n        // nextSegment advances to nextDoc, so check if we still need to advance\n        if (curDocID >= localDocID) {\n          break;\n        }\n      }\n      \n      // we break from the above loop when:\n      // 1. we iterated over all segments (hasMore=false)\n      // 2. current segment advanced to a doc, either requested or higher\n      if (!hasMore || curDocID != localDocID) {\n        return null;\n      }\n    }\n\n    // we're on the document\n    assert currentDPE.freq() == 1 : \"expecting freq=1 (got \" + currentDPE.freq() + \") term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    int pos = currentDPE.nextPosition();\n    assert pos != -1 : \"no positions for term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    return currentDPE.getPayload();\n  }\n\n","sourceOld":"  /**\n   * Skip forward to document docId. Return true if this document exists and\n   * has any payload.\n   * <P>\n   * Users should call this method with increasing docIds, and implementations\n   * can assume that this is the case.\n   */\n  public boolean setdoc(int docId) throws IOException {\n    if (!hasMore) {\n      return false;\n    }\n\n    // re-basing docId->localDocID is done fewer times than currentDoc->globalDoc\n    int localDocID = docId - curDocBase;\n    \n    if (curDocID > localDocID) {\n      // document does not exist\n      return false;\n    }\n    \n    if (curDocID < localDocID) {\n      // look for the document either in that segment, or others\n      while (hasMore && (curDocID = currentDPE.advance(localDocID)) == DocIdSetIterator.NO_MORE_DOCS) {\n        nextSegment(); // also updates curDocID\n        localDocID = docId - curDocBase;\n        // nextSegment advances to nextDoc, so check if we still need to advance\n        if (curDocID >= localDocID) {\n          break;\n        }\n      }\n      \n      // we break from the above loop when:\n      // 1. we iterated over all segments (hasMore=false)\n      // 2. current segment advanced to a doc, either requested or higher\n      if (!hasMore || curDocID != localDocID) {\n        return false;\n      }\n    }\n\n    // we're on the document\n    assert currentDPE.freq() == 1 : \"expecting freq=1 (got \" + currentDPE.freq() + \") term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    int pos = currentDPE.nextPosition();\n    assert pos != -1 : \"no positions for term=\" + term + \" doc=\" + (curDocID + curDocBase);\n    data = currentDPE.getPayload();\n    return data != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["3b65d3e2c837614823b0652e54f44ff76463de22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","3b65d3e2c837614823b0652e54f44ff76463de22"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["407687e67faf6e1f02a211ca078d8e3eed631027","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"3b65d3e2c837614823b0652e54f44ff76463de22":["2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c7869f64c874ebf7f317d22c00baf2b6857797a6","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552":["c7869f64c874ebf7f317d22c00baf2b6857797a6","407687e67faf6e1f02a211ca078d8e3eed631027","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","3b65d3e2c837614823b0652e54f44ff76463de22"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"3b65d3e2c837614823b0652e54f44ff76463de22":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","4e6354dd7c71fe122926fc53d7d29f715b1283db","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}