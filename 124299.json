{"path":"src/java/org/apache/solr/util/SolrPluginUtils#flattenBooleanQuery(BooleanQuery,BooleanQuery).mjava","commits":[{"id":"0452863ee588101738d341e6e97eb87eb010052a","date":1152814944,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#flattenBooleanQuery(BooleanQuery,BooleanQuery).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#flatenBooleanQuery(BooleanQuery,BooleanQuery).mjava","sourceNew":"  /**\n   * Recursively walks the \"from\" query pulling out sub-queries and\n   * adding them to the \"to\" query.\n   *\n   * <p>\n   * Boosts are multiplied as needed.  Sub-BooleanQueryies which are not\n   * optional will not be flattened.  From will be mangled durring the walk,\n   * so do not attempt to reuse it.\n   * </p>\n   */\n  public static void flattenBooleanQuery(BooleanQuery to, BooleanQuery from) {\n\n    BooleanClause[] c = from.getClauses();\n    for (int i = 0; i < c.length; i++) {\n            \n      Query ci = c[i].getQuery();\n      ci.setBoost(ci.getBoost() * from.getBoost());\n            \n      if (ci instanceof BooleanQuery\n          && !c[i].isRequired()\n          && !c[i].isProhibited()) {\n                \n        /* we can recurse */\n        flattenBooleanQuery(to, (BooleanQuery)ci);\n                \n      } else {\n        to.add(c[i]);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recursively walks the \"from\" query pulling out sub-queries and\n   * adding them to the \"to\" query.\n   *\n   * <p>\n   * Boosts are multiplied as needed.  Sub-BooleanQueryies which are not\n   * optional will not be flattened.  From will be mangled durring the walk,\n   * so do not attempt to reuse it.\n   * </p>\n   */\n  public static void flatenBooleanQuery(BooleanQuery to, BooleanQuery from) {\n\n    BooleanClause[] c = from.getClauses();\n    for (int i = 0; i < c.length; i++) {\n            \n      Query ci = c[i].getQuery();\n      ci.setBoost(ci.getBoost() * from.getBoost());\n            \n      if (ci instanceof BooleanQuery\n          && !c[i].isRequired()\n          && !c[i].isProhibited()) {\n                \n        /* we can recurse */\n        flatenBooleanQuery(to, (BooleanQuery)ci);\n                \n      } else {\n        to.add(c[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27adc06684d74d32d4d07537a81903ffbf816d27","date":1178648148,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/SolrPluginUtils#flattenBooleanQuery(BooleanQuery,BooleanQuery).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#flattenBooleanQuery(BooleanQuery,BooleanQuery).mjava","sourceNew":"  /**\n   * Recursively walks the \"from\" query pulling out sub-queries and\n   * adding them to the \"to\" query.\n   *\n   * <p>\n   * Boosts are multiplied as needed.  Sub-BooleanQueryies which are not\n   * optional will not be flattened.  From will be mangled durring the walk,\n   * so do not attempt to reuse it.\n   * </p>\n   */\n  public static void flattenBooleanQuery(BooleanQuery to, BooleanQuery from) {\n\n    for (BooleanClause clause : (List<BooleanClause>)from.clauses()) {\n      \n      Query cq = clause.getQuery();\n      cq.setBoost(cq.getBoost() * from.getBoost());\n            \n      if (cq instanceof BooleanQuery\n          && !clause.isRequired()\n          && !clause.isProhibited()) {\n                \n        /* we can recurse */\n        flattenBooleanQuery(to, (BooleanQuery)cq);\n                \n      } else {\n        to.add(clause);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recursively walks the \"from\" query pulling out sub-queries and\n   * adding them to the \"to\" query.\n   *\n   * <p>\n   * Boosts are multiplied as needed.  Sub-BooleanQueryies which are not\n   * optional will not be flattened.  From will be mangled durring the walk,\n   * so do not attempt to reuse it.\n   * </p>\n   */\n  public static void flattenBooleanQuery(BooleanQuery to, BooleanQuery from) {\n\n    BooleanClause[] c = from.getClauses();\n    for (int i = 0; i < c.length; i++) {\n            \n      Query ci = c[i].getQuery();\n      ci.setBoost(ci.getBoost() * from.getBoost());\n            \n      if (ci instanceof BooleanQuery\n          && !c[i].isRequired()\n          && !c[i].isProhibited()) {\n                \n        /* we can recurse */\n        flattenBooleanQuery(to, (BooleanQuery)ci);\n                \n      } else {\n        to.add(c[i]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#flattenBooleanQuery(BooleanQuery,BooleanQuery).mjava","pathOld":"src/java/org/apache/solr/util/SolrPluginUtils#flattenBooleanQuery(BooleanQuery,BooleanQuery).mjava","sourceNew":"  /**\n   * Recursively walks the \"from\" query pulling out sub-queries and\n   * adding them to the \"to\" query.\n   *\n   * <p>\n   * Boosts are multiplied as needed.  Sub-BooleanQueryies which are not\n   * optional will not be flattened.  From will be mangled durring the walk,\n   * so do not attempt to reuse it.\n   * </p>\n   */\n  public static void flattenBooleanQuery(BooleanQuery to, BooleanQuery from) {\n\n    for (BooleanClause clause : (List<BooleanClause>)from.clauses()) {\n      \n      Query cq = clause.getQuery();\n      cq.setBoost(cq.getBoost() * from.getBoost());\n            \n      if (cq instanceof BooleanQuery\n          && !clause.isRequired()\n          && !clause.isProhibited()) {\n                \n        /* we can recurse */\n        flattenBooleanQuery(to, (BooleanQuery)cq);\n                \n      } else {\n        to.add(clause);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Recursively walks the \"from\" query pulling out sub-queries and\n   * adding them to the \"to\" query.\n   *\n   * <p>\n   * Boosts are multiplied as needed.  Sub-BooleanQueryies which are not\n   * optional will not be flattened.  From will be mangled durring the walk,\n   * so do not attempt to reuse it.\n   * </p>\n   */\n  public static void flattenBooleanQuery(BooleanQuery to, BooleanQuery from) {\n\n    for (BooleanClause clause : (List<BooleanClause>)from.clauses()) {\n      \n      Query cq = clause.getQuery();\n      cq.setBoost(cq.getBoost() * from.getBoost());\n            \n      if (cq instanceof BooleanQuery\n          && !clause.isRequired()\n          && !clause.isProhibited()) {\n                \n        /* we can recurse */\n        flattenBooleanQuery(to, (BooleanQuery)cq);\n                \n      } else {\n        to.add(clause);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0452863ee588101738d341e6e97eb87eb010052a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["27adc06684d74d32d4d07537a81903ffbf816d27"],"27adc06684d74d32d4d07537a81903ffbf816d27":["0452863ee588101738d341e6e97eb87eb010052a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0452863ee588101738d341e6e97eb87eb010052a":["27adc06684d74d32d4d07537a81903ffbf816d27"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0452863ee588101738d341e6e97eb87eb010052a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"27adc06684d74d32d4d07537a81903ffbf816d27":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}