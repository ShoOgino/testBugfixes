{"path":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateAndDeleteSameDocument().mjava","commits":[{"id":"06805da26538ed636bd89b10c2699cc3834032ae","date":1395132972,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateAndDeleteSameDocument().mjava","pathOld":"/dev/null","sourceNew":"  public void testUpdateAndDeleteSameDocument() throws Exception {\n    // update and delete same document in same commit session\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    writer.deleteDocuments(new Term(\"id\", \"doc-0\"));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-0\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.close();\n    }\n    \n    AtomicReader r = reader.leaves().get(0).reader();\n    assertFalse(r.getLiveDocs().get(0));\n    assertEquals(1, getValue(r.getBinaryDocValues(\"val\"), 0, new BytesRef())); // deletes are currently applied first\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateAndDeleteSameDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateAndDeleteSameDocument().mjava","sourceNew":"  public void testUpdateAndDeleteSameDocument() throws Exception {\n    // update and delete same document in same commit session\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    writer.deleteDocuments(new Term(\"id\", \"doc-0\"));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-0\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.shutdown();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.shutdown();\n    }\n    \n    AtomicReader r = reader.leaves().get(0).reader();\n    assertFalse(r.getLiveDocs().get(0));\n    assertEquals(1, getValue(r.getBinaryDocValues(\"val\"), 0, new BytesRef())); // deletes are currently applied first\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateAndDeleteSameDocument() throws Exception {\n    // update and delete same document in same commit session\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    writer.deleteDocuments(new Term(\"id\", \"doc-0\"));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-0\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.close();\n    }\n    \n    AtomicReader r = reader.leaves().get(0).reader();\n    assertFalse(r.getLiveDocs().get(0));\n    assertEquals(1, getValue(r.getBinaryDocValues(\"val\"), 0, new BytesRef())); // deletes are currently applied first\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateAndDeleteSameDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateAndDeleteSameDocument().mjava","sourceNew":"  public void testUpdateAndDeleteSameDocument() throws Exception {\n    // update and delete same document in same commit session\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    writer.deleteDocuments(new Term(\"id\", \"doc-0\"));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-0\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.shutdown();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.shutdown();\n    }\n    \n    AtomicReader r = reader.leaves().get(0).reader();\n    assertFalse(r.getLiveDocs().get(0));\n    assertEquals(1, getValue(r.getBinaryDocValues(\"val\"), 0)); // deletes are currently applied first\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateAndDeleteSameDocument() throws Exception {\n    // update and delete same document in same commit session\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    writer.deleteDocuments(new Term(\"id\", \"doc-0\"));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-0\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.shutdown();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.shutdown();\n    }\n    \n    AtomicReader r = reader.leaves().get(0).reader();\n    assertFalse(r.getLiveDocs().get(0));\n    assertEquals(1, getValue(r.getBinaryDocValues(\"val\"), 0, new BytesRef())); // deletes are currently applied first\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateAndDeleteSameDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateAndDeleteSameDocument().mjava","sourceNew":"  public void testUpdateAndDeleteSameDocument() throws Exception {\n    // update and delete same document in same commit session\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    writer.deleteDocuments(new Term(\"id\", \"doc-0\"));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-0\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.shutdown();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.shutdown();\n    }\n    \n    AtomicReader r = reader.leaves().get(0).reader();\n    assertFalse(r.getLiveDocs().get(0));\n    assertEquals(1, getValue(r.getBinaryDocValues(\"val\"), 0)); // deletes are currently applied first\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateAndDeleteSameDocument() throws Exception {\n    // update and delete same document in same commit session\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    writer.deleteDocuments(new Term(\"id\", \"doc-0\"));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-0\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.shutdown();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.shutdown();\n    }\n    \n    AtomicReader r = reader.leaves().get(0).reader();\n    assertFalse(r.getLiveDocs().get(0));\n    assertEquals(1, getValue(r.getBinaryDocValues(\"val\"), 0)); // deletes are currently applied first\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateAndDeleteSameDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateAndDeleteSameDocument().mjava","sourceNew":"  public void testUpdateAndDeleteSameDocument() throws Exception {\n    // update and delete same document in same commit session\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    writer.deleteDocuments(new Term(\"id\", \"doc-0\"));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-0\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.close();\n    }\n    \n    AtomicReader r = reader.leaves().get(0).reader();\n    assertFalse(r.getLiveDocs().get(0));\n    assertEquals(1, getValue(r.getBinaryDocValues(\"val\"), 0)); // deletes are currently applied first\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateAndDeleteSameDocument() throws Exception {\n    // update and delete same document in same commit session\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    writer.deleteDocuments(new Term(\"id\", \"doc-0\"));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-0\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.shutdown();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.shutdown();\n    }\n    \n    AtomicReader r = reader.leaves().get(0).reader();\n    assertFalse(r.getLiveDocs().get(0));\n    assertEquals(1, getValue(r.getBinaryDocValues(\"val\"), 0)); // deletes are currently applied first\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateAndDeleteSameDocument().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateAndDeleteSameDocument().mjava","sourceNew":"  public void testUpdateAndDeleteSameDocument() throws Exception {\n    // update and delete same document in same commit session\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    writer.deleteDocuments(new Term(\"id\", \"doc-0\"));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-0\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.close();\n    }\n    \n    LeafReader r = reader.leaves().get(0).reader();\n    assertFalse(r.getLiveDocs().get(0));\n    assertEquals(1, getValue(r.getBinaryDocValues(\"val\"), 0)); // deletes are currently applied first\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testUpdateAndDeleteSameDocument() throws Exception {\n    // update and delete same document in same commit session\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    writer.deleteDocuments(new Term(\"id\", \"doc-0\"));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-0\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.close();\n    }\n    \n    AtomicReader r = reader.leaves().get(0).reader();\n    assertFalse(r.getLiveDocs().get(0));\n    assertEquals(1, getValue(r.getBinaryDocValues(\"val\"), 0)); // deletes are currently applied first\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4c214a1f904dde76f5611b56d4081533055b3b","date":1421938451,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBinaryDocValuesUpdates#testUpdateAndDeleteSameDocument().mjava","sourceNew":null,"sourceOld":"  public void testUpdateAndDeleteSameDocument() throws Exception {\n    // update and delete same document in same commit session\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // control segment flushing\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    writer.addDocument(doc(0));\n    writer.addDocument(doc(1));\n    \n    if (random().nextBoolean()) {\n      writer.commit();\n    }\n    \n    writer.deleteDocuments(new Term(\"id\", \"doc-0\"));\n    writer.updateBinaryDocValue(new Term(\"id\", \"doc-0\"), \"val\", toBytes(17L));\n    \n    final DirectoryReader reader;\n    if (random().nextBoolean()) { // not NRT\n      writer.close();\n      reader = DirectoryReader.open(dir);\n    } else { // NRT\n      reader = DirectoryReader.open(writer, true);\n      writer.close();\n    }\n    \n    LeafReader r = reader.leaves().get(0).reader();\n    assertFalse(r.getLiveDocs().get(0));\n    assertEquals(1, getValue(r.getBinaryDocValues(\"val\"), 0)); // deletes are currently applied first\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"7e4c214a1f904dde76f5611b56d4081533055b3b":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"06805da26538ed636bd89b10c2699cc3834032ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["06805da26538ed636bd89b10c2699cc3834032ae"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e4c214a1f904dde76f5611b56d4081533055b3b"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06805da26538ed636bd89b10c2699cc3834032ae"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"7e4c214a1f904dde76f5611b56d4081533055b3b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06805da26538ed636bd89b10c2699cc3834032ae":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}