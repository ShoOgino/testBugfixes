{"path":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#assertAwareCompatibility(Class,Object).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#assertAwareCompatibility(Class,Object).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#assertAwareCompatibility(Class,Object).mjava","sourceNew":"  /**\n   * Utility function to throw an exception if the class is invalid\n   */\n  void assertAwareCompatibility( Class aware, Object obj )\n  {\n    Class[] valid = awareCompatibility.get( aware );\n    if( valid == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Aware interface: \"+aware );\n    }\n    for( Class v : valid ) {\n      if( v.isInstance( obj ) ) {\n        return;\n      }\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append( \"Invalid 'Aware' object: \" ).append( obj );\n    builder.append( \" -- \").append( aware.getName() );\n    builder.append(  \" must be an instance of: \" );\n    for( Class v : valid ) {\n      builder.append( \"[\" ).append( v.getName() ).append( \"] \") ;\n    }\n    throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, builder.toString() );\n  }\n\n","sourceOld":"  /**\n   * Utility function to throw an exception if the class is invalid\n   */\n  void assertAwareCompatibility( Class aware, Object obj )\n  {\n    Class[] valid = awareCompatibility.get( aware );\n    if( valid == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Aware interface: \"+aware );\n    }\n    for( Class v : valid ) {\n      if( v.isInstance( obj ) ) {\n        return;\n      }\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append( \"Invalid 'Aware' object: \" ).append( obj );\n    builder.append( \" -- \").append( aware.getName() );\n    builder.append(  \" must be an instance of: \" );\n    for( Class v : valid ) {\n      builder.append( \"[\" ).append( v.getName() ).append( \"] \") ;\n    }\n    throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, builder.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#assertAwareCompatibility(Class,Object).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#assertAwareCompatibility(Class,Object).mjava","sourceNew":"  /**\n   * Utility function to throw an exception if the class is invalid\n   */\n  void assertAwareCompatibility( Class aware, Object obj )\n  {\n    Class[] valid = awareCompatibility.get( aware );\n    if( valid == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Aware interface: \"+aware );\n    }\n    for( Class v : valid ) {\n      if( v.isInstance( obj ) ) {\n        return;\n      }\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append( \"Invalid 'Aware' object: \" ).append( obj );\n    builder.append( \" -- \").append( aware.getName() );\n    builder.append(  \" must be an instance of: \" );\n    for( Class v : valid ) {\n      builder.append( \"[\" ).append( v.getName() ).append( \"] \") ;\n    }\n    throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, builder.toString() );\n  }\n\n","sourceOld":"  /**\n   * Utility function to throw an exception if the class is invalid\n   */\n  void assertAwareCompatibility( Class aware, Object obj )\n  {\n    Class[] valid = awareCompatibility.get( aware );\n    if( valid == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Aware interface: \"+aware );\n    }\n    for( Class v : valid ) {\n      if( v.isInstance( obj ) ) {\n        return;\n      }\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append( \"Invalid 'Aware' object: \" ).append( obj );\n    builder.append( \" -- \").append( aware.getName() );\n    builder.append(  \" must be an instance of: \" );\n    for( Class v : valid ) {\n      builder.append( \"[\" ).append( v.getName() ).append( \"] \") ;\n    }\n    throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, builder.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#assertAwareCompatibility(Class,Object).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrResourceLoader#assertAwareCompatibility(Class,Object).mjava","sourceNew":"  /**\n   * Utility function to throw an exception if the class is invalid\n   */\n  void assertAwareCompatibility( Class aware, Object obj )\n  {\n    Class[] valid = awareCompatibility.get( aware );\n    if( valid == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Aware interface: \"+aware );\n    }\n    for( Class v : valid ) {\n      if( v.isInstance( obj ) ) {\n        return;\n      }\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append( \"Invalid 'Aware' object: \" ).append( obj );\n    builder.append( \" -- \").append( aware.getName() );\n    builder.append(  \" must be an instance of: \" );\n    for( Class v : valid ) {\n      builder.append( \"[\" ).append( v.getName() ).append( \"] \") ;\n    }\n    throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, builder.toString() );\n  }\n\n","sourceOld":"  /**\n   * Utility function to throw an exception if the class is invalid\n   */\n  void assertAwareCompatibility( Class aware, Object obj )\n  {\n    Class[] valid = awareCompatibility.get( aware );\n    if( valid == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Aware interface: \"+aware );\n    }\n    for( Class v : valid ) {\n      if( v.isInstance( obj ) ) {\n        return;\n      }\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append( \"Invalid 'Aware' object: \" ).append( obj );\n    builder.append( \" -- \").append( aware.getName() );\n    builder.append(  \" must be an instance of: \" );\n    for( Class v : valid ) {\n      builder.append( \"[\" ).append( v.getName() ).append( \"] \") ;\n    }\n    throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, builder.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34413af2ffe8be7ac2af245bbcc9fd212ae20d38","date":1425389089,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#assertAwareCompatibility(Class,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#assertAwareCompatibility(Class,Object).mjava","sourceNew":"  /**\n   * Utility function to throw an exception if the class is invalid\n   */\n  static void assertAwareCompatibility( Class aware, Object obj )\n  {\n    Class[] valid = awareCompatibility.get( aware );\n    if( valid == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Aware interface: \"+aware );\n    }\n    for( Class v : valid ) {\n      if( v.isInstance( obj ) ) {\n        return;\n      }\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append( \"Invalid 'Aware' object: \" ).append( obj );\n    builder.append( \" -- \").append( aware.getName() );\n    builder.append(  \" must be an instance of: \" );\n    for( Class v : valid ) {\n      builder.append( \"[\" ).append( v.getName() ).append( \"] \") ;\n    }\n    throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, builder.toString() );\n  }\n\n","sourceOld":"  /**\n   * Utility function to throw an exception if the class is invalid\n   */\n  void assertAwareCompatibility( Class aware, Object obj )\n  {\n    Class[] valid = awareCompatibility.get( aware );\n    if( valid == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Aware interface: \"+aware );\n    }\n    for( Class v : valid ) {\n      if( v.isInstance( obj ) ) {\n        return;\n      }\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append( \"Invalid 'Aware' object: \" ).append( obj );\n    builder.append( \" -- \").append( aware.getName() );\n    builder.append(  \" must be an instance of: \" );\n    for( Class v : valid ) {\n      builder.append( \"[\" ).append( v.getName() ).append( \"] \") ;\n    }\n    throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, builder.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#assertAwareCompatibility(Class,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#assertAwareCompatibility(Class,Object).mjava","sourceNew":"  /**\n   * Utility function to throw an exception if the class is invalid\n   */\n  static void assertAwareCompatibility( Class aware, Object obj )\n  {\n    Class[] valid = awareCompatibility.get( aware );\n    if( valid == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Aware interface: \"+aware );\n    }\n    for( Class v : valid ) {\n      if( v.isInstance( obj ) ) {\n        return;\n      }\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append( \"Invalid 'Aware' object: \" ).append( obj );\n    builder.append( \" -- \").append( aware.getName() );\n    builder.append(  \" must be an instance of: \" );\n    for( Class v : valid ) {\n      builder.append( \"[\" ).append( v.getName() ).append( \"] \") ;\n    }\n    throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, builder.toString() );\n  }\n\n","sourceOld":"  /**\n   * Utility function to throw an exception if the class is invalid\n   */\n  void assertAwareCompatibility( Class aware, Object obj )\n  {\n    Class[] valid = awareCompatibility.get( aware );\n    if( valid == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Aware interface: \"+aware );\n    }\n    for( Class v : valid ) {\n      if( v.isInstance( obj ) ) {\n        return;\n      }\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append( \"Invalid 'Aware' object: \" ).append( obj );\n    builder.append( \" -- \").append( aware.getName() );\n    builder.append(  \" must be an instance of: \" );\n    for( Class v : valid ) {\n      builder.append( \"[\" ).append( v.getName() ).append( \"] \") ;\n    }\n    throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, builder.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#assertAwareCompatibility(Class,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#assertAwareCompatibility(Class,Object).mjava","sourceNew":"  /**\n   * Utility function to throw an exception if the class is invalid\n   */\n  static void assertAwareCompatibility(Class aware, Object obj) {\n    Class[] valid = awareCompatibility.get(aware);\n    if (valid == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Aware interface: \" + aware);\n    }\n    for (Class v : valid) {\n      if (v.isInstance(obj)) {\n        return;\n      }\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"Invalid 'Aware' object: \").append(obj);\n    builder.append(\" -- \").append(aware.getName());\n    builder.append(\" must be an instance of: \");\n    for (Class v : valid) {\n      builder.append(\"[\").append(v.getName()).append(\"] \");\n    }\n    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, builder.toString());\n  }\n\n","sourceOld":"  /**\n   * Utility function to throw an exception if the class is invalid\n   */\n  static void assertAwareCompatibility( Class aware, Object obj )\n  {\n    Class[] valid = awareCompatibility.get( aware );\n    if( valid == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Aware interface: \"+aware );\n    }\n    for( Class v : valid ) {\n      if( v.isInstance( obj ) ) {\n        return;\n      }\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append( \"Invalid 'Aware' object: \" ).append( obj );\n    builder.append( \" -- \").append( aware.getName() );\n    builder.append(  \" must be an instance of: \" );\n    for( Class v : valid ) {\n      builder.append( \"[\" ).append( v.getName() ).append( \"] \") ;\n    }\n    throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, builder.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7757ad4a47d8b36bb6894c5ad33f766b4ddfa389","date":1591056099,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#assertAwareCompatibility(Class,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#assertAwareCompatibility(Class,Object).mjava","sourceNew":"  /**\n   * Utility function to throw an exception if the class is invalid\n   */\n  public static void assertAwareCompatibility(Class aware, Object obj) {\n    Class[] valid = awareCompatibility.get(aware);\n    if (valid == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Aware interface: \" + aware);\n    }\n    for (Class v : valid) {\n      if (v.isInstance(obj)) {\n        return;\n      }\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"Invalid 'Aware' object: \").append(obj);\n    builder.append(\" -- \").append(aware.getName());\n    builder.append(\" must be an instance of: \");\n    for (Class v : valid) {\n      builder.append(\"[\").append(v.getName()).append(\"] \");\n    }\n    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, builder.toString());\n  }\n\n","sourceOld":"  /**\n   * Utility function to throw an exception if the class is invalid\n   */\n  static void assertAwareCompatibility(Class aware, Object obj) {\n    Class[] valid = awareCompatibility.get(aware);\n    if (valid == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Aware interface: \" + aware);\n    }\n    for (Class v : valid) {\n      if (v.isInstance(obj)) {\n        return;\n      }\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"Invalid 'Aware' object: \").append(obj);\n    builder.append(\" -- \").append(aware.getName());\n    builder.append(\" must be an instance of: \");\n    for (Class v : valid) {\n      builder.append(\"[\").append(v.getName()).append(\"] \");\n    }\n    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, builder.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#assertAwareCompatibility(Class,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#assertAwareCompatibility(Class,Object).mjava","sourceNew":"  /**\n   * Utility function to throw an exception if the class is invalid\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public static void assertAwareCompatibility(Class aware, Object obj) {\n    Class[] valid = awareCompatibility.get(aware);\n    if (valid == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Aware interface: \" + aware);\n    }\n    for (Class v : valid) {\n      if (v.isInstance(obj)) {\n        return;\n      }\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"Invalid 'Aware' object: \").append(obj);\n    builder.append(\" -- \").append(aware.getName());\n    builder.append(\" must be an instance of: \");\n    for (Class v : valid) {\n      builder.append(\"[\").append(v.getName()).append(\"] \");\n    }\n    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, builder.toString());\n  }\n\n","sourceOld":"  /**\n   * Utility function to throw an exception if the class is invalid\n   */\n  public static void assertAwareCompatibility(Class aware, Object obj) {\n    Class[] valid = awareCompatibility.get(aware);\n    if (valid == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Aware interface: \" + aware);\n    }\n    for (Class v : valid) {\n      if (v.isInstance(obj)) {\n        return;\n      }\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"Invalid 'Aware' object: \").append(obj);\n    builder.append(\" -- \").append(aware.getName());\n    builder.append(\" must be an instance of: \");\n    for (Class v : valid) {\n      builder.append(\"[\").append(v.getName()).append(\"] \");\n    }\n    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, builder.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f53fd7227ce17ccc6445b3433d004cb6ac33e08a","date":1600333804,"type":3,"author":"noblepaul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#assertAwareCompatibility(Class,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#assertAwareCompatibility(Class,Object).mjava","sourceNew":"  /**\n   * Utility function to throw an exception if the class is invalid\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public static Class assertAwareCompatibility(Class aware, Object obj) {\n    Class[] valid = awareCompatibility.get(aware);\n    if (valid == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Aware interface: \" + aware);\n    }\n    for (Class v : valid) {\n      if (v.isInstance(obj)) {\n        return v;\n      }\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"Invalid 'Aware' object: \").append(obj);\n    builder.append(\" -- \").append(aware.getName());\n    builder.append(\" must be an instance of: \");\n    for (Class v : valid) {\n      builder.append(\"[\").append(v.getName()).append(\"] \");\n    }\n    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, builder.toString());\n  }\n\n","sourceOld":"  /**\n   * Utility function to throw an exception if the class is invalid\n   */\n  @SuppressWarnings({\"rawtypes\"})\n  public static void assertAwareCompatibility(Class aware, Object obj) {\n    Class[] valid = awareCompatibility.get(aware);\n    if (valid == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Aware interface: \" + aware);\n    }\n    for (Class v : valid) {\n      if (v.isInstance(obj)) {\n        return;\n      }\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"Invalid 'Aware' object: \").append(obj);\n    builder.append(\" -- \").append(aware.getName());\n    builder.append(\" must be an instance of: \");\n    for (Class v : valid) {\n      builder.append(\"[\").append(v.getName()).append(\"] \");\n    }\n    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, builder.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c26f00b574427b55127e869b935845554afde1fa","34413af2ffe8be7ac2af245bbcc9fd212ae20d38"],"f53fd7227ce17ccc6445b3433d004cb6ac33e08a":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["7757ad4a47d8b36bb6894c5ad33f766b4ddfa389"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["34413af2ffe8be7ac2af245bbcc9fd212ae20d38"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"34413af2ffe8be7ac2af245bbcc9fd212ae20d38":["c26f00b574427b55127e869b935845554afde1fa"],"7757ad4a47d8b36bb6894c5ad33f766b4ddfa389":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f53fd7227ce17ccc6445b3433d004cb6ac33e08a"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"f53fd7227ce17ccc6445b3433d004cb6ac33e08a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["f53fd7227ce17ccc6445b3433d004cb6ac33e08a"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["7757ad4a47d8b36bb6894c5ad33f766b4ddfa389"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","34413af2ffe8be7ac2af245bbcc9fd212ae20d38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"34413af2ffe8be7ac2af245bbcc9fd212ae20d38":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","954ae83b7dfacaa33d48ea056448ae11f7745a93"],"7757ad4a47d8b36bb6894c5ad33f766b4ddfa389":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}