{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest#constantParsingTest().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest#constantParsingTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void constantParsingTest() throws DateTimeParseException {\n    // Int\n    AnalyticsValueStream uncasted = ConstantValue.creatorFunction.apply(\"1234\");\n    assertTrue(uncasted instanceof ConstantIntValue);\n    assertEquals(1234, ((ConstantIntValue)uncasted).getInt());\n\n    // Long\n    uncasted = ConstantValue.creatorFunction.apply(\"1234123412341234\");\n    assertTrue(uncasted instanceof ConstantLongValue);\n    assertEquals(1234123412341234L, ((ConstantLongValue)uncasted).getLong());\n\n    // Floats cannot currently be implicitly created\n\n    // Double\n    uncasted = ConstantValue.creatorFunction.apply(\"12341234.12341234\");\n    assertTrue(uncasted instanceof ConstantDoubleValue);\n    assertEquals(12341234.12341234, ((ConstantDoubleValue)uncasted).getDouble(), .000000001);\n\n    // String\n    uncasted = ConstantValue.creatorFunction.apply(\"'abcdef'\");\n    assertTrue(uncasted instanceof ConstantStringValue);\n    assertEquals(\"abcdef\", ((ConstantStringValue)uncasted).getString());\n    \n    uncasted = ConstantValue.creatorFunction.apply(\"\\\"abcdef\\\"\");\n    assertTrue(uncasted instanceof ConstantStringValue);\n    assertEquals(\"abcdef\", ((ConstantStringValue)uncasted).getString());\n\n    // Date\n    uncasted = ConstantValue.creatorFunction.apply(\"1800-01-01T10:30:15.33Z\");\n    assertTrue(uncasted instanceof ConstantDateValue);\n    assertEquals(Date.from(Instant.parse(\"1800-01-01T10:30:15.33Z\")), ((ConstantDateValue)uncasted).getDate());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest#constantParsingTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest#constantParsingTest().mjava","sourceNew":"  @Test\n  public void constantParsingTest() throws DateTimeParseException {\n    // Int\n    AnalyticsValueStream uncasted = ConstantValue.creatorFunction.apply(\"1234\");\n    assertTrue(uncasted instanceof ConstantIntValue);\n    assertEquals(1234, ((ConstantIntValue)uncasted).getInt());\n\n    // Long\n    uncasted = ConstantValue.creatorFunction.apply(\"1234123412341234\");\n    assertTrue(uncasted instanceof ConstantLongValue);\n    assertEquals(1234123412341234L, ((ConstantLongValue)uncasted).getLong());\n\n    // Floats cannot currently be implicitly created\n\n    // Double\n    uncasted = ConstantValue.creatorFunction.apply(\"12341234.12341234\");\n    assertTrue(uncasted instanceof ConstantDoubleValue);\n    assertEquals(12341234.12341234, ((ConstantDoubleValue)uncasted).getDouble(), .000000001);\n\n    // String\n    uncasted = ConstantValue.creatorFunction.apply(\"'abcdef'\");\n    assertTrue(uncasted instanceof ConstantStringValue);\n    assertEquals(\"abcdef\", ((ConstantStringValue)uncasted).getString());\n\n    uncasted = ConstantValue.creatorFunction.apply(\"\\\"abcdef\\\"\");\n    assertTrue(uncasted instanceof ConstantStringValue);\n    assertEquals(\"abcdef\", ((ConstantStringValue)uncasted).getString());\n\n    // Date\n    uncasted = ConstantValue.creatorFunction.apply(\"1800-01-01T10:30:15.33Z\");\n    assertTrue(uncasted instanceof ConstantDateValue);\n    assertEquals(Date.from(Instant.parse(\"1800-01-01T10:30:15.33Z\")), ((ConstantDateValue)uncasted).getDate());\n  }\n\n","sourceOld":"  @Test\n  public void constantParsingTest() throws DateTimeParseException {\n    // Int\n    AnalyticsValueStream uncasted = ConstantValue.creatorFunction.apply(\"1234\");\n    assertTrue(uncasted instanceof ConstantIntValue);\n    assertEquals(1234, ((ConstantIntValue)uncasted).getInt());\n\n    // Long\n    uncasted = ConstantValue.creatorFunction.apply(\"1234123412341234\");\n    assertTrue(uncasted instanceof ConstantLongValue);\n    assertEquals(1234123412341234L, ((ConstantLongValue)uncasted).getLong());\n\n    // Floats cannot currently be implicitly created\n\n    // Double\n    uncasted = ConstantValue.creatorFunction.apply(\"12341234.12341234\");\n    assertTrue(uncasted instanceof ConstantDoubleValue);\n    assertEquals(12341234.12341234, ((ConstantDoubleValue)uncasted).getDouble(), .000000001);\n\n    // String\n    uncasted = ConstantValue.creatorFunction.apply(\"'abcdef'\");\n    assertTrue(uncasted instanceof ConstantStringValue);\n    assertEquals(\"abcdef\", ((ConstantStringValue)uncasted).getString());\n    \n    uncasted = ConstantValue.creatorFunction.apply(\"\\\"abcdef\\\"\");\n    assertTrue(uncasted instanceof ConstantStringValue);\n    assertEquals(\"abcdef\", ((ConstantStringValue)uncasted).getString());\n\n    // Date\n    uncasted = ConstantValue.creatorFunction.apply(\"1800-01-01T10:30:15.33Z\");\n    assertTrue(uncasted instanceof ConstantDateValue);\n    assertEquals(Date.from(Instant.parse(\"1800-01-01T10:30:15.33Z\")), ((ConstantDateValue)uncasted).getDate());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest#constantParsingTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest#constantParsingTest().mjava","sourceNew":"  @Test\n  public void constantParsingTest() throws DateTimeParseException {\n    // Int\n    AnalyticsValueStream uncasted = ConstantValue.creatorFunction.apply(\"1234\");\n    assertTrue(uncasted instanceof ConstantIntValue);\n    assertEquals(1234, ((ConstantIntValue)uncasted).getInt());\n\n    // Long\n    uncasted = ConstantValue.creatorFunction.apply(\"1234123412341234\");\n    assertTrue(uncasted instanceof ConstantLongValue);\n    assertEquals(1234123412341234L, ((ConstantLongValue)uncasted).getLong());\n\n    // Floats cannot currently be implicitly created\n\n    // Double\n    uncasted = ConstantValue.creatorFunction.apply(\"12341234.12341234\");\n    assertTrue(uncasted instanceof ConstantDoubleValue);\n    assertEquals(12341234.12341234, ((ConstantDoubleValue)uncasted).getDouble(), .000000001);\n\n    // String\n    uncasted = ConstantValue.creatorFunction.apply(\"'abcdef'\");\n    assertTrue(uncasted instanceof ConstantStringValue);\n    assertEquals(\"abcdef\", ((ConstantStringValue)uncasted).getString());\n\n    uncasted = ConstantValue.creatorFunction.apply(\"\\\"abcdef\\\"\");\n    assertTrue(uncasted instanceof ConstantStringValue);\n    assertEquals(\"abcdef\", ((ConstantStringValue)uncasted).getString());\n\n    // Date\n    uncasted = ConstantValue.creatorFunction.apply(\"1800-01-01T10:30:15.33Z\");\n    assertTrue(uncasted instanceof ConstantDateValue);\n    assertEquals(Date.from(Instant.parse(\"1800-01-01T10:30:15.33Z\")), ((ConstantDateValue)uncasted).getDate());\n  }\n\n","sourceOld":"  @Test\n  public void constantParsingTest() throws DateTimeParseException {\n    // Int\n    AnalyticsValueStream uncasted = ConstantValue.creatorFunction.apply(\"1234\");\n    assertTrue(uncasted instanceof ConstantIntValue);\n    assertEquals(1234, ((ConstantIntValue)uncasted).getInt());\n\n    // Long\n    uncasted = ConstantValue.creatorFunction.apply(\"1234123412341234\");\n    assertTrue(uncasted instanceof ConstantLongValue);\n    assertEquals(1234123412341234L, ((ConstantLongValue)uncasted).getLong());\n\n    // Floats cannot currently be implicitly created\n\n    // Double\n    uncasted = ConstantValue.creatorFunction.apply(\"12341234.12341234\");\n    assertTrue(uncasted instanceof ConstantDoubleValue);\n    assertEquals(12341234.12341234, ((ConstantDoubleValue)uncasted).getDouble(), .000000001);\n\n    // String\n    uncasted = ConstantValue.creatorFunction.apply(\"'abcdef'\");\n    assertTrue(uncasted instanceof ConstantStringValue);\n    assertEquals(\"abcdef\", ((ConstantStringValue)uncasted).getString());\n    \n    uncasted = ConstantValue.creatorFunction.apply(\"\\\"abcdef\\\"\");\n    assertTrue(uncasted instanceof ConstantStringValue);\n    assertEquals(\"abcdef\", ((ConstantStringValue)uncasted).getString());\n\n    // Date\n    uncasted = ConstantValue.creatorFunction.apply(\"1800-01-01T10:30:15.33Z\");\n    assertTrue(uncasted instanceof ConstantDateValue);\n    assertEquals(Date.from(Instant.parse(\"1800-01-01T10:30:15.33Z\")), ((ConstantDateValue)uncasted).getDate());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}