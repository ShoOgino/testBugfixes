{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","sourceNew":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        RAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=new MockRAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        RAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new MockRAMDirectory();\n        ramDirectory2=new MockRAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","sourceOld":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        RAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=new MockRAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        RAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new MockRAMDirectory();\n        ramDirectory2=new MockRAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiSearcher#testNormalization(int,String).mjava","sourceNew":null,"sourceOld":"    private void testNormalization(int nDocs, String message) throws IOException {\n        Query query=new TermQuery(new Term(\"contents\", \"doc0\"));\n        \n        RAMDirectory ramDirectory1;\n        IndexSearcher indexSearcher1;\n        ScoreDoc[] hits;\n        \n        ramDirectory1=new MockRAMDirectory();\n        \n        // First put the documents in the same index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory1, nDocs, false, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        \n        hits=indexSearcher1.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // Store the scores for use later\n        float[] scores={ hits[0].score, hits[1].score };\n        \n        assertTrue(message, scores[0] > scores[1]);\n        \n        indexSearcher1.close();\n        ramDirectory1.close();\n        hits=null;\n        \n        \n        \n        RAMDirectory ramDirectory2;\n        IndexSearcher indexSearcher2;\n        \n        ramDirectory1=new MockRAMDirectory();\n        ramDirectory2=new MockRAMDirectory();\n        \n        // Now put the documents in a different index\n        initIndex(ramDirectory1, nDocs, true, null); // documents with a single token \"doc0\", \"doc1\", etc...\n        initIndex(ramDirectory2, nDocs, true, \"x\"); // documents with two tokens \"doc0\" and \"x\", \"doc1\" and x, etc...\n        \n        indexSearcher1=new IndexSearcher(ramDirectory1, true);\n        indexSearcher1.setDefaultFieldSortScoring(true, true);\n        indexSearcher2=new IndexSearcher(ramDirectory2, true);\n        indexSearcher2.setDefaultFieldSortScoring(true, true);\n        \n        Searcher searcher=getMultiSearcherInstance(new Searcher[] { indexSearcher1, indexSearcher2 });\n        \n        hits=searcher.search(query, null, 1000).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        // The scores should be the same (within reason)\n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        \n        \n        // Adding a Sort.RELEVANCE object should not change anything\n        hits=searcher.search(query, null, 1000, Sort.RELEVANCE).scoreDocs;\n        \n        assertEquals(message, 2, hits.length);\n        \n        assertEquals(message, scores[0], hits[0].score, 1e-6); // This will a document from ramDirectory1\n        assertEquals(message, scores[1], hits[1].score, 1e-6); // This will a document from ramDirectory2\n        \n        searcher.close();\n        \n        ramDirectory1.close();\n        ramDirectory2.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}