{"path":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFail(SolrParams,ErrorCode,String).mjava","commits":[{"id":"d5bc8e25f59990525f5beb14afe9c96240dcf4a2","date":1389042945,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFail(SolrParams,ErrorCode,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * execute a local request, verify that we get an expected error\n   */\n  public void assertFail(SolrParams p, ErrorCode expCode, String expSubstr) \n    throws Exception {\n\n    try {\n      ignoreException(expSubstr);\n      assertJQ(req(p));\n      fail(\"no exception matching expected: \" + expCode.code + \": \" + expSubstr);\n    } catch (SolrException e) {\n      assertEquals(expCode.code, e.code());\n      assertTrue(\"Expected substr not found: \" + expSubstr + \" <!< \" + e.getMessage(),\n                 e.getMessage().contains(expSubstr));\n    } finally {\n      unIgnoreException(expSubstr);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92f789dbd1886e4b468e61b0def88b29a3f55228","date":1533844010,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFail(SolrParams,ErrorCode,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/CursorPagingTest#assertFail(SolrParams,ErrorCode,String).mjava","sourceNew":"  /**\n   * execute a local request, verify that we get an expected error\n   */\n  public void assertFail(SolrParams p, ErrorCode expCode, String expSubstr) \n    throws Exception {\n\n    try {\n      SolrException e = expectThrows(SolrException.class, () -> {\n        ignoreException(expSubstr);\n        assertJQ(req(p));\n      });\n      assertEquals(expCode.code, e.code());\n      assertTrue(\"Expected substr not found: \" + expSubstr + \" <!< \" + e.getMessage(),\n          e.getMessage().contains(expSubstr));\n    } finally {\n      unIgnoreException(expSubstr);\n    }\n  }\n\n","sourceOld":"  /**\n   * execute a local request, verify that we get an expected error\n   */\n  public void assertFail(SolrParams p, ErrorCode expCode, String expSubstr) \n    throws Exception {\n\n    try {\n      ignoreException(expSubstr);\n      assertJQ(req(p));\n      fail(\"no exception matching expected: \" + expCode.code + \": \" + expSubstr);\n    } catch (SolrException e) {\n      assertEquals(expCode.code, e.code());\n      assertTrue(\"Expected substr not found: \" + expSubstr + \" <!< \" + e.getMessage(),\n                 e.getMessage().contains(expSubstr));\n    } finally {\n      unIgnoreException(expSubstr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f789dbd1886e4b468e61b0def88b29a3f55228":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92f789dbd1886e4b468e61b0def88b29a3f55228"]},"commit2Childs":{"d5bc8e25f59990525f5beb14afe9c96240dcf4a2":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d5bc8e25f59990525f5beb14afe9c96240dcf4a2"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}