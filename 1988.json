{"path":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#main(String[]).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    final String wordsFileIn = args[0];\n    final String dirOut = args[1];\n    int idx = 2;\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    while(idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1+idx]);\n        idx++;\n      }\n      if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1+idx]);\n        idx++;\n      }\n      if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      }\n      if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      }\n      if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      }\n      if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      }\n      idx++;\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    final String wordsFileIn = args[0];\n    final String dirOut = args[1];\n    int idx = 2;\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    while(idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1+idx]);\n        idx++;\n      }\n      if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1+idx]);\n        idx++;\n      }\n      if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      }\n      if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      }\n      if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      }\n      if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      }\n      idx++;\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    final String wordsFileIn = args[0];\n    final String dirOut = args[1];\n    int idx = 2;\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    while(idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1+idx]);\n        idx++;\n      }\n      if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1+idx]);\n        idx++;\n      }\n      if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      }\n      if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      }\n      if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      }\n      if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      }\n      idx++;\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df809bb5acd66e34fc29697ed01665134238ff8f","date":1300191603,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    final String wordsFileIn = args[0];\n    final String dirOut = args[1];\n    int idx = 2;\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    while(idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1+idx]);\n        idx++;\n      }\n      if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1+idx]);\n        idx++;\n      }\n      if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      }\n      if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      }\n      if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      }\n      if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      }\n      if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      }\n      idx++;\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    final String wordsFileIn = args[0];\n    final String dirOut = args[1];\n    int idx = 2;\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    while(idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1+idx]);\n        idx++;\n      }\n      if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1+idx]);\n        idx++;\n      }\n      if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      }\n      if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      }\n      if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      }\n      if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      }\n      idx++;\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d734f51d4813b2acce6647edbd4e998076b35307","date":1300885847,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    final String wordsFileIn = args[0];\n    final String dirOut = args[1];\n    int idx = 2;\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    while(idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1+idx]);\n        idx++;\n      }\n      if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1+idx]);\n        idx++;\n      }\n      if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      }\n      if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      }\n      if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      }\n      if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      }\n      if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      }\n      idx++;\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    final String wordsFileIn = args[0];\n    final String dirOut = args[1];\n    int idx = 2;\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    while(idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1+idx]);\n        idx++;\n      }\n      if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1+idx]);\n        idx++;\n      }\n      if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      }\n      if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      }\n      if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      }\n      if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      }\n      idx++;\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    final String wordsFileIn = args[0];\n    final String dirOut = args[1];\n    int idx = 2;\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    while(idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1+idx]);\n        idx++;\n      }\n      if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1+idx]);\n        idx++;\n      }\n      if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      }\n      if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      }\n      if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      }\n      if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      }\n      idx++;\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#main(String[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#main(String[]).mjava","sourceNew":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","sourceOld":"  // java -cp build/classes/test:build/classes/java:lib/junit-4.7.jar org.apache.lucene.util.automaton.fst.TestFSTs /x/tmp/allTerms3.txt out\n  public static void main(String[] args) throws IOException {\n    int prune = 0;\n    int limit = Integer.MAX_VALUE;\n    int inputMode = 0;                             // utf8\n    boolean storeOrds = false;\n    boolean storeDocFreqs = false;\n    boolean verify = true;\n    \n    String wordsFileIn = null;\n    String dirOut = null;\n\n    int idx = 0;\n    while (idx < args.length) {\n      if (args[idx].equals(\"-prune\")) {\n        prune = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-limit\")) {\n        limit = Integer.valueOf(args[1 + idx]);\n        idx++;\n      } else if (args[idx].equals(\"-utf8\")) {\n        inputMode = 0;\n      } else if (args[idx].equals(\"-utf32\")) {\n        inputMode = 1;\n      } else if (args[idx].equals(\"-docFreq\")) {\n        storeDocFreqs = true;\n      } else if (args[idx].equals(\"-ords\")) {\n        storeOrds = true;\n      } else if (args[idx].equals(\"-noverify\")) {\n        verify = false;\n      } else if (args[idx].startsWith(\"-\")) {\n        System.err.println(\"Unrecognized option: \" + args[idx]);\n        System.exit(-1);\n      } else {\n        if (wordsFileIn == null) {\n          wordsFileIn = args[idx];\n        } else if (dirOut == null) {\n          dirOut = args[idx];\n        } else {\n          System.err.println(\"Too many arguments, expected: input [output]\");\n          System.exit(-1);\n        }\n      }\n      idx++;\n    }\n    \n    if (wordsFileIn == null) {\n      System.err.println(\"No input file.\");\n      System.exit(-1);\n    }\n\n    // ord benefits from share, docFreqs don't:\n\n    if (storeOrds && storeDocFreqs) {\n      // Store both ord & docFreq:\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(true);\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(false);\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      new VisitTerms<PairOutputs.Pair<Long,Long>>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public PairOutputs.Pair<Long,Long> getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return new PairOutputs.Pair<Long,Long>(o1.get(ord),\n                                                 o2.get(_TestUtil.nextInt(rand, 1, 5000)));\n        }\n      }.run(limit, verify);\n    } else if (storeOrds) {\n      // Store only ords\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          return outputs.get(ord);\n        }\n      }.run(limit, verify);\n    } else if (storeDocFreqs) {\n      // Store only docFreq\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(false);\n      new VisitTerms<Long>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        Random rand;\n        @Override\n        public Long getOutput(IntsRef input, int ord) {\n          if (ord == 0) {\n            rand = new Random(17);\n          }\n          return outputs.get(_TestUtil.nextInt(rand, 1, 5000));\n        }\n      }.run(limit, verify);\n    } else {\n      // Store nothing\n      final NoOutputs outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();\n      new VisitTerms<Object>(dirOut, wordsFileIn, inputMode, prune, outputs) {\n        @Override\n        public Object getOutput(IntsRef input, int ord) {\n          return NO_OUTPUT;\n        }\n      }.run(limit, verify);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d734f51d4813b2acce6647edbd4e998076b35307"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["d734f51d4813b2acce6647edbd4e998076b35307"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","d734f51d4813b2acce6647edbd4e998076b35307"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["d734f51d4813b2acce6647edbd4e998076b35307","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"d734f51d4813b2acce6647edbd4e998076b35307":["df809bb5acd66e34fc29697ed01665134238ff8f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df809bb5acd66e34fc29697ed01665134238ff8f":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["d619839baa8ce5503e496b94a9e42ad6f079293f","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"d734f51d4813b2acce6647edbd4e998076b35307":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","8be6e1e4fbbc94d90b78f175c03ff389b6949373","d619839baa8ce5503e496b94a9e42ad6f079293f","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"df809bb5acd66e34fc29697ed01665134238ff8f":["d734f51d4813b2acce6647edbd4e998076b35307"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["df809bb5acd66e34fc29697ed01665134238ff8f","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}