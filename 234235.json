{"path":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#LongRangeFacetCounts(String,LongValuesSource,FacetsCollector,Query,LongRange...).mjava","commits":[{"id":"9cf250cb8fdff62f4b753866d44e5bf59bfd1616","date":1483789944,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#LongRangeFacetCounts(String,LongValuesSource,FacetsCollector,Query,LongRange...).mjava","pathOld":"/dev/null","sourceNew":"  /** Create {@code RangeFacetCounts}, using the provided\n   *  {@link ValueSource}, and using the provided Filter as\n   *  a fastmatch: only documents passing the filter are\n   *  checked for the matching ranges.  The filter must be\n   *  random access (implement {@link DocIdSet#bits}). */\n  public LongRangeFacetCounts(String field, LongValuesSource valueSource, FacetsCollector hits, Query fastMatchQuery, LongRange... ranges) throws IOException {\n    super(field, ranges, fastMatchQuery);\n    count(valueSource, hits.getMatchingDocs());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#LongRangeFacetCounts(String,LongValuesSource,FacetsCollector,Query,LongRange...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#LongRangeFacetCounts(String,ValueSource,FacetsCollector,Query,LongRange...).mjava","sourceNew":"  /** Create {@code RangeFacetCounts}, using the provided\n   *  {@link ValueSource}, and using the provided Filter as\n   *  a fastmatch: only documents passing the filter are\n   *  checked for the matching ranges.  The filter must be\n   *  random access (implement {@link DocIdSet#bits}). */\n  public LongRangeFacetCounts(String field, LongValuesSource valueSource, FacetsCollector hits, Query fastMatchQuery, LongRange... ranges) throws IOException {\n    super(field, ranges, fastMatchQuery);\n    count(valueSource, hits.getMatchingDocs());\n  }\n\n","sourceOld":"  /** Create {@code RangeFacetCounts}, using the provided\n   *  {@link ValueSource}, and using the provided Filter as\n   *  a fastmatch: only documents passing the filter are\n   *  checked for the matching ranges.  The filter must be\n   *  random access (implement {@link DocIdSet#bits}). */\n  public LongRangeFacetCounts(String field, ValueSource valueSource, FacetsCollector hits, Query fastMatchQuery, LongRange... ranges) throws IOException {\n    super(field, ranges, fastMatchQuery);\n    count(valueSource, hits.getMatchingDocs());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4513731041236fcf659e5bfc43d8862e1721a310","date":1504022253,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#LongRangeFacetCounts(String,LongValuesSource,FacetsCollector,Query,LongRange...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#LongRangeFacetCounts(String,LongValuesSource,FacetsCollector,Query,LongRange...).mjava","sourceNew":"  /** Create {@code LongRangeFacetCounts}, using the provided\n   *  {@link ValueSource}, and using the provided Filter as\n   *  a fastmatch: only documents passing the filter are\n   *  checked for the matching ranges, which is helpful when\n   *  the provided {@link LongValuesSource} is costly per-document,\n   *  such as a geo distance.  The filter must be\n   *  random access (implement {@link DocIdSet#bits}). */\n  public LongRangeFacetCounts(String field, LongValuesSource valueSource, FacetsCollector hits, Query fastMatchQuery, LongRange... ranges) throws IOException {\n    super(field, ranges, fastMatchQuery);\n    count(valueSource, hits.getMatchingDocs());\n  }\n\n","sourceOld":"  /** Create {@code RangeFacetCounts}, using the provided\n   *  {@link ValueSource}, and using the provided Filter as\n   *  a fastmatch: only documents passing the filter are\n   *  checked for the matching ranges.  The filter must be\n   *  random access (implement {@link DocIdSet#bits}). */\n  public LongRangeFacetCounts(String field, LongValuesSource valueSource, FacetsCollector hits, Query fastMatchQuery, LongRange... ranges) throws IOException {\n    super(field, ranges, fastMatchQuery);\n    count(valueSource, hits.getMatchingDocs());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6028626aa0f7c266ef725110257eed11e5b3d1d7","date":1504104056,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#LongRangeFacetCounts(String,LongValuesSource,FacetsCollector,Query,LongRange...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#LongRangeFacetCounts(String,LongValuesSource,FacetsCollector,Query,LongRange...).mjava","sourceNew":"  /** Create {@code LongRangeFacetCounts}, using the provided\n   *  {@link ValueSource}, and using the provided Filter as\n   *  a fastmatch: only documents passing the filter are\n   *  checked for the matching ranges, which is helpful when\n   *  the provided {@link LongValuesSource} is costly per-document,\n   *  such as a geo distance.  The filter must be\n   *  random access (implement {@link DocIdSet#bits}). */\n  public LongRangeFacetCounts(String field, LongValuesSource valueSource, FacetsCollector hits, Query fastMatchQuery, LongRange... ranges) throws IOException {\n    super(field, ranges, fastMatchQuery);\n    count(valueSource, hits.getMatchingDocs());\n  }\n\n","sourceOld":"  /** Create {@code RangeFacetCounts}, using the provided\n   *  {@link ValueSource}, and using the provided Filter as\n   *  a fastmatch: only documents passing the filter are\n   *  checked for the matching ranges.  The filter must be\n   *  random access (implement {@link DocIdSet#bits}). */\n  public LongRangeFacetCounts(String field, LongValuesSource valueSource, FacetsCollector hits, Query fastMatchQuery, LongRange... ranges) throws IOException {\n    super(field, ranges, fastMatchQuery);\n    count(valueSource, hits.getMatchingDocs());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#LongRangeFacetCounts(String,LongValuesSource,FacetsCollector,Query,LongRange...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#LongRangeFacetCounts(String,LongValuesSource,FacetsCollector,Query,LongRange...).mjava","sourceNew":"  /** Create {@code LongRangeFacetCounts}, using the provided\n   *  {@link ValueSource}, and using the provided Filter as\n   *  a fastmatch: only documents passing the filter are\n   *  checked for the matching ranges, which is helpful when\n   *  the provided {@link LongValuesSource} is costly per-document,\n   *  such as a geo distance.  The filter must be\n   *  random access (implement {@link DocIdSet#bits}). */\n  public LongRangeFacetCounts(String field, LongValuesSource valueSource, FacetsCollector hits, Query fastMatchQuery, LongRange... ranges) throws IOException {\n    super(field, ranges, fastMatchQuery);\n    count(valueSource, hits.getMatchingDocs());\n  }\n\n","sourceOld":"  /** Create {@code RangeFacetCounts}, using the provided\n   *  {@link ValueSource}, and using the provided Filter as\n   *  a fastmatch: only documents passing the filter are\n   *  checked for the matching ranges.  The filter must be\n   *  random access (implement {@link DocIdSet#bits}). */\n  public LongRangeFacetCounts(String field, LongValuesSource valueSource, FacetsCollector hits, Query fastMatchQuery, LongRange... ranges) throws IOException {\n    super(field, ranges, fastMatchQuery);\n    count(valueSource, hits.getMatchingDocs());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"609d2003adff8b80e9d779dd0abd8fccbc629c32","date":1513776132,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#LongRangeFacetCounts(String,LongValuesSource,FacetsCollector,Query,LongRange...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/LongRangeFacetCounts#LongRangeFacetCounts(String,LongValuesSource,FacetsCollector,Query,LongRange...).mjava","sourceNew":"  /** Create {@code LongRangeFacetCounts}, using the provided\n   *  {@link LongValuesSource}, and using the provided Filter as\n   *  a fastmatch: only documents passing the filter are\n   *  checked for the matching ranges, which is helpful when\n   *  the provided {@link LongValuesSource} is costly per-document,\n   *  such as a geo distance.  The filter must be\n   *  random access (implement {@link DocIdSet#bits}). */\n  public LongRangeFacetCounts(String field, LongValuesSource valueSource, FacetsCollector hits, Query fastMatchQuery, LongRange... ranges) throws IOException {\n    super(field, ranges, fastMatchQuery);\n    count(valueSource, hits.getMatchingDocs());\n  }\n\n","sourceOld":"  /** Create {@code LongRangeFacetCounts}, using the provided\n   *  {@link ValueSource}, and using the provided Filter as\n   *  a fastmatch: only documents passing the filter are\n   *  checked for the matching ranges, which is helpful when\n   *  the provided {@link LongValuesSource} is costly per-document,\n   *  such as a geo distance.  The filter must be\n   *  random access (implement {@link DocIdSet#bits}). */\n  public LongRangeFacetCounts(String field, LongValuesSource valueSource, FacetsCollector hits, Query fastMatchQuery, LongRange... ranges) throws IOException {\n    super(field, ranges, fastMatchQuery);\n    count(valueSource, hits.getMatchingDocs());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"609d2003adff8b80e9d779dd0abd8fccbc629c32":["6028626aa0f7c266ef725110257eed11e5b3d1d7"],"6028626aa0f7c266ef725110257eed11e5b3d1d7":["9cf250cb8fdff62f4b753866d44e5bf59bfd1616","4513731041236fcf659e5bfc43d8862e1721a310"],"4513731041236fcf659e5bfc43d8862e1721a310":["9cf250cb8fdff62f4b753866d44e5bf59bfd1616"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["9cf250cb8fdff62f4b753866d44e5bf59bfd1616","6028626aa0f7c266ef725110257eed11e5b3d1d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9cf250cb8fdff62f4b753866d44e5bf59bfd1616"],"9cf250cb8fdff62f4b753866d44e5bf59bfd1616":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["609d2003adff8b80e9d779dd0abd8fccbc629c32"]},"commit2Childs":{"609d2003adff8b80e9d779dd0abd8fccbc629c32":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6028626aa0f7c266ef725110257eed11e5b3d1d7":["609d2003adff8b80e9d779dd0abd8fccbc629c32","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"4513731041236fcf659e5bfc43d8862e1721a310":["6028626aa0f7c266ef725110257eed11e5b3d1d7"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","9cf250cb8fdff62f4b753866d44e5bf59bfd1616"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"9cf250cb8fdff62f4b753866d44e5bf59bfd1616":["6028626aa0f7c266ef725110257eed11e5b3d1d7","4513731041236fcf659e5bfc43d8862e1721a310","3a7809d1d753b67f48b1a706e17034bf8b624ea3","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}