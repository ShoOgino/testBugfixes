{"path":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#doNext(int).mjava","commits":[{"id":"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","date":1363294103,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#doNext(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#doNext(int).mjava","sourceNew":"  private int doNext(int doc) throws IOException {\n    for(;;) {\n      // doc may already be NO_MORE_DOCS here, but we don't check explicitly\n      // since all scorers should advance to NO_MORE_DOCS, match, then\n      // return that value.\n      advanceHead: for(;;) {\n        for (int i = 1; i < docsAndFreqs.length; i++) {\n          // invariant: docsAndFreqs[i].doc <= doc at this point.\n\n          // docsAndFreqs[i].doc may already be equal to doc if we \"broke advanceHead\"\n          // on the previous iteration and the advance on the lead scorer exactly matched.\n          if (docsAndFreqs[i].doc < doc) {\n            docsAndFreqs[i].doc = docsAndFreqs[i].scorer.advance(doc);\n\n            if (docsAndFreqs[i].doc > doc) {\n              // DocsEnum beyond the current doc - break and advance lead to the new highest doc.\n              doc = docsAndFreqs[i].doc;\n              break advanceHead;\n            }\n          }\n        }\n        // success - all DocsEnums are on the same doc\n        return doc;\n      }\n      // advance head for next iteration\n      doc = lead.doc = lead.scorer.advance(doc);\n    }\n  }\n\n","sourceOld":"  private int doNext(int doc) throws IOException {\n    for(;;) {\n      // doc may already be NO_MORE_DOCS here, but we don't check explicitly\n      // since all scorers should advance to NO_MORE_DOCS, match, then\n      // return that value.\n      advanceHead: for(;;) {\n        for (int i = 1; i < docsAndFreqs.length; i++) {\n          // invariant: docsAndFreqs[i].doc <= doc at this point.\n\n          // docsAndFreqs[i].doc may already be equal to doc if we \"broke advanceHead\"\n          // on the previous iteration and the advance on the lead scorer exactly matched.\n          if (docsAndFreqs[i].doc < doc) {\n            docsAndFreqs[i].doc = docsAndFreqs[i].docs.advance(doc);\n\n            if (docsAndFreqs[i].doc > doc) {\n              // DocsEnum beyond the current doc - break and advance lead to the new highest doc.\n              doc = docsAndFreqs[i].doc;\n              break advanceHead;\n            }\n          }\n        }\n        // success - all DocsEnums are on the same doc\n        return doc;\n      }\n      // advance head for next iteration\n      doc = lead.doc = lead.docs.advance(doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25f698887111a682424e759ba36083180899a1fd","date":1423588899,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#doNext(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#doNext(int).mjava","sourceNew":"  private int doNext(int doc) throws IOException {\n    for(;;) {\n      // doc may already be NO_MORE_DOCS here, but we don't check explicitly\n      // since all scorers should advance to NO_MORE_DOCS, match, then\n      // return that value.\n      advanceHead: for(;;) {\n        for (int i = 1; i < docsAndFreqs.length; i++) {\n          // invariant: docsAndFreqs[i].doc <= doc at this point.\n\n          // docsAndFreqs[i].doc may already be equal to doc if we \"broke advanceHead\"\n          // on the previous iteration and the advance on the lead scorer exactly matched.\n          if (docsAndFreqs[i].doc < doc) {\n            docsAndFreqs[i].doc = docsAndFreqs[i].iterator.advance(doc);\n\n            if (docsAndFreqs[i].doc > doc) {\n              // DocsEnum beyond the current doc - break and advance lead to the new highest doc.\n              doc = docsAndFreqs[i].doc;\n              break advanceHead;\n            }\n          }\n        }\n        // success - all DocsEnums are on the same doc\n        return doc;\n      }\n      // advance head for next iteration\n      doc = lead.doc = lead.iterator.advance(doc);\n    }\n  }\n\n","sourceOld":"  private int doNext(int doc) throws IOException {\n    for(;;) {\n      // doc may already be NO_MORE_DOCS here, but we don't check explicitly\n      // since all scorers should advance to NO_MORE_DOCS, match, then\n      // return that value.\n      advanceHead: for(;;) {\n        for (int i = 1; i < docsAndFreqs.length; i++) {\n          // invariant: docsAndFreqs[i].doc <= doc at this point.\n\n          // docsAndFreqs[i].doc may already be equal to doc if we \"broke advanceHead\"\n          // on the previous iteration and the advance on the lead scorer exactly matched.\n          if (docsAndFreqs[i].doc < doc) {\n            docsAndFreqs[i].doc = docsAndFreqs[i].scorer.advance(doc);\n\n            if (docsAndFreqs[i].doc > doc) {\n              // DocsEnum beyond the current doc - break and advance lead to the new highest doc.\n              doc = docsAndFreqs[i].doc;\n              break advanceHead;\n            }\n          }\n        }\n        // success - all DocsEnums are on the same doc\n        return doc;\n      }\n      // advance head for next iteration\n      doc = lead.doc = lead.scorer.advance(doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1","date":1423845906,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#doNext(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#doNext(int).mjava","sourceNew":"  private int doNext(int doc) throws IOException {\n    for(;;) {\n\n      if (doc == NO_MORE_DOCS) {\n        // we need this check because it is only ok to call #matches when positioned\n        return NO_MORE_DOCS;\n      }\n\n      advanceHead: for(;;) {\n        for (DocIdSetIterator other : others) {\n          // invariant: docsAndFreqs[i].doc <= doc at this point.\n\n          // docsAndFreqs[i].doc may already be equal to doc if we \"broke advanceHead\"\n          // on the previous iteration and the advance on the lead scorer exactly matched.\n          if (other.docID() < doc) {\n            final int next = other.advance(doc);\n\n            if (next > doc) {\n              // DocsEnum beyond the current doc - break and advance lead to the new highest doc.\n              doc = lead.advance(next);\n              break advanceHead;\n            }\n          }\n        }\n\n        if (matches()) {\n          // success - all DocsEnums are on the same doc\n          return doc;\n        } else {\n          doc = lead.nextDoc();\n          break advanceHead;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private int doNext(int doc) throws IOException {\n    for(;;) {\n      // doc may already be NO_MORE_DOCS here, but we don't check explicitly\n      // since all scorers should advance to NO_MORE_DOCS, match, then\n      // return that value.\n      advanceHead: for(;;) {\n        for (int i = 1; i < docsAndFreqs.length; i++) {\n          // invariant: docsAndFreqs[i].doc <= doc at this point.\n\n          // docsAndFreqs[i].doc may already be equal to doc if we \"broke advanceHead\"\n          // on the previous iteration and the advance on the lead scorer exactly matched.\n          if (docsAndFreqs[i].doc < doc) {\n            docsAndFreqs[i].doc = docsAndFreqs[i].iterator.advance(doc);\n\n            if (docsAndFreqs[i].doc > doc) {\n              // DocsEnum beyond the current doc - break and advance lead to the new highest doc.\n              doc = docsAndFreqs[i].doc;\n              break advanceHead;\n            }\n          }\n        }\n        // success - all DocsEnums are on the same doc\n        return doc;\n      }\n      // advance head for next iteration\n      doc = lead.doc = lead.iterator.advance(doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["25f698887111a682424e759ba36083180899a1fd"],"25f698887111a682424e759ba36083180899a1fd":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["25f698887111a682424e759ba36083180899a1fd"],"c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25f698887111a682424e759ba36083180899a1fd":["c2fc8e2ba3fb8b72ed1e1f99270a42036b23d9a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}