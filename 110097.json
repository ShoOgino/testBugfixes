{"path":"solr/core/src/java/org/apache/solr/spelling/suggest/FileDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","commits":[{"id":"7f2e96099703c24c0c63d27806ba7020626b649b","date":1385214372,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/FileDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if (params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String sourceLocation = (String)params.get(Suggester.LOCATION);\n    \n    if (sourceLocation == null) {\n      throw new IllegalArgumentException(Suggester.LOCATION + \" parameter is mandatory for using FileDictionary\");\n    }\n    \n    String fieldDelimiter = (params.get(FIELD_DELIMITER) != null)\n        ? (String) params.get(FIELD_DELIMITER) : \n        FileDictionary.DEFAULT_FIELD_DELIMITER;\n    \n    try {\n      return new FileDictionary(new InputStreamReader(\n          core.getResourceLoader().openResource(sourceLocation), IOUtils.CHARSET_UTF_8), fieldDelimiter);\n    } catch (IOException e) {\n      throw new RuntimeException();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["437e65c578cab603d9201916b0e285f3d68aff45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/FileDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if (params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String sourceLocation = (String)params.get(Suggester.LOCATION);\n    \n    if (sourceLocation == null) {\n      throw new IllegalArgumentException(Suggester.LOCATION + \" parameter is mandatory for using FileDictionary\");\n    }\n    \n    String fieldDelimiter = (params.get(FIELD_DELIMITER) != null)\n        ? (String) params.get(FIELD_DELIMITER) : \n        FileDictionary.DEFAULT_FIELD_DELIMITER;\n    \n    try {\n      return new FileDictionary(new InputStreamReader(\n          core.getResourceLoader().openResource(sourceLocation), IOUtils.CHARSET_UTF_8), fieldDelimiter);\n    } catch (IOException e) {\n      throw new RuntimeException();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/FileDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/FileDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if (params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String sourceLocation = (String)params.get(Suggester.LOCATION);\n    \n    if (sourceLocation == null) {\n      throw new IllegalArgumentException(Suggester.LOCATION + \" parameter is mandatory for using FileDictionary\");\n    }\n    \n    String fieldDelimiter = (params.get(FIELD_DELIMITER) != null)\n        ? (String) params.get(FIELD_DELIMITER) : \n        FileDictionary.DEFAULT_FIELD_DELIMITER;\n    \n    try {\n      return new FileDictionary(new InputStreamReader(\n          core.getResourceLoader().openResource(sourceLocation), StandardCharsets.UTF_8), fieldDelimiter);\n    } catch (IOException e) {\n      throw new RuntimeException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if (params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String sourceLocation = (String)params.get(Suggester.LOCATION);\n    \n    if (sourceLocation == null) {\n      throw new IllegalArgumentException(Suggester.LOCATION + \" parameter is mandatory for using FileDictionary\");\n    }\n    \n    String fieldDelimiter = (params.get(FIELD_DELIMITER) != null)\n        ? (String) params.get(FIELD_DELIMITER) : \n        FileDictionary.DEFAULT_FIELD_DELIMITER;\n    \n    try {\n      return new FileDictionary(new InputStreamReader(\n          core.getResourceLoader().openResource(sourceLocation), IOUtils.CHARSET_UTF_8), fieldDelimiter);\n    } catch (IOException e) {\n      throw new RuntimeException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/FileDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/FileDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if (params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String sourceLocation = (String)params.get(Suggester.LOCATION);\n    \n    if (sourceLocation == null) {\n      throw new IllegalArgumentException(Suggester.LOCATION + \" parameter is mandatory for using FileDictionary\");\n    }\n    \n    String fieldDelimiter = (params.get(FIELD_DELIMITER) != null)\n        ? (String) params.get(FIELD_DELIMITER) : \n        FileDictionary.DEFAULT_FIELD_DELIMITER;\n    \n    try {\n      return new FileDictionary(new InputStreamReader(\n          core.getResourceLoader().openResource(sourceLocation), StandardCharsets.UTF_8), fieldDelimiter);\n    } catch (IOException e) {\n      throw new RuntimeException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if (params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String sourceLocation = (String)params.get(Suggester.LOCATION);\n    \n    if (sourceLocation == null) {\n      throw new IllegalArgumentException(Suggester.LOCATION + \" parameter is mandatory for using FileDictionary\");\n    }\n    \n    String fieldDelimiter = (params.get(FIELD_DELIMITER) != null)\n        ? (String) params.get(FIELD_DELIMITER) : \n        FileDictionary.DEFAULT_FIELD_DELIMITER;\n    \n    try {\n      return new FileDictionary(new InputStreamReader(\n          core.getResourceLoader().openResource(sourceLocation), IOUtils.CHARSET_UTF_8), fieldDelimiter);\n    } catch (IOException e) {\n      throw new RuntimeException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"437e65c578cab603d9201916b0e285f3d68aff45","date":1427831677,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/FileDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/FileDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if (params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String sourceLocation = (String)params.get(Suggester.LOCATION);\n    \n    if (sourceLocation == null) {\n      throw new IllegalArgumentException(Suggester.LOCATION + \" parameter is mandatory for using FileDictionary\");\n    }\n    \n    String fieldDelimiter = (params.get(FIELD_DELIMITER) != null)\n        ? (String) params.get(FIELD_DELIMITER) : \n        FileDictionary.DEFAULT_FIELD_DELIMITER;\n    \n    try {\n      return new FileDictionary(new InputStreamReader(\n          core.getResourceLoader().openResource(sourceLocation), StandardCharsets.UTF_8), fieldDelimiter);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if (params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String sourceLocation = (String)params.get(Suggester.LOCATION);\n    \n    if (sourceLocation == null) {\n      throw new IllegalArgumentException(Suggester.LOCATION + \" parameter is mandatory for using FileDictionary\");\n    }\n    \n    String fieldDelimiter = (params.get(FIELD_DELIMITER) != null)\n        ? (String) params.get(FIELD_DELIMITER) : \n        FileDictionary.DEFAULT_FIELD_DELIMITER;\n    \n    try {\n      return new FileDictionary(new InputStreamReader(\n          core.getResourceLoader().openResource(sourceLocation), StandardCharsets.UTF_8), fieldDelimiter);\n    } catch (IOException e) {\n      throw new RuntimeException();\n    }\n  }\n\n","bugFix":["7f2e96099703c24c0c63d27806ba7020626b649b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/suggest/FileDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/suggest/FileDictionaryFactory#create(SolrCore,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if (params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String sourceLocation = (String)params.get(Suggester.LOCATION);\n    \n    if (sourceLocation == null) {\n      throw new IllegalArgumentException(Suggester.LOCATION + \" parameter is mandatory for using FileDictionary\");\n    }\n    \n    String fieldDelimiter = (params.get(FIELD_DELIMITER) != null)\n        ? (String) params.get(FIELD_DELIMITER) : \n        FileDictionary.DEFAULT_FIELD_DELIMITER;\n    \n    try {\n      return new FileDictionary(new InputStreamReader(\n          core.getResourceLoader().openResource(sourceLocation), StandardCharsets.UTF_8), fieldDelimiter);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Dictionary create(SolrCore core, SolrIndexSearcher searcher) {\n    if (params == null) {\n      // should not happen; implies setParams was not called\n      throw new IllegalStateException(\"Value of params not set\");\n    }\n    \n    String sourceLocation = (String)params.get(Suggester.LOCATION);\n    \n    if (sourceLocation == null) {\n      throw new IllegalArgumentException(Suggester.LOCATION + \" parameter is mandatory for using FileDictionary\");\n    }\n    \n    String fieldDelimiter = (params.get(FIELD_DELIMITER) != null)\n        ? (String) params.get(FIELD_DELIMITER) : \n        FileDictionary.DEFAULT_FIELD_DELIMITER;\n    \n    try {\n      return new FileDictionary(new InputStreamReader(\n          core.getResourceLoader().openResource(sourceLocation), StandardCharsets.UTF_8), fieldDelimiter);\n    } catch (IOException e) {\n      throw new RuntimeException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["7f2e96099703c24c0c63d27806ba7020626b649b","7d89d7e4e5101347833eea558851bf4209218619"],"7f2e96099703c24c0c63d27806ba7020626b649b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7f2e96099703c24c0c63d27806ba7020626b649b"],"437e65c578cab603d9201916b0e285f3d68aff45":["7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["7f2e96099703c24c0c63d27806ba7020626b649b"],"fab172655716b96f7e42376116235017a922de3a":["7d89d7e4e5101347833eea558851bf4209218619","437e65c578cab603d9201916b0e285f3d68aff45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["437e65c578cab603d9201916b0e285f3d68aff45"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"7f2e96099703c24c0c63d27806ba7020626b649b":["5eb2511ababf862ea11e10761c70ee560cd84510","74f45af4339b0daf7a95c820ab88c1aea74fbce0","7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f2e96099703c24c0c63d27806ba7020626b649b","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"437e65c578cab603d9201916b0e285f3d68aff45":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","437e65c578cab603d9201916b0e285f3d68aff45","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","74f45af4339b0daf7a95c820ab88c1aea74fbce0","fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}