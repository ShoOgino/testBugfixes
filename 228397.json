{"path":"lucene/core/src/java/org/apache/lucene/search/RegexpQuery#RegexpQuery(Term,int,int,AutomatonProvider,int).mjava","commits":[{"id":"0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601","date":1594220892,"type":0,"author":"markharwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/RegexpQuery#RegexpQuery(Term,int,int,AutomatonProvider,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a query for terms matching <code>term</code>.\n   * \n   * @param term regular expression.\n   * @param syntax_flags optional RegExp features from {@link RegExp}\n   * @param match_flags boolean 'or' of match behavior options such as case insensitivity\n   * @param provider custom AutomatonProvider for named automata\n   * @param maxDeterminizedStates maximum number of states that compiling the\n   *  automaton for the regexp can result in.  Set higher to allow more complex\n   *  queries and lower to prevent memory exhaustion.\n   */\n  public RegexpQuery(Term term, int syntax_flags, int match_flags, AutomatonProvider provider,\n      int maxDeterminizedStates) {\n    super(term,\n          new RegExp(term.text(), syntax_flags, match_flags).toAutomaton(\n                       provider, maxDeterminizedStates), maxDeterminizedStates);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601"],"0785d1d3506a0f4d8fd4adc2efe29f0e1a9c2601":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}