{"path":"solr/core/src/java/org/apache/solr/cloud/CloudUtil#usePolicyFramework(Optional[DocCollection],SolrCloudManager).mjava","commits":[{"id":"216382c52eb6bf24fc72851399bb3750e8ad7a97","date":1538562171,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudUtil#usePolicyFramework(Optional[DocCollection],SolrCloudManager).mjava","pathOld":"/dev/null","sourceNew":"  private static boolean usePolicyFramework(Optional<DocCollection> collection, SolrCloudManager cloudManager) throws IOException, InterruptedException {\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    // if no autoscaling configuration exists then obviously we cannot use the policy framework\n    if (autoScalingConfig.getPolicy().isEmpty()) return false;\n    // do custom preferences exist\n    if (!autoScalingConfig.getPolicy().getClusterPreferences().equals(Policy.DEFAULT_PREFERENCES)) return true;\n    // does a cluster policy exist\n    if (!autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) return true;\n    // finally we check if the current collection has a policy\n    return !collection.isPresent() || collection.get().getPolicyName() != null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["231fa894a21b9e5ebfbb31f1ca4866bfe8daa3ff"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"231fa894a21b9e5ebfbb31f1ca4866bfe8daa3ff","date":1538639811,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CloudUtil#usePolicyFramework(Optional[DocCollection],SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudUtil#usePolicyFramework(Optional[DocCollection],SolrCloudManager).mjava","sourceNew":"  private static boolean usePolicyFramework(Optional<DocCollection> collection, SolrCloudManager cloudManager) throws IOException, InterruptedException {\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    // if no autoscaling configuration exists then obviously we cannot use the policy framework\n    if (autoScalingConfig.getPolicy().isEmpty()) return false;\n    // do custom preferences exist\n    if (!autoScalingConfig.getPolicy().isEmptyPreferences()) return true;\n    // does a cluster policy exist\n    if (!autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) return true;\n    // finally we check if the current collection has a policy\n    return !collection.isPresent() || collection.get().getPolicyName() != null;\n  }\n\n","sourceOld":"  private static boolean usePolicyFramework(Optional<DocCollection> collection, SolrCloudManager cloudManager) throws IOException, InterruptedException {\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    // if no autoscaling configuration exists then obviously we cannot use the policy framework\n    if (autoScalingConfig.getPolicy().isEmpty()) return false;\n    // do custom preferences exist\n    if (!autoScalingConfig.getPolicy().getClusterPreferences().equals(Policy.DEFAULT_PREFERENCES)) return true;\n    // does a cluster policy exist\n    if (!autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) return true;\n    // finally we check if the current collection has a policy\n    return !collection.isPresent() || collection.get().getPolicyName() != null;\n  }\n\n","bugFix":["216382c52eb6bf24fc72851399bb3750e8ad7a97"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01322d51122b6cbe6b5ba6059fffba67798dae72","date":1539067228,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#usePolicyFramework(Optional[DocCollection],SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CloudUtil#usePolicyFramework(Optional[DocCollection],SolrCloudManager).mjava","sourceNew":"  private static boolean usePolicyFramework(Optional<DocCollection> collection, SolrCloudManager cloudManager) throws IOException, InterruptedException {\n    boolean useLegacyAssignment = false;\n    Map<String, Object> clusterProperties = cloudManager.getClusterStateProvider().getClusterProperties();\n    if (clusterProperties.containsKey(CollectionAdminParams.DEFAULTS))  {\n      Map<String, Object> defaults = (Map<String, Object>) clusterProperties.get(CollectionAdminParams.DEFAULTS);\n      Map<String, Object> collectionDefaults = (Map<String, Object>) defaults.getOrDefault(CollectionAdminParams.COLLECTION, Collections.emptyMap());\n      useLegacyAssignment = (boolean) collectionDefaults.getOrDefault(CollectionAdminParams.USE_LEGACY_REPLICA_ASSIGNMENT, false);\n    }\n\n    if (!useLegacyAssignment) {\n      // if legacy assignment is not selected then autoscaling is always available through the implicit policy/preferences\n      return true;\n    }\n\n    // legacy assignment is turned on, which means we must look at the actual autoscaling config\n    // to determine whether policy framework can be used or not for this collection\n\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    // if no autoscaling configuration exists then obviously we cannot use the policy framework\n    if (autoScalingConfig.getPolicy().isEmpty()) return false;\n    // do custom preferences exist\n    if (!autoScalingConfig.getPolicy().isEmptyPreferences()) return true;\n    // does a cluster policy exist\n    if (!autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) return true;\n    // finally we check if the current collection has a policy\n    return !collection.isPresent() || collection.get().getPolicyName() != null;\n  }\n\n","sourceOld":"  private static boolean usePolicyFramework(Optional<DocCollection> collection, SolrCloudManager cloudManager) throws IOException, InterruptedException {\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n    // if no autoscaling configuration exists then obviously we cannot use the policy framework\n    if (autoScalingConfig.getPolicy().isEmpty()) return false;\n    // do custom preferences exist\n    if (!autoScalingConfig.getPolicy().isEmptyPreferences()) return true;\n    // does a cluster policy exist\n    if (!autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) return true;\n    // finally we check if the current collection has a policy\n    return !collection.isPresent() || collection.get().getPolicyName() != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"01322d51122b6cbe6b5ba6059fffba67798dae72":["231fa894a21b9e5ebfbb31f1ca4866bfe8daa3ff"],"216382c52eb6bf24fc72851399bb3750e8ad7a97":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"231fa894a21b9e5ebfbb31f1ca4866bfe8daa3ff":["216382c52eb6bf24fc72851399bb3750e8ad7a97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["01322d51122b6cbe6b5ba6059fffba67798dae72"]},"commit2Childs":{"01322d51122b6cbe6b5ba6059fffba67798dae72":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"216382c52eb6bf24fc72851399bb3750e8ad7a97":["231fa894a21b9e5ebfbb31f1ca4866bfe8daa3ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["216382c52eb6bf24fc72851399bb3750e8ad7a97"],"231fa894a21b9e5ebfbb31f1ca4866bfe8daa3ff":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}