{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","sourceNew":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random, dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(f);\n      \n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random.nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<String>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random));\n    }\n\n    for(String term : allTerms) {\n      f.setValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = new IndexSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<String>(allTerms);\n    Collections.shuffle(allTermsList, random);\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random, dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(f);\n      \n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random.nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<String>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random));\n    }\n\n    for(String term : allTerms) {\n      f.setValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = new IndexSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<String>(allTerms);\n    Collections.shuffle(allTermsList, random);\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","sourceNew":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random, dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(f);\n      \n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random.nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<String>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = new IndexSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<String>(allTerms);\n    Collections.shuffle(allTermsList, random);\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random, dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(f);\n      \n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random.nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<String>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random));\n    }\n\n    for(String term : allTerms) {\n      f.setValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = new IndexSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<String>(allTerms);\n    Collections.shuffle(allTermsList, random);\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","sourceNew":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(f);\n      \n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random().nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<String>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random()));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = new IndexSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<String>(allTerms);\n    Collections.shuffle(allTermsList, random());\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random, dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(f);\n      \n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random.nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<String>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = new IndexSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<String>(allTerms);\n    Collections.shuffle(allTermsList, random);\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","sourceNew":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(f);\n      \n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random().nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<String>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random()));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = new IndexSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<String>(allTerms);\n    Collections.shuffle(allTermsList, random());\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(f);\n      \n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random().nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<String>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random()));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = new IndexSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<String>(allTerms);\n    Collections.shuffle(allTermsList, random());\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","sourceNew":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(f);\n      \n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random().nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<String>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random()));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = newSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<String>(allTerms);\n    Collections.shuffle(allTermsList, random());\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(f);\n      \n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random().nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<String>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random()));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = new IndexSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<String>(allTerms);\n    Collections.shuffle(allTermsList, random());\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","sourceNew":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(f);\n      \n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random().nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random()));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = newSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<>(allTerms);\n    Collections.shuffle(allTermsList, random());\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(f);\n      \n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random().nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<String>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random()));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = newSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<String>(allTerms);\n    Collections.shuffle(allTermsList, random());\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d245db17aaa41b338dae9da5d4edba4dd6f61612","date":1394644847,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","sourceNew":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(f);\n\n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random().nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random()));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = newSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<>(allTerms);\n    Collections.shuffle(allTermsList, random());\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(f);\n      \n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random().nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random()));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = newSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<>(allTerms);\n    Collections.shuffle(allTermsList, random());\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","sourceNew":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(f);\n\n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random().nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random()));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = newSearcher(r);\n    w.shutdown();\n\n    final List<String> allTermsList = new ArrayList<>(allTerms);\n    Collections.shuffle(allTermsList, random());\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(f);\n\n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random().nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random()));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = newSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<>(allTerms);\n    Collections.shuffle(allTermsList, random());\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","sourceNew":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n                                                newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(f);\n\n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random().nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random()));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = newSearcher(r);\n    w.shutdown();\n\n    final List<String> allTermsList = new ArrayList<>(allTerms);\n    Collections.shuffle(allTermsList, random());\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(f);\n\n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random().nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random()));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = newSearcher(r);\n    w.shutdown();\n\n    final List<String> allTermsList = new ArrayList<>(allTerms);\n    Collections.shuffle(allTermsList, random());\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","sourceNew":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n                                                newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(f);\n\n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random().nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random()));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = newSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<>(allTerms);\n    Collections.shuffle(allTermsList, random());\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n                                                newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(f);\n\n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random().nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random()));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = newSearcher(r);\n    w.shutdown();\n\n    final List<String> allTermsList = new ArrayList<>(allTerms);\n    Collections.shuffle(allTermsList, random());\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"470eaac3a77cf637b62126a5408b178d7be93eb1","date":1531830722,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","sourceNew":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n                                                newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(f);\n\n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random().nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random()));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = newSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<>(allTerms);\n    Collections.shuffle(allTermsList, random());\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.count(new TermQuery(new Term(\"field\", term))));\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n                                                newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(f);\n\n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random().nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random()));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = newSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<>(allTerms);\n    Collections.shuffle(allTermsList, random());\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","sourceNew":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n                                                newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(f);\n\n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random().nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random()));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = newSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<>(allTerms);\n    Collections.shuffle(allTermsList, random());\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.count(new TermQuery(new Term(\"field\", term))));\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir,\n                                                newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newStringField(\"field\", \"\", Field.Store.NO);\n    doc.add(f);\n\n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random().nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random()));\n    }\n\n    for(String term : allTerms) {\n      f.setStringValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = newSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<>(allTerms);\n    Collections.shuffle(allTermsList, random());\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"d245db17aaa41b338dae9da5d4edba4dd6f61612":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["d0ef034a4f10871667ae75181537775ddcf8ade4","470eaac3a77cf637b62126a5408b178d7be93eb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d245db17aaa41b338dae9da5d4edba4dd6f61612"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["470eaac3a77cf637b62126a5408b178d7be93eb1"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d245db17aaa41b338dae9da5d4edba4dd6f61612"],"d245db17aaa41b338dae9da5d4edba4dd6f61612":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","470eaac3a77cf637b62126a5408b178d7be93eb1"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}