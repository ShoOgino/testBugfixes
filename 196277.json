{"path":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addIfCompetitive(FSTPath).mjava","commits":[{"id":"bede0ec3497c48e70d55196c5065d97a4bc1db3d","date":1329668585,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addIfCompetitive(FSTPath).mjava","pathOld":"/dev/null","sourceNew":"    // If back plus this arc is competitive then add to queue:\n    private void addIfCompetitive(FSTPath path) {\n\n      assert queue != null;\n\n      long cost = path.cost + path.arc.output;\n      //System.out.println(\"  addIfCompetitive bottom=\" + bottom + \" queue.size()=\" + queue.size());\n\n      if (bottom != null) {\n\n        if (cost > bottom.cost) {\n          // Doesn't compete\n          return;\n        } else if (cost == bottom.cost) {\n          // Tie break by alpha sort on the input:\n          path.input.grow(path.input.length+1);\n          path.input.ints[path.input.length++] = path.arc.label;\n          final int cmp = bottom.input.compareTo(path.input);\n          path.input.length--;\n          assert cmp != 0;\n          if (cmp < 0) {\n            // Doesn't compete\n            return;\n          }\n        }\n        // Competes\n      } else {\n        // Queue isn't full yet, so any path we hit competes:\n      }\n\n      final FSTPath newPath = new FSTPath(cost, path.arc);\n\n      newPath.input.grow(path.input.length+1);\n      System.arraycopy(path.input.ints, 0, newPath.input.ints, 0, path.input.length);\n      newPath.input.ints[path.input.length] = path.arc.label;\n      newPath.input.length = path.input.length+1;\n\n      //System.out.println(\"    add path=\" + newPath);\n      queue.add(newPath);\n      if (bottom != null) {\n        final FSTPath removed = queue.pollLast();\n        assert removed == bottom;\n        bottom = queue.last();\n        //System.out.println(\"    now re-set bottom: \" + bottom + \" queue=\" + queue);\n      } else if (queue.size() == topN) {\n        // Queue just filled up:\n        bottom = queue.last();\n        //System.out.println(\"    now set bottom: \" + bottom);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","32eace34e207608926e4c83409c65d968e530bf2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a6ee6c302710254b6c2474ccd2755f9f2323ee3","date":1330700384,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addIfCompetitive(FSTPath[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addIfCompetitive(FSTPath).mjava","sourceNew":"    // If back plus this arc is competitive then add to queue:\n    private void addIfCompetitive(FSTPath<T> path) {\n\n      assert queue != null;\n\n      T cost = fst.outputs.add(path.cost, path.arc.output);\n      //System.out.println(\"  addIfCompetitive bottom=\" + bottom + \" queue.size()=\" + queue.size());\n\n      if (bottom != null) {\n        int comp = comparator.compare(cost, bottom.cost);\n        if (comp > 0) {\n          // Doesn't compete\n          return;\n        } else if (comp == 0) {\n          // Tie break by alpha sort on the input:\n          path.input.grow(path.input.length+1);\n          path.input.ints[path.input.length++] = path.arc.label;\n          final int cmp = bottom.input.compareTo(path.input);\n          path.input.length--;\n          assert cmp != 0;\n          if (cmp < 0) {\n            // Doesn't compete\n            return;\n          }\n        }\n        // Competes\n      } else {\n        // Queue isn't full yet, so any path we hit competes:\n      }\n\n      final FSTPath<T> newPath = new FSTPath<T>(cost, path.arc, comparator);\n\n      newPath.input.grow(path.input.length+1);\n      System.arraycopy(path.input.ints, 0, newPath.input.ints, 0, path.input.length);\n      newPath.input.ints[path.input.length] = path.arc.label;\n      newPath.input.length = path.input.length+1;\n\n      //System.out.println(\"    add path=\" + newPath);\n      queue.add(newPath);\n      if (bottom != null) {\n        final FSTPath<T> removed = queue.pollLast();\n        assert removed == bottom;\n        bottom = queue.last();\n        //System.out.println(\"    now re-set bottom: \" + bottom + \" queue=\" + queue);\n      } else if (queue.size() == topN) {\n        // Queue just filled up:\n        bottom = queue.last();\n        //System.out.println(\"    now set bottom: \" + bottom);\n      }\n    }\n\n","sourceOld":"    // If back plus this arc is competitive then add to queue:\n    private void addIfCompetitive(FSTPath path) {\n\n      assert queue != null;\n\n      long cost = path.cost + path.arc.output;\n      //System.out.println(\"  addIfCompetitive bottom=\" + bottom + \" queue.size()=\" + queue.size());\n\n      if (bottom != null) {\n\n        if (cost > bottom.cost) {\n          // Doesn't compete\n          return;\n        } else if (cost == bottom.cost) {\n          // Tie break by alpha sort on the input:\n          path.input.grow(path.input.length+1);\n          path.input.ints[path.input.length++] = path.arc.label;\n          final int cmp = bottom.input.compareTo(path.input);\n          path.input.length--;\n          assert cmp != 0;\n          if (cmp < 0) {\n            // Doesn't compete\n            return;\n          }\n        }\n        // Competes\n      } else {\n        // Queue isn't full yet, so any path we hit competes:\n      }\n\n      final FSTPath newPath = new FSTPath(cost, path.arc);\n\n      newPath.input.grow(path.input.length+1);\n      System.arraycopy(path.input.ints, 0, newPath.input.ints, 0, path.input.length);\n      newPath.input.ints[path.input.length] = path.arc.label;\n      newPath.input.length = path.input.length+1;\n\n      //System.out.println(\"    add path=\" + newPath);\n      queue.add(newPath);\n      if (bottom != null) {\n        final FSTPath removed = queue.pollLast();\n        assert removed == bottom;\n        bottom = queue.last();\n        //System.out.println(\"    now re-set bottom: \" + bottom + \" queue=\" + queue);\n      } else if (queue.size() == topN) {\n        // Queue just filled up:\n        bottom = queue.last();\n        //System.out.println(\"    now set bottom: \" + bottom);\n      }\n    }\n\n","bugFix":null,"bugIntro":["13975b8f26b2a9600a5333689974923927b7b8ab","32eace34e207608926e4c83409c65d968e530bf2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addIfCompetitive(FSTPath).mjava","sourceNew":null,"sourceOld":"    // If back plus this arc is competitive then add to queue:\n    private void addIfCompetitive(FSTPath path) {\n\n      assert queue != null;\n\n      long cost = path.cost + path.arc.output;\n      //System.out.println(\"  addIfCompetitive bottom=\" + bottom + \" queue.size()=\" + queue.size());\n\n      if (bottom != null) {\n\n        if (cost > bottom.cost) {\n          // Doesn't compete\n          return;\n        } else if (cost == bottom.cost) {\n          // Tie break by alpha sort on the input:\n          path.input.grow(path.input.length+1);\n          path.input.ints[path.input.length++] = path.arc.label;\n          final int cmp = bottom.input.compareTo(path.input);\n          path.input.length--;\n          assert cmp != 0;\n          if (cmp < 0) {\n            // Doesn't compete\n            return;\n          }\n        }\n        // Competes\n      } else {\n        // Queue isn't full yet, so any path we hit competes:\n      }\n\n      final FSTPath newPath = new FSTPath(cost, path.arc);\n\n      newPath.input.grow(path.input.length+1);\n      System.arraycopy(path.input.ints, 0, newPath.input.ints, 0, path.input.length);\n      newPath.input.ints[path.input.length] = path.arc.label;\n      newPath.input.length = path.input.length+1;\n\n      //System.out.println(\"    add path=\" + newPath);\n      queue.add(newPath);\n      if (bottom != null) {\n        final FSTPath removed = queue.pollLast();\n        assert removed == bottom;\n        bottom = queue.last();\n        //System.out.println(\"    now re-set bottom: \" + bottom + \" queue=\" + queue);\n      } else if (queue.size() == topN) {\n        // Queue just filled up:\n        bottom = queue.last();\n        //System.out.println(\"    now set bottom: \" + bottom);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["bede0ec3497c48e70d55196c5065d97a4bc1db3d","2a6ee6c302710254b6c2474ccd2755f9f2323ee3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bede0ec3497c48e70d55196c5065d97a4bc1db3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a6ee6c302710254b6c2474ccd2755f9f2323ee3":["bede0ec3497c48e70d55196c5065d97a4bc1db3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a6ee6c302710254b6c2474ccd2755f9f2323ee3"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bede0ec3497c48e70d55196c5065d97a4bc1db3d"],"bede0ec3497c48e70d55196c5065d97a4bc1db3d":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","2a6ee6c302710254b6c2474ccd2755f9f2323ee3"],"2a6ee6c302710254b6c2474ccd2755f9f2323ee3":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}