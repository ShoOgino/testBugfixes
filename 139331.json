{"path":"src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#doExplain(Searcher,IndexReader,int).mjava","commits":[{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#doExplain(Searcher,IndexReader,int).mjava","pathOld":"/dev/null","sourceNew":"    private Explanation doExplain(Searcher searcher, IndexReader reader, int doc) throws IOException {\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(reader, true, false);\n      }\n      Explanation subQueryExpl = subQueryWeight.explain(searcher, reader, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcScorers.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n        valSrcExpls[i] = valSrcScorers[i].explain(doc);\n      }\n      Explanation customExp = customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"231941d2cb96b9752e839c311391096d90470db8","date":1251116803,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#doExplain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/function/CustomScoreQuery.CustomWeight#doExplain(Searcher,IndexReader,int).mjava","sourceNew":"    private Explanation doExplain(IndexReader reader, int doc) throws IOException {\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(reader, true, false);\n      }\n      Explanation subQueryExpl = subQueryWeight.explain(reader, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcScorers.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n        valSrcExpls[i] = valSrcScorers[i].explain(doc);\n      }\n      Explanation customExp = customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","sourceOld":"    private Explanation doExplain(Searcher searcher, IndexReader reader, int doc) throws IOException {\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(reader, true, false);\n      }\n      Explanation subQueryExpl = subQueryWeight.explain(searcher, reader, doc);\n      if (!subQueryExpl.isMatch()) {\n        return subQueryExpl;\n      }\n      // match\n      Explanation[] valSrcExpls = new Explanation[valSrcScorers.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n        valSrcExpls[i] = valSrcScorers[i].explain(doc);\n      }\n      Explanation customExp = customExplain(doc,subQueryExpl,valSrcExpls);\n      float sc = getValue() * customExp.getValue();\n      Explanation res = new ComplexExplanation(\n        true, sc, CustomScoreQuery.this.toString() + \", product of:\");\n      res.addDetail(customExp);\n      res.addDetail(new Explanation(getValue(), \"queryBoost\")); // actually using the q boost as q weight (== weight value)\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"231941d2cb96b9752e839c311391096d90470db8":["fe941135bdfc28c81e20b4d21422f8726af34925"],"fe941135bdfc28c81e20b4d21422f8726af34925":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["231941d2cb96b9752e839c311391096d90470db8"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe941135bdfc28c81e20b4d21422f8726af34925"],"231941d2cb96b9752e839c311391096d90470db8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe941135bdfc28c81e20b4d21422f8726af34925":["231941d2cb96b9752e839c311391096d90470db8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}