{"path":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#getStatusCode(String,String,String,HttpSolrClient).mjava","commits":[{"id":"29887daf839649150d96855b142b76f5c45d60d2","date":1482160504,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#getStatusCode(String,String,String,HttpSolrClient).mjava","pathOld":"/dev/null","sourceNew":"  private int getStatusCode(String token, final String user, final String op, HttpSolrClient client)\n  throws Exception {\n    SolrClient delegationTokenClient;\n    if (random().nextBoolean()) delegationTokenClient = new HttpSolrClient.Builder(client.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(client.getParser())\n        .build();\n    else delegationTokenClient = new CloudSolrClient.Builder()\n        .withZkHost((cluster.getZkServer().getZkAddress()))\n        .withLBHttpSolrClientBuilder(new LBHttpSolrClient.Builder()\n            .withResponseParser(client.getParser())\n            .withHttpSolrClientBuilder(\n                new HttpSolrClient.Builder()\n                    .withKerberosDelegationToken(token)\n            ))\n        .build();\n    try {\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      if (user != null) p.set(PseudoAuthenticator.USER_NAME, user);\n      if (op != null) p.set(\"op\", op);\n      SolrRequest req = getAdminRequest(p);\n      if (user != null || op != null) {\n        Set<String> queryParams = new HashSet<>();\n        if (user != null) queryParams.add(PseudoAuthenticator.USER_NAME);\n        if (op != null) queryParams.add(\"op\");\n        req.setQueryParams(queryParams);\n      }\n      try {\n        delegationTokenClient.request(req, null);\n        return HttpStatus.SC_OK;\n      } catch (HttpSolrClient.RemoteSolrException re) {\n        return re.code();\n      }\n    } finally {\n      delegationTokenClient.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#getStatusCode(String,String,String,HttpSolrClient).mjava","pathOld":"/dev/null","sourceNew":"  private int getStatusCode(String token, final String user, final String op, HttpSolrClient client)\n  throws Exception {\n    SolrClient delegationTokenClient;\n    if (random().nextBoolean()) delegationTokenClient = new HttpSolrClient.Builder(client.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(client.getParser())\n        .build();\n    else delegationTokenClient = new CloudSolrClient.Builder()\n        .withZkHost((cluster.getZkServer().getZkAddress()))\n        .withLBHttpSolrClientBuilder(new LBHttpSolrClient.Builder()\n            .withResponseParser(client.getParser())\n            .withHttpSolrClientBuilder(\n                new HttpSolrClient.Builder()\n                    .withKerberosDelegationToken(token)\n            ))\n        .build();\n    try {\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      if (user != null) p.set(PseudoAuthenticator.USER_NAME, user);\n      if (op != null) p.set(\"op\", op);\n      SolrRequest req = getAdminRequest(p);\n      if (user != null || op != null) {\n        Set<String> queryParams = new HashSet<>();\n        if (user != null) queryParams.add(PseudoAuthenticator.USER_NAME);\n        if (op != null) queryParams.add(\"op\");\n        req.setQueryParams(queryParams);\n      }\n      try {\n        delegationTokenClient.request(req, null);\n        return HttpStatus.SC_OK;\n      } catch (HttpSolrClient.RemoteSolrException re) {\n        return re.code();\n      }\n    } finally {\n      delegationTokenClient.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#getStatusCode(String,String,String,HttpSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#getStatusCode(String,String,String,HttpSolrClient).mjava","sourceNew":"  private int getStatusCode(String token, final String user, final String op, HttpSolrClient client)\n  throws Exception {\n    SolrClient delegationTokenClient;\n    if (random().nextBoolean()) delegationTokenClient = new HttpSolrClient.Builder(client.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(client.getParser())\n        .build();\n    else delegationTokenClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty())\n        .withLBHttpSolrClientBuilder(new LBHttpSolrClient.Builder()\n            .withResponseParser(client.getParser())\n            .withHttpSolrClientBuilder(\n                new HttpSolrClient.Builder()\n                    .withKerberosDelegationToken(token)\n            ))\n        .build();\n    try {\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      if (user != null) p.set(PseudoAuthenticator.USER_NAME, user);\n      if (op != null) p.set(\"op\", op);\n      SolrRequest req = getAdminRequest(p);\n      if (user != null || op != null) {\n        Set<String> queryParams = new HashSet<>();\n        if (user != null) queryParams.add(PseudoAuthenticator.USER_NAME);\n        if (op != null) queryParams.add(\"op\");\n        req.setQueryParams(queryParams);\n      }\n      try {\n        delegationTokenClient.request(req, null);\n        return HttpStatus.SC_OK;\n      } catch (HttpSolrClient.RemoteSolrException re) {\n        return re.code();\n      }\n    } finally {\n      delegationTokenClient.close();\n    }\n  }\n\n","sourceOld":"  private int getStatusCode(String token, final String user, final String op, HttpSolrClient client)\n  throws Exception {\n    SolrClient delegationTokenClient;\n    if (random().nextBoolean()) delegationTokenClient = new HttpSolrClient.Builder(client.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(client.getParser())\n        .build();\n    else delegationTokenClient = new CloudSolrClient.Builder()\n        .withZkHost((cluster.getZkServer().getZkAddress()))\n        .withLBHttpSolrClientBuilder(new LBHttpSolrClient.Builder()\n            .withResponseParser(client.getParser())\n            .withHttpSolrClientBuilder(\n                new HttpSolrClient.Builder()\n                    .withKerberosDelegationToken(token)\n            ))\n        .build();\n    try {\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      if (user != null) p.set(PseudoAuthenticator.USER_NAME, user);\n      if (op != null) p.set(\"op\", op);\n      SolrRequest req = getAdminRequest(p);\n      if (user != null || op != null) {\n        Set<String> queryParams = new HashSet<>();\n        if (user != null) queryParams.add(PseudoAuthenticator.USER_NAME);\n        if (op != null) queryParams.add(\"op\");\n        req.setQueryParams(queryParams);\n      }\n      try {\n        delegationTokenClient.request(req, null);\n        return HttpStatus.SC_OK;\n      } catch (HttpSolrClient.RemoteSolrException re) {\n        return re.code();\n      }\n    } finally {\n      delegationTokenClient.close();\n    }\n  }\n\n","bugFix":["29887daf839649150d96855b142b76f5c45d60d2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#getStatusCode(String,String,String,HttpSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#getStatusCode(String,String,String,HttpSolrClient).mjava","sourceNew":"  private int getStatusCode(String token, final String user, final String op, HttpSolrClient client)\n  throws Exception {\n    SolrClient delegationTokenClient;\n    if (random().nextBoolean()) delegationTokenClient = new HttpSolrClient.Builder(client.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(client.getParser())\n        .build();\n    else delegationTokenClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty())\n        .withLBHttpSolrClientBuilder(new LBHttpSolrClient.Builder()\n            .withResponseParser(client.getParser())\n            .withSocketTimeout(30000).withConnectionTimeout(15000)\n            .withHttpSolrClientBuilder(\n                new HttpSolrClient.Builder()\n                    .withKerberosDelegationToken(token)\n            ))\n        .build();\n    try {\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      if (user != null) p.set(PseudoAuthenticator.USER_NAME, user);\n      if (op != null) p.set(\"op\", op);\n      SolrRequest req = getAdminRequest(p);\n      if (user != null || op != null) {\n        Set<String> queryParams = new HashSet<>();\n        if (user != null) queryParams.add(PseudoAuthenticator.USER_NAME);\n        if (op != null) queryParams.add(\"op\");\n        req.setQueryParams(queryParams);\n      }\n      try {\n        delegationTokenClient.request(req, null);\n        return HttpStatus.SC_OK;\n      } catch (HttpSolrClient.RemoteSolrException re) {\n        return re.code();\n      }\n    } finally {\n      delegationTokenClient.close();\n    }\n  }\n\n","sourceOld":"  private int getStatusCode(String token, final String user, final String op, HttpSolrClient client)\n  throws Exception {\n    SolrClient delegationTokenClient;\n    if (random().nextBoolean()) delegationTokenClient = new HttpSolrClient.Builder(client.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(client.getParser())\n        .build();\n    else delegationTokenClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty())\n        .withLBHttpSolrClientBuilder(new LBHttpSolrClient.Builder()\n            .withResponseParser(client.getParser())\n            .withHttpSolrClientBuilder(\n                new HttpSolrClient.Builder()\n                    .withKerberosDelegationToken(token)\n            ))\n        .build();\n    try {\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      if (user != null) p.set(PseudoAuthenticator.USER_NAME, user);\n      if (op != null) p.set(\"op\", op);\n      SolrRequest req = getAdminRequest(p);\n      if (user != null || op != null) {\n        Set<String> queryParams = new HashSet<>();\n        if (user != null) queryParams.add(PseudoAuthenticator.USER_NAME);\n        if (op != null) queryParams.add(\"op\");\n        req.setQueryParams(queryParams);\n      }\n      try {\n        delegationTokenClient.request(req, null);\n        return HttpStatus.SC_OK;\n      } catch (HttpSolrClient.RemoteSolrException re) {\n        return re.code();\n      }\n    } finally {\n      delegationTokenClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#getStatusCode(String,String,String,HttpSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#getStatusCode(String,String,String,HttpSolrClient).mjava","sourceNew":"  private int getStatusCode(String token, final String user, final String op, HttpSolrClient client)\n  throws Exception {\n    SolrClient delegationTokenClient;\n    if (random().nextBoolean()) delegationTokenClient = new HttpSolrClient.Builder(client.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(client.getParser())\n        .build();\n    else delegationTokenClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty())\n        .withLBHttpSolrClientBuilder(new LBHttpSolrClient.Builder()\n            .withResponseParser(client.getParser())\n            .withSocketTimeout(30000).withConnectionTimeout(15000)\n            .withHttpSolrClientBuilder(\n                new HttpSolrClient.Builder()\n                    .withKerberosDelegationToken(token)\n            ))\n        .build();\n    try {\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      if (user != null) p.set(PseudoAuthenticator.USER_NAME, user);\n      if (op != null) p.set(\"op\", op);\n      SolrRequest req = getAdminRequest(p);\n      if (user != null || op != null) {\n        Set<String> queryParams = new HashSet<>();\n        if (user != null) queryParams.add(PseudoAuthenticator.USER_NAME);\n        if (op != null) queryParams.add(\"op\");\n        req.setQueryParams(queryParams);\n      }\n      try {\n        delegationTokenClient.request(req, null);\n        return HttpStatus.SC_OK;\n      } catch (BaseHttpSolrClient.RemoteSolrException re) {\n        return re.code();\n      }\n    } finally {\n      delegationTokenClient.close();\n    }\n  }\n\n","sourceOld":"  private int getStatusCode(String token, final String user, final String op, HttpSolrClient client)\n  throws Exception {\n    SolrClient delegationTokenClient;\n    if (random().nextBoolean()) delegationTokenClient = new HttpSolrClient.Builder(client.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(client.getParser())\n        .build();\n    else delegationTokenClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty())\n        .withLBHttpSolrClientBuilder(new LBHttpSolrClient.Builder()\n            .withResponseParser(client.getParser())\n            .withSocketTimeout(30000).withConnectionTimeout(15000)\n            .withHttpSolrClientBuilder(\n                new HttpSolrClient.Builder()\n                    .withKerberosDelegationToken(token)\n            ))\n        .build();\n    try {\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      if (user != null) p.set(PseudoAuthenticator.USER_NAME, user);\n      if (op != null) p.set(\"op\", op);\n      SolrRequest req = getAdminRequest(p);\n      if (user != null || op != null) {\n        Set<String> queryParams = new HashSet<>();\n        if (user != null) queryParams.add(PseudoAuthenticator.USER_NAME);\n        if (op != null) queryParams.add(\"op\");\n        req.setQueryParams(queryParams);\n      }\n      try {\n        delegationTokenClient.request(req, null);\n        return HttpStatus.SC_OK;\n      } catch (HttpSolrClient.RemoteSolrException re) {\n        return re.code();\n      }\n    } finally {\n      delegationTokenClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#getStatusCode(String,String,String,HttpSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#getStatusCode(String,String,String,HttpSolrClient).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private int getStatusCode(String token, final String user, final String op, HttpSolrClient client)\n  throws Exception {\n    SolrClient delegationTokenClient;\n    if (random().nextBoolean()) delegationTokenClient = new HttpSolrClient.Builder(client.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(client.getParser())\n        .build();\n    else delegationTokenClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty())\n        .withLBHttpSolrClientBuilder(new LBHttpSolrClient.Builder()\n            .withResponseParser(client.getParser())\n            .withSocketTimeout(30000).withConnectionTimeout(15000)\n            .withHttpSolrClientBuilder(\n                new HttpSolrClient.Builder()\n                    .withKerberosDelegationToken(token)\n            ))\n        .build();\n    try {\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      if (user != null) p.set(PseudoAuthenticator.USER_NAME, user);\n      if (op != null) p.set(\"op\", op);\n      @SuppressWarnings({\"rawtypes\"})\n      SolrRequest req = getAdminRequest(p);\n      if (user != null || op != null) {\n        Set<String> queryParams = new HashSet<>();\n        if (user != null) queryParams.add(PseudoAuthenticator.USER_NAME);\n        if (op != null) queryParams.add(\"op\");\n        req.setQueryParams(queryParams);\n      }\n      try {\n        delegationTokenClient.request(req, null);\n        return HttpStatus.SC_OK;\n      } catch (BaseHttpSolrClient.RemoteSolrException re) {\n        return re.code();\n      }\n    } finally {\n      delegationTokenClient.close();\n    }\n  }\n\n","sourceOld":"  private int getStatusCode(String token, final String user, final String op, HttpSolrClient client)\n  throws Exception {\n    SolrClient delegationTokenClient;\n    if (random().nextBoolean()) delegationTokenClient = new HttpSolrClient.Builder(client.getBaseURL().toString())\n        .withKerberosDelegationToken(token)\n        .withResponseParser(client.getParser())\n        .build();\n    else delegationTokenClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty())\n        .withLBHttpSolrClientBuilder(new LBHttpSolrClient.Builder()\n            .withResponseParser(client.getParser())\n            .withSocketTimeout(30000).withConnectionTimeout(15000)\n            .withHttpSolrClientBuilder(\n                new HttpSolrClient.Builder()\n                    .withKerberosDelegationToken(token)\n            ))\n        .build();\n    try {\n      ModifiableSolrParams p = new ModifiableSolrParams();\n      if (user != null) p.set(PseudoAuthenticator.USER_NAME, user);\n      if (op != null) p.set(\"op\", op);\n      SolrRequest req = getAdminRequest(p);\n      if (user != null || op != null) {\n        Set<String> queryParams = new HashSet<>();\n        if (user != null) queryParams.add(PseudoAuthenticator.USER_NAME);\n        if (op != null) queryParams.add(\"op\");\n        req.setQueryParams(queryParams);\n      }\n      try {\n        delegationTokenClient.request(req, null);\n        return HttpStatus.SC_OK;\n      } catch (BaseHttpSolrClient.RemoteSolrException re) {\n        return re.code();\n      }\n    } finally {\n      delegationTokenClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29887daf839649150d96855b142b76f5c45d60d2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","29887daf839649150d96855b142b76f5c45d60d2"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["29887daf839649150d96855b142b76f5c45d60d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db96734b79e26d948b59f68bd4564c4836a71acf":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["db96734b79e26d948b59f68bd4564c4836a71acf"]},"commit2Childs":{"29887daf839649150d96855b142b76f5c45d60d2":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["db96734b79e26d948b59f68bd4564c4836a71acf"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29887daf839649150d96855b142b76f5c45d60d2","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"db96734b79e26d948b59f68bd4564c4836a71acf":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}