{"path":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public final String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator<Term[]> i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = i.next();\n      if (terms.length > 1) {\n        buffer.append(\"(\");\n        for (int j = 0; j < terms.length; j++) {\n          buffer.append(terms[j].text());\n          if (j < terms.length-1)\n            buffer.append(\" \");\n        }\n        buffer.append(\")\");\n      } else {\n        buffer.append(terms[0].text());\n      }\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public final String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator<Term[]> i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = i.next();\n      if (terms.length > 1) {\n        buffer.append(\"(\");\n        for (int j = 0; j < terms.length; j++) {\n          buffer.append(terms[j].text());\n          if (j < terms.length-1)\n            buffer.append(\" \");\n        }\n        buffer.append(\")\");\n      } else {\n        buffer.append(terms[0].text());\n      }\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c91d0d5a0302dda9a167c2abec3343b3944a3a81","date":1278264776,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public final String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field == null || !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator<Term[]> i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = i.next();\n      if (terms.length > 1) {\n        buffer.append(\"(\");\n        for (int j = 0; j < terms.length; j++) {\n          buffer.append(terms[j].text());\n          if (j < terms.length-1)\n            buffer.append(\" \");\n        }\n        buffer.append(\")\");\n      } else {\n        buffer.append(terms[0].text());\n      }\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public final String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator<Term[]> i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = i.next();\n      if (terms.length > 1) {\n        buffer.append(\"(\");\n        for (int j = 0; j < terms.length; j++) {\n          buffer.append(terms[j].text());\n          if (j < terms.length-1)\n            buffer.append(\" \");\n        }\n        buffer.append(\")\");\n      } else {\n        buffer.append(terms[0].text());\n      }\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":["45f06bdc846cdc9b2546a27a8a1492d613e87879"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public final String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field == null || !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator<Term[]> i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = i.next();\n      if (terms.length > 1) {\n        buffer.append(\"(\");\n        for (int j = 0; j < terms.length; j++) {\n          buffer.append(terms[j].text());\n          if (j < terms.length-1)\n            buffer.append(\" \");\n        }\n        buffer.append(\")\");\n      } else {\n        buffer.append(terms[0].text());\n      }\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public final String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator<Term[]> i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = i.next();\n      if (terms.length > 1) {\n        buffer.append(\"(\");\n        for (int j = 0; j < terms.length; j++) {\n          buffer.append(terms[j].text());\n          if (j < terms.length-1)\n            buffer.append(\" \");\n        }\n        buffer.append(\")\");\n      } else {\n        buffer.append(terms[0].text());\n      }\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public final String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field == null || !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator<Term[]> i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = i.next();\n      if (terms.length > 1) {\n        buffer.append(\"(\");\n        for (int j = 0; j < terms.length; j++) {\n          buffer.append(terms[j].text());\n          if (j < terms.length-1)\n            buffer.append(\" \");\n        }\n        buffer.append(\")\");\n      } else {\n        buffer.append(terms[0].text());\n      }\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public final String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field == null || !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    Iterator<Term[]> i = termArrays.iterator();\n    while (i.hasNext()) {\n      Term[] terms = i.next();\n      if (terms.length > 1) {\n        buffer.append(\"(\");\n        for (int j = 0; j < terms.length; j++) {\n          buffer.append(terms[j].text());\n          if (j < terms.length-1)\n            buffer.append(\" \");\n        }\n        buffer.append(\")\");\n      } else {\n        buffer.append(terms[0].text());\n      }\n      if (i.hasNext())\n        buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c91d0d5a0302dda9a167c2abec3343b3944a3a81"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c91d0d5a0302dda9a167c2abec3343b3944a3a81":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","c91d0d5a0302dda9a167c2abec3343b3944a3a81"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c91d0d5a0302dda9a167c2abec3343b3944a3a81":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c91d0d5a0302dda9a167c2abec3343b3944a3a81","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}