{"path":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(Terms,AttributeSource).mjava","commits":[{"id":"e8dd2a69747e9f2922fd8b6970bd1661b26a692d","date":1291080135,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(IndexReader,AttributeSource).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    // matches nothing\n    if (BasicOperations.isEmpty(automaton)) {\n      return TermsEnum.EMPTY;\n    }\n    \n    TermsEnum tenum = terms.iterator();\n    \n    // matches all possible strings\n    if (BasicOperations.isTotal(automaton)) {\n      return tenum;\n    }\n    \n    // matches a fixed string in singleton representation\n    String singleton = automaton.getSingleton();\n    if (singleton != null)\n      return new SingleTermsEnum(tenum, term.createTerm(singleton));\n\n    // matches a fixed string in expanded representation\n    final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n\n    if (commonPrefix.length() > 0) {\n      if (BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n        return new SingleTermsEnum(tenum, term.createTerm(commonPrefix));\n      }\n    \n      // matches a constant prefix\n      Automaton prefixAutomaton = BasicOperations.concatenate(BasicAutomata\n                                                              .makeString(commonPrefix), BasicAutomata.makeAnyString());\n      if (BasicOperations.sameLanguage(automaton, prefixAutomaton)) {\n        return new PrefixTermsEnum(tenum, term.createTerm(commonPrefix));\n      }\n    }\n\n    compileAutomaton();\n    \n    return new AutomatonTermsEnum(runAutomaton, tenum, isFinite, commonSuffixRef);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(IndexReader reader, AttributeSource atts) throws IOException {\n    // matches nothing\n    if (BasicOperations.isEmpty(automaton)) {\n      return TermsEnum.EMPTY;\n    }\n    \n    // matches all possible strings\n    if (BasicOperations.isTotal(automaton)) {\n      // NOTE: for now, MultiTermQuery enums terms at the\n      // MultiReader level, so we must use MultiFields here:\n      return MultiFields.getTerms(reader, getField()).iterator();\n    }\n    \n    // matches a fixed string in singleton representation\n    String singleton = automaton.getSingleton();\n    if (singleton != null)\n      return new SingleTermsEnum(reader, term.createTerm(singleton));\n\n    // matches a fixed string in expanded representation\n    final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n\n    if (commonPrefix.length() > 0) {\n      if (BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n        return new SingleTermsEnum(reader, term.createTerm(commonPrefix));\n      }\n    \n      // matches a constant prefix\n      Automaton prefixAutomaton = BasicOperations.concatenate(BasicAutomata\n                                                              .makeString(commonPrefix), BasicAutomata.makeAnyString());\n      if (BasicOperations.sameLanguage(automaton, prefixAutomaton)) {\n        return new PrefixTermsEnum(reader, term.createTerm(commonPrefix));\n      }\n    }\n\n    compileAutomaton();\n    \n    return new AutomatonTermsEnum(runAutomaton, term.field(), reader, isFinite, commonSuffixRef);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    // matches nothing\n    if (BasicOperations.isEmpty(automaton)) {\n      return TermsEnum.EMPTY;\n    }\n    \n    TermsEnum tenum = terms.iterator();\n    \n    // matches all possible strings\n    if (BasicOperations.isTotal(automaton)) {\n      return tenum;\n    }\n    \n    // matches a fixed string in singleton representation\n    String singleton = automaton.getSingleton();\n    if (singleton != null)\n      return new SingleTermsEnum(tenum, term.createTerm(singleton));\n\n    // matches a fixed string in expanded representation\n    final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n\n    if (commonPrefix.length() > 0) {\n      if (BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n        return new SingleTermsEnum(tenum, term.createTerm(commonPrefix));\n      }\n    \n      // matches a constant prefix\n      Automaton prefixAutomaton = BasicOperations.concatenate(BasicAutomata\n                                                              .makeString(commonPrefix), BasicAutomata.makeAnyString());\n      if (BasicOperations.sameLanguage(automaton, prefixAutomaton)) {\n        return new PrefixTermsEnum(tenum, term.createTerm(commonPrefix));\n      }\n    }\n\n    compileAutomaton();\n    \n    return new AutomatonTermsEnum(runAutomaton, tenum, isFinite, commonSuffixRef);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    // matches nothing\n    if (BasicOperations.isEmpty(automaton)) {\n      return TermsEnum.EMPTY;\n    }\n    \n    TermsEnum tenum = terms.iterator();\n    \n    // matches all possible strings\n    if (BasicOperations.isTotal(automaton)) {\n      return tenum;\n    }\n    \n    // matches a fixed string in singleton representation\n    String singleton = automaton.getSingleton();\n    if (singleton != null)\n      return new SingleTermsEnum(tenum, term.createTerm(singleton));\n\n    // matches a fixed string in expanded representation\n    final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n\n    if (commonPrefix.length() > 0) {\n      if (BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n        return new SingleTermsEnum(tenum, term.createTerm(commonPrefix));\n      }\n    \n      // matches a constant prefix\n      Automaton prefixAutomaton = BasicOperations.concatenate(BasicAutomata\n                                                              .makeString(commonPrefix), BasicAutomata.makeAnyString());\n      if (BasicOperations.sameLanguage(automaton, prefixAutomaton)) {\n        return new PrefixTermsEnum(tenum, term.createTerm(commonPrefix));\n      }\n    }\n\n    compileAutomaton();\n    \n    return new AutomatonTermsEnum(runAutomaton, tenum, isFinite, commonSuffixRef);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95f7ab6c9bc005d456da65d8d74c5338ffc031aa","date":1297016220,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(Terms,AttributeSource).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    return factory.getTermsEnum(terms, atts);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    // matches nothing\n    if (BasicOperations.isEmpty(automaton)) {\n      return TermsEnum.EMPTY;\n    }\n    \n    TermsEnum tenum = terms.iterator();\n    \n    // matches all possible strings\n    if (BasicOperations.isTotal(automaton)) {\n      return tenum;\n    }\n    \n    // matches a fixed string in singleton representation\n    String singleton = automaton.getSingleton();\n    if (singleton != null)\n      return new SingleTermsEnum(tenum, term.createTerm(singleton));\n\n    // matches a fixed string in expanded representation\n    final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n\n    if (commonPrefix.length() > 0) {\n      if (BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n        return new SingleTermsEnum(tenum, term.createTerm(commonPrefix));\n      }\n    \n      // matches a constant prefix\n      Automaton prefixAutomaton = BasicOperations.concatenate(BasicAutomata\n                                                              .makeString(commonPrefix), BasicAutomata.makeAnyString());\n      if (BasicOperations.sameLanguage(automaton, prefixAutomaton)) {\n        return new PrefixTermsEnum(tenum, term.createTerm(commonPrefix));\n      }\n    }\n\n    compileAutomaton();\n    \n    return new AutomatonTermsEnum(runAutomaton, tenum, isFinite, commonSuffixRef);\n  }\n\n","bugFix":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d","955c32f886db6f6356c9fcdea6b1f1cb4effda24","5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(Terms,AttributeSource).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    return factory.getTermsEnum(terms, atts);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    // matches nothing\n    if (BasicOperations.isEmpty(automaton)) {\n      return TermsEnum.EMPTY;\n    }\n    \n    TermsEnum tenum = terms.iterator();\n    \n    // matches all possible strings\n    if (BasicOperations.isTotal(automaton)) {\n      return tenum;\n    }\n    \n    // matches a fixed string in singleton representation\n    String singleton = automaton.getSingleton();\n    if (singleton != null)\n      return new SingleTermsEnum(tenum, term.createTerm(singleton));\n\n    // matches a fixed string in expanded representation\n    final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n\n    if (commonPrefix.length() > 0) {\n      if (BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n        return new SingleTermsEnum(tenum, term.createTerm(commonPrefix));\n      }\n    \n      // matches a constant prefix\n      Automaton prefixAutomaton = BasicOperations.concatenate(BasicAutomata\n                                                              .makeString(commonPrefix), BasicAutomata.makeAnyString());\n      if (BasicOperations.sameLanguage(automaton, prefixAutomaton)) {\n        return new PrefixTermsEnum(tenum, term.createTerm(commonPrefix));\n      }\n    }\n\n    compileAutomaton();\n    \n    return new AutomatonTermsEnum(runAutomaton, tenum, isFinite, commonSuffixRef);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(Terms,AttributeSource).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    return factory.getTermsEnum(terms, atts);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    // matches nothing\n    if (BasicOperations.isEmpty(automaton)) {\n      return TermsEnum.EMPTY;\n    }\n    \n    TermsEnum tenum = terms.iterator();\n    \n    // matches all possible strings\n    if (BasicOperations.isTotal(automaton)) {\n      return tenum;\n    }\n    \n    // matches a fixed string in singleton representation\n    String singleton = automaton.getSingleton();\n    if (singleton != null)\n      return new SingleTermsEnum(tenum, term.createTerm(singleton));\n\n    // matches a fixed string in expanded representation\n    final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n\n    if (commonPrefix.length() > 0) {\n      if (BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n        return new SingleTermsEnum(tenum, term.createTerm(commonPrefix));\n      }\n    \n      // matches a constant prefix\n      Automaton prefixAutomaton = BasicOperations.concatenate(BasicAutomata\n                                                              .makeString(commonPrefix), BasicAutomata.makeAnyString());\n      if (BasicOperations.sameLanguage(automaton, prefixAutomaton)) {\n        return new PrefixTermsEnum(tenum, term.createTerm(commonPrefix));\n      }\n    }\n\n    compileAutomaton();\n    \n    return new AutomatonTermsEnum(runAutomaton, tenum, isFinite, commonSuffixRef);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(Terms,AttributeSource).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    return compiled.getTermsEnum(terms);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    return factory.getTermsEnum(terms, atts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(Terms,AttributeSource).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    return compiled.getTermsEnum(terms);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    return compiled.getTermsEnum(terms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["95f7ab6c9bc005d456da65d8d74c5338ffc031aa"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","95f7ab6c9bc005d456da65d8d74c5338ffc031aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"95f7ab6c9bc005d456da65d8d74c5338ffc031aa":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","95f7ab6c9bc005d456da65d8d74c5338ffc031aa"],"3bb13258feba31ab676502787ab2e1779f129b7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e8dd2a69747e9f2922fd8b6970bd1661b26a692d","3bb13258feba31ab676502787ab2e1779f129b7a"],"95f7ab6c9bc005d456da65d8d74c5338ffc031aa":["60ba444201d2570214b6fcf1d15600dc1a01f548","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["95f7ab6c9bc005d456da65d8d74c5338ffc031aa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}