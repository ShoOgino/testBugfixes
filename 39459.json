{"path":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterWithNodeReplacement(SSLTestConfig).mjava","commits":[{"id":"e58bb31b4af6b8eeb1539849575c59df745bc6e6","date":1461874681,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterWithNodeReplacement(SSLTestConfig).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a cluster with the specified sslConfigs, runs {@link #checkClusterWithCollectionCreations}, \n   * then verifies that if we modify the default SSLContext (mimicing <code>javax.net.ssl.*</code> \n   * sysprops set on JVM startup) and reset to the default HttpClientBuilder, new HttpSolrClient instances \n   * will still be able to talk to our servers.\n   *\n   * @see SSLContext#setDefault\n   * @see HttpClientUtil#resetHttpClientBuilder\n   * @see #checkClusterWithCollectionCreations\n   */\n  private void checkClusterWithNodeReplacement(SSLTestConfig sslConfig) throws Exception {\n    \n    final JettyConfig config = JettyConfig.builder().withSSLConfig(sslConfig).build();\n    final MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), config);\n    try {\n      checkClusterWithCollectionCreations(cluster, sslConfig);\n\n      \n      // Change the defaul SSLContext to match our test config, or to match our original system default if\n      // our test config doesn't use SSL, and reset HttpClientUtil to it's defaults so it picks up our\n      // SSLContext that way.\n      SSLContext.setDefault( sslConfig.isSSLMode() ? sslConfig.buildClientSSLContext() : DEFAULT_SSL_CONTEXT);\n      HttpClientUtil.resetHttpClientBuilder();\n      \n      // recheck that we can communicate with all the jetty instances in our cluster\n      checkClusterJettys(cluster, sslConfig);\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterWithNodeReplacement(SSLTestConfig).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a cluster with the specified sslConfigs, runs {@link #checkClusterWithCollectionCreations}, \n   * then verifies that if we modify the default SSLContext (mimicing <code>javax.net.ssl.*</code> \n   * sysprops set on JVM startup) and reset to the default HttpClientBuilder, new HttpSolrClient instances \n   * will still be able to talk to our servers.\n   *\n   * @see SSLContext#setDefault\n   * @see HttpClientUtil#resetHttpClientBuilder\n   * @see #checkClusterWithCollectionCreations\n   */\n  private void checkClusterWithNodeReplacement(SSLTestConfig sslConfig) throws Exception {\n    \n    final JettyConfig config = JettyConfig.builder().withSSLConfig(sslConfig).build();\n    final MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), config);\n    try {\n      checkClusterWithCollectionCreations(cluster, sslConfig);\n\n      \n      // Change the defaul SSLContext to match our test config, or to match our original system default if\n      // our test config doesn't use SSL, and reset HttpClientUtil to it's defaults so it picks up our\n      // SSLContext that way.\n      SSLContext.setDefault( sslConfig.isSSLMode() ? sslConfig.buildClientSSLContext() : DEFAULT_SSL_CONTEXT);\n      HttpClientUtil.resetHttpClientBuilder();\n      \n      // recheck that we can communicate with all the jetty instances in our cluster\n      checkClusterJettys(cluster, sslConfig);\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e67ae138c1173c6193dbcfd9a94142b99ed2a0c5","date":1524429517,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterWithNodeReplacement(SSLTestConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterWithNodeReplacement(SSLTestConfig).mjava","sourceNew":"  /**\n   * Constructs a cluster with the specified sslConfigs, runs {@link #checkClusterWithCollectionCreations}, \n   * then verifies that if we modify the default SSLContext (mimicing <code>javax.net.ssl.*</code> \n   * sysprops set on JVM startup) and reset to the default HttpClientBuilder, new HttpSolrClient instances \n   * will still be able to talk to our servers.\n   *\n   * @see SSLContext#setDefault\n   * @see HttpClientUtil#resetHttpClientBuilder\n   * @see #checkClusterWithCollectionCreations\n   */\n  private void checkClusterWithNodeReplacement(SSLTestConfig sslConfig) throws Exception {\n    \n    final JettyConfig config = JettyConfig.builder().withSSLConfig(sslConfig).build();\n    final MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), config);\n    try {\n      checkClusterWithCollectionCreations(cluster, sslConfig);\n\n      \n      // Change the defaul SSLContext to match our test config, or to match our original system default if\n      // our test config doesn't use SSL, and reset HttpClientUtil to it's defaults so it picks up our\n      // SSLContext that way.\n      SSLContext.setDefault( sslConfig.isSSLMode() ? sslConfig.buildClientSSLContext() : DEFAULT_SSL_CONTEXT);\n      System.setProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME,\n                         Boolean.toString(sslConfig.getCheckPeerName()));\n      HttpClientUtil.resetHttpClientBuilder();\n      \n      // recheck that we can communicate with all the jetty instances in our cluster\n      checkClusterJettys(cluster, sslConfig);\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a cluster with the specified sslConfigs, runs {@link #checkClusterWithCollectionCreations}, \n   * then verifies that if we modify the default SSLContext (mimicing <code>javax.net.ssl.*</code> \n   * sysprops set on JVM startup) and reset to the default HttpClientBuilder, new HttpSolrClient instances \n   * will still be able to talk to our servers.\n   *\n   * @see SSLContext#setDefault\n   * @see HttpClientUtil#resetHttpClientBuilder\n   * @see #checkClusterWithCollectionCreations\n   */\n  private void checkClusterWithNodeReplacement(SSLTestConfig sslConfig) throws Exception {\n    \n    final JettyConfig config = JettyConfig.builder().withSSLConfig(sslConfig).build();\n    final MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), config);\n    try {\n      checkClusterWithCollectionCreations(cluster, sslConfig);\n\n      \n      // Change the defaul SSLContext to match our test config, or to match our original system default if\n      // our test config doesn't use SSL, and reset HttpClientUtil to it's defaults so it picks up our\n      // SSLContext that way.\n      SSLContext.setDefault( sslConfig.isSSLMode() ? sslConfig.buildClientSSLContext() : DEFAULT_SSL_CONTEXT);\n      HttpClientUtil.resetHttpClientBuilder();\n      \n      // recheck that we can communicate with all the jetty instances in our cluster\n      checkClusterJettys(cluster, sslConfig);\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterWithNodeReplacement(SSLTestConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterWithNodeReplacement(SSLTestConfig).mjava","sourceNew":"  /**\n   * Constructs a cluster with the specified sslConfigs, runs {@link #checkClusterWithCollectionCreations}, \n   * then verifies that if we modify the default SSLContext (mimicing <code>javax.net.ssl.*</code> \n   * sysprops set on JVM startup) and reset to the default HttpClientBuilder, new HttpSolrClient instances \n   * will still be able to talk to our servers.\n   *\n   * @see SSLContext#setDefault\n   * @see HttpClientUtil#resetHttpClientBuilder\n   * @see #checkClusterWithCollectionCreations\n   */\n  private void checkClusterWithNodeReplacement(SSLTestConfig sslConfig) throws Exception {\n    \n    final JettyConfig config = JettyConfig.builder().withSSLConfig(sslConfig.buildServerSSLConfig()).build();\n    final MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), config);\n    try {\n      checkClusterWithCollectionCreations(cluster, sslConfig);\n\n      \n      // Change the defaul SSLContext to match our test config, or to match our original system default if\n      // our test config doesn't use SSL, and reset HttpClientUtil to it's defaults so it picks up our\n      // SSLContext that way.\n      SSLContext.setDefault( sslConfig.isSSLMode() ? sslConfig.buildClientSSLContext() : DEFAULT_SSL_CONTEXT);\n      System.setProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME,\n                         Boolean.toString(sslConfig.getCheckPeerName()));\n      HttpClientUtil.resetHttpClientBuilder();\n      Http2SolrClient.resetSslContextFactory();\n      \n      // recheck that we can communicate with all the jetty instances in our cluster\n      checkClusterJettys(cluster, sslConfig);\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a cluster with the specified sslConfigs, runs {@link #checkClusterWithCollectionCreations}, \n   * then verifies that if we modify the default SSLContext (mimicing <code>javax.net.ssl.*</code> \n   * sysprops set on JVM startup) and reset to the default HttpClientBuilder, new HttpSolrClient instances \n   * will still be able to talk to our servers.\n   *\n   * @see SSLContext#setDefault\n   * @see HttpClientUtil#resetHttpClientBuilder\n   * @see #checkClusterWithCollectionCreations\n   */\n  private void checkClusterWithNodeReplacement(SSLTestConfig sslConfig) throws Exception {\n    \n    final JettyConfig config = JettyConfig.builder().withSSLConfig(sslConfig).build();\n    final MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), config);\n    try {\n      checkClusterWithCollectionCreations(cluster, sslConfig);\n\n      \n      // Change the defaul SSLContext to match our test config, or to match our original system default if\n      // our test config doesn't use SSL, and reset HttpClientUtil to it's defaults so it picks up our\n      // SSLContext that way.\n      SSLContext.setDefault( sslConfig.isSSLMode() ? sslConfig.buildClientSSLContext() : DEFAULT_SSL_CONTEXT);\n      System.setProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME,\n                         Boolean.toString(sslConfig.getCheckPeerName()));\n      HttpClientUtil.resetHttpClientBuilder();\n      \n      // recheck that we can communicate with all the jetty instances in our cluster\n      checkClusterJettys(cluster, sslConfig);\n    } finally {\n      cluster.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["e67ae138c1173c6193dbcfd9a94142b99ed2a0c5"],"e67ae138c1173c6193dbcfd9a94142b99ed2a0c5":["e58bb31b4af6b8eeb1539849575c59df745bc6e6"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e58bb31b4af6b8eeb1539849575c59df745bc6e6"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e67ae138c1173c6193dbcfd9a94142b99ed2a0c5":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["e67ae138c1173c6193dbcfd9a94142b99ed2a0c5","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e58bb31b4af6b8eeb1539849575c59df745bc6e6","55b50463286869f584cf849d1587a0fcd54d1dfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}