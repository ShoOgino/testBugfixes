{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<String,ServerWrapper>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78687ae26cb46d69bcec48f26fbae9df4c7844c0","date":1409960405,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet() & 0x7FFFFFF;\n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet();      \n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc0dd82628d996ab740ea8c83d64cdd7ecfe8d07","date":1409961490,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet() & Integer.MAX_VALUE;\n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet() & 0x7FFFFFF;\n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#request(SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer#request(SolrRequest).mjava","sourceNew":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet() & Integer.MAX_VALUE;\n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.client.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.client.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to query a live server. A SolrServerException is thrown if all servers are dead.\n   * If the request failed due to IOException then the live server is moved to dead pool and the request is\n   * retried on another live server.  After live servers are exhausted, any servers previously marked as dead\n   * will be tried before failing the request.\n   *\n   * @param request the SolrRequest.\n   *\n   * @return response\n   *\n   * @throws IOException If there is a low-level I/O error.\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n          throws SolrServerException, IOException {\n    Exception ex = null;\n    ServerWrapper[] serverList = aliveServerList;\n    \n    int maxTries = serverList.length;\n    Map<String,ServerWrapper> justFailed = null;\n\n    for (int attempts=0; attempts<maxTries; attempts++) {\n      int count = counter.incrementAndGet() & Integer.MAX_VALUE;\n      ServerWrapper wrapper = serverList[count % serverList.length];\n      wrapper.lastUsed = System.currentTimeMillis();\n\n      try {\n        return wrapper.solrServer.request(request);\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          moveAliveToDead(wrapper);\n          if (justFailed == null) justFailed = new HashMap<>();\n          justFailed.put(wrapper.getKey(), wrapper);\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    // try other standard servers that we didn't try just now\n    for (ServerWrapper wrapper : zombieServers.values()) {\n      if (wrapper.standard==false || justFailed!=null && justFailed.containsKey(wrapper.getKey())) continue;\n      try {\n        NamedList<Object> rsp = wrapper.solrServer.request(request);\n        // remove from zombie list *before* adding to alive to avoid a race that could lose a server\n        zombieServers.remove(wrapper.getKey());\n        addToAlive(wrapper);\n        return rsp;\n      } catch (SolrException e) {\n        // Server is alive but the request was malformed or invalid\n        throw e;\n      } catch (SolrServerException e) {\n        if (e.getRootCause() instanceof IOException) {\n          ex = e;\n          // still dead\n        } else {\n          throw e;\n        }\n      } catch (Exception e) {\n        throw new SolrServerException(e);\n      }\n    }\n\n\n    if (ex == null) {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\");\n    } else {\n      throw new SolrServerException(\"No live SolrServers available to handle this request\", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":["2df5da9b9a665127f75b19af580e9df62caced1d","4a66009e1f5c17a77d75a6381cacdf9c893b2d8f"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c26f00b574427b55127e869b935845554afde1fa"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc0dd82628d996ab740ea8c83d64cdd7ecfe8d07":["78687ae26cb46d69bcec48f26fbae9df4c7844c0"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc0dd82628d996ab740ea8c83d64cdd7ecfe8d07"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"78687ae26cb46d69bcec48f26fbae9df4c7844c0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["78687ae26cb46d69bcec48f26fbae9df4c7844c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cc0dd82628d996ab740ea8c83d64cdd7ecfe8d07":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"78687ae26cb46d69bcec48f26fbae9df4c7844c0":["cc0dd82628d996ab740ea8c83d64cdd7ecfe8d07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}