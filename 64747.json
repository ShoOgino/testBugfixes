{"path":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"/dev/null","sourceNew":"  public Map<String, Object> nextRow() {\r\n    if(done) return null;\r\n    Map<String, Object> row = new HashMap<String, Object>();\r\n    DataSource<InputStream> dataSource = context.getDataSource();\r\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\r\n    ContentHandler contentHandler = null;\r\n    Metadata metadata = new Metadata();\r\n    StringWriter sw = new StringWriter();\r\n    try {\r\n      if (\"html\".equals(format)) {\r\n        contentHandler = getHtmlHandler(sw);\r\n      } else if (\"xml\".equals(format)) {\r\n        contentHandler = getXmlContentHandler(sw);\r\n      } else if (\"text\".equals(format)) {\r\n        contentHandler = getTextContentHandler(sw);\r\n      } else if(\"none\".equals(format)){\r\n        contentHandler = new DefaultHandler();        \r\n      }\r\n    } catch (TransformerConfigurationException e) {\r\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\r\n    }\r\n    Parser tikaParser = null;\r\n    if(parser.equals(AUTO_PARSER)){\r\n      AutoDetectParser parser = new AutoDetectParser();\r\n      parser.setConfig(tikaConfig);\r\n      tikaParser = parser;\r\n    } else {\r\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\r\n    }\r\n    try {\r\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\r\n    } catch (Exception e) {\r\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\r\n    }\r\n    IOUtils.closeQuietly(is);\r\n    for (Map<String, String> field : context.getAllEntityFields()) {\r\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\r\n      String col = field.get(COLUMN);\r\n      String s = metadata.get(col);\r\n      if (s != null) row.put(col, s);\r\n    }\r\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\r\n    done = true;\r\n    return row;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":null,"sourceOld":"  public Map<String, Object> nextRow() {\r\n    if(done) return null;\r\n    Map<String, Object> row = new HashMap<String, Object>();\r\n    DataSource<InputStream> dataSource = context.getDataSource();\r\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\r\n    ContentHandler contentHandler = null;\r\n    Metadata metadata = new Metadata();\r\n    StringWriter sw = new StringWriter();\r\n    try {\r\n      if (\"html\".equals(format)) {\r\n        contentHandler = getHtmlHandler(sw);\r\n      } else if (\"xml\".equals(format)) {\r\n        contentHandler = getXmlContentHandler(sw);\r\n      } else if (\"text\".equals(format)) {\r\n        contentHandler = getTextContentHandler(sw);\r\n      } else if(\"none\".equals(format)){\r\n        contentHandler = new DefaultHandler();        \r\n      }\r\n    } catch (TransformerConfigurationException e) {\r\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\r\n    }\r\n    Parser tikaParser = null;\r\n    if(parser.equals(AUTO_PARSER)){\r\n      AutoDetectParser parser = new AutoDetectParser();\r\n      parser.setConfig(tikaConfig);\r\n      tikaParser = parser;\r\n    } else {\r\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\r\n    }\r\n    try {\r\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\r\n    } catch (Exception e) {\r\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\r\n    }\r\n    IOUtils.closeQuietly(is);\r\n    for (Map<String, String> field : context.getAllEntityFields()) {\r\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\r\n      String col = field.get(COLUMN);\r\n      String s = metadata.get(col);\r\n      if (s != null) row.put(col, s);\r\n    }\r\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\r\n    done = true;\r\n    return row;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  public Map<String, Object> nextRow() {\r\n    if(done) return null;\r\n    Map<String, Object> row = new HashMap<String, Object>();\r\n    DataSource<InputStream> dataSource = context.getDataSource();\r\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\r\n    ContentHandler contentHandler = null;\r\n    Metadata metadata = new Metadata();\r\n    StringWriter sw = new StringWriter();\r\n    try {\r\n      if (\"html\".equals(format)) {\r\n        contentHandler = getHtmlHandler(sw);\r\n      } else if (\"xml\".equals(format)) {\r\n        contentHandler = getXmlContentHandler(sw);\r\n      } else if (\"text\".equals(format)) {\r\n        contentHandler = getTextContentHandler(sw);\r\n      } else if(\"none\".equals(format)){\r\n        contentHandler = new DefaultHandler();        \r\n      }\r\n    } catch (TransformerConfigurationException e) {\r\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\r\n    }\r\n    Parser tikaParser = null;\r\n    if(parser.equals(AUTO_PARSER)){\r\n      AutoDetectParser parser = new AutoDetectParser();\r\n      parser.setConfig(tikaConfig);\r\n      tikaParser = parser;\r\n    } else {\r\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\r\n    }\r\n    try {\r\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\r\n    } catch (Exception e) {\r\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\r\n    }\r\n    IOUtils.closeQuietly(is);\r\n    for (Map<String, String> field : context.getAllEntityFields()) {\r\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\r\n      String col = field.get(COLUMN);\r\n      String s = metadata.get(col);\r\n      if (s != null) row.put(col, s);\r\n    }\r\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\r\n    done = true;\r\n    return row;\r\n  }\r\n\n","sourceOld":"  public Map<String, Object> nextRow() {\r\n    if(done) return null;\r\n    Map<String, Object> row = new HashMap<String, Object>();\r\n    DataSource<InputStream> dataSource = context.getDataSource();\r\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\r\n    ContentHandler contentHandler = null;\r\n    Metadata metadata = new Metadata();\r\n    StringWriter sw = new StringWriter();\r\n    try {\r\n      if (\"html\".equals(format)) {\r\n        contentHandler = getHtmlHandler(sw);\r\n      } else if (\"xml\".equals(format)) {\r\n        contentHandler = getXmlContentHandler(sw);\r\n      } else if (\"text\".equals(format)) {\r\n        contentHandler = getTextContentHandler(sw);\r\n      } else if(\"none\".equals(format)){\r\n        contentHandler = new DefaultHandler();        \r\n      }\r\n    } catch (TransformerConfigurationException e) {\r\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\r\n    }\r\n    Parser tikaParser = null;\r\n    if(parser.equals(AUTO_PARSER)){\r\n      AutoDetectParser parser = new AutoDetectParser();\r\n      parser.setConfig(tikaConfig);\r\n      tikaParser = parser;\r\n    } else {\r\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\r\n    }\r\n    try {\r\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\r\n    } catch (Exception e) {\r\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\r\n    }\r\n    IOUtils.closeQuietly(is);\r\n    for (Map<String, String> field : context.getAllEntityFields()) {\r\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\r\n      String col = field.get(COLUMN);\r\n      String s = metadata.get(col);\r\n      if (s != null) row.put(col, s);\r\n    }\r\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\r\n    done = true;\r\n    return row;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"/dev/null","sourceNew":"  public Map<String, Object> nextRow() {\r\n    if(done) return null;\r\n    Map<String, Object> row = new HashMap<String, Object>();\r\n    DataSource<InputStream> dataSource = context.getDataSource();\r\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\r\n    ContentHandler contentHandler = null;\r\n    Metadata metadata = new Metadata();\r\n    StringWriter sw = new StringWriter();\r\n    try {\r\n      if (\"html\".equals(format)) {\r\n        contentHandler = getHtmlHandler(sw);\r\n      } else if (\"xml\".equals(format)) {\r\n        contentHandler = getXmlContentHandler(sw);\r\n      } else if (\"text\".equals(format)) {\r\n        contentHandler = getTextContentHandler(sw);\r\n      } else if(\"none\".equals(format)){\r\n        contentHandler = new DefaultHandler();        \r\n      }\r\n    } catch (TransformerConfigurationException e) {\r\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\r\n    }\r\n    Parser tikaParser = null;\r\n    if(parser.equals(AUTO_PARSER)){\r\n      AutoDetectParser parser = new AutoDetectParser();\r\n      parser.setConfig(tikaConfig);\r\n      tikaParser = parser;\r\n    } else {\r\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\r\n    }\r\n    try {\r\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\r\n    } catch (Exception e) {\r\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\r\n    }\r\n    IOUtils.closeQuietly(is);\r\n    for (Map<String, String> field : context.getAllEntityFields()) {\r\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\r\n      String col = field.get(COLUMN);\r\n      String s = metadata.get(col);\r\n      if (s != null) row.put(col, s);\r\n    }\r\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\r\n    done = true;\r\n    return row;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff3adc4fd8094e3973a5ecbbe8968ae45a86a55","date":1270182973,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      AutoDetectParser parser = new AutoDetectParser();\n      parser.setConfig(tikaConfig);\n      tikaParser = parser;\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  public Map<String, Object> nextRow() {\r\n    if(done) return null;\r\n    Map<String, Object> row = new HashMap<String, Object>();\r\n    DataSource<InputStream> dataSource = context.getDataSource();\r\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\r\n    ContentHandler contentHandler = null;\r\n    Metadata metadata = new Metadata();\r\n    StringWriter sw = new StringWriter();\r\n    try {\r\n      if (\"html\".equals(format)) {\r\n        contentHandler = getHtmlHandler(sw);\r\n      } else if (\"xml\".equals(format)) {\r\n        contentHandler = getXmlContentHandler(sw);\r\n      } else if (\"text\".equals(format)) {\r\n        contentHandler = getTextContentHandler(sw);\r\n      } else if(\"none\".equals(format)){\r\n        contentHandler = new DefaultHandler();        \r\n      }\r\n    } catch (TransformerConfigurationException e) {\r\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\r\n    }\r\n    Parser tikaParser = null;\r\n    if(parser.equals(AUTO_PARSER)){\r\n      AutoDetectParser parser = new AutoDetectParser();\r\n      parser.setConfig(tikaConfig);\r\n      tikaParser = parser;\r\n    } else {\r\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\r\n    }\r\n    try {\r\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\r\n    } catch (Exception e) {\r\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\r\n    }\r\n    IOUtils.closeQuietly(is);\r\n    for (Map<String, String> field : context.getAllEntityFields()) {\r\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\r\n      String col = field.get(COLUMN);\r\n      String s = metadata.get(col);\r\n      if (s != null) row.put(col, s);\r\n    }\r\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\r\n    done = true;\r\n    return row;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      AutoDetectParser parser = new AutoDetectParser();\n      parser.setConfig(tikaConfig);\n      tikaParser = parser;\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      AutoDetectParser parser = new AutoDetectParser();\n      parser.setConfig(tikaConfig);\n      tikaParser = parser;\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      AutoDetectParser parser = new AutoDetectParser();\n      parser.setConfig(tikaConfig);\n      tikaParser = parser;\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      AutoDetectParser parser = new AutoDetectParser();\n      parser.setConfig(tikaConfig);\n      tikaParser = parser;\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      AutoDetectParser parser = new AutoDetectParser();\n      parser.setConfig(tikaConfig);\n      tikaParser = parser;\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      AutoDetectParser parser = new AutoDetectParser();\n      parser.setConfig(tikaConfig);\n      tikaParser = parser;\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d20d5e40789b1c42f4f926e3174b271256c43657","date":1301641092,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      AutoDetectParser parser = new AutoDetectParser();\n      parser.setConfig(tikaConfig);\n      tikaParser = parser;\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      AutoDetectParser parser = new AutoDetectParser();\n      parser.setConfig(tikaConfig);\n      tikaParser = parser;\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/TikaEntityProcessor#nextRow().mjava","sourceNew":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      AutoDetectParser parser = new AutoDetectParser();\n      parser.setConfig(tikaConfig);\n      tikaParser = parser;\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Object> nextRow() {\n    if(done) return null;\n    Map<String, Object> row = new HashMap<String, Object>();\n    DataSource<InputStream> dataSource = context.getDataSource();\n    InputStream is = dataSource.getData(context.getResolvedEntityAttribute(URL));\n    ContentHandler contentHandler = null;\n    Metadata metadata = new Metadata();\n    StringWriter sw = new StringWriter();\n    try {\n      if (\"html\".equals(format)) {\n        contentHandler = getHtmlHandler(sw);\n      } else if (\"xml\".equals(format)) {\n        contentHandler = getXmlContentHandler(sw);\n      } else if (\"text\".equals(format)) {\n        contentHandler = getTextContentHandler(sw);\n      } else if(\"none\".equals(format)){\n        contentHandler = new DefaultHandler();        \n      }\n    } catch (TransformerConfigurationException e) {\n      wrapAndThrow(SEVERE, e, \"Unable to create content handler\");\n    }\n    Parser tikaParser = null;\n    if(parser.equals(AUTO_PARSER)){\n      AutoDetectParser parser = new AutoDetectParser();\n      parser.setConfig(tikaConfig);\n      tikaParser = parser;\n    } else {\n      tikaParser = (Parser) context.getSolrCore().getResourceLoader().newInstance(parser);\n    }\n    try {\n      tikaParser.parse(is, contentHandler, metadata , new ParseContext());\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE, e, \"Unable to read content\");\n    }\n    IOUtils.closeQuietly(is);\n    for (Map<String, String> field : context.getAllEntityFields()) {\n      if (!\"true\".equals(field.get(\"meta\"))) continue;\n      String col = field.get(COLUMN);\n      String s = metadata.get(col);\n      if (s != null) row.put(col, s);\n    }\n    if(!\"none\".equals(format) ) row.put(\"text\", sw.toString());\n    done = true;\n    return row;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["dff3adc4fd8094e3973a5ecbbe8968ae45a86a55"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","d20d5e40789b1c42f4f926e3174b271256c43657"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d20d5e40789b1c42f4f926e3174b271256c43657":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["dff3adc4fd8094e3973a5ecbbe8968ae45a86a55","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"dff3adc4fd8094e3973a5ecbbe8968ae45a86a55":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["dff3adc4fd8094e3973a5ecbbe8968ae45a86a55","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c26f00b574427b55127e869b935845554afde1fa","d20d5e40789b1c42f4f926e3174b271256c43657","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"d20d5e40789b1c42f4f926e3174b271256c43657":["c26f00b574427b55127e869b935845554afde1fa"],"1da8d55113b689b06716246649de6f62430f15c0":["dff3adc4fd8094e3973a5ecbbe8968ae45a86a55"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"dff3adc4fd8094e3973a5ecbbe8968ae45a86a55":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}