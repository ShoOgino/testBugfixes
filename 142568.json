{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPayloadCheckQuery#hashCode().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPayloadCheckQuery#hashCode().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanPayloadCheckQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    int h = match.hashCode();\n    h ^= (h << 8) | (h >>> 25);  // reversible\n    //TODO: is this right?\n    h ^= payloadToMatch.hashCode();\n    h ^= Float.floatToRawIntBits(getBoost()) ;\n    return h;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    int h = match.hashCode();\n    h ^= (h << 8) | (h >>> 25);  // reversible\n    //TODO: is this right?\n    h ^= payloadToMatch.hashCode();\n    h ^= Float.floatToRawIntBits(getBoost()) ;\n    return h;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPayloadCheckQuery#hashCode().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPayloadCheckQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    int h = match.hashCode() ^ getClass().hashCode();\n    h ^= (h << 8) | (h >>> 25);  // reversible\n    //TODO: is this right?\n    h ^= payloadToMatch.hashCode();\n    h ^= Float.floatToRawIntBits(getBoost()) ;\n    return h;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    int h = match.hashCode();\n    h ^= (h << 8) | (h >>> 25);  // reversible\n    //TODO: is this right?\n    h ^= payloadToMatch.hashCode();\n    h ^= Float.floatToRawIntBits(getBoost()) ;\n    return h;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPayloadCheckQuery#hashCode().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPayloadCheckQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    int h = match.hashCode() ^ getClass().hashCode();\n    h ^= (h << 8) | (h >>> 25);  // reversible\n    //TODO: is this right?\n    h ^= payloadToMatch.hashCode();\n    h ^= Float.floatToRawIntBits(getBoost()) ;\n    return h;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    int h = match.hashCode();\n    h ^= (h << 8) | (h >>> 25);  // reversible\n    //TODO: is this right?\n    h ^= payloadToMatch.hashCode();\n    h ^= Float.floatToRawIntBits(getBoost()) ;\n    return h;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaa8203c0525e91bf87759d14591ba3ff26dfa7f","date":1430913024,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPayloadCheckQuery#hashCode().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPayloadCheckQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    int h = super.hashCode();\n    h = (h * 63) ^ payloadToMatch.hashCode();\n    return h;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    int h = match.hashCode() ^ getClass().hashCode();\n    h ^= (h << 8) | (h >>> 25);  // reversible\n    //TODO: is this right?\n    h ^= payloadToMatch.hashCode();\n    h ^= Float.floatToRawIntBits(getBoost()) ;\n    return h;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#hashCode().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPayloadCheckQuery#hashCode().mjava","sourceNew":"  @Override\n  public int hashCode() {\n    int h = super.hashCode();\n    h = (h * 63) ^ payloadToMatch.hashCode();\n    return h;\n  }\n\n","sourceOld":"  @Override\n  public int hashCode() {\n    int h = super.hashCode();\n    h = (h * 63) ^ payloadToMatch.hashCode();\n    return h;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["aaa8203c0525e91bf87759d14591ba3ff26dfa7f"],"aaa8203c0525e91bf87759d14591ba3ff26dfa7f":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fab172655716b96f7e42376116235017a922de3a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d530e71ed32ab23b34ca3fc72b080a554a40404"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aaa8203c0525e91bf87759d14591ba3ff26dfa7f":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["aaa8203c0525e91bf87759d14591ba3ff26dfa7f","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}