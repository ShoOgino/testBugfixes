{"path":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,AtomicReaderContext,Bits).mjava","commits":[{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,AtomicReaderContext,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader, lowerVal, upperVal, includeLower, includeUpper);\n       }\n       @Override\n       public Bits bits() throws IOException {\n         return null;  // don't use random access\n       }\n     }, acceptDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final AtomicReaderContext readerContext) throws IOException {\n     return new DocIdSet() {\n       @Override\n      public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader, lowerVal, upperVal, includeLower, includeUpper);\n       }\n     };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d207426bd26fa5c1014e26d21d87603aea68b7","date":1327944562,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,AtomicReaderContext,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader(), lowerVal, upperVal, includeLower, includeUpper);\n       }\n       @Override\n       public Bits bits() throws IOException {\n         return null;  // don't use random access\n       }\n     }, acceptDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader, lowerVal, upperVal, includeLower, includeUpper);\n       }\n       @Override\n       public Bits bits() throws IOException {\n         return null;  // don't use random access\n       }\n     }, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,AtomicReaderContext,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader(), lowerVal, upperVal, includeLower, includeUpper);\n       }\n       @Override\n       public Bits bits() throws IOException {\n         return null;  // don't use random access\n       }\n     }, acceptDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader, lowerVal, upperVal, includeLower, includeUpper);\n       }\n       @Override\n       public Bits bits() throws IOException {\n         return null;  // don't use random access\n       }\n     }, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,AtomicReaderContext,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader(), lowerVal, upperVal, includeLower, includeUpper);\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n     }, acceptDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader(), lowerVal, upperVal, includeLower, includeUpper);\n       }\n       @Override\n       public Bits bits() throws IOException {\n         return null;  // don't use random access\n       }\n     }, acceptDocs);\n  }\n\n","bugFix":["6620df8541b174097b1133a4fc370adb2e570524"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,AtomicReaderContext,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader(), lowerVal, upperVal, includeLower, includeUpper);\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n     }, acceptDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader(), lowerVal, upperVal, includeLower, includeUpper);\n       }\n       @Override\n       public Bits bits() throws IOException {\n         return null;  // don't use random access\n       }\n     }, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,AtomicReaderContext,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader(), lowerVal, upperVal, includeLower, includeUpper);\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n     }, acceptDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader(), lowerVal, upperVal, includeLower, includeUpper);\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n     }, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,AtomicReaderContext,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader(), lowerVal, upperVal, includeLower, includeUpper);\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n     }, acceptDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader(), lowerVal, upperVal, includeLower, includeUpper);\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n     }, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","date":1402659583,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,AtomicReaderContext,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader(), lowerVal, upperVal, includeLower, includeUpper);\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n\n       @Override\n       public long ramBytesUsed() {\n         return 0L;\n       }\n     }, acceptDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader(), lowerVal, upperVal, includeLower, includeUpper);\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n     }, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,AtomicReaderContext,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader(), lowerVal, upperVal, includeLower, includeUpper);\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n\n       @Override\n       public long ramBytesUsed() {\n         return 0L;\n       }\n     }, acceptDocs);\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader(), lowerVal, upperVal, includeLower, includeUpper);\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n     }, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/function/ValueSourceRangeFilter#getDocIdSet(Map,AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final Map context, final AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n     return BitsFilteredDocIdSet.wrap(new DocIdSet() {\n       @Override\n       public DocIdSetIterator iterator() throws IOException {\n         return valueSource.getValues(context, readerContext).getRangeScorer(readerContext.reader(), lowerVal, upperVal, includeLower, includeUpper);\n       }\n       @Override\n       public Bits bits() {\n         return null;  // don't use random access\n       }\n\n       @Override\n       public long ramBytesUsed() {\n         return 0L;\n       }\n     }, acceptDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","19275ba31e621f6da1b83bf13af75233876fd3d4"],"6620df8541b174097b1133a4fc370adb2e570524":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["5cab9a86bd67202d20b6adc463008c8e982b070a","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96d207426bd26fa5c1014e26d21d87603aea68b7":["6620df8541b174097b1133a4fc370adb2e570524"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["19275ba31e621f6da1b83bf13af75233876fd3d4","54ea8c8c94ae9da9a366175e2abbe1dde3aa0453"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["54ea8c8c94ae9da9a366175e2abbe1dde3aa0453"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["6620df8541b174097b1133a4fc370adb2e570524","96d207426bd26fa5c1014e26d21d87603aea68b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"6620df8541b174097b1133a4fc370adb2e570524":["96d207426bd26fa5c1014e26d21d87603aea68b7","5cab9a86bd67202d20b6adc463008c8e982b070a"],"54ea8c8c94ae9da9a366175e2abbe1dde3aa0453":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6620df8541b174097b1133a4fc370adb2e570524"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","54ea8c8c94ae9da9a366175e2abbe1dde3aa0453","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","fe33227f6805edab2036cbb80645cc4e2d1fa424","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","fe33227f6805edab2036cbb80645cc4e2d1fa424","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}