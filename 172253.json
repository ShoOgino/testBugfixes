{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","sourceNew":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n    \n    int id = 0;\n    int value = 100;\n    \n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n    \n    // Delete all\n    modifier.deleteAll(); \n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n    \n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n    \n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n    \n    int id = 0;\n    int value = 100;\n    \n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n    \n    // Delete all\n    modifier.deleteAll(); \n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n    \n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n    \n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","sourceNew":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n    \n    int id = 0;\n    int value = 100;\n    \n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n    \n    // Delete all\n    modifier.deleteAll(); \n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n    \n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n    \n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n    \n    int id = 0;\n    int value = 100;\n    \n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n    \n    // Delete all\n    modifier.deleteAll(); \n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n    \n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n    \n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","sourceNew":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n    \n    int id = 0;\n    int value = 100;\n    \n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n    \n    // Delete all\n    modifier.deleteAll(); \n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n    \n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n    \n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n    \n    int id = 0;\n    int value = 100;\n    \n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n    \n    // Delete all\n    modifier.deleteAll(); \n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n    \n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n    \n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","sourceNew":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory(random);\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n    \n    int id = 0;\n    int value = 100;\n    \n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n    \n    // Delete all\n    modifier.deleteAll(); \n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n    \n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n    \n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n    \n    int id = 0;\n    int value = 100;\n    \n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n    \n    // Delete all\n    modifier.deleteAll(); \n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n    \n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n    \n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","sourceNew":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n    \n    int id = 0;\n    int value = 100;\n    \n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n    \n    // Delete all\n    modifier.deleteAll(); \n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n    \n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n    \n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory(random);\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n    \n    int id = 0;\n    int value = 100;\n    \n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n    \n    // Delete all\n    modifier.deleteAll(); \n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n    \n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n    \n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","sourceNew":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n\n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n    \n    int id = 0;\n    int value = 100;\n    \n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n    \n    // Delete all\n    modifier.deleteAll(); \n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n    \n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n    \n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","sourceNew":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n    \n    int id = 0;\n    int value = 100;\n    \n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n    \n    // Delete all\n    modifier.deleteAll(); \n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n    \n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n    \n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n    \n    int id = 0;\n    int value = 100;\n    \n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n    \n    // Delete all\n    modifier.deleteAll(); \n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n    \n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n    \n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","sourceNew":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n\n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n\n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","sourceNew":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n\n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n    \n    int id = 0;\n    int value = 100;\n    \n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n    \n    // Delete all\n    modifier.deleteAll(); \n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n    \n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n    \n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","sourceNew":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n\n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n    \n    int id = 0;\n    int value = 100;\n    \n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n    \n    // Delete all\n    modifier.deleteAll(); \n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n    \n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n    \n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","sourceNew":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n\n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n    \n    int id = 0;\n    int value = 100;\n    \n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n    \n    // Delete all\n    modifier.deleteAll(); \n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n    \n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n    \n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","sourceNew":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n\n    // Validate that the docs are still there\n    reader = IndexReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n\n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","sourceNew":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n\n    // Validate that the docs are still there\n    reader = IndexReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n\n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","sourceNew":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n\n    // Validate that the docs are still there\n    reader = IndexReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n\n    // Validate that the docs are still there\n    reader = IndexReader.open(dir, true);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllNRT().mjava","sourceNew":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n\n    // Validate that the docs are still there\n    reader = IndexReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    dir.close();\n  }\n\n","sourceOld":"  // test deleteAll() w/ near real-time reader\n  public void testDeleteAllNRT() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter modifier = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMaxBufferedDocs(2)\n        .setMaxBufferedDeleteTerms(2));\n\n    int id = 0;\n    int value = 100;\n\n    for (int i = 0; i < 7; i++) {\n      addDoc(modifier, ++id, value);\n    }\n    modifier.commit();\n\n    IndexReader reader = modifier.getReader();\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    addDoc(modifier, ++id, value);\n    addDoc(modifier, ++id, value);\n\n    // Delete all\n    modifier.deleteAll();\n\n    reader = modifier.getReader();\n    assertEquals(0, reader.numDocs());\n    reader.close();\n\n\n    // Roll it back\n    modifier.rollback();\n    modifier.close();\n\n    // Validate that the docs are still there\n    reader = IndexReader.open(dir);\n    assertEquals(7, reader.numDocs());\n    reader.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["1f653cfcf159baeaafe5d01682a911e95bba4012","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f2c5f0cb44df114db4228c8f77861714b5cabaea","962d04139994fce5193143ef35615499a9a96d78"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"c7f8e68717c68517265937c911e1ce9f25750247":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c7f8e68717c68517265937c911e1ce9f25750247","1f653cfcf159baeaafe5d01682a911e95bba4012"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1f653cfcf159baeaafe5d01682a911e95bba4012","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["c7f8e68717c68517265937c911e1ce9f25750247"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","a3776dccca01c11e7046323cfad46a3b4a471233","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"962d04139994fce5193143ef35615499a9a96d78":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"c7f8e68717c68517265937c911e1ce9f25750247":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","962d04139994fce5193143ef35615499a9a96d78"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c7f8e68717c68517265937c911e1ce9f25750247"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}