{"path":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testRandomStrings().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testRandomStrings().mjava","pathOld":"modules/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws IOException {\n    Encoder encoders[] = new Encoder[] {\n      new Metaphone(), new DoubleMetaphone(), new Soundex(), new RefinedSoundex(), new Caverphone()\n    };\n    \n    for (final Encoder e : encoders) {\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n      \n      Analyzer b = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws IOException {\n    Encoder encoders[] = new Encoder[] {\n      new Metaphone(), new DoubleMetaphone(), new Soundex(), new RefinedSoundex(), new Caverphone()\n    };\n    \n    for (final Encoder e : encoders) {\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n      \n      Analyzer b = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1d6778b519a53bb76b0e31b6bbb17d6920abfe0","date":1335842208,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws IOException {\n    Encoder encoders[] = new Encoder[] {\n      new Metaphone(), new DoubleMetaphone(), new Soundex(), new RefinedSoundex(), new Caverphone2()\n    };\n    \n    for (final Encoder e : encoders) {\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n      \n      Analyzer b = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws IOException {\n    Encoder encoders[] = new Encoder[] {\n      new Metaphone(), new DoubleMetaphone(), new Soundex(), new RefinedSoundex(), new Caverphone()\n    };\n    \n    for (final Encoder e : encoders) {\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n      \n      Analyzer b = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws IOException {\n    Encoder encoders[] = new Encoder[] {\n      new Metaphone(), new DoubleMetaphone(), new Soundex(), new RefinedSoundex(), new Caverphone2()\n    };\n    \n    for (final Encoder e : encoders) {\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n      \n      Analyzer b = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws IOException {\n    Encoder encoders[] = new Encoder[] {\n      new Metaphone(), new DoubleMetaphone(), new Soundex(), new RefinedSoundex(), new Caverphone2()\n    };\n    \n    for (final Encoder e : encoders) {\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n      \n      Analyzer b = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws IOException {\n    Encoder encoders[] = new Encoder[] {\n      new Metaphone(), new DoubleMetaphone(), new Soundex(), new RefinedSoundex(), new Caverphone2()\n    };\n    \n    for (final Encoder e : encoders) {\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n      a.close();\n      \n      Analyzer b = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n      b.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws IOException {\n    Encoder encoders[] = new Encoder[] {\n      new Metaphone(), new DoubleMetaphone(), new Soundex(), new RefinedSoundex(), new Caverphone2()\n    };\n    \n    for (final Encoder e : encoders) {\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n      \n      Analyzer b = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws IOException {\n    Encoder encoders[] = new Encoder[] {\n      new Metaphone(), new DoubleMetaphone(), new Soundex(), new RefinedSoundex(), new Caverphone2()\n    };\n    \n    for (final Encoder e : encoders) {\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n      a.close();\n      \n      Analyzer b = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n      b.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws IOException {\n    Encoder encoders[] = new Encoder[] {\n      new Metaphone(), new DoubleMetaphone(), new Soundex(), new RefinedSoundex(), new Caverphone2()\n    };\n    \n    for (final Encoder e : encoders) {\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n      \n      Analyzer b = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c6c784f777a2cc8fa014507ea129526822714d","date":1579733373,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws IOException {\n    Encoder encoders[] = new Encoder[] {\n      new Metaphone(), new DoubleMetaphone(), new Soundex(), new RefinedSoundex(), new Caverphone2()\n    };\n    \n    for (final Encoder e : encoders) {\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), a, 200 * RANDOM_MULTIPLIER);\n      a.close();\n      \n      Analyzer b = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n      b.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws IOException {\n    Encoder encoders[] = new Encoder[] {\n      new Metaphone(), new DoubleMetaphone(), new Soundex(), new RefinedSoundex(), new Caverphone2()\n    };\n    \n    for (final Encoder e : encoders) {\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER);\n      a.close();\n      \n      Analyzer b = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n      b.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testRandomStrings().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilter#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws IOException {\n    Encoder encoders[] = new Encoder[] {\n      new Metaphone(), new DoubleMetaphone(), new Soundex(), new RefinedSoundex(), new Caverphone2()\n    };\n    \n    for (final Encoder e : encoders) {\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), a, 200 * RANDOM_MULTIPLIER);\n      a.close();\n      \n      Analyzer b = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), b, 200 * RANDOM_MULTIPLIER);\n      b.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws IOException {\n    Encoder encoders[] = new Encoder[] {\n      new Metaphone(), new DoubleMetaphone(), new Soundex(), new RefinedSoundex(), new Caverphone2()\n    };\n    \n    for (final Encoder e : encoders) {\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), a, 200 * RANDOM_MULTIPLIER);\n      a.close();\n      \n      Analyzer b = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n          return new TokenStreamComponents(tokenizer, new PhoneticFilter(tokenizer, e, false));\n        }   \n      };\n      \n      checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER);\n      b.close();\n    }\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57c6c784f777a2cc8fa014507ea129526822714d":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","a56958d7f71a28824f20031ffbb2e13502a0274e"],"e1d6778b519a53bb76b0e31b6bbb17d6920abfe0":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["e1d6778b519a53bb76b0e31b6bbb17d6920abfe0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["57c6c784f777a2cc8fa014507ea129526822714d"]},"commit2Childs":{"57c6c784f777a2cc8fa014507ea129526822714d":["71da933d30aea361ccc224d6544c451cbf49916d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"e1d6778b519a53bb76b0e31b6bbb17d6920abfe0":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e1d6778b519a53bb76b0e31b6bbb17d6920abfe0"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["57c6c784f777a2cc8fa014507ea129526822714d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}