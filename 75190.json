{"path":"src/java/org/apache/lucene/document/Field#Field(String,String,boolean,boolean,boolean,boolean).mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,String,boolean,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * \n   * @param name The name of the field\n   * @param string The string to process\n   * @param store true if the field should store the string\n   * @param index true if the field should be indexed\n   * @param token true if the field should be tokenized\n   * @param storeTermVector true if we should store the Term Vector info\n   */ \n  public Field(String name, String string,\n\t       boolean store, boolean index, boolean token, boolean storeTermVector) {\n    if (name == null)\n      throw new IllegalArgumentException(\"name cannot be null\");\n    if (string == null)\n      throw new IllegalArgumentException(\"value cannot be null\");\n    if (!index && storeTermVector)\n      throw new IllegalArgumentException(\"cannot store a term vector for fields that are not indexed.\");\n\n    this.name = name.intern();\t\t\t  // field names are interned\n    this.stringValue = string;\n    this.isStored = store;\n    this.isIndexed = index;\n    this.isTokenized = token;\n    this.storeTermVector = storeTermVector;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f49913255caac6bc43c9945f6adccf132425b931","date":1093898702,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,String,boolean,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,String,boolean,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * \n   * @param name The name of the field\n   * @param string The string to process\n   * @param store true if the field should store the string\n   * @param index true if the field should be indexed\n   * @param token true if the field should be tokenized\n   * @param storeTermVector true if we should store the Term Vector info\n   * @deprecated use {@link #Field(String, String, Field.Store, Field.Index, Field.TermVector)} instead\n   */ \n  public Field(String name, String string,\n\t       boolean store, boolean index, boolean token, boolean storeTermVector) {\n    if (name == null)\n      throw new IllegalArgumentException(\"name cannot be null\");\n    if (string == null)\n      throw new IllegalArgumentException(\"value cannot be null\");\n    if (!index && storeTermVector)\n      throw new IllegalArgumentException(\"cannot store a term vector for fields that are not indexed\");\n\n    this.name = name.intern();\t\t\t  // field names are interned\n    this.stringValue = string;\n    this.isStored = store;\n    this.isIndexed = index;\n    this.isTokenized = token;\n    this.storeTermVector = storeTermVector;\n  }\n\n","sourceOld":"  /**\n   * \n   * @param name The name of the field\n   * @param string The string to process\n   * @param store true if the field should store the string\n   * @param index true if the field should be indexed\n   * @param token true if the field should be tokenized\n   * @param storeTermVector true if we should store the Term Vector info\n   */ \n  public Field(String name, String string,\n\t       boolean store, boolean index, boolean token, boolean storeTermVector) {\n    if (name == null)\n      throw new IllegalArgumentException(\"name cannot be null\");\n    if (string == null)\n      throw new IllegalArgumentException(\"value cannot be null\");\n    if (!index && storeTermVector)\n      throw new IllegalArgumentException(\"cannot store a term vector for fields that are not indexed.\");\n\n    this.name = name.intern();\t\t\t  // field names are interned\n    this.stringValue = string;\n    this.isStored = store;\n    this.isIndexed = index;\n    this.isTokenized = token;\n    this.storeTermVector = storeTermVector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e251d4a1720e4102605e45e256f41288c7fab045","date":1093898902,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,String,boolean,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,String,boolean,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * \n   * @param name The name of the field\n   * @param string The string to process\n   * @param store true if the field should store the string\n   * @param index true if the field should be indexed\n   * @param token true if the field should be tokenized\n   * @param storeTermVector true if we should store the Term Vector info\n   * @deprecated use {@link #Field(String, String, Field.Store, Field.Index, Field.TermVector)} instead\n   */ \n  public Field(String name, String string,\n\t       boolean store, boolean index, boolean token, boolean storeTermVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (string == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (!index && storeTermVector)\n      throw new IllegalArgumentException(\"cannot store a term vector for fields that are not indexed\");\n\n    this.name = name.intern();\t\t\t  // field names are interned\n    this.stringValue = string;\n    this.isStored = store;\n    this.isIndexed = index;\n    this.isTokenized = token;\n    this.storeTermVector = storeTermVector;\n  }\n\n","sourceOld":"  /**\n   * \n   * @param name The name of the field\n   * @param string The string to process\n   * @param store true if the field should store the string\n   * @param index true if the field should be indexed\n   * @param token true if the field should be tokenized\n   * @param storeTermVector true if we should store the Term Vector info\n   * @deprecated use {@link #Field(String, String, Field.Store, Field.Index, Field.TermVector)} instead\n   */ \n  public Field(String name, String string,\n\t       boolean store, boolean index, boolean token, boolean storeTermVector) {\n    if (name == null)\n      throw new IllegalArgumentException(\"name cannot be null\");\n    if (string == null)\n      throw new IllegalArgumentException(\"value cannot be null\");\n    if (!index && storeTermVector)\n      throw new IllegalArgumentException(\"cannot store a term vector for fields that are not indexed\");\n\n    this.name = name.intern();\t\t\t  // field names are interned\n    this.stringValue = string;\n    this.isStored = store;\n    this.isIndexed = index;\n    this.isTokenized = token;\n    this.storeTermVector = storeTermVector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de1b6a0d783df025fde1688ad90fa19587631b4e","date":1094070708,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,String,boolean,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,String,boolean,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * \n   * @param name The name of the field\n   * @param string The string to process\n   * @param store true if the field should store the string\n   * @param index true if the field should be indexed\n   * @param token true if the field should be tokenized\n   * @param storeTermVector true if we should store the Term Vector info\n   * \n   * @deprecated use {@link #Field(String, String, Field.Store, Field.Index, Field.TermVector)} instead\n   */ \n  public Field(String name, String string,\n\t       boolean store, boolean index, boolean token, boolean storeTermVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (string == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (!index && storeTermVector)\n      throw new IllegalArgumentException(\"cannot store a term vector for fields that are not indexed\");\n\n    this.name = name.intern();\t\t\t  // field names are interned\n    this.stringValue = string;\n    this.isStored = store;\n    this.isIndexed = index;\n    this.isTokenized = token;\n    this.storeTermVector = storeTermVector;\n  }\n\n","sourceOld":"  /**\n   * \n   * @param name The name of the field\n   * @param string The string to process\n   * @param store true if the field should store the string\n   * @param index true if the field should be indexed\n   * @param token true if the field should be tokenized\n   * @param storeTermVector true if we should store the Term Vector info\n   * @deprecated use {@link #Field(String, String, Field.Store, Field.Index, Field.TermVector)} instead\n   */ \n  public Field(String name, String string,\n\t       boolean store, boolean index, boolean token, boolean storeTermVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (string == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (!index && storeTermVector)\n      throw new IllegalArgumentException(\"cannot store a term vector for fields that are not indexed\");\n\n    this.name = name.intern();\t\t\t  // field names are interned\n    this.stringValue = string;\n    this.isStored = store;\n    this.isIndexed = index;\n    this.isTokenized = token;\n    this.storeTermVector = storeTermVector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3d038c41e70424a134ef69a524f3cc0fb40d854","date":1096548028,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/Field#Field(String,String,boolean,boolean,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,String,boolean,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * \n   * @param name The name of the field\n   * @param string The string to process\n   * @param store true if the field should store the string\n   * @param index true if the field should be indexed\n   * @param token true if the field should be tokenized\n   * @param storeTermVector true if we should store the Term Vector info\n   * \n   * @deprecated use {@link #Field(String, String, Field.Store, Field.Index, Field.TermVector)} instead\n   */ \n  public Field(String name, String string,\n         boolean store, boolean index, boolean token, boolean storeTermVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (string == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (!index && storeTermVector)\n      throw new IllegalArgumentException(\"cannot store a term vector for fields that are not indexed\");\n\n    this.name = name.intern();        // field names are interned\n    this.fieldsData = string;\n    this.isStored = store;\n    this.isIndexed = index;\n    this.isTokenized = token;\n    this.storeTermVector = storeTermVector;\n  }\n\n","sourceOld":"  /**\n   * \n   * @param name The name of the field\n   * @param string The string to process\n   * @param store true if the field should store the string\n   * @param index true if the field should be indexed\n   * @param token true if the field should be tokenized\n   * @param storeTermVector true if we should store the Term Vector info\n   * \n   * @deprecated use {@link #Field(String, String, Field.Store, Field.Index, Field.TermVector)} instead\n   */ \n  public Field(String name, String string,\n\t       boolean store, boolean index, boolean token, boolean storeTermVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (string == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (!index && storeTermVector)\n      throw new IllegalArgumentException(\"cannot store a term vector for fields that are not indexed\");\n\n    this.name = name.intern();\t\t\t  // field names are interned\n    this.stringValue = string;\n    this.isStored = store;\n    this.isIndexed = index;\n    this.isTokenized = token;\n    this.storeTermVector = storeTermVector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/document/Field#Field(String,String,boolean,boolean,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * \n   * @param name The name of the field\n   * @param string The string to process\n   * @param store true if the field should store the string\n   * @param index true if the field should be indexed\n   * @param token true if the field should be tokenized\n   * @param storeTermVector true if we should store the Term Vector info\n   * \n   * @deprecated use {@link #Field(String, String, Field.Store, Field.Index, Field.TermVector)} instead\n   */ \n  public Field(String name, String string,\n         boolean store, boolean index, boolean token, boolean storeTermVector) {\n    if (name == null)\n      throw new NullPointerException(\"name cannot be null\");\n    if (string == null)\n      throw new NullPointerException(\"value cannot be null\");\n    if (!index && storeTermVector)\n      throw new IllegalArgumentException(\"cannot store a term vector for fields that are not indexed\");\n\n    this.name = name.intern();        // field names are interned\n    this.fieldsData = string;\n    this.isStored = store;\n    this.isIndexed = index;\n    this.isTokenized = token;\n    this.storeTermVector = storeTermVector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f49913255caac6bc43c9945f6adccf132425b931":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e251d4a1720e4102605e45e256f41288c7fab045":["f49913255caac6bc43c9945f6adccf132425b931"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["b3d038c41e70424a134ef69a524f3cc0fb40d854"],"de1b6a0d783df025fde1688ad90fa19587631b4e":["e251d4a1720e4102605e45e256f41288c7fab045"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3d038c41e70424a134ef69a524f3cc0fb40d854":["de1b6a0d783df025fde1688ad90fa19587631b4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"f49913255caac6bc43c9945f6adccf132425b931":["e251d4a1720e4102605e45e256f41288c7fab045"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["f49913255caac6bc43c9945f6adccf132425b931"],"e251d4a1720e4102605e45e256f41288c7fab045":["de1b6a0d783df025fde1688ad90fa19587631b4e"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"de1b6a0d783df025fde1688ad90fa19587631b4e":["b3d038c41e70424a134ef69a524f3cc0fb40d854"],"b3d038c41e70424a134ef69a524f3cc0fb40d854":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}