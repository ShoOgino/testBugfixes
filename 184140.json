{"path":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32c479cc61614dce1cba211e353e2cb8193e88ee","date":1329430818,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n      } else {\n        SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","sourceOld":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"221ff19d62d5ff429ffecf8e7f3e01ff93754854","date":1329974551,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, cname);\n      } else {\n        SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","sourceOld":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n      } else {\n        SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, cname);\n      } else {\n        SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","sourceOld":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        core.getUpdateHandler().getSolrCoreState().doRecovery(core);\n      } else {\n        SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c1ff733203127a15576e08da8e7bbf4ba29ca95","date":1342825060,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"The leader requested that we recover\");\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, cname);\n      } else {\n        SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","sourceOld":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, cname);\n      } else {\n        SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"The leader requested that we recover\");\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, cname);\n      } else {\n        SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","sourceOld":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, cname);\n      } else {\n        SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce9115008b2600dda16a6765e06b6b380458c02f","date":1343435746,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover\");\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        // try to publish as recovering right away\n        try {\n          coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.RECOVERING);\n        } catch (KeeperException e) {\n          SolrException.log(log, \"\", e);\n        } catch (InterruptedException e) {\n          SolrException.log(log, \"\", e);\n        }\n        \n        core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, cname);\n      } else {\n        SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","sourceOld":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"The leader requested that we recover\");\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, cname);\n      } else {\n        SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover\");\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        // try to publish as recovering right away\n        try {\n          coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.RECOVERING);\n        } catch (KeeperException e) {\n          SolrException.log(log, \"\", e);\n        } catch (InterruptedException e) {\n          SolrException.log(log, \"\", e);\n        }\n        \n        core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, cname);\n      } else {\n        SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","sourceOld":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, cname);\n      } else {\n        SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover\");\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        // try to publish as recovering right away\n        try {\n          coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.RECOVERING);\n        } catch (KeeperException e) {\n          SolrException.log(log, \"\", e);\n        } catch (InterruptedException e) {\n          SolrException.log(log, \"\", e);\n        }\n        \n        core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, cname);\n      } else {\n        SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","sourceOld":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"The leader requested that we recover\");\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, cname);\n      } else {\n        SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34ea1d605e0261f0f714f9e444df24839d75161c","date":1357147436,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover\");\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        String cname = params.get(CoreAdminParams.CORE);\n        if (cname == null) {\n          cname = \"\";\n        }\n        SolrCore core = null;\n        try {\n          core = coreContainer.getCore(cname);\n          if (core != null) {\n            // try to publish as recovering right away\n            try {\n              coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.RECOVERING);\n            }  catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              SolrException.log(log, \"\", e);\n            } catch (Throwable t) {\n              SolrException.log(log, \"\", t);\n            }\n            \n            core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, cname);\n          } else {\n            SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n          }\n        } finally {\n          // no recoveryStrat close for now\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n    };\n    \n    thread.start();\n  }\n\n","sourceOld":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover\");\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        // try to publish as recovering right away\n        try {\n          coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.RECOVERING);\n        } catch (KeeperException e) {\n          SolrException.log(log, \"\", e);\n        } catch (InterruptedException e) {\n          SolrException.log(log, \"\", e);\n        }\n        \n        core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, cname);\n      } else {\n        SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover\");\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        String cname = params.get(CoreAdminParams.CORE);\n        if (cname == null) {\n          cname = \"\";\n        }\n        SolrCore core = null;\n        try {\n          core = coreContainer.getCore(cname);\n          if (core != null) {\n            // try to publish as recovering right away\n            try {\n              coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.RECOVERING);\n            }  catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              SolrException.log(log, \"\", e);\n            } catch (Throwable t) {\n              SolrException.log(log, \"\", t);\n            }\n            \n            core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, cname);\n          } else {\n            SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n          }\n        } finally {\n          // no recoveryStrat close for now\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n    };\n    \n    thread.start();\n  }\n\n","sourceOld":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover\");\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        // try to publish as recovering right away\n        try {\n          coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.RECOVERING);\n        } catch (KeeperException e) {\n          SolrException.log(log, \"\", e);\n        } catch (InterruptedException e) {\n          SolrException.log(log, \"\", e);\n        }\n        \n        core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, cname);\n      } else {\n        SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover\");\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        String cname = params.get(CoreAdminParams.CORE);\n        if (cname == null) {\n          cname = \"\";\n        }\n        SolrCore core = null;\n        try {\n          core = coreContainer.getCore(cname);\n          if (core != null) {\n            // try to publish as recovering right away\n            try {\n              coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.RECOVERING);\n            }  catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              SolrException.log(log, \"\", e);\n            } catch (Throwable t) {\n              SolrException.log(log, \"\", t);\n            }\n            \n            core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, core.getCoreDescriptor());\n          } else {\n            SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n          }\n        } finally {\n          // no recoveryStrat close for now\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n    };\n    \n    thread.start();\n  }\n\n","sourceOld":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover\");\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        String cname = params.get(CoreAdminParams.CORE);\n        if (cname == null) {\n          cname = \"\";\n        }\n        SolrCore core = null;\n        try {\n          core = coreContainer.getCore(cname);\n          if (core != null) {\n            // try to publish as recovering right away\n            try {\n              coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.RECOVERING);\n            }  catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              SolrException.log(log, \"\", e);\n            } catch (Throwable t) {\n              SolrException.log(log, \"\", t);\n            }\n            \n            core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, cname);\n          } else {\n            SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n          }\n        } finally {\n          // no recoveryStrat close for now\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n    };\n    \n    thread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover\");\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        String cname = params.get(CoreAdminParams.CORE);\n        if (cname == null) {\n          cname = \"\";\n        }\n        SolrCore core = null;\n        try {\n          core = coreContainer.getCore(cname);\n          if (core != null) {\n            // try to publish as recovering right away\n            try {\n              coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.RECOVERING);\n            }  catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              SolrException.log(log, \"\", e);\n            } catch (Throwable e) {\n              SolrException.log(log, \"\", e);\n              if (e instanceof Error) {\n                throw (Error) e;\n              }\n            }\n            \n            core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, core.getCoreDescriptor());\n          } else {\n            SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n          }\n        } finally {\n          // no recoveryStrat close for now\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n    };\n    \n    thread.start();\n  }\n\n","sourceOld":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover\");\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        String cname = params.get(CoreAdminParams.CORE);\n        if (cname == null) {\n          cname = \"\";\n        }\n        SolrCore core = null;\n        try {\n          core = coreContainer.getCore(cname);\n          if (core != null) {\n            // try to publish as recovering right away\n            try {\n              coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.RECOVERING);\n            }  catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              SolrException.log(log, \"\", e);\n            } catch (Throwable t) {\n              SolrException.log(log, \"\", t);\n            }\n            \n            core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, core.getCoreDescriptor());\n          } else {\n            SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n          }\n        } finally {\n          // no recoveryStrat close for now\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n    };\n    \n    thread.start();\n  }\n\n","bugFix":["34ea1d605e0261f0f714f9e444df24839d75161c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a186504f1a3b9b01975b92a172e3081e034ec90b","date":1389804265,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover\");\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        String cname = params.get(CoreAdminParams.CORE);\n        if (cname == null) {\n          cname = \"\";\n        }\n        SolrCore core = null;\n        try {\n          core = coreContainer.getCore(cname);\n          if (core != null) {\n            // try to publish as recovering right away\n            try {\n              coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.RECOVERING);\n            }  catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              SolrException.log(log, \"\", e);\n            } catch (Throwable e) {\n              SolrException.log(log, \"\", e);\n              if (e instanceof Error) {\n                throw (Error) e;\n              }\n            }\n            \n            core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, core.getCoreDescriptor());\n          } else {\n            SolrException.log(log, \"Could not find core to call recovery:\" + cname);\n          }\n        } finally {\n          // no recoveryStrat close for now\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n    };\n    \n    thread.start();\n  }\n\n","sourceOld":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover\");\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        String cname = params.get(CoreAdminParams.CORE);\n        if (cname == null) {\n          cname = \"\";\n        }\n        SolrCore core = null;\n        try {\n          core = coreContainer.getCore(cname);\n          if (core != null) {\n            // try to publish as recovering right away\n            try {\n              coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.RECOVERING);\n            }  catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              SolrException.log(log, \"\", e);\n            } catch (Throwable e) {\n              SolrException.log(log, \"\", e);\n              if (e instanceof Error) {\n                throw (Error) e;\n              }\n            }\n            \n            core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, core.getCoreDescriptor());\n          } else {\n            SolrException.log(log, \"Cound not find core to call recovery:\" + cname);\n          }\n        } finally {\n          // no recoveryStrat close for now\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n    };\n    \n    thread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e332392bbbdd01cb69ad6a89051f483cda38e15e","date":1395758779,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover\");\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        String cname = params.get(CoreAdminParams.CORE);\n        if (cname == null) {\n          cname = \"\";\n        }\n        try (SolrCore core = coreContainer.getCore(cname)) {\n\n          if (core != null) {\n            // try to publish as recovering right away\n            try {\n              coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.RECOVERING);\n            }  catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              SolrException.log(log, \"\", e);\n            } catch (Throwable e) {\n              SolrException.log(log, \"\", e);\n              if (e instanceof Error) {\n                throw (Error) e;\n              }\n            }\n            \n            core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, core.getCoreDescriptor());\n          } else {\n            SolrException.log(log, \"Could not find core to call recovery:\" + cname);\n          }\n        }\n      }\n    };\n    \n    thread.start();\n  }\n\n","sourceOld":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover\");\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        String cname = params.get(CoreAdminParams.CORE);\n        if (cname == null) {\n          cname = \"\";\n        }\n        SolrCore core = null;\n        try {\n          core = coreContainer.getCore(cname);\n          if (core != null) {\n            // try to publish as recovering right away\n            try {\n              coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.RECOVERING);\n            }  catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              SolrException.log(log, \"\", e);\n            } catch (Throwable e) {\n              SolrException.log(log, \"\", e);\n              if (e instanceof Error) {\n                throw (Error) e;\n              }\n            }\n            \n            core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, core.getCoreDescriptor());\n          } else {\n            SolrException.log(log, \"Could not find core to call recovery:\" + cname);\n          }\n        } finally {\n          // no recoveryStrat close for now\n          if (core != null) {\n            core.close();\n          }\n        }\n      }\n    };\n    \n    thread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14d5815ecbef89580f5c48990bcd433f04f8563a","date":1399564106,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover: core=\"+params.get(CoreAdminParams.CORE));\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        String cname = params.get(CoreAdminParams.CORE);\n        if (cname == null) {\n          cname = \"\";\n        }\n        try (SolrCore core = coreContainer.getCore(cname)) {\n\n          if (core != null) {\n            // try to publish as recovering right away\n            try {\n              coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.RECOVERING);\n            }  catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              SolrException.log(log, \"\", e);\n            } catch (Throwable e) {\n              SolrException.log(log, \"\", e);\n              if (e instanceof Error) {\n                throw (Error) e;\n              }\n            }\n            \n            core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, core.getCoreDescriptor());\n          } else {\n            SolrException.log(log, \"Could not find core to call recovery:\" + cname);\n          }\n        }\n      }\n    };\n    \n    thread.start();\n  }\n\n","sourceOld":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover\");\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        String cname = params.get(CoreAdminParams.CORE);\n        if (cname == null) {\n          cname = \"\";\n        }\n        try (SolrCore core = coreContainer.getCore(cname)) {\n\n          if (core != null) {\n            // try to publish as recovering right away\n            try {\n              coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.RECOVERING);\n            }  catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              SolrException.log(log, \"\", e);\n            } catch (Throwable e) {\n              SolrException.log(log, \"\", e);\n              if (e instanceof Error) {\n                throw (Error) e;\n              }\n            }\n            \n            core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, core.getCoreDescriptor());\n          } else {\n            SolrException.log(log, \"Could not find core to call recovery:\" + cname);\n          }\n        }\n      }\n    };\n    \n    thread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12dd2663d7dcd57465919332672f24f70c69b6b5","date":1402571913,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover: core=\"+params.get(CoreAdminParams.CORE));\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        String cname = params.get(CoreAdminParams.CORE);\n        if (cname == null) {\n          cname = \"\";\n        }\n        try (SolrCore core = coreContainer.getCore(cname)) {\n          if (core != null) {\n            core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, core.getCoreDescriptor());\n          } else {\n            SolrException.log(log, \"Could not find core to call recovery:\" + cname);\n          }\n        }\n      }\n    };\n    \n    thread.start();\n  }\n\n","sourceOld":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover: core=\"+params.get(CoreAdminParams.CORE));\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        String cname = params.get(CoreAdminParams.CORE);\n        if (cname == null) {\n          cname = \"\";\n        }\n        try (SolrCore core = coreContainer.getCore(cname)) {\n\n          if (core != null) {\n            // try to publish as recovering right away\n            try {\n              coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.RECOVERING);\n            }  catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              SolrException.log(log, \"\", e);\n            } catch (Throwable e) {\n              SolrException.log(log, \"\", e);\n              if (e instanceof Error) {\n                throw (Error) e;\n              }\n            }\n            \n            core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, core.getCoreDescriptor());\n          } else {\n            SolrException.log(log, \"Could not find core to call recovery:\" + cname);\n          }\n        }\n      }\n    };\n    \n    thread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover: core=\"+params.get(CoreAdminParams.CORE));\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        String cname = params.get(CoreAdminParams.CORE);\n        if (cname == null) {\n          cname = \"\";\n        }\n        try (SolrCore core = coreContainer.getCore(cname)) {\n          if (core != null) {\n            core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, core.getCoreDescriptor());\n          } else {\n            SolrException.log(log, \"Could not find core to call recovery:\" + cname);\n          }\n        }\n      }\n    };\n    \n    thread.start();\n  }\n\n","sourceOld":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover: core=\"+params.get(CoreAdminParams.CORE));\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        String cname = params.get(CoreAdminParams.CORE);\n        if (cname == null) {\n          cname = \"\";\n        }\n        try (SolrCore core = coreContainer.getCore(cname)) {\n\n          if (core != null) {\n            // try to publish as recovering right away\n            try {\n              coreContainer.getZkController().publish(core.getCoreDescriptor(), ZkStateReader.RECOVERING);\n            }  catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n              SolrException.log(log, \"\", e);\n            } catch (Throwable e) {\n              SolrException.log(log, \"\", e);\n              if (e instanceof Error) {\n                throw (Error) e;\n              }\n            }\n            \n            core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, core.getCoreDescriptor());\n          } else {\n            SolrException.log(log, \"Could not find core to call recovery:\" + cname);\n          }\n        }\n      }\n    };\n    \n    thread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"faee9bc2585a43773210f032b2bdcff90d9a12bf","date":1450411263,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestRecoveryAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover: core=\" + params.get(CoreAdminParams.CORE));\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    try (SolrCore core = coreContainer.getCore(cname)) {\n      if (core != null) {\n        core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, core.getCoreDescriptor());\n      } else {\n        SolrException.log(log, \"Could not find core to call recovery:\" + cname);\n      }\n    }\n    \n  }\n\n","sourceOld":"  protected void handleRequestRecoveryAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover: core=\"+params.get(CoreAdminParams.CORE));\n    Thread thread = new Thread() {\n      @Override\n      public void run() {\n        String cname = params.get(CoreAdminParams.CORE);\n        if (cname == null) {\n          cname = \"\";\n        }\n        try (SolrCore core = coreContainer.getCore(cname)) {\n          if (core != null) {\n            core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, core.getCoreDescriptor());\n          } else {\n            SolrException.log(log, \"Could not find core to call recovery:\" + cname);\n          }\n        }\n      }\n    };\n    \n    thread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0876236f0bd8be403747120d248bdd42b75a96","date":1451844229,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestRecoveryAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  protected void handleRequestRecoveryAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n    log.info(\"It has been requested that we recover: core=\" + params.get(CoreAdminParams.CORE));\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      cname = \"\";\n    }\n    try (SolrCore core = coreContainer.getCore(cname)) {\n      if (core != null) {\n        core.getUpdateHandler().getSolrCoreState().doRecovery(coreContainer, core.getCoreDescriptor());\n      } else {\n        SolrException.log(log, \"Could not find core to call recovery:\" + cname);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a186504f1a3b9b01975b92a172e3081e034ec90b":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["ce9115008b2600dda16a6765e06b6b380458c02f","34ea1d605e0261f0f714f9e444df24839d75161c"],"faee9bc2585a43773210f032b2bdcff90d9a12bf":["12dd2663d7dcd57465919332672f24f70c69b6b5"],"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["32c479cc61614dce1cba211e353e2cb8193e88ee"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["32c479cc61614dce1cba211e353e2cb8193e88ee","221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"34ea1d605e0261f0f714f9e444df24839d75161c":["ce9115008b2600dda16a6765e06b6b380458c02f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fa0876236f0bd8be403747120d248bdd42b75a96":["faee9bc2585a43773210f032b2bdcff90d9a12bf"],"32c479cc61614dce1cba211e353e2cb8193e88ee":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["14d5815ecbef89580f5c48990bcd433f04f8563a","12dd2663d7dcd57465919332672f24f70c69b6b5"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"12dd2663d7dcd57465919332672f24f70c69b6b5":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"aba371508186796cc6151d8223a5b4e16d02e26e":["221ff19d62d5ff429ffecf8e7f3e01ff93754854","ce9115008b2600dda16a6765e06b6b380458c02f"],"ce9115008b2600dda16a6765e06b6b380458c02f":["0c1ff733203127a15576e08da8e7bbf4ba29ca95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","ce9115008b2600dda16a6765e06b6b380458c02f"],"0c1ff733203127a15576e08da8e7bbf4ba29ca95":["221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["a186504f1a3b9b01975b92a172e3081e034ec90b"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["221ff19d62d5ff429ffecf8e7f3e01ff93754854","0c1ff733203127a15576e08da8e7bbf4ba29ca95"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["34ea1d605e0261f0f714f9e444df24839d75161c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa0876236f0bd8be403747120d248bdd42b75a96"]},"commit2Childs":{"a186504f1a3b9b01975b92a172e3081e034ec90b":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"faee9bc2585a43773210f032b2bdcff90d9a12bf":["fa0876236f0bd8be403747120d248bdd42b75a96"],"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","aba371508186796cc6151d8223a5b4e16d02e26e","0c1ff733203127a15576e08da8e7bbf4ba29ca95","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"34ea1d605e0261f0f714f9e444df24839d75161c":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"32c479cc61614dce1cba211e353e2cb8193e88ee":["221ff19d62d5ff429ffecf8e7f3e01ff93754854","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"fa0876236f0bd8be403747120d248bdd42b75a96":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"12dd2663d7dcd57465919332672f24f70c69b6b5":["faee9bc2585a43773210f032b2bdcff90d9a12bf","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ce9115008b2600dda16a6765e06b6b380458c02f":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","34ea1d605e0261f0f714f9e444df24839d75161c","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"0c1ff733203127a15576e08da8e7bbf4ba29ca95":["ce9115008b2600dda16a6765e06b6b380458c02f","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","32c479cc61614dce1cba211e353e2cb8193e88ee","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","12dd2663d7dcd57465919332672f24f70c69b6b5"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["a186504f1a3b9b01975b92a172e3081e034ec90b"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","c6f080a2ab37c464dd98db173f6cbf10dc74f211","0d22ac6a4146774c1bc8400160fc0b6150294e92","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}