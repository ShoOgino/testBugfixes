{"path":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeTermEnum#next().mjava","commits":[{"id":"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc","date":1239886708,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeTermEnum#next().mjava","pathOld":"/dev/null","sourceNew":"  /** Increments the enumeration to the next element.  True if one exists. */\n  //@Override\n  public boolean next() throws IOException {\n    // if a current term exists, the actual enum is initialized:\n    // try change to next term, if no such term exists, fall-through\n    if (currentTerm != null) {\n      assert actualEnum!=null;\n      if (actualEnum.next()) {\n        currentTerm = actualEnum.term();\n        if (termCompare(currentTerm)) return true;\n      }\n    }\n    // if all above fails, we go forward to the next enum,\n    // if one is available\n    currentTerm = null;\n    if (rangeBounds.size() < 2) return false;\n    // close the current enum and read next bounds\n    if (actualEnum != null) {\n      actualEnum.close();\n      actualEnum = null;\n    }\n    final String lowerBound = (String)rangeBounds.removeFirst();\n    this.currentUpperBound = (String)rangeBounds.removeFirst();\n    // this call recursively uses next(), if no valid term in\n    // next enum found.\n    // if this behavior is changed/modified in the superclass,\n    // this enum will not work anymore!\n    setEnum(reader.terms(new Term(query.field, lowerBound)));\n    return (currentTerm != null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7997e20249c312f7420d4e348cde0a36c22d9a8c","date":1245413812,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeTermEnum#next().mjava","sourceNew":null,"sourceOld":"  /** Increments the enumeration to the next element.  True if one exists. */\n  //@Override\n  public boolean next() throws IOException {\n    // if a current term exists, the actual enum is initialized:\n    // try change to next term, if no such term exists, fall-through\n    if (currentTerm != null) {\n      assert actualEnum!=null;\n      if (actualEnum.next()) {\n        currentTerm = actualEnum.term();\n        if (termCompare(currentTerm)) return true;\n      }\n    }\n    // if all above fails, we go forward to the next enum,\n    // if one is available\n    currentTerm = null;\n    if (rangeBounds.size() < 2) return false;\n    // close the current enum and read next bounds\n    if (actualEnum != null) {\n      actualEnum.close();\n      actualEnum = null;\n    }\n    final String lowerBound = (String)rangeBounds.removeFirst();\n    this.currentUpperBound = (String)rangeBounds.removeFirst();\n    // this call recursively uses next(), if no valid term in\n    // next enum found.\n    // if this behavior is changed/modified in the superclass,\n    // this enum will not work anymore!\n    setEnum(reader.terms(new Term(query.field, lowerBound)));\n    return (currentTerm != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7997e20249c312f7420d4e348cde0a36c22d9a8c"]},"commit2Childs":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc"],"c9c5935b70b4650c37e1ac32e6ee4f93ee4449cc":["7997e20249c312f7420d4e348cde0a36c22d9a8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}