{"path":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#assignClassNormalizedList(String).mjava","commits":[{"id":"f42902644d0afd11c1be38fd0b0e8237bf4f4d7e","date":1408694655,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#assignClassNormalizedList(String).mjava","pathOld":"/dev/null","sourceNew":"  private List<ClassificationResult<BytesRef>> assignClassNormalizedList(String inputDocument) throws IOException {\n    if (atomicReader == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n\n    String[] tokenizedDoc = tokenizeDoc(inputDocument);\n\n    List<ClassificationResult<BytesRef>> dataList = calculateLogLikelihood(tokenizedDoc);\n\n    // normalization\n    // The values transforms to a 0-1 range\n    ArrayList<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    if (!dataList.isEmpty()) {\n      Collections.sort(dataList);\n      // this is a negative number closest to 0 = a\n      double smax = dataList.get(0).getScore();\n\n      double sumLog = 0;\n      // log(sum(exp(x_n-a)))\n      for (ClassificationResult<BytesRef> cr : dataList) {\n        // getScore-smax <=0 (both negative, smax is the smallest abs()\n        sumLog += Math.exp(cr.getScore() - smax);\n      }\n      // loga=a+log(sum(exp(x_n-a))) = log(sum(exp(x_n)))\n      double loga = smax;\n      loga += Math.log(sumLog);\n\n      // 1/sum*x = exp(log(x))*1/sum = exp(log(x)-log(sum))\n      for (ClassificationResult<BytesRef> cr : dataList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), Math.exp(cr.getScore() - loga)));\n      }\n    }\n\n    return returnList;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#assignClassNormalizedList(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#assignClassNormalizedList(String).mjava","sourceNew":"  private List<ClassificationResult<BytesRef>> assignClassNormalizedList(String inputDocument) throws IOException {\n    if (leafReader == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n\n    String[] tokenizedDoc = tokenizeDoc(inputDocument);\n\n    List<ClassificationResult<BytesRef>> dataList = calculateLogLikelihood(tokenizedDoc);\n\n    // normalization\n    // The values transforms to a 0-1 range\n    ArrayList<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    if (!dataList.isEmpty()) {\n      Collections.sort(dataList);\n      // this is a negative number closest to 0 = a\n      double smax = dataList.get(0).getScore();\n\n      double sumLog = 0;\n      // log(sum(exp(x_n-a)))\n      for (ClassificationResult<BytesRef> cr : dataList) {\n        // getScore-smax <=0 (both negative, smax is the smallest abs()\n        sumLog += Math.exp(cr.getScore() - smax);\n      }\n      // loga=a+log(sum(exp(x_n-a))) = log(sum(exp(x_n)))\n      double loga = smax;\n      loga += Math.log(sumLog);\n\n      // 1/sum*x = exp(log(x))*1/sum = exp(log(x)-log(sum))\n      for (ClassificationResult<BytesRef> cr : dataList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), Math.exp(cr.getScore() - loga)));\n      }\n    }\n\n    return returnList;\n  }\n\n","sourceOld":"  private List<ClassificationResult<BytesRef>> assignClassNormalizedList(String inputDocument) throws IOException {\n    if (atomicReader == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n\n    String[] tokenizedDoc = tokenizeDoc(inputDocument);\n\n    List<ClassificationResult<BytesRef>> dataList = calculateLogLikelihood(tokenizedDoc);\n\n    // normalization\n    // The values transforms to a 0-1 range\n    ArrayList<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    if (!dataList.isEmpty()) {\n      Collections.sort(dataList);\n      // this is a negative number closest to 0 = a\n      double smax = dataList.get(0).getScore();\n\n      double sumLog = 0;\n      // log(sum(exp(x_n-a)))\n      for (ClassificationResult<BytesRef> cr : dataList) {\n        // getScore-smax <=0 (both negative, smax is the smallest abs()\n        sumLog += Math.exp(cr.getScore() - smax);\n      }\n      // loga=a+log(sum(exp(x_n-a))) = log(sum(exp(x_n)))\n      double loga = smax;\n      loga += Math.log(sumLog);\n\n      // 1/sum*x = exp(log(x))*1/sum = exp(log(x)-log(sum))\n      for (ClassificationResult<BytesRef> cr : dataList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), Math.exp(cr.getScore() - loga)));\n      }\n    }\n\n    return returnList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b1d9c529eb221063d2cb164d05be5f922980ac7","date":1430403225,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#assignClassNormalizedList(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#assignClassNormalizedList(String).mjava","sourceNew":"  private List<ClassificationResult<BytesRef>> assignClassNormalizedList(String inputDocument) throws IOException {\n    String[] tokenizedDoc = tokenizeDoc(inputDocument);\n\n    List<ClassificationResult<BytesRef>> dataList = calculateLogLikelihood(tokenizedDoc);\n\n    // normalization\n    // The values transforms to a 0-1 range\n    ArrayList<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    if (!dataList.isEmpty()) {\n      Collections.sort(dataList);\n      // this is a negative number closest to 0 = a\n      double smax = dataList.get(0).getScore();\n\n      double sumLog = 0;\n      // log(sum(exp(x_n-a)))\n      for (ClassificationResult<BytesRef> cr : dataList) {\n        // getScore-smax <=0 (both negative, smax is the smallest abs()\n        sumLog += Math.exp(cr.getScore() - smax);\n      }\n      // loga=a+log(sum(exp(x_n-a))) = log(sum(exp(x_n)))\n      double loga = smax;\n      loga += Math.log(sumLog);\n\n      // 1/sum*x = exp(log(x))*1/sum = exp(log(x)-log(sum))\n      for (ClassificationResult<BytesRef> cr : dataList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), Math.exp(cr.getScore() - loga)));\n      }\n    }\n\n    return returnList;\n  }\n\n","sourceOld":"  private List<ClassificationResult<BytesRef>> assignClassNormalizedList(String inputDocument) throws IOException {\n    if (leafReader == null) {\n      throw new IOException(\"You must first call Classifier#train\");\n    }\n\n    String[] tokenizedDoc = tokenizeDoc(inputDocument);\n\n    List<ClassificationResult<BytesRef>> dataList = calculateLogLikelihood(tokenizedDoc);\n\n    // normalization\n    // The values transforms to a 0-1 range\n    ArrayList<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    if (!dataList.isEmpty()) {\n      Collections.sort(dataList);\n      // this is a negative number closest to 0 = a\n      double smax = dataList.get(0).getScore();\n\n      double sumLog = 0;\n      // log(sum(exp(x_n-a)))\n      for (ClassificationResult<BytesRef> cr : dataList) {\n        // getScore-smax <=0 (both negative, smax is the smallest abs()\n        sumLog += Math.exp(cr.getScore() - smax);\n      }\n      // loga=a+log(sum(exp(x_n-a))) = log(sum(exp(x_n)))\n      double loga = smax;\n      loga += Math.log(sumLog);\n\n      // 1/sum*x = exp(log(x))*1/sum = exp(log(x)-log(sum))\n      for (ClassificationResult<BytesRef> cr : dataList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), Math.exp(cr.getScore() - loga)));\n      }\n    }\n\n    return returnList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba9b7b122d927a15ff4837e3d72876c609fef1b","date":1441232513,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#assignClassNormalizedList(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#assignClassNormalizedList(String).mjava","sourceNew":"  protected List<ClassificationResult<BytesRef>> assignClassNormalizedList(String inputDocument) throws IOException {\n    String[] tokenizedDoc = tokenizeDoc(inputDocument);\n\n    List<ClassificationResult<BytesRef>> dataList = calculateLogLikelihood(tokenizedDoc);\n\n    // normalization\n    // The values transforms to a 0-1 range\n    ArrayList<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    if (!dataList.isEmpty()) {\n      Collections.sort(dataList);\n      // this is a negative number closest to 0 = a\n      double smax = dataList.get(0).getScore();\n\n      double sumLog = 0;\n      // log(sum(exp(x_n-a)))\n      for (ClassificationResult<BytesRef> cr : dataList) {\n        // getScore-smax <=0 (both negative, smax is the smallest abs()\n        sumLog += Math.exp(cr.getScore() - smax);\n      }\n      // loga=a+log(sum(exp(x_n-a))) = log(sum(exp(x_n)))\n      double loga = smax;\n      loga += Math.log(sumLog);\n\n      // 1/sum*x = exp(log(x))*1/sum = exp(log(x)-log(sum))\n      for (ClassificationResult<BytesRef> cr : dataList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), Math.exp(cr.getScore() - loga)));\n      }\n    }\n\n    return returnList;\n  }\n\n","sourceOld":"  private List<ClassificationResult<BytesRef>> assignClassNormalizedList(String inputDocument) throws IOException {\n    String[] tokenizedDoc = tokenizeDoc(inputDocument);\n\n    List<ClassificationResult<BytesRef>> dataList = calculateLogLikelihood(tokenizedDoc);\n\n    // normalization\n    // The values transforms to a 0-1 range\n    ArrayList<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    if (!dataList.isEmpty()) {\n      Collections.sort(dataList);\n      // this is a negative number closest to 0 = a\n      double smax = dataList.get(0).getScore();\n\n      double sumLog = 0;\n      // log(sum(exp(x_n-a)))\n      for (ClassificationResult<BytesRef> cr : dataList) {\n        // getScore-smax <=0 (both negative, smax is the smallest abs()\n        sumLog += Math.exp(cr.getScore() - smax);\n      }\n      // loga=a+log(sum(exp(x_n-a))) = log(sum(exp(x_n)))\n      double loga = smax;\n      loga += Math.log(sumLog);\n\n      // 1/sum*x = exp(log(x))*1/sum = exp(log(x)-log(sum))\n      for (ClassificationResult<BytesRef> cr : dataList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), Math.exp(cr.getScore() - loga)));\n      }\n    }\n\n    return returnList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"134a24d0cb66520908d88384f1a559875704ed25","date":1445326601,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#assignClassNormalizedList(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#assignClassNormalizedList(String).mjava","sourceNew":"  protected List<ClassificationResult<BytesRef>> assignClassNormalizedList(String inputDocument) throws IOException {\n    String[] tokenizedText = tokenize(inputDocument);\n\n    List<ClassificationResult<BytesRef>> assignedClasses = calculateLogLikelihood(tokenizedText);\n\n    // normalization\n    // The values transforms to a 0-1 range\n    ArrayList<ClassificationResult<BytesRef>> asignedClassesNorm = super.normClassificationResults(assignedClasses);\n    return asignedClassesNorm;\n  }\n\n","sourceOld":"  protected List<ClassificationResult<BytesRef>> assignClassNormalizedList(String inputDocument) throws IOException {\n    String[] tokenizedDoc = tokenizeDoc(inputDocument);\n\n    List<ClassificationResult<BytesRef>> dataList = calculateLogLikelihood(tokenizedDoc);\n\n    // normalization\n    // The values transforms to a 0-1 range\n    ArrayList<ClassificationResult<BytesRef>> returnList = new ArrayList<>();\n    if (!dataList.isEmpty()) {\n      Collections.sort(dataList);\n      // this is a negative number closest to 0 = a\n      double smax = dataList.get(0).getScore();\n\n      double sumLog = 0;\n      // log(sum(exp(x_n-a)))\n      for (ClassificationResult<BytesRef> cr : dataList) {\n        // getScore-smax <=0 (both negative, smax is the smallest abs()\n        sumLog += Math.exp(cr.getScore() - smax);\n      }\n      // loga=a+log(sum(exp(x_n-a))) = log(sum(exp(x_n)))\n      double loga = smax;\n      loga += Math.log(sumLog);\n\n      // 1/sum*x = exp(log(x))*1/sum = exp(log(x)-log(sum))\n      for (ClassificationResult<BytesRef> cr : dataList) {\n        returnList.add(new ClassificationResult<>(cr.getAssignedClass(), Math.exp(cr.getScore() - loga)));\n      }\n    }\n\n    return returnList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33bfee30277584028170135002def66f9d57732b","date":1547842233,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#assignClassNormalizedList(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#assignClassNormalizedList(String).mjava","sourceNew":"  protected List<ClassificationResult<BytesRef>> assignClassNormalizedList(String inputDocument) throws IOException {\n    String[] tokenizedText = tokenize(inputDocument);\n\n    List<ClassificationResult<BytesRef>> assignedClasses = calculateLogLikelihood(tokenizedText);\n\n    // normalization\n    // The values transforms to a 0-1 range\n    return super.normClassificationResults(assignedClasses);\n  }\n\n","sourceOld":"  protected List<ClassificationResult<BytesRef>> assignClassNormalizedList(String inputDocument) throws IOException {\n    String[] tokenizedText = tokenize(inputDocument);\n\n    List<ClassificationResult<BytesRef>> assignedClasses = calculateLogLikelihood(tokenizedText);\n\n    // normalization\n    // The values transforms to a 0-1 range\n    ArrayList<ClassificationResult<BytesRef>> asignedClassesNorm = super.normClassificationResults(assignedClasses);\n    return asignedClassesNorm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52ec154a31cf63bc47d2cc0b49e171a4e75aa99d","date":1548322018,"type":3,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#assignClassNormalizedList(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#assignClassNormalizedList(String).mjava","sourceNew":"  protected List<ClassificationResult<BytesRef>> assignClassNormalizedList(String inputDocument) throws IOException {\n    String[] tokenizedText = tokenize(inputDocument);\n\n    List<ClassificationResult<BytesRef>> assignedClasses = calculateLogLikelihood(tokenizedText);\n\n    // normalization\n    // The values transforms to a 0-1 range\n    return super.normClassificationResults(assignedClasses);\n  }\n\n","sourceOld":"  protected List<ClassificationResult<BytesRef>> assignClassNormalizedList(String inputDocument) throws IOException {\n    String[] tokenizedText = tokenize(inputDocument);\n\n    List<ClassificationResult<BytesRef>> assignedClasses = calculateLogLikelihood(tokenizedText);\n\n    // normalization\n    // The values transforms to a 0-1 range\n    ArrayList<ClassificationResult<BytesRef>> asignedClassesNorm = super.normClassificationResults(assignedClasses);\n    return asignedClassesNorm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0818fc555aefcb0330785d4ad1c1487980a0b04b","date":1599049757,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#assignClassNormalizedList(String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/CachingNaiveBayesClassifier#assignClassNormalizedList(String).mjava","sourceNew":"  /** Transforms values into a range between 0 and 1 */\n  protected List<ClassificationResult<BytesRef>> assignClassNormalizedList(String inputDocument) throws IOException {\n    String[] tokenizedText = tokenize(inputDocument);\n\n    List<ClassificationResult<BytesRef>> assignedClasses = calculateLogLikelihood(tokenizedText);\n\n    // normalization\n    // The values transforms to a 0-1 range\n    return super.normClassificationResults(assignedClasses);\n  }\n\n","sourceOld":"  protected List<ClassificationResult<BytesRef>> assignClassNormalizedList(String inputDocument) throws IOException {\n    String[] tokenizedText = tokenize(inputDocument);\n\n    List<ClassificationResult<BytesRef>> assignedClasses = calculateLogLikelihood(tokenizedText);\n\n    // normalization\n    // The values transforms to a 0-1 range\n    return super.normClassificationResults(assignedClasses);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["1b1d9c529eb221063d2cb164d05be5f922980ac7"],"f42902644d0afd11c1be38fd0b0e8237bf4f4d7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"52ec154a31cf63bc47d2cc0b49e171a4e75aa99d":["134a24d0cb66520908d88384f1a559875704ed25","33bfee30277584028170135002def66f9d57732b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0818fc555aefcb0330785d4ad1c1487980a0b04b":["52ec154a31cf63bc47d2cc0b49e171a4e75aa99d"],"134a24d0cb66520908d88384f1a559875704ed25":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"33bfee30277584028170135002def66f9d57732b":["134a24d0cb66520908d88384f1a559875704ed25"],"1b1d9c529eb221063d2cb164d05be5f922980ac7":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["f42902644d0afd11c1be38fd0b0e8237bf4f4d7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0818fc555aefcb0330785d4ad1c1487980a0b04b"]},"commit2Childs":{"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["134a24d0cb66520908d88384f1a559875704ed25"],"f42902644d0afd11c1be38fd0b0e8237bf4f4d7e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"52ec154a31cf63bc47d2cc0b49e171a4e75aa99d":["0818fc555aefcb0330785d4ad1c1487980a0b04b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f42902644d0afd11c1be38fd0b0e8237bf4f4d7e"],"0818fc555aefcb0330785d4ad1c1487980a0b04b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"134a24d0cb66520908d88384f1a559875704ed25":["52ec154a31cf63bc47d2cc0b49e171a4e75aa99d","33bfee30277584028170135002def66f9d57732b"],"33bfee30277584028170135002def66f9d57732b":["52ec154a31cf63bc47d2cc0b49e171a4e75aa99d"],"1b1d9c529eb221063d2cb164d05be5f922980ac7":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["1b1d9c529eb221063d2cb164d05be5f922980ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}