{"path":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsPayloadIterator#AssociationsPayloadIterator(String,T).mjava","commits":[{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsPayloadIterator#AssociationsPayloadIterator(String,T).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsPayloadIterator#AssociationsPayloadIterator(IndexReader,String,T).mjava","sourceNew":"  /**\n   * Construct a new associations iterator. The given\n   * {@link CategoryAssociation} is used to deserialize the association values.\n   * It is assumed that all association values can be deserialized with the\n   * given {@link CategoryAssociation}.\n   */\n  public AssociationsPayloadIterator(String field, T association) throws IOException {\n    pi = new PayloadIterator(new Term(field, association.getCategoryListID()));\n    this.association = association;\n  }\n\n","sourceOld":"  /**\n   * Construct a new associations iterator. The given\n   * {@link CategoryAssociation} is used to deserialize the association values.\n   * It is assumed that all association values can be deserialized with the\n   * given {@link CategoryAssociation}.\n   */\n  public AssociationsPayloadIterator(IndexReader reader, String field, T association) throws IOException {\n    pi = new PayloadIterator(reader, new Term(field, association.getCategoryListID()));\n    hasAssociations = pi.init();\n    this.association = association;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsPayloadIterator#AssociationsPayloadIterator(String,T).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsPayloadIterator#AssociationsPayloadIterator(IndexReader,String,T).mjava","sourceNew":"  /**\n   * Construct a new associations iterator. The given\n   * {@link CategoryAssociation} is used to deserialize the association values.\n   * It is assumed that all association values can be deserialized with the\n   * given {@link CategoryAssociation}.\n   */\n  public AssociationsPayloadIterator(String field, T association) throws IOException {\n    pi = new PayloadIterator(new Term(field, association.getCategoryListID()));\n    this.association = association;\n  }\n\n","sourceOld":"  /**\n   * Construct a new associations iterator. The given\n   * {@link CategoryAssociation} is used to deserialize the association values.\n   * It is assumed that all association values can be deserialized with the\n   * given {@link CategoryAssociation}.\n   */\n  public AssociationsPayloadIterator(IndexReader reader, String field, T association) throws IOException {\n    pi = new PayloadIterator(reader, new Term(field, association.getCategoryListID()));\n    hasAssociations = pi.init();\n    this.association = association;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsIterator#AssociationsIterator(String,T,boolean).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsPayloadIterator#AssociationsPayloadIterator(String,T).mjava","sourceNew":"  /**\n   * Construct a new associations iterator. The given\n   * {@link CategoryAssociation} is used to deserialize the association values.\n   * It is assumed that all association values can be deserialized with the\n   * given {@link CategoryAssociation}.\n   * \n   * <p>\n   * <b>NOTE:</b> if {@code useDirectSource} is {@code false}, then a\n   * {@link DocValues#getSource()} is used, which is an in-memory {@link Source}.\n   */\n  public AssociationsIterator(String field, T association, boolean useDirectSource) throws IOException {\n    this.association = association;\n    this.dvField = field + association.getCategoryListID();\n    this.useDirectSource = useDirectSource;\n  }\n\n","sourceOld":"  /**\n   * Construct a new associations iterator. The given\n   * {@link CategoryAssociation} is used to deserialize the association values.\n   * It is assumed that all association values can be deserialized with the\n   * given {@link CategoryAssociation}.\n   */\n  public AssociationsPayloadIterator(String field, T association) throws IOException {\n    pi = new PayloadIterator(new Term(field, association.getCategoryListID()));\n    this.association = association;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsIterator#AssociationsIterator(String,T).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/AssociationsPayloadIterator#AssociationsPayloadIterator(String,T).mjava","sourceNew":"  /**\n   * Construct a new associations iterator. The given\n   * {@link CategoryAssociation} is used to deserialize the association values.\n   * It is assumed that all association values can be deserialized with the\n   * given {@link CategoryAssociation}.\n   */\n  public AssociationsIterator(String field, T association) throws IOException {\n    this.association = association;\n    this.dvField = field + association.getCategoryListID();\n  }\n\n","sourceOld":"  /**\n   * Construct a new associations iterator. The given\n   * {@link CategoryAssociation} is used to deserialize the association values.\n   * It is assumed that all association values can be deserialized with the\n   * given {@link CategoryAssociation}.\n   */\n  public AssociationsPayloadIterator(String field, T association) throws IOException {\n    pi = new PayloadIterator(new Term(field, association.getCategoryListID()));\n    this.association = association;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["8917bfede3b4ca30f4305c1e391e9218959cd723","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"]},"commit2Childs":{"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["8917bfede3b4ca30f4305c1e391e9218959cd723","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"8917bfede3b4ca30f4305c1e391e9218959cd723":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["42f51b3ab4258ff4623227b0db011b8bb83db5c7","8917bfede3b4ca30f4305c1e391e9218959cd723"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}