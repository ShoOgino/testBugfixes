{"path":"lucene/core/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#getIntersectVisitor(DocIdSetBuilder,Component2D,GeoEncodingUtils.PolygonPredicate,byte[],byte[],byte[],byte[]).mjava","commits":[{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":1,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#getIntersectVisitor(DocIdSetBuilder,Component2D,GeoEncodingUtils.PolygonPredicate,byte[],byte[],byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#getIntersectVisitor(DocIdSetBuilder,Polygon2D,GeoEncodingUtils.PolygonPredicate,byte[],byte[],byte[],byte[]).mjava","sourceNew":"  private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result, Component2D tree, GeoEncodingUtils.PolygonPredicate polygonPredicate,\n                                               byte[] minLat, byte[] maxLat, byte[] minLon, byte[] maxLon) {\n    return new IntersectVisitor() {\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (polygonPredicate.test(NumericUtils.sortableBytesToInt(packedValue, 0),\n                NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES))) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (polygonPredicate.test(NumericUtils.sortableBytesToInt(packedValue, 0),\n                NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES))) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (Arrays.compareUnsigned(minPackedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(maxPackedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0 ||\n                Arrays.compareUnsigned(minPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0) {\n              // outside of global bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double cellMinLat = decodeLatitude(minPackedValue, 0);\n            double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n            double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n            double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return tree.relate(cellMinLon, cellMaxLon, cellMinLat, cellMaxLat);\n          }\n        };\n  }\n\n","sourceOld":"  private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result, Polygon2D tree, GeoEncodingUtils.PolygonPredicate polygonPredicate,\n                                               byte[] minLat, byte[] maxLat, byte[] minLon, byte[] maxLon) {\n    return new IntersectVisitor() {\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (polygonPredicate.test(NumericUtils.sortableBytesToInt(packedValue, 0),\n                NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES))) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (polygonPredicate.test(NumericUtils.sortableBytesToInt(packedValue, 0),\n                NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES))) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (Arrays.compareUnsigned(minPackedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(maxPackedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0 ||\n                Arrays.compareUnsigned(minPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0) {\n              // outside of global bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double cellMinLat = decodeLatitude(minPackedValue, 0);\n            double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n            double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n            double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return tree.relate(cellMinLat, cellMaxLat, cellMinLon, cellMaxLon);\n          }\n        };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#getIntersectVisitor(DocIdSetBuilder,Component2D,GeoEncodingUtils.PolygonPredicate,byte[],byte[],byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"  private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result, Component2D tree, GeoEncodingUtils.PolygonPredicate polygonPredicate,\n                                               byte[] minLat, byte[] maxLat, byte[] minLon, byte[] maxLon) {\n    return new IntersectVisitor() {\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            if (polygonPredicate.test(NumericUtils.sortableBytesToInt(packedValue, 0),\n                NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES))) {\n              visit(docID);\n            }\n          }\n\n          @Override\n          public void visit(DocIdSetIterator iterator, byte[] packedValue) throws IOException {\n            if (polygonPredicate.test(NumericUtils.sortableBytesToInt(packedValue, 0),\n                NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES))) {\n              int docID;\n              while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n                visit(docID);\n              }\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (Arrays.compareUnsigned(minPackedValue, 0, Integer.BYTES, maxLat, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(maxPackedValue, 0, Integer.BYTES, minLat, 0, Integer.BYTES) < 0 ||\n                Arrays.compareUnsigned(minPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, maxLon, 0, Integer.BYTES) > 0 ||\n                Arrays.compareUnsigned(maxPackedValue, Integer.BYTES, Integer.BYTES + Integer.BYTES, minLon, 0, Integer.BYTES) < 0) {\n              // outside of global bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double cellMinLat = decodeLatitude(minPackedValue, 0);\n            double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n            double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n            double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return tree.relate(cellMinLon, cellMaxLon, cellMinLat, cellMaxLat);\n          }\n        };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}