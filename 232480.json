{"path":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorAuto(IndexReader,String).mjava","commits":[{"id":"99ee715b9c02dd47d9e69a18607a5192c1ebd82b","date":1085007927,"type":0,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorAuto(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to values in the given field.\n   * The terms in the field are looked at to determine whether they contain integers,\n   * floats or strings.  Once the type is determined, one of the other static methods\n   * in this class is called to get the comparator.\n   * @param reader  Index to use.\n   * @param fieldname  Field containg values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorAuto (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    Object lookupArray = FieldCache.DEFAULT.getAuto (reader, field);\n    if (lookupArray instanceof FieldCache.StringIndex) {\n      return comparatorString (reader, field);\n    } else if (lookupArray instanceof int[]) {\n      return comparatorInt (reader, field);\n    } else if (lookupArray instanceof float[]) {\n      return comparatorFloat (reader, field);\n    } else if (lookupArray instanceof String[]) {\n      return comparatorString (reader, field);\n    } else {\n      throw new RuntimeException (\"unknown data type in field '\"+field+\"'\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorAuto(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorAuto(IndexReader,String).mjava","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to values in the given field.\n   * The terms in the field are looked at to determine whether they contain integers,\n   * floats or strings.  Once the type is determined, one of the other static methods\n   * in this class is called to get the comparator.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorAuto (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    Object lookupArray = FieldCache.DEFAULT.getAuto (reader, field);\n    if (lookupArray instanceof FieldCache.StringIndex) {\n      return comparatorString (reader, field);\n    } else if (lookupArray instanceof int[]) {\n      return comparatorInt (reader, field);\n    } else if (lookupArray instanceof float[]) {\n      return comparatorFloat (reader, field);\n    } else if (lookupArray instanceof String[]) {\n      return comparatorString (reader, field);\n    } else {\n      throw new RuntimeException (\"unknown data type in field '\"+field+\"'\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a comparator for sorting hits according to values in the given field.\n   * The terms in the field are looked at to determine whether they contain integers,\n   * floats or strings.  Once the type is determined, one of the other static methods\n   * in this class is called to get the comparator.\n   * @param reader  Index to use.\n   * @param fieldname  Field containg values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorAuto (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    Object lookupArray = FieldCache.DEFAULT.getAuto (reader, field);\n    if (lookupArray instanceof FieldCache.StringIndex) {\n      return comparatorString (reader, field);\n    } else if (lookupArray instanceof int[]) {\n      return comparatorInt (reader, field);\n    } else if (lookupArray instanceof float[]) {\n      return comparatorFloat (reader, field);\n    } else if (lookupArray instanceof String[]) {\n      return comparatorString (reader, field);\n    } else {\n      throw new RuntimeException (\"unknown data type in field '\"+field+\"'\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a88b478bcadbb1b0ee6aa2fb7e320dd7f68c37b","date":1196102739,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorAuto(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorAuto(IndexReader,String).mjava","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to values in the given field.\n   * The terms in the field are looked at to determine whether they contain integers,\n   * floats or strings.  Once the type is determined, one of the other static methods\n   * in this class is called to get the comparator.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorAuto (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    Object lookupArray = FieldCache.DEFAULT.getAuto (reader, field);\n    if (lookupArray instanceof FieldCache.StringIndex) {\n      return comparatorString (reader, field);\n    } else if (lookupArray instanceof int[]) {\n      return comparatorInt (reader, field);\n    } else if (lookupArray instanceof long[]) {\n      return comparatorLong (reader, field);\n    } else if (lookupArray instanceof float[]) {\n      return comparatorFloat (reader, field);\n    } else if (lookupArray instanceof String[]) {\n      return comparatorString (reader, field);\n    } else {\n      throw new RuntimeException (\"unknown data type in field '\"+field+\"'\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a comparator for sorting hits according to values in the given field.\n   * The terms in the field are looked at to determine whether they contain integers,\n   * floats or strings.  Once the type is determined, one of the other static methods\n   * in this class is called to get the comparator.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorAuto (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    Object lookupArray = FieldCache.DEFAULT.getAuto (reader, field);\n    if (lookupArray instanceof FieldCache.StringIndex) {\n      return comparatorString (reader, field);\n    } else if (lookupArray instanceof int[]) {\n      return comparatorInt (reader, field);\n    } else if (lookupArray instanceof float[]) {\n      return comparatorFloat (reader, field);\n    } else if (lookupArray instanceof String[]) {\n      return comparatorString (reader, field);\n    } else {\n      throw new RuntimeException (\"unknown data type in field '\"+field+\"'\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c479e60b9ca12e7273448a055e02ef292870b27","date":1197990785,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorAuto(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorAuto(IndexReader,String).mjava","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to values in the given field.\n   * The terms in the field are looked at to determine whether they contain integers,\n   * floats or strings.  Once the type is determined, one of the other static methods\n   * in this class is called to get the comparator.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorAuto (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    Object lookupArray = ExtendedFieldCache.EXT_DEFAULT.getAuto (reader, field);\n    if (lookupArray instanceof FieldCache.StringIndex) {\n      return comparatorString (reader, field);\n    } else if (lookupArray instanceof int[]) {\n      return comparatorInt (reader, field);\n    } else if (lookupArray instanceof long[]) {\n      return comparatorLong (reader, field);\n    } else if (lookupArray instanceof float[]) {\n      return comparatorFloat (reader, field);\n    } else if (lookupArray instanceof String[]) {\n      return comparatorString (reader, field);\n    } else {\n      throw new RuntimeException (\"unknown data type in field '\"+field+\"'\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a comparator for sorting hits according to values in the given field.\n   * The terms in the field are looked at to determine whether they contain integers,\n   * floats or strings.  Once the type is determined, one of the other static methods\n   * in this class is called to get the comparator.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorAuto (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    Object lookupArray = FieldCache.DEFAULT.getAuto (reader, field);\n    if (lookupArray instanceof FieldCache.StringIndex) {\n      return comparatorString (reader, field);\n    } else if (lookupArray instanceof int[]) {\n      return comparatorInt (reader, field);\n    } else if (lookupArray instanceof long[]) {\n      return comparatorLong (reader, field);\n    } else if (lookupArray instanceof float[]) {\n      return comparatorFloat (reader, field);\n    } else if (lookupArray instanceof String[]) {\n      return comparatorString (reader, field);\n    } else {\n      throw new RuntimeException (\"unknown data type in field '\"+field+\"'\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3766097c9c41a30d67e9b548c62d017abf8e07ac","date":1228770465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorAuto(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorAuto(IndexReader,String).mjava","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to values in the given field.\n   * The terms in the field are looked at to determine whether they contain integers,\n   * floats or strings.  Once the type is determined, one of the other static methods\n   * in this class is called to get the comparator.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorAuto (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    Object lookupArray = ExtendedFieldCache.EXT_DEFAULT.getAuto (reader, field);\n    if (lookupArray instanceof FieldCache.StringIndex) {\n      return comparatorString (reader, field);\n    } else if (lookupArray instanceof int[]) {\n      return comparatorInt (reader, field, null);\n    } else if (lookupArray instanceof long[]) {\n      return comparatorLong (reader, field, null);\n    } else if (lookupArray instanceof float[]) {\n      return comparatorFloat (reader, field, null);\n    } else if (lookupArray instanceof String[]) {\n      return comparatorString (reader, field);\n    } else {\n      throw new RuntimeException (\"unknown data type in field '\"+field+\"'\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a comparator for sorting hits according to values in the given field.\n   * The terms in the field are looked at to determine whether they contain integers,\n   * floats or strings.  Once the type is determined, one of the other static methods\n   * in this class is called to get the comparator.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorAuto (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    Object lookupArray = ExtendedFieldCache.EXT_DEFAULT.getAuto (reader, field);\n    if (lookupArray instanceof FieldCache.StringIndex) {\n      return comparatorString (reader, field);\n    } else if (lookupArray instanceof int[]) {\n      return comparatorInt (reader, field);\n    } else if (lookupArray instanceof long[]) {\n      return comparatorLong (reader, field);\n    } else if (lookupArray instanceof float[]) {\n      return comparatorFloat (reader, field);\n    } else if (lookupArray instanceof String[]) {\n      return comparatorString (reader, field);\n    } else {\n      throw new RuntimeException (\"unknown data type in field '\"+field+\"'\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorAuto(IndexReader,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a comparator for sorting hits according to values in the given field.\n   * The terms in the field are looked at to determine whether they contain integers,\n   * floats or strings.  Once the type is determined, one of the other static methods\n   * in this class is called to get the comparator.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorAuto (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    Object lookupArray = ExtendedFieldCache.EXT_DEFAULT.getAuto (reader, field);\n    if (lookupArray instanceof FieldCache.StringIndex) {\n      return comparatorString (reader, field);\n    } else if (lookupArray instanceof int[]) {\n      return comparatorInt (reader, field, null);\n    } else if (lookupArray instanceof long[]) {\n      return comparatorLong (reader, field, null);\n    } else if (lookupArray instanceof float[]) {\n      return comparatorFloat (reader, field, null);\n    } else if (lookupArray instanceof String[]) {\n      return comparatorString (reader, field);\n    } else {\n      throw new RuntimeException (\"unknown data type in field '\"+field+\"'\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e62a8c7e41b44cd847fdb555295e92c601615cd","date":1240576210,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorAuto(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to values in the given field.\n   * The terms in the field are looked at to determine whether they contain integers,\n   * floats or strings.  Once the type is determined, one of the other static methods\n   * in this class is called to get the comparator.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorAuto (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    Object lookupArray = ExtendedFieldCache.EXT_DEFAULT.getAuto (reader, field);\n    if (lookupArray instanceof FieldCache.StringIndex) {\n      return comparatorString (reader, field);\n    } else if (lookupArray instanceof int[]) {\n      return comparatorInt (reader, field, null);\n    } else if (lookupArray instanceof long[]) {\n      return comparatorLong (reader, field, null);\n    } else if (lookupArray instanceof float[]) {\n      return comparatorFloat (reader, field, null);\n    } else if (lookupArray instanceof String[]) {\n      return comparatorString (reader, field);\n    } else {\n      throw new RuntimeException (\"unknown data type in field '\"+field+\"'\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65eb076d345a794256daba691a2b366657c807e8","date":1245771732,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorAuto(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorAuto(IndexReader,String).mjava","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to values in the given field.\n   * The terms in the field are looked at to determine whether they contain integers,\n   * floats or strings.  Once the type is determined, one of the other static methods\n   * in this class is called to get the comparator.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorAuto (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    Object lookupArray = FieldCache.DEFAULT.getAuto (reader, field);\n    if (lookupArray instanceof FieldCache.StringIndex) {\n      return comparatorString (reader, field);\n    } else if (lookupArray instanceof int[]) {\n      return comparatorInt (reader, field, null);\n    } else if (lookupArray instanceof long[]) {\n      return comparatorLong (reader, field, null);\n    } else if (lookupArray instanceof float[]) {\n      return comparatorFloat (reader, field, null);\n    } else if (lookupArray instanceof String[]) {\n      return comparatorString (reader, field);\n    } else {\n      throw new RuntimeException (\"unknown data type in field '\"+field+\"'\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a comparator for sorting hits according to values in the given field.\n   * The terms in the field are looked at to determine whether they contain integers,\n   * floats or strings.  Once the type is determined, one of the other static methods\n   * in this class is called to get the comparator.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorAuto (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    Object lookupArray = ExtendedFieldCache.EXT_DEFAULT.getAuto (reader, field);\n    if (lookupArray instanceof FieldCache.StringIndex) {\n      return comparatorString (reader, field);\n    } else if (lookupArray instanceof int[]) {\n      return comparatorInt (reader, field, null);\n    } else if (lookupArray instanceof long[]) {\n      return comparatorLong (reader, field, null);\n    } else if (lookupArray instanceof float[]) {\n      return comparatorFloat (reader, field, null);\n    } else if (lookupArray instanceof String[]) {\n      return comparatorString (reader, field);\n    } else {\n      throw new RuntimeException (\"unknown data type in field '\"+field+\"'\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorAuto(IndexReader,String).mjava","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorAuto(IndexReader,String).mjava","sourceNew":"  /**\n   * Returns a comparator for sorting hits according to values in the given field.\n   * The terms in the field are looked at to determine whether they contain integers,\n   * floats or strings.  Once the type is determined, one of the other static methods\n   * in this class is called to get the comparator.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containing values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorAuto (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    Object lookupArray = FieldCache.DEFAULT.getAuto (reader, field);\n    if (lookupArray instanceof FieldCache.StringIndex) {\n      return comparatorString (reader, field);\n    } else if (lookupArray instanceof int[]) {\n      return comparatorInt (reader, field, null);\n    } else if (lookupArray instanceof long[]) {\n      return comparatorLong (reader, field, null);\n    } else if (lookupArray instanceof float[]) {\n      return comparatorFloat (reader, field, null);\n    } else if (lookupArray instanceof String[]) {\n      return comparatorString (reader, field);\n    } else {\n      throw new RuntimeException (\"unknown data type in field '\"+field+\"'\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a comparator for sorting hits according to values in the given field.\n   * The terms in the field are looked at to determine whether they contain integers,\n   * floats or strings.  Once the type is determined, one of the other static methods\n   * in this class is called to get the comparator.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containg values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorAuto (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    Object lookupArray = FieldCache.DEFAULT.getAuto (reader, field);\n    if (lookupArray instanceof FieldCache.StringIndex) {\n      return comparatorString (reader, field);\n    } else if (lookupArray instanceof int[]) {\n      return comparatorInt (reader, field, null);\n    } else if (lookupArray instanceof long[]) {\n      return comparatorLong (reader, field, null);\n    } else if (lookupArray instanceof float[]) {\n      return comparatorFloat (reader, field, null);\n    } else if (lookupArray instanceof String[]) {\n      return comparatorString (reader, field);\n    } else {\n      throw new RuntimeException (\"unknown data type in field '\"+field+\"'\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99","date":1255432705,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/FieldSortedHitQueue#comparatorAuto(IndexReader,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a comparator for sorting hits according to values in the given field.\n   * The terms in the field are looked at to determine whether they contain integers,\n   * floats or strings.  Once the type is determined, one of the other static methods\n   * in this class is called to get the comparator.\n   * @param reader  Index to use.\n   * @param fieldname  Fieldable containing values.\n   * @return  Comparator for sorting hits.\n   * @throws IOException If an error occurs reading the index.\n   */\n  static ScoreDocComparator comparatorAuto (final IndexReader reader, final String fieldname)\n  throws IOException {\n    final String field = fieldname.intern();\n    Object lookupArray = FieldCache.DEFAULT.getAuto (reader, field);\n    if (lookupArray instanceof FieldCache.StringIndex) {\n      return comparatorString (reader, field);\n    } else if (lookupArray instanceof int[]) {\n      return comparatorInt (reader, field, null);\n    } else if (lookupArray instanceof long[]) {\n      return comparatorLong (reader, field, null);\n    } else if (lookupArray instanceof float[]) {\n      return comparatorFloat (reader, field, null);\n    } else if (lookupArray instanceof String[]) {\n      return comparatorString (reader, field);\n    } else {\n      throw new RuntimeException (\"unknown data type in field '\"+field+\"'\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65eb076d345a794256daba691a2b366657c807e8":["9e62a8c7e41b44cd847fdb555295e92c601615cd"],"9e62a8c7e41b44cd847fdb555295e92c601615cd":["63bc3238545c6012bd44f5d294077997f236bc4e"],"3766097c9c41a30d67e9b548c62d017abf8e07ac":["7c479e60b9ca12e7273448a055e02ef292870b27"],"7c479e60b9ca12e7273448a055e02ef292870b27":["8a88b478bcadbb1b0ee6aa2fb7e320dd7f68c37b"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["65eb076d345a794256daba691a2b366657c807e8"],"8a88b478bcadbb1b0ee6aa2fb7e320dd7f68c37b":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"63bc3238545c6012bd44f5d294077997f236bc4e":["3766097c9c41a30d67e9b548c62d017abf8e07ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"]},"commit2Childs":{"65eb076d345a794256daba691a2b366657c807e8":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"9e62a8c7e41b44cd847fdb555295e92c601615cd":["65eb076d345a794256daba691a2b366657c807e8"],"3766097c9c41a30d67e9b548c62d017abf8e07ac":["63bc3238545c6012bd44f5d294077997f236bc4e"],"7c479e60b9ca12e7273448a055e02ef292870b27":["3766097c9c41a30d67e9b548c62d017abf8e07ac"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"8a88b478bcadbb1b0ee6aa2fb7e320dd7f68c37b":["7c479e60b9ca12e7273448a055e02ef292870b27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["ded38b25fe842ef1efc6715745bb8d8ed8e2fc99"],"ded38b25fe842ef1efc6715745bb8d8ed8e2fc99":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["8a88b478bcadbb1b0ee6aa2fb7e320dd7f68c37b"],"63bc3238545c6012bd44f5d294077997f236bc4e":["9e62a8c7e41b44cd847fdb555295e92c601615cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}