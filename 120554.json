{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper#setUp().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper#setUp().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    tokens = new String[]{\"here\", \"is\", \"some\", \"text\", \"to\", \"test\", \"extra\"};\n    thePositions = new int[tokens.length][];\n    offsets = new TermVectorOffsetInfo[tokens.length][];\n    numPositions = 0;\n    //save off the last one so we can add it with the same positions as some of the others, but in a predictable way\n    for (int i = 0; i < tokens.length - 1; i++)\n    {\n      thePositions[i] = new int[2 * i + 1];//give 'em all some positions\n      for (int j = 0; j < thePositions[i].length; j++)\n      {\n        thePositions[i][j] = numPositions++;\n      }\n      offsets[i] = new TermVectorOffsetInfo[thePositions[i].length];\n      for (int j = 0; j < offsets[i].length; j++) {\n        offsets[i][j] = new TermVectorOffsetInfo(j, j + 1);//the actual value here doesn't much matter\n      }\n    }\n    thePositions[tokens.length - 1] = new int[1];\n    thePositions[tokens.length - 1][0] = 0;//put this at the same position as \"here\"\n    offsets[tokens.length - 1] = new TermVectorOffsetInfo[1];\n    offsets[tokens.length - 1][0] = new TermVectorOffsetInfo(0, 1);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    tokens = new String[]{\"here\", \"is\", \"some\", \"text\", \"to\", \"test\", \"extra\"};\n    thePositions = new int[tokens.length][];\n    offsets = new TermVectorOffsetInfo[tokens.length][];\n    numPositions = 0;\n    //save off the last one so we can add it with the same positions as some of the others, but in a predictable way\n    for (int i = 0; i < tokens.length - 1; i++)\n    {\n      thePositions[i] = new int[2 * i + 1];//give 'em all some positions\n      for (int j = 0; j < thePositions[i].length; j++)\n      {\n        thePositions[i][j] = numPositions++;\n      }\n      offsets[i] = new TermVectorOffsetInfo[thePositions[i].length];\n      for (int j = 0; j < offsets[i].length; j++) {\n        offsets[i][j] = new TermVectorOffsetInfo(j, j + 1);//the actual value here doesn't much matter\n      }\n    }\n    thePositions[tokens.length - 1] = new int[1];\n    thePositions[tokens.length - 1][0] = 0;//put this at the same position as \"here\"\n    offsets[tokens.length - 1] = new TermVectorOffsetInfo[1];\n    offsets[tokens.length - 1][0] = new TermVectorOffsetInfo(0, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestPositionBasedTermVectorMapper#setUp().mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    tokens = new String[]{\"here\", \"is\", \"some\", \"text\", \"to\", \"test\", \"extra\"};\n    thePositions = new int[tokens.length][];\n    offsets = new TermVectorOffsetInfo[tokens.length][];\n    numPositions = 0;\n    //save off the last one so we can add it with the same positions as some of the others, but in a predictable way\n    for (int i = 0; i < tokens.length - 1; i++)\n    {\n      thePositions[i] = new int[2 * i + 1];//give 'em all some positions\n      for (int j = 0; j < thePositions[i].length; j++)\n      {\n        thePositions[i][j] = numPositions++;\n      }\n      offsets[i] = new TermVectorOffsetInfo[thePositions[i].length];\n      for (int j = 0; j < offsets[i].length; j++) {\n        offsets[i][j] = new TermVectorOffsetInfo(j, j + 1);//the actual value here doesn't much matter\n      }\n    }\n    thePositions[tokens.length - 1] = new int[1];\n    thePositions[tokens.length - 1][0] = 0;//put this at the same position as \"here\"\n    offsets[tokens.length - 1] = new TermVectorOffsetInfo[1];\n    offsets[tokens.length - 1][0] = new TermVectorOffsetInfo(0, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}