{"path":"src/test/org/apache/lucene/search/TestTermRangeQuery#checkBooleanTerms(Searcher,TermRangeQuery,String...).mjava","commits":[{"id":"cf38b33c7ff45f89ab6ce97e6c0ba8752948bf5f","date":1260539714,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermRangeQuery#checkBooleanTerms(Searcher,TermRangeQuery,String...).mjava","pathOld":"/dev/null","sourceNew":"  private void checkBooleanTerms(Searcher searcher, TermRangeQuery query, String... terms) throws IOException {\n    query.setRewriteMethod(MultiTermQuery.TOP_TERMS_SCORING_BOOLEAN_REWRITE);\n    final BooleanQuery bq = (BooleanQuery) searcher.rewrite(query);\n    final Set<String> allowedTerms = new HashSet<String>(Arrays.asList(terms));\n    assertEquals(allowedTerms.size(), bq.clauses().size());\n    for (BooleanClause c : bq.clauses()) {\n      assertTrue(c.getQuery() instanceof TermQuery);\n      final TermQuery tq = (TermQuery) c.getQuery();\n      final String term = tq.getTerm().text();\n      assertTrue(\"invalid term: \"+ term, allowedTerms.contains(term));\n      allowedTerms.remove(term); // remove to fail on double terms\n    }\n    assertEquals(0, allowedTerms.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33098c76721840ff65df95e81a98a5d4a49a777f","date":1266737266,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermRangeQuery#checkBooleanTerms(Searcher,TermRangeQuery,String...).mjava","pathOld":"src/test/org/apache/lucene/search/TestTermRangeQuery#checkBooleanTerms(Searcher,TermRangeQuery,String...).mjava","sourceNew":"  private void checkBooleanTerms(Searcher searcher, TermRangeQuery query, String... terms) throws IOException {\n    query.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite());\n    final BooleanQuery bq = (BooleanQuery) searcher.rewrite(query);\n    final Set<String> allowedTerms = new HashSet<String>(Arrays.asList(terms));\n    assertEquals(allowedTerms.size(), bq.clauses().size());\n    for (BooleanClause c : bq.clauses()) {\n      assertTrue(c.getQuery() instanceof TermQuery);\n      final TermQuery tq = (TermQuery) c.getQuery();\n      final String term = tq.getTerm().text();\n      assertTrue(\"invalid term: \"+ term, allowedTerms.contains(term));\n      allowedTerms.remove(term); // remove to fail on double terms\n    }\n    assertEquals(0, allowedTerms.size());\n  }\n\n","sourceOld":"  private void checkBooleanTerms(Searcher searcher, TermRangeQuery query, String... terms) throws IOException {\n    query.setRewriteMethod(MultiTermQuery.TOP_TERMS_SCORING_BOOLEAN_REWRITE);\n    final BooleanQuery bq = (BooleanQuery) searcher.rewrite(query);\n    final Set<String> allowedTerms = new HashSet<String>(Arrays.asList(terms));\n    assertEquals(allowedTerms.size(), bq.clauses().size());\n    for (BooleanClause c : bq.clauses()) {\n      assertTrue(c.getQuery() instanceof TermQuery);\n      final TermQuery tq = (TermQuery) c.getQuery();\n      final String term = tq.getTerm().text();\n      assertTrue(\"invalid term: \"+ term, allowedTerms.contains(term));\n      allowedTerms.remove(term); // remove to fail on double terms\n    }\n    assertEquals(0, allowedTerms.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#checkBooleanTerms(Searcher,TermRangeQuery,String...).mjava","pathOld":"src/test/org/apache/lucene/search/TestTermRangeQuery#checkBooleanTerms(Searcher,TermRangeQuery,String...).mjava","sourceNew":"  private void checkBooleanTerms(Searcher searcher, TermRangeQuery query, String... terms) throws IOException {\n    query.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite());\n    final BooleanQuery bq = (BooleanQuery) searcher.rewrite(query);\n    final Set<String> allowedTerms = new HashSet<String>(Arrays.asList(terms));\n    assertEquals(allowedTerms.size(), bq.clauses().size());\n    for (BooleanClause c : bq.clauses()) {\n      assertTrue(c.getQuery() instanceof TermQuery);\n      final TermQuery tq = (TermQuery) c.getQuery();\n      final String term = tq.getTerm().text();\n      assertTrue(\"invalid term: \"+ term, allowedTerms.contains(term));\n      allowedTerms.remove(term); // remove to fail on double terms\n    }\n    assertEquals(0, allowedTerms.size());\n  }\n\n","sourceOld":"  private void checkBooleanTerms(Searcher searcher, TermRangeQuery query, String... terms) throws IOException {\n    query.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite());\n    final BooleanQuery bq = (BooleanQuery) searcher.rewrite(query);\n    final Set<String> allowedTerms = new HashSet<String>(Arrays.asList(terms));\n    assertEquals(allowedTerms.size(), bq.clauses().size());\n    for (BooleanClause c : bq.clauses()) {\n      assertTrue(c.getQuery() instanceof TermQuery);\n      final TermQuery tq = (TermQuery) c.getQuery();\n      final String term = tq.getTerm().text();\n      assertTrue(\"invalid term: \"+ term, allowedTerms.contains(term));\n      allowedTerms.remove(term); // remove to fail on double terms\n    }\n    assertEquals(0, allowedTerms.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33098c76721840ff65df95e81a98a5d4a49a777f":["cf38b33c7ff45f89ab6ce97e6c0ba8752948bf5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf38b33c7ff45f89ab6ce97e6c0ba8752948bf5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["33098c76721840ff65df95e81a98a5d4a49a777f"]},"commit2Childs":{"33098c76721840ff65df95e81a98a5d4a49a777f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf38b33c7ff45f89ab6ce97e6c0ba8752948bf5f"],"cf38b33c7ff45f89ab6ce97e6c0ba8752948bf5f":["33098c76721840ff65df95e81a98a5d4a49a777f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}