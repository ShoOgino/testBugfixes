{"path":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState.FieldData#addNewVector().mjava","commits":[{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState.FieldData#addNewVector().mjava","pathOld":"/dev/null","sourceNew":"      /** Only called when term vectors are enabled.  This\n       *  is called the first time we see a given term for\n       *  each * document, to allocate a PostingVector\n       *  instance that * is used to record data needed to\n       *  write the posting * vectors. */\n      private PostingVector addNewVector() {\n\n        if (postingsVectorsUpto == postingsVectors.length) {\n          final int newSize;\n          if (postingsVectors.length < 2)\n            newSize = 2;\n          else\n            newSize = (int) (1.5*postingsVectors.length);\n          PostingVector[] newArray = new PostingVector[newSize];\n          System.arraycopy(postingsVectors, 0, newArray, 0, postingsVectors.length);\n          postingsVectors = newArray;\n        }\n        \n        p.vector = postingsVectors[postingsVectorsUpto];\n        if (p.vector == null)\n          p.vector = postingsVectors[postingsVectorsUpto] = new PostingVector();\n\n        postingsVectorsUpto++;\n\n        final PostingVector v = p.vector;\n        v.p = p;\n\n        final int firstSize = levelSizeArray[0];\n\n        if (doVectorPositions) {\n          final int upto = vectorsPool.newSlice(firstSize);\n          v.posStart = v.posUpto = vectorsPool.byteOffset + upto;\n        }\n\n        if (doVectorOffsets) {\n          final int upto = vectorsPool.newSlice(firstSize);\n          v.offsetStart = v.offsetUpto = vectorsPool.byteOffset + upto;\n        }\n\n        return v;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2684bcb2a921b6b5b76f64ba986564ab1ef0649d","date":1202988124,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState.FieldData#addNewVector().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState.FieldData#addNewVector().mjava","sourceNew":"      /** Only called when term vectors are enabled.  This\n       *  is called the first time we see a given term for\n       *  each document, to allocate a PostingVector\n       *  instance that is used to record data needed to\n       *  write the posting vectors. */\n      private PostingVector addNewVector() {\n\n        if (postingsVectorsUpto == postingsVectors.length) {\n          final int newSize;\n          if (postingsVectors.length < 2)\n            newSize = 2;\n          else\n            newSize = (int) (1.5*postingsVectors.length);\n          PostingVector[] newArray = new PostingVector[newSize];\n          System.arraycopy(postingsVectors, 0, newArray, 0, postingsVectors.length);\n          postingsVectors = newArray;\n        }\n        \n        p.vector = postingsVectors[postingsVectorsUpto];\n        if (p.vector == null)\n          p.vector = postingsVectors[postingsVectorsUpto] = new PostingVector();\n\n        postingsVectorsUpto++;\n\n        final PostingVector v = p.vector;\n        v.p = p;\n\n        final int firstSize = levelSizeArray[0];\n\n        if (doVectorPositions) {\n          final int upto = vectorsPool.newSlice(firstSize);\n          v.posStart = v.posUpto = vectorsPool.byteOffset + upto;\n        }\n\n        if (doVectorOffsets) {\n          final int upto = vectorsPool.newSlice(firstSize);\n          v.offsetStart = v.offsetUpto = vectorsPool.byteOffset + upto;\n        }\n\n        return v;\n      }\n\n","sourceOld":"      /** Only called when term vectors are enabled.  This\n       *  is called the first time we see a given term for\n       *  each * document, to allocate a PostingVector\n       *  instance that * is used to record data needed to\n       *  write the posting * vectors. */\n      private PostingVector addNewVector() {\n\n        if (postingsVectorsUpto == postingsVectors.length) {\n          final int newSize;\n          if (postingsVectors.length < 2)\n            newSize = 2;\n          else\n            newSize = (int) (1.5*postingsVectors.length);\n          PostingVector[] newArray = new PostingVector[newSize];\n          System.arraycopy(postingsVectors, 0, newArray, 0, postingsVectors.length);\n          postingsVectors = newArray;\n        }\n        \n        p.vector = postingsVectors[postingsVectorsUpto];\n        if (p.vector == null)\n          p.vector = postingsVectors[postingsVectorsUpto] = new PostingVector();\n\n        postingsVectorsUpto++;\n\n        final PostingVector v = p.vector;\n        v.p = p;\n\n        final int firstSize = levelSizeArray[0];\n\n        if (doVectorPositions) {\n          final int upto = vectorsPool.newSlice(firstSize);\n          v.posStart = v.posUpto = vectorsPool.byteOffset + upto;\n        }\n\n        if (doVectorOffsets) {\n          final int upto = vectorsPool.newSlice(firstSize);\n          v.offsetStart = v.offsetUpto = vectorsPool.byteOffset + upto;\n        }\n\n        return v;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a0af3a442be522899177e5e11384a45a6784a3f","date":1205348952,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.ThreadState.FieldData#addNewVector().mjava","sourceNew":null,"sourceOld":"      /** Only called when term vectors are enabled.  This\n       *  is called the first time we see a given term for\n       *  each document, to allocate a PostingVector\n       *  instance that is used to record data needed to\n       *  write the posting vectors. */\n      private PostingVector addNewVector() {\n\n        if (postingsVectorsUpto == postingsVectors.length) {\n          final int newSize;\n          if (postingsVectors.length < 2)\n            newSize = 2;\n          else\n            newSize = (int) (1.5*postingsVectors.length);\n          PostingVector[] newArray = new PostingVector[newSize];\n          System.arraycopy(postingsVectors, 0, newArray, 0, postingsVectors.length);\n          postingsVectors = newArray;\n        }\n        \n        p.vector = postingsVectors[postingsVectorsUpto];\n        if (p.vector == null)\n          p.vector = postingsVectors[postingsVectorsUpto] = new PostingVector();\n\n        postingsVectorsUpto++;\n\n        final PostingVector v = p.vector;\n        v.p = p;\n\n        final int firstSize = levelSizeArray[0];\n\n        if (doVectorPositions) {\n          final int upto = vectorsPool.newSlice(firstSize);\n          v.posStart = v.posUpto = vectorsPool.byteOffset + upto;\n        }\n\n        if (doVectorOffsets) {\n          final int upto = vectorsPool.newSlice(firstSize);\n          v.offsetStart = v.offsetUpto = vectorsPool.byteOffset + upto;\n        }\n\n        return v;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2684bcb2a921b6b5b76f64ba986564ab1ef0649d":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a0af3a442be522899177e5e11384a45a6784a3f":["2684bcb2a921b6b5b76f64ba986564ab1ef0649d"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a0af3a442be522899177e5e11384a45a6784a3f"]},"commit2Childs":{"2684bcb2a921b6b5b76f64ba986564ab1ef0649d":["5a0af3a442be522899177e5e11384a45a6784a3f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"5a0af3a442be522899177e5e11384a45a6784a3f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["2684bcb2a921b6b5b76f64ba986564ab1ef0649d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}