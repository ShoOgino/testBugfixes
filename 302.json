{"path":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#markLargestWriterPending(DocumentsWriterFlushControl,ThreadState,long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#markLargestWriterPending(DocumentsWriterFlushControl,ThreadState,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#markLargestWriterPending(DocumentsWriterFlushControl,ThreadState,long).mjava","sourceNew":"  /**\n   * Marks the most ram consuming active {@link DocumentsWriterPerThread} flush\n   * pending\n   */\n  protected void markLargestWriterPending(DocumentsWriterFlushControl control,\n      ThreadState perThreadState, final long currentBytesPerThread) {\n    control\n        .setFlushPending(findLargestNonPendingWriter(control, perThreadState));\n  }\n\n","sourceOld":"  /**\n   * Marks the most ram consuming active {@link DocumentsWriterPerThread} flush\n   * pending\n   */\n  protected void markLargestWriterPending(DocumentsWriterFlushControl control,\n      ThreadState perThreadState, final long currentBytesPerThread) {\n    control\n        .setFlushPending(findLargestNonPendingWriter(control, perThreadState));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b22f57666273c2c1f71d0151a6a35245741fcd06","date":1399627618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#markLargestWriterPending(DocumentsWriterFlushControl,ThreadState,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#markLargestWriterPending(DocumentsWriterFlushControl,ThreadState,long).mjava","sourceNew":"  /**\n   * Marks the most ram consuming active {@link DocumentsWriterPerThread} flush\n   * pending\n   */\n  protected void markLargestWriterPending(DocumentsWriterFlushControl control,\n      ThreadState perThreadState, final long currentBytesPerThread) {\n    control.setFlushPending(findLargestNonPendingWriter(control, perThreadState));\n  }\n\n","sourceOld":"  /**\n   * Marks the most ram consuming active {@link DocumentsWriterPerThread} flush\n   * pending\n   */\n  protected void markLargestWriterPending(DocumentsWriterFlushControl control,\n      ThreadState perThreadState, final long currentBytesPerThread) {\n    control\n        .setFlushPending(findLargestNonPendingWriter(control, perThreadState));\n  }\n\n","bugFix":null,"bugIntro":["9664831d785795f0f380fccc6db560efb979fdbb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9664831d785795f0f380fccc6db560efb979fdbb","date":1526559002,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#markLargestWriterPending(DocumentsWriterFlushControl,ThreadState,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#markLargestWriterPending(DocumentsWriterFlushControl,ThreadState,long).mjava","sourceNew":"  /**\n   * Marks the most ram consuming active {@link DocumentsWriterPerThread} flush\n   * pending\n   */\n  protected void markLargestWriterPending(DocumentsWriterFlushControl control,\n      ThreadState perThreadState, final long currentBytesPerThread) {\n    ThreadState largestNonPendingWriter = findLargestNonPendingWriter(control, perThreadState);\n    if (largestNonPendingWriter != null) {\n      control.setFlushPending(largestNonPendingWriter);\n    }\n  }\n\n","sourceOld":"  /**\n   * Marks the most ram consuming active {@link DocumentsWriterPerThread} flush\n   * pending\n   */\n  protected void markLargestWriterPending(DocumentsWriterFlushControl control,\n      ThreadState perThreadState, final long currentBytesPerThread) {\n    control.setFlushPending(findLargestNonPendingWriter(control, perThreadState));\n  }\n\n","bugFix":["b22f57666273c2c1f71d0151a6a35245741fcd06"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#markLargestWriterPending(DocumentsWriterFlushControl,DocumentsWriterPerThread).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#markLargestWriterPending(DocumentsWriterFlushControl,ThreadState,long).mjava","sourceNew":"  /**\n   * Marks the most ram consuming active {@link DocumentsWriterPerThread} flush\n   * pending\n   */\n  protected void markLargestWriterPending(DocumentsWriterFlushControl control,\n      DocumentsWriterPerThread perThread) {\n    DocumentsWriterPerThread largestNonPendingWriter = findLargestNonPendingWriter(control, perThread);\n    if (largestNonPendingWriter != null) {\n      control.setFlushPending(largestNonPendingWriter);\n    }\n  }\n\n","sourceOld":"  /**\n   * Marks the most ram consuming active {@link DocumentsWriterPerThread} flush\n   * pending\n   */\n  protected void markLargestWriterPending(DocumentsWriterFlushControl control,\n      ThreadState perThreadState, final long currentBytesPerThread) {\n    ThreadState largestNonPendingWriter = findLargestNonPendingWriter(control, perThreadState);\n    if (largestNonPendingWriter != null) {\n      control.setFlushPending(largestNonPendingWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["9664831d785795f0f380fccc6db560efb979fdbb"],"9664831d785795f0f380fccc6db560efb979fdbb":["b22f57666273c2c1f71d0151a6a35245741fcd06"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b22f57666273c2c1f71d0151a6a35245741fcd06":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9664831d785795f0f380fccc6db560efb979fdbb":["264935965977b4a9e2f3920420647072c9c49176"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b22f57666273c2c1f71d0151a6a35245741fcd06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b22f57666273c2c1f71d0151a6a35245741fcd06":["9664831d785795f0f380fccc6db560efb979fdbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}