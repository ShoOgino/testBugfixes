{"path":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","commits":[{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","sourceNew":"  public void testDeletePartiallyWrittenFilesIfAbort() throws IOException {\n    Directory dir = newDirectory();\n    // test explicitly needs files to always be actually deleted\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    // disable CFS because this test checks file names\n    iwConf.setMergePolicy(newLogMergePolicy(false));\n    iwConf.setUseCompoundFile(false);\n\n    // Cannot use RIW because this test wants CFS to stay off:\n    IndexWriter iw = new IndexWriter(dir, iwConf);\n\n    final Document validDoc = new Document();\n    validDoc.add(new IntField(\"id\", 0, Store.YES));\n    iw.addDocument(validDoc);\n    iw.commit();\n    \n    // make sure that #writeField will fail to trigger an abort\n    final Document invalidDoc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setStored(true);\n    invalidDoc.add(new Field(\"invalid\", fieldType) {\n      \n      @Override\n      public String stringValue() {\n        // TODO: really bad & scary that this causes IW to\n        // abort the segment!!  We should fix this.\n        return null;\n      }\n      \n    });\n    \n    try {\n      iw.addDocument(invalidDoc);\n      iw.commit();\n    } catch(IllegalArgumentException iae) {\n      // expected\n      assertEquals(iae, iw.getTragicException());\n    }\n    // Writer should be closed by tragedy\n    assertFalse(iw.isOpen());\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletePartiallyWrittenFilesIfAbort() throws IOException {\n    Directory dir = newDirectory();\n    // test explicitly needs files to always be actually deleted\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    // disable CFS because this test checks file names\n    iwConf.setMergePolicy(newLogMergePolicy(false));\n    iwConf.setUseCompoundFile(false);\n\n    // Cannot use RIW because this test wants CFS to stay off:\n    IndexWriter iw = new IndexWriter(dir, iwConf);\n\n    final Document validDoc = new Document();\n    validDoc.add(new IntField(\"id\", 0, Store.YES));\n    iw.addDocument(validDoc);\n    iw.commit();\n    \n    // make sure that #writeField will fail to trigger an abort\n    final Document invalidDoc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setStored(true);\n    invalidDoc.add(new Field(\"invalid\", fieldType) {\n      \n      @Override\n      public String stringValue() {\n        // TODO: really bad & scary that this causes IW to\n        // abort the segment!!  We should fix this.\n        return null;\n      }\n      \n    });\n    \n    try {\n      iw.addDocument(invalidDoc);\n      iw.commit();\n    } catch(IllegalArgumentException iae) {\n      // expected\n      assertEquals(iae, iw.getTragicException());\n    }\n    // Writer should be closed by tragedy\n    assertFalse(iw.isOpen());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","sourceNew":"  public void testDeletePartiallyWrittenFilesIfAbort() throws IOException {\n    Directory dir = newDirectory();\n    // test explicitly needs files to always be actually deleted\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    // disable CFS because this test checks file names\n    iwConf.setMergePolicy(newLogMergePolicy(false));\n    iwConf.setUseCompoundFile(false);\n\n    // Cannot use RIW because this test wants CFS to stay off:\n    IndexWriter iw = new IndexWriter(dir, iwConf);\n\n    final Document validDoc = new Document();\n    validDoc.add(new DimensionalIntField(\"id\", 0));\n    validDoc.add(new StoredField(\"id\", 0));\n    iw.addDocument(validDoc);\n    iw.commit();\n    \n    // make sure that #writeField will fail to trigger an abort\n    final Document invalidDoc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setStored(true);\n    invalidDoc.add(new Field(\"invalid\", fieldType) {\n      \n      @Override\n      public String stringValue() {\n        // TODO: really bad & scary that this causes IW to\n        // abort the segment!!  We should fix this.\n        return null;\n      }\n      \n    });\n    \n    try {\n      iw.addDocument(invalidDoc);\n      iw.commit();\n    } catch(IllegalArgumentException iae) {\n      // expected\n      assertEquals(iae, iw.getTragicException());\n    }\n    // Writer should be closed by tragedy\n    assertFalse(iw.isOpen());\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletePartiallyWrittenFilesIfAbort() throws IOException {\n    Directory dir = newDirectory();\n    // test explicitly needs files to always be actually deleted\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    // disable CFS because this test checks file names\n    iwConf.setMergePolicy(newLogMergePolicy(false));\n    iwConf.setUseCompoundFile(false);\n\n    // Cannot use RIW because this test wants CFS to stay off:\n    IndexWriter iw = new IndexWriter(dir, iwConf);\n\n    final Document validDoc = new Document();\n    validDoc.add(new IntField(\"id\", 0, Store.YES));\n    iw.addDocument(validDoc);\n    iw.commit();\n    \n    // make sure that #writeField will fail to trigger an abort\n    final Document invalidDoc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setStored(true);\n    invalidDoc.add(new Field(\"invalid\", fieldType) {\n      \n      @Override\n      public String stringValue() {\n        // TODO: really bad & scary that this causes IW to\n        // abort the segment!!  We should fix this.\n        return null;\n      }\n      \n    });\n    \n    try {\n      iw.addDocument(invalidDoc);\n      iw.commit();\n    } catch(IllegalArgumentException iae) {\n      // expected\n      assertEquals(iae, iw.getTragicException());\n    }\n    // Writer should be closed by tragedy\n    assertFalse(iw.isOpen());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","sourceNew":"  public void testDeletePartiallyWrittenFilesIfAbort() throws IOException {\n    Directory dir = newDirectory();\n    // test explicitly needs files to always be actually deleted\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    // disable CFS because this test checks file names\n    iwConf.setMergePolicy(newLogMergePolicy(false));\n    iwConf.setUseCompoundFile(false);\n\n    // Cannot use RIW because this test wants CFS to stay off:\n    IndexWriter iw = new IndexWriter(dir, iwConf);\n\n    final Document validDoc = new Document();\n    validDoc.add(new IntPoint(\"id\", 0));\n    validDoc.add(new StoredField(\"id\", 0));\n    iw.addDocument(validDoc);\n    iw.commit();\n    \n    // make sure that #writeField will fail to trigger an abort\n    final Document invalidDoc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setStored(true);\n    invalidDoc.add(new Field(\"invalid\", fieldType) {\n      \n      @Override\n      public String stringValue() {\n        // TODO: really bad & scary that this causes IW to\n        // abort the segment!!  We should fix this.\n        return null;\n      }\n      \n    });\n    \n    try {\n      iw.addDocument(invalidDoc);\n      iw.commit();\n    } catch(IllegalArgumentException iae) {\n      // expected\n      assertEquals(iae, iw.getTragicException());\n    }\n    // Writer should be closed by tragedy\n    assertFalse(iw.isOpen());\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletePartiallyWrittenFilesIfAbort() throws IOException {\n    Directory dir = newDirectory();\n    // test explicitly needs files to always be actually deleted\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    // disable CFS because this test checks file names\n    iwConf.setMergePolicy(newLogMergePolicy(false));\n    iwConf.setUseCompoundFile(false);\n\n    // Cannot use RIW because this test wants CFS to stay off:\n    IndexWriter iw = new IndexWriter(dir, iwConf);\n\n    final Document validDoc = new Document();\n    validDoc.add(new DimensionalIntField(\"id\", 0));\n    validDoc.add(new StoredField(\"id\", 0));\n    iw.addDocument(validDoc);\n    iw.commit();\n    \n    // make sure that #writeField will fail to trigger an abort\n    final Document invalidDoc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setStored(true);\n    invalidDoc.add(new Field(\"invalid\", fieldType) {\n      \n      @Override\n      public String stringValue() {\n        // TODO: really bad & scary that this causes IW to\n        // abort the segment!!  We should fix this.\n        return null;\n      }\n      \n    });\n    \n    try {\n      iw.addDocument(invalidDoc);\n      iw.commit();\n    } catch(IllegalArgumentException iae) {\n      // expected\n      assertEquals(iae, iw.getTragicException());\n    }\n    // Writer should be closed by tragedy\n    assertFalse(iw.isOpen());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","sourceNew":"  public void testDeletePartiallyWrittenFilesIfAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    // disable CFS because this test checks file names\n    iwConf.setMergePolicy(newLogMergePolicy(false));\n    iwConf.setUseCompoundFile(false);\n\n    // Cannot use RIW because this test wants CFS to stay off:\n    IndexWriter iw = new IndexWriter(dir, iwConf);\n\n    final Document validDoc = new Document();\n    validDoc.add(new IntPoint(\"id\", 0));\n    validDoc.add(new StoredField(\"id\", 0));\n    iw.addDocument(validDoc);\n    iw.commit();\n    \n    // make sure that #writeField will fail to trigger an abort\n    final Document invalidDoc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setStored(true);\n    invalidDoc.add(new Field(\"invalid\", fieldType) {\n      \n      @Override\n      public String stringValue() {\n        // TODO: really bad & scary that this causes IW to\n        // abort the segment!!  We should fix this.\n        return null;\n      }\n      \n    });\n    \n    try {\n      iw.addDocument(invalidDoc);\n      iw.commit();\n    } catch(IllegalArgumentException iae) {\n      // expected\n      assertEquals(iae, iw.getTragicException());\n    }\n    // Writer should be closed by tragedy\n    assertFalse(iw.isOpen());\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletePartiallyWrittenFilesIfAbort() throws IOException {\n    Directory dir = newDirectory();\n    // test explicitly needs files to always be actually deleted\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    // disable CFS because this test checks file names\n    iwConf.setMergePolicy(newLogMergePolicy(false));\n    iwConf.setUseCompoundFile(false);\n\n    // Cannot use RIW because this test wants CFS to stay off:\n    IndexWriter iw = new IndexWriter(dir, iwConf);\n\n    final Document validDoc = new Document();\n    validDoc.add(new IntPoint(\"id\", 0));\n    validDoc.add(new StoredField(\"id\", 0));\n    iw.addDocument(validDoc);\n    iw.commit();\n    \n    // make sure that #writeField will fail to trigger an abort\n    final Document invalidDoc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setStored(true);\n    invalidDoc.add(new Field(\"invalid\", fieldType) {\n      \n      @Override\n      public String stringValue() {\n        // TODO: really bad & scary that this causes IW to\n        // abort the segment!!  We should fix this.\n        return null;\n      }\n      \n    });\n    \n    try {\n      iw.addDocument(invalidDoc);\n      iw.commit();\n    } catch(IllegalArgumentException iae) {\n      // expected\n      assertEquals(iae, iw.getTragicException());\n    }\n    // Writer should be closed by tragedy\n    assertFalse(iw.isOpen());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","sourceNew":"  public void testDeletePartiallyWrittenFilesIfAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    // disable CFS because this test checks file names\n    iwConf.setMergePolicy(newLogMergePolicy(false));\n    iwConf.setUseCompoundFile(false);\n\n    // Cannot use RIW because this test wants CFS to stay off:\n    IndexWriter iw = new IndexWriter(dir, iwConf);\n\n    final Document validDoc = new Document();\n    validDoc.add(new IntPoint(\"id\", 0));\n    validDoc.add(new StoredField(\"id\", 0));\n    iw.addDocument(validDoc);\n    iw.commit();\n    \n    // make sure that #writeField will fail to trigger an abort\n    final Document invalidDoc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setStored(true);\n    invalidDoc.add(new Field(\"invalid\", fieldType) {\n      \n      @Override\n      public String stringValue() {\n        // TODO: really bad & scary that this causes IW to\n        // abort the segment!!  We should fix this.\n        return null;\n      }\n      \n    });\n    \n    try {\n      iw.addDocument(invalidDoc);\n      iw.commit();\n    } catch(IllegalArgumentException iae) {\n      // expected\n      assertEquals(iae, iw.getTragicException());\n    }\n    // Writer should be closed by tragedy\n    assertFalse(iw.isOpen());\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletePartiallyWrittenFilesIfAbort() throws IOException {\n    Directory dir = newDirectory();\n    // test explicitly needs files to always be actually deleted\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    // disable CFS because this test checks file names\n    iwConf.setMergePolicy(newLogMergePolicy(false));\n    iwConf.setUseCompoundFile(false);\n\n    // Cannot use RIW because this test wants CFS to stay off:\n    IndexWriter iw = new IndexWriter(dir, iwConf);\n\n    final Document validDoc = new Document();\n    validDoc.add(new IntPoint(\"id\", 0));\n    validDoc.add(new StoredField(\"id\", 0));\n    iw.addDocument(validDoc);\n    iw.commit();\n    \n    // make sure that #writeField will fail to trigger an abort\n    final Document invalidDoc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setStored(true);\n    invalidDoc.add(new Field(\"invalid\", fieldType) {\n      \n      @Override\n      public String stringValue() {\n        // TODO: really bad & scary that this causes IW to\n        // abort the segment!!  We should fix this.\n        return null;\n      }\n      \n    });\n    \n    try {\n      iw.addDocument(invalidDoc);\n      iw.commit();\n    } catch(IllegalArgumentException iae) {\n      // expected\n      assertEquals(iae, iw.getTragicException());\n    }\n    // Writer should be closed by tragedy\n    assertFalse(iw.isOpen());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","sourceNew":"  public void testDeletePartiallyWrittenFilesIfAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    // disable CFS because this test checks file names\n    iwConf.setMergePolicy(newLogMergePolicy(false));\n    iwConf.setUseCompoundFile(false);\n\n    // Cannot use RIW because this test wants CFS to stay off:\n    IndexWriter iw = new IndexWriter(dir, iwConf);\n\n    final Document validDoc = new Document();\n    validDoc.add(new IntPoint(\"id\", 0));\n    validDoc.add(new StoredField(\"id\", 0));\n    iw.addDocument(validDoc);\n    iw.commit();\n    \n    // make sure that #writeField will fail to trigger an abort\n    final Document invalidDoc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setStored(true);\n    invalidDoc.add(new Field(\"invalid\", fieldType) {\n      \n      @Override\n      public String stringValue() {\n        // TODO: really bad & scary that this causes IW to\n        // abort the segment!!  We should fix this.\n        return null;\n      }\n      \n    });\n    \n    try {\n      iw.addDocument(invalidDoc);\n      iw.commit();\n    } catch(IllegalArgumentException iae) {\n      // expected\n      assertEquals(iae, iw.getTragicException());\n    }\n    // Writer should be closed by tragedy\n    assertFalse(iw.isOpen());\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletePartiallyWrittenFilesIfAbort() throws IOException {\n    Directory dir = newDirectory();\n    // test explicitly needs files to always be actually deleted\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    // disable CFS because this test checks file names\n    iwConf.setMergePolicy(newLogMergePolicy(false));\n    iwConf.setUseCompoundFile(false);\n\n    // Cannot use RIW because this test wants CFS to stay off:\n    IndexWriter iw = new IndexWriter(dir, iwConf);\n\n    final Document validDoc = new Document();\n    validDoc.add(new IntPoint(\"id\", 0));\n    validDoc.add(new StoredField(\"id\", 0));\n    iw.addDocument(validDoc);\n    iw.commit();\n    \n    // make sure that #writeField will fail to trigger an abort\n    final Document invalidDoc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setStored(true);\n    invalidDoc.add(new Field(\"invalid\", fieldType) {\n      \n      @Override\n      public String stringValue() {\n        // TODO: really bad & scary that this causes IW to\n        // abort the segment!!  We should fix this.\n        return null;\n      }\n      \n    });\n    \n    try {\n      iw.addDocument(invalidDoc);\n      iw.commit();\n    } catch(IllegalArgumentException iae) {\n      // expected\n      assertEquals(iae, iw.getTragicException());\n    }\n    // Writer should be closed by tragedy\n    assertFalse(iw.isOpen());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","sourceNew":"  public void testDeletePartiallyWrittenFilesIfAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    // disable CFS because this test checks file names\n    iwConf.setMergePolicy(newLogMergePolicy(false));\n    iwConf.setUseCompoundFile(false);\n\n    // Cannot use RIW because this test wants CFS to stay off:\n    IndexWriter iw = new IndexWriter(dir, iwConf);\n\n    final Document validDoc = new Document();\n    validDoc.add(new IntPoint(\"id\", 0));\n    validDoc.add(new StoredField(\"id\", 0));\n    iw.addDocument(validDoc);\n    iw.commit();\n    \n    // make sure that #writeField will fail to trigger an abort\n    final Document invalidDoc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setStored(true);\n    invalidDoc.add(new Field(\"invalid\", fieldType) {\n      \n      @Override\n      public String stringValue() {\n        // TODO: really bad & scary that this causes IW to\n        // abort the segment!!  We should fix this.\n        return null;\n      }\n      \n    });\n    \n    try {\n      iw.addDocument(invalidDoc);\n      iw.commit();\n    } catch(IllegalArgumentException iae) {\n      // expected\n      assertEquals(iae, iw.getTragicException());\n    }\n    // Writer should be closed by tragedy\n    assertFalse(iw.isOpen());\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletePartiallyWrittenFilesIfAbort() throws IOException {\n    Directory dir = newDirectory();\n    // test explicitly needs files to always be actually deleted\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    // disable CFS because this test checks file names\n    iwConf.setMergePolicy(newLogMergePolicy(false));\n    iwConf.setUseCompoundFile(false);\n\n    // Cannot use RIW because this test wants CFS to stay off:\n    IndexWriter iw = new IndexWriter(dir, iwConf);\n\n    final Document validDoc = new Document();\n    validDoc.add(new IntPoint(\"id\", 0));\n    validDoc.add(new StoredField(\"id\", 0));\n    iw.addDocument(validDoc);\n    iw.commit();\n    \n    // make sure that #writeField will fail to trigger an abort\n    final Document invalidDoc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setStored(true);\n    invalidDoc.add(new Field(\"invalid\", fieldType) {\n      \n      @Override\n      public String stringValue() {\n        // TODO: really bad & scary that this causes IW to\n        // abort the segment!!  We should fix this.\n        return null;\n      }\n      \n    });\n    \n    try {\n      iw.addDocument(invalidDoc);\n      iw.commit();\n    } catch(IllegalArgumentException iae) {\n      // expected\n      assertEquals(iae, iw.getTragicException());\n    }\n    // Writer should be closed by tragedy\n    assertFalse(iw.isOpen());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6448f67be45147de82a85cd903fec34e8930da75","date":1477041277,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","sourceNew":"  public void testDeletePartiallyWrittenFilesIfAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    // disable CFS because this test checks file names\n    iwConf.setMergePolicy(newLogMergePolicy(false));\n    iwConf.setUseCompoundFile(false);\n\n    // Cannot use RIW because this test wants CFS to stay off:\n    IndexWriter iw = new IndexWriter(dir, iwConf);\n\n    final Document validDoc = new Document();\n    validDoc.add(new IntPoint(\"id\", 0));\n    validDoc.add(new StoredField(\"id\", 0));\n    iw.addDocument(validDoc);\n    iw.commit();\n    \n    // make sure that #writeField will fail to trigger an abort\n    final Document invalidDoc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setStored(true);\n    invalidDoc.add(new Field(\"invalid\", fieldType) {\n      \n      @Override\n      public String stringValue() {\n        // TODO: really bad & scary that this causes IW to\n        // abort the segment!!  We should fix this.\n        return null;\n      }\n      \n    });\n    \n    try {\n      iw.addDocument(invalidDoc);\n      iw.commit();\n    } catch(IllegalArgumentException iae) {\n      // expected\n      assertEquals(iae, iw.getTragicException());\n    }\n    // Writer should be closed by tragedy\n    assertFalse(iw.isOpen());\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletePartiallyWrittenFilesIfAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    // disable CFS because this test checks file names\n    iwConf.setMergePolicy(newLogMergePolicy(false));\n    iwConf.setUseCompoundFile(false);\n\n    // Cannot use RIW because this test wants CFS to stay off:\n    IndexWriter iw = new IndexWriter(dir, iwConf);\n\n    final Document validDoc = new Document();\n    validDoc.add(new IntPoint(\"id\", 0));\n    validDoc.add(new StoredField(\"id\", 0));\n    iw.addDocument(validDoc);\n    iw.commit();\n    \n    // make sure that #writeField will fail to trigger an abort\n    final Document invalidDoc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setStored(true);\n    invalidDoc.add(new Field(\"invalid\", fieldType) {\n      \n      @Override\n      public String stringValue() {\n        // TODO: really bad & scary that this causes IW to\n        // abort the segment!!  We should fix this.\n        return null;\n      }\n      \n    });\n    \n    try {\n      iw.addDocument(invalidDoc);\n      iw.commit();\n    } catch(IllegalArgumentException iae) {\n      // expected\n      assertEquals(iae, iw.getTragicException());\n    }\n    // Writer should be closed by tragedy\n    assertFalse(iw.isOpen());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","sourceNew":"  public void testDeletePartiallyWrittenFilesIfAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    // disable CFS because this test checks file names\n    iwConf.setMergePolicy(newLogMergePolicy(false));\n    iwConf.setUseCompoundFile(false);\n\n    // Cannot use RIW because this test wants CFS to stay off:\n    IndexWriter iw = new IndexWriter(dir, iwConf);\n\n    final Document validDoc = new Document();\n    validDoc.add(new IntPoint(\"id\", 0));\n    validDoc.add(new StoredField(\"id\", 0));\n    iw.addDocument(validDoc);\n    iw.commit();\n    \n    // make sure that #writeField will fail to trigger an abort\n    final Document invalidDoc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setStored(true);\n    invalidDoc.add(new Field(\"invalid\", fieldType) {\n      \n      @Override\n      public String stringValue() {\n        // TODO: really bad & scary that this causes IW to\n        // abort the segment!!  We should fix this.\n        return null;\n      }\n      \n    });\n    \n    try {\n      iw.addDocument(invalidDoc);\n      iw.commit();\n    } catch(IllegalArgumentException iae) {\n      // expected\n      assertEquals(iae, iw.getTragicException());\n    }\n    // Writer should be closed by tragedy\n    assertFalse(iw.isOpen());\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletePartiallyWrittenFilesIfAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomInts.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    // disable CFS because this test checks file names\n    iwConf.setMergePolicy(newLogMergePolicy(false));\n    iwConf.setUseCompoundFile(false);\n\n    // Cannot use RIW because this test wants CFS to stay off:\n    IndexWriter iw = new IndexWriter(dir, iwConf);\n\n    final Document validDoc = new Document();\n    validDoc.add(new IntPoint(\"id\", 0));\n    validDoc.add(new StoredField(\"id\", 0));\n    iw.addDocument(validDoc);\n    iw.commit();\n    \n    // make sure that #writeField will fail to trigger an abort\n    final Document invalidDoc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setStored(true);\n    invalidDoc.add(new Field(\"invalid\", fieldType) {\n      \n      @Override\n      public String stringValue() {\n        // TODO: really bad & scary that this causes IW to\n        // abort the segment!!  We should fix this.\n        return null;\n      }\n      \n    });\n    \n    try {\n      iw.addDocument(invalidDoc);\n      iw.commit();\n    } catch(IllegalArgumentException iae) {\n      // expected\n      assertEquals(iae, iw.getTragicException());\n    }\n    // Writer should be closed by tragedy\n    assertFalse(iw.isOpen());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/codecs/compressing/TestCompressingStoredFieldsFormat#testDeletePartiallyWrittenFilesIfAbort().mjava","sourceNew":"  public void testDeletePartiallyWrittenFilesIfAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(getCodec());\n    // disable CFS because this test checks file names\n    iwConf.setMergePolicy(newLogMergePolicy(false));\n    iwConf.setUseCompoundFile(false);\n\n    // Cannot use RIW because this test wants CFS to stay off:\n    IndexWriter iw = new IndexWriter(dir, iwConf);\n\n    final Document validDoc = new Document();\n    validDoc.add(new IntPoint(\"id\", 0));\n    validDoc.add(new StoredField(\"id\", 0));\n    iw.addDocument(validDoc);\n    iw.commit();\n    \n    // make sure that #writeField will fail to trigger an abort\n    final Document invalidDoc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setStored(true);\n    invalidDoc.add(new Field(\"invalid\", fieldType) {\n      \n      @Override\n      public String stringValue() {\n        // TODO: really bad & scary that this causes IW to\n        // abort the segment!!  We should fix this.\n        return null;\n      }\n      \n    });\n    \n    try {\n      iw.addDocument(invalidDoc);\n      iw.commit();\n    } catch(IllegalArgumentException iae) {\n      // expected\n      assertEquals(iae, iw.getTragicException());\n    }\n    // Writer should be closed by tragedy\n    assertFalse(iw.isOpen());\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeletePartiallyWrittenFilesIfAbort() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwConf = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwConf.setMaxBufferedDocs(RandomNumbers.randomIntBetween(random(), 2, 30));\n    iwConf.setCodec(CompressingCodec.randomInstance(random()));\n    // disable CFS because this test checks file names\n    iwConf.setMergePolicy(newLogMergePolicy(false));\n    iwConf.setUseCompoundFile(false);\n\n    // Cannot use RIW because this test wants CFS to stay off:\n    IndexWriter iw = new IndexWriter(dir, iwConf);\n\n    final Document validDoc = new Document();\n    validDoc.add(new IntPoint(\"id\", 0));\n    validDoc.add(new StoredField(\"id\", 0));\n    iw.addDocument(validDoc);\n    iw.commit();\n    \n    // make sure that #writeField will fail to trigger an abort\n    final Document invalidDoc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setStored(true);\n    invalidDoc.add(new Field(\"invalid\", fieldType) {\n      \n      @Override\n      public String stringValue() {\n        // TODO: really bad & scary that this causes IW to\n        // abort the segment!!  We should fix this.\n        return null;\n      }\n      \n    });\n    \n    try {\n      iw.addDocument(invalidDoc);\n      iw.commit();\n    } catch(IllegalArgumentException iae) {\n      // expected\n      assertEquals(iae, iw.getTragicException());\n    }\n    // Writer should be closed by tragedy\n    assertFalse(iw.isOpen());\n    dir.close();\n  }\n\n","bugFix":["70b55953b6a72596cb534ead735a8b849a473cac"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["770342641f7b505eaa8dccdc666158bff2419109"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"6448f67be45147de82a85cd903fec34e8930da75":["5a207d19eac354d649c3f0e2cce070017c78125e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["5a207d19eac354d649c3f0e2cce070017c78125e","6448f67be45147de82a85cd903fec34e8930da75"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","b470f36a9372c97283360b1304eacbde22df6c0d"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"770342641f7b505eaa8dccdc666158bff2419109":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["6448f67be45147de82a85cd903fec34e8930da75"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"5a207d19eac354d649c3f0e2cce070017c78125e":["6448f67be45147de82a85cd903fec34e8930da75","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"6448f67be45147de82a85cd903fec34e8930da75":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","71da933d30aea361ccc224d6544c451cbf49916d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}