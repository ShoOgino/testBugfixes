{"path":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#assertFewParents(String,boolean).mjava","commits":[{"id":"9440b5b1eec7788a0edd10385e4d7a614d1024d7","date":1528992889,"type":0,"author":"user","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#assertFewParents(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void assertFewParents(String json, boolean anonChildDocsFlag) throws Exception {\n    SolrQueryRequest req;\n    SolrQueryResponse rsp;\n    BufferingRequestProcessor p;\n    JsonLoader loader;//multichild test case\n    final boolean array = random().nextBoolean();\n    StringBuilder b = new StringBuilder();\n    if (array) {\n      b.append(\"[\");\n    }\n    final int passes = atLeast(2);\n    for (int i=1;i<=passes;i++){\n      b.append(json.replace(\"1\",\"\"+i));\n      if (array) {\n        b.append(i<passes ? \",\" :\"]\");\n      }\n    }\n\n    req = req(PARENT_TWO_CHILDREN_PARAMS, ANONYMOUS_CHILD_DOCS, Boolean.toString(anonChildDocsFlag));\n    req.getContext().put(\"path\", \"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(b.toString()), p);\n    for (int i=1; i<=passes; i++){\n      final int ii = i;\n      UnaryOperator<String> s = (v)-> v.replace(\"1\",\"\"+ii);\n      final SolrInputDocument parent = p.addCommands.get(i-1).solrDoc;\n      assertOnlyValue(s.apply(\"1\"), parent,\"id\");\n      assertOnlyValue(\"i am the parent\", parent, \"name\");\n      assertOnlyValue(\"parent\", parent, \"cat\");\n\n      List<SolrInputDocument> childDocs1;\n      if(anonChildDocsFlag) {\n        childDocs1 = parent.getChildDocuments();\n      } else {\n        childDocs1 = (List) ((parent.getField(\"children\")).getValue());\n      }\n\n      assertEquals(2, childDocs1.size());\n      {\n        final SolrInputDocument child1 = childDocs1.get(0);\n        assertOnlyValue(s.apply(\"1.1\"), child1, \"id\");\n        assertOnlyValue(s.apply(\"i am the 1st child\"), child1, \"name\");\n        assertOnlyValue(\"child\", child1,\"cat\");\n      }\n      {\n        final SolrInputDocument child2 = childDocs1.get(1);\n        assertOnlyValue(s.apply(\"1.2\"), child2, \"id\");\n        assertOnlyValue(\"i am the 2nd child\", child2, \"name\");\n        assertOnlyValue(\"test-new-label\", child2, \"test_s\");\n        assertOnlyValue(\"child\", child2, \"cat\");\n\n        List<SolrInputDocument> childDocs2;\n        if(anonChildDocsFlag) {\n          childDocs2 = child2.getChildDocuments();\n        } else {\n          childDocs2 = (List) ((child2.getField(\"grandchildren\")).getValue());\n        }\n\n        assertEquals(1, childDocs2.size());\n        final SolrInputDocument grandChild = childDocs2.get(0);\n        assertOnlyValue(s.apply(\"1.2.1\"), grandChild,\"id\");\n        assertOnlyValue(\"i am the grandchild\", grandChild, \"name\");\n        assertOnlyValue(\"grandchild\", grandChild, \"cat\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#assertFewParents(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void assertFewParents(String json, boolean anonChildDocsFlag) throws Exception {\n    SolrQueryRequest req;\n    SolrQueryResponse rsp;\n    BufferingRequestProcessor p;\n    JsonLoader loader;//multichild test case\n    final boolean array = random().nextBoolean();\n    StringBuilder b = new StringBuilder();\n    if (array) {\n      b.append(\"[\");\n    }\n    final int passes = atLeast(2);\n    for (int i=1;i<=passes;i++){\n      b.append(json.replace(\"1\",\"\"+i));\n      if (array) {\n        b.append(i<passes ? \",\" :\"]\");\n      }\n    }\n\n    req = req(PARENT_TWO_CHILDREN_PARAMS, ANONYMOUS_CHILD_DOCS, Boolean.toString(anonChildDocsFlag));\n    req.getContext().put(\"path\", \"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(b.toString()), p);\n    for (int i=1; i<=passes; i++){\n      final int ii = i;\n      UnaryOperator<String> s = (v)-> v.replace(\"1\",\"\"+ii);\n      final SolrInputDocument parent = p.addCommands.get(i-1).solrDoc;\n      assertOnlyValue(s.apply(\"1\"), parent,\"id\");\n      assertOnlyValue(\"i am the parent\", parent, \"name\");\n      assertOnlyValue(\"parent\", parent, \"cat\");\n\n      List<SolrInputDocument> childDocs1;\n      if(anonChildDocsFlag) {\n        childDocs1 = parent.getChildDocuments();\n      } else {\n        childDocs1 = (List) ((parent.getField(\"children\")).getValue());\n      }\n\n      assertEquals(2, childDocs1.size());\n      {\n        final SolrInputDocument child1 = childDocs1.get(0);\n        assertOnlyValue(s.apply(\"1.1\"), child1, \"id\");\n        assertOnlyValue(s.apply(\"i am the 1st child\"), child1, \"name\");\n        assertOnlyValue(\"child\", child1,\"cat\");\n      }\n      {\n        final SolrInputDocument child2 = childDocs1.get(1);\n        assertOnlyValue(s.apply(\"1.2\"), child2, \"id\");\n        assertOnlyValue(\"i am the 2nd child\", child2, \"name\");\n        assertOnlyValue(\"test-new-label\", child2, \"test_s\");\n        assertOnlyValue(\"child\", child2, \"cat\");\n\n        List<SolrInputDocument> childDocs2;\n        if(anonChildDocsFlag) {\n          childDocs2 = child2.getChildDocuments();\n        } else {\n          childDocs2 = (List) ((child2.getField(\"grandchildren\")).getValue());\n        }\n\n        assertEquals(1, childDocs2.size());\n        final SolrInputDocument grandChild = childDocs2.get(0);\n        assertOnlyValue(s.apply(\"1.2.1\"), grandChild,\"id\");\n        assertOnlyValue(\"i am the grandchild\", grandChild, \"name\");\n        assertOnlyValue(\"grandchild\", grandChild, \"cat\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#assertFewParents(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void assertFewParents(String json, boolean anonChildDocsFlag) throws Exception {\n    SolrQueryRequest req;\n    SolrQueryResponse rsp;\n    BufferingRequestProcessor p;\n    JsonLoader loader;//multichild test case\n    final boolean array = random().nextBoolean();\n    StringBuilder b = new StringBuilder();\n    if (array) {\n      b.append(\"[\");\n    }\n    final int passes = atLeast(2);\n    for (int i=1;i<=passes;i++){\n      b.append(json.replace(\"1\",\"\"+i));\n      if (array) {\n        b.append(i<passes ? \",\" :\"]\");\n      }\n    }\n\n    req = req(PARENT_TWO_CHILDREN_PARAMS, ANONYMOUS_CHILD_DOCS, Boolean.toString(anonChildDocsFlag));\n    req.getContext().put(\"path\", \"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(b.toString()), p);\n    for (int i=1; i<=passes; i++){\n      final int ii = i;\n      UnaryOperator<String> s = (v)-> v.replace(\"1\",\"\"+ii);\n      final SolrInputDocument parent = p.addCommands.get(i-1).solrDoc;\n      assertOnlyValue(s.apply(\"1\"), parent,\"id\");\n      assertOnlyValue(\"i am the parent\", parent, \"name\");\n      assertOnlyValue(\"parent\", parent, \"cat\");\n\n      List<SolrInputDocument> childDocs1;\n      if(anonChildDocsFlag) {\n        childDocs1 = parent.getChildDocuments();\n      } else {\n        childDocs1 = (List) ((parent.getField(\"children\")).getValue());\n      }\n\n      assertEquals(2, childDocs1.size());\n      {\n        final SolrInputDocument child1 = childDocs1.get(0);\n        assertOnlyValue(s.apply(\"1.1\"), child1, \"id\");\n        assertOnlyValue(s.apply(\"i am the 1st child\"), child1, \"name\");\n        assertOnlyValue(\"child\", child1,\"cat\");\n      }\n      {\n        final SolrInputDocument child2 = childDocs1.get(1);\n        assertOnlyValue(s.apply(\"1.2\"), child2, \"id\");\n        assertOnlyValue(\"i am the 2nd child\", child2, \"name\");\n        assertOnlyValue(\"test-new-label\", child2, \"test_s\");\n        assertOnlyValue(\"child\", child2, \"cat\");\n\n        List<SolrInputDocument> childDocs2;\n        if(anonChildDocsFlag) {\n          childDocs2 = child2.getChildDocuments();\n        } else {\n          childDocs2 = (List) ((child2.getField(\"grandchildren\")).getValue());\n        }\n\n        assertEquals(1, childDocs2.size());\n        final SolrInputDocument grandChild = childDocs2.get(0);\n        assertOnlyValue(s.apply(\"1.2.1\"), grandChild,\"id\");\n        assertOnlyValue(\"i am the grandchild\", grandChild, \"name\");\n        assertOnlyValue(\"grandchild\", grandChild, \"cat\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"263caed1e020aa6ed422c9243c9b1759ab27e703","date":1546531139,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#assertFewParents(String,boolean).mjava","sourceNew":null,"sourceOld":"  private void assertFewParents(String json, boolean anonChildDocsFlag) throws Exception {\n    SolrQueryRequest req;\n    SolrQueryResponse rsp;\n    BufferingRequestProcessor p;\n    JsonLoader loader;//multichild test case\n    final boolean array = random().nextBoolean();\n    StringBuilder b = new StringBuilder();\n    if (array) {\n      b.append(\"[\");\n    }\n    final int passes = atLeast(2);\n    for (int i=1;i<=passes;i++){\n      b.append(json.replace(\"1\",\"\"+i));\n      if (array) {\n        b.append(i<passes ? \",\" :\"]\");\n      }\n    }\n\n    req = req(PARENT_TWO_CHILDREN_PARAMS, ANONYMOUS_CHILD_DOCS, Boolean.toString(anonChildDocsFlag));\n    req.getContext().put(\"path\", \"/update/json/docs\");\n    rsp = new SolrQueryResponse();\n    p = new BufferingRequestProcessor(null);\n    loader = new JsonLoader();\n    loader.load(req, rsp, new ContentStreamBase.StringStream(b.toString()), p);\n    for (int i=1; i<=passes; i++){\n      final int ii = i;\n      UnaryOperator<String> s = (v)-> v.replace(\"1\",\"\"+ii);\n      final SolrInputDocument parent = p.addCommands.get(i-1).solrDoc;\n      assertOnlyValue(s.apply(\"1\"), parent,\"id\");\n      assertOnlyValue(\"i am the parent\", parent, \"name\");\n      assertOnlyValue(\"parent\", parent, \"cat\");\n\n      List<SolrInputDocument> childDocs1;\n      if(anonChildDocsFlag) {\n        childDocs1 = parent.getChildDocuments();\n      } else {\n        childDocs1 = (List) ((parent.getField(\"children\")).getValue());\n      }\n\n      assertEquals(2, childDocs1.size());\n      {\n        final SolrInputDocument child1 = childDocs1.get(0);\n        assertOnlyValue(s.apply(\"1.1\"), child1, \"id\");\n        assertOnlyValue(s.apply(\"i am the 1st child\"), child1, \"name\");\n        assertOnlyValue(\"child\", child1,\"cat\");\n      }\n      {\n        final SolrInputDocument child2 = childDocs1.get(1);\n        assertOnlyValue(s.apply(\"1.2\"), child2, \"id\");\n        assertOnlyValue(\"i am the 2nd child\", child2, \"name\");\n        assertOnlyValue(\"test-new-label\", child2, \"test_s\");\n        assertOnlyValue(\"child\", child2, \"cat\");\n\n        List<SolrInputDocument> childDocs2;\n        if(anonChildDocsFlag) {\n          childDocs2 = child2.getChildDocuments();\n        } else {\n          childDocs2 = (List) ((child2.getField(\"grandchildren\")).getValue());\n        }\n\n        assertEquals(1, childDocs2.size());\n        final SolrInputDocument grandChild = childDocs2.get(0);\n        assertOnlyValue(s.apply(\"1.2.1\"), grandChild,\"id\");\n        assertOnlyValue(\"i am the grandchild\", grandChild, \"name\");\n        assertOnlyValue(\"grandchild\", grandChild, \"cat\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9440b5b1eec7788a0edd10385e4d7a614d1024d7"],"9440b5b1eec7788a0edd10385e4d7a614d1024d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"263caed1e020aa6ed422c9243c9b1759ab27e703":["9440b5b1eec7788a0edd10385e4d7a614d1024d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["263caed1e020aa6ed422c9243c9b1759ab27e703"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9440b5b1eec7788a0edd10385e4d7a614d1024d7"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"9440b5b1eec7788a0edd10385e4d7a614d1024d7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","263caed1e020aa6ed422c9243c9b1759ab27e703","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9440b5b1eec7788a0edd10385e4d7a614d1024d7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"263caed1e020aa6ed422c9243c9b1759ab27e703":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}