{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","commits":[{"id":"b5629050969c1e696c5dc14e8639f3e733e8e33c","date":1313606044,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testPhraseQueryPositionIncrements().mjava","sourceNew":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopStopList, false));\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"));\n\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 2\\\"\"));\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(true);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(false);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n  }\n\n","sourceOld":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopStopList, false));\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"));\n\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 2\\\"\"));\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(true);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(false);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","sourceNew":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, false));\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"));\n\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 2\\\"\"));\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(true);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(false);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n  }\n\n","sourceOld":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopStopList, false));\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"));\n\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 2\\\"\"));\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(true);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(false);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPhraseQueryPositionIncrements().mjava","sourceNew":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, false));\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"));\n\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 2\\\"\"));\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(true);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(false);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n  }\n\n","sourceOld":"  public void testPhraseQueryPositionIncrements() throws Exception {\n    CharacterRunAutomaton stopStopList =\n    new CharacterRunAutomaton(new RegExp(\"[sS][tT][oO][pP]\").toAutomaton());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, false));\n\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"));\n\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 2\\\"\"));\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(true);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp.setEnablePositionIncrements(false);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n\n    phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"field\", \"1\"));\n    phraseQuery.add(new Term(\"field\", \"2\"), 2);\n    assertEquals(phraseQuery, qp.parse(\"\\\"1 stop 2\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5629050969c1e696c5dc14e8639f3e733e8e33c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b5629050969c1e696c5dc14e8639f3e733e8e33c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5629050969c1e696c5dc14e8639f3e733e8e33c"],"b5629050969c1e696c5dc14e8639f3e733e8e33c":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}