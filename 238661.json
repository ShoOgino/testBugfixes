{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPrecisionMatrix().mjava","commits":[{"id":"4c43c3dc5bb48bb7b5754b276264c3080d1665b2","date":1576000625,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPrecisionMatrix().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPrecisionMatrix() throws Exception {\n    String cexpr = \"let(a=matrix(array(1.3333999, 2.4444445), array(2.333333, 10.10009)), b=precision(a, 4))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> rows = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertTrue(rows.size() == 2);\n    List<Number> row1 = rows.get(0);\n    assertTrue(row1.size() == 2);\n    assertEquals(row1.get(0).doubleValue(), 1.3334, 0);\n    assertEquals(row1.get(1).doubleValue(),  2.4444, 0);\n\n    List<Number> row2 = rows.get(1);\n    assertTrue(row2.size() == 2);\n    assertEquals(row2.get(0).doubleValue(), 2.3333, 0);\n    assertEquals(row2.get(1).doubleValue(),  10.1001, 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPrecisionMatrix().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPrecisionMatrix() throws Exception {\n    String cexpr = \"let(a=matrix(array(1.3333999, 2.4444445), array(2.333333, 10.10009)), b=precision(a, 4))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> rows = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertTrue(rows.size() == 2);\n    List<Number> row1 = rows.get(0);\n    assertTrue(row1.size() == 2);\n    assertEquals(row1.get(0).doubleValue(), 1.3334, 0);\n    assertEquals(row1.get(1).doubleValue(),  2.4444, 0);\n\n    List<Number> row2 = rows.get(1);\n    assertTrue(row2.size() == 2);\n    assertEquals(row2.get(0).doubleValue(), 2.3333, 0);\n    assertEquals(row2.get(1).doubleValue(),  10.1001, 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPrecisionMatrix().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPrecisionMatrix().mjava","sourceNew":"  @Test\n  public void testPrecisionMatrix() throws Exception {\n    String cexpr = \"let(a=matrix(array(1.3333999, 2.4444445), array(2.333333, 10.10009)), b=precision(a, 4))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> rows = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertTrue(rows.size() == 2);\n    List<Number> row1 = rows.get(0);\n    assertTrue(row1.size() == 2);\n    assertEquals(row1.get(0).doubleValue(), 1.3334, 0);\n    assertEquals(row1.get(1).doubleValue(),  2.4444, 0);\n\n    List<Number> row2 = rows.get(1);\n    assertTrue(row2.size() == 2);\n    assertEquals(row2.get(0).doubleValue(), 2.3333, 0);\n    assertEquals(row2.get(1).doubleValue(),  10.1001, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testPrecisionMatrix() throws Exception {\n    String cexpr = \"let(a=matrix(array(1.3333999, 2.4444445), array(2.333333, 10.10009)), b=precision(a, 4))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> rows = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertTrue(rows.size() == 2);\n    List<Number> row1 = rows.get(0);\n    assertTrue(row1.size() == 2);\n    assertEquals(row1.get(0).doubleValue(), 1.3334, 0);\n    assertEquals(row1.get(1).doubleValue(),  2.4444, 0);\n\n    List<Number> row2 = rows.get(1);\n    assertTrue(row2.size() == 2);\n    assertEquals(row2.get(0).doubleValue(), 2.3333, 0);\n    assertEquals(row2.get(1).doubleValue(),  10.1001, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["4c43c3dc5bb48bb7b5754b276264c3080d1665b2"],"4c43c3dc5bb48bb7b5754b276264c3080d1665b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4c43c3dc5bb48bb7b5754b276264c3080d1665b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c43c3dc5bb48bb7b5754b276264c3080d1665b2":["9ba1b632c041956c93c41aa1143d16a567014891","a229cb50768e988c50a2106bdae3a92154f428bf"],"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c43c3dc5bb48bb7b5754b276264c3080d1665b2","a229cb50768e988c50a2106bdae3a92154f428bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}