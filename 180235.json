{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","pathOld":"/dev/null","sourceNew":"  private void addNewReplica() throws Exception, InterruptedException,\n      TimeoutException, IOException, KeeperException, URISyntaxException,\n      SolrServerException {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (SolrServer client : shardToClient.get(\"shard1\")) {\n      if (VERBOSE) System.out.println(\"total:\"\n          + client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","pathOld":"/dev/null","sourceNew":"  private void addNewReplica() throws Exception, InterruptedException,\n      TimeoutException, IOException, KeeperException, URISyntaxException,\n      SolrServerException {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (SolrServer client : shardToClient.get(\"shard1\")) {\n      if (VERBOSE) System.out.println(\"total:\"\n          + client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","pathOld":"/dev/null","sourceNew":"  private void addNewReplica() throws Exception, InterruptedException,\n      TimeoutException, IOException, KeeperException, URISyntaxException,\n      SolrServerException {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (SolrServer client : shardToClient.get(\"shard1\")) {\n      if (VERBOSE) System.out.println(\"total:\"\n          + client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94f787671ca16d65e86976f99bd603595f757a91","date":1330045652,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","sourceNew":"  private void addNewReplica() throws Exception, InterruptedException,\n      TimeoutException, IOException, KeeperException, URISyntaxException,\n      SolrServerException {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (SolrServer client : shardToClient.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":"  private void addNewReplica() throws Exception, InterruptedException,\n      TimeoutException, IOException, KeeperException, URISyntaxException,\n      SolrServerException {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (SolrServer client : shardToClient.get(\"shard1\")) {\n      if (VERBOSE) System.out.println(\"total:\"\n          + client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","sourceNew":"  private void addNewReplica() throws Exception, InterruptedException,\n      TimeoutException, IOException, KeeperException, URISyntaxException,\n      SolrServerException {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (SolrServer client : shardToClient.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":"  private void addNewReplica() throws Exception, InterruptedException,\n      TimeoutException, IOException, KeeperException, URISyntaxException,\n      SolrServerException {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (SolrServer client : shardToClient.get(\"shard1\")) {\n      if (VERBOSE) System.out.println(\"total:\"\n          + client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","sourceNew":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (SolrServer client : shardToClient.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":"  private void addNewReplica() throws Exception, InterruptedException,\n      TimeoutException, IOException, KeeperException, URISyntaxException,\n      SolrServerException {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (SolrServer client : shardToClient.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","sourceNew":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (SolrServer client : shardToClient.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":"  private void addNewReplica() throws Exception, InterruptedException,\n      TimeoutException, IOException, KeeperException, URISyntaxException,\n      SolrServerException {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (SolrServer client : shardToClient.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"217c5e3cedf564c6d370670858e1b1edab16fcac","date":1343114420,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","sourceNew":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (SolrServer client : shardToClient.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","date":1343203827,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","sourceNew":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (SolrServer client : shardToClient.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","sourceNew":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (SolrServer client : shardToClient.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","sourceNew":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (SolrServer client : shardToClient.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + client.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addNewReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","sourceNew":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addNewReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","sourceNew":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test#addNewReplica().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#addNewReplica().mjava","sourceNew":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","sourceOld":"  private void addNewReplica() throws Exception {\n    JettySolrRunner newReplica = createJettys(1).get(0);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // new server should be part of first shard\n    // how many docs are on the new shard?\n    for (CloudJettyRunner cjetty : shardToJetty.get(\"shard1\")) {\n      if (VERBOSE) System.err.println(\"total:\"\n          + cjetty.client.solrClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n    \n    checkShardConsistency(\"shard1\");\n    \n    assertDocCounts(VERBOSE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","94f787671ca16d65e86976f99bd603595f757a91"],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","217c5e3cedf564c6d370670858e1b1edab16fcac"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"94f787671ca16d65e86976f99bd603595f757a91":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","2c30e4c1cee08b3b229a77991882594fe7250b66"],"aba371508186796cc6151d8223a5b4e16d02e26e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","217c5e3cedf564c6d370670858e1b1edab16fcac"],"217c5e3cedf564c6d370670858e1b1edab16fcac":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["94f787671ca16d65e86976f99bd603595f757a91","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","217c5e3cedf564c6d370670858e1b1edab16fcac"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["94f787671ca16d65e86976f99bd603595f757a91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["217c5e3cedf564c6d370670858e1b1edab16fcac"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"94f787671ca16d65e86976f99bd603595f757a91":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"217c5e3cedf564c6d370670858e1b1edab16fcac":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","2c30e4c1cee08b3b229a77991882594fe7250b66"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","94f787671ca16d65e86976f99bd603595f757a91","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","aba371508186796cc6151d8223a5b4e16d02e26e","217c5e3cedf564c6d370670858e1b1edab16fcac","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}