{"path":"contrib/miscellaneous/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser.QPTestFilter#next().mjava","commits":[{"id":"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a","date":1114594353,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/miscellaneous/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser.QPTestFilter#next().mjava","pathOld":"src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser.QPTestFilter#next().mjava","sourceNew":"    public Token next() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        return new Token(\"phrase2\", savedStart, savedEnd);\n      } else\n        for (Token token = input.next(); token != null; token = input.next()) {\n          if (token.termText().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = token.startOffset();\n            savedEnd = token.endOffset();\n            return new Token(\"phrase1\", savedStart, savedEnd);\n          } else if (!token.termText().equals(\"stop\"))\n            return token;\n        }\n      return null;\n    }\n\n","sourceOld":"    public Token next() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        return new Token(\"phrase2\", savedStart, savedEnd);\n      } else\n        for (Token token = input.next(); token != null; token = input.next()) {\n          if (token.termText().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = token.startOffset();\n            savedEnd = token.endOffset();\n            return new Token(\"phrase1\", savedStart, savedEnd);\n          } else if (!token.termText().equals(\"stop\"))\n            return token;\n        }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser.QPTestFilter#next().mjava","sourceNew":null,"sourceOld":"    public Token next() throws IOException {\n      if (inPhrase) {\n        inPhrase = false;\n        return new Token(\"phrase2\", savedStart, savedEnd);\n      } else\n        for (Token token = input.next(); token != null; token = input.next()) {\n          if (token.termText().equals(\"phrase\")) {\n            inPhrase = true;\n            savedStart = token.startOffset();\n            savedEnd = token.endOffset();\n            return new Token(\"phrase1\", savedStart, savedEnd);\n          } else if (!token.termText().equals(\"stop\"))\n            return token;\n        }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a"],"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e2cb543b41c145f33390f460ee743d6693c9c6c"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9a6ad8e299e8d7e15e32e68d75b73ed7d04756a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}