{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","commits":[{"id":"1eae735a9830ffc762967099f30deb101fd9a939","date":1366271714,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","pathOld":"/dev/null","sourceNew":"  public void testEmptyChildFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    w.commit();\n    int num = atLeast(10); // produce a segment that doesn't have a value in the docType field\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46f1d1837f7a657753c2da5c8f48ff95910eb8cb","date":1366301446,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","sourceNew":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); // produce a segment that doesn't have a value in the docType field\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyChildFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    \n    w.commit();\n    int num = atLeast(10); // produce a segment that doesn't have a value in the docType field\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161","date":1378462032,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","sourceNew":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); // produce a segment that doesn't have a value in the docType field\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); // produce a segment that doesn't have a value in the docType field\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","sourceNew":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); // produce a segment that doesn't have a value in the docType field\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); // produce a segment that doesn't have a value in the docType field\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","sourceNew":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); // produce a segment that doesn't have a value in the docType field\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.shutdown();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); // produce a segment that doesn't have a value in the docType field\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2fb55c0777755badd3b46d8140f3d4301febed","date":1398881584,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","sourceNew":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); // produce a segment that doesn't have a value in the docType field\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.shutdown();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); // produce a segment that doesn't have a value in the docType field\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.shutdown();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","sourceNew":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); // produce a segment that doesn't have a value in the docType field\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); // produce a segment that doesn't have a value in the docType field\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.shutdown();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b012914a8110b2ff1d075ed1ef72aa57084d4897","date":1414685177,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","sourceNew":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); // produce a segment that doesn't have a value in the docType field\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); // produce a segment that doesn't have a value in the docType field\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","sourceNew":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); // produce a segment that doesn't have a value in the docType field\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); // produce a segment that doesn't have a value in the docType field\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery fullQuery = new BooleanQuery();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery, c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b3915945926c0bf7def01b0c504977709d3aed3","date":1436197708,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","sourceNew":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); // produce a segment that doesn't have a value in the docType field\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); // produce a segment that doesn't have a value in the docType field\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67f37df79147ed4dd608300c2336c2979db98be","date":1436271524,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","sourceNew":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    int num = atLeast(10); // produce a segment that doesn't have a value in the docType field\n    for (int i = 0; i < num; i++) {\n      docs.clear();\n      docs.add(makeJob(\"java\", 2007));\n      w.addDocuments(docs);\n    }\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    assertTrue(r.leaves().size() > 1);\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","sourceNew":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","sourceNew":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    StoredDocument childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","sourceNew":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w, random().nextBoolean());\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a8a6e8618a812308bce0a978e52ca5c453a112","date":1457444484,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","sourceNew":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","sourceNew":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","sourceNew":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n    \n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d9452e13e015fa1187b0b1bed1a1d08b9c96241","date":1485723373,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","sourceNew":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    TopDocs topDocs = s.search(fullQuery.build(), 2);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(asSet(\"Lisa\", \"Frank\"),\n        asSet(s.doc(topDocs.scoreDocs[0].doc).get(\"name\"), s.doc(topDocs.scoreDocs[1].doc).get(\"name\")));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[1].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","sourceNew":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    TopDocs topDocs = s.search(fullQuery.build(), 2);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(asSet(\"Lisa\", \"Frank\"),\n        asSet(s.doc(topDocs.scoreDocs[0].doc).get(\"name\"), s.doc(topDocs.scoreDocs[1].doc).get(\"name\")));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[1].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 1, true, true);\n    s.search(fullQuery.build(), c);\n    TopGroups<Integer> results = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    assertFalse(Float.isNaN(results.maxScore));\n    assertEquals(1, results.totalGroupedHitCount);\n    assertEquals(1, results.groups.length);\n    final GroupDocs<Integer> group = results.groups[0];\n    Document childDoc = s.doc(group.scoreDocs[0].doc);\n    assertEquals(\"java\", childDoc.get(\"skill\"));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Lisa\", parentDoc.get(\"name\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testEmptyChildFilter().mjava","sourceNew":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    TopDocs topDocs = s.search(fullQuery.build(), 2);\n    assertEquals(2, topDocs.totalHits.value);\n    assertEquals(asSet(\"Lisa\", \"Frank\"),\n        asSet(s.doc(topDocs.scoreDocs[0].doc).get(\"name\"), s.doc(topDocs.scoreDocs[1].doc).get(\"name\")));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits.value);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[1].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits.value);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testEmptyChildFilter() throws Exception {\n    final Directory dir = newDirectory();\n    final IndexWriterConfig config = new IndexWriterConfig(new MockAnalyzer(random()));\n    config.setMergePolicy(NoMergePolicy.INSTANCE);\n    // we don't want to merge - since we rely on certain segment setup\n    final IndexWriter w = new IndexWriter(dir, config);\n\n    final List<Document> docs = new ArrayList<>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n    w.commit();\n\n    IndexReader r = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher s = newSearcher(r);\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    BooleanQuery.Builder fullQuery = new BooleanQuery.Builder();\n    fullQuery.add(new BooleanClause(childJoinQuery, Occur.MUST));\n    fullQuery.add(new BooleanClause(new MatchAllDocsQuery(), Occur.MUST));\n    TopDocs topDocs = s.search(fullQuery.build(), 2);\n    assertEquals(2, topDocs.totalHits);\n    assertEquals(asSet(\"Lisa\", \"Frank\"),\n        asSet(s.doc(topDocs.scoreDocs[0].doc).get(\"name\"), s.doc(topDocs.scoreDocs[1].doc).get(\"name\")));\n\n    ParentChildrenBlockJoinQuery childrenQuery =\n        new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[0].doc);\n    TopDocs matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    childrenQuery = new ParentChildrenBlockJoinQuery(parentsFilter, childQuery.build(), topDocs.scoreDocs[1].doc);\n    matchingChildren = s.search(childrenQuery, 1);\n    assertEquals(1, matchingChildren.totalHits);\n    assertEquals(\"java\", s.doc(matchingChildren.scoreDocs[0].doc).get(\"skill\"));\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a67f37df79147ed4dd608300c2336c2979db98be":["4b3915945926c0bf7def01b0c504977709d3aed3"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"37a8a6e8618a812308bce0a978e52ca5c453a112":["2a1862266772deb28cdcb7d996b64d2177022687"],"770342641f7b505eaa8dccdc666158bff2419109":["a67f37df79147ed4dd608300c2336c2979db98be"],"4b3915945926c0bf7def01b0c504977709d3aed3":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["37a8a6e8618a812308bce0a978e52ca5c453a112","0e7bc21595222ae4f75509300fbb7726691f387f"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"46f1d1837f7a657753c2da5c8f48ff95910eb8cb":["1eae735a9830ffc762967099f30deb101fd9a939"],"2a1862266772deb28cdcb7d996b64d2177022687":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["37a8a6e8618a812308bce0a978e52ca5c453a112"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161":["46f1d1837f7a657753c2da5c8f48ff95910eb8cb"],"1eae735a9830ffc762967099f30deb101fd9a939":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a67f37df79147ed4dd608300c2336c2979db98be":["770342641f7b505eaa8dccdc666158bff2419109"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"37a8a6e8618a812308bce0a978e52ca5c453a112":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0e7bc21595222ae4f75509300fbb7726691f387f"],"4b3915945926c0bf7def01b0c504977709d3aed3":["a67f37df79147ed4dd608300c2336c2979db98be"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"770342641f7b505eaa8dccdc666158bff2419109":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["4b3915945926c0bf7def01b0c504977709d3aed3"],"46f1d1837f7a657753c2da5c8f48ff95910eb8cb":["49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161"],"2a1862266772deb28cdcb7d996b64d2177022687":["37a8a6e8618a812308bce0a978e52ca5c453a112"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1eae735a9830ffc762967099f30deb101fd9a939"],"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"1eae735a9830ffc762967099f30deb101fd9a939":["46f1d1837f7a657753c2da5c8f48ff95910eb8cb"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","83788ad129a5154d5c6562c4e8ce3db48793aada"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["2a1862266772deb28cdcb7d996b64d2177022687"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}