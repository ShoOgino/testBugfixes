{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrQuery#addOrUpdateSort(SortClause).mjava","commits":[{"id":"61fdf4102fdaf9d9a4be5a7691913c78095e3931","date":1359238816,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrQuery#addOrUpdateSort(SortClause).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Updates or adds a single sort field specification to the current sort\n   * information. If the sort field already exist in the sort information map,\n   * it's position is unchanged and the sort order is set; if it does not exist,\n   * it is appended at the end with the specified order..\n   *\n   * @return the modified SolrQuery object, for easy chaining\n   * @since 4.2\n   */\n  public SolrQuery addOrUpdateSort(SortClause sortClause) {\n    if (sortClauses != null) {\n      for (int index=0 ; index<sortClauses.size() ; index++) {\n        SortClause existing = sortClauses.get(index);\n        if (existing.getItem().equals(sortClause.getItem())) {\n          sortClauses.set(index, sortClause);\n          serializeSorts();\n          return this;\n        }\n      }\n    }\n    return addSort(sortClause);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrQuery#addOrUpdateSort(SortClause).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Updates or adds a single sort field specification to the current sort\n   * information. If the sort field already exist in the sort information map,\n   * it's position is unchanged and the sort order is set; if it does not exist,\n   * it is appended at the end with the specified order..\n   *\n   * @return the modified SolrQuery object, for easy chaining\n   * @since 4.2\n   */\n  public SolrQuery addOrUpdateSort(SortClause sortClause) {\n    if (sortClauses != null) {\n      for (int index=0 ; index<sortClauses.size() ; index++) {\n        SortClause existing = sortClauses.get(index);\n        if (existing.getItem().equals(sortClause.getItem())) {\n          sortClauses.set(index, sortClause);\n          serializeSorts();\n          return this;\n        }\n      }\n    }\n    return addSort(sortClause);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrQuery#addOrUpdateSort(SortClause).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrQuery#addOrUpdateSort(SortClause).mjava","sourceNew":"  /**\n   * Updates or adds a single sort field specification to the current sort\n   * information. If the sort field already exist in the sort information map,\n   * its position is unchanged and the sort order is set; if it does not exist,\n   * it is appended at the end with the specified order..\n   *\n   * @return the modified SolrQuery object, for easy chaining\n   * @since 4.2\n   */\n  public SolrQuery addOrUpdateSort(SortClause sortClause) {\n    if (sortClauses != null) {\n      for (int index=0 ; index<sortClauses.size() ; index++) {\n        SortClause existing = sortClauses.get(index);\n        if (existing.getItem().equals(sortClause.getItem())) {\n          sortClauses.set(index, sortClause);\n          serializeSorts();\n          return this;\n        }\n      }\n    }\n    return addSort(sortClause);\n  }\n\n","sourceOld":"  /**\n   * Updates or adds a single sort field specification to the current sort\n   * information. If the sort field already exist in the sort information map,\n   * it's position is unchanged and the sort order is set; if it does not exist,\n   * it is appended at the end with the specified order..\n   *\n   * @return the modified SolrQuery object, for easy chaining\n   * @since 4.2\n   */\n  public SolrQuery addOrUpdateSort(SortClause sortClause) {\n    if (sortClauses != null) {\n      for (int index=0 ; index<sortClauses.size() ; index++) {\n        SortClause existing = sortClauses.get(index);\n        if (existing.getItem().equals(sortClause.getItem())) {\n          sortClauses.set(index, sortClause);\n          serializeSorts();\n          return this;\n        }\n      }\n    }\n    return addSort(sortClause);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["61fdf4102fdaf9d9a4be5a7691913c78095e3931"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61fdf4102fdaf9d9a4be5a7691913c78095e3931"],"61fdf4102fdaf9d9a4be5a7691913c78095e3931":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd45d4a2ee01a1932d33eec42f5272c2402da679","61fdf4102fdaf9d9a4be5a7691913c78095e3931"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"61fdf4102fdaf9d9a4be5a7691913c78095e3931":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}