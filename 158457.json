{"path":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    Fields tfv = reader.getTermVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.getUniqueFieldCount() > 0);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    TermFreqVector [] tfv = reader.getTermFreqVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.length > 0);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","date":1323050351,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir);\n    Fields tfv = reader.getTermVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.getUniqueFieldCount() > 0);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    Fields tfv = reader.getTermVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.getUniqueFieldCount() > 0);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir);\n    Fields tfv = reader.getTermVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.getUniqueFieldCount() > 0);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    Fields tfv = reader.getTermVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.getUniqueFieldCount() > 0);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir);\n    Fields tfv = reader.getTermVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.getUniqueFieldCount() > 0);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir, true);\n    Fields tfv = reader.getTermVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.getUniqueFieldCount() > 0);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir);\n    InvertedFields tfv = reader.getTermVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.getUniqueFieldCount() > 0);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir);\n    Fields tfv = reader.getTermVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.getUniqueFieldCount() > 0);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir);\n    Fields tfv = reader.getTermVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.getUniqueFieldCount() > 0);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir);\n    InvertedFields tfv = reader.getTermVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.getUniqueFieldCount() > 0);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdb5e42b0cecd8dfb27767a02ada71899bf17917","date":1334100099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir);\n    Fields tfv = reader.getTermVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.size() > 0);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir);\n    Fields tfv = reader.getTermVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.getUniqueFieldCount() > 0);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir);\n    Fields tfv = reader.getTermVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.size() > 0);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir);\n    Fields tfv = reader.getTermVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.getUniqueFieldCount() > 0);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testIndexWriterSettings().mjava","sourceNew":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir);\n    Fields tfv = reader.getTermVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.size() > 0);\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Test that IndexWriter settings stick.\n   */\n  public void testIndexWriterSettings() throws Exception {\n    // 1. alg definition (required in every \"logic\" test)\n    String algLines[] = {\n        \"# ----- properties \",\n        \"content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource\",\n        \"docs.file=\" + getReuters20LinesFile(),\n        \"content.source.log.step=3\",\n        \"ram.flush.mb=-1\",\n        \"max.buffered=2\",\n        \"compound=cmpnd:true:false\",\n        \"doc.term.vector=vector:false:true\",\n        \"content.source.forever=false\",\n        \"directory=RAMDirectory\",\n        \"doc.stored=false\",\n        \"merge.factor=3\",\n        \"doc.tokenized=false\",\n        \"debug.level=1\",\n        \"# ----- alg \",\n        \"{ \\\"Rounds\\\"\",\n        \"  ResetSystemErase\",\n        \"  CreateIndex\",\n        \"  { \\\"AddDocs\\\"  AddDoc > : * \",\n        \"  NewRound\",\n        \"} : 2\",\n    };\n\n    // 2. execute the algorithm  (required in every \"logic\" test)\n    Benchmark benchmark = execBenchmark(algLines);\n    final IndexWriter writer = benchmark.getRunData().getIndexWriter();\n    assertEquals(2, writer.getConfig().getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DISABLE_AUTO_FLUSH, (int) writer.getConfig().getRAMBufferSizeMB());\n    assertEquals(3, ((LogMergePolicy) writer.getConfig().getMergePolicy()).getMergeFactor());\n    assertFalse(((LogMergePolicy) writer.getConfig().getMergePolicy()).getUseCompoundFile());\n    writer.close();\n    Directory dir = benchmark.getRunData().getDirectory();\n    IndexReader reader = IndexReader.open(dir);\n    Fields tfv = reader.getTermVectors(0);\n    assertNotNull(tfv);\n    assertTrue(tfv.size() > 0);\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"5a238fc456663f685a9db1ed8d680e348bb45171":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["3cc749c053615f5871f3b95715fe292f34e70a53","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3cc749c053615f5871f3b95715fe292f34e70a53":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["3cc749c053615f5871f3b95715fe292f34e70a53"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["3cc749c053615f5871f3b95715fe292f34e70a53","9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["5a238fc456663f685a9db1ed8d680e348bb45171","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","3cc749c053615f5871f3b95715fe292f34e70a53","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","5a238fc456663f685a9db1ed8d680e348bb45171"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","5a238fc456663f685a9db1ed8d680e348bb45171","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}