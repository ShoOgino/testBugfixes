{"path":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#opt(Collection[ScorerSupplier],int,ScoreMode,long).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#opt(Collection[ScorerSupplier],int,ScoreMode,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#opt(Collection[ScorerSupplier],int,boolean,long).mjava","sourceNew":"  private Scorer opt(Collection<ScorerSupplier> optional, int minShouldMatch,\n      ScoreMode scoreMode, long leadCost) throws IOException {\n    if (optional.size() == 1) {\n      return optional.iterator().next().get(leadCost);\n    } else {\n      final List<Scorer> optionalScorers = new ArrayList<>();\n      for (ScorerSupplier scorer : optional) {\n        optionalScorers.add(scorer.get(leadCost));\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(weight, optionalScorers, minShouldMatch);\n      } else if (scoreMode == ScoreMode.TOP_SCORES) {\n        return new WANDScorer(weight, optionalScorers);\n      } else {\n        return new DisjunctionSumScorer(weight, optionalScorers, scoreMode.needsScores());\n      }\n    }\n  }\n\n","sourceOld":"  private Scorer opt(Collection<ScorerSupplier> optional, int minShouldMatch,\n      boolean needsScores, long leadCost) throws IOException {\n    if (optional.size() == 1) {\n      return optional.iterator().next().get(leadCost);\n    } else {\n      final List<Scorer> optionalScorers = new ArrayList<>();\n      for (ScorerSupplier scorer : optional) {\n        optionalScorers.add(scorer.get(leadCost));\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(weight, optionalScorers, minShouldMatch);\n      } else {\n        return new DisjunctionSumScorer(weight, optionalScorers, needsScores);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#opt(Collection[ScorerSupplier],int,ScoreMode,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#opt(Collection[ScorerSupplier],int,boolean,long).mjava","sourceNew":"  private Scorer opt(Collection<ScorerSupplier> optional, int minShouldMatch,\n      ScoreMode scoreMode, long leadCost) throws IOException {\n    if (optional.size() == 1) {\n      return optional.iterator().next().get(leadCost);\n    } else {\n      final List<Scorer> optionalScorers = new ArrayList<>();\n      for (ScorerSupplier scorer : optional) {\n        optionalScorers.add(scorer.get(leadCost));\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(weight, optionalScorers, minShouldMatch);\n      } else if (scoreMode == ScoreMode.TOP_SCORES) {\n        return new WANDScorer(weight, optionalScorers);\n      } else {\n        return new DisjunctionSumScorer(weight, optionalScorers, scoreMode.needsScores());\n      }\n    }\n  }\n\n","sourceOld":"  private Scorer opt(Collection<ScorerSupplier> optional, int minShouldMatch,\n      boolean needsScores, long leadCost) throws IOException {\n    if (optional.size() == 1) {\n      return optional.iterator().next().get(leadCost);\n    } else {\n      final List<Scorer> optionalScorers = new ArrayList<>();\n      for (ScorerSupplier scorer : optional) {\n        optionalScorers.add(scorer.get(leadCost));\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(weight, optionalScorers, minShouldMatch);\n      } else {\n        return new DisjunctionSumScorer(weight, optionalScorers, needsScores);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b559eeae2a2a767f75666f9b692659cfe1bf631","date":1533724482,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#opt(Collection[ScorerSupplier],int,ScoreMode,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Boolean2ScorerSupplier#opt(Collection[ScorerSupplier],int,ScoreMode,long).mjava","sourceNew":"  private Scorer opt(Collection<ScorerSupplier> optional, int minShouldMatch,\n      ScoreMode scoreMode, long leadCost) throws IOException {\n    if (optional.size() == 1) {\n      return optional.iterator().next().get(leadCost);\n    } else {\n      final List<Scorer> optionalScorers = new ArrayList<>();\n      for (ScorerSupplier scorer : optional) {\n        optionalScorers.add(scorer.get(leadCost));\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(weight, optionalScorers, minShouldMatch);\n      } else if (scoreMode == ScoreMode.TOP_SCORES) {\n        return new WANDScorer(weight, optionalScorers);\n      } else {\n        return new DisjunctionSumScorer(weight, optionalScorers, scoreMode);\n      }\n    }\n  }\n\n","sourceOld":"  private Scorer opt(Collection<ScorerSupplier> optional, int minShouldMatch,\n      ScoreMode scoreMode, long leadCost) throws IOException {\n    if (optional.size() == 1) {\n      return optional.iterator().next().get(leadCost);\n    } else {\n      final List<Scorer> optionalScorers = new ArrayList<>();\n      for (ScorerSupplier scorer : optional) {\n        optionalScorers.add(scorer.get(leadCost));\n      }\n      if (minShouldMatch > 1) {\n        return new MinShouldMatchSumScorer(weight, optionalScorers, minShouldMatch);\n      } else if (scoreMode == ScoreMode.TOP_SCORES) {\n        return new WANDScorer(weight, optionalScorers);\n      } else {\n        return new DisjunctionSumScorer(weight, optionalScorers, scoreMode.needsScores());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b559eeae2a2a767f75666f9b692659cfe1bf631":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b559eeae2a2a767f75666f9b692659cfe1bf631"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"5b559eeae2a2a767f75666f9b692659cfe1bf631":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["5b559eeae2a2a767f75666f9b692659cfe1bf631"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}