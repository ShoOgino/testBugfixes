{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSuggestions(Suggestion.Ctx).mjava","commits":[{"id":"427edb17549d4bb82462a16eec4ee0533d12d5b7","date":1533006754,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSuggestions(Suggestion.Ctx).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation == null) return;\n    if (ctx.violation.replicaCountDelta < 0 && !ctx.violation.getViolatingReplicas().isEmpty()) {\n\n      Comparator<Row> rowComparator = Comparator.comparing(r -> ((Double) r.getVal(ImplicitSnitch.DISK, 0d)));\n      List<Row> matchingNodes = ctx.session.matrix.stream().filter(\n          row -> ctx.violation.getViolatingReplicas()\n              .stream()\n              .anyMatch(p -> row.node.equals(p.replicaInfo.getNode())))\n          .sorted(rowComparator)\n          .collect(Collectors.toList());\n\n\n      for (Row node : matchingNodes) {\n        //lets try to start moving the smallest cores off of the node\n        ArrayList<ReplicaInfo> replicas = new ArrayList<>();\n        node.forEachReplica(replicas::add);\n        replicas.sort((r1, r2) -> {\n          Long s1 = Clause.parseLong(CORE_IDX.tagName, r1.getVariables().get(CORE_IDX.tagName));\n          Long s2 = Clause.parseLong(CORE_IDX.tagName, r2.getVariables().get(CORE_IDX.tagName));\n          if (s1 != null && s2 != null) return s1.compareTo(s2);\n          return 0;\n        });\n        double currentDelta = ctx.violation.getClause().tag.delta(node.getVal(ImplicitSnitch.DISK));\n        for (ReplicaInfo replica : replicas) {\n          if (currentDelta < 1) break;\n          if (replica.getVariables().get(CORE_IDX.tagName) == null) continue;\n          Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n              .hint(Suggester.Hint.COLL_SHARD, new Pair<>(replica.getCollection(), replica.getShard()))\n              .hint(Suggester.Hint.SRC_NODE, node.node)\n              .forceOperation(true);\n          if (ctx.addSuggestion(suggester) == null) break;\n          currentDelta -= Clause.parseLong(CORE_IDX.tagName, replica.getVariable(CORE_IDX.tagName));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee5183ac042828ef74f90f0874eaba7daeb409bd","date":1536546264,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSuggestions(Suggestion.Ctx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSuggestions(Suggestion.Ctx).mjava","sourceNew":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation == null) return;\n    if (ctx.violation.replicaCountDelta > 0) {\n      List<Row> matchingNodes = ctx.session.matrix.stream().filter(\n          row -> ctx.violation.getViolatingReplicas()\n              .stream()\n              .anyMatch(p -> row.node.equals(p.replicaInfo.getNode())))\n          .sorted(Comparator.comparing(r -> ((Double) r.getVal(ImplicitSnitch.DISK, 0d))))\n          .collect(Collectors.toList());\n\n\n      for (Row node : matchingNodes) {\n        //lets try to start moving the smallest cores off of the node\n        ArrayList<ReplicaInfo> replicas = new ArrayList<>();\n        node.forEachReplica(replicas::add);\n        replicas.sort((r1, r2) -> {\n          Long s1 = Clause.parseLong(CORE_IDX.tagName, r1.getVariables().get(CORE_IDX.tagName));\n          Long s2 = Clause.parseLong(CORE_IDX.tagName, r2.getVariables().get(CORE_IDX.tagName));\n          if (s1 != null && s2 != null) return s1.compareTo(s2);\n          return 0;\n        });\n        double currentDelta = ctx.violation.getClause().tag.delta(node.getVal(ImplicitSnitch.DISK));\n        for (ReplicaInfo replica : replicas) {\n          if (currentDelta < 1) break;\n          if (replica.getVariables().get(CORE_IDX.tagName) == null) continue;\n          Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n              .hint(Hint.COLL_SHARD, new Pair<>(replica.getCollection(), replica.getShard()))\n              .hint(Hint.SRC_NODE, node.node)\n              .forceOperation(true);\n          if (ctx.addSuggestion(suggester) == null) break;\n          currentDelta -= Clause.parseLong(CORE_IDX.tagName, replica.getVariable(CORE_IDX.tagName));\n        }\n      }\n    } else if (ctx.violation.replicaCountDelta < 0) {\n      suggestNegativeViolations(ctx, shards -> getSortedShards(ctx,shards));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation == null) return;\n    if (ctx.violation.replicaCountDelta < 0 && !ctx.violation.getViolatingReplicas().isEmpty()) {\n\n      Comparator<Row> rowComparator = Comparator.comparing(r -> ((Double) r.getVal(ImplicitSnitch.DISK, 0d)));\n      List<Row> matchingNodes = ctx.session.matrix.stream().filter(\n          row -> ctx.violation.getViolatingReplicas()\n              .stream()\n              .anyMatch(p -> row.node.equals(p.replicaInfo.getNode())))\n          .sorted(rowComparator)\n          .collect(Collectors.toList());\n\n\n      for (Row node : matchingNodes) {\n        //lets try to start moving the smallest cores off of the node\n        ArrayList<ReplicaInfo> replicas = new ArrayList<>();\n        node.forEachReplica(replicas::add);\n        replicas.sort((r1, r2) -> {\n          Long s1 = Clause.parseLong(CORE_IDX.tagName, r1.getVariables().get(CORE_IDX.tagName));\n          Long s2 = Clause.parseLong(CORE_IDX.tagName, r2.getVariables().get(CORE_IDX.tagName));\n          if (s1 != null && s2 != null) return s1.compareTo(s2);\n          return 0;\n        });\n        double currentDelta = ctx.violation.getClause().tag.delta(node.getVal(ImplicitSnitch.DISK));\n        for (ReplicaInfo replica : replicas) {\n          if (currentDelta < 1) break;\n          if (replica.getVariables().get(CORE_IDX.tagName) == null) continue;\n          Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n              .hint(Suggester.Hint.COLL_SHARD, new Pair<>(replica.getCollection(), replica.getShard()))\n              .hint(Suggester.Hint.SRC_NODE, node.node)\n              .forceOperation(true);\n          if (ctx.addSuggestion(suggester) == null) break;\n          currentDelta -= Clause.parseLong(CORE_IDX.tagName, replica.getVariable(CORE_IDX.tagName));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6428b274f6593f368c4f838379620e7f5d196d65","date":1537799661,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSuggestions(Suggestion.Ctx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSuggestions(Suggestion.Ctx).mjava","sourceNew":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation == null) return;\n    if (ctx.violation.replicaCountDelta > 0) {\n      List<Row> matchingNodes = ctx.session.matrix.stream().filter(\n          row -> ctx.violation.getViolatingReplicas()\n              .stream()\n              .anyMatch(p -> row.node.equals(p.replicaInfo.getNode())))\n          .sorted(Comparator.comparing(r -> ((Double) r.getVal(ImplicitSnitch.DISK, 0d))))\n          .collect(Collectors.toList());\n\n\n      for (Row node : matchingNodes) {\n        //lets try to start moving the smallest cores off of the node\n        ArrayList<ReplicaInfo> replicas = new ArrayList<>();\n        node.forEachReplica(replicas::add);\n        replicas.sort((r1, r2) -> {\n          Long s1 = Clause.parseLong(CORE_IDX.tagName, r1.getVariables().get(CORE_IDX.tagName));\n          Long s2 = Clause.parseLong(CORE_IDX.tagName, r2.getVariables().get(CORE_IDX.tagName));\n          if (s1 != null && s2 != null) return s1.compareTo(s2);\n          return 0;\n        });\n        double currentDelta = ctx.violation.getClause().tag.delta(node.getVal(ImplicitSnitch.DISK));\n        for (ReplicaInfo replica : replicas) {\n          if (currentDelta < 1) break;\n          if (replica.getVariables().get(CORE_IDX.tagName) == null) continue;\n          Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n              .hint(Hint.COLL_SHARD, new Pair<>(replica.getCollection(), replica.getShard()))\n              .hint(Hint.SRC_NODE, node.node)\n              .forceOperation(true);\n          if (ctx.addSuggestion(suggester) == null) break;\n          currentDelta -= Clause.parseLong(CORE_IDX.tagName, replica.getVariable(CORE_IDX.tagName));\n        }\n      }\n    } else if (ctx.violation.replicaCountDelta < 0) {\n      suggestNegativeViolations(ctx, shards -> getSortedShards(ctx.session.matrix, shards, ctx.violation.coll));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation == null) return;\n    if (ctx.violation.replicaCountDelta > 0) {\n      List<Row> matchingNodes = ctx.session.matrix.stream().filter(\n          row -> ctx.violation.getViolatingReplicas()\n              .stream()\n              .anyMatch(p -> row.node.equals(p.replicaInfo.getNode())))\n          .sorted(Comparator.comparing(r -> ((Double) r.getVal(ImplicitSnitch.DISK, 0d))))\n          .collect(Collectors.toList());\n\n\n      for (Row node : matchingNodes) {\n        //lets try to start moving the smallest cores off of the node\n        ArrayList<ReplicaInfo> replicas = new ArrayList<>();\n        node.forEachReplica(replicas::add);\n        replicas.sort((r1, r2) -> {\n          Long s1 = Clause.parseLong(CORE_IDX.tagName, r1.getVariables().get(CORE_IDX.tagName));\n          Long s2 = Clause.parseLong(CORE_IDX.tagName, r2.getVariables().get(CORE_IDX.tagName));\n          if (s1 != null && s2 != null) return s1.compareTo(s2);\n          return 0;\n        });\n        double currentDelta = ctx.violation.getClause().tag.delta(node.getVal(ImplicitSnitch.DISK));\n        for (ReplicaInfo replica : replicas) {\n          if (currentDelta < 1) break;\n          if (replica.getVariables().get(CORE_IDX.tagName) == null) continue;\n          Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n              .hint(Hint.COLL_SHARD, new Pair<>(replica.getCollection(), replica.getShard()))\n              .hint(Hint.SRC_NODE, node.node)\n              .forceOperation(true);\n          if (ctx.addSuggestion(suggester) == null) break;\n          currentDelta -= Clause.parseLong(CORE_IDX.tagName, replica.getVariable(CORE_IDX.tagName));\n        }\n      }\n    } else if (ctx.violation.replicaCountDelta < 0) {\n      suggestNegativeViolations(ctx, shards -> getSortedShards(ctx,shards));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c73f63a2a7b9f4a6b21e8723912461026968d87e","date":1539669411,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSuggestions(Suggestion.Ctx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSuggestions(Suggestion.Ctx).mjava","sourceNew":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation == null) return;\n    if (ctx.violation.replicaCountDelta > 0) {\n      List<Row> matchingNodes = ctx.session.matrix.stream().filter(\n          row -> ctx.violation.getViolatingReplicas()\n              .stream()\n              .anyMatch(p -> row.node.equals(p.replicaInfo.getNode())))\n          .sorted(Comparator.comparing(r -> ((Double) r.getVal(DISK, 0d))))\n          .collect(Collectors.toList());\n\n\n      for (Row node : matchingNodes) {\n        //lets try to start moving the smallest cores off of the node\n        ArrayList<ReplicaInfo> replicas = new ArrayList<>();\n        node.forEachReplica(replicas::add);\n        replicas.sort((r1, r2) -> {\n          Long s1 = Clause.parseLong(CORE_IDX.tagName, r1.getVariables().get(CORE_IDX.tagName));\n          Long s2 = Clause.parseLong(CORE_IDX.tagName, r2.getVariables().get(CORE_IDX.tagName));\n          if (s1 != null && s2 != null) return s1.compareTo(s2);\n          return 0;\n        });\n        double currentDelta = ctx.violation.getClause().tag.delta(node.getVal(DISK));\n        for (ReplicaInfo replica : replicas) {\n          if (currentDelta < 1) break;\n          if (replica.getVariables().get(CORE_IDX.tagName) == null) continue;\n          Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n              .hint(Hint.COLL_SHARD, new Pair<>(replica.getCollection(), replica.getShard()))\n              .hint(Hint.SRC_NODE, node.node)\n              .forceOperation(true);\n          if (ctx.addSuggestion(suggester) == null) break;\n          currentDelta -= Clause.parseLong(CORE_IDX.tagName, replica.getVariable(CORE_IDX.tagName));\n        }\n      }\n    } else if (ctx.violation.replicaCountDelta < 0) {\n      suggestNegativeViolations(ctx, shards -> getSortedShards(ctx.session.matrix, shards, ctx.violation.coll));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation == null) return;\n    if (ctx.violation.replicaCountDelta > 0) {\n      List<Row> matchingNodes = ctx.session.matrix.stream().filter(\n          row -> ctx.violation.getViolatingReplicas()\n              .stream()\n              .anyMatch(p -> row.node.equals(p.replicaInfo.getNode())))\n          .sorted(Comparator.comparing(r -> ((Double) r.getVal(ImplicitSnitch.DISK, 0d))))\n          .collect(Collectors.toList());\n\n\n      for (Row node : matchingNodes) {\n        //lets try to start moving the smallest cores off of the node\n        ArrayList<ReplicaInfo> replicas = new ArrayList<>();\n        node.forEachReplica(replicas::add);\n        replicas.sort((r1, r2) -> {\n          Long s1 = Clause.parseLong(CORE_IDX.tagName, r1.getVariables().get(CORE_IDX.tagName));\n          Long s2 = Clause.parseLong(CORE_IDX.tagName, r2.getVariables().get(CORE_IDX.tagName));\n          if (s1 != null && s2 != null) return s1.compareTo(s2);\n          return 0;\n        });\n        double currentDelta = ctx.violation.getClause().tag.delta(node.getVal(ImplicitSnitch.DISK));\n        for (ReplicaInfo replica : replicas) {\n          if (currentDelta < 1) break;\n          if (replica.getVariables().get(CORE_IDX.tagName) == null) continue;\n          Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n              .hint(Hint.COLL_SHARD, new Pair<>(replica.getCollection(), replica.getShard()))\n              .hint(Hint.SRC_NODE, node.node)\n              .forceOperation(true);\n          if (ctx.addSuggestion(suggester) == null) break;\n          currentDelta -= Clause.parseLong(CORE_IDX.tagName, replica.getVariable(CORE_IDX.tagName));\n        }\n      }\n    } else if (ctx.violation.replicaCountDelta < 0) {\n      suggestNegativeViolations(ctx, shards -> getSortedShards(ctx.session.matrix, shards, ctx.violation.coll));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSuggestions(Suggestion.Ctx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSuggestions(Suggestion.Ctx).mjava","sourceNew":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation == null) return;\n    if (ctx.violation.replicaCountDelta > 0) {\n      List<Row> matchingNodes = ctx.session.matrix.stream().filter(\n          row -> ctx.violation.getViolatingReplicas()\n              .stream()\n              .anyMatch(p -> row.node.equals(p.replicaInfo.getNode())))\n          .sorted(Comparator.comparing(r -> ((Double) r.getVal(DISK, 0d))))\n          .collect(Collectors.toList());\n\n\n      for (Row node : matchingNodes) {\n        //lets try to start moving the smallest cores off of the node\n        ArrayList<ReplicaInfo> replicas = new ArrayList<>();\n        node.forEachReplica(replicas::add);\n        replicas.sort((r1, r2) -> {\n          Long s1 = Clause.parseLong(CORE_IDX.tagName, r1.getVariables().get(CORE_IDX.tagName));\n          Long s2 = Clause.parseLong(CORE_IDX.tagName, r2.getVariables().get(CORE_IDX.tagName));\n          if (s1 != null && s2 != null) return s1.compareTo(s2);\n          return 0;\n        });\n        double currentDelta = ctx.violation.getClause().tag.delta(node.getVal(DISK));\n        for (ReplicaInfo replica : replicas) {\n          if (currentDelta < 1) break;\n          if (replica.getVariables().get(CORE_IDX.tagName) == null) continue;\n          Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n              .hint(Hint.COLL_SHARD, new Pair<>(replica.getCollection(), replica.getShard()))\n              .hint(Hint.SRC_NODE, node.node)\n              .forceOperation(true);\n          ctx.addSuggestion(suggester);\n          currentDelta -= Clause.parseLong(CORE_IDX.tagName, replica.getVariable(CORE_IDX.tagName));\n        }\n      }\n    } else if (ctx.violation.replicaCountDelta < 0) {\n      suggestNegativeViolations(ctx, shards -> getSortedShards(ctx.session.matrix, shards, ctx.violation.coll));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation == null) return;\n    if (ctx.violation.replicaCountDelta > 0) {\n      List<Row> matchingNodes = ctx.session.matrix.stream().filter(\n          row -> ctx.violation.getViolatingReplicas()\n              .stream()\n              .anyMatch(p -> row.node.equals(p.replicaInfo.getNode())))\n          .sorted(Comparator.comparing(r -> ((Double) r.getVal(DISK, 0d))))\n          .collect(Collectors.toList());\n\n\n      for (Row node : matchingNodes) {\n        //lets try to start moving the smallest cores off of the node\n        ArrayList<ReplicaInfo> replicas = new ArrayList<>();\n        node.forEachReplica(replicas::add);\n        replicas.sort((r1, r2) -> {\n          Long s1 = Clause.parseLong(CORE_IDX.tagName, r1.getVariables().get(CORE_IDX.tagName));\n          Long s2 = Clause.parseLong(CORE_IDX.tagName, r2.getVariables().get(CORE_IDX.tagName));\n          if (s1 != null && s2 != null) return s1.compareTo(s2);\n          return 0;\n        });\n        double currentDelta = ctx.violation.getClause().tag.delta(node.getVal(DISK));\n        for (ReplicaInfo replica : replicas) {\n          if (currentDelta < 1) break;\n          if (replica.getVariables().get(CORE_IDX.tagName) == null) continue;\n          Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n              .hint(Hint.COLL_SHARD, new Pair<>(replica.getCollection(), replica.getShard()))\n              .hint(Hint.SRC_NODE, node.node)\n              .forceOperation(true);\n          if (ctx.addSuggestion(suggester) == null) break;\n          currentDelta -= Clause.parseLong(CORE_IDX.tagName, replica.getVariable(CORE_IDX.tagName));\n        }\n      }\n    } else if (ctx.violation.replicaCountDelta < 0) {\n      suggestNegativeViolations(ctx, shards -> getSortedShards(ctx.session.matrix, shards, ctx.violation.coll));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSuggestions(Suggestion.Ctx).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSuggestions(Suggestion.Ctx).mjava","sourceNew":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation == null) return;\n    if (ctx.violation.replicaCountDelta > 0) {\n      List<Row> matchingNodes = ctx.session.matrix.stream().filter(\n          row -> ctx.violation.getViolatingReplicas()\n              .stream()\n              .anyMatch(p -> row.node.equals(p.replicaInfo.getNodeName())))\n          .sorted(Comparator.comparing(r -> ((Double) r.getVal(DISK, 0d))))\n          .collect(Collectors.toList());\n\n\n      for (Row node : matchingNodes) {\n        //lets try to start moving the smallest cores off of the node\n        ArrayList<Replica> replicas = new ArrayList<>();\n        node.forEachReplica(replicas::add);\n        replicas.sort((r1, r2) -> {\n          Long s1 = Clause.parseLong(CORE_IDX.tagName, r1.getProperties().get(CORE_IDX.tagName));\n          Long s2 = Clause.parseLong(CORE_IDX.tagName, r2.getProperties().get(CORE_IDX.tagName));\n          if (s1 != null && s2 != null) return s1.compareTo(s2);\n          return 0;\n        });\n        double currentDelta = ctx.violation.getClause().tag.delta(node.getVal(DISK));\n        for (Replica replica : replicas) {\n          if (currentDelta < 1) break;\n          if (replica.getProperties().get(CORE_IDX.tagName) == null) continue;\n          Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n              .hint(Hint.COLL_SHARD, new Pair<>(replica.getCollection(), replica.getShard()))\n              .hint(Hint.SRC_NODE, node.node)\n              .forceOperation(true);\n          ctx.addSuggestion(suggester);\n          currentDelta -= Clause.parseLong(CORE_IDX.tagName, replica.get(CORE_IDX.tagName));\n        }\n      }\n    } else if (ctx.violation.replicaCountDelta < 0) {\n      suggestNegativeViolations(ctx, shards -> getSortedShards(ctx.session.matrix, shards, ctx.violation.coll));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation == null) return;\n    if (ctx.violation.replicaCountDelta > 0) {\n      List<Row> matchingNodes = ctx.session.matrix.stream().filter(\n          row -> ctx.violation.getViolatingReplicas()\n              .stream()\n              .anyMatch(p -> row.node.equals(p.replicaInfo.getNode())))\n          .sorted(Comparator.comparing(r -> ((Double) r.getVal(DISK, 0d))))\n          .collect(Collectors.toList());\n\n\n      for (Row node : matchingNodes) {\n        //lets try to start moving the smallest cores off of the node\n        ArrayList<ReplicaInfo> replicas = new ArrayList<>();\n        node.forEachReplica(replicas::add);\n        replicas.sort((r1, r2) -> {\n          Long s1 = Clause.parseLong(CORE_IDX.tagName, r1.getVariables().get(CORE_IDX.tagName));\n          Long s2 = Clause.parseLong(CORE_IDX.tagName, r2.getVariables().get(CORE_IDX.tagName));\n          if (s1 != null && s2 != null) return s1.compareTo(s2);\n          return 0;\n        });\n        double currentDelta = ctx.violation.getClause().tag.delta(node.getVal(DISK));\n        for (ReplicaInfo replica : replicas) {\n          if (currentDelta < 1) break;\n          if (replica.getVariables().get(CORE_IDX.tagName) == null) continue;\n          Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n              .hint(Hint.COLL_SHARD, new Pair<>(replica.getCollection(), replica.getShard()))\n              .hint(Hint.SRC_NODE, node.node)\n              .forceOperation(true);\n          ctx.addSuggestion(suggester);\n          currentDelta -= Clause.parseLong(CORE_IDX.tagName, replica.getVariable(CORE_IDX.tagName));\n        }\n      }\n    } else if (ctx.violation.replicaCountDelta < 0) {\n      suggestNegativeViolations(ctx, shards -> getSortedShards(ctx.session.matrix, shards, ctx.violation.coll));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/FreeDiskVariable#getSuggestions(Suggestion.Ctx).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void getSuggestions(Suggestion.Ctx ctx) {\n    if (ctx.violation == null) return;\n    if (ctx.violation.replicaCountDelta > 0) {\n      List<Row> matchingNodes = ctx.session.matrix.stream().filter(\n          row -> ctx.violation.getViolatingReplicas()\n              .stream()\n              .anyMatch(p -> row.node.equals(p.replicaInfo.getNodeName())))\n          .sorted(Comparator.comparing(r -> ((Double) r.getVal(DISK, 0d))))\n          .collect(Collectors.toList());\n\n\n      for (Row node : matchingNodes) {\n        //lets try to start moving the smallest cores off of the node\n        ArrayList<Replica> replicas = new ArrayList<>();\n        node.forEachReplica(replicas::add);\n        replicas.sort((r1, r2) -> {\n          Long s1 = Clause.parseLong(CORE_IDX.tagName, r1.getProperties().get(CORE_IDX.tagName));\n          Long s2 = Clause.parseLong(CORE_IDX.tagName, r2.getProperties().get(CORE_IDX.tagName));\n          if (s1 != null && s2 != null) return s1.compareTo(s2);\n          return 0;\n        });\n        double currentDelta = ctx.violation.getClause().tag.delta(node.getVal(DISK));\n        for (Replica replica : replicas) {\n          if (currentDelta < 1) break;\n          if (replica.getProperties().get(CORE_IDX.tagName) == null) continue;\n          Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)\n              .hint(Hint.COLL_SHARD, new Pair<>(replica.getCollection(), replica.getShard()))\n              .hint(Hint.SRC_NODE, node.node)\n              .forceOperation(true);\n          ctx.addSuggestion(suggester);\n          currentDelta -= Clause.parseLong(CORE_IDX.tagName, replica.get(CORE_IDX.tagName));\n        }\n      }\n    } else if (ctx.violation.replicaCountDelta < 0) {\n      suggestNegativeViolations(ctx, shards -> getSortedShards(ctx.session.matrix, shards, ctx.violation.coll));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["c73f63a2a7b9f4a6b21e8723912461026968d87e"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6428b274f6593f368c4f838379620e7f5d196d65":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"c73f63a2a7b9f4a6b21e8723912461026968d87e":["6428b274f6593f368c4f838379620e7f5d196d65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"427edb17549d4bb82462a16eec4ee0533d12d5b7":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["427edb17549d4bb82462a16eec4ee0533d12d5b7"],"6428b274f6593f368c4f838379620e7f5d196d65":["c73f63a2a7b9f4a6b21e8723912461026968d87e"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["6428b274f6593f368c4f838379620e7f5d196d65"],"c73f63a2a7b9f4a6b21e8723912461026968d87e":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}