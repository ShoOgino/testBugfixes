{"path":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#seek(List[String]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#seek(List[String]).mjava","pathOld":"solr/src/test-framework/org/apache/solr/CollectionTester[JSONTestUtil]#seek(List[String]).mjava","sourceNew":"  public boolean seek(List<String> seekPath) {\n    if (seekPath.size() == 0) return true;\n    String seg = seekPath.get(0);\n\n    if (seg.charAt(0)=='[') {\n      List listVal = asList();\n      if (listVal==null) return false;\n\n      int arrIdx = Integer.parseInt(seg.substring(1, seg.length()-1));\n\n      if (arrIdx >= listVal.size()) return false;\n\n      val = listVal.get(arrIdx);\n      pushPath(arrIdx);\n    } else {\n      Map<String,Object> mapVal = asMap();\n      if (mapVal==null) return false;\n\n      // use containsKey rather than get to handle null values\n      if (!mapVal.containsKey(seg)) return false;\n\n      val = mapVal.get(seg);\n      pushPath(seg);\n    }\n\n    // recurse after removing head of the path\n    return seek(seekPath.subList(1,seekPath.size()));\n  }\n\n","sourceOld":"  public boolean seek(List<String> seekPath) {\n    if (seekPath.size() == 0) return true;\n    String seg = seekPath.get(0);\n\n    if (seg.charAt(0)=='[') {\n      List listVal = asList();\n      if (listVal==null) return false;\n\n      int arrIdx = Integer.parseInt(seg.substring(1, seg.length()-1));\n\n      if (arrIdx >= listVal.size()) return false;\n\n      val = listVal.get(arrIdx);\n      pushPath(arrIdx);\n    } else {\n      Map<String,Object> mapVal = asMap();\n      if (mapVal==null) return false;\n\n      // use containsKey rather than get to handle null values\n      if (!mapVal.containsKey(seg)) return false;\n\n      val = mapVal.get(seg);\n      pushPath(seg);\n    }\n\n    // recurse after removing head of the path\n    return seek(seekPath.subList(1,seekPath.size()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#seek(List[String]).mjava","pathOld":"solr/src/test-framework/org/apache/solr/CollectionTester[JSONTestUtil]#seek(List[String]).mjava","sourceNew":"  public boolean seek(List<String> seekPath) {\n    if (seekPath.size() == 0) return true;\n    String seg = seekPath.get(0);\n\n    if (seg.charAt(0)=='[') {\n      List listVal = asList();\n      if (listVal==null) return false;\n\n      int arrIdx = Integer.parseInt(seg.substring(1, seg.length()-1));\n\n      if (arrIdx >= listVal.size()) return false;\n\n      val = listVal.get(arrIdx);\n      pushPath(arrIdx);\n    } else {\n      Map<String,Object> mapVal = asMap();\n      if (mapVal==null) return false;\n\n      // use containsKey rather than get to handle null values\n      if (!mapVal.containsKey(seg)) return false;\n\n      val = mapVal.get(seg);\n      pushPath(seg);\n    }\n\n    // recurse after removing head of the path\n    return seek(seekPath.subList(1,seekPath.size()));\n  }\n\n","sourceOld":"  public boolean seek(List<String> seekPath) {\n    if (seekPath.size() == 0) return true;\n    String seg = seekPath.get(0);\n\n    if (seg.charAt(0)=='[') {\n      List listVal = asList();\n      if (listVal==null) return false;\n\n      int arrIdx = Integer.parseInt(seg.substring(1, seg.length()-1));\n\n      if (arrIdx >= listVal.size()) return false;\n\n      val = listVal.get(arrIdx);\n      pushPath(arrIdx);\n    } else {\n      Map<String,Object> mapVal = asMap();\n      if (mapVal==null) return false;\n\n      // use containsKey rather than get to handle null values\n      if (!mapVal.containsKey(seg)) return false;\n\n      val = mapVal.get(seg);\n      pushPath(seg);\n    }\n\n    // recurse after removing head of the path\n    return seek(seekPath.subList(1,seekPath.size()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#seek(List[String]).mjava","pathOld":"solr/src/test-framework/org/apache/solr/CollectionTester[JSONTestUtil]#seek(List[String]).mjava","sourceNew":"  public boolean seek(List<String> seekPath) {\n    if (seekPath.size() == 0) return true;\n    String seg = seekPath.get(0);\n\n    if (seg.charAt(0)=='[') {\n      List listVal = asList();\n      if (listVal==null) return false;\n\n      int arrIdx = Integer.parseInt(seg.substring(1, seg.length()-1));\n\n      if (arrIdx >= listVal.size()) return false;\n\n      val = listVal.get(arrIdx);\n      pushPath(arrIdx);\n    } else {\n      Map<String,Object> mapVal = asMap();\n      if (mapVal==null) return false;\n\n      // use containsKey rather than get to handle null values\n      if (!mapVal.containsKey(seg)) return false;\n\n      val = mapVal.get(seg);\n      pushPath(seg);\n    }\n\n    // recurse after removing head of the path\n    return seek(seekPath.subList(1,seekPath.size()));\n  }\n\n","sourceOld":"  public boolean seek(List<String> seekPath) {\n    if (seekPath.size() == 0) return true;\n    String seg = seekPath.get(0);\n\n    if (seg.charAt(0)=='[') {\n      List listVal = asList();\n      if (listVal==null) return false;\n\n      int arrIdx = Integer.parseInt(seg.substring(1, seg.length()-1));\n\n      if (arrIdx >= listVal.size()) return false;\n\n      val = listVal.get(arrIdx);\n      pushPath(arrIdx);\n    } else {\n      Map<String,Object> mapVal = asMap();\n      if (mapVal==null) return false;\n\n      // use containsKey rather than get to handle null values\n      if (!mapVal.containsKey(seg)) return false;\n\n      val = mapVal.get(seg);\n      pushPath(seg);\n    }\n\n    // recurse after removing head of the path\n    return seek(seekPath.subList(1,seekPath.size()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6809a6d7924df2c864d6a5863944aff9dfeb372c","date":1591826750,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#seek(List[String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#seek(List[String]).mjava","sourceNew":"  public boolean seek(List<String> seekPath) {\n    if (seekPath.size() == 0) return true;\n    String seg = seekPath.get(0);\n\n    if (seg.charAt(0)=='[') {\n      @SuppressWarnings({\"rawtypes\"})\n      List listVal = asList();\n      if (listVal==null) return false;\n\n      int arrIdx = Integer.parseInt(seg.substring(1, seg.length()-1));\n\n      if (arrIdx >= listVal.size()) return false;\n\n      val = listVal.get(arrIdx);\n      pushPath(arrIdx);\n    } else {\n      Map<String,Object> mapVal = asMap();\n      if (mapVal==null) return false;\n\n      // use containsKey rather than get to handle null values\n      if (!mapVal.containsKey(seg)) return false;\n\n      val = mapVal.get(seg);\n      pushPath(seg);\n    }\n\n    // recurse after removing head of the path\n    return seek(seekPath.subList(1,seekPath.size()));\n  }\n\n","sourceOld":"  public boolean seek(List<String> seekPath) {\n    if (seekPath.size() == 0) return true;\n    String seg = seekPath.get(0);\n\n    if (seg.charAt(0)=='[') {\n      List listVal = asList();\n      if (listVal==null) return false;\n\n      int arrIdx = Integer.parseInt(seg.substring(1, seg.length()-1));\n\n      if (arrIdx >= listVal.size()) return false;\n\n      val = listVal.get(arrIdx);\n      pushPath(arrIdx);\n    } else {\n      Map<String,Object> mapVal = asMap();\n      if (mapVal==null) return false;\n\n      // use containsKey rather than get to handle null values\n      if (!mapVal.containsKey(seg)) return false;\n\n      val = mapVal.get(seg);\n      pushPath(seg);\n    }\n\n    // recurse after removing head of the path\n    return seek(seekPath.subList(1,seekPath.size()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6809a6d7924df2c864d6a5863944aff9dfeb372c":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6809a6d7924df2c864d6a5863944aff9dfeb372c"]},"commit2Childs":{"6809a6d7924df2c864d6a5863944aff9dfeb372c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["6809a6d7924df2c864d6a5863944aff9dfeb372c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}