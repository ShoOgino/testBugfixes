{"path":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator();\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copy(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    Bits liveDocs = reader.getLiveDocs();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator();\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copy(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(liveDocs, docs);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copy(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator();\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copy(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copy(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61e20f33ce8ff701576366fdb03955eded5f209b","date":1327852832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    AtomicIndexReader reader = context.reader();\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    AtomicReader reader = context.reader();\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    AtomicIndexReader reader = context.reader();\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    AtomicReader reader = context.reader();\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    IndexReader reader = context.reader;\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    AtomicReader reader = context.reader();\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          while (docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    AtomicReader reader = context.reader();\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    AtomicReader reader = context.reader();\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          while (docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    AtomicReader reader = context.reader();\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          while (docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    AtomicReader reader = context.reader();\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    InvertedFields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          while (docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    AtomicReader reader = context.reader();\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          while (docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    AtomicReader reader = context.reader();\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          while (docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    AtomicReader reader = context.reader();\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    InvertedFields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          while (docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    AtomicReader reader = context.reader();\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          while (docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    AtomicReader reader = context.reader();\n    FixedBitSet result = new FixedBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n\n    if (fields == null) {\n      return result;\n    }\n\n    BytesRef br = new BytesRef();\n    String lastField = null;\n    Terms termsC = null;\n    TermsEnum termsEnum = null;\n    DocsEnum docs = null;\n    for (Term term : terms) {\n      if (!term.field().equals(lastField)) {\n        termsC = fields.terms(term.field());\n        if (termsC == null) {\n          return result;\n        }\n        termsEnum = termsC.iterator(null);\n        lastField = term.field();\n      }\n\n      if (terms != null) { // TODO this check doesn't make sense, decide which variable its supposed to be for\n        br.copyBytes(term.bytes());\n        if (termsEnum.seekCeil(br) == TermsEnum.SeekStatus.FOUND) {\n          docs = termsEnum.docs(acceptDocs, docs, false);\n          while (docs.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n            result.set(docs.docID());\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["5cab9a86bd67202d20b6adc463008c8e982b070a","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3cc749c053615f5871f3b95715fe292f34e70a53":["6620df8541b174097b1133a4fc370adb2e570524"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["e6e919043fa85ee891123768dd655a98edbbf63c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["872cff1d3a554e0cd64014cd97f88d3002b0f491","da6d5ac19a80d65b1e864251f155d30960353b7e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["61e20f33ce8ff701576366fdb03955eded5f209b"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["e6e919043fa85ee891123768dd655a98edbbf63c","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"61e20f33ce8ff701576366fdb03955eded5f209b":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"e6e919043fa85ee891123768dd655a98edbbf63c":["3cc749c053615f5871f3b95715fe292f34e70a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["3cc749c053615f5871f3b95715fe292f34e70a53"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"3cc749c053615f5871f3b95715fe292f34e70a53":["e6e919043fa85ee891123768dd655a98edbbf63c"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["5cab9a86bd67202d20b6adc463008c8e982b070a","b65b350ca9588f9fc76ce7d6804160d06c45ff42","61e20f33ce8ff701576366fdb03955eded5f209b"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6620df8541b174097b1133a4fc370adb2e570524"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"61e20f33ce8ff701576366fdb03955eded5f209b":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"e6e919043fa85ee891123768dd655a98edbbf63c":["872cff1d3a554e0cd64014cd97f88d3002b0f491","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}