{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestNodeAddedTrigger#testRestoreState().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestNodeAddedTrigger#testRestoreState().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, cluster.getLoader(), cluster);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    String newNode = cluster.simAddNode();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, cluster.getLoader(), cluster))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, cluster.getLoader(), cluster))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4412883c12067d8a4e2a354aa8adc58c32be1d6","date":1521129281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestNodeAddedTrigger#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestNodeAddedTrigger#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, cluster.getLoader(), cluster);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    String newNode = cluster.simAddNode();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, cluster.getLoader(), cluster))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, cluster.getLoader(), cluster))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, cluster.getLoader(), cluster);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    String newNode = cluster.simAddNode();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, cluster.getLoader(), cluster))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, cluster.getLoader(), cluster))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTime();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestNodeAddedTrigger#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestNodeAddedTrigger#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\");\n    trigger.configure(cluster.getLoader(), cluster, props);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    String newNode = cluster.simAddNode();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\"))  {\n      newTrigger.configure(cluster.getLoader(), cluster, props);\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\"))  {\n      newTrigger.configure(cluster.getLoader(), cluster, props);\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\", props, cluster.getLoader(), cluster);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    String newNode = cluster.simAddNode();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\", props, cluster.getLoader(), cluster))  {\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\", props, cluster.getLoader(), cluster))  {\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"911a9d1794d994a4c804b786e39fe8d44001396b","date":1522854804,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestNodeAddedTrigger#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestNodeAddedTrigger#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\");\n    trigger.configure(cluster.getLoader(), cluster, props);\n    trigger.init();\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    String newNode = cluster.simAddNode();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\"))  {\n      newTrigger.configure(cluster.getLoader(), cluster, props);\n      trigger.init();\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\"))  {\n      newTrigger.configure(cluster.getLoader(), cluster, props);\n      newTrigger.init();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\");\n    trigger.configure(cluster.getLoader(), cluster, props);\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    String newNode = cluster.simAddNode();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\"))  {\n      newTrigger.configure(cluster.getLoader(), cluster, props);\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\"))  {\n      newTrigger.configure(cluster.getLoader(), cluster, props);\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimNodeAddedTrigger#testRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestNodeAddedTrigger#testRestoreState().mjava","sourceNew":"  @Test\n  public void testRestoreState() throws Exception {\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\");\n    trigger.configure(cluster.getLoader(), cluster, props);\n    trigger.init();\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    String newNode = cluster.simAddNode();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\"))  {\n      newTrigger.configure(cluster.getLoader(), cluster, props);\n      trigger.init();\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\"))  {\n      newTrigger.configure(cluster.getLoader(), cluster, props);\n      newTrigger.init();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRestoreState() throws Exception {\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    // add a new node but update the trigger before the waitFor period expires\n    // and assert that the new trigger still fires\n    NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\");\n    trigger.configure(cluster.getLoader(), cluster, props);\n    trigger.init();\n    trigger.setProcessor(noFirstRunProcessor);\n    trigger.run();\n\n    String newNode = cluster.simAddNode();\n    trigger.run(); // this run should detect the new node\n    trigger.close(); // close the old trigger\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"some_different_name\"))  {\n      newTrigger.configure(cluster.getLoader(), cluster, props);\n      trigger.init();\n      try {\n        newTrigger.restoreState(trigger);\n        fail(\"Trigger should only be able to restore state from an old trigger of the same name\");\n      } catch (AssertionError e) {\n        // expected\n      }\n    }\n\n    try (NodeAddedTrigger newTrigger = new NodeAddedTrigger(\"node_added_trigger\"))  {\n      newTrigger.configure(cluster.getLoader(), cluster, props);\n      newTrigger.init();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      newTrigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      newTrigger.restoreState(trigger); // restore state from the old trigger\n      int counter = 0;\n      do {\n        newTrigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      // ensure the event was fired\n      assertTrue(fired.get());\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      //TODO assertEquals(\"\", newNode.getNodeName(), nodeAddedEvent.getProperty(NodeAddedTrigger.NodeAddedEvent.NODE_NAME));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["911a9d1794d994a4c804b786e39fe8d44001396b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"911a9d1794d994a4c804b786e39fe8d44001396b":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"911a9d1794d994a4c804b786e39fe8d44001396b":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["911a9d1794d994a4c804b786e39fe8d44001396b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}