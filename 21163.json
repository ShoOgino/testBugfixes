{"path":"src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","commits":[{"id":"d189bc0061161fcd0242e1056416ace0bd3a4da7","date":1130650929,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Field f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0\n          byte [] norms = reader.norms(f.name());\n          assertEquals(norms.length,reader.maxDoc());\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], DefaultSimilarity.encodeNorm(1.0f));\n          }\n          norms = new byte[reader.maxDoc()];\n          reader.norms(f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], DefaultSimilarity.encodeNorm(1.0f));\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","sourceNew":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0\n          byte [] norms = reader.norms(f.name());\n          assertEquals(norms.length,reader.maxDoc());\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], DefaultSimilarity.encodeNorm(1.0f));\n          }\n          norms = new byte[reader.maxDoc()];\n          reader.norms(f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], DefaultSimilarity.encodeNorm(1.0f));\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Field f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0\n          byte [] norms = reader.norms(f.name());\n          assertEquals(norms.length,reader.maxDoc());\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], DefaultSimilarity.encodeNorm(1.0f));\n          }\n          norms = new byte[reader.maxDoc()];\n          reader.norms(f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], DefaultSimilarity.encodeNorm(1.0f));\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a","date":1240951127,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","sourceNew":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0 or null depending on the flag\n          byte [] norms = reader.norms(f.name());\n          byte norm1 = DefaultSimilarity.encodeNorm(1.0f);\n          if (reader.getDisableFakeNorms())\n            assertNull(norms);\n          else {\n            assertEquals(norms.length,reader.maxDoc());\n            for (int j=0; j<reader.maxDoc(); j++) {\n              assertEquals(norms[j], norm1);\n            }\n          }\n          norms = new byte[reader.maxDoc()];\n          reader.norms(f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], norm1);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0\n          byte [] norms = reader.norms(f.name());\n          assertEquals(norms.length,reader.maxDoc());\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], DefaultSimilarity.encodeNorm(1.0f));\n          }\n          norms = new byte[reader.maxDoc()];\n          reader.norms(f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], DefaultSimilarity.encodeNorm(1.0f));\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","sourceNew":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0 or null depending on the flag\n          byte [] norms = reader.norms(f.name());\n          byte norm1 = DefaultSimilarity.encodeNorm(1.0f);\n          assertNull(norms);\n          norms = new byte[reader.maxDoc()];\n          reader.norms(f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], norm1);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0 or null depending on the flag\n          byte [] norms = reader.norms(f.name());\n          byte norm1 = DefaultSimilarity.encodeNorm(1.0f);\n          if (reader.getDisableFakeNorms())\n            assertNull(norms);\n          else {\n            assertEquals(norms.length,reader.maxDoc());\n            for (int j=0; j<reader.maxDoc(); j++) {\n              assertEquals(norms[j], norm1);\n            }\n          }\n          norms = new byte[reader.maxDoc()];\n          reader.norms(f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], norm1);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0eb5b0b5b98c777dad412afbfb347d2c0889327","date":1259094367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","sourceNew":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0 or null depending on the flag\n          byte [] norms = reader.norms(f.name());\n          byte norm1 = Similarity.getDefault().encodeNormValue(1.0f);\n          assertNull(norms);\n          norms = new byte[reader.maxDoc()];\n          reader.norms(f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], norm1);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0 or null depending on the flag\n          byte [] norms = reader.norms(f.name());\n          byte norm1 = DefaultSimilarity.encodeNorm(1.0f);\n          assertNull(norms);\n          norms = new byte[reader.maxDoc()];\n          reader.norms(f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], norm1);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","pathOld":"src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(IndexReader).mjava","sourceNew":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0 or null depending on the flag\n          byte [] norms = reader.norms(f.name());\n          byte norm1 = Similarity.getDefault().encodeNormValue(1.0f);\n          assertNull(norms);\n          norms = new byte[reader.maxDoc()];\n          reader.norms(f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], norm1);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(IndexReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      Fieldable f = DocHelper.fields[i];\n      if (f.isIndexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.getOmitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for fake norms of 1.0 or null depending on the flag\n          byte [] norms = reader.norms(f.name());\n          byte norm1 = Similarity.getDefault().encodeNormValue(1.0f);\n          assertNull(norms);\n          norms = new byte[reader.maxDoc()];\n          reader.norms(f.name(),norms, 0);\n          for (int j=0; j<reader.maxDoc(); j++) {\n            assertEquals(norms[j], norm1);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["d189bc0061161fcd0242e1056416ace0bd3a4da7"],"d189bc0061161fcd0242e1056416ace0bd3a4da7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"]},"commit2Childs":{"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d189bc0061161fcd0242e1056416ace0bd3a4da7"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"d189bc0061161fcd0242e1056416ace0bd3a4da7":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}