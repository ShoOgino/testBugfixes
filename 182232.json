{"path":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#renewDelegationToken(String,int,String,HttpSolrClient).mjava","commits":[{"id":"29887daf839649150d96855b142b76f5c45d60d2","date":1482160504,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#renewDelegationToken(String,int,String,HttpSolrClient).mjava","pathOld":"/dev/null","sourceNew":"  private long renewDelegationToken(final String token, final int expectedStatusCode,\n      final String user, HttpSolrClient client) throws Exception {\n    DelegationTokenRequest.Renew renew = new DelegationTokenRequest.Renew(token) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n        params.set(PseudoAuthenticator.USER_NAME, user);\n        return params;\n      }\n\n      @Override\n      public Set<String> getQueryParams() {\n        Set<String> queryParams = super.getQueryParams();\n        queryParams.add(PseudoAuthenticator.USER_NAME);\n        return queryParams;\n      }\n    };\n    try {\n      DelegationTokenResponse.Renew renewResponse = renew.process(client);\n      assertEquals(HttpStatus.SC_OK, expectedStatusCode);\n      return renewResponse.getExpirationTime();\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(expectedStatusCode, ex.code());\n      return -1;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#renewDelegationToken(String,int,String,HttpSolrClient).mjava","pathOld":"/dev/null","sourceNew":"  private long renewDelegationToken(final String token, final int expectedStatusCode,\n      final String user, HttpSolrClient client) throws Exception {\n    DelegationTokenRequest.Renew renew = new DelegationTokenRequest.Renew(token) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n        params.set(PseudoAuthenticator.USER_NAME, user);\n        return params;\n      }\n\n      @Override\n      public Set<String> getQueryParams() {\n        Set<String> queryParams = super.getQueryParams();\n        queryParams.add(PseudoAuthenticator.USER_NAME);\n        return queryParams;\n      }\n    };\n    try {\n      DelegationTokenResponse.Renew renewResponse = renew.process(client);\n      assertEquals(HttpStatus.SC_OK, expectedStatusCode);\n      return renewResponse.getExpirationTime();\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(expectedStatusCode, ex.code());\n      return -1;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#renewDelegationToken(String,int,String,HttpSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth#renewDelegationToken(String,int,String,HttpSolrClient).mjava","sourceNew":"  private long renewDelegationToken(final String token, final int expectedStatusCode,\n      final String user, HttpSolrClient client) throws Exception {\n    DelegationTokenRequest.Renew renew = new DelegationTokenRequest.Renew(token) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n        params.set(PseudoAuthenticator.USER_NAME, user);\n        return params;\n      }\n\n      @Override\n      public Set<String> getQueryParams() {\n        Set<String> queryParams = super.getQueryParams();\n        queryParams.add(PseudoAuthenticator.USER_NAME);\n        return queryParams;\n      }\n    };\n    try {\n      DelegationTokenResponse.Renew renewResponse = renew.process(client);\n      assertEquals(HttpStatus.SC_OK, expectedStatusCode);\n      return renewResponse.getExpirationTime();\n    } catch (BaseHttpSolrClient.RemoteSolrException ex) {\n      assertEquals(expectedStatusCode, ex.code());\n      return -1;\n    }\n  }\n\n","sourceOld":"  private long renewDelegationToken(final String token, final int expectedStatusCode,\n      final String user, HttpSolrClient client) throws Exception {\n    DelegationTokenRequest.Renew renew = new DelegationTokenRequest.Renew(token) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n        params.set(PseudoAuthenticator.USER_NAME, user);\n        return params;\n      }\n\n      @Override\n      public Set<String> getQueryParams() {\n        Set<String> queryParams = super.getQueryParams();\n        queryParams.add(PseudoAuthenticator.USER_NAME);\n        return queryParams;\n      }\n    };\n    try {\n      DelegationTokenResponse.Renew renewResponse = renew.process(client);\n      assertEquals(HttpStatus.SC_OK, expectedStatusCode);\n      return renewResponse.getExpirationTime();\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(expectedStatusCode, ex.code());\n      return -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29887daf839649150d96855b142b76f5c45d60d2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","29887daf839649150d96855b142b76f5c45d60d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db96734b79e26d948b59f68bd4564c4836a71acf":["29887daf839649150d96855b142b76f5c45d60d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db96734b79e26d948b59f68bd4564c4836a71acf"]},"commit2Childs":{"29887daf839649150d96855b142b76f5c45d60d2":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","db96734b79e26d948b59f68bd4564c4836a71acf"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29887daf839649150d96855b142b76f5c45d60d2","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"db96734b79e26d948b59f68bd4564c4836a71acf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}