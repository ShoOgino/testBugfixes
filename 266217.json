{"path":"src/java/org/apache/lucene/index/IndexReader#acquireWriteLock().mjava","commits":[{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#acquireWriteLock().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#aquireWriteLock().mjava","sourceNew":"  /**\n   * Tries to acquire the WriteLock on this directory.\n   * this method is only valid if this IndexReader is directory owner.\n   * \n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  private void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    if (stale)\n      throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n    if (isClosed)\n      throw new IOException(\"this reader is closed\");\n\n    if (writeLock == null) {\n      Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n      if (!writeLock.obtain(IndexWriter.WRITE_LOCK_TIMEOUT)) // obtain write lock\n        throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n      this.writeLock = writeLock;\n\n      // we have to check whether index has changed since this reader was opened.\n      // if so, this reader is no longer valid for deletion\n      if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n        stale = true;\n        this.writeLock.release();\n        this.writeLock = null;\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to acquire the WriteLock on this directory.\n   * this method is only valid if this IndexReader is directory owner.\n   * \n   * @throws IOException If WriteLock cannot be acquired.\n   */\n  private void aquireWriteLock() throws IOException {\n    if (stale)\n      throw new IOException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n    if (writeLock == null) {\n      Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n      if (!writeLock.obtain(IndexWriter.WRITE_LOCK_TIMEOUT)) // obtain write lock\n        throw new IOException(\"Index locked for write: \" + writeLock);\n      this.writeLock = writeLock;\n\n      // we have to check whether index has changed since this reader was opened.\n      // if so, this reader is no longer valid for deletion\n      if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n        stale = true;\n        this.writeLock.release();\n        this.writeLock = null;\n        throw new IOException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#acquireWriteLock().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#acquireWriteLock().mjava","sourceNew":"  /**\n   * Tries to acquire the WriteLock on this directory.\n   * this method is only valid if this IndexReader is directory owner.\n   * \n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  private void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    if (stale)\n      throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n    if (writeLock == null) {\n      Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n      if (!writeLock.obtain(IndexWriter.WRITE_LOCK_TIMEOUT)) // obtain write lock\n        throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n      this.writeLock = writeLock;\n\n      // we have to check whether index has changed since this reader was opened.\n      // if so, this reader is no longer valid for deletion\n      if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n        stale = true;\n        this.writeLock.release();\n        this.writeLock = null;\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to acquire the WriteLock on this directory.\n   * this method is only valid if this IndexReader is directory owner.\n   * \n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  private void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    if (stale)\n      throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n    if (isClosed)\n      throw new IOException(\"this reader is closed\");\n\n    if (writeLock == null) {\n      Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n      if (!writeLock.obtain(IndexWriter.WRITE_LOCK_TIMEOUT)) // obtain write lock\n        throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n      this.writeLock = writeLock;\n\n      // we have to check whether index has changed since this reader was opened.\n      // if so, this reader is no longer valid for deletion\n      if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n        stale = true;\n        this.writeLock.release();\n        this.writeLock = null;\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n      }\n    }\n  }\n\n","bugFix":["1b54a9bc667895a2095a886184bf69a3179e63df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"125b5699f11b58d9be0820c6ce8b1648812902e8","date":1190273227,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#acquireWriteLock().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#acquireWriteLock().mjava","sourceNew":"  /** Does nothing by default. Subclasses that require a write lock for\n   *  index modifications must implement this method. */\n  protected synchronized void acquireWriteLock() throws IOException {\n    /* NOOP */\n  }\n\n","sourceOld":"  /**\n   * Tries to acquire the WriteLock on this directory.\n   * this method is only valid if this IndexReader is directory owner.\n   * \n   * @throws StaleReaderException if the index has changed\n   * since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  private void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    if (stale)\n      throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n    if (writeLock == null) {\n      Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n      if (!writeLock.obtain(IndexWriter.WRITE_LOCK_TIMEOUT)) // obtain write lock\n        throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n      this.writeLock = writeLock;\n\n      // we have to check whether index has changed since this reader was opened.\n      // if so, this reader is no longer valid for deletion\n      if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n        stale = true;\n        this.writeLock.release();\n        this.writeLock = null;\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#acquireWriteLock().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#acquireWriteLock().mjava","sourceNew":"  /** Does nothing by default. Subclasses that require a write lock for\n   *  index modifications must implement this method. */\n  protected synchronized void acquireWriteLock() throws IOException {\n    /* NOOP */\n  }\n\n","sourceOld":"  /** Does nothing by default. Subclasses that require a write lock for\n   *  index modifications must implement this method. */\n  protected synchronized void acquireWriteLock() throws IOException {\n    /* NOOP */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["1b54a9bc667895a2095a886184bf69a3179e63df"],"1b54a9bc667895a2095a886184bf69a3179e63df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["125b5699f11b58d9be0820c6ce8b1648812902e8"]},"commit2Childs":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"1b54a9bc667895a2095a886184bf69a3179e63df":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b54a9bc667895a2095a886184bf69a3179e63df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}