{"path":"src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map,DocumentsWriter.FlushState).mjava","commits":[{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map,DocumentsWriter.FlushState).mjava","pathOld":"/dev/null","sourceNew":"  public void flush(Map threadsAndFields, final DocumentsWriter.FlushState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List allFields = new ArrayList();\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n\n      while(fieldsIt.hasNext()) {\n        FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) fieldsIt.next();\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    Collections.sort(allFields);\n    final int numAllFields = allFields.size();\n\n    final TermInfosWriter termsOut = new TermInfosWriter(state.directory,\n                                                         state.segmentName,\n                                                         fieldInfos,\n                                                         state.docWriter.writer.getTermIndexInterval());\n\n    final IndexOutput freqOut = state.directory.createOutput(state.segmentFileName(IndexFileNames.FREQ_EXTENSION));\n    final IndexOutput proxOut = state.directory.createOutput(state.segmentFileName(IndexFileNames.PROX_EXTENSION));\n\n    final DefaultSkipListWriter skipListWriter = new DefaultSkipListWriter(termsOut.skipInterval,\n                                                                           termsOut.maxSkipLevels,\n                                                                           state.numDocsInRAM, freqOut, proxOut);\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = ((FreqProxTermsWriterPerField) allFields.get(start)).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && ((FreqProxTermsWriterPerField) allFields.get(end)).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = (FreqProxTermsWriterPerField) allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(state, fields, termsOut, freqOut, proxOut, skipListWriter);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n      }\n\n      start = end;\n    }\n\n    it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = (Map.Entry) it.next();\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n\n    freqOut.close();\n    proxOut.close();\n    termsOut.close();\n    \n    // Record all files we have flushed\n    state.flushedFiles.add(state.segmentFileName(IndexFileNames.FIELD_INFOS_EXTENSION));\n    state.flushedFiles.add(state.segmentFileName(IndexFileNames.FREQ_EXTENSION));\n    state.flushedFiles.add(state.segmentFileName(IndexFileNames.PROX_EXTENSION));\n    state.flushedFiles.add(state.segmentFileName(IndexFileNames.TERMS_EXTENSION));\n    state.flushedFiles.add(state.segmentFileName(IndexFileNames.TERMS_INDEX_EXTENSION));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902ba79f4590a41c663c447756d2e5041cbbdda9","date":1217956662,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map,DocumentsWriter.FlushState).mjava","pathOld":"src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map,DocumentsWriter.FlushState).mjava","sourceNew":"  public void flush(Map threadsAndFields, final DocumentsWriter.FlushState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List allFields = new ArrayList();\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n\n      while(fieldsIt.hasNext()) {\n        FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) fieldsIt.next();\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    Collections.sort(allFields);\n    final int numAllFields = allFields.size();\n\n    final TermInfosWriter termsOut = new TermInfosWriter(state.directory,\n                                                         state.segmentName,\n                                                         fieldInfos,\n                                                         state.docWriter.writer.getTermIndexInterval());\n\n    final IndexOutput freqOut = state.directory.createOutput(state.segmentFileName(IndexFileNames.FREQ_EXTENSION));\n    final IndexOutput proxOut;\n\n    if (fieldInfos.hasProx())\n      proxOut = state.directory.createOutput(state.segmentFileName(IndexFileNames.PROX_EXTENSION));\n    else\n      proxOut = null;\n\n    final DefaultSkipListWriter skipListWriter = new DefaultSkipListWriter(termsOut.skipInterval,\n                                                                           termsOut.maxSkipLevels,\n                                                                           state.numDocsInRAM, freqOut, proxOut);\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = ((FreqProxTermsWriterPerField) allFields.get(start)).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && ((FreqProxTermsWriterPerField) allFields.get(end)).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = (FreqProxTermsWriterPerField) allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(state, fields, termsOut, freqOut, proxOut, skipListWriter);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = (Map.Entry) it.next();\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n\n    freqOut.close();\n    if (proxOut != null) {\n      state.flushedFiles.add(state.segmentFileName(IndexFileNames.PROX_EXTENSION));\n      proxOut.close();\n    }\n    termsOut.close();\n    \n    // Record all files we have flushed\n    state.flushedFiles.add(state.segmentFileName(IndexFileNames.FIELD_INFOS_EXTENSION));\n    state.flushedFiles.add(state.segmentFileName(IndexFileNames.FREQ_EXTENSION));\n    state.flushedFiles.add(state.segmentFileName(IndexFileNames.TERMS_EXTENSION));\n    state.flushedFiles.add(state.segmentFileName(IndexFileNames.TERMS_INDEX_EXTENSION));\n  }\n\n","sourceOld":"  public void flush(Map threadsAndFields, final DocumentsWriter.FlushState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List allFields = new ArrayList();\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n\n      while(fieldsIt.hasNext()) {\n        FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) fieldsIt.next();\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    Collections.sort(allFields);\n    final int numAllFields = allFields.size();\n\n    final TermInfosWriter termsOut = new TermInfosWriter(state.directory,\n                                                         state.segmentName,\n                                                         fieldInfos,\n                                                         state.docWriter.writer.getTermIndexInterval());\n\n    final IndexOutput freqOut = state.directory.createOutput(state.segmentFileName(IndexFileNames.FREQ_EXTENSION));\n    final IndexOutput proxOut = state.directory.createOutput(state.segmentFileName(IndexFileNames.PROX_EXTENSION));\n\n    final DefaultSkipListWriter skipListWriter = new DefaultSkipListWriter(termsOut.skipInterval,\n                                                                           termsOut.maxSkipLevels,\n                                                                           state.numDocsInRAM, freqOut, proxOut);\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = ((FreqProxTermsWriterPerField) allFields.get(start)).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && ((FreqProxTermsWriterPerField) allFields.get(end)).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = (FreqProxTermsWriterPerField) allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(state, fields, termsOut, freqOut, proxOut, skipListWriter);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n      }\n\n      start = end;\n    }\n\n    it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = (Map.Entry) it.next();\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n\n    freqOut.close();\n    proxOut.close();\n    termsOut.close();\n    \n    // Record all files we have flushed\n    state.flushedFiles.add(state.segmentFileName(IndexFileNames.FIELD_INFOS_EXTENSION));\n    state.flushedFiles.add(state.segmentFileName(IndexFileNames.FREQ_EXTENSION));\n    state.flushedFiles.add(state.segmentFileName(IndexFileNames.PROX_EXTENSION));\n    state.flushedFiles.add(state.segmentFileName(IndexFileNames.TERMS_EXTENSION));\n    state.flushedFiles.add(state.segmentFileName(IndexFileNames.TERMS_INDEX_EXTENSION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d17492f26096e19670d947d1be5e9adc52b1d3d","date":1224931200,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map,SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/FreqProxTermsWriter#flush(Map,DocumentsWriter.FlushState).mjava","sourceNew":"  public void flush(Map threadsAndFields, final SegmentWriteState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List allFields = new ArrayList();\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n\n      while(fieldsIt.hasNext()) {\n        FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) fieldsIt.next();\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    Collections.sort(allFields);\n    final int numAllFields = allFields.size();\n\n    // TODO: allow Lucene user to customize this consumer:\n    final FormatPostingsFieldsConsumer consumer = new FormatPostingsFieldsWriter(state, fieldInfos);\n    /*\n    Current writer chain:\n      FormatPostingsFieldsConsumer\n        -> IMPL: FormatPostingsFieldsWriter\n          -> FormatPostingsTermsConsumer\n            -> IMPL: FormatPostingsTermsWriter\n              -> FormatPostingsDocConsumer\n                -> IMPL: FormatPostingsDocWriter\n                  -> FormatPostingsPositionsConsumer\n                    -> IMPL: FormatPostingsPositionsWriter\n    */\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = ((FreqProxTermsWriterPerField) allFields.get(start)).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && ((FreqProxTermsWriterPerField) allFields.get(end)).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = (FreqProxTermsWriterPerField) allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(fields, consumer);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = (Map.Entry) it.next();\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n\n    consumer.finish();\n  }\n\n","sourceOld":"  public void flush(Map threadsAndFields, final DocumentsWriter.FlushState state) throws IOException {\n\n    // Gather all FieldData's that have postings, across all\n    // ThreadStates\n    List allFields = new ArrayList();\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n\n      while(fieldsIt.hasNext()) {\n        FreqProxTermsWriterPerField perField = (FreqProxTermsWriterPerField) fieldsIt.next();\n        if (perField.termsHashPerField.numPostings > 0)\n          allFields.add(perField);\n      }\n    }\n\n    // Sort by field name\n    Collections.sort(allFields);\n    final int numAllFields = allFields.size();\n\n    final TermInfosWriter termsOut = new TermInfosWriter(state.directory,\n                                                         state.segmentName,\n                                                         fieldInfos,\n                                                         state.docWriter.writer.getTermIndexInterval());\n\n    final IndexOutput freqOut = state.directory.createOutput(state.segmentFileName(IndexFileNames.FREQ_EXTENSION));\n    final IndexOutput proxOut;\n\n    if (fieldInfos.hasProx())\n      proxOut = state.directory.createOutput(state.segmentFileName(IndexFileNames.PROX_EXTENSION));\n    else\n      proxOut = null;\n\n    final DefaultSkipListWriter skipListWriter = new DefaultSkipListWriter(termsOut.skipInterval,\n                                                                           termsOut.maxSkipLevels,\n                                                                           state.numDocsInRAM, freqOut, proxOut);\n\n    int start = 0;\n    while(start < numAllFields) {\n      final FieldInfo fieldInfo = ((FreqProxTermsWriterPerField) allFields.get(start)).fieldInfo;\n      final String fieldName = fieldInfo.name;\n\n      int end = start+1;\n      while(end < numAllFields && ((FreqProxTermsWriterPerField) allFields.get(end)).fieldInfo.name.equals(fieldName))\n        end++;\n      \n      FreqProxTermsWriterPerField[] fields = new FreqProxTermsWriterPerField[end-start];\n      for(int i=start;i<end;i++) {\n        fields[i-start] = (FreqProxTermsWriterPerField) allFields.get(i);\n\n        // Aggregate the storePayload as seen by the same\n        // field across multiple threads\n        fieldInfo.storePayloads |= fields[i-start].hasPayloads;\n      }\n\n      // If this field has postings then add them to the\n      // segment\n      appendPostings(state, fields, termsOut, freqOut, proxOut, skipListWriter);\n\n      for(int i=0;i<fields.length;i++) {\n        TermsHashPerField perField = fields[i].termsHashPerField;\n        int numPostings = perField.numPostings;\n        perField.reset();\n        perField.shrinkHash(numPostings);\n        fields[i].reset();\n      }\n\n      start = end;\n    }\n\n    it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n      Map.Entry entry = (Map.Entry) it.next();\n      FreqProxTermsWriterPerThread perThread = (FreqProxTermsWriterPerThread) entry.getKey();\n      perThread.termsHashPerThread.reset(true);\n    }\n\n    freqOut.close();\n    if (proxOut != null) {\n      state.flushedFiles.add(state.segmentFileName(IndexFileNames.PROX_EXTENSION));\n      proxOut.close();\n    }\n    termsOut.close();\n    \n    // Record all files we have flushed\n    state.flushedFiles.add(state.segmentFileName(IndexFileNames.FIELD_INFOS_EXTENSION));\n    state.flushedFiles.add(state.segmentFileName(IndexFileNames.FREQ_EXTENSION));\n    state.flushedFiles.add(state.segmentFileName(IndexFileNames.TERMS_EXTENSION));\n    state.flushedFiles.add(state.segmentFileName(IndexFileNames.TERMS_INDEX_EXTENSION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"902ba79f4590a41c663c447756d2e5041cbbdda9":["5350389bf83287111f7760b9e3db3af8e3648474"],"4d17492f26096e19670d947d1be5e9adc52b1d3d":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"5350389bf83287111f7760b9e3db3af8e3648474":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d17492f26096e19670d947d1be5e9adc52b1d3d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5350389bf83287111f7760b9e3db3af8e3648474"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["4d17492f26096e19670d947d1be5e9adc52b1d3d"],"4d17492f26096e19670d947d1be5e9adc52b1d3d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5350389bf83287111f7760b9e3db3af8e3648474":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}