{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(newLogMergePolicy(true))\n      );\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String[] files = dir.listAll();\n      boolean corrupted = false;\n      for(int i=0;i<files.length;i++) {\n        if (files[i].endsWith(\".cfs\")) {\n          dir.deleteFile(files[i]);\n          corrupted = true;\n          break;\n        }\n      }\n      assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(newLogMergePolicy(true))\n      );\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String[] files = dir.listAll();\n      boolean corrupted = false;\n      for(int i=0;i<files.length;i++) {\n        if (files[i].endsWith(\".cfs\")) {\n          dir.deleteFile(files[i]);\n          corrupted = true;\n          break;\n        }\n      }\n      assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"438e995b4e32916f631722aab36254146830fefb","date":1328903827,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(newLogMergePolicy(true))\n      );\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String[] files = dir.listAll();\n      boolean corrupted = false;\n      for(int i=0;i<files.length;i++) {\n        if (files[i].endsWith(\".cfs\")) {\n          dir.deleteFile(files[i]);\n          corrupted = true;\n          break;\n        }\n      }\n      assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(newLogMergePolicy(true))\n      );\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String[] files = dir.listAll();\n      boolean corrupted = false;\n      for(int i=0;i<files.length;i++) {\n        if (files[i].endsWith(\".cfs\")) {\n          dir.deleteFile(files[i]);\n          corrupted = true;\n          break;\n        }\n      }\n      assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(newLogMergePolicy(true))\n      );\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String[] files = dir.listAll();\n      boolean corrupted = false;\n      for(int i=0;i<files.length;i++) {\n        if (files[i].endsWith(\".cfs\")) {\n          dir.deleteFile(files[i]);\n          corrupted = true;\n          break;\n        }\n      }\n      assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMergePolicy(newLogMergePolicy(true))\n      );\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String[] files = dir.listAll();\n      boolean corrupted = false;\n      for(int i=0;i<files.length;i++) {\n        if (files[i].endsWith(\".cfs\")) {\n          dir.deleteFile(files[i]);\n          corrupted = true;\n          break;\n        }\n      }\n      assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1494abe5dc85557ec2e2772f87660d48f831c3a5","date":1337614370,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                              setMergePolicy(newLogMergePolicy(true))\n                              );\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = IndexReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(newLogMergePolicy(true))\n      );\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String[] files = dir.listAll();\n      boolean corrupted = false;\n      for(int i=0;i<files.length;i++) {\n        if (files[i].endsWith(\".cfs\")) {\n          dir.deleteFile(files[i]);\n          corrupted = true;\n          break;\n        }\n      }\n      assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9","05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                              setMergePolicy(newLogMergePolicy(true))\n                              );\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = IndexReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setCheckIndexOnClose(false); // we are corrupting it!\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n              setMergePolicy(newLogMergePolicy(true))\n      );\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      String[] files = dir.listAll();\n      boolean corrupted = false;\n      for(int i=0;i<files.length;i++) {\n        if (files[i].endsWith(\".cfs\")) {\n          dir.deleteFile(files[i]);\n          corrupted = true;\n          break;\n        }\n      }\n      assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n        fail(\"reader did not hit IOException on opening a corrupt index\");\n      } catch (Exception e) {\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                              setMergePolicy(newLogMergePolicy(true))\n                              );\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                              setMergePolicy(newLogMergePolicy(true))\n                              );\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = IndexReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                              setMergePolicy(newLogMergePolicy(true))\n                              );\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                              setMergePolicy(newLogMergePolicy(true))\n                              );\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":["1494abe5dc85557ec2e2772f87660d48f831c3a5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                              setMergePolicy(newLogMergePolicy(true))\n                              );\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                              setMergePolicy(newLogMergePolicy(true))\n                              );\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                              setMergePolicy(newLogMergePolicy(true))\n                              );\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                              setMergePolicy(newLogMergePolicy(true))\n                              );\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b103c0ed2ba7edf422d1ccb5489815dc6acb84","date":1345973500,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                              setMergePolicy(newLogMergePolicy(true))\n                              );\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                              setMergePolicy(newLogMergePolicy(true))\n                              );\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                              setMergePolicy(newLogMergePolicy(true))\n                              );\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                              setMergePolicy(newLogMergePolicy(true))\n                              );\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setNoCFSRatio(1.0);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"088a7ef694fd43d5d9a4d200c4005865f773d1e7","date":1371136274,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                              setMergePolicy(newLogMergePolicy(true)).setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                              setMergePolicy(newLogMergePolicy(true))\n                              );\n    LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                              setMergePolicy(newLogMergePolicy(true)).setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.shutdown();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                              setMergePolicy(newLogMergePolicy(true)).setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.shutdown();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                              setMergePolicy(newLogMergePolicy(true)).setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.shutdown();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.shutdown();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    if (dir instanceof MockDirectoryWrapper) {\n      // we want to ensure our corruption always succeeds!\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"41307b73b6c5ab4779490d54afb6393c80ba5a3b","date":1412433761,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    if (dir instanceof MockDirectoryWrapper) {\n      // we want to ensure our corruption always succeeds!\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n    \n    boolean corrupted = false;\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentCommitInfo si : sis) {\n      assertTrue(si.info.getUseCompoundFile());\n      String cfsFiles[] = si.info.getCodec().compoundFormat().files(si.info);\n      dir.deleteFile(cfsFiles[0]);\n      corrupted = true;\n      break;\n    }\n\n    assertTrue(\"failed to find cfs file to remove: \", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    if (dir instanceof MockDirectoryWrapper) {\n      // we want to ensure our corruption always succeeds!\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    if (dir instanceof MockDirectoryWrapper) {\n      // we want to ensure our corruption always succeeds!\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n    \n    boolean corrupted = false;\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentCommitInfo si : sis) {\n      assertTrue(si.info.getUseCompoundFile());\n      String cfsFiles[] = si.info.getCodec().compoundFormat().files(si.info);\n      dir.deleteFile(cfsFiles[0]);\n      corrupted = true;\n      break;\n    }\n\n    assertTrue(\"failed to find cfs file to remove: \", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    if (dir instanceof MockDirectoryWrapper) {\n      // we want to ensure our corruption always succeeds!\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n    String[] files = dir.listAll();\n    boolean corrupted = false;\n    for(int i=0;i<files.length;i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        dir.deleteFile(files[i]);\n        corrupted = true;\n        break;\n      }\n    }\n    assertTrue(\"failed to find cfs file to remove\", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    if (dir instanceof MockDirectoryWrapper) {\n      // we want to ensure our corruption always succeeds!\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n    \n    boolean corrupted = false;\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : sis) {\n      assertTrue(si.info.getUseCompoundFile());\n      String cfsFiles[] = si.info.getCodec().compoundFormat().files(si.info);\n      dir.deleteFile(cfsFiles[0]);\n      corrupted = true;\n      break;\n    }\n\n    assertTrue(\"failed to find cfs file to remove: \", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    if (dir instanceof MockDirectoryWrapper) {\n      // we want to ensure our corruption always succeeds!\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n    \n    boolean corrupted = false;\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentCommitInfo si : sis) {\n      assertTrue(si.info.getUseCompoundFile());\n      String cfsFiles[] = si.info.getCodec().compoundFormat().files(si.info);\n      dir.deleteFile(cfsFiles[0]);\n      corrupted = true;\n      break;\n    }\n\n    assertTrue(\"failed to find cfs file to remove: \", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    if (dir instanceof MockDirectoryWrapper) {\n      // we want to ensure our corruption always succeeds!\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n    \n    boolean corrupted = false;\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : sis) {\n      assertTrue(si.info.getUseCompoundFile());\n      String cfsFiles[] = si.info.getCodec().compoundFormat().files(si.info);\n      dir.deleteFile(cfsFiles[0]);\n      corrupted = true;\n      break;\n    }\n\n    assertTrue(\"failed to find cfs file to remove: \", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    if (dir instanceof MockDirectoryWrapper) {\n      // we want to ensure our corruption always succeeds!\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n    \n    boolean corrupted = false;\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    for (SegmentCommitInfo si : sis) {\n      assertTrue(si.info.getUseCompoundFile());\n      String cfsFiles[] = si.info.getCodec().compoundFormat().files(si.info);\n      dir.deleteFile(cfsFiles[0]);\n      corrupted = true;\n      break;\n    }\n\n    assertTrue(\"failed to find cfs file to remove: \", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3c5705cb93fb3daa46c676cad08b916dd57bf1be","date":1422473298,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    if (dir instanceof MockDirectoryWrapper) {\n      // we want to ensure our corruption always succeeds!\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n    \n    boolean corrupted = false;\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : sis) {\n      assertTrue(si.info.getUseCompoundFile());\n      List<String> victims = new ArrayList<String>(si.info.files());\n      Collections.shuffle(victims, random());\n      dir.deleteFile(victims.get(0));\n      corrupted = true;\n      break;\n    }\n\n    assertTrue(\"failed to find cfs file to remove: \", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the cfs\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    if (dir instanceof MockDirectoryWrapper) {\n      // we want to ensure our corruption always succeeds!\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n    \n    boolean corrupted = false;\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : sis) {\n      assertTrue(si.info.getUseCompoundFile());\n      String cfsFiles[] = si.info.getCodec().compoundFormat().files(si.info);\n      dir.deleteFile(cfsFiles[0]);\n      corrupted = true;\n      break;\n    }\n\n    assertTrue(\"failed to find cfs file to remove: \", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n    \n    boolean corrupted = false;\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : sis) {\n      assertTrue(si.info.getUseCompoundFile());\n      List<String> victims = new ArrayList<String>(si.info.files());\n      Collections.shuffle(victims, random());\n      dir.deleteFiles(Collections.singleton(victims.get(0)));\n      corrupted = true;\n      break;\n    }\n\n    assertTrue(\"failed to find cfs file to remove: \", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    if (dir instanceof MockDirectoryWrapper) {\n      // we want to ensure our corruption always succeeds!\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n    \n    boolean corrupted = false;\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : sis) {\n      assertTrue(si.info.getUseCompoundFile());\n      List<String> victims = new ArrayList<String>(si.info.files());\n      Collections.shuffle(victims, random());\n      dir.deleteFile(victims.get(0));\n      corrupted = true;\n      break;\n    }\n\n    assertTrue(\"failed to find cfs file to remove: \", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n    \n    boolean corrupted = false;\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : sis) {\n      assertTrue(si.info.getUseCompoundFile());\n      List<String> victims = new ArrayList<String>(si.info.files());\n      Collections.shuffle(victims, random());\n      dir.deleteFile(victims.get(0));\n      corrupted = true;\n      break;\n    }\n\n    assertTrue(\"failed to find cfs file to remove: \", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n    \n    boolean corrupted = false;\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : sis) {\n      assertTrue(si.info.getUseCompoundFile());\n      List<String> victims = new ArrayList<String>(si.info.files());\n      Collections.shuffle(victims, random());\n      dir.deleteFiles(Collections.singleton(victims.get(0)));\n      corrupted = true;\n      break;\n    }\n\n    assertTrue(\"failed to find cfs file to remove: \", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n    \n    boolean corrupted = false;\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : sis) {\n      assertTrue(si.info.getUseCompoundFile());\n      List<String> victims = new ArrayList<String>(si.info.files());\n      Collections.shuffle(victims, random());\n      dir.deleteFile(victims.get(0));\n      corrupted = true;\n      break;\n    }\n\n    assertTrue(\"failed to find cfs file to remove: \", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    if (dir instanceof MockDirectoryWrapper) {\n      // we want to ensure our corruption always succeeds!\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n    \n    boolean corrupted = false;\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : sis) {\n      assertTrue(si.info.getUseCompoundFile());\n      List<String> victims = new ArrayList<String>(si.info.files());\n      Collections.shuffle(victims, random());\n      dir.deleteFile(victims.get(0));\n      corrupted = true;\n      break;\n    }\n\n    assertTrue(\"failed to find cfs file to remove: \", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n    \n    boolean corrupted = false;\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : sis) {\n      assertTrue(si.info.getUseCompoundFile());\n      List<String> victims = new ArrayList<String>(si.info.files());\n      Collections.shuffle(victims, random());\n      dir.deleteFile(victims.get(0));\n      corrupted = true;\n      break;\n    }\n\n    assertTrue(\"failed to find cfs file to remove: \", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    if (dir instanceof MockDirectoryWrapper) {\n      // we want to ensure our corruption always succeeds!\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n    \n    boolean corrupted = false;\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : sis) {\n      assertTrue(si.info.getUseCompoundFile());\n      List<String> victims = new ArrayList<String>(si.info.files());\n      Collections.shuffle(victims, random());\n      dir.deleteFile(victims.get(0));\n      corrupted = true;\n      break;\n    }\n\n    assertTrue(\"failed to find cfs file to remove: \", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n    \n    boolean corrupted = false;\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : sis) {\n      assertTrue(si.info.getUseCompoundFile());\n      List<String> victims = new ArrayList<String>(si.info.files());\n      Collections.shuffle(victims, random());\n      dir.deleteFile(victims.get(0));\n      corrupted = true;\n      break;\n    }\n\n    assertTrue(\"failed to find cfs file to remove: \", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    if (dir instanceof MockDirectoryWrapper) {\n      // we want to ensure our corruption always succeeds!\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n    \n    boolean corrupted = false;\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : sis) {\n      assertTrue(si.info.getUseCompoundFile());\n      List<String> victims = new ArrayList<String>(si.info.files());\n      Collections.shuffle(victims, random());\n      dir.deleteFile(victims.get(0));\n      corrupted = true;\n      break;\n    }\n\n    assertTrue(\"failed to find cfs file to remove: \", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCorruptIndex2().mjava","sourceNew":"  // Simulate a corrupt index by removing one of the\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n    \n    boolean corrupted = false;\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : sis) {\n      assertTrue(si.info.getUseCompoundFile());\n      List<String> victims = new ArrayList<String>(si.info.files());\n      Collections.shuffle(victims, random());\n      dir.deleteFile(victims.get(0));\n      corrupted = true;\n      break;\n    }\n\n    assertTrue(\"failed to find cfs file to remove: \", corrupted);\n\n    expectThrows(Exception.class, () -> {\n      DirectoryReader.open(dir);\n    });\n\n    dir.close();\n  }\n\n","sourceOld":"  // Simulate a corrupt index by removing one of the\n  // files and make sure we get an IOException trying to\n  // open the index:\n  public void testSimulatedCorruptIndex2() throws IOException {\n    BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we are corrupting it!\n    IndexWriter writer = null;\n\n    writer  = new IndexWriter(\n                              dir,\n                              newIndexWriterConfig(new MockAnalyzer(random()))\n                                .setMergePolicy(newLogMergePolicy(true))\n                                .setUseCompoundFile(true)\n                              );\n    MergePolicy lmp = writer.getConfig().getMergePolicy();\n    // Force creation of CFS:\n    lmp.setNoCFSRatio(1.0);\n    lmp.setMaxCFSSegmentSizeMB(Double.POSITIVE_INFINITY);\n\n    // add 100 documents\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n    }\n\n    // close\n    writer.close();\n\n    long gen = SegmentInfos.getLastCommitGeneration(dir);\n    assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n    \n    boolean corrupted = false;\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    for (SegmentCommitInfo si : sis) {\n      assertTrue(si.info.getUseCompoundFile());\n      List<String> victims = new ArrayList<String>(si.info.files());\n      Collections.shuffle(victims, random());\n      dir.deleteFile(victims.get(0));\n      corrupted = true;\n      break;\n    }\n\n    assertTrue(\"failed to find cfs file to remove: \", corrupted);\n\n    IndexReader reader = null;\n    try {\n      reader = DirectoryReader.open(dir);\n      fail(\"reader did not hit IOException on opening a corrupt index\");\n    } catch (Exception e) {\n    }\n    if (reader != null) {\n      reader.close();\n    }\n    dir.close();\n  }\n\n","bugFix":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","1494abe5dc85557ec2e2772f87660d48f831c3a5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"41307b73b6c5ab4779490d54afb6393c80ba5a3b":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"3c5705cb93fb3daa46c676cad08b916dd57bf1be":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["3c5705cb93fb3daa46c676cad08b916dd57bf1be","b470f36a9372c97283360b1304eacbde22df6c0d"],"05fe562aa248790944d43cdd478f512572835ba0":["5a207d19eac354d649c3f0e2cce070017c78125e"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"aba371508186796cc6151d8223a5b4e16d02e26e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","d19974432be9aed28ee7dca73bdf01d139e763a9"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"9bb9a29a5e71a90295f175df8919802993142c9a":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","41307b73b6c5ab4779490d54afb6393c80ba5a3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["3c5705cb93fb3daa46c676cad08b916dd57bf1be"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","d19974432be9aed28ee7dca73bdf01d139e763a9"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["3c5705cb93fb3daa46c676cad08b916dd57bf1be","b470f36a9372c97283360b1304eacbde22df6c0d"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["41307b73b6c5ab4779490d54afb6393c80ba5a3b"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["aba371508186796cc6151d8223a5b4e16d02e26e","e7b103c0ed2ba7edf422d1ccb5489815dc6acb84"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["e7b103c0ed2ba7edf422d1ccb5489815dc6acb84"],"e7b103c0ed2ba7edf422d1ccb5489815dc6acb84":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","1494abe5dc85557ec2e2772f87660d48f831c3a5"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"b470f36a9372c97283360b1304eacbde22df6c0d":["3c5705cb93fb3daa46c676cad08b916dd57bf1be","8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["438e995b4e32916f631722aab36254146830fefb"],"438e995b4e32916f631722aab36254146830fefb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"41307b73b6c5ab4779490d54afb6393c80ba5a3b":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"3c5705cb93fb3daa46c676cad08b916dd57bf1be":["5a207d19eac354d649c3f0e2cce070017c78125e","6bfe104fc023fadc9e709f8d17403d2cc61133fe","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["438e995b4e32916f631722aab36254146830fefb"],"5a207d19eac354d649c3f0e2cce070017c78125e":["05fe562aa248790944d43cdd478f512572835ba0"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["41307b73b6c5ab4779490d54afb6393c80ba5a3b","9bb9a29a5e71a90295f175df8919802993142c9a"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"aba371508186796cc6151d8223a5b4e16d02e26e":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","d19974432be9aed28ee7dca73bdf01d139e763a9"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["b470f36a9372c97283360b1304eacbde22df6c0d"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"088a7ef694fd43d5d9a4d200c4005865f773d1e7":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e7b103c0ed2ba7edf422d1ccb5489815dc6acb84":["05a14b2611ead08655a2b2bdc61632eb31316e57","088a7ef694fd43d5d9a4d200c4005865f773d1e7"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","e7b103c0ed2ba7edf422d1ccb5489815dc6acb84"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["3c5705cb93fb3daa46c676cad08b916dd57bf1be"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["1494abe5dc85557ec2e2772f87660d48f831c3a5","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"438e995b4e32916f631722aab36254146830fefb":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","1e6acbaae7af722f17204ceccf0f7db5753eccf3","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}