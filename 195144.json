{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String]).mjava","commits":[{"id":"f54f0eff6955cf57610f6b93dbbba3a2bf540619","date":1467968491,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Map[String,DocCollection]).mjava","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   *\n   * @param changedCollections collections that have changed since the last call,\n   *                           and that should fire notifications\n   */\n  private void constructState(Set<String> changedCollections) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        collectionWatches.keySet().size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n\n    for (String collection : changedCollections) {\n      notifyStateWatchers(liveNodes, collection, clusterState.getCollectionOrNull(collection));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   *\n   * @param changedCollections collections that have changed since the last call,\n   *                           and that should fire notifications\n   */\n  private void constructState(Map<String, DocCollection> changedCollections) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        collectionWatches.keySet().size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n\n    for (Map.Entry<String, DocCollection> entry : changedCollections.entrySet()) {\n      notifyStateWatchers(liveNodes, entry.getKey(), entry.getValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   *\n   * @param changedCollections collections that have changed since the last call,\n   *                           and that should fire notifications\n   */\n  private void constructState(Set<String> changedCollections) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        collectionWatches.keySet().size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n\n    for (String collection : changedCollections) {\n      notifyStateWatchers(liveNodes, collection, clusterState.getCollectionOrNull(collection));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8c7f17e23a807049d8e2f0cb429977d5130befa","date":1524005824,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String]).mjava","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   *\n   * @param changedCollections collections that have changed since the last call,\n   *                           and that should fire notifications\n   */\n  private void constructState(Set<String> changedCollections) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        collectionWatches.keySet().size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n\n    notifyCloudCollectionsListeners();\n\n    for (String collection : changedCollections) {\n      notifyStateWatchers(liveNodes, collection, clusterState.getCollectionOrNull(collection));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   *\n   * @param changedCollections collections that have changed since the last call,\n   *                           and that should fire notifications\n   */\n  private void constructState(Set<String> changedCollections) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        collectionWatches.keySet().size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n\n    for (String collection : changedCollections) {\n      notifyStateWatchers(liveNodes, collection, clusterState.getCollectionOrNull(collection));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String]).mjava","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   *\n   * @param changedCollections collections that have changed since the last call,\n   *                           and that should fire notifications\n   */\n  private void constructState(Set<String> changedCollections) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n\n    log.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        collectionWatches.keySet().size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (log.isTraceEnabled()) {\n      log.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n\n    notifyCloudCollectionsListeners();\n\n    for (String collection : changedCollections) {\n      notifyStateWatchers(liveNodes, collection, clusterState.getCollectionOrNull(collection));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   *\n   * @param changedCollections collections that have changed since the last call,\n   *                           and that should fire notifications\n   */\n  private void constructState(Set<String> changedCollections) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        collectionWatches.keySet().size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n\n    notifyCloudCollectionsListeners();\n\n    for (String collection : changedCollections) {\n      notifyStateWatchers(liveNodes, collection, clusterState.getCollectionOrNull(collection));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String]).mjava","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   *\n   * @param changedCollections collections that have changed since the last call,\n   *                           and that should fire notifications\n   */\n  private void constructState(Set<String> changedCollections) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n\n    log.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        collectionWatches.keySet().size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (log.isTraceEnabled()) {\n      log.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n\n    notifyCloudCollectionsListeners();\n\n    for (String collection : changedCollections) {\n      notifyStateWatchers(collection, clusterState.getCollectionOrNull(collection));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   *\n   * @param changedCollections collections that have changed since the last call,\n   *                           and that should fire notifications\n   */\n  private void constructState(Set<String> changedCollections) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n\n    log.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        collectionWatches.keySet().size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (log.isTraceEnabled()) {\n      log.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n\n    notifyCloudCollectionsListeners();\n\n    for (String collection : changedCollections) {\n      notifyStateWatchers(liveNodes, collection, clusterState.getCollectionOrNull(collection));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6dc613ed6f75d1988140301ee8de8fdb056fa337","date":1588034757,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String]).mjava","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   *\n   * @param changedCollections collections that have changed since the last call,\n   *                           and that should fire notifications\n   */\n  private void constructState(Set<String> changedCollections) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet().size(),\n          collectionWatches.keySet().size(),\n          watchedCollectionStates.keySet().size(),\n          lazyCollectionStates.keySet().size(),\n          clusterState.getCollectionStates().size());\n    }\n\n    if (log.isTraceEnabled()) {\n      log.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n\n    notifyCloudCollectionsListeners();\n\n    for (String collection : changedCollections) {\n      notifyStateWatchers(collection, clusterState.getCollectionOrNull(collection));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   *\n   * @param changedCollections collections that have changed since the last call,\n   *                           and that should fire notifications\n   */\n  private void constructState(Set<String> changedCollections) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n\n    log.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        collectionWatches.keySet().size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (log.isTraceEnabled()) {\n      log.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n\n    notifyCloudCollectionsListeners();\n\n    for (String collection : changedCollections) {\n      notifyStateWatchers(collection, clusterState.getCollectionOrNull(collection));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Set[String]).mjava","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   *\n   * @param changedCollections collections that have changed since the last call,\n   *                           and that should fire notifications\n   */\n  private void constructState(Set<String> changedCollections) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>();\n\n    // Add collections\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.put(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(result, liveNodes);\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"clusterStateSet: interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          collectionWatches.keySet().size(),\n          watchedCollectionStates.keySet().size(),\n          lazyCollectionStates.keySet().size(),\n          clusterState.getCollectionStates().size());\n    }\n\n    if (log.isTraceEnabled()) {\n      log.trace(\"clusterStateSet: interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n\n    notifyCloudCollectionsListeners();\n\n    for (String collection : changedCollections) {\n      notifyStateWatchers(collection, clusterState.getCollectionOrNull(collection));\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   *\n   * @param changedCollections collections that have changed since the last call,\n   *                           and that should fire notifications\n   */\n  private void constructState(Set<String> changedCollections) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n\n    if (log.isDebugEnabled()) {\n      log.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet().size(),\n          collectionWatches.keySet().size(),\n          watchedCollectionStates.keySet().size(),\n          lazyCollectionStates.keySet().size(),\n          clusterState.getCollectionStates().size());\n    }\n\n    if (log.isTraceEnabled()) {\n      log.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n\n    notifyCloudCollectionsListeners();\n\n    for (String collection : changedCollections) {\n      notifyStateWatchers(collection, clusterState.getCollectionOrNull(collection));\n    }\n\n  }\n\n","bugFix":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","1072b8e47b50f1c4fb039e1f54a736f381d6f809","2e6a62db2872d21ade436729a86feb50ddea1ee9","6dc613ed6f75d1988140301ee8de8fdb056fa337"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["7b366e7dd3172289251a86be96031af4002cd19c"],"f54f0eff6955cf57610f6b93dbbba3a2bf540619":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8c7f17e23a807049d8e2f0cb429977d5130befa":["f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"7b366e7dd3172289251a86be96031af4002cd19c":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f54f0eff6955cf57610f6b93dbbba3a2bf540619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["c8c7f17e23a807049d8e2f0cb429977d5130befa"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6dc613ed6f75d1988140301ee8de8fdb056fa337":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"f54f0eff6955cf57610f6b93dbbba3a2bf540619":["c8c7f17e23a807049d8e2f0cb429977d5130befa","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f54f0eff6955cf57610f6b93dbbba3a2bf540619","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c8c7f17e23a807049d8e2f0cb429977d5130befa":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"7b366e7dd3172289251a86be96031af4002cd19c":["6dc613ed6f75d1988140301ee8de8fdb056fa337"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["7b366e7dd3172289251a86be96031af4002cd19c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}