{"path":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/hack/MiniYARNCluster.CustomNodeManager#createNodeStatusUpdater(Context,Dispatcher,NodeHealthCheckerService).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/hack/MiniYARNCluster.CustomNodeManager#createNodeStatusUpdater(Context,Dispatcher,NodeHealthCheckerService).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected NodeStatusUpdater createNodeStatusUpdater(Context context,\n        Dispatcher dispatcher, NodeHealthCheckerService healthChecker) {\n      return new NodeStatusUpdaterImpl(context, dispatcher,\n          healthChecker, metrics) {\n        @Override\n        protected ResourceTracker getRMClient() {\n          final ResourceTrackerService rt = resourceManager\n              .getResourceTrackerService();\n          final RecordFactory recordFactory =\n            RecordFactoryProvider.getRecordFactory(null);\n\n          // For in-process communication without RPC\n          return new ResourceTracker() {\n\n            @Override\n            public NodeHeartbeatResponse nodeHeartbeat(\n                NodeHeartbeatRequest request) throws YarnException,\n                IOException {\n              NodeHeartbeatResponse response = recordFactory.newRecordInstance(\n                  NodeHeartbeatResponse.class);\n              try {\n                response = rt.nodeHeartbeat(request);\n              } catch (YarnException e) {\n                LOG.info(\"Exception in heartbeat from node \" + \n                    request.getNodeStatus().getNodeId(), e);\n                throw e;\n              }\n              return response;\n            }\n\n            @Override\n            public RegisterNodeManagerResponse registerNodeManager(\n                RegisterNodeManagerRequest request)\n                throws YarnException, IOException {\n              RegisterNodeManagerResponse response = recordFactory.\n                  newRecordInstance(RegisterNodeManagerResponse.class);\n              try {\n                response = rt.registerNodeManager(request);\n              } catch (YarnException e) {\n                LOG.info(\"Exception in node registration from \"\n                    + request.getNodeId().toString(), e);\n                throw e;\n              }\n              return response;\n            }\n          };\n        };\n\n        @Override\n        protected void stopRMProxy() {\n          return;\n        }\n      };\n    }\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/hack/MiniYARNCluster.CustomNodeManager#createNodeStatusUpdater(Context,Dispatcher,NodeHealthCheckerService).mjava","pathOld":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/hack/MiniYARNCluster.CustomNodeManager#createNodeStatusUpdater(Context,Dispatcher,NodeHealthCheckerService).mjava","sourceNew":"    @Override\n    protected NodeStatusUpdater createNodeStatusUpdater(Context context,\n        Dispatcher dispatcher, NodeHealthCheckerService healthChecker) {\n      return new NodeStatusUpdaterImpl(context, dispatcher,\n          healthChecker, metrics) {\n        @Override\n        protected ResourceTracker getRMClient() {\n          final ResourceTrackerService rt = resourceManager\n              .getResourceTrackerService();\n          final RecordFactory recordFactory =\n            RecordFactoryProvider.getRecordFactory(null);\n\n          // For in-process communication without RPC\n          return new ResourceTracker() {\n\n            @Override\n            public NodeHeartbeatResponse nodeHeartbeat(\n                NodeHeartbeatRequest request) throws YarnException,\n                IOException {\n              NodeHeartbeatResponse response = recordFactory.newRecordInstance(\n                  NodeHeartbeatResponse.class);\n              try {\n                response = rt.nodeHeartbeat(request);\n              } catch (YarnException e) {\n                LOG.info(\"Exception in heartbeat from node \" + \n                    request.getNodeStatus().getNodeId(), e);\n                throw e;\n              }\n              return response;\n            }\n\n            @Override\n            public RegisterNodeManagerResponse registerNodeManager(\n                RegisterNodeManagerRequest request)\n                throws YarnException, IOException {\n              RegisterNodeManagerResponse response = recordFactory.\n                  newRecordInstance(RegisterNodeManagerResponse.class);\n              try {\n                response = rt.registerNodeManager(request);\n              } catch (YarnException e) {\n                LOG.info(\"Exception in node registration from \"\n                    + request.getNodeId().toString(), e);\n                throw e;\n              }\n              return response;\n            }\n          };\n        };\n\n        @Override\n        protected void stopRMProxy() {\n          return;\n        }\n      };\n    }\n","sourceOld":"    @Override\n    protected NodeStatusUpdater createNodeStatusUpdater(Context context,\n        Dispatcher dispatcher, NodeHealthCheckerService healthChecker) {\n      return new NodeStatusUpdaterImpl(context, dispatcher,\n          healthChecker, metrics) {\n        @Override\n        protected ResourceTracker getRMClient() {\n          final ResourceTrackerService rt = resourceManager\n              .getResourceTrackerService();\n          final RecordFactory recordFactory =\n            RecordFactoryProvider.getRecordFactory(null);\n\n          // For in-process communication without RPC\n          return new ResourceTracker() {\n\n            @Override\n            public NodeHeartbeatResponse nodeHeartbeat(\n                NodeHeartbeatRequest request) throws YarnException,\n                IOException {\n              NodeHeartbeatResponse response = recordFactory.newRecordInstance(\n                  NodeHeartbeatResponse.class);\n              try {\n                response = rt.nodeHeartbeat(request);\n              } catch (YarnException e) {\n                LOG.info(\"Exception in heartbeat from node \" + \n                    request.getNodeStatus().getNodeId(), e);\n                throw e;\n              }\n              return response;\n            }\n\n            @Override\n            public RegisterNodeManagerResponse registerNodeManager(\n                RegisterNodeManagerRequest request)\n                throws YarnException, IOException {\n              RegisterNodeManagerResponse response = recordFactory.\n                  newRecordInstance(RegisterNodeManagerResponse.class);\n              try {\n                response = rt.registerNodeManager(request);\n              } catch (YarnException e) {\n                LOG.info(\"Exception in node registration from \"\n                    + request.getNodeId().toString(), e);\n                throw e;\n              }\n              return response;\n            }\n          };\n        };\n\n        @Override\n        protected void stopRMProxy() {\n          return;\n        }\n      };\n    }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}