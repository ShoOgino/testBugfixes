{"path":"lucene/core/src/java/org/apache/lucene/util/NamedSPILoader#checkServiceName(String).mjava","commits":[{"id":"818ed34f5bd799741cc36ac29a92dfcfce9c6950","date":1337699165,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NamedSPILoader#checkServiceName(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Validates that a service name meets the requirements of {@link NamedSPI}\n   */\n  public static boolean checkServiceName(String name) {\n    // based on harmony charset.java\n    if (name.length() >= 128) {\n      throw new IllegalArgumentException(\"Illegal service name: '\" + name + \"' is too long (must be < 128 chars).\");\n    }\n    for (int i = 0; i < name.length(); i++) {\n      char c = name.charAt(i);\n      if (!isLetter(c) && !isDigit(c)) {\n        throw new IllegalArgumentException(\"Illegal service name: '\" + name + \"' must be simple ascii alphanumeric.\");\n      }\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NamedSPILoader#checkServiceName(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Validates that a service name meets the requirements of {@link NamedSPI}\n   */\n  public static boolean checkServiceName(String name) {\n    // based on harmony charset.java\n    if (name.length() >= 128) {\n      throw new IllegalArgumentException(\"Illegal service name: '\" + name + \"' is too long (must be < 128 chars).\");\n    }\n    for (int i = 0; i < name.length(); i++) {\n      char c = name.charAt(i);\n      if (!isLetter(c) && !isDigit(c)) {\n        throw new IllegalArgumentException(\"Illegal service name: '\" + name + \"' must be simple ascii alphanumeric.\");\n      }\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"718655a894a765091a6c32c07c934cec9d30a6e8","date":1343172487,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NamedSPILoader#checkServiceName(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NamedSPILoader#checkServiceName(String).mjava","sourceNew":"  /**\n   * Validates that a service name meets the requirements of {@link NamedSPI}\n   */\n  public static void checkServiceName(String name) {\n    // based on harmony charset.java\n    if (name.length() >= 128) {\n      throw new IllegalArgumentException(\"Illegal service name: '\" + name + \"' is too long (must be < 128 chars).\");\n    }\n    for (int i = 0, len = name.length(); i < len; i++) {\n      char c = name.charAt(i);\n      if (!isLetterOrDigit(c)) {\n        throw new IllegalArgumentException(\"Illegal service name: '\" + name + \"' must be simple ascii alphanumeric.\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Validates that a service name meets the requirements of {@link NamedSPI}\n   */\n  public static boolean checkServiceName(String name) {\n    // based on harmony charset.java\n    if (name.length() >= 128) {\n      throw new IllegalArgumentException(\"Illegal service name: '\" + name + \"' is too long (must be < 128 chars).\");\n    }\n    for (int i = 0; i < name.length(); i++) {\n      char c = name.charAt(i);\n      if (!isLetter(c) && !isDigit(c)) {\n        throw new IllegalArgumentException(\"Illegal service name: '\" + name + \"' must be simple ascii alphanumeric.\");\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NamedSPILoader#checkServiceName(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NamedSPILoader#checkServiceName(String).mjava","sourceNew":"  /**\n   * Validates that a service name meets the requirements of {@link NamedSPI}\n   */\n  public static void checkServiceName(String name) {\n    // based on harmony charset.java\n    if (name.length() >= 128) {\n      throw new IllegalArgumentException(\"Illegal service name: '\" + name + \"' is too long (must be < 128 chars).\");\n    }\n    for (int i = 0, len = name.length(); i < len; i++) {\n      char c = name.charAt(i);\n      if (!isLetterOrDigit(c)) {\n        throw new IllegalArgumentException(\"Illegal service name: '\" + name + \"' must be simple ascii alphanumeric.\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Validates that a service name meets the requirements of {@link NamedSPI}\n   */\n  public static boolean checkServiceName(String name) {\n    // based on harmony charset.java\n    if (name.length() >= 128) {\n      throw new IllegalArgumentException(\"Illegal service name: '\" + name + \"' is too long (must be < 128 chars).\");\n    }\n    for (int i = 0; i < name.length(); i++) {\n      char c = name.charAt(i);\n      if (!isLetter(c) && !isDigit(c)) {\n        throw new IllegalArgumentException(\"Illegal service name: '\" + name + \"' must be simple ascii alphanumeric.\");\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NamedSPILoader#checkServiceName(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NamedSPILoader#checkServiceName(String).mjava","sourceNew":"  /**\n   * Validates that a service name meets the requirements of {@link NamedSPI}\n   */\n  public static void checkServiceName(String name) {\n    // based on harmony charset.java\n    if (name.length() >= 128) {\n      throw new IllegalArgumentException(\"Illegal service name: '\" + name + \"' is too long (must be < 128 chars).\");\n    }\n    for (int i = 0, len = name.length(); i < len; i++) {\n      char c = name.charAt(i);\n      if (!isLetterOrDigit(c)) {\n        throw new IllegalArgumentException(\"Illegal service name: '\" + name + \"' must be simple ascii alphanumeric.\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Validates that a service name meets the requirements of {@link NamedSPI}\n   */\n  public static boolean checkServiceName(String name) {\n    // based on harmony charset.java\n    if (name.length() >= 128) {\n      throw new IllegalArgumentException(\"Illegal service name: '\" + name + \"' is too long (must be < 128 chars).\");\n    }\n    for (int i = 0; i < name.length(); i++) {\n      char c = name.charAt(i);\n      if (!isLetter(c) && !isDigit(c)) {\n        throw new IllegalArgumentException(\"Illegal service name: '\" + name + \"' must be simple ascii alphanumeric.\");\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NamedSPILoader#checkServiceName(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NamedSPILoader#checkServiceName(String).mjava","sourceNew":"  /**\n   * Validates that a service name meets the requirements of {@link NamedSPI}\n   */\n  public static void checkServiceName(String name) {\n    // based on harmony charset.java\n    if (name.length() >= 128) {\n      throw new IllegalArgumentException(\"Illegal service name: '\" + name + \"' is too long (must be < 128 chars).\");\n    }\n    for (int i = 0, len = name.length(); i < len; i++) {\n      char c = name.charAt(i);\n      if (!isLetterOrDigit(c)) {\n        throw new IllegalArgumentException(\"Illegal service name: '\" + name + \"' must be simple ascii alphanumeric.\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Validates that a service name meets the requirements of {@link NamedSPI}\n   */\n  public static boolean checkServiceName(String name) {\n    // based on harmony charset.java\n    if (name.length() >= 128) {\n      throw new IllegalArgumentException(\"Illegal service name: '\" + name + \"' is too long (must be < 128 chars).\");\n    }\n    for (int i = 0; i < name.length(); i++) {\n      char c = name.charAt(i);\n      if (!isLetter(c) && !isDigit(c)) {\n        throw new IllegalArgumentException(\"Illegal service name: '\" + name + \"' must be simple ascii alphanumeric.\");\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"818ed34f5bd799741cc36ac29a92dfcfce9c6950":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","818ed34f5bd799741cc36ac29a92dfcfce9c6950"],"aba371508186796cc6151d8223a5b4e16d02e26e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","5a1a22b1ad88b436661458df567f3fdb446392a4"],"718655a894a765091a6c32c07c934cec9d30a6e8":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","718655a894a765091a6c32c07c934cec9d30a6e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"818ed34f5bd799741cc36ac29a92dfcfce9c6950":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["aba371508186796cc6151d8223a5b4e16d02e26e","718655a894a765091a6c32c07c934cec9d30a6e8","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"718655a894a765091a6c32c07c934cec9d30a6e8":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["818ed34f5bd799741cc36ac29a92dfcfce9c6950","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}