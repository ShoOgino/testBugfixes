{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodeNameVsShardCount(String,ClusterState,List[String]).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodeNameVsShardCount(String,ClusterState,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getNodeNameVsShardCount(String,ClusterState,List[String]).mjava","sourceNew":"  private static HashMap<String, ReplicaCount> getNodeNameVsShardCount(String collectionName,\n                                                                       ClusterState clusterState, List<String> createNodeList) {\n    Set<String> nodes = clusterState.getLiveNodes();\n\n    List<String> nodeList = new ArrayList<>(nodes.size());\n    nodeList.addAll(nodes);\n    if (createNodeList != null) nodeList.retainAll(createNodeList);\n\n    HashMap<String, ReplicaCount> nodeNameVsShardCount = new HashMap<>();\n    for (String s : nodeList) {\n      nodeNameVsShardCount.put(s, new ReplicaCount(s));\n    }\n    if (createNodeList != null) { // Overrides petty considerations about maxShardsPerNode\n      if (createNodeList.size() != nodeNameVsShardCount.size()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"At least one of the node(s) specified \" + createNodeList + \" are not currently active in \"\n                + nodeNameVsShardCount.keySet() + \", no action taken.\");\n      }\n      return nodeNameVsShardCount;\n    }\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Integer maxShardsPerNode = coll.getMaxShardsPerNode();\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection c = entry.getValue();\n      //identify suitable nodes  by checking the no:of cores in each of them\n      for (Slice slice : c.getSlices()) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          ReplicaCount count = nodeNameVsShardCount.get(replica.getNodeName());\n          if (count != null) {\n            count.totalNodes++; // Used ot \"weigh\" whether this node should be used later.\n            if (entry.getKey().equals(collectionName)) {\n              count.thisCollectionNodes++;\n              if (count.thisCollectionNodes >= maxShardsPerNode) nodeNameVsShardCount.remove(replica.getNodeName());\n            }\n          }\n        }\n      }\n    }\n\n    return nodeNameVsShardCount;\n  }\n\n","sourceOld":"  private static HashMap<String, ReplicaCount> getNodeNameVsShardCount(String collectionName,\n                                                                       ClusterState clusterState, List<String> createNodeList) {\n    Set<String> nodes = clusterState.getLiveNodes();\n\n    List<String> nodeList = new ArrayList<>(nodes.size());\n    nodeList.addAll(nodes);\n    if (createNodeList != null) nodeList.retainAll(createNodeList);\n\n    HashMap<String, ReplicaCount> nodeNameVsShardCount = new HashMap<>();\n    for (String s : nodeList) {\n      nodeNameVsShardCount.put(s, new ReplicaCount(s));\n    }\n    if (createNodeList != null) { // Overrides petty considerations about maxShardsPerNode\n      if (createNodeList.size() != nodeNameVsShardCount.size()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"At least one of the node(s) specified \" + createNodeList + \" are not currently active in \"\n                + nodeNameVsShardCount.keySet() + \", no action taken.\");\n      }\n      return nodeNameVsShardCount;\n    }\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Integer maxShardsPerNode = coll.getMaxShardsPerNode();\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection c = entry.getValue();\n      //identify suitable nodes  by checking the no:of cores in each of them\n      for (Slice slice : c.getSlices()) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          ReplicaCount count = nodeNameVsShardCount.get(replica.getNodeName());\n          if (count != null) {\n            count.totalNodes++; // Used ot \"weigh\" whether this node should be used later.\n            if (entry.getKey().equals(collectionName)) {\n              count.thisCollectionNodes++;\n              if (count.thisCollectionNodes >= maxShardsPerNode) nodeNameVsShardCount.remove(replica.getNodeName());\n            }\n          }\n        }\n      }\n    }\n\n    return nodeNameVsShardCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodeNameVsShardCount(String,ClusterState,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getNodeNameVsShardCount(String,ClusterState,List[String]).mjava","sourceNew":"  private static HashMap<String, ReplicaCount> getNodeNameVsShardCount(String collectionName,\n                                                                       ClusterState clusterState, List<String> createNodeList) {\n    Set<String> nodes = clusterState.getLiveNodes();\n\n    List<String> nodeList = new ArrayList<>(nodes.size());\n    nodeList.addAll(nodes);\n    if (createNodeList != null) nodeList.retainAll(createNodeList);\n\n    HashMap<String, ReplicaCount> nodeNameVsShardCount = new HashMap<>();\n    for (String s : nodeList) {\n      nodeNameVsShardCount.put(s, new ReplicaCount(s));\n    }\n    if (createNodeList != null) { // Overrides petty considerations about maxShardsPerNode\n      if (createNodeList.size() != nodeNameVsShardCount.size()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"At least one of the node(s) specified \" + createNodeList + \" are not currently active in \"\n                + nodeNameVsShardCount.keySet() + \", no action taken.\");\n      }\n      return nodeNameVsShardCount;\n    }\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Integer maxShardsPerNode = coll.getMaxShardsPerNode();\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection c = entry.getValue();\n      //identify suitable nodes  by checking the no:of cores in each of them\n      for (Slice slice : c.getSlices()) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          ReplicaCount count = nodeNameVsShardCount.get(replica.getNodeName());\n          if (count != null) {\n            count.totalNodes++; // Used ot \"weigh\" whether this node should be used later.\n            if (entry.getKey().equals(collectionName)) {\n              count.thisCollectionNodes++;\n              if (count.thisCollectionNodes >= maxShardsPerNode) nodeNameVsShardCount.remove(replica.getNodeName());\n            }\n          }\n        }\n      }\n    }\n\n    return nodeNameVsShardCount;\n  }\n\n","sourceOld":"  private static HashMap<String, ReplicaCount> getNodeNameVsShardCount(String collectionName,\n                                                                       ClusterState clusterState, List<String> createNodeList) {\n    Set<String> nodes = clusterState.getLiveNodes();\n\n    List<String> nodeList = new ArrayList<>(nodes.size());\n    nodeList.addAll(nodes);\n    if (createNodeList != null) nodeList.retainAll(createNodeList);\n\n    HashMap<String, ReplicaCount> nodeNameVsShardCount = new HashMap<>();\n    for (String s : nodeList) {\n      nodeNameVsShardCount.put(s, new ReplicaCount(s));\n    }\n    if (createNodeList != null) { // Overrides petty considerations about maxShardsPerNode\n      if (createNodeList.size() != nodeNameVsShardCount.size()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"At least one of the node(s) specified \" + createNodeList + \" are not currently active in \"\n                + nodeNameVsShardCount.keySet() + \", no action taken.\");\n      }\n      return nodeNameVsShardCount;\n    }\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Integer maxShardsPerNode = coll.getMaxShardsPerNode();\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection c = entry.getValue();\n      //identify suitable nodes  by checking the no:of cores in each of them\n      for (Slice slice : c.getSlices()) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          ReplicaCount count = nodeNameVsShardCount.get(replica.getNodeName());\n          if (count != null) {\n            count.totalNodes++; // Used ot \"weigh\" whether this node should be used later.\n            if (entry.getKey().equals(collectionName)) {\n              count.thisCollectionNodes++;\n              if (count.thisCollectionNodes >= maxShardsPerNode) nodeNameVsShardCount.remove(replica.getNodeName());\n            }\n          }\n        }\n      }\n    }\n\n    return nodeNameVsShardCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deea3439de4f487ae553317e50d5d641ca386374","date":1537522941,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodeNameVsShardCount(String,ClusterState,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodeNameVsShardCount(String,ClusterState,List[String]).mjava","sourceNew":"  private static HashMap<String, ReplicaCount> getNodeNameVsShardCount(String collectionName,\n                                                                       ClusterState clusterState, List<String> createNodeList) {\n    Set<String> nodes = clusterState.getLiveNodes();\n\n    List<String> nodeList = new ArrayList<>(nodes.size());\n    nodeList.addAll(nodes);\n    if (createNodeList != null) nodeList.retainAll(createNodeList);\n\n    HashMap<String, ReplicaCount> nodeNameVsShardCount = new HashMap<>();\n    for (String s : nodeList) {\n      nodeNameVsShardCount.put(s, new ReplicaCount(s));\n    }\n    if (createNodeList != null) { // Overrides petty considerations about maxShardsPerNode\n      if (createNodeList.size() != nodeNameVsShardCount.size()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"At least one of the node(s) specified \" + createNodeList + \" are not currently active in \"\n                + nodeNameVsShardCount.keySet() + \", no action taken.\");\n      }\n      return nodeNameVsShardCount;\n    }\n    DocCollection coll = clusterState.getCollection(collectionName);\n    int maxShardsPerNode = coll.getMaxShardsPerNode() == -1 ? Integer.MAX_VALUE : coll.getMaxShardsPerNode();\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection c = entry.getValue();\n      //identify suitable nodes  by checking the no:of cores in each of them\n      for (Slice slice : c.getSlices()) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          ReplicaCount count = nodeNameVsShardCount.get(replica.getNodeName());\n          if (count != null) {\n            count.totalNodes++; // Used ot \"weigh\" whether this node should be used later.\n            if (entry.getKey().equals(collectionName)) {\n              count.thisCollectionNodes++;\n              if (count.thisCollectionNodes >= maxShardsPerNode) nodeNameVsShardCount.remove(replica.getNodeName());\n            }\n          }\n        }\n      }\n    }\n\n    return nodeNameVsShardCount;\n  }\n\n","sourceOld":"  private static HashMap<String, ReplicaCount> getNodeNameVsShardCount(String collectionName,\n                                                                       ClusterState clusterState, List<String> createNodeList) {\n    Set<String> nodes = clusterState.getLiveNodes();\n\n    List<String> nodeList = new ArrayList<>(nodes.size());\n    nodeList.addAll(nodes);\n    if (createNodeList != null) nodeList.retainAll(createNodeList);\n\n    HashMap<String, ReplicaCount> nodeNameVsShardCount = new HashMap<>();\n    for (String s : nodeList) {\n      nodeNameVsShardCount.put(s, new ReplicaCount(s));\n    }\n    if (createNodeList != null) { // Overrides petty considerations about maxShardsPerNode\n      if (createNodeList.size() != nodeNameVsShardCount.size()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"At least one of the node(s) specified \" + createNodeList + \" are not currently active in \"\n                + nodeNameVsShardCount.keySet() + \", no action taken.\");\n      }\n      return nodeNameVsShardCount;\n    }\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Integer maxShardsPerNode = coll.getMaxShardsPerNode();\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection c = entry.getValue();\n      //identify suitable nodes  by checking the no:of cores in each of them\n      for (Slice slice : c.getSlices()) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          ReplicaCount count = nodeNameVsShardCount.get(replica.getNodeName());\n          if (count != null) {\n            count.totalNodes++; // Used ot \"weigh\" whether this node should be used later.\n            if (entry.getKey().equals(collectionName)) {\n              count.thisCollectionNodes++;\n              if (count.thisCollectionNodes >= maxShardsPerNode) nodeNameVsShardCount.remove(replica.getNodeName());\n            }\n          }\n        }\n      }\n    }\n\n    return nodeNameVsShardCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1fec8b37cbb6884a64d39565e9dd7b4522a0598","date":1537699559,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodeNameVsShardCount(String,ClusterState,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodeNameVsShardCount(String,ClusterState,List[String]).mjava","sourceNew":"  private static HashMap<String, ReplicaCount> getNodeNameVsShardCount(String collectionName,\n                                                                       ClusterState clusterState, List<String> createNodeList) {\n    Set<String> nodes = clusterState.getLiveNodes();\n\n    List<String> nodeList = new ArrayList<>(nodes.size());\n    nodeList.addAll(nodes);\n    if (createNodeList != null) nodeList.retainAll(createNodeList);\n\n    HashMap<String, ReplicaCount> nodeNameVsShardCount = new HashMap<>();\n    for (String s : nodeList) {\n      nodeNameVsShardCount.put(s, new ReplicaCount(s));\n    }\n    if (createNodeList != null) { // Overrides petty considerations about maxShardsPerNode\n      if (createNodeList.size() != nodeNameVsShardCount.size()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"At least one of the node(s) specified \" + createNodeList + \" are not currently active in \"\n                + nodeNameVsShardCount.keySet() + \", no action taken.\");\n      }\n      return nodeNameVsShardCount;\n    }\n    DocCollection coll = clusterState.getCollection(collectionName);\n    int maxShardsPerNode = coll.getMaxShardsPerNode() == -1 ? Integer.MAX_VALUE : coll.getMaxShardsPerNode();\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection c = entry.getValue();\n      //identify suitable nodes  by checking the no:of cores in each of them\n      for (Slice slice : c.getSlices()) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          ReplicaCount count = nodeNameVsShardCount.get(replica.getNodeName());\n          if (count != null) {\n            count.totalNodes++; // Used ot \"weigh\" whether this node should be used later.\n            if (entry.getKey().equals(collectionName)) {\n              count.thisCollectionNodes++;\n              if (count.thisCollectionNodes >= maxShardsPerNode) nodeNameVsShardCount.remove(replica.getNodeName());\n            }\n          }\n        }\n      }\n    }\n\n    return nodeNameVsShardCount;\n  }\n\n","sourceOld":"  private static HashMap<String, ReplicaCount> getNodeNameVsShardCount(String collectionName,\n                                                                       ClusterState clusterState, List<String> createNodeList) {\n    Set<String> nodes = clusterState.getLiveNodes();\n\n    List<String> nodeList = new ArrayList<>(nodes.size());\n    nodeList.addAll(nodes);\n    if (createNodeList != null) nodeList.retainAll(createNodeList);\n\n    HashMap<String, ReplicaCount> nodeNameVsShardCount = new HashMap<>();\n    for (String s : nodeList) {\n      nodeNameVsShardCount.put(s, new ReplicaCount(s));\n    }\n    if (createNodeList != null) { // Overrides petty considerations about maxShardsPerNode\n      if (createNodeList.size() != nodeNameVsShardCount.size()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"At least one of the node(s) specified \" + createNodeList + \" are not currently active in \"\n                + nodeNameVsShardCount.keySet() + \", no action taken.\");\n      }\n      return nodeNameVsShardCount;\n    }\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Integer maxShardsPerNode = coll.getMaxShardsPerNode();\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection c = entry.getValue();\n      //identify suitable nodes  by checking the no:of cores in each of them\n      for (Slice slice : c.getSlices()) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          ReplicaCount count = nodeNameVsShardCount.get(replica.getNodeName());\n          if (count != null) {\n            count.totalNodes++; // Used ot \"weigh\" whether this node should be used later.\n            if (entry.getKey().equals(collectionName)) {\n              count.thisCollectionNodes++;\n              if (count.thisCollectionNodes >= maxShardsPerNode) nodeNameVsShardCount.remove(replica.getNodeName());\n            }\n          }\n        }\n      }\n    }\n\n    return nodeNameVsShardCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea","date":1538045138,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodeNameVsShardCount(String,ClusterState,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodeNameVsShardCount(String,ClusterState,List[String]).mjava","sourceNew":"  static HashMap<String, ReplicaCount> getNodeNameVsShardCount(String collectionName,\n                                                                       ClusterState clusterState, List<String> createNodeList) {\n    Set<String> nodes = clusterState.getLiveNodes();\n\n    List<String> nodeList = new ArrayList<>(nodes.size());\n    nodeList.addAll(nodes);\n    if (createNodeList != null) nodeList.retainAll(createNodeList);\n\n    HashMap<String, ReplicaCount> nodeNameVsShardCount = new HashMap<>();\n    for (String s : nodeList) {\n      nodeNameVsShardCount.put(s, new ReplicaCount(s));\n    }\n    if (createNodeList != null) { // Overrides petty considerations about maxShardsPerNode\n      if (createNodeList.size() != nodeNameVsShardCount.size()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"At least one of the node(s) specified \" + createNodeList + \" are not currently active in \"\n                + nodeNameVsShardCount.keySet() + \", no action taken.\");\n      }\n      return nodeNameVsShardCount;\n    }\n    DocCollection coll = clusterState.getCollection(collectionName);\n    int maxShardsPerNode = coll.getMaxShardsPerNode() == -1 ? Integer.MAX_VALUE : coll.getMaxShardsPerNode();\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection c = entry.getValue();\n      //identify suitable nodes  by checking the no:of cores in each of them\n      for (Slice slice : c.getSlices()) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          ReplicaCount count = nodeNameVsShardCount.get(replica.getNodeName());\n          if (count != null) {\n            count.totalNodes++; // Used to \"weigh\" whether this node should be used later.\n            if (entry.getKey().equals(collectionName)) {\n              count.thisCollectionNodes++;\n              if (count.thisCollectionNodes >= maxShardsPerNode) nodeNameVsShardCount.remove(replica.getNodeName());\n            }\n          }\n        }\n      }\n    }\n\n    return nodeNameVsShardCount;\n  }\n\n","sourceOld":"  private static HashMap<String, ReplicaCount> getNodeNameVsShardCount(String collectionName,\n                                                                       ClusterState clusterState, List<String> createNodeList) {\n    Set<String> nodes = clusterState.getLiveNodes();\n\n    List<String> nodeList = new ArrayList<>(nodes.size());\n    nodeList.addAll(nodes);\n    if (createNodeList != null) nodeList.retainAll(createNodeList);\n\n    HashMap<String, ReplicaCount> nodeNameVsShardCount = new HashMap<>();\n    for (String s : nodeList) {\n      nodeNameVsShardCount.put(s, new ReplicaCount(s));\n    }\n    if (createNodeList != null) { // Overrides petty considerations about maxShardsPerNode\n      if (createNodeList.size() != nodeNameVsShardCount.size()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"At least one of the node(s) specified \" + createNodeList + \" are not currently active in \"\n                + nodeNameVsShardCount.keySet() + \", no action taken.\");\n      }\n      return nodeNameVsShardCount;\n    }\n    DocCollection coll = clusterState.getCollection(collectionName);\n    int maxShardsPerNode = coll.getMaxShardsPerNode() == -1 ? Integer.MAX_VALUE : coll.getMaxShardsPerNode();\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection c = entry.getValue();\n      //identify suitable nodes  by checking the no:of cores in each of them\n      for (Slice slice : c.getSlices()) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          ReplicaCount count = nodeNameVsShardCount.get(replica.getNodeName());\n          if (count != null) {\n            count.totalNodes++; // Used ot \"weigh\" whether this node should be used later.\n            if (entry.getKey().equals(collectionName)) {\n              count.thisCollectionNodes++;\n              if (count.thisCollectionNodes >= maxShardsPerNode) nodeNameVsShardCount.remove(replica.getNodeName());\n            }\n          }\n        }\n      }\n    }\n\n    return nodeNameVsShardCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76574dac4558817234ef087dd38728569cc93bff","date":1591547057,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodeNameVsShardCount(String,ClusterState,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodeNameVsShardCount(String,ClusterState,List[String]).mjava","sourceNew":"  static HashMap<String, ReplicaCount> getNodeNameVsShardCount(String collectionName,\n                                                                       ClusterState clusterState, List<String> createNodeList) {\n    HashMap<String, ReplicaCount> nodeNameVsShardCount = new HashMap<>();\n    for (String s : throwIfAnyNotLive(createNodeList, clusterState)) {\n      nodeNameVsShardCount.put(s, new ReplicaCount(s));\n    }\n\n    // if we were given a list, just use that, don't worry about counts\n    if (createNodeList != null) { // Overrides petty considerations about maxShardsPerNode\n      return nodeNameVsShardCount;\n    }\n\n    // if we get here we were not given a createNodeList, build a map with real counts.\n    DocCollection coll = clusterState.getCollection(collectionName);\n    int maxShardsPerNode = coll.getMaxShardsPerNode() == -1 ? Integer.MAX_VALUE : coll.getMaxShardsPerNode();\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection c = entry.getValue();\n      //identify suitable nodes  by checking the no:of cores in each of them\n      for (Slice slice : c.getSlices()) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          ReplicaCount count = nodeNameVsShardCount.get(replica.getNodeName());\n          if (count != null) {\n            count.totalNodes++; // Used to \"weigh\" whether this node should be used later.\n            if (entry.getKey().equals(collectionName)) {\n              count.thisCollectionNodes++;\n              if (count.thisCollectionNodes >= maxShardsPerNode) nodeNameVsShardCount.remove(replica.getNodeName());\n            }\n          }\n        }\n      }\n    }\n\n    return nodeNameVsShardCount;\n  }\n\n","sourceOld":"  static HashMap<String, ReplicaCount> getNodeNameVsShardCount(String collectionName,\n                                                                       ClusterState clusterState, List<String> createNodeList) {\n    Set<String> nodes = clusterState.getLiveNodes();\n\n    List<String> nodeList = new ArrayList<>(nodes.size());\n    nodeList.addAll(nodes);\n    if (createNodeList != null) nodeList.retainAll(createNodeList);\n\n    HashMap<String, ReplicaCount> nodeNameVsShardCount = new HashMap<>();\n    for (String s : nodeList) {\n      nodeNameVsShardCount.put(s, new ReplicaCount(s));\n    }\n    if (createNodeList != null) { // Overrides petty considerations about maxShardsPerNode\n      if (createNodeList.size() != nodeNameVsShardCount.size()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"At least one of the node(s) specified \" + createNodeList + \" are not currently active in \"\n                + nodeNameVsShardCount.keySet() + \", no action taken.\");\n      }\n      return nodeNameVsShardCount;\n    }\n    DocCollection coll = clusterState.getCollection(collectionName);\n    int maxShardsPerNode = coll.getMaxShardsPerNode() == -1 ? Integer.MAX_VALUE : coll.getMaxShardsPerNode();\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection c = entry.getValue();\n      //identify suitable nodes  by checking the no:of cores in each of them\n      for (Slice slice : c.getSlices()) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          ReplicaCount count = nodeNameVsShardCount.get(replica.getNodeName());\n          if (count != null) {\n            count.totalNodes++; // Used to \"weigh\" whether this node should be used later.\n            if (entry.getKey().equals(collectionName)) {\n              count.thisCollectionNodes++;\n              if (count.thisCollectionNodes >= maxShardsPerNode) nodeNameVsShardCount.remove(replica.getNodeName());\n            }\n          }\n        }\n      }\n    }\n\n    return nodeNameVsShardCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8946843123ed22c63230024259fe1a8bfa7ab71","date":1591549365,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodeNameVsShardCount(String,ClusterState,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodeNameVsShardCount(String,ClusterState,List[String]).mjava","sourceNew":"  static HashMap<String, ReplicaCount> getNodeNameVsShardCount(String collectionName,\n                                                                       ClusterState clusterState, List<String> createNodeList) {\n    Set<String> nodes = clusterState.getLiveNodes();\n\n    List<String> nodeList = new ArrayList<>(nodes.size());\n    nodeList.addAll(nodes);\n    if (createNodeList != null) nodeList.retainAll(createNodeList);\n\n    HashMap<String, ReplicaCount> nodeNameVsShardCount = new HashMap<>();\n    for (String s : nodeList) {\n      nodeNameVsShardCount.put(s, new ReplicaCount(s));\n    }\n    if (createNodeList != null) { // Overrides petty considerations about maxShardsPerNode\n      if (createNodeList.size() != nodeNameVsShardCount.size()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"At least one of the node(s) specified \" + createNodeList + \" are not currently active in \"\n                + nodeNameVsShardCount.keySet() + \", no action taken.\");\n      }\n      return nodeNameVsShardCount;\n    }\n    DocCollection coll = clusterState.getCollection(collectionName);\n    int maxShardsPerNode = coll.getMaxShardsPerNode() == -1 ? Integer.MAX_VALUE : coll.getMaxShardsPerNode();\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection c = entry.getValue();\n      //identify suitable nodes  by checking the no:of cores in each of them\n      for (Slice slice : c.getSlices()) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          ReplicaCount count = nodeNameVsShardCount.get(replica.getNodeName());\n          if (count != null) {\n            count.totalNodes++; // Used to \"weigh\" whether this node should be used later.\n            if (entry.getKey().equals(collectionName)) {\n              count.thisCollectionNodes++;\n              if (count.thisCollectionNodes >= maxShardsPerNode) nodeNameVsShardCount.remove(replica.getNodeName());\n            }\n          }\n        }\n      }\n    }\n\n    return nodeNameVsShardCount;\n  }\n\n","sourceOld":"  static HashMap<String, ReplicaCount> getNodeNameVsShardCount(String collectionName,\n                                                                       ClusterState clusterState, List<String> createNodeList) {\n    HashMap<String, ReplicaCount> nodeNameVsShardCount = new HashMap<>();\n    for (String s : throwIfAnyNotLive(createNodeList, clusterState)) {\n      nodeNameVsShardCount.put(s, new ReplicaCount(s));\n    }\n\n    // if we were given a list, just use that, don't worry about counts\n    if (createNodeList != null) { // Overrides petty considerations about maxShardsPerNode\n      return nodeNameVsShardCount;\n    }\n\n    // if we get here we were not given a createNodeList, build a map with real counts.\n    DocCollection coll = clusterState.getCollection(collectionName);\n    int maxShardsPerNode = coll.getMaxShardsPerNode() == -1 ? Integer.MAX_VALUE : coll.getMaxShardsPerNode();\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection c = entry.getValue();\n      //identify suitable nodes  by checking the no:of cores in each of them\n      for (Slice slice : c.getSlices()) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          ReplicaCount count = nodeNameVsShardCount.get(replica.getNodeName());\n          if (count != null) {\n            count.totalNodes++; // Used to \"weigh\" whether this node should be used later.\n            if (entry.getKey().equals(collectionName)) {\n              count.thisCollectionNodes++;\n              if (count.thisCollectionNodes >= maxShardsPerNode) nodeNameVsShardCount.remove(replica.getNodeName());\n            }\n          }\n        }\n      }\n    }\n\n    return nodeNameVsShardCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"762e7d1b8822c5271a29e9f308660638d1501c08","date":1592065068,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodeNameVsShardCount(String,ClusterState,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodeNameVsShardCount(String,ClusterState,List[String]).mjava","sourceNew":"  static HashMap<String, ReplicaCount> getNodeNameVsShardCount(String collectionName,\n                                                                       ClusterState clusterState, List<String> createNodeList) {\n    HashMap<String, ReplicaCount> nodeNameVsShardCount = new HashMap<>();\n    List<String> liveNodes = createNodeList == null || createNodeList.isEmpty() ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        checkLiveNodes(createNodeList, clusterState);\n\n    for (String s : liveNodes) {\n      nodeNameVsShardCount.put(s, new ReplicaCount(s));\n    }\n\n    // if we were given a list, just use that, don't worry about counts\n    if (createNodeList != null) { // Overrides petty considerations about maxShardsPerNode\n      return nodeNameVsShardCount;\n    }\n\n    // if we get here we were not given a createNodeList, build a map with real counts.\n    DocCollection coll = clusterState.getCollection(collectionName);\n    int maxShardsPerNode = coll.getMaxShardsPerNode() == -1 ? Integer.MAX_VALUE : coll.getMaxShardsPerNode();\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection c = entry.getValue();\n      //identify suitable nodes  by checking the no:of cores in each of them\n      for (Slice slice : c.getSlices()) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          ReplicaCount count = nodeNameVsShardCount.get(replica.getNodeName());\n          if (count != null) {\n            count.totalNodes++; // Used to \"weigh\" whether this node should be used later.\n            if (entry.getKey().equals(collectionName)) {\n              count.thisCollectionNodes++;\n              if (count.thisCollectionNodes >= maxShardsPerNode) nodeNameVsShardCount.remove(replica.getNodeName());\n            }\n          }\n        }\n      }\n    }\n\n    return nodeNameVsShardCount;\n  }\n\n","sourceOld":"  static HashMap<String, ReplicaCount> getNodeNameVsShardCount(String collectionName,\n                                                                       ClusterState clusterState, List<String> createNodeList) {\n    Set<String> nodes = clusterState.getLiveNodes();\n\n    List<String> nodeList = new ArrayList<>(nodes.size());\n    nodeList.addAll(nodes);\n    if (createNodeList != null) nodeList.retainAll(createNodeList);\n\n    HashMap<String, ReplicaCount> nodeNameVsShardCount = new HashMap<>();\n    for (String s : nodeList) {\n      nodeNameVsShardCount.put(s, new ReplicaCount(s));\n    }\n    if (createNodeList != null) { // Overrides petty considerations about maxShardsPerNode\n      if (createNodeList.size() != nodeNameVsShardCount.size()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"At least one of the node(s) specified \" + createNodeList + \" are not currently active in \"\n                + nodeNameVsShardCount.keySet() + \", no action taken.\");\n      }\n      return nodeNameVsShardCount;\n    }\n    DocCollection coll = clusterState.getCollection(collectionName);\n    int maxShardsPerNode = coll.getMaxShardsPerNode() == -1 ? Integer.MAX_VALUE : coll.getMaxShardsPerNode();\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection c = entry.getValue();\n      //identify suitable nodes  by checking the no:of cores in each of them\n      for (Slice slice : c.getSlices()) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          ReplicaCount count = nodeNameVsShardCount.get(replica.getNodeName());\n          if (count != null) {\n            count.totalNodes++; // Used to \"weigh\" whether this node should be used later.\n            if (entry.getKey().equals(collectionName)) {\n              count.thisCollectionNodes++;\n              if (count.thisCollectionNodes >= maxShardsPerNode) nodeNameVsShardCount.remove(replica.getNodeName());\n            }\n          }\n        }\n      }\n    }\n\n    return nodeNameVsShardCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodeNameVsShardCount(String,ClusterState,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodeNameVsShardCount(String,ClusterState,List[String]).mjava","sourceNew":"  static HashMap<String, ReplicaCount> getNodeNameVsShardCount(String collectionName,\n                                                                       ClusterState clusterState, List<String> createNodeList) {\n    HashMap<String, ReplicaCount> nodeNameVsShardCount = new HashMap<>();\n    List<String> liveNodes = createNodeList == null || createNodeList.isEmpty() ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        checkLiveNodes(createNodeList, clusterState);\n\n    for (String s : liveNodes) {\n      nodeNameVsShardCount.put(s, new ReplicaCount(s));\n    }\n\n    // if we were given a list, just use that, don't worry about counts\n    if (createNodeList != null) {\n      return nodeNameVsShardCount;\n    }\n\n    // if we get here we were not given a createNodeList, build a map with real counts.\n    DocCollection coll = clusterState.getCollection(collectionName);\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection c = entry.getValue();\n      //identify suitable nodes  by checking the no:of cores in each of them\n      for (Slice slice : c.getSlices()) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          ReplicaCount count = nodeNameVsShardCount.get(replica.getNodeName());\n          if (count != null) {\n            count.totalNodes++; // Used to \"weigh\" whether this node should be used later.\n            if (entry.getKey().equals(collectionName)) {\n              count.thisCollectionNodes++;\n            }\n          }\n        }\n      }\n    }\n\n    return nodeNameVsShardCount;\n  }\n\n","sourceOld":"  static HashMap<String, ReplicaCount> getNodeNameVsShardCount(String collectionName,\n                                                                       ClusterState clusterState, List<String> createNodeList) {\n    HashMap<String, ReplicaCount> nodeNameVsShardCount = new HashMap<>();\n    List<String> liveNodes = createNodeList == null || createNodeList.isEmpty() ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        checkLiveNodes(createNodeList, clusterState);\n\n    for (String s : liveNodes) {\n      nodeNameVsShardCount.put(s, new ReplicaCount(s));\n    }\n\n    // if we were given a list, just use that, don't worry about counts\n    if (createNodeList != null) { // Overrides petty considerations about maxShardsPerNode\n      return nodeNameVsShardCount;\n    }\n\n    // if we get here we were not given a createNodeList, build a map with real counts.\n    DocCollection coll = clusterState.getCollection(collectionName);\n    int maxShardsPerNode = coll.getMaxShardsPerNode() == -1 ? Integer.MAX_VALUE : coll.getMaxShardsPerNode();\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection c = entry.getValue();\n      //identify suitable nodes  by checking the no:of cores in each of them\n      for (Slice slice : c.getSlices()) {\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          ReplicaCount count = nodeNameVsShardCount.get(replica.getNodeName());\n          if (count != null) {\n            count.totalNodes++; // Used to \"weigh\" whether this node should be used later.\n            if (entry.getKey().equals(collectionName)) {\n              count.thisCollectionNodes++;\n              if (count.thisCollectionNodes >= maxShardsPerNode) nodeNameVsShardCount.remove(replica.getNodeName());\n            }\n          }\n        }\n      }\n    }\n\n    return nodeNameVsShardCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["b94236357aaa22b76c10629851fe4e376e0cea82","deea3439de4f487ae553317e50d5d641ca386374"],"76574dac4558817234ef087dd38728569cc93bff":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"deea3439de4f487ae553317e50d5d641ca386374":["b94236357aaa22b76c10629851fe4e376e0cea82"],"762e7d1b8822c5271a29e9f308660638d1501c08":["e8946843123ed22c63230024259fe1a8bfa7ab71"],"e8946843123ed22c63230024259fe1a8bfa7ab71":["76574dac4558817234ef087dd38728569cc93bff"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["762e7d1b8822c5271a29e9f308660638d1501c08"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598","deea3439de4f487ae553317e50d5d641ca386374"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["76574dac4558817234ef087dd38728569cc93bff"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"76574dac4558817234ef087dd38728569cc93bff":["e8946843123ed22c63230024259fe1a8bfa7ab71"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"deea3439de4f487ae553317e50d5d641ca386374":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"762e7d1b8822c5271a29e9f308660638d1501c08":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e8946843123ed22c63230024259fe1a8bfa7ab71":["762e7d1b8822c5271a29e9f308660638d1501c08"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}