{"path":"lucene/sandbox/src/test/org/apache/lucene/geo/TestTessellator#testLinesIntersect().mjava","commits":[{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/geo/TestTessellator#testLinesIntersect().mjava","pathOld":"/dev/null","sourceNew":"  public void testLinesIntersect() {\n    Rectangle rect = nextBox();\n    // quantize lat/lon of bounding box:\n    int minX = encodeLongitude(rect.minLon);\n    int maxX = encodeLongitude(rect.maxLon);\n    int minY = encodeLatitude(rect.minLat);\n    int maxY = encodeLatitude(rect.maxLat);\n    // simple case; test intersecting diagonals\n    assertTrue(Tessellator.linesIntersect(minX, minY, maxX, maxY, maxX, minY, minX, maxY));\n    // test closest encoded value\n    assertFalse(Tessellator.linesIntersect(minX, maxY, maxX, maxY, minX - 1, minY, minX - 1, maxY));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/geo/TestTessellator#testLinesIntersect().mjava","pathOld":"/dev/null","sourceNew":"  public void testLinesIntersect() {\n    Rectangle rect = nextBox();\n    // quantize lat/lon of bounding box:\n    int minX = encodeLongitude(rect.minLon);\n    int maxX = encodeLongitude(rect.maxLon);\n    int minY = encodeLatitude(rect.minLat);\n    int maxY = encodeLatitude(rect.maxLat);\n    // simple case; test intersecting diagonals\n    assertTrue(Tessellator.linesIntersect(minX, minY, maxX, maxY, maxX, minY, minX, maxY));\n    // test closest encoded value\n    assertFalse(Tessellator.linesIntersect(minX, maxY, maxX, maxY, minX - 1, minY, minX - 1, maxY));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"caec89ca18b89c6103b097c1a90e92cc1cc0b5fe","date":1531629943,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/geo/TestTessellator#testLinesIntersect().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/TestTessellator#testLinesIntersect().mjava","sourceNew":"  /** test line intersection */\n  public void testLinesIntersect() {\n    Rectangle rect = nextBoxNotCrossingDateline();\n    // simple case; test intersecting diagonals\n    // note: we don't quantize because the tessellator operates on non quantized vertices\n    assertTrue(Tessellator.linesIntersect(rect.minLon, rect.minLat, rect.maxLon, rect.maxLat, rect.maxLon, rect.minLat, rect.minLon, rect.maxLat));\n    // test closest encoded value\n    assertFalse(Tessellator.linesIntersect(rect.minLon, rect.maxLat, rect.maxLon, rect.maxLat, rect.minLon - 1d, rect.minLat, rect.minLon - 1, rect.maxLat));\n  }\n\n","sourceOld":"  public void testLinesIntersect() {\n    Rectangle rect = nextBox();\n    // quantize lat/lon of bounding box:\n    int minX = encodeLongitude(rect.minLon);\n    int maxX = encodeLongitude(rect.maxLon);\n    int minY = encodeLatitude(rect.minLat);\n    int maxY = encodeLatitude(rect.maxLat);\n    // simple case; test intersecting diagonals\n    assertTrue(Tessellator.linesIntersect(minX, minY, maxX, maxY, maxX, minY, minX, maxY));\n    // test closest encoded value\n    assertFalse(Tessellator.linesIntersect(minX, maxY, maxX, maxY, minX - 1, minY, minX - 1, maxY));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/geo/TestTessellator#testLinesIntersect().mjava","pathOld":"/dev/null","sourceNew":"  /** test line intersection */\n  public void testLinesIntersect() {\n    Rectangle rect = nextBoxNotCrossingDateline();\n    // simple case; test intersecting diagonals\n    // note: we don't quantize because the tessellator operates on non quantized vertices\n    assertTrue(Tessellator.linesIntersect(rect.minLon, rect.minLat, rect.maxLon, rect.maxLat, rect.maxLon, rect.minLat, rect.minLon, rect.maxLat));\n    // test closest encoded value\n    assertFalse(Tessellator.linesIntersect(rect.minLon, rect.maxLat, rect.maxLon, rect.maxLat, rect.minLon - 1d, rect.minLat, rect.minLon - 1, rect.maxLat));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestTessellator#testLinesIntersect().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/TestTessellator#testLinesIntersect().mjava","sourceNew":"  /** test line intersection */\n  public void testLinesIntersect() {\n    Rectangle rect = nextBoxNotCrossingDateline();\n    // simple case; test intersecting diagonals\n    // note: we don't quantize because the tessellator operates on non quantized vertices\n    assertTrue(Tessellator.linesIntersect(rect.minLon, rect.minLat, rect.maxLon, rect.maxLat, rect.maxLon, rect.minLat, rect.minLon, rect.maxLat));\n    // test closest encoded value\n    assertFalse(Tessellator.linesIntersect(rect.minLon, rect.maxLat, rect.maxLon, rect.maxLat, rect.minLon - 1d, rect.minLat, rect.minLon - 1, rect.maxLat));\n  }\n\n","sourceOld":"  /** test line intersection */\n  public void testLinesIntersect() {\n    Rectangle rect = nextBoxNotCrossingDateline();\n    // simple case; test intersecting diagonals\n    // note: we don't quantize because the tessellator operates on non quantized vertices\n    assertTrue(Tessellator.linesIntersect(rect.minLon, rect.minLat, rect.maxLon, rect.maxLat, rect.maxLon, rect.minLat, rect.minLon, rect.maxLat));\n    // test closest encoded value\n    assertFalse(Tessellator.linesIntersect(rect.minLon, rect.maxLat, rect.maxLon, rect.maxLat, rect.minLon - 1d, rect.minLat, rect.minLon - 1, rect.maxLat));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"caec89ca18b89c6103b097c1a90e92cc1cc0b5fe":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","caec89ca18b89c6103b097c1a90e92cc1cc0b5fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["caec89ca18b89c6103b097c1a90e92cc1cc0b5fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["caec89ca18b89c6103b097c1a90e92cc1cc0b5fe","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"caec89ca18b89c6103b097c1a90e92cc1cc0b5fe":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","09c1e6d465800c73af60624bf9d4459a19f7940c"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}