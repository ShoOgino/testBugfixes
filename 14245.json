{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testMultitokenWrapping().mjava","commits":[{"id":"25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd","date":1526034899,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testMultitokenWrapping().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultitokenWrapping() throws IOException {\n    CannedTokenStream cts = new CannedTokenStream(\n        new Token(\"tokenpos1\", 0, 9),\n        new Token(\"tokenpos2\", 10, 19),\n        new Token(\"tokenpos3\", 20, 29),\n        new Token(\"tokenpos4\", 30, 39)\n    );\n\n    TokenStream ts = new ConditionalTokenFilter(cts, TokenSplitter::new) {\n      final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      @Override\n      protected boolean shouldFilter() throws IOException {\n        return termAtt.toString().contains(\"2\") == false;\n      }\n    };\n\n    assertTokenStreamContents(ts, new String[]{\n        \"toke\", \"npos1\", \"tokenpos2\", \"toke\", \"npos3\", \"toke\", \"npos4\"\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57e34488c685935a055be1bc57b850be1e8c850d","date":1526645499,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testMultitokenWrapping().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestConditionalTokenFilter#testMultitokenWrapping().mjava","sourceNew":"  public void testMultitokenWrapping() throws IOException {\n    TokenStream stream = whitespaceMockTokenizer(\"tokenpos1 tokenpos2 tokenpos3 tokenpos4\");\n    TokenStream ts = new SkipMatchingFilter(stream, TokenSplitter::new, \".*2.*\");\n    assertTokenStreamContents(ts, new String[]{\n        \"toke\", \"npos1\", \"tokenpos2\", \"toke\", \"npos3\", \"toke\", \"npos4\"\n    });\n  }\n\n","sourceOld":"  public void testMultitokenWrapping() throws IOException {\n    CannedTokenStream cts = new CannedTokenStream(\n        new Token(\"tokenpos1\", 0, 9),\n        new Token(\"tokenpos2\", 10, 19),\n        new Token(\"tokenpos3\", 20, 29),\n        new Token(\"tokenpos4\", 30, 39)\n    );\n\n    TokenStream ts = new ConditionalTokenFilter(cts, TokenSplitter::new) {\n      final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n      @Override\n      protected boolean shouldFilter() throws IOException {\n        return termAtt.toString().contains(\"2\") == false;\n      }\n    };\n\n    assertTokenStreamContents(ts, new String[]{\n        \"toke\", \"npos1\", \"tokenpos2\", \"toke\", \"npos3\", \"toke\", \"npos4\"\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57e34488c685935a055be1bc57b850be1e8c850d":["25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd"],"25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57e34488c685935a055be1bc57b850be1e8c850d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd"],"57e34488c685935a055be1bc57b850be1e8c850d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd":["57e34488c685935a055be1bc57b850be1e8c850d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}