{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyWriter#getParent(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyWriter#getParent(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyWriter#getParent(int).mjava","sourceNew":"  /**\n   * getParent() returns the ordinal of the parent category of the category\n   * with the given ordinal.\n   * <P>\n   * When a category is specified as a path name, finding the path of its\n   * parent is as trivial as dropping the last component of the path.\n   * getParent() is functionally equivalent to calling getPath() on the\n   * given ordinal, dropping the last component of the path, and then calling\n   * getOrdinal() to get an ordinal back. \n   * <P>\n   * If the given ordinal is the ROOT_ORDINAL, an INVALID_ORDINAL is returned.\n   * If the given ordinal is a top-level category, the ROOT_ORDINAL is returned.\n   * If an invalid ordinal is given (negative or beyond the last available\n   * ordinal), an ArrayIndexOutOfBoundsException is thrown. However, it is\n   * expected that getParent will only be called for ordinals which are\n   * already known to be in the taxonomy.\n   * TODO (Facet): instead of a getParent(ordinal) method, consider having a\n   * <P>\n   * getCategory(categorypath, prefixlen) which is similar to addCategory\n   * except it doesn't add new categories; This method can be used to get\n   * the ordinals of all prefixes of the given category, and it can use\n   * exactly the same code and cache used by addCategory() so it means less code.\n   */\n  public int getParent(int ordinal) throws IOException;\n\n","sourceOld":"  /**\n   * getParent() returns the ordinal of the parent category of the category\n   * with the given ordinal.\n   * <P>\n   * When a category is specified as a path name, finding the path of its\n   * parent is as trivial as dropping the last component of the path.\n   * getParent() is functionally equivalent to calling getPath() on the\n   * given ordinal, dropping the last component of the path, and then calling\n   * getOrdinal() to get an ordinal back. \n   * <P>\n   * If the given ordinal is the ROOT_ORDINAL, an INVALID_ORDINAL is returned.\n   * If the given ordinal is a top-level category, the ROOT_ORDINAL is returned.\n   * If an invalid ordinal is given (negative or beyond the last available\n   * ordinal), an ArrayIndexOutOfBoundsException is thrown. However, it is\n   * expected that getParent will only be called for ordinals which are\n   * already known to be in the taxonomy.\n   * TODO (Facet): instead of a getParent(ordinal) method, consider having a\n   * <P>\n   * getCategory(categorypath, prefixlen) which is similar to addCategory\n   * except it doesn't add new categories; This method can be used to get\n   * the ordinals of all prefixes of the given category, and it can use\n   * exactly the same code and cache used by addCategory() so it means less code.\n   */\n  public int getParent(int ordinal) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyWriter#getParent(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyWriter#getParent(int).mjava","sourceNew":"  /**\n   * getParent() returns the ordinal of the parent category of the category\n   * with the given ordinal.\n   * <P>\n   * When a category is specified as a path name, finding the path of its\n   * parent is as trivial as dropping the last component of the path.\n   * getParent() is functionally equivalent to calling getPath() on the\n   * given ordinal, dropping the last component of the path, and then calling\n   * getOrdinal() to get an ordinal back. \n   * <P>\n   * If the given ordinal is the ROOT_ORDINAL, an INVALID_ORDINAL is returned.\n   * If the given ordinal is a top-level category, the ROOT_ORDINAL is returned.\n   * If an invalid ordinal is given (negative or beyond the last available\n   * ordinal), an IndexOutOfBoundsException is thrown. However, it is\n   * expected that getParent will only be called for ordinals which are\n   * already known to be in the taxonomy.\n   * TODO (Facet): instead of a getParent(ordinal) method, consider having a\n   * <P>\n   * getCategory(categorypath, prefixlen) which is similar to addCategory\n   * except it doesn't add new categories; This method can be used to get\n   * the ordinals of all prefixes of the given category, and it can use\n   * exactly the same code and cache used by addCategory() so it means less code.\n   */\n  public int getParent(int ordinal) throws IOException;\n\n","sourceOld":"  /**\n   * getParent() returns the ordinal of the parent category of the category\n   * with the given ordinal.\n   * <P>\n   * When a category is specified as a path name, finding the path of its\n   * parent is as trivial as dropping the last component of the path.\n   * getParent() is functionally equivalent to calling getPath() on the\n   * given ordinal, dropping the last component of the path, and then calling\n   * getOrdinal() to get an ordinal back. \n   * <P>\n   * If the given ordinal is the ROOT_ORDINAL, an INVALID_ORDINAL is returned.\n   * If the given ordinal is a top-level category, the ROOT_ORDINAL is returned.\n   * If an invalid ordinal is given (negative or beyond the last available\n   * ordinal), an ArrayIndexOutOfBoundsException is thrown. However, it is\n   * expected that getParent will only be called for ordinals which are\n   * already known to be in the taxonomy.\n   * TODO (Facet): instead of a getParent(ordinal) method, consider having a\n   * <P>\n   * getCategory(categorypath, prefixlen) which is similar to addCategory\n   * except it doesn't add new categories; This method can be used to get\n   * the ordinals of all prefixes of the given category, and it can use\n   * exactly the same code and cache used by addCategory() so it means less code.\n   */\n  public int getParent(int ordinal) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"456d7e7092cb043c740b4674301660ee8abc26fe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["456d7e7092cb043c740b4674301660ee8abc26fe"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["456d7e7092cb043c740b4674301660ee8abc26fe"],"456d7e7092cb043c740b4674301660ee8abc26fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}