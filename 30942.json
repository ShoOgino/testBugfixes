{"path":"src/java/org/apache/lucene/index/IndexWriter#optimize(boolean).mjava","commits":[{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#optimize(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Just like {@link #optimize()}, except you can specify\n   *  whether the call should block until the optimize\n   *  completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads. */\n  public void optimize(boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n    flush();\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext())\n        ((MergePolicy.OneMerge) it.next()).optimize = true;\n\n      it = runningMerges.iterator();\n      while(it.hasNext())\n        ((MergePolicy.OneMerge) it.next()).optimize = true;\n    }\n\n    maybeMerge(true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(optimizeMergesPending()) {\n          try {\n            wait();\n          } catch (InterruptedException ie) {\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) mergeExceptions.get(0);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                err.initCause(merge.getException());\n                throw err;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["67006a60923e2124212d3baa0d29b444bcbd8373"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67006a60923e2124212d3baa0d29b444bcbd8373","date":1191425052,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#optimize(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#optimize(boolean).mjava","sourceNew":"  /** Just like {@link #optimize()}, except you can specify\n   *  whether the call should block until the optimize\n   *  completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads. */\n  public void optimize(boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush();\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext())\n        ((MergePolicy.OneMerge) it.next()).optimize = true;\n\n      it = runningMerges.iterator();\n      while(it.hasNext())\n        ((MergePolicy.OneMerge) it.next()).optimize = true;\n    }\n\n    maybeMerge(true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(optimizeMergesPending()) {\n          try {\n            wait();\n          } catch (InterruptedException ie) {\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) mergeExceptions.get(0);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                err.initCause(merge.getException());\n                throw err;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","sourceOld":"  /** Just like {@link #optimize()}, except you can specify\n   *  whether the call should block until the optimize\n   *  completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads. */\n  public void optimize(boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n    flush();\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext())\n        ((MergePolicy.OneMerge) it.next()).optimize = true;\n\n      it = runningMerges.iterator();\n      while(it.hasNext())\n        ((MergePolicy.OneMerge) it.next()).optimize = true;\n    }\n\n    maybeMerge(true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(optimizeMergesPending()) {\n          try {\n            wait();\n          } catch (InterruptedException ie) {\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) mergeExceptions.get(0);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                err.initCause(merge.getException());\n                throw err;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52e9359ec09a0ce311e6ce95805998bebc7f7fd0","date":1196417385,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#optimize(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#optimize(boolean).mjava","sourceNew":"  /** Just like {@link #optimize()}, except you can specify\n   *  whether the call should block until the optimize\n   *  completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads. */\n  public void optimize(boolean doWait) throws CorruptIndexException, IOException {\n    optimize(1, true);\n  }\n\n","sourceOld":"  /** Just like {@link #optimize()}, except you can specify\n   *  whether the call should block until the optimize\n   *  completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads. */\n  public void optimize(boolean doWait) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (infoStream != null)\n      message(\"optimize: index now \" + segString());\n\n    flush();\n\n    synchronized(this) {\n      resetMergeExceptions();\n      segmentsToOptimize = new HashSet();\n      final int numSegments = segmentInfos.size();\n      for(int i=0;i<numSegments;i++)\n        segmentsToOptimize.add(segmentInfos.info(i));\n      \n      // Now mark all pending & running merges as optimize\n      // merge:\n      Iterator it = pendingMerges.iterator();\n      while(it.hasNext())\n        ((MergePolicy.OneMerge) it.next()).optimize = true;\n\n      it = runningMerges.iterator();\n      while(it.hasNext())\n        ((MergePolicy.OneMerge) it.next()).optimize = true;\n    }\n\n    maybeMerge(true);\n\n    if (doWait) {\n      synchronized(this) {\n        while(optimizeMergesPending()) {\n          try {\n            wait();\n          } catch (InterruptedException ie) {\n          }\n\n          if (mergeExceptions.size() > 0) {\n            // Forward any exceptions in background merge\n            // threads to the current thread:\n            final int size = mergeExceptions.size();\n            for(int i=0;i<size;i++) {\n              final MergePolicy.OneMerge merge = (MergePolicy.OneMerge) mergeExceptions.get(0);\n              if (merge.optimize) {\n                IOException err = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n                err.initCause(merge.getException());\n                throw err;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the optimization\n  }\n\n","bugFix":null,"bugIntro":["8abe157325e35ee8e6b8b367c0449cc11b2ecfec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8abe157325e35ee8e6b8b367c0449cc11b2ecfec","date":1208511344,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#optimize(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#optimize(boolean).mjava","sourceNew":"  /** Just like {@link #optimize()}, except you can specify\n   *  whether the call should block until the optimize\n   *  completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads. */\n  public void optimize(boolean doWait) throws CorruptIndexException, IOException {\n    optimize(1, doWait);\n  }\n\n","sourceOld":"  /** Just like {@link #optimize()}, except you can specify\n   *  whether the call should block until the optimize\n   *  completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads. */\n  public void optimize(boolean doWait) throws CorruptIndexException, IOException {\n    optimize(1, true);\n  }\n\n","bugFix":["52e9359ec09a0ce311e6ce95805998bebc7f7fd0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9665d17707cc21b1db995118ff36129723139ab","date":1225384420,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#optimize(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#optimize(boolean).mjava","sourceNew":"  /** Just like {@link #optimize()}, except you can specify\n   *  whether the call should block until the optimize\n   *  completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(boolean doWait) throws CorruptIndexException, IOException {\n    optimize(1, doWait);\n  }\n\n","sourceOld":"  /** Just like {@link #optimize()}, except you can specify\n   *  whether the call should block until the optimize\n   *  completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads. */\n  public void optimize(boolean doWait) throws CorruptIndexException, IOException {\n    optimize(1, doWait);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#optimize(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#optimize(boolean).mjava","sourceNew":"  /** Just like {@link #optimize()}, except you can specify\n   *  whether the call should block until the optimize\n   *  completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(boolean doWait) throws CorruptIndexException, IOException {\n    optimize(1, doWait);\n  }\n\n","sourceOld":"  /** Just like {@link #optimize()}, except you can specify\n   *  whether the call should block until the optimize\n   *  completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   */\n  public void optimize(boolean doWait) throws CorruptIndexException, IOException {\n    optimize(1, doWait);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9665d17707cc21b1db995118ff36129723139ab":["8abe157325e35ee8e6b8b367c0449cc11b2ecfec"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8abe157325e35ee8e6b8b367c0449cc11b2ecfec":["52e9359ec09a0ce311e6ce95805998bebc7f7fd0"],"52e9359ec09a0ce311e6ce95805998bebc7f7fd0":["67006a60923e2124212d3baa0d29b444bcbd8373"],"67006a60923e2124212d3baa0d29b444bcbd8373":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e9665d17707cc21b1db995118ff36129723139ab"]},"commit2Childs":{"e9665d17707cc21b1db995118ff36129723139ab":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["67006a60923e2124212d3baa0d29b444bcbd8373"],"8abe157325e35ee8e6b8b367c0449cc11b2ecfec":["e9665d17707cc21b1db995118ff36129723139ab"],"52e9359ec09a0ce311e6ce95805998bebc7f7fd0":["8abe157325e35ee8e6b8b367c0449cc11b2ecfec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"67006a60923e2124212d3baa0d29b444bcbd8373":["52e9359ec09a0ce311e6ce95805998bebc7f7fd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}