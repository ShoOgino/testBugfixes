{"path":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a&&b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null, \n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null, \n                      \"+term +\\\"phrase phrase\\\"\");\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null, \n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null, \n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null, \n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59959380043274dd52fb071840237c00dc8e57bb","date":1004577157,"type":3,"author":"Brian Goetz","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", null, \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", null, \"�mlaut\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a&&b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null, \n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null, \n                      \"+term +\\\"phrase phrase\\\"\");\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null, \n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null, \n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null, \n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a&&b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null, \n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null, \n                      \"+term +\\\"phrase phrase\\\"\");\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null, \n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null, \n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null, \n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75a271f2fe211a2c88163284dab039557d434ae9","date":1010977359,"type":3,"author":"Brian Goetz","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", null, \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", null, \"�mlaut\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a&&b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null, \n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null, \n                      \"+term +\\\"phrase phrase\\\"\");\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null, \n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null, \n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null, \n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", null, \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", null, \"�mlaut\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a&&b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null, \n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null, \n                      \"+term +\\\"phrase phrase\\\"\");\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null, \n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null, \n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null, \n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d3dec2223c4ab37942f127cae43fbf1cd28731","date":1011232809,"type":3,"author":"Brian Goetz","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", null, \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", null, \"�mlaut\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a&&b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null, \n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null, \n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assert(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assert(getQuery(\"hello\", null) instanceof TermQuery);\n    assert(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null, \n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null, \n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null, \n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", null, \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", null, \"�mlaut\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a&&b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null, \n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null, \n                      \"+term +\\\"phrase phrase\\\"\");\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null, \n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null, \n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null, \n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a36e5fc6b39329bd08caaf6065552fe3535ae743","date":1011235762,"type":3,"author":"Brian Goetz","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", null, \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", null, \"�mlaut\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null, \n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null, \n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assert(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assert(getQuery(\"hello\", null) instanceof TermQuery);\n    assert(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null, \n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null, \n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null, \n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", null, \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", null, \"�mlaut\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a&&b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null, \n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null, \n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assert(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assert(getQuery(\"hello\", null) instanceof TermQuery);\n    assert(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null, \n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null, \n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null, \n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea","date":1012249521,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", null, \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", null, \"�mlaut\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null, \n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null, \n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null, \n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null, \n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null, \n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", null, \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", null, \"�mlaut\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null, \n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null, \n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assert(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assert(getQuery(\"hello\", null) instanceof TermQuery);\n    assert(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null, \n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null, \n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null, \n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30faa4b88cfbc42b6a2df0a91069f710f8ea88bd","date":1014079440,"type":3,"author":"Brian Goetz","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", null, \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", null, \"�mlaut\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null, \n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null, \n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null, \n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null, \n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null, \n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", null, \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", null, \"�mlaut\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null, \n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null, \n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null, \n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null, \n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null, \n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5742a13bc31248b37eec58aaf19da9d165a48d82","date":1026669113,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","sourceNew":"    public void testSimple() throws Exception {\n\tassertQueryEquals(\"term term term\", null, \"term term term\");\n\tassertQueryEquals(\"t�rm term term\", null, \"t�rm term term\");\n\tassertQueryEquals(\"�mlaut\", null, \"�mlaut\");\n\n\tassertQueryEquals(\"a AND b\", null, \"+a +b\");\n\tassertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n\tassertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\tassertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\tassertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\tassertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\tassertQueryEquals(\"a && b\", null, \"+a +b\");\n\tassertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n\tassertQueryEquals(\"a OR b\", null, \"a b\");\n\tassertQueryEquals(\"a || b\", null, \"a b\");\n\tassertQueryEquals(\"a OR !b\", null, \"a -b\");\n\tassertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\tassertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n\tassertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n\tassertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n\t    \"+foo:term +anotherterm\");\n\tassertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n\t    \"+term +\\\"phrase phrase\\\"\");\n\tassertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n\tassertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n\tassertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n\tassertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n\tassertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n\tassertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n\tassertQueryEquals(\"term^2\", null, \"term^2.0\");\n\tassertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n\tassertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n\tassertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n\t    \"+(foo bar) +(baz boo)\");\n\tassertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n\t    \"(+(a b) -c) d\");\n\tassertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n\t    \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n\tassertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n\t    \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", null, \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", null, \"�mlaut\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null, \n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null, \n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null, \n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null, \n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null, \n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","sourceNew":"    public void testSimple() throws Exception {\n\tassertQueryEquals(\"term term term\", null, \"term term term\");\n\tassertQueryEquals(\"t�rm term term\", null, \"t�rm term term\");\n\tassertQueryEquals(\"�mlaut\", null, \"�mlaut\");\n\n\tassertQueryEquals(\"a AND b\", null, \"+a +b\");\n\tassertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n\tassertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\tassertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\tassertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\tassertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\tassertQueryEquals(\"a && b\", null, \"+a +b\");\n\tassertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n\tassertQueryEquals(\"a OR b\", null, \"a b\");\n\tassertQueryEquals(\"a || b\", null, \"a b\");\n\tassertQueryEquals(\"a OR !b\", null, \"a -b\");\n\tassertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\tassertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n\tassertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n\tassertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n\t    \"+foo:term +anotherterm\");\n\tassertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n\t    \"+term +\\\"phrase phrase\\\"\");\n\tassertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n\tassertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n\tassertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n\tassertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n\tassertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n\tassertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n\tassertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n\tassertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n\tassertQueryEquals(\"term^2\", null, \"term^2.0\");\n\tassertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n\tassertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n\tassertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n\t    \"+(foo bar) +(baz boo)\");\n\tassertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n\t    \"(+(a b) -c) d\");\n\tassertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n\t    \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n\tassertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n\t    \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    }\n\n","sourceOld":"    public void testSimple() throws Exception {\n\tassertQueryEquals(\"term term term\", null, \"term term term\");\n\tassertQueryEquals(\"t�rm term term\", null, \"t�rm term term\");\n\tassertQueryEquals(\"�mlaut\", null, \"�mlaut\");\n\n\tassertQueryEquals(\"a AND b\", null, \"+a +b\");\n\tassertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n\tassertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\tassertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\tassertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\tassertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\tassertQueryEquals(\"a && b\", null, \"+a +b\");\n\tassertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n\tassertQueryEquals(\"a OR b\", null, \"a b\");\n\tassertQueryEquals(\"a || b\", null, \"a b\");\n\tassertQueryEquals(\"a OR !b\", null, \"a -b\");\n\tassertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\tassertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n\tassertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n\tassertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n\t    \"+foo:term +anotherterm\");\n\tassertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n\t    \"+term +\\\"phrase phrase\\\"\");\n\tassertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n\tassertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n\tassertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n\tassertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n\tassertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n\tassertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n\tassertQueryEquals(\"term^2\", null, \"term^2.0\");\n\tassertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n\tassertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n\tassertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n\t    \"+(foo bar) +(baz boo)\");\n\tassertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n\t    \"(+(a b) -c) d\");\n\tassertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n\t    \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n\tassertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n\t    \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"105b8c63d8ae43de76f14005b62a5657a4b8d9ce","date":1064896862,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", null, \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", null, \"�mlaut\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n  }\n\n","sourceOld":"    public void testSimple() throws Exception {\n\tassertQueryEquals(\"term term term\", null, \"term term term\");\n\tassertQueryEquals(\"t�rm term term\", null, \"t�rm term term\");\n\tassertQueryEquals(\"�mlaut\", null, \"�mlaut\");\n\n\tassertQueryEquals(\"a AND b\", null, \"+a +b\");\n\tassertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n\tassertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n\tassertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n\tassertQueryEquals(\"a AND -b\", null, \"+a -b\");\n\tassertQueryEquals(\"a AND !b\", null, \"+a -b\");\n\tassertQueryEquals(\"a && b\", null, \"+a +b\");\n\tassertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n\tassertQueryEquals(\"a OR b\", null, \"a b\");\n\tassertQueryEquals(\"a || b\", null, \"a b\");\n\tassertQueryEquals(\"a OR !b\", null, \"a -b\");\n\tassertQueryEquals(\"a OR ! b\", null, \"a -b\");\n\tassertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n\tassertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n\tassertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n\t    \"+foo:term +anotherterm\");\n\tassertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n\t    \"+term +\\\"phrase phrase\\\"\");\n\tassertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n\tassertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n\tassertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n\tassertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n\tassertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n\tassertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n\tassertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n\tassertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n\tassertQueryEquals(\"term^2\", null, \"term^2.0\");\n\tassertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n\tassertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n\tassertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n\t    \"+(foo bar) +(baz boo)\");\n\tassertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n\t    \"(+(a b) -c) d\");\n\tassertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n\t    \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n\tassertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n\t    \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    }\n\n","bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","8b8488cadcd1dfaaf25307c360bb8cbb6ce8ab4f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba81b33140312dc953ef8b8217e92c7de3da201d","date":1085948660,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"t�rm term term\", null, \"t�rm term term\");\n    assertQueryEquals(\"�mlaut\", null, \"�mlaut\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n  }\n\n","bugFix":null,"bugIntro":["2d5979567a033cd4cdf6534532afb2bcab456bc8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bda05fd6d5e78151a87a6a4b7d9d1049b0f5a0f","date":1101251671,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    QueryParser qp = new QueryParser(\"field\", new StandardAnalyzer());\n    // make sure OR is the default:\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(QueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n  }\n\n","bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2d5979567a033cd4cdf6534532afb2bcab456bc8","date":1172604417,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", new WhitespaceAnalyzer(), \"türm term term\");\n    assertQueryEquals(\"ümlaut\", new WhitespaceAnalyzer(), \"ümlaut\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    QueryParser qp = new QueryParser(\"field\", new StandardAnalyzer());\n    // make sure OR is the default:\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(QueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    QueryParser qp = new QueryParser(\"field\", new StandardAnalyzer());\n    // make sure OR is the default:\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(QueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","bugFix":["ba81b33140312dc953ef8b8217e92c7de3da201d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3209168d69949c1320e7af306bbda7e92f05fe13","date":1191075056,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", new WhitespaceAnalyzer(), \"türm term term\");\n    assertQueryEquals(\"ümlaut\", new WhitespaceAnalyzer(), \"ümlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    QueryParser qp = new QueryParser(\"field\", new StandardAnalyzer());\n    // make sure OR is the default:\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(QueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", new WhitespaceAnalyzer(), \"türm term term\");\n    assertQueryEquals(\"ümlaut\", new WhitespaceAnalyzer(), \"ümlaut\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    QueryParser qp = new QueryParser(\"field\", new StandardAnalyzer());\n    // make sure OR is the default:\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(QueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", new WhitespaceAnalyzer(), \"türm term term\");\n    assertQueryEquals(\"ümlaut\", new WhitespaceAnalyzer(), \"ümlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    QueryParser qp = new QueryParser(\"field\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    // make sure OR is the default:\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(QueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", new WhitespaceAnalyzer(), \"türm term term\");\n    assertQueryEquals(\"ümlaut\", new WhitespaceAnalyzer(), \"ümlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    QueryParser qp = new QueryParser(\"field\", new StandardAnalyzer());\n    // make sure OR is the default:\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(QueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", new WhitespaceAnalyzer(), \"türm term term\");\n    assertQueryEquals(\"ümlaut\", new WhitespaceAnalyzer(), \"ümlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    // make sure OR is the default:\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(QueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", new WhitespaceAnalyzer(), \"türm term term\");\n    assertQueryEquals(\"ümlaut\", new WhitespaceAnalyzer(), \"ümlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    QueryParser qp = new QueryParser(\"field\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    // make sure OR is the default:\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(QueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT), \"türm term term\");\n    assertQueryEquals(\"ümlaut\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT), \"ümlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    // make sure OR is the default:\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(QueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", new WhitespaceAnalyzer(), \"türm term term\");\n    assertQueryEquals(\"ümlaut\", new WhitespaceAnalyzer(), \"ümlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    // make sure OR is the default:\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(QueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT), \"türm term term\");\n    assertQueryEquals(\"ümlaut\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT), \"ümlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    // make sure OR is the default:\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(QueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT), \"türm term term\");\n    assertQueryEquals(\"ümlaut\", new WhitespaceAnalyzer(Version.LUCENE_CURRENT), \"ümlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    // make sure OR is the default:\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(QueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT), \"türm term term\");\n    assertQueryEquals(\"ümlaut\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT), \"ümlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    // make sure OR is the default:\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(QueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT), \"türm term term\");\n    assertQueryEquals(\"ümlaut\", new WhitespaceAnalyzer(TEST_VERSION_CURRENT), \"ümlaut\");\n\n    assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    // make sure OR is the default:\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(QueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"75a271f2fe211a2c88163284dab039557d434ae9":["59959380043274dd52fb071840237c00dc8e57bb"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0bda05fd6d5e78151a87a6a4b7d9d1049b0f5a0f":["ba81b33140312dc953ef8b8217e92c7de3da201d"],"3209168d69949c1320e7af306bbda7e92f05fe13":["2d5979567a033cd4cdf6534532afb2bcab456bc8"],"a36e5fc6b39329bd08caaf6065552fe3535ae743":["d4d3dec2223c4ab37942f127cae43fbf1cd28731"],"6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea":["a36e5fc6b39329bd08caaf6065552fe3535ae743"],"30faa4b88cfbc42b6a2df0a91069f710f8ea88bd":["6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["ba1116b3450a9c1642c89445d131b37344055245"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["5742a13bc31248b37eec58aaf19da9d165a48d82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4d3dec2223c4ab37942f127cae43fbf1cd28731":["75a271f2fe211a2c88163284dab039557d434ae9"],"105b8c63d8ae43de76f14005b62a5657a4b8d9ce":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"59959380043274dd52fb071840237c00dc8e57bb":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["3209168d69949c1320e7af306bbda7e92f05fe13"],"ba81b33140312dc953ef8b8217e92c7de3da201d":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce"],"5742a13bc31248b37eec58aaf19da9d165a48d82":["30faa4b88cfbc42b6a2df0a91069f710f8ea88bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"2d5979567a033cd4cdf6534532afb2bcab456bc8":["0bda05fd6d5e78151a87a6a4b7d9d1049b0f5a0f"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["59959380043274dd52fb071840237c00dc8e57bb"],"75a271f2fe211a2c88163284dab039557d434ae9":["d4d3dec2223c4ab37942f127cae43fbf1cd28731"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0bda05fd6d5e78151a87a6a4b7d9d1049b0f5a0f":["2d5979567a033cd4cdf6534532afb2bcab456bc8"],"3209168d69949c1320e7af306bbda7e92f05fe13":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a36e5fc6b39329bd08caaf6065552fe3535ae743":["6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea"],"6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea":["30faa4b88cfbc42b6a2df0a91069f710f8ea88bd"],"30faa4b88cfbc42b6a2df0a91069f710f8ea88bd":["5742a13bc31248b37eec58aaf19da9d165a48d82"],"ba1116b3450a9c1642c89445d131b37344055245":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"d4d3dec2223c4ab37942f127cae43fbf1cd28731":["a36e5fc6b39329bd08caaf6065552fe3535ae743"],"59959380043274dd52fb071840237c00dc8e57bb":["75a271f2fe211a2c88163284dab039557d434ae9"],"105b8c63d8ae43de76f14005b62a5657a4b8d9ce":["ba81b33140312dc953ef8b8217e92c7de3da201d"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"ba81b33140312dc953ef8b8217e92c7de3da201d":["0bda05fd6d5e78151a87a6a4b7d9d1049b0f5a0f"],"5742a13bc31248b37eec58aaf19da9d165a48d82":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"2d5979567a033cd4cdf6534532afb2bcab456bc8":["3209168d69949c1320e7af306bbda7e92f05fe13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}