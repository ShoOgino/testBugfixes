{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"11e8ea32003f6ccf3282ad6c05ca47eec277e928","date":1428695518,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      protected Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingFilter.IntersectsDifferentiatingVisitor result =\n            intersectsDiffFilter.compute(context, acceptDocs);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final Bits exactDocBits;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet.equals(result.exactDocIdSet)) {\n            return new ConstantScoreScorer(this, score, approxDISI);\n          }\n          exactDocBits = result.exactDocIdSet.bits();\n          assert exactDocBits != null;\n        } else {\n          exactDocBits = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            if (exactDocBits != null && exactDocBits.get(approxDISI.docID())) {\n              return true;\n            }\n\n            return predFuncValues.boolVal(approxDISI.docID());\n          }\n        };\n\n        return new ConstantScoreScorer(this, score, twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7f94ff172f40ff68a926d112e25b96bc38e5a27","date":1431002360,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingFilter.IntersectsDifferentiatingVisitor result =\n            intersectsDiffFilter.compute(context, acceptDocs);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final Bits exactDocBits;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet.equals(result.exactDocIdSet)) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactDocBits = result.exactDocIdSet.bits();\n          assert exactDocBits != null;\n        } else {\n          exactDocBits = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            if (exactDocBits != null && exactDocBits.get(approxDISI.docID())) {\n              return true;\n            }\n\n            return predFuncValues.boolVal(approxDISI.docID());\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      protected Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingFilter.IntersectsDifferentiatingVisitor result =\n            intersectsDiffFilter.compute(context, acceptDocs);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final Bits exactDocBits;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet.equals(result.exactDocIdSet)) {\n            return new ConstantScoreScorer(this, score, approxDISI);\n          }\n          exactDocBits = result.exactDocIdSet.bits();\n          assert exactDocBits != null;\n        } else {\n          exactDocBits = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            if (exactDocBits != null && exactDocBits.get(approxDISI.docID())) {\n              return true;\n            }\n\n            return predFuncValues.boolVal(approxDISI.docID());\n          }\n        };\n\n        return new ConstantScoreScorer(this, score, twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingFilter.IntersectsDifferentiatingVisitor result =\n            intersectsDiffFilter.compute(context, null);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final Bits exactDocBits;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet.equals(result.exactDocIdSet)) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactDocBits = result.exactDocIdSet.bits();\n          assert exactDocBits != null;\n        } else {\n          exactDocBits = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            if (exactDocBits != null && exactDocBits.get(approxDISI.docID())) {\n              return true;\n            }\n\n            return predFuncValues.boolVal(approxDISI.docID());\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingFilter.IntersectsDifferentiatingVisitor result =\n            intersectsDiffFilter.compute(context, acceptDocs);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final Bits exactDocBits;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet.equals(result.exactDocIdSet)) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactDocBits = result.exactDocIdSet.bits();\n          assert exactDocBits != null;\n        } else {\n          exactDocBits = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            if (exactDocBits != null && exactDocBits.get(approxDISI.docID())) {\n              return true;\n            }\n\n            return predFuncValues.boolVal(approxDISI.docID());\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7ba85c4dbdf6980c1a335756c120a697a47fdd0","date":1437036595,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingFilter.IntersectsDifferentiatingVisitor result =\n            intersectsDiffFilter.compute(context, null);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingFilter.IntersectsDifferentiatingVisitor result =\n            intersectsDiffFilter.compute(context, null);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final Bits exactDocBits;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet.equals(result.exactDocIdSet)) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactDocBits = result.exactDocIdSet.bits();\n          assert exactDocBits != null;\n        } else {\n          exactDocBits = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            if (exactDocBits != null && exactDocBits.get(approxDISI.docID())) {\n              return true;\n            }\n\n            return predFuncValues.boolVal(approxDISI.docID());\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingFilter.IntersectsDifferentiatingVisitor result =\n            intersectsDiffFilter.compute(context, null);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final Map valueSourceContext = ValueSource.newContext(searcher);\n\n    return new ConstantScoreWeight(this) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        // Compute approx & exact\n        final IntersectsDifferentiatingQuery.IntersectsDifferentiatingVisitor result =\n            intersectsDiffQuery.compute(context);\n        if (result.approxDocIdSet == null) {\n          return null;\n        }\n        final DocIdSetIterator approxDISI = result.approxDocIdSet.iterator();\n        if (approxDISI == null) {\n          return null;\n        }\n        final DocIdSetIterator exactIterator;\n        if (result.exactDocIdSet != null) {\n          // If both sets are the same, there's nothing to verify; we needn't return a TwoPhaseIterator\n          if (result.approxDocIdSet == result.exactDocIdSet) {\n            return new ConstantScoreScorer(this, score(), approxDISI);\n          }\n          exactIterator = result.exactDocIdSet.iterator();\n          assert exactIterator != null;\n        } else {\n          exactIterator = null;\n        }\n\n        final FunctionValues predFuncValues = predicateValueSource.getValues(valueSourceContext, context);\n\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approxDISI) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approxDISI.docID();\n            if (exactIterator != null) {\n              if (exactIterator.docID() < doc) {\n                exactIterator.advance(doc);\n              }\n              if (exactIterator.docID() == doc) {\n                return true;\n              }\n            }\n\n            return predFuncValues.boolVal(doc);\n          }\n\n          @Override\n          public float matchCost() {\n            return 100; // TODO: use cost of exactIterator.advance() and predFuncValues.boolVal()\n          }\n        };\n\n        return new ConstantScoreScorer(this, score(), twoPhaseIterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["672b198fc3dce868916c727917cae58c2906763d"],"f7ba85c4dbdf6980c1a335756c120a697a47fdd0":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"af2638813028b254a88b418ebeafb541afb49653":["d277693481ea6007c1d83cd503d0859bb3b64d20","112d77ac8d3e10a362516ad834c9a11d35c94234"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"],"672b198fc3dce868916c727917cae58c2906763d":["f7ba85c4dbdf6980c1a335756c120a697a47fdd0"],"11e8ea32003f6ccf3282ad6c05ca47eec277e928":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"f7ba85c4dbdf6980c1a335756c120a697a47fdd0":["672b198fc3dce868916c727917cae58c2906763d"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["f7ba85c4dbdf6980c1a335756c120a697a47fdd0"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"672b198fc3dce868916c727917cae58c2906763d":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"11e8ea32003f6ccf3282ad6c05ca47eec277e928":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}