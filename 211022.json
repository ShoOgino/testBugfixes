{"path":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer#iterator().mjava","commits":[{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonScorer#iterator().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSetIterator iterator() {\n    return new DocIdSetIterator() {\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public long cost() {\n        return cost;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        // we only need to advance docs that are positioned since all docs in the\n        // pq are guaranteed to be beyond the current doc already\n        for(int i=0;i<numSubsOnDoc;i++) {\n          EnumAndScorer sub = subsOnDoc[i];\n          if (sub.posEnum.nextDoc() != NO_MORE_DOCS) {\n            sub.posLeft = sub.posEnum.freq()-1;\n            sub.pos = sub.posEnum.nextPosition();\n          }\n        }\n        pushCurrentDoc();\n        return doNext();\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        // Both positioned docs and docs in the pq might be behind target\n\n        // 1. Advance the PQ\n        if (docIDQueue.size() > 0) {\n          EnumAndScorer top = docIDQueue.top();\n          while (top.posEnum.docID() < target) {\n            if (top.posEnum.advance(target) != NO_MORE_DOCS) {\n              top.posLeft = top.posEnum.freq()-1;\n              top.pos = top.posEnum.nextPosition();\n            }\n            top = docIDQueue.updateTop();\n          }\n        }\n\n        // 2. Advance subsOnDoc\n        for(int i=0;i<numSubsOnDoc;i++) {\n          EnumAndScorer sub = subsOnDoc[i];\n          if (sub.posEnum.advance(target) != NO_MORE_DOCS) {\n            sub.posLeft = sub.posEnum.freq()-1;\n            sub.pos = sub.posEnum.nextPosition();\n          }\n        }\n        pushCurrentDoc();\n        return doNext();\n      }\n\n      private int doNext() throws IOException {\n        assert numSubsOnDoc == 0;\n        assert docIDQueue.top().posEnum.docID() > docID;\n        while (true) {\n          //System.out.println(\"  doNext: cycle\");\n          popCurrentDoc();\n          //System.out.println(\"    docID=\" + docID);\n          if (docID == NO_MORE_DOCS) {\n            return docID;\n          }\n          countMatches();\n          if (freq > 0) {\n            return docID;\n          }\n          for(int i=0;i<numSubsOnDoc;i++) {\n            EnumAndScorer sub = subsOnDoc[i];\n            if (sub.posEnum.nextDoc() != NO_MORE_DOCS) {\n              sub.posLeft = sub.posEnum.freq()-1;\n              sub.pos = sub.posEnum.nextPosition();\n            }\n          }\n          pushCurrentDoc();\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}