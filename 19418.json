{"path":"lucene/src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile(String,SegmentInfo,IOContext).mjava","commits":[{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile(String,SegmentInfo,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile(String,SegmentInfo).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  final Collection<String> createCompoundFile(String fileName, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, fileName, context, checkAbort);\n    for (String file : files) {\n      assert !IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION) \n                : \".del file is not allowed in .cfs: \" + file;\n      assert !IndexFileNames.isSeparateNormsFile(file) \n                : \"separate norms file (.s[0-9]+) is not allowed in .cfs: \" + file;\n      cfsWriter.addFile(file);\n    }\n\n    // Perform the merge\n    cfsWriter.close();\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  final Collection<String> createCompoundFile(String fileName, final SegmentInfo info)\n          throws IOException {\n\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, fileName, checkAbort);\n    for (String file : files) {\n      assert !IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION) \n                : \".del file is not allowed in .cfs: \" + file;\n      assert !IndexFileNames.isSeparateNormsFile(file) \n                : \"separate norms file (.s[0-9]+) is not allowed in .cfs: \" + file;\n      cfsWriter.addFile(file);\n    }\n\n    // Perform the merge\n    cfsWriter.close();\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile(String,SegmentInfo,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile(String,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  final Collection<String> createCompoundFile(String fileName, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = directory.createCompoundOutput(fileName, context);\n    try {\n      for (String file : files) {\n        assert !IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION) \n                  : \".del file is not allowed in .cfs: \" + file;\n        assert !IndexFileNames.isSeparateNormsFile(file) \n                  : \"separate norms file (.s[0-9]+) is not allowed in .cfs: \" + file;\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } finally {\n      cfsDir.close();\n    }\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  final Collection<String> createCompoundFile(String fileName, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, fileName, context, checkAbort);\n    for (String file : files) {\n      assert !IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION) \n                : \".del file is not allowed in .cfs: \" + file;\n      assert !IndexFileNames.isSeparateNormsFile(file) \n                : \"separate norms file (.s[0-9]+) is not allowed in .cfs: \" + file;\n      cfsWriter.addFile(file);\n    }\n\n    // Perform the merge\n    cfsWriter.close();\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile(String,SegmentInfo,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile(String,SegmentInfo).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  final Collection<String> createCompoundFile(String fileName, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = directory.createCompoundOutput(fileName, context);\n    try {\n      for (String file : files) {\n        assert !IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION) \n                  : \".del file is not allowed in .cfs: \" + file;\n        assert !IndexFileNames.isSeparateNormsFile(file) \n                  : \"separate norms file (.s[0-9]+) is not allowed in .cfs: \" + file;\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } finally {\n      cfsDir.close();\n    }\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  final Collection<String> createCompoundFile(String fileName, final SegmentInfo info)\n          throws IOException {\n\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = directory.createCompoundOutput(fileName);\n    try {\n      for (String file : files) {\n        assert !IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION) \n                  : \".del file is not allowed in .cfs: \" + file;\n        assert !IndexFileNames.isSeparateNormsFile(file) \n                  : \"separate norms file (.s[0-9]+) is not allowed in .cfs: \" + file;\n        directory.copy(cfsDir, file, file);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } finally {\n      cfsDir.close();\n    }\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile(String,SegmentInfo,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile(String,SegmentInfo).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  final Collection<String> createCompoundFile(String fileName, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = directory.createCompoundOutput(fileName, context);\n    try {\n      for (String file : files) {\n        assert !IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION) \n                  : \".del file is not allowed in .cfs: \" + file;\n        assert !IndexFileNames.isSeparateNormsFile(file) \n                  : \"separate norms file (.s[0-9]+) is not allowed in .cfs: \" + file;\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } finally {\n      cfsDir.close();\n    }\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  final Collection<String> createCompoundFile(String fileName, final SegmentInfo info)\n          throws IOException {\n\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = directory.createCompoundOutput(fileName);\n    try {\n      for (String file : files) {\n        assert !IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION) \n                  : \".del file is not allowed in .cfs: \" + file;\n        assert !IndexFileNames.isSeparateNormsFile(file) \n                  : \"separate norms file (.s[0-9]+) is not allowed in .cfs: \" + file;\n        directory.copy(cfsDir, file, file);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } finally {\n      cfsDir.close();\n    }\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67aadace85f701c87a4e0721eedcda25d8415a70","date":1314201925,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile(String,SegmentInfo,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile(String,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  final Collection<String> createCompoundFile(String fileName, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    try {\n      for (String file : files) {\n        assert !IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION) \n                  : \".del file is not allowed in .cfs: \" + file;\n        assert !IndexFileNames.isSeparateNormsFile(file) \n                  : \"separate norms file (.s[0-9]+) is not allowed in .cfs: \" + file;\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } finally {\n      cfsDir.close();\n    }\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  final Collection<String> createCompoundFile(String fileName, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = directory.createCompoundOutput(fileName, context);\n    try {\n      for (String file : files) {\n        assert !IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION) \n                  : \".del file is not allowed in .cfs: \" + file;\n        assert !IndexFileNames.isSeparateNormsFile(file) \n                  : \"separate norms file (.s[0-9]+) is not allowed in .cfs: \" + file;\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } finally {\n      cfsDir.close();\n    }\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile(String,SegmentInfo,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile(String,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  final Collection<String> createCompoundFile(String fileName, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    try {\n      for (String file : files) {\n        assert !IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION) \n                  : \".del file is not allowed in .cfs: \" + file;\n        assert !IndexFileNames.isSeparateNormsFile(file) \n                  : \"separate norms file (.s[0-9]+) is not allowed in .cfs: \" + file;\n        directory.copy(cfsDir, file, file, context);\n        mergeState.checkAbort.work(directory.fileLength(file));\n      }\n    } finally {\n      cfsDir.close();\n    }\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  final Collection<String> createCompoundFile(String fileName, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    try {\n      for (String file : files) {\n        assert !IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION) \n                  : \".del file is not allowed in .cfs: \" + file;\n        assert !IndexFileNames.isSeparateNormsFile(file) \n                  : \"separate norms file (.s[0-9]+) is not allowed in .cfs: \" + file;\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } finally {\n      cfsDir.close();\n    }\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#createCompoundFile(Directory,String,CheckAbort,SegmentInfo,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentMerger#createCompoundFile(String,SegmentInfo,IOContext).mjava","sourceNew":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  static final Collection<String> createCompoundFile(Directory directory, String fileName, CheckAbort checkAbort, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    try {\n      for (String file : files) {\n        assert !IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION) \n                  : \".del file is not allowed in .cfs: \" + file;\n        assert !IndexFileNames.isSeparateNormsFile(file) \n                  : \"separate norms file (.s[0-9]+) is not allowed in .cfs: \" + file;\n        directory.copy(cfsDir, file, file, context);\n        checkAbort.work(directory.fileLength(file));\n      }\n    } finally {\n      cfsDir.close();\n    }\n\n    return files;\n  }\n\n","sourceOld":"  /**\n   * NOTE: this method creates a compound file for all files returned by\n   * info.files(). While, generally, this may include separate norms and\n   * deletion files, this SegmentInfo must not reference such files when this\n   * method is called, because they are not allowed within a compound file.\n   */\n  final Collection<String> createCompoundFile(String fileName, final SegmentInfo info, IOContext context)\n          throws IOException {\n\n    // Now merge all added files\n    Collection<String> files = info.files();\n    CompoundFileDirectory cfsDir = new CompoundFileDirectory(directory, fileName, context, true);\n    try {\n      for (String file : files) {\n        assert !IndexFileNames.matchesExtension(file, IndexFileNames.DELETES_EXTENSION) \n                  : \".del file is not allowed in .cfs: \" + file;\n        assert !IndexFileNames.isSeparateNormsFile(file) \n                  : \"separate norms file (.s[0-9]+) is not allowed in .cfs: \" + file;\n        directory.copy(cfsDir, file, file, context);\n        mergeState.checkAbort.work(directory.fileLength(file));\n      }\n    } finally {\n      cfsDir.close();\n    }\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"67aadace85f701c87a4e0721eedcda25d8415a70":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"06584e6e98d592b34e1329b384182f368d2025e8":["67aadace85f701c87a4e0721eedcda25d8415a70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["06584e6e98d592b34e1329b384182f368d2025e8"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"]},"commit2Childs":{"67aadace85f701c87a4e0721eedcda25d8415a70":["06584e6e98d592b34e1329b384182f368d2025e8"],"06584e6e98d592b34e1329b384182f368d2025e8":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["67aadace85f701c87a4e0721eedcda25d8415a70","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}