{"path":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts#testMultiValuedHierarchy().mjava","commits":[{"id":"18085993942ab483c997b0cff727b33c9396f927","date":1384881194,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts#testMultiValuedHierarchy().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiValuedHierarchy() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"a\");\n    config.setMultiValued(\"a\");\n    IndexWriter writer = new FacetIndexWriter(dir, iwc, taxoWriter, config);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"a\", \"path\", \"x\"));\n    doc.add(new FacetField(\"a\", \"path\", \"y\"));\n    writer.addDocument(doc);\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(DirectoryReader.open(writer, true));\n    writer.close();\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    taxoWriter.close();\n    \n    // Aggregate the facet counts:\n    SimpleFacetsCollector c = new SimpleFacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), c);\n    Facets facets = getFacetCounts(taxoReader, config, c);\n    SimpleFacetResult result = facets.getTopChildren(10, \"a\");\n    assertEquals(1, result.labelValues.length);\n    assertEquals(1, result.labelValues[0].value.intValue());\n\n    searcher.getIndexReader().close();\n    taxoReader.close();\n    dir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7554009c97f9365492660c1df175b6349f7ec05c","date":1384886154,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts#testMultiValuedHierarchy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts#testMultiValuedHierarchy().mjava","sourceNew":"  public void testMultiValuedHierarchy() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"a\");\n    config.setMultiValued(\"a\");\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DocumentBuilder builder = new DocumentBuilder(taxoWriter, config);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"a\", \"path\", \"x\"));\n    doc.add(new FacetField(\"a\", \"path\", \"y\"));\n    writer.addDocument(builder.build(doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n    writer.close();\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    taxoWriter.close();\n    \n    // Aggregate the facet counts:\n    SimpleFacetsCollector c = new SimpleFacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), c);\n    Facets facets = getFacetCounts(taxoReader, config, c);\n    SimpleFacetResult result = facets.getTopChildren(10, \"a\");\n    assertEquals(1, result.labelValues.length);\n    assertEquals(1, result.labelValues[0].value.intValue());\n\n    searcher.getIndexReader().close();\n    taxoReader.close();\n    dir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  public void testMultiValuedHierarchy() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"a\");\n    config.setMultiValued(\"a\");\n    IndexWriter writer = new FacetIndexWriter(dir, iwc, taxoWriter, config);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"a\", \"path\", \"x\"));\n    doc.add(new FacetField(\"a\", \"path\", \"y\"));\n    writer.addDocument(doc);\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(DirectoryReader.open(writer, true));\n    writer.close();\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    taxoWriter.close();\n    \n    // Aggregate the facet counts:\n    SimpleFacetsCollector c = new SimpleFacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), c);\n    Facets facets = getFacetCounts(taxoReader, config, c);\n    SimpleFacetResult result = facets.getTopChildren(10, \"a\");\n    assertEquals(1, result.labelValues.length);\n    assertEquals(1, result.labelValues[0].value.intValue());\n\n    searcher.getIndexReader().close();\n    taxoReader.close();\n    dir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"006838107b0cd2051371f3470740d23ec91b1886","date":1384950816,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts#testMultiValuedHierarchy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts#testMultiValuedHierarchy().mjava","sourceNew":"  public void testMultiValuedHierarchy() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"a\", true);\n    config.setMultiValued(\"a\", true);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DocumentBuilder builder = new DocumentBuilder(taxoWriter, config);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"a\", \"path\", \"x\"));\n    doc.add(new FacetField(\"a\", \"path\", \"y\"));\n    writer.addDocument(builder.build(doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    // Aggregate the facet counts:\n    SimpleFacetsCollector c = new SimpleFacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), c);\n    Facets facets = getFacetCounts(taxoReader, config, c);\n    SimpleFacetResult result = facets.getTopChildren(10, \"a\");\n    assertEquals(1, result.labelValues.length);\n    assertEquals(1, result.labelValues[0].value.intValue());\n\n    IOUtils.close(writer, taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testMultiValuedHierarchy() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"a\");\n    config.setMultiValued(\"a\");\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DocumentBuilder builder = new DocumentBuilder(taxoWriter, config);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"a\", \"path\", \"x\"));\n    doc.add(new FacetField(\"a\", \"path\", \"y\"));\n    writer.addDocument(builder.build(doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n    writer.close();\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    taxoWriter.close();\n    \n    // Aggregate the facet counts:\n    SimpleFacetsCollector c = new SimpleFacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), c);\n    Facets facets = getFacetCounts(taxoReader, config, c);\n    SimpleFacetResult result = facets.getTopChildren(10, \"a\");\n    assertEquals(1, result.labelValues.length);\n    assertEquals(1, result.labelValues[0].value.intValue());\n\n    searcher.getIndexReader().close();\n    taxoReader.close();\n    dir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce7aff7772c162c15d520e31af46c555f60d5c3b","date":1385135519,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts#testMultiValuedHierarchy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts#testMultiValuedHierarchy().mjava","sourceNew":"  public void testMultiValuedHierarchy() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"a\", true);\n    config.setMultiValued(\"a\", true);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DocumentBuilder builder = new DocumentBuilder(taxoWriter, config);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"a\", \"path\", \"x\"));\n    doc.add(new FacetField(\"a\", \"path\", \"y\"));\n    writer.addDocument(builder.build(doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    // Aggregate the facet counts:\n    SimpleFacetsCollector c = new SimpleFacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), c);\n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    SimpleFacetResult result = facets.getTopChildren(10, \"a\");\n    assertEquals(1, result.labelValues.length);\n    assertEquals(1, result.labelValues[0].value.intValue());\n\n    IOUtils.close(writer, taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testMultiValuedHierarchy() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"a\", true);\n    config.setMultiValued(\"a\", true);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DocumentBuilder builder = new DocumentBuilder(taxoWriter, config);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"a\", \"path\", \"x\"));\n    doc.add(new FacetField(\"a\", \"path\", \"y\"));\n    writer.addDocument(builder.build(doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    // Aggregate the facet counts:\n    SimpleFacetsCollector c = new SimpleFacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), c);\n    Facets facets = getFacetCounts(taxoReader, config, c);\n    SimpleFacetResult result = facets.getTopChildren(10, \"a\");\n    assertEquals(1, result.labelValues.length);\n    assertEquals(1, result.labelValues[0].value.intValue());\n\n    IOUtils.close(writer, taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae75def1e2525383b6e1397ed97c44387da9941c","date":1385249238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts#testMultiValuedHierarchy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts#testMultiValuedHierarchy().mjava","sourceNew":"  public void testMultiValuedHierarchy() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    config.setHierarchical(\"a\", true);\n    config.setMultiValued(\"a\", true);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"a\", \"path\", \"x\"));\n    doc.add(new FacetField(\"a\", \"path\", \"y\"));\n    writer.addDocument(config.build(doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    // Aggregate the facet counts:\n    SimpleFacetsCollector c = new SimpleFacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), c);\n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    SimpleFacetResult result = facets.getTopChildren(10, \"a\");\n    assertEquals(1, result.labelValues.length);\n    assertEquals(1, result.labelValues[0].value.intValue());\n\n    IOUtils.close(writer, taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testMultiValuedHierarchy() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n    FacetsConfig config = new FacetsConfig();\n    config.setHierarchical(\"a\", true);\n    config.setMultiValued(\"a\", true);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    DocumentBuilder builder = new DocumentBuilder(taxoWriter, config);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"a\", \"path\", \"x\"));\n    doc.add(new FacetField(\"a\", \"path\", \"y\"));\n    writer.addDocument(builder.build(doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    // Aggregate the facet counts:\n    SimpleFacetsCollector c = new SimpleFacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), c);\n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    SimpleFacetResult result = facets.getTopChildren(10, \"a\");\n    assertEquals(1, result.labelValues.length);\n    assertEquals(1, result.labelValues[0].value.intValue());\n\n    IOUtils.close(writer, taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestTaxonomyFacetCounts#testMultiValuedHierarchy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestTaxonomyFacetCounts#testMultiValuedHierarchy().mjava","sourceNew":"  public void testMultiValuedHierarchy() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    config.setHierarchical(\"a\", true);\n    config.setMultiValued(\"a\", true);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"a\", \"path\", \"x\"));\n    doc.add(new FacetField(\"a\", \"path\", \"y\"));\n    writer.addDocument(config.build(doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    // Aggregate the facet counts:\n    FacetsCollector c = new FacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), c);\n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    FacetResult result = facets.getTopChildren(10, \"a\");\n    assertEquals(1, result.labelValues.length);\n    assertEquals(1, result.labelValues[0].value.intValue());\n\n    IOUtils.close(writer, taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","sourceOld":"  public void testMultiValuedHierarchy() throws Exception {\n    Directory dir = newDirectory();\n    Directory taxoDir = newDirectory();\n    DirectoryTaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir, IndexWriterConfig.OpenMode.CREATE);\n    FacetsConfig config = new FacetsConfig(taxoWriter);\n    config.setHierarchical(\"a\", true);\n    config.setMultiValued(\"a\", true);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"text\", Field.Store.NO));\n    doc.add(new FacetField(\"a\", \"path\", \"x\"));\n    doc.add(new FacetField(\"a\", \"path\", \"y\"));\n    writer.addDocument(config.build(doc));\n\n    // NRT open\n    IndexSearcher searcher = newSearcher(writer.getReader());\n\n    // NRT open\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoWriter);\n    \n    // Aggregate the facet counts:\n    SimpleFacetsCollector c = new SimpleFacetsCollector();\n\n    // MatchAllDocsQuery is for \"browsing\" (counts facets\n    // for all non-deleted docs in the index); normally\n    // you'd use a \"normal\" query, and use MultiCollector to\n    // wrap collecting the \"normal\" hits and also facets:\n    searcher.search(new MatchAllDocsQuery(), c);\n    Facets facets = getTaxonomyFacetCounts(taxoReader, config, c);\n    SimpleFacetResult result = facets.getTopChildren(10, \"a\");\n    assertEquals(1, result.labelValues.length);\n    assertEquals(1, result.labelValues[0].value.intValue());\n\n    IOUtils.close(writer, taxoWriter, searcher.getIndexReader(), taxoReader, dir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"18085993942ab483c997b0cff727b33c9396f927":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7554009c97f9365492660c1df175b6349f7ec05c":["18085993942ab483c997b0cff727b33c9396f927"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["ae75def1e2525383b6e1397ed97c44387da9941c"],"ce7aff7772c162c15d520e31af46c555f60d5c3b":["006838107b0cd2051371f3470740d23ec91b1886"],"006838107b0cd2051371f3470740d23ec91b1886":["7554009c97f9365492660c1df175b6349f7ec05c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae75def1e2525383b6e1397ed97c44387da9941c":["ce7aff7772c162c15d520e31af46c555f60d5c3b"]},"commit2Childs":{"18085993942ab483c997b0cff727b33c9396f927":["7554009c97f9365492660c1df175b6349f7ec05c"],"7554009c97f9365492660c1df175b6349f7ec05c":["006838107b0cd2051371f3470740d23ec91b1886"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["18085993942ab483c997b0cff727b33c9396f927","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"ce7aff7772c162c15d520e31af46c555f60d5c3b":["ae75def1e2525383b6e1397ed97c44387da9941c"],"006838107b0cd2051371f3470740d23ec91b1886":["ce7aff7772c162c15d520e31af46c555f60d5c3b"],"ae75def1e2525383b6e1397ed97c44387da9941c":["21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}