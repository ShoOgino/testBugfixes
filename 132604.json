{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random.nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    final String expected;\n    if (willRewrite) {\n      expected = \"4 -> 3 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    } else {\n      expected = \"8 -> 6 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    }\n    assertTrue(w.toString().indexOf(expected) != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random.nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    final String expected;\n    if (willRewrite) {\n      expected = \"4 -> 3 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    } else {\n      expected = \"8 -> 6 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    }\n    assertTrue(w.toString().indexOf(expected) != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    final String expected;\n    if (willRewrite) {\n      expected = \"4 -> 3 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    } else {\n      expected = \"8 -> 6 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    }\n    assertTrue(w.toString().indexOf(expected) != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random.nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    final String expected;\n    if (willRewrite) {\n      expected = \"4 -> 3 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    } else {\n      expected = \"8 -> 6 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    }\n    assertTrue(w.toString().indexOf(expected) != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"49f4d9c4e29f2345e789073801e7945431a23ca3","date":1355344131,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    \n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    final String expected;\n    if (willRewrite) {\n      expected = \"4 -> 3 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    } else {\n      expected = \"8 -> 6 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    }\n    assertTrue(w.toString().indexOf(expected) != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    \n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    final String expected;\n    if (willRewrite) {\n      expected = \"4 -> 3 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    } else {\n      expected = \"8 -> 6 [label=\\\"t\\\" style=\\\"bold\\\"\";\n    }\n    assertTrue(w.toString().indexOf(expected) != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb8af2aec0a8574cf50cad6939d4475179595eca","date":1357675799,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite, true);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    \n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    \n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite, true);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    \n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    \n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite, PackedInts.DEFAULT, true, 15);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    \n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite, true);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    \n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite, PackedInts.DEFAULT, true, 15);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    \n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite, true);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    \n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39","date":1370266419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite, PackedInts.DEFAULT, true, 15);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    \n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite, PackedInts.DEFAULT, true, 15);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    \n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite, PackedInts.DEFAULT, true, 15);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    \n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite, PackedInts.DEFAULT, true, 15);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    \n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d245db17aaa41b338dae9da5d4edba4dd6f61612","date":1394644847,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite, PackedInts.DEFAULT, true, 15);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n\n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite, PackedInts.DEFAULT, true, 15);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n    \n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f838187609fee3a1afa5f162f93c796046242c84","date":1406216791,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, willRewrite, PackedInts.DEFAULT, true, 15);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n\n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, null, willRewrite, PackedInts.DEFAULT, true, 15);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n\n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, willRewrite, PackedInts.DEFAULT, true, 15);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRefBuilder()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRefBuilder()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n\n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, willRewrite, PackedInts.DEFAULT, true, 15);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRef()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRef()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n\n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","bugFix":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6244579a467d5f2673ac98265d74bddbea1a8114","date":1478786509,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, true, 15);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRefBuilder()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRefBuilder()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n\n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, willRewrite, PackedInts.DEFAULT, true, 15);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRefBuilder()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRefBuilder()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n\n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, true, 15);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRefBuilder()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRefBuilder()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n\n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final boolean willRewrite = random().nextBoolean();\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, willRewrite, PackedInts.DEFAULT, true, 15);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRefBuilder()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRefBuilder()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n\n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae67e1f82a53594208ca929f382ee861dad3d7a8","date":1557134375,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, true, 15, true);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRefBuilder()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRefBuilder()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n\n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, true, 15);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRefBuilder()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRefBuilder()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n\n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a1204a92958bea883656169000a87a6c55c2d0","date":1562106073,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, true, 15);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRefBuilder()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRefBuilder()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n\n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, true, 15, true);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRefBuilder()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRefBuilder()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n\n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRefBuilder()), outputs.getNoOutput());\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRefBuilder()), outputs.getNoOutput());\n    final FST<Long> fst = fstCompiler.compile();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n\n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, true, 15);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRefBuilder()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRefBuilder()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n\n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testInternalFinalState().mjava","sourceNew":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRefBuilder()), outputs.getNoOutput());\n    fstCompiler.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRefBuilder()), outputs.getNoOutput());\n    final FST<Long> fst = fstCompiler.compile();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n\n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","sourceOld":"  public void testInternalFinalState() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    final Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, 0, 0, true, true, Integer.MAX_VALUE, outputs, true, 15);\n    builder.add(Util.toIntsRef(new BytesRef(\"stat\"), new IntsRefBuilder()), outputs.getNoOutput());\n    builder.add(Util.toIntsRef(new BytesRef(\"station\"), new IntsRefBuilder()), outputs.getNoOutput());\n    final FST<Long> fst = builder.finish();\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    //System.out.println(w.toString());\n\n    // check for accept state at label t\n    assertTrue(w.toString().indexOf(\"[label=\\\"t\\\" style=\\\"bold\\\"\") != -1);\n    // check for accept state at label n\n    assertTrue(w.toString().indexOf(\"[label=\\\"n\\\" style=\\\"bold\\\"\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","49f4d9c4e29f2345e789073801e7945431a23ca3"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"d245db17aaa41b338dae9da5d4edba4dd6f61612":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["fb8af2aec0a8574cf50cad6939d4475179595eca"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["4e6354dd7c71fe122926fc53d7d29f715b1283db","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"6244579a467d5f2673ac98265d74bddbea1a8114":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"fb8af2aec0a8574cf50cad6939d4475179595eca":["49f4d9c4e29f2345e789073801e7945431a23ca3"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","6244579a467d5f2673ac98265d74bddbea1a8114"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["6244579a467d5f2673ac98265d74bddbea1a8114"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["f838187609fee3a1afa5f162f93c796046242c84"],"f838187609fee3a1afa5f162f93c796046242c84":["d245db17aaa41b338dae9da5d4edba4dd6f61612"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"59a1204a92958bea883656169000a87a6c55c2d0":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["59a1204a92958bea883656169000a87a6c55c2d0","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["59a1204a92958bea883656169000a87a6c55c2d0"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fb8af2aec0a8574cf50cad6939d4475179595eca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"49f4d9c4e29f2345e789073801e7945431a23ca3":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d245db17aaa41b338dae9da5d4edba4dd6f61612"],"d245db17aaa41b338dae9da5d4edba4dd6f61612":["f838187609fee3a1afa5f162f93c796046242c84"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["8917bfede3b4ca30f4305c1e391e9218959cd723","6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"fb8af2aec0a8574cf50cad6939d4475179595eca":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"6244579a467d5f2673ac98265d74bddbea1a8114":["199dfa410f1fdbfd3294106b04096cce5ed34b21","ae67e1f82a53594208ca929f382ee861dad3d7a8"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["6244579a467d5f2673ac98265d74bddbea1a8114","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["59a1204a92958bea883656169000a87a6c55c2d0"],"f838187609fee3a1afa5f162f93c796046242c84":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"59a1204a92958bea883656169000a87a6c55c2d0":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","49f4d9c4e29f2345e789073801e7945431a23ca3"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"49f4d9c4e29f2345e789073801e7945431a23ca3":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fb8af2aec0a8574cf50cad6939d4475179595eca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","199dfa410f1fdbfd3294106b04096cce5ed34b21","c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}