{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeIndex(IndexOutput,IndexOutput,int,int,byte[],long).mjava","commits":[{"id":"78e689a3b60e84c75dc6dd7b181a71fc19ef8482","date":1591689554,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeIndex(IndexOutput,IndexOutput,int,int,byte[],long).mjava","pathOld":"/dev/null","sourceNew":"  private void writeIndex(IndexOutput metaOut, IndexOutput indexOut, int countPerLeaf, int numLeaves, byte[] packedIndex, long dataStartFP) throws IOException {\n    CodecUtil.writeHeader(metaOut, CODEC_NAME, VERSION_CURRENT);\n    metaOut.writeVInt(numDataDims);\n    metaOut.writeVInt(numIndexDims);\n    metaOut.writeVInt(countPerLeaf);\n    metaOut.writeVInt(bytesPerDim);\n\n    assert numLeaves > 0;\n    metaOut.writeVInt(numLeaves);\n    metaOut.writeBytes(minPackedValue, 0, packedIndexBytesLength);\n    metaOut.writeBytes(maxPackedValue, 0, packedIndexBytesLength);\n\n    metaOut.writeVLong(pointCount);\n    metaOut.writeVInt(docsSeen.cardinality());\n    metaOut.writeVInt(packedIndex.length);\n    metaOut.writeLong(dataStartFP);\n    // If metaOut and indexOut are the same file, we account for the fact that\n    // writing a long makes the index start 8 bytes later.\n    metaOut.writeLong(indexOut.getFilePointer() + (metaOut == indexOut ? Long.BYTES : 0));\n\n    indexOut.writeBytes(packedIndex, 0, packedIndex.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeIndex(IndexOutput,IndexOutput,int,int,byte[],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeIndex(IndexOutput,IndexOutput,int,int,byte[],long).mjava","sourceNew":"  private void writeIndex(IndexOutput metaOut, IndexOutput indexOut, int countPerLeaf, int numLeaves, byte[] packedIndex, long dataStartFP) throws IOException {\n    CodecUtil.writeHeader(metaOut, CODEC_NAME, VERSION_CURRENT);\n    metaOut.writeVInt(config.numDims);\n    metaOut.writeVInt(config.numIndexDims);\n    metaOut.writeVInt(countPerLeaf);\n    metaOut.writeVInt(config.bytesPerDim);\n\n    assert numLeaves > 0;\n    metaOut.writeVInt(numLeaves);\n    metaOut.writeBytes(minPackedValue, 0, config.packedIndexBytesLength);\n    metaOut.writeBytes(maxPackedValue, 0, config.packedIndexBytesLength);\n\n    metaOut.writeVLong(pointCount);\n    metaOut.writeVInt(docsSeen.cardinality());\n    metaOut.writeVInt(packedIndex.length);\n    metaOut.writeLong(dataStartFP);\n    // If metaOut and indexOut are the same file, we account for the fact that\n    // writing a long makes the index start 8 bytes later.\n    metaOut.writeLong(indexOut.getFilePointer() + (metaOut == indexOut ? Long.BYTES : 0));\n\n    indexOut.writeBytes(packedIndex, 0, packedIndex.length);\n  }\n\n","sourceOld":"  private void writeIndex(IndexOutput metaOut, IndexOutput indexOut, int countPerLeaf, int numLeaves, byte[] packedIndex, long dataStartFP) throws IOException {\n    CodecUtil.writeHeader(metaOut, CODEC_NAME, VERSION_CURRENT);\n    metaOut.writeVInt(numDataDims);\n    metaOut.writeVInt(numIndexDims);\n    metaOut.writeVInt(countPerLeaf);\n    metaOut.writeVInt(bytesPerDim);\n\n    assert numLeaves > 0;\n    metaOut.writeVInt(numLeaves);\n    metaOut.writeBytes(minPackedValue, 0, packedIndexBytesLength);\n    metaOut.writeBytes(maxPackedValue, 0, packedIndexBytesLength);\n\n    metaOut.writeVLong(pointCount);\n    metaOut.writeVInt(docsSeen.cardinality());\n    metaOut.writeVInt(packedIndex.length);\n    metaOut.writeLong(dataStartFP);\n    // If metaOut and indexOut are the same file, we account for the fact that\n    // writing a long makes the index start 8 bytes later.\n    metaOut.writeLong(indexOut.getFilePointer() + (metaOut == indexOut ? Long.BYTES : 0));\n\n    indexOut.writeBytes(packedIndex, 0, packedIndex.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}