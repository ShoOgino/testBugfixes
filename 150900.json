{"path":"modules/queries/src/test/org/apache/lucene/queries/DuplicateFilterTest#testKeepsLastFilter().mjava","commits":[{"id":"1f9f2355d68aab1348539f7a1603279405e566a4","date":1313634992,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/DuplicateFilterTest#testKeepsLastFilter().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/DuplicateFilterTest#testKeepsLastFilter().mjava","sourceNew":"  public void testKeepsLastFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_LAST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n          MultiFields.getLiveDocs(reader),\n          KEY_FIELD,\n          new BytesRef(url));\n      int lastDoc = 0;\n      while (td.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        lastDoc = td.docID();\n      }\n      assertEquals(\"Duplicate urls should return last doc\", lastDoc, hit.doc);\n    }\n  }\n\n","sourceOld":"  public void testKeepsLastFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_LAST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n          MultiFields.getLiveDocs(reader),\n          KEY_FIELD,\n          new BytesRef(url));\n      int lastDoc = 0;\n      while (td.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        lastDoc = td.docID();\n      }\n      assertEquals(\"Duplicate urls should return last doc\", lastDoc, hit.doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b","date":1313816278,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest#testKeepsLastFilter().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/DuplicateFilterTest#testKeepsLastFilter().mjava","sourceNew":"  public void testKeepsLastFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_LAST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n          MultiFields.getLiveDocs(reader),\n          KEY_FIELD,\n          new BytesRef(url));\n      int lastDoc = 0;\n      while (td.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        lastDoc = td.docID();\n      }\n      assertEquals(\"Duplicate urls should return last doc\", lastDoc, hit.doc);\n    }\n  }\n\n","sourceOld":"  public void testKeepsLastFilter() throws Throwable {\n    DuplicateFilter df = new DuplicateFilter(KEY_FIELD);\n    df.setKeepMode(DuplicateFilter.KeepMode.KM_USE_LAST_OCCURRENCE);\n    ScoreDoc[] hits = searcher.search(tq, df, 1000).scoreDocs;\n    assertTrue(\"Filtered searching should have found some matches\", hits.length > 0);\n    for (ScoreDoc hit : hits) {\n      Document d = searcher.doc(hit.doc);\n      String url = d.get(KEY_FIELD);\n      DocsEnum td = MultiFields.getTermDocsEnum(reader,\n          MultiFields.getLiveDocs(reader),\n          KEY_FIELD,\n          new BytesRef(url));\n      int lastDoc = 0;\n      while (td.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        lastDoc = td.docID();\n      }\n      assertEquals(\"Duplicate urls should return last doc\", lastDoc, hit.doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["1f9f2355d68aab1348539f7a1603279405e566a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b"],"1f9f2355d68aab1348539f7a1603279405e566a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f9f2355d68aab1348539f7a1603279405e566a4"],"1f9f2355d68aab1348539f7a1603279405e566a4":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}