{"path":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","commits":[{"id":"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8","date":1195335263,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","pathOld":"/dev/null","sourceNew":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = new RAMDirectory();\n      createIndex(dir1, false);\n      Directory dir2 = new RAMDirectory();\n      createIndex(dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1);\n      assertRefCountEquals(1, reader1);\n      \n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, IndexReader.open(dir2)}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(3 + mode, reader1);\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(4 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(3 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(3 + mode, reader1);\n      \n      reader1.close();\n      assertRefCountEquals(3, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(2, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(2, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(1, reader1);\n      assertReaderOpen(reader1);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","sourceNew":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(dir1, false);\n      Directory dir2 = new MockRAMDirectory();\n      createIndex(dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(3 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(4 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(3 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(3 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(3, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(2, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(2, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(1, reader1);\n      assertReaderOpen(reader1);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","sourceOld":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = new RAMDirectory();\n      createIndex(dir1, false);\n      Directory dir2 = new RAMDirectory();\n      createIndex(dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1);\n      assertRefCountEquals(1, reader1);\n      \n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, IndexReader.open(dir2)}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(3 + mode, reader1);\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(4 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(3 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(3 + mode, reader1);\n      \n      reader1.close();\n      assertRefCountEquals(3, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(2, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(2, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(1, reader1);\n      assertReaderOpen(reader1);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab","date":1235909556,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","sourceNew":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(dir1, false);\n      Directory dir2 = new MockRAMDirectory();\n      createIndex(dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","sourceOld":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(dir1, false);\n      Directory dir2 = new MockRAMDirectory();\n      createIndex(dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(3 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(4 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(3 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(3 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(3, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(2, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(2, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(1, reader1);\n      assertReaderOpen(reader1);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","sourceNew":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(dir1, false);\n      Directory dir2 = new MockRAMDirectory();\n      createIndex(dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","sourceOld":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(dir1, false);\n      Directory dir2 = new MockRAMDirectory();\n      createIndex(dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","sourceNew":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(dir1, false);\n      Directory dir2 = new MockRAMDirectory();\n      createIndex(dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","sourceOld":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(dir1, false);\n      Directory dir2 = new MockRAMDirectory();\n      createIndex(dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReferenceCountingMultiReader().mjava","sourceNew":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(dir1, false);\n      Directory dir2 = new MockRAMDirectory();\n      createIndex(dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","sourceOld":"  public void testReferenceCountingMultiReader() throws IOException {\n    for (int mode = 0; mode <=1; mode++) {\n      Directory dir1 = new MockRAMDirectory();\n      createIndex(dir1, false);\n      Directory dir2 = new MockRAMDirectory();\n      createIndex(dir2, true);\n      \n      IndexReader reader1 = IndexReader.open(dir1, false);\n      assertRefCountEquals(1, reader1);\n\n      IndexReader initReader2 = IndexReader.open(dir2, false);\n      IndexReader multiReader1 = new MultiReader(new IndexReader[] {reader1, initReader2}, (mode == 0));\n      modifyIndex(0, dir2);\n      assertRefCountEquals(1 + mode, reader1);\n      \n      IndexReader multiReader2 = multiReader1.reopen();\n      // index1 hasn't changed, so multiReader2 should share reader1 now with multiReader1\n      assertRefCountEquals(2 + mode, reader1);\n      \n      modifyIndex(0, dir1);\n      IndexReader reader2 = reader1.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      modifyIndex(1, dir1);\n      IndexReader reader3 = reader2.reopen();\n      assertRefCountEquals(2 + mode, reader1);\n      assertRefCountEquals(1, reader2);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n      \n      multiReader1.close();\n      assertRefCountEquals(1 + mode, reader1);\n\n      if (mode == 1) {\n        initReader2.close();\n      }\n      \n      reader1.close();\n      assertRefCountEquals(1, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      multiReader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, false);\n      \n      reader2.close();\n      assertRefCountEquals(0, reader1);\n      \n      reader3.close();\n      assertRefCountEquals(0, reader1);\n      assertReaderClosed(reader1, true, true);\n      dir1.close();\n      dir2.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"0a046c0c310bc77931fc8441bd920053b607dd14":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cf5d15fa6a63d9c38ac496f7c37fe5e5723162ab":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}