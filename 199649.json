{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","commits":[{"id":"e2fe60a17a7a0cfd101b1169acf089221bc6c166","date":1412767493,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05da2d758a6089e737cdfc230e57a51b472b94b6","date":1413392310,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","date":1413458798,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        if (indexOptions != null) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n        } else {\n          SimpleTextUtil.write(out, \"null\", scratch);\n        }\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        if (indexOptions != null) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n        } else {\n          SimpleTextUtil.write(out, \"null\", scratch);\n        }\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        SimpleTextUtil.write(out, indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        if (indexOptions != null) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n        } else {\n          SimpleTextUtil.write(out, \"null\", scratch);\n        }\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        SimpleTextUtil.write(out, indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n\n        SimpleTextUtil.write(out, DIM_COUNT);\n        SimpleTextUtil.write(out, Integer.toString(fi.getDimensionCount()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DIM_NUM_BYTES);\n        SimpleTextUtil.write(out, Integer.toString(fi.getDimensionNumBytes()), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        SimpleTextUtil.write(out, indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        SimpleTextUtil.write(out, indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n\n        SimpleTextUtil.write(out, DIM_COUNT);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointDimensionCount()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DIM_NUM_BYTES);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointNumBytes()), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        SimpleTextUtil.write(out, indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n\n        SimpleTextUtil.write(out, DIM_COUNT);\n        SimpleTextUtil.write(out, Integer.toString(fi.getDimensionCount()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DIM_NUM_BYTES);\n        SimpleTextUtil.write(out, Integer.toString(fi.getDimensionNumBytes()), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeba0a4d0845889a402dd225793d62f009d029c9","date":1527938093,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        SimpleTextUtil.write(out, indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n\n        SimpleTextUtil.write(out, DIM_COUNT);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointDimensionCount()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DIM_NUM_BYTES);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointNumBytes()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, SOFT_DELETES);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isSoftDeletesField()), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        SimpleTextUtil.write(out, indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n\n        SimpleTextUtil.write(out, DIM_COUNT);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointDimensionCount()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DIM_NUM_BYTES);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointNumBytes()), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab548c8f96022b4780f7500a30b19b4f4a5feeb6","date":1527940044,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        SimpleTextUtil.write(out, indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n\n        SimpleTextUtil.write(out, DIM_COUNT);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointDimensionCount()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DIM_NUM_BYTES);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointNumBytes()), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        SimpleTextUtil.write(out, indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n\n        SimpleTextUtil.write(out, DIM_COUNT);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointDimensionCount()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DIM_NUM_BYTES);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointNumBytes()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, SOFT_DELETES);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isSoftDeletesField()), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7e4ca6dc9612ff741d8713743e2bccfae5eadac","date":1528093718,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        SimpleTextUtil.write(out, indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n\n        SimpleTextUtil.write(out, DIM_COUNT);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointDimensionCount()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DIM_NUM_BYTES);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointNumBytes()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, SOFT_DELETES);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isSoftDeletesField()), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        SimpleTextUtil.write(out, indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n\n        SimpleTextUtil.write(out, DIM_COUNT);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointDimensionCount()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DIM_NUM_BYTES);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointNumBytes()), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        SimpleTextUtil.write(out, indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n\n        SimpleTextUtil.write(out, DIM_COUNT);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointDimensionCount()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DIM_NUM_BYTES);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointNumBytes()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, SOFT_DELETES);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isSoftDeletesField()), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        SimpleTextUtil.write(out, indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n\n        SimpleTextUtil.write(out, DIM_COUNT);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointDimensionCount()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DIM_NUM_BYTES);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointNumBytes()), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        SimpleTextUtil.write(out, indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n\n        SimpleTextUtil.write(out, DIM_COUNT);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointDimensionCount()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DIM_NUM_BYTES);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointNumBytes()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, SOFT_DELETES);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isSoftDeletesField()), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        SimpleTextUtil.write(out, indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n\n        SimpleTextUtil.write(out, DIM_COUNT);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointDimensionCount()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DIM_NUM_BYTES);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointNumBytes()), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        SimpleTextUtil.write(out, indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n\n        SimpleTextUtil.write(out, DATA_DIM_COUNT);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointDataDimensionCount()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, INDEX_DIM_COUNT);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointIndexDimensionCount()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DIM_NUM_BYTES);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointNumBytes()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, SOFT_DELETES);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isSoftDeletesField()), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        SimpleTextUtil.write(out, indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n\n        SimpleTextUtil.write(out, DIM_COUNT);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointDimensionCount()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DIM_NUM_BYTES);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointNumBytes()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, SOFT_DELETES);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isSoftDeletesField()), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        SimpleTextUtil.write(out, indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n\n        SimpleTextUtil.write(out, DATA_DIM_COUNT);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointDimensionCount()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, INDEX_DIM_COUNT);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointIndexDimensionCount()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DIM_NUM_BYTES);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointNumBytes()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, SOFT_DELETES);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isSoftDeletesField()), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    boolean success = false;\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        IndexOptions indexOptions = fi.getIndexOptions();\n        assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n        SimpleTextUtil.write(out, indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES_GEN);\n        SimpleTextUtil.write(out, Long.toString(fi.getDocValuesGen()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n\n        SimpleTextUtil.write(out, DATA_DIM_COUNT);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointDataDimensionCount()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, INDEX_DIM_COUNT);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointIndexDimensionCount()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DIM_NUM_BYTES);\n        SimpleTextUtil.write(out, Integer.toString(fi.getPointNumBytes()), scratch);\n        SimpleTextUtil.writeNewline(out);\n\n        SimpleTextUtil.write(out, SOFT_DELETES);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isSoftDeletesField()), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n      SimpleTextUtil.writeChecksum(out, scratch);\n      success = true;\n    } finally {\n      if (success) {\n        out.close();\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["55980207f1977bd1463465de1659b821347e2fa8","05da2d758a6089e737cdfc230e57a51b472b94b6"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"3184874f7f3aca850248483485b4995343066875":["05da2d758a6089e737cdfc230e57a51b472b94b6"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","3184874f7f3aca850248483485b4995343066875"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["eeba0a4d0845889a402dd225793d62f009d029c9"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"eeba0a4d0845889a402dd225793d62f009d029c9":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"f592209545c71895260367152601e9200399776d":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","3184874f7f3aca850248483485b4995343066875"],"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["05da2d758a6089e737cdfc230e57a51b472b94b6","55980207f1977bd1463465de1659b821347e2fa8"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"55980207f1977bd1463465de1659b821347e2fa8":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["b70042a8a492f7054d480ccdd2be9796510d4327","eeba0a4d0845889a402dd225793d62f009d029c9"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"3184874f7f3aca850248483485b4995343066875":["2bb2842e561df4e8e9ad89010605fc86ac265465","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e2fe60a17a7a0cfd101b1169acf089221bc6c166","55980207f1977bd1463465de1659b821347e2fa8"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac","f592209545c71895260367152601e9200399776d"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["f6652c943595e92c187ee904c382863013eae28f","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"eeba0a4d0845889a402dd225793d62f009d029c9":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}