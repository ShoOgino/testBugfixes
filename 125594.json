{"path":"solr/core/src/java/org/apache/solr/store/blockcache/BlockCache#fetch(BlockCacheKey,byte[],int,int,int).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/BlockCache#fetch(BlockCacheKey,byte[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public boolean fetch(BlockCacheKey blockCacheKey, byte[] buffer,\n      int blockOffset, int off, int length) {\n    BlockCacheLocation location = cache.get(blockCacheKey);\n    if (location == null) {\n      return false;\n    }\n    if (location.isRemoved()) {\n      return false;\n    }\n    int bankId = location.getBankId();\n    int offset = location.getBlock() * blockSize;\n    location.touch();\n    ByteBuffer bank = getBank(bankId);\n    bank.position(offset + blockOffset);\n    bank.get(buffer, off, length);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/BlockCache#fetch(BlockCacheKey,byte[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public boolean fetch(BlockCacheKey blockCacheKey, byte[] buffer,\n      int blockOffset, int off, int length) {\n    BlockCacheLocation location = cache.get(blockCacheKey);\n    if (location == null) {\n      return false;\n    }\n    if (location.isRemoved()) {\n      return false;\n    }\n    int bankId = location.getBankId();\n    int offset = location.getBlock() * blockSize;\n    location.touch();\n    ByteBuffer bank = getBank(bankId);\n    bank.position(offset + blockOffset);\n    bank.get(buffer, off, length);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1d30d294dfaad0bb977ab36cb218612d8ffdf9","date":1428517399,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/BlockCache#fetch(BlockCacheKey,byte[],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/blockcache/BlockCache#fetch(BlockCacheKey,byte[],int,int,int).mjava","sourceNew":"  public boolean fetch(BlockCacheKey blockCacheKey, byte[] buffer,\n      int blockOffset, int off, int length) {\n    BlockCacheLocation location = cache.getIfPresent(blockCacheKey);\n    if (location == null) {\n      return false;\n    }\n    if (location.isRemoved()) {\n      return false;\n    }\n    int bankId = location.getBankId();\n    int offset = location.getBlock() * blockSize;\n    location.touch();\n    ByteBuffer bank = getBank(bankId);\n    bank.position(offset + blockOffset);\n    bank.get(buffer, off, length);\n    return true;\n  }\n\n","sourceOld":"  public boolean fetch(BlockCacheKey blockCacheKey, byte[] buffer,\n      int blockOffset, int off, int length) {\n    BlockCacheLocation location = cache.get(blockCacheKey);\n    if (location == null) {\n      return false;\n    }\n    if (location.isRemoved()) {\n      return false;\n    }\n    int bankId = location.getBankId();\n    int offset = location.getBlock() * blockSize;\n    location.touch();\n    ByteBuffer bank = getBank(bankId);\n    bank.position(offset + blockOffset);\n    bank.get(buffer, off, length);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d474efcbfc117de753fe8289f43f0b3e3fbf8e5","date":1486742928,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/BlockCache#fetch(BlockCacheKey,byte[],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/blockcache/BlockCache#fetch(BlockCacheKey,byte[],int,int,int).mjava","sourceNew":"  /**\n   * @param blockCacheKey the key for the block\n   * @param buffer the target buffer for the read result\n   * @param blockOffset offset within the block\n   * @param off offset within the target buffer\n   * @param length the number of bytes to read\n   * @return true if the block was cached and the bytes were read\n   */\n  public boolean fetch(BlockCacheKey blockCacheKey, byte[] buffer,\n      int blockOffset, int off, int length) {\n    BlockCacheLocation location = cache.getIfPresent(blockCacheKey);\n    if (location == null) {\n      return false;\n    }\n    if (location.isRemoved()) {\n      // location is in the process of being removed and the block may have already been reused by this point.\n      return false;\n    }\n    int bankId = location.getBankId();\n    int bankOffset = location.getBlock() * blockSize;\n    location.touch();\n    ByteBuffer bank = getBank(bankId);\n    bank.position(bankOffset + blockOffset);\n    bank.get(buffer, off, length);\n    return true;\n  }\n\n","sourceOld":"  public boolean fetch(BlockCacheKey blockCacheKey, byte[] buffer,\n      int blockOffset, int off, int length) {\n    BlockCacheLocation location = cache.getIfPresent(blockCacheKey);\n    if (location == null) {\n      return false;\n    }\n    if (location.isRemoved()) {\n      return false;\n    }\n    int bankId = location.getBankId();\n    int offset = location.getBlock() * blockSize;\n    location.touch();\n    ByteBuffer bank = getBank(bankId);\n    bank.position(offset + blockOffset);\n    bank.get(buffer, off, length);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46386805f467fa40cb9d5a3cab791713306548c2","date":1487170610,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/BlockCache#fetch(BlockCacheKey,byte[],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/blockcache/BlockCache#fetch(BlockCacheKey,byte[],int,int,int).mjava","sourceNew":"  /**\n   * @param blockCacheKey the key for the block\n   * @param buffer the target buffer for the read result\n   * @param blockOffset offset within the block\n   * @param off offset within the target buffer\n   * @param length the number of bytes to read\n   * @return true if the block was cached and the bytes were read\n   */\n  public boolean fetch(BlockCacheKey blockCacheKey, byte[] buffer,\n      int blockOffset, int off, int length) {\n    BlockCacheLocation location = cache.getIfPresent(blockCacheKey);\n    if (location == null) {\n      return false;\n    }\n\n    int bankId = location.getBankId();\n    int bankOffset = location.getBlock() * blockSize;\n    location.touch();\n    ByteBuffer bank = getBank(bankId);\n    bank.position(bankOffset + blockOffset);\n    bank.get(buffer, off, length);\n\n    if (location.isRemoved()) {\n      // must check *after* the read is done since the bank may have been reused for another block\n      // before or during the read.\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * @param blockCacheKey the key for the block\n   * @param buffer the target buffer for the read result\n   * @param blockOffset offset within the block\n   * @param off offset within the target buffer\n   * @param length the number of bytes to read\n   * @return true if the block was cached and the bytes were read\n   */\n  public boolean fetch(BlockCacheKey blockCacheKey, byte[] buffer,\n      int blockOffset, int off, int length) {\n    BlockCacheLocation location = cache.getIfPresent(blockCacheKey);\n    if (location == null) {\n      return false;\n    }\n    if (location.isRemoved()) {\n      // location is in the process of being removed and the block may have already been reused by this point.\n      return false;\n    }\n    int bankId = location.getBankId();\n    int bankOffset = location.getBlock() * blockSize;\n    location.touch();\n    ByteBuffer bank = getBank(bankId);\n    bank.position(bankOffset + blockOffset);\n    bank.get(buffer, off, length);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d329f927fde9f646d6fce133cbd41dd2dbe4ed54","date":1488303368,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/BlockCache#fetch(BlockCacheKey,byte[],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/blockcache/BlockCache#fetch(BlockCacheKey,byte[],int,int,int).mjava","sourceNew":"  /**\n   * @param blockCacheKey the key for the block\n   * @param buffer the target buffer for the read result\n   * @param blockOffset offset within the block\n   * @param off offset within the target buffer\n   * @param length the number of bytes to read\n   * @return true if the block was cached and the bytes were read\n   */\n  public boolean fetch(BlockCacheKey blockCacheKey, byte[] buffer,\n      int blockOffset, int off, int length) {\n    BlockCacheLocation location = cache.getIfPresent(blockCacheKey);\n    if (location == null) {\n      metrics.blockCacheMiss.incrementAndGet();\n      return false;\n    }\n\n    int bankId = location.getBankId();\n    int bankOffset = location.getBlock() * blockSize;\n    location.touch();\n    ByteBuffer bank = getBank(bankId);\n    bank.position(bankOffset + blockOffset);\n    bank.get(buffer, off, length);\n\n    if (location.isRemoved()) {\n      // must check *after* the read is done since the bank may have been reused for another block\n      // before or during the read.\n      metrics.blockCacheMiss.incrementAndGet();\n      return false;\n    }\n\n    metrics.blockCacheHit.incrementAndGet();\n    return true;\n  }\n\n","sourceOld":"  /**\n   * @param blockCacheKey the key for the block\n   * @param buffer the target buffer for the read result\n   * @param blockOffset offset within the block\n   * @param off offset within the target buffer\n   * @param length the number of bytes to read\n   * @return true if the block was cached and the bytes were read\n   */\n  public boolean fetch(BlockCacheKey blockCacheKey, byte[] buffer,\n      int blockOffset, int off, int length) {\n    BlockCacheLocation location = cache.getIfPresent(blockCacheKey);\n    if (location == null) {\n      return false;\n    }\n\n    int bankId = location.getBankId();\n    int bankOffset = location.getBlock() * blockSize;\n    location.touch();\n    ByteBuffer bank = getBank(bankId);\n    bank.position(bankOffset + blockOffset);\n    bank.get(buffer, off, length);\n\n    if (location.isRemoved()) {\n      // must check *after* the read is done since the bank may have been reused for another block\n      // before or during the read.\n      return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8d474efcbfc117de753fe8289f43f0b3e3fbf8e5":["da1d30d294dfaad0bb977ab36cb218612d8ffdf9"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"46386805f467fa40cb9d5a3cab791713306548c2":["8d474efcbfc117de753fe8289f43f0b3e3fbf8e5"],"d329f927fde9f646d6fce133cbd41dd2dbe4ed54":["46386805f467fa40cb9d5a3cab791713306548c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d329f927fde9f646d6fce133cbd41dd2dbe4ed54"],"da1d30d294dfaad0bb977ab36cb218612d8ffdf9":["849494cf2f3a96af5c8c84995108ddd8456fcd04"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","da1d30d294dfaad0bb977ab36cb218612d8ffdf9"],"8d474efcbfc117de753fe8289f43f0b3e3fbf8e5":["46386805f467fa40cb9d5a3cab791713306548c2"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"46386805f467fa40cb9d5a3cab791713306548c2":["d329f927fde9f646d6fce133cbd41dd2dbe4ed54"],"d329f927fde9f646d6fce133cbd41dd2dbe4ed54":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"da1d30d294dfaad0bb977ab36cb218612d8ffdf9":["8d474efcbfc117de753fe8289f43f0b3e3fbf8e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}