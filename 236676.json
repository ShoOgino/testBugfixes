{"path":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalsMulti(SortedSetDocValues,DocIdSetIterator,Bits).mjava","commits":[{"id":"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","date":1406137403,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalsMulti(SortedSetDocValues,DocIdSetIterator,Bits).mjava","pathOld":"/dev/null","sourceNew":"  private void accumIntervalsMulti(SortedSetDocValues ssdv,\n                                   DocIdSetIterator disi, Bits bits) throws IOException {\n    // First update the ordinals in the intervals for this segment\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(ssdv);\n    }\n\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      ssdv.setDocument(doc);\n      long currOrd;\n      int currentInterval = 0;\n      while ((currOrd = ssdv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        boolean evaluateNextInterval = true;\n        while (evaluateNextInterval && currentInterval < intervals.length) {\n          IntervalCompareResult result = intervals[currentInterval].includes(currOrd);\n          switch (result) {\n            case INCLUDED:\n              /*\n               * Increment the current interval and move to the next one using\n               * the same value\n               */\n              intervals[currentInterval].incCount();\n              currentInterval++;\n              break;\n            case LOWER_THAN_START:\n              /*\n               * None of the next intervals will match this value (all of them have \n               * higher start value). Move to the next value for this document. \n               */\n              evaluateNextInterval = false;\n              break;\n            case GREATER_THAN_END:\n              /*\n               * Next interval may match this value\n               */\n              currentInterval++;\n              break;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalsMulti(SortedSetDocValues,DocIdSetIterator,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalsMulti(SortedSetDocValues,DocIdSetIterator,Bits).mjava","sourceNew":"  private void accumIntervalsMulti(SortedSetDocValues ssdv,\n                                   DocIdSetIterator disi, Bits bits) throws IOException {\n    // First update the ordinals in the intervals for this segment\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(ssdv);\n    }\n\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      if (doc > ssdv.docID()) {\n        ssdv.advance(doc);\n      }\n      if (doc == ssdv.docID()) {\n        long currOrd;\n        int currentInterval = 0;\n        while ((currOrd = ssdv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          boolean evaluateNextInterval = true;\n          while (evaluateNextInterval && currentInterval < intervals.length) {\n            IntervalCompareResult result = intervals[currentInterval].includes(currOrd);\n            switch (result) {\n            case INCLUDED:\n              /*\n               * Increment the current interval and move to the next one using\n               * the same value\n               */\n              intervals[currentInterval].incCount();\n              currentInterval++;\n              break;\n            case LOWER_THAN_START:\n              /*\n               * None of the next intervals will match this value (all of them have \n               * higher start value). Move to the next value for this document. \n               */\n              evaluateNextInterval = false;\n              break;\n            case GREATER_THAN_END:\n              /*\n               * Next interval may match this value\n               */\n              currentInterval++;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void accumIntervalsMulti(SortedSetDocValues ssdv,\n                                   DocIdSetIterator disi, Bits bits) throws IOException {\n    // First update the ordinals in the intervals for this segment\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(ssdv);\n    }\n\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      ssdv.setDocument(doc);\n      long currOrd;\n      int currentInterval = 0;\n      while ((currOrd = ssdv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        boolean evaluateNextInterval = true;\n        while (evaluateNextInterval && currentInterval < intervals.length) {\n          IntervalCompareResult result = intervals[currentInterval].includes(currOrd);\n          switch (result) {\n            case INCLUDED:\n              /*\n               * Increment the current interval and move to the next one using\n               * the same value\n               */\n              intervals[currentInterval].incCount();\n              currentInterval++;\n              break;\n            case LOWER_THAN_START:\n              /*\n               * None of the next intervals will match this value (all of them have \n               * higher start value). Move to the next value for this document. \n               */\n              evaluateNextInterval = false;\n              break;\n            case GREATER_THAN_END:\n              /*\n               * Next interval may match this value\n               */\n              currentInterval++;\n              break;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalsMulti(SortedSetDocValues,DocIdSetIterator,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalsMulti(SortedSetDocValues,DocIdSetIterator,Bits).mjava","sourceNew":"  private void accumIntervalsMulti(SortedSetDocValues ssdv,\n                                   DocIdSetIterator disi, Bits bits) throws IOException {\n    // First update the ordinals in the intervals for this segment\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(ssdv);\n    }\n\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      if (doc > ssdv.docID()) {\n        ssdv.advance(doc);\n      }\n      if (doc == ssdv.docID()) {\n        long currOrd;\n        int currentInterval = 0;\n        while ((currOrd = ssdv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          boolean evaluateNextInterval = true;\n          while (evaluateNextInterval && currentInterval < intervals.length) {\n            IntervalCompareResult result = intervals[currentInterval].includes(currOrd);\n            switch (result) {\n            case INCLUDED:\n              /*\n               * Increment the current interval and move to the next one using\n               * the same value\n               */\n              intervals[currentInterval].incCount();\n              currentInterval++;\n              break;\n            case LOWER_THAN_START:\n              /*\n               * None of the next intervals will match this value (all of them have \n               * higher start value). Move to the next value for this document. \n               */\n              evaluateNextInterval = false;\n              break;\n            case GREATER_THAN_END:\n              /*\n               * Next interval may match this value\n               */\n              currentInterval++;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void accumIntervalsMulti(SortedSetDocValues ssdv,\n                                   DocIdSetIterator disi, Bits bits) throws IOException {\n    // First update the ordinals in the intervals for this segment\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(ssdv);\n    }\n\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      ssdv.setDocument(doc);\n      long currOrd;\n      int currentInterval = 0;\n      while ((currOrd = ssdv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        boolean evaluateNextInterval = true;\n        while (evaluateNextInterval && currentInterval < intervals.length) {\n          IntervalCompareResult result = intervals[currentInterval].includes(currOrd);\n          switch (result) {\n            case INCLUDED:\n              /*\n               * Increment the current interval and move to the next one using\n               * the same value\n               */\n              intervals[currentInterval].incCount();\n              currentInterval++;\n              break;\n            case LOWER_THAN_START:\n              /*\n               * None of the next intervals will match this value (all of them have \n               * higher start value). Move to the next value for this document. \n               */\n              evaluateNextInterval = false;\n              break;\n            case GREATER_THAN_END:\n              /*\n               * Next interval may match this value\n               */\n              currentInterval++;\n              break;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalsMulti(SortedSetDocValues,DocIdSetIterator,Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/IntervalFacets#accumIntervalsMulti(SortedSetDocValues,DocIdSetIterator,Bits).mjava","sourceNew":"  private void accumIntervalsMulti(SortedSetDocValues ssdv,\n                                   DocIdSetIterator disi, Bits bits) throws IOException {\n    // First update the ordinals in the intervals for this segment\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(ssdv);\n    }\n\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      if (doc > ssdv.docID()) {\n        ssdv.advance(doc);\n      }\n      if (doc == ssdv.docID()) {\n        long currOrd;\n        int currentInterval = 0;\n        while ((currOrd = ssdv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          boolean evaluateNextInterval = true;\n          while (evaluateNextInterval && currentInterval < intervals.length) {\n            IntervalCompareResult result = intervals[currentInterval].includes(currOrd);\n            switch (result) {\n            case INCLUDED:\n              /*\n               * Increment the current interval and move to the next one using\n               * the same value\n               */\n              intervals[currentInterval].incCount();\n              currentInterval++;\n              break;\n            case LOWER_THAN_START:\n              /*\n               * None of the next intervals will match this value (all of them have \n               * higher start value). Move to the next value for this document. \n               */\n              evaluateNextInterval = false;\n              break;\n            case GREATER_THAN_END:\n              /*\n               * Next interval may match this value\n               */\n              currentInterval++;\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void accumIntervalsMulti(SortedSetDocValues ssdv,\n                                   DocIdSetIterator disi, Bits bits) throws IOException {\n    // First update the ordinals in the intervals for this segment\n    for (FacetInterval interval : intervals) {\n      interval.updateContext(ssdv);\n    }\n\n    int doc;\n    while ((doc = disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      if (bits != null && bits.get(doc) == false) {\n        continue;\n      }\n      ssdv.setDocument(doc);\n      long currOrd;\n      int currentInterval = 0;\n      while ((currOrd = ssdv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        boolean evaluateNextInterval = true;\n        while (evaluateNextInterval && currentInterval < intervals.length) {\n          IntervalCompareResult result = intervals[currentInterval].includes(currOrd);\n          switch (result) {\n            case INCLUDED:\n              /*\n               * Increment the current interval and move to the next one using\n               * the same value\n               */\n              intervals[currentInterval].incCount();\n              currentInterval++;\n              break;\n            case LOWER_THAN_START:\n              /*\n               * None of the next intervals will match this value (all of them have \n               * higher start value). Move to the next value for this document. \n               */\n              evaluateNextInterval = false;\n              break;\n            case GREATER_THAN_END:\n              /*\n               * Next interval may match this value\n               */\n              currentInterval++;\n              break;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}