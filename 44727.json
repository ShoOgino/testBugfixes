{"path":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testTopTermsRewrite().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testTopTermsRewrite().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testTopTermsRewrite().mjava","sourceNew":"  /** This test should not be here, but it tests the fuzzy query rewrite mode (TOP_TERMS_SCORING_BOOLEAN_REWRITE)\n   * with constant score and checks, that only the lower end of terms is put into the range */\n  public void testTopTermsRewrite() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"});\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"content\", \"B\", \"J\", true, true);\n    checkBooleanTerms(searcher, query, \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\");\n    \n    final int savedClauseCount = BooleanQuery.getMaxClauseCount();\n    try {\n      BooleanQuery.setMaxClauseCount(3);\n      checkBooleanTerms(searcher, query, \"B\", \"C\", \"D\");\n    } finally {\n      BooleanQuery.setMaxClauseCount(savedClauseCount);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** This test should not be here, but it tests the fuzzy query rewrite mode (TOP_TERMS_SCORING_BOOLEAN_REWRITE)\n   * with constant score and checks, that only the lower end of terms is put into the range */\n  public void testTopTermsRewrite() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"});\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"content\", \"B\", \"J\", true, true);\n    checkBooleanTerms(searcher, query, \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\");\n    \n    final int savedClauseCount = BooleanQuery.getMaxClauseCount();\n    try {\n      BooleanQuery.setMaxClauseCount(3);\n      checkBooleanTerms(searcher, query, \"B\", \"C\", \"D\");\n    } finally {\n      BooleanQuery.setMaxClauseCount(savedClauseCount);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testTopTermsRewrite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testTopTermsRewrite().mjava","sourceNew":"  /** This test should not be here, but it tests the fuzzy query rewrite mode (TOP_TERMS_SCORING_BOOLEAN_REWRITE)\n   * with constant score and checks, that only the lower end of terms is put into the range */\n  public void testTopTermsRewrite() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"});\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"content\", \"B\", \"J\", true, true);\n    checkBooleanTerms(searcher, query, \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\");\n    \n    final int savedClauseCount = BooleanQuery.getMaxClauseCount();\n    try {\n      BooleanQuery.setMaxClauseCount(3);\n      checkBooleanTerms(searcher, query, \"B\", \"C\", \"D\");\n    } finally {\n      BooleanQuery.setMaxClauseCount(savedClauseCount);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** This test should not be here, but it tests the fuzzy query rewrite mode (TOP_TERMS_SCORING_BOOLEAN_REWRITE)\n   * with constant score and checks, that only the lower end of terms is put into the range */\n  public void testTopTermsRewrite() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"});\n\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"content\", \"B\", \"J\", true, true);\n    checkBooleanTerms(searcher, query, \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\");\n    \n    final int savedClauseCount = BooleanQuery.getMaxClauseCount();\n    try {\n      BooleanQuery.setMaxClauseCount(3);\n      checkBooleanTerms(searcher, query, \"B\", \"C\", \"D\");\n    } finally {\n      BooleanQuery.setMaxClauseCount(savedClauseCount);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testTopTermsRewrite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testTopTermsRewrite().mjava","sourceNew":"  /** This test should not be here, but it tests the fuzzy query rewrite mode (TOP_TERMS_SCORING_BOOLEAN_REWRITE)\n   * with constant score and checks, that only the lower end of terms is put into the range */\n  public void testTopTermsRewrite() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"});\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"content\", \"B\", \"J\", true, true);\n    checkBooleanTerms(searcher, query, \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\");\n    \n    final int savedClauseCount = BooleanQuery.getMaxClauseCount();\n    try {\n      BooleanQuery.setMaxClauseCount(3);\n      checkBooleanTerms(searcher, query, \"B\", \"C\", \"D\");\n    } finally {\n      BooleanQuery.setMaxClauseCount(savedClauseCount);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** This test should not be here, but it tests the fuzzy query rewrite mode (TOP_TERMS_SCORING_BOOLEAN_REWRITE)\n   * with constant score and checks, that only the lower end of terms is put into the range */\n  public void testTopTermsRewrite() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"});\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"content\", \"B\", \"J\", true, true);\n    checkBooleanTerms(searcher, query, \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\");\n    \n    final int savedClauseCount = BooleanQuery.getMaxClauseCount();\n    try {\n      BooleanQuery.setMaxClauseCount(3);\n      checkBooleanTerms(searcher, query, \"B\", \"C\", \"D\");\n    } finally {\n      BooleanQuery.setMaxClauseCount(savedClauseCount);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36c70eb3b44de4355a7168b762cadc0f1cf194bc","date":1561542955,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testTopTermsRewrite().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeQuery#testTopTermsRewrite().mjava","sourceNew":"  /** This test should not be here, but it tests the fuzzy query rewrite mode (TOP_TERMS_SCORING_BOOLEAN_REWRITE)\n   * with constant score and checks, that only the lower end of terms is put into the range */\n  public void testTopTermsRewrite() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"});\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"content\", \"B\", \"J\", true, true);\n    checkBooleanTerms(searcher, query, \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\");\n    \n    final int savedClauseCount = IndexSearcher.getMaxClauseCount();\n    try {\n      IndexSearcher.setMaxClauseCount(3);\n      checkBooleanTerms(searcher, query, \"B\", \"C\", \"D\");\n    } finally {\n      IndexSearcher.setMaxClauseCount(savedClauseCount);\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /** This test should not be here, but it tests the fuzzy query rewrite mode (TOP_TERMS_SCORING_BOOLEAN_REWRITE)\n   * with constant score and checks, that only the lower end of terms is put into the range */\n  public void testTopTermsRewrite() throws Exception {\n    initializeIndex(new String[]{\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"});\n\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"content\", \"B\", \"J\", true, true);\n    checkBooleanTerms(searcher, query, \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\");\n    \n    final int savedClauseCount = BooleanQuery.getMaxClauseCount();\n    try {\n      BooleanQuery.setMaxClauseCount(3);\n      checkBooleanTerms(searcher, query, \"B\", \"C\", \"D\");\n    } finally {\n      BooleanQuery.setMaxClauseCount(savedClauseCount);\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}