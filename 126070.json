{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"9227359ab3bd86e5b85fab89a99332da7d5bacb1","date":1490341270,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp);\n    if (ops == null) {\n      // errors have already been added to the response so there's nothing left to do\n      return;\n    }\n    for (CommandOperation op : ops) {\n      switch (op.name) {\n        case \"set-trigger\":\n          handleSetTrigger(req, rsp, op);\n          break;\n        case \"remove-trigger\":\n          handleRemoveTrigger(req, rsp, op);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32c42b3b8d01657c1fa648ce7faafee5d9a68f07","date":1490344676,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp);\n    if (ops == null) {\n      // errors have already been added to the response so there's nothing left to do\n      return;\n    }\n    for (CommandOperation op : ops) {\n      switch (op.name) {\n        case \"set-trigger\":\n          handleSetTrigger(req, rsp, op);\n          break;\n        case \"remove-trigger\":\n          handleRemoveTrigger(req, rsp, op);\n          break;\n        case \"set-listener\":\n          handleSetListener(req, rsp, op);\n          break;\n        case \"remove-listener\":\n          handleRemoveListener(req, rsp, op);\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp);\n    if (ops == null) {\n      // errors have already been added to the response so there's nothing left to do\n      return;\n    }\n    for (CommandOperation op : ops) {\n      switch (op.name) {\n        case \"set-trigger\":\n          handleSetTrigger(req, rsp, op);\n          break;\n        case \"remove-trigger\":\n          handleRemoveTrigger(req, rsp, op);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb6a4d0a88fea57ec3a4044266f6ed46659457a5","date":1490362041,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp);\n    if (ops == null) {\n      // errors have already been added to the response so there's nothing left to do\n      return;\n    }\n    for (CommandOperation op : ops) {\n      switch (op.name) {\n        case \"set-trigger\":\n          handleSetTrigger(req, rsp, op);\n          break;\n        case \"remove-trigger\":\n          handleRemoveTrigger(req, rsp, op);\n          break;\n        case \"set-listener\":\n          handleSetListener(req, rsp, op);\n          break;\n        case \"remove-listener\":\n          handleRemoveListener(req, rsp, op);\n          break;\n        case \"suspend-trigger\":\n          handleSuspendTrigger(req, rsp, op);\n          break;\n        case \"resume-trigger\":\n          handleResumeTrigger(req, rsp, op);\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp);\n    if (ops == null) {\n      // errors have already been added to the response so there's nothing left to do\n      return;\n    }\n    for (CommandOperation op : ops) {\n      switch (op.name) {\n        case \"set-trigger\":\n          handleSetTrigger(req, rsp, op);\n          break;\n        case \"remove-trigger\":\n          handleRemoveTrigger(req, rsp, op);\n          break;\n        case \"set-listener\":\n          handleSetListener(req, rsp, op);\n          break;\n        case \"remove-listener\":\n          handleRemoveListener(req, rsp, op);\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b51bf16b2321204d381cc1154f0c975f5e8b9a2","date":1491806707,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp);\n    if (ops == null) {\n      // errors have already been added to the response so there's nothing left to do\n      return;\n    }\n    for (CommandOperation op : ops) {\n      switch (op.name) {\n        case \"set-trigger\":\n          handleSetTrigger(req, rsp, op);\n          break;\n        case \"remove-trigger\":\n          handleRemoveTrigger(req, rsp, op);\n          break;\n        case \"set-listener\":\n          handleSetListener(req, rsp, op);\n          break;\n        case \"remove-listener\":\n          handleRemoveListener(req, rsp, op);\n          break;\n        case \"suspend-trigger\":\n          handleSuspendTrigger(req, rsp, op);\n          break;\n        case \"resume-trigger\":\n          handleResumeTrigger(req, rsp, op);\n          break;\n        case \"set-policy\":\n          handleSetPolicies(req, rsp, op);\n          break;\n        case \"remove-policy\":\n          handleRemovePolicy(req, rsp, op);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp);\n    if (ops == null) {\n      // errors have already been added to the response so there's nothing left to do\n      return;\n    }\n    for (CommandOperation op : ops) {\n      switch (op.name) {\n        case \"set-trigger\":\n          handleSetTrigger(req, rsp, op);\n          break;\n        case \"remove-trigger\":\n          handleRemoveTrigger(req, rsp, op);\n          break;\n        case \"set-listener\":\n          handleSetListener(req, rsp, op);\n          break;\n        case \"remove-listener\":\n          handleRemoveListener(req, rsp, op);\n          break;\n        case \"suspend-trigger\":\n          handleSuspendTrigger(req, rsp, op);\n          break;\n        case \"resume-trigger\":\n          handleResumeTrigger(req, rsp, op);\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63","date":1493709133,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp, singletonCommands);\n    if (ops == null) {\n      // errors have already been added to the response so there's nothing left to do\n      return;\n    }\n    for (CommandOperation op : ops) {\n      switch (op.name) {\n        case \"set-trigger\":\n          handleSetTrigger(req, rsp, op);\n          break;\n        case \"remove-trigger\":\n          handleRemoveTrigger(req, rsp, op);\n          break;\n        case \"set-listener\":\n          handleSetListener(req, rsp, op);\n          break;\n        case \"remove-listener\":\n          handleRemoveListener(req, rsp, op);\n          break;\n        case \"suspend-trigger\":\n          handleSuspendTrigger(req, rsp, op);\n          break;\n        case \"resume-trigger\":\n          handleResumeTrigger(req, rsp, op);\n          break;\n        case \"set-policy\":\n          handleSetPolicies(req, rsp, op);\n          break;\n        case \"remove-policy\":\n          handleRemovePolicy(req, rsp, op);\n          break;\n        case \"set-cluster-preferences\":\n          handleSetClusterPreferences(req, rsp, op);\n          break;\n        case \"set-cluster-policy\":\n          handleSetClusterPolicy(req, rsp, op);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp);\n    if (ops == null) {\n      // errors have already been added to the response so there's nothing left to do\n      return;\n    }\n    for (CommandOperation op : ops) {\n      switch (op.name) {\n        case \"set-trigger\":\n          handleSetTrigger(req, rsp, op);\n          break;\n        case \"remove-trigger\":\n          handleRemoveTrigger(req, rsp, op);\n          break;\n        case \"set-listener\":\n          handleSetListener(req, rsp, op);\n          break;\n        case \"remove-listener\":\n          handleRemoveListener(req, rsp, op);\n          break;\n        case \"suspend-trigger\":\n          handleSuspendTrigger(req, rsp, op);\n          break;\n        case \"resume-trigger\":\n          handleResumeTrigger(req, rsp, op);\n          break;\n        case \"set-policy\":\n          handleSetPolicies(req, rsp, op);\n          break;\n        case \"remove-policy\":\n          handleRemovePolicy(req, rsp, op);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f71b6d873161f41cef30256f162ac6fa8f88858","date":1494576240,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"GET\".equals(httpMethod)) {\n      Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n      rsp.getValues().addAll(map);\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else  {\n      if (req.getContentStreams() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n      }\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp, singletonCommands);\n      if (ops == null) {\n        // errors have already been added to the response so there's nothing left to do\n        return;\n      }\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case \"set-trigger\":\n            handleSetTrigger(req, rsp, op);\n            break;\n          case \"remove-trigger\":\n            handleRemoveTrigger(req, rsp, op);\n            break;\n          case \"set-listener\":\n            handleSetListener(req, rsp, op);\n            break;\n          case \"remove-listener\":\n            handleRemoveListener(req, rsp, op);\n            break;\n          case \"suspend-trigger\":\n            handleSuspendTrigger(req, rsp, op);\n            break;\n          case \"resume-trigger\":\n            handleResumeTrigger(req, rsp, op);\n            break;\n          case \"set-policy\":\n            handleSetPolicies(req, rsp, op);\n            break;\n          case \"remove-policy\":\n            handleRemovePolicy(req, rsp, op);\n            break;\n          case \"set-cluster-preferences\":\n            handleSetClusterPreferences(req, rsp, op);\n            break;\n          case \"set-cluster-policy\":\n            handleSetClusterPolicy(req, rsp, op);\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (req.getContentStreams() == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No contentStream\");\n    }\n    List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp, singletonCommands);\n    if (ops == null) {\n      // errors have already been added to the response so there's nothing left to do\n      return;\n    }\n    for (CommandOperation op : ops) {\n      switch (op.name) {\n        case \"set-trigger\":\n          handleSetTrigger(req, rsp, op);\n          break;\n        case \"remove-trigger\":\n          handleRemoveTrigger(req, rsp, op);\n          break;\n        case \"set-listener\":\n          handleSetListener(req, rsp, op);\n          break;\n        case \"remove-listener\":\n          handleRemoveListener(req, rsp, op);\n          break;\n        case \"suspend-trigger\":\n          handleSuspendTrigger(req, rsp, op);\n          break;\n        case \"resume-trigger\":\n          handleResumeTrigger(req, rsp, op);\n          break;\n        case \"set-policy\":\n          handleSetPolicies(req, rsp, op);\n          break;\n        case \"remove-policy\":\n          handleRemovePolicy(req, rsp, op);\n          break;\n        case \"set-cluster-preferences\":\n          handleSetClusterPreferences(req, rsp, op);\n          break;\n        case \"set-cluster-policy\":\n          handleSetClusterPolicy(req, rsp, op);\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8c611a68829ce670498db444c39975f66888dfd","date":1494922075,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    RequestHandlerUtils.setWt(req, JSON);\n\n    if (\"GET\".equals(httpMethod)) {\n      Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n      rsp.getValues().addAll(map);\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else  {\n      if (req.getContentStreams() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n      }\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp, singletonCommands);\n      if (ops == null) {\n        // errors have already been added to the response so there's nothing left to do\n        return;\n      }\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case \"set-trigger\":\n            handleSetTrigger(req, rsp, op);\n            break;\n          case \"remove-trigger\":\n            handleRemoveTrigger(req, rsp, op);\n            break;\n          case \"set-listener\":\n            handleSetListener(req, rsp, op);\n            break;\n          case \"remove-listener\":\n            handleRemoveListener(req, rsp, op);\n            break;\n          case \"suspend-trigger\":\n            handleSuspendTrigger(req, rsp, op);\n            break;\n          case \"resume-trigger\":\n            handleResumeTrigger(req, rsp, op);\n            break;\n          case \"set-policy\":\n            handleSetPolicies(req, rsp, op);\n            break;\n          case \"remove-policy\":\n            handleRemovePolicy(req, rsp, op);\n            break;\n          case \"set-cluster-preferences\":\n            handleSetClusterPreferences(req, rsp, op);\n            break;\n          case \"set-cluster-policy\":\n            handleSetClusterPolicy(req, rsp, op);\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    if (\"GET\".equals(httpMethod)) {\n      Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n      rsp.getValues().addAll(map);\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else  {\n      if (req.getContentStreams() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n      }\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp, singletonCommands);\n      if (ops == null) {\n        // errors have already been added to the response so there's nothing left to do\n        return;\n      }\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case \"set-trigger\":\n            handleSetTrigger(req, rsp, op);\n            break;\n          case \"remove-trigger\":\n            handleRemoveTrigger(req, rsp, op);\n            break;\n          case \"set-listener\":\n            handleSetListener(req, rsp, op);\n            break;\n          case \"remove-listener\":\n            handleRemoveListener(req, rsp, op);\n            break;\n          case \"suspend-trigger\":\n            handleSuspendTrigger(req, rsp, op);\n            break;\n          case \"resume-trigger\":\n            handleResumeTrigger(req, rsp, op);\n            break;\n          case \"set-policy\":\n            handleSetPolicies(req, rsp, op);\n            break;\n          case \"remove-policy\":\n            handleRemovePolicy(req, rsp, op);\n            break;\n          case \"set-cluster-preferences\":\n            handleSetClusterPreferences(req, rsp, op);\n            break;\n          case \"set-cluster-policy\":\n            handleSetClusterPolicy(req, rsp, op);\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09d06843c166c033fc611df4ce71e33731bc1ad1","date":1495531684,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n        rsp.getValues().addAll(map);\n        if (req.getParams().getBool(\"diagnostics\", false)) {\n          handleDiagnostics(rsp, map);\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp, singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        for (CommandOperation op : ops) {\n          switch (op.name) {\n            case \"set-trigger\":\n              handleSetTrigger(req, rsp, op);\n              break;\n            case \"remove-trigger\":\n              handleRemoveTrigger(req, rsp, op);\n              break;\n            case \"set-listener\":\n              handleSetListener(req, rsp, op);\n              break;\n            case \"remove-listener\":\n              handleRemoveListener(req, rsp, op);\n              break;\n            case \"suspend-trigger\":\n              handleSuspendTrigger(req, rsp, op);\n              break;\n            case \"resume-trigger\":\n              handleResumeTrigger(req, rsp, op);\n              break;\n            case \"set-policy\":\n              handleSetPolicies(req, rsp, op);\n              break;\n            case \"remove-policy\":\n              handleRemovePolicy(req, rsp, op);\n              break;\n            case \"set-cluster-preferences\":\n              handleSetClusterPreferences(req, rsp, op);\n              break;\n            case \"set-cluster-policy\":\n              handleSetClusterPolicy(req, rsp, op);\n              break;\n            default:\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n          }\n        }\n      }\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    RequestHandlerUtils.setWt(req, JSON);\n\n    if (\"GET\".equals(httpMethod)) {\n      Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n      rsp.getValues().addAll(map);\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    } else  {\n      if (req.getContentStreams() == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n      }\n      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp, singletonCommands);\n      if (ops == null) {\n        // errors have already been added to the response so there's nothing left to do\n        return;\n      }\n      for (CommandOperation op : ops) {\n        switch (op.name) {\n          case \"set-trigger\":\n            handleSetTrigger(req, rsp, op);\n            break;\n          case \"remove-trigger\":\n            handleRemoveTrigger(req, rsp, op);\n            break;\n          case \"set-listener\":\n            handleSetListener(req, rsp, op);\n            break;\n          case \"remove-listener\":\n            handleRemoveListener(req, rsp, op);\n            break;\n          case \"suspend-trigger\":\n            handleSuspendTrigger(req, rsp, op);\n            break;\n          case \"resume-trigger\":\n            handleResumeTrigger(req, rsp, op);\n            break;\n          case \"set-policy\":\n            handleSetPolicies(req, rsp, op);\n            break;\n          case \"remove-policy\":\n            handleRemovePolicy(req, rsp, op);\n            break;\n          case \"set-cluster-preferences\":\n            handleSetClusterPreferences(req, rsp, op);\n            break;\n          case \"set-cluster-policy\":\n            handleSetClusterPolicy(req, rsp, op);\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d913bcce36d9d659d239969d07e20d245a5690d9","date":1496064789,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n        rsp.getValues().addAll(map);\n        if (req.getParams().getBool(\"diagnostics\", false)) {\n          handleDiagnostics(rsp, map);\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp, singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        for (CommandOperation op : ops) {\n          switch (op.name) {\n            case \"set-trigger\":\n              handleSetTrigger(req, rsp, op);\n              break;\n            case \"remove-trigger\":\n              handleRemoveTrigger(req, rsp, op);\n              break;\n            case \"set-listener\":\n              handleSetListener(req, rsp, op);\n              break;\n            case \"remove-listener\":\n              handleRemoveListener(req, rsp, op);\n              break;\n            case \"suspend-trigger\":\n              handleSuspendTrigger(req, rsp, op);\n              break;\n            case \"resume-trigger\":\n              handleResumeTrigger(req, rsp, op);\n              break;\n            case \"set-policy\":\n              handleSetPolicies(req, rsp, op);\n              break;\n            case \"remove-policy\":\n              handleRemovePolicy(req, rsp, op);\n              break;\n            case \"set-cluster-preferences\":\n              handleSetClusterPreferences(req, rsp, op);\n              break;\n            case \"set-cluster-policy\":\n              handleSetClusterPolicy(req, rsp, op);\n              break;\n            default:\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n          }\n        }\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    }\n    finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n        rsp.getValues().addAll(map);\n        if (req.getParams().getBool(\"diagnostics\", false)) {\n          handleDiagnostics(rsp, map);\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp, singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        for (CommandOperation op : ops) {\n          switch (op.name) {\n            case \"set-trigger\":\n              handleSetTrigger(req, rsp, op);\n              break;\n            case \"remove-trigger\":\n              handleRemoveTrigger(req, rsp, op);\n              break;\n            case \"set-listener\":\n              handleSetListener(req, rsp, op);\n              break;\n            case \"remove-listener\":\n              handleRemoveListener(req, rsp, op);\n              break;\n            case \"suspend-trigger\":\n              handleSuspendTrigger(req, rsp, op);\n              break;\n            case \"resume-trigger\":\n              handleResumeTrigger(req, rsp, op);\n              break;\n            case \"set-policy\":\n              handleSetPolicies(req, rsp, op);\n              break;\n            case \"remove-policy\":\n              handleRemovePolicy(req, rsp, op);\n              break;\n            case \"set-cluster-preferences\":\n              handleSetClusterPreferences(req, rsp, op);\n              break;\n            case \"set-cluster-policy\":\n              handleSetClusterPolicy(req, rsp, op);\n              break;\n            default:\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n          }\n        }\n      }\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1fb1605adf454c3893d46676e444ce7597ba08","date":1496074563,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n        if (parts.size() == 2)  {\n          rsp.getValues().addAll(map);\n        } else if (parts.size() == 3 && \"diagnostics\".equals(parts.get(2))) {\n          handleDiagnostics(rsp, map);\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp, singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        for (CommandOperation op : ops) {\n          switch (op.name) {\n            case \"set-trigger\":\n              handleSetTrigger(req, rsp, op);\n              break;\n            case \"remove-trigger\":\n              handleRemoveTrigger(req, rsp, op);\n              break;\n            case \"set-listener\":\n              handleSetListener(req, rsp, op);\n              break;\n            case \"remove-listener\":\n              handleRemoveListener(req, rsp, op);\n              break;\n            case \"suspend-trigger\":\n              handleSuspendTrigger(req, rsp, op);\n              break;\n            case \"resume-trigger\":\n              handleResumeTrigger(req, rsp, op);\n              break;\n            case \"set-policy\":\n              handleSetPolicies(req, rsp, op);\n              break;\n            case \"remove-policy\":\n              handleRemovePolicy(req, rsp, op);\n              break;\n            case \"set-cluster-preferences\":\n              handleSetClusterPreferences(req, rsp, op);\n              break;\n            case \"set-cluster-policy\":\n              handleSetClusterPolicy(req, rsp, op);\n              break;\n            default:\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n          }\n        }\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    }\n    finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n        rsp.getValues().addAll(map);\n        if (req.getParams().getBool(\"diagnostics\", false)) {\n          handleDiagnostics(rsp, map);\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp, singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        for (CommandOperation op : ops) {\n          switch (op.name) {\n            case \"set-trigger\":\n              handleSetTrigger(req, rsp, op);\n              break;\n            case \"remove-trigger\":\n              handleRemoveTrigger(req, rsp, op);\n              break;\n            case \"set-listener\":\n              handleSetListener(req, rsp, op);\n              break;\n            case \"remove-listener\":\n              handleRemoveListener(req, rsp, op);\n              break;\n            case \"suspend-trigger\":\n              handleSuspendTrigger(req, rsp, op);\n              break;\n            case \"resume-trigger\":\n              handleResumeTrigger(req, rsp, op);\n              break;\n            case \"set-policy\":\n              handleSetPolicies(req, rsp, op);\n              break;\n            case \"remove-policy\":\n              handleRemovePolicy(req, rsp, op);\n              break;\n            case \"set-cluster-preferences\":\n              handleSetClusterPreferences(req, rsp, op);\n              break;\n            case \"set-cluster-policy\":\n              handleSetClusterPolicy(req, rsp, op);\n              break;\n            default:\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n          }\n        }\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    }\n    finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n        if (parts.size() == 2) {\n          rsp.getValues().addAll(map);\n        } else if (parts.size() == 3 && \"diagnostics\".equals(parts.get(2))) {\n          handleDiagnostics(rsp, map);\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        for (CommandOperation op : ops) {\n          switch (op.name) {\n            case \"set-policy\":\n              handleSetPolicies(req, rsp, op);\n              break;\n            case \"remove-policy\":\n              handleRemovePolicy(req, rsp, op);\n              break;\n            case \"set-cluster-preferences\":\n              handleSetClusterPreferences(req, rsp, op);\n              break;\n            case \"set-cluster-policy\":\n              handleSetClusterPolicy(req, rsp, op);\n              break;\n            default:\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n          }\n        }\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf","date":1496154116,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n        if (parts.size() == 2)  {\n          rsp.getValues().addAll(map);\n        } else if (parts.size() == 3 && DIAGNOSTICS.equals(parts.get(2))) {\n          handleDiagnostics(rsp, map);\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp, singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        for (CommandOperation op : ops) {\n          switch (op.name) {\n            case CMD_SET_TRIGGER:\n              handleSetTrigger(req, rsp, op);\n              break;\n            case CMD_REMOVE_TRIGGER:\n              handleRemoveTrigger(req, rsp, op);\n              break;\n            case CMD_SET_LISTENER:\n              handleSetListener(req, rsp, op);\n              break;\n            case CMD_REMOVE_LISTENER:\n              handleRemoveListener(req, rsp, op);\n              break;\n            case CMD_SUSPEND_TRIGGER:\n              handleSuspendTrigger(req, rsp, op);\n              break;\n            case CMD_RESUME_TRIGGER:\n              handleResumeTrigger(req, rsp, op);\n              break;\n            case CMD_SET_POLICY:\n              handleSetPolicies(req, rsp, op);\n              break;\n            case CMD_REMOVE_POLICY:\n              handleRemovePolicy(req, rsp, op);\n              break;\n            case CMD_SET_CLUSTER_PREFERENCES:\n              handleSetClusterPreferences(req, rsp, op);\n              break;\n            case CMD_SET_CLUSTER_POLICY:\n              handleSetClusterPolicy(req, rsp, op);\n              break;\n            default:\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n          }\n        }\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    }\n    finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n        if (parts.size() == 2)  {\n          rsp.getValues().addAll(map);\n        } else if (parts.size() == 3 && \"diagnostics\".equals(parts.get(2))) {\n          handleDiagnostics(rsp, map);\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp, singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        for (CommandOperation op : ops) {\n          switch (op.name) {\n            case \"set-trigger\":\n              handleSetTrigger(req, rsp, op);\n              break;\n            case \"remove-trigger\":\n              handleRemoveTrigger(req, rsp, op);\n              break;\n            case \"set-listener\":\n              handleSetListener(req, rsp, op);\n              break;\n            case \"remove-listener\":\n              handleRemoveListener(req, rsp, op);\n              break;\n            case \"suspend-trigger\":\n              handleSuspendTrigger(req, rsp, op);\n              break;\n            case \"resume-trigger\":\n              handleResumeTrigger(req, rsp, op);\n              break;\n            case \"set-policy\":\n              handleSetPolicies(req, rsp, op);\n              break;\n            case \"remove-policy\":\n              handleRemovePolicy(req, rsp, op);\n              break;\n            case \"set-cluster-preferences\":\n              handleSetClusterPreferences(req, rsp, op);\n              break;\n            case \"set-cluster-policy\":\n              handleSetClusterPolicy(req, rsp, op);\n              break;\n            default:\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n          }\n        }\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    }\n    finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n        if (parts.size() == 2) {\n          rsp.getValues().addAll(map);\n        } else if (parts.size() == 3 && \"diagnostics\".equals(parts.get(2))) {\n          handleDiagnostics(rsp, map);\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        for (CommandOperation op : ops) {\n          switch (op.name) {\n            case \"set-policy\":\n              handleSetPolicies(req, rsp, op);\n              break;\n            case \"remove-policy\":\n              handleRemovePolicy(req, rsp, op);\n              break;\n            case \"set-cluster-preferences\":\n              handleSetClusterPreferences(req, rsp, op);\n              break;\n            case \"set-cluster-policy\":\n              handleSetClusterPolicy(req, rsp, op);\n              break;\n            default:\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n          }\n        }\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n        if (parts.size() == 2)  {\n          rsp.getValues().addAll(map);\n        } else if (parts.size() == 3 && DIAGNOSTICS.equals(parts.get(2))) {\n          handleDiagnostics(rsp, map);\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        for (CommandOperation op : ops) {\n          switch (op.name) {\n            case CMD_SET_TRIGGER:\n              handleSetTrigger(req, rsp, op);\n              break;\n            case CMD_REMOVE_TRIGGER:\n              handleRemoveTrigger(req, rsp, op);\n              break;\n            case CMD_SET_LISTENER:\n              handleSetListener(req, rsp, op);\n              break;\n            case CMD_REMOVE_LISTENER:\n              handleRemoveListener(req, rsp, op);\n              break;\n            case CMD_SUSPEND_TRIGGER:\n              handleSuspendTrigger(req, rsp, op);\n              break;\n            case CMD_RESUME_TRIGGER:\n              handleResumeTrigger(req, rsp, op);\n              break;\n            case CMD_SET_POLICY:\n              handleSetPolicies(req, rsp, op);\n              break;\n            case CMD_REMOVE_POLICY:\n              handleRemovePolicy(req, rsp, op);\n              break;\n            case CMD_SET_CLUSTER_PREFERENCES:\n              handleSetClusterPreferences(req, rsp, op);\n              break;\n            case CMD_SET_CLUSTER_POLICY:\n              handleSetClusterPolicy(req, rsp, op);\n              break;\n            default:\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n          }\n        }\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n        if (parts.size() == 2)  {\n          rsp.getValues().addAll(map);\n        } else if (parts.size() == 3 && DIAGNOSTICS.equals(parts.get(2))) {\n          handleDiagnostics(rsp, map);\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp, singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        for (CommandOperation op : ops) {\n          switch (op.name) {\n            case CMD_SET_TRIGGER:\n              handleSetTrigger(req, rsp, op);\n              break;\n            case CMD_REMOVE_TRIGGER:\n              handleRemoveTrigger(req, rsp, op);\n              break;\n            case CMD_SET_LISTENER:\n              handleSetListener(req, rsp, op);\n              break;\n            case CMD_REMOVE_LISTENER:\n              handleRemoveListener(req, rsp, op);\n              break;\n            case CMD_SUSPEND_TRIGGER:\n              handleSuspendTrigger(req, rsp, op);\n              break;\n            case CMD_RESUME_TRIGGER:\n              handleResumeTrigger(req, rsp, op);\n              break;\n            case CMD_SET_POLICY:\n              handleSetPolicies(req, rsp, op);\n              break;\n            case CMD_REMOVE_POLICY:\n              handleRemovePolicy(req, rsp, op);\n              break;\n            case CMD_SET_CLUSTER_PREFERENCES:\n              handleSetClusterPreferences(req, rsp, op);\n              break;\n            case CMD_SET_CLUSTER_POLICY:\n              handleSetClusterPolicy(req, rsp, op);\n              break;\n            default:\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n          }\n        }\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    }\n    finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n        if (parts.size() == 2) {\n          rsp.getValues().addAll(map);\n        } else if (parts.size() == 3 && \"diagnostics\".equals(parts.get(2))) {\n          handleDiagnostics(rsp, map);\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        for (CommandOperation op : ops) {\n          switch (op.name) {\n            case \"set-policy\":\n              handleSetPolicies(req, rsp, op);\n              break;\n            case \"remove-policy\":\n              handleRemovePolicy(req, rsp, op);\n              break;\n            case \"set-cluster-preferences\":\n              handleSetClusterPreferences(req, rsp, op);\n              break;\n            case \"set-cluster-policy\":\n              handleSetClusterPolicy(req, rsp, op);\n              break;\n            default:\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n          }\n        }\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        AutoScalingConfig autoScalingConf = container.getZkController().zkStateReader.getAutoScalingConfig();\n        if (parts.size() == 2)  {\n          autoScalingConf.writeMap(new MapWriter.EntryWriter() {\n\n            @Override\n            public MapWriter.EntryWriter put(String k, Object v) throws IOException {\n              rsp.getValues().add(k, v);\n              return this;\n            }\n          });\n        } else if (parts.size() == 3 && DIAGNOSTICS.equals(parts.get(2))) {\n          handleDiagnostics(rsp, autoScalingConf);\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        processOps(req, rsp, ops);\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n        if (parts.size() == 2)  {\n          rsp.getValues().addAll(map);\n        } else if (parts.size() == 3 && DIAGNOSTICS.equals(parts.get(2))) {\n          handleDiagnostics(rsp, map);\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        for (CommandOperation op : ops) {\n          switch (op.name) {\n            case CMD_SET_TRIGGER:\n              handleSetTrigger(req, rsp, op);\n              break;\n            case CMD_REMOVE_TRIGGER:\n              handleRemoveTrigger(req, rsp, op);\n              break;\n            case CMD_SET_LISTENER:\n              handleSetListener(req, rsp, op);\n              break;\n            case CMD_REMOVE_LISTENER:\n              handleRemoveListener(req, rsp, op);\n              break;\n            case CMD_SUSPEND_TRIGGER:\n              handleSuspendTrigger(req, rsp, op);\n              break;\n            case CMD_RESUME_TRIGGER:\n              handleResumeTrigger(req, rsp, op);\n              break;\n            case CMD_SET_POLICY:\n              handleSetPolicies(req, rsp, op);\n              break;\n            case CMD_REMOVE_POLICY:\n              handleRemovePolicy(req, rsp, op);\n              break;\n            case CMD_SET_CLUSTER_PREFERENCES:\n              handleSetClusterPreferences(req, rsp, op);\n              break;\n            case CMD_SET_CLUSTER_POLICY:\n              handleSetClusterPolicy(req, rsp, op);\n              break;\n            default:\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n          }\n        }\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        AutoScalingConfig autoScalingConf = container.getZkController().zkStateReader.getAutoScalingConfig();\n        if (parts.size() == 2)  {\n          autoScalingConf.writeMap(new MapWriter.EntryWriter() {\n\n            @Override\n            public MapWriter.EntryWriter put(String k, Object v) throws IOException {\n              rsp.getValues().add(k, v);\n              return this;\n            }\n          });\n        } else if (parts.size() == 3 && DIAGNOSTICS.equals(parts.get(2))) {\n          handleDiagnostics(rsp, autoScalingConf);\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        processOps(req, rsp, ops);\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n        if (parts.size() == 2) {\n          rsp.getValues().addAll(map);\n        } else if (parts.size() == 3 && \"diagnostics\".equals(parts.get(2))) {\n          handleDiagnostics(rsp, map);\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        for (CommandOperation op : ops) {\n          switch (op.name) {\n            case \"set-policy\":\n              handleSetPolicies(req, rsp, op);\n              break;\n            case \"remove-policy\":\n              handleRemovePolicy(req, rsp, op);\n              break;\n            case \"set-cluster-preferences\":\n              handleSetClusterPreferences(req, rsp, op);\n              break;\n            case \"set-cluster-policy\":\n              handleSetClusterPolicy(req, rsp, op);\n              break;\n            default:\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n          }\n        }\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        AutoScalingConfig autoScalingConf = container.getZkController().zkStateReader.getAutoScalingConfig();\n        if (parts.size() == 2)  {\n          autoScalingConf.writeMap(new MapWriter.EntryWriter() {\n\n            @Override\n            public MapWriter.EntryWriter put(String k, Object v) throws IOException {\n              rsp.getValues().add(k, v);\n              return this;\n            }\n          });\n        } else if (parts.size() == 3 && DIAGNOSTICS.equals(parts.get(2))) {\n          handleDiagnostics(rsp, autoScalingConf);\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        processOps(req, rsp, ops);\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n        if (parts.size() == 2) {\n          rsp.getValues().addAll(map);\n        } else if (parts.size() == 3 && \"diagnostics\".equals(parts.get(2))) {\n          handleDiagnostics(rsp, map);\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        for (CommandOperation op : ops) {\n          switch (op.name) {\n            case \"set-policy\":\n              handleSetPolicies(req, rsp, op);\n              break;\n            case \"remove-policy\":\n              handleRemovePolicy(req, rsp, op);\n              break;\n            case \"set-cluster-preferences\":\n              handleSetClusterPreferences(req, rsp, op);\n              break;\n            case \"set-cluster-policy\":\n              handleSetClusterPolicy(req, rsp, op);\n              break;\n            default:\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown command: \" + op.name);\n          }\n        }\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        AutoScalingConfig autoScalingConf = container.getZkController().zkStateReader.getAutoScalingConfig();\n        if (parts.size() == 2)  {\n          autoScalingConf.writeMap(new MapWriter.EntryWriter() {\n\n            @Override\n            public MapWriter.EntryWriter put(String k, Object v) throws IOException {\n              rsp.getValues().add(k, v);\n              return this;\n            }\n          });\n        } else if (parts.size() == 3) {\n          if (DIAGNOSTICS.equals(parts.get(2))) {\n            handleDiagnostics(rsp, autoScalingConf);\n          } else if (SUGGESTIONS.equals(parts.get(2))) {\n            handleSuggestions(rsp, autoScalingConf);\n          }\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        processOps(req, rsp, ops);\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        AutoScalingConfig autoScalingConf = container.getZkController().zkStateReader.getAutoScalingConfig();\n        if (parts.size() == 2)  {\n          autoScalingConf.writeMap(new MapWriter.EntryWriter() {\n\n            @Override\n            public MapWriter.EntryWriter put(String k, Object v) throws IOException {\n              rsp.getValues().add(k, v);\n              return this;\n            }\n          });\n        } else if (parts.size() == 3 && DIAGNOSTICS.equals(parts.get(2))) {\n          handleDiagnostics(rsp, autoScalingConf);\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        processOps(req, rsp, ops);\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        if (parts.size() == 2)  {\n          autoScalingConf.writeMap(new MapWriter.EntryWriter() {\n\n            @Override\n            public MapWriter.EntryWriter put(String k, Object v) throws IOException {\n              rsp.getValues().add(k, v);\n              return this;\n            }\n          });\n        } else if (parts.size() == 3) {\n          if (DIAGNOSTICS.equals(parts.get(2))) {\n            handleDiagnostics(rsp, autoScalingConf);\n          } else if (SUGGESTIONS.equals(parts.get(2))) {\n            handleSuggestions(rsp, autoScalingConf);\n          }\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        processOps(req, rsp, ops);\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        AutoScalingConfig autoScalingConf = container.getZkController().zkStateReader.getAutoScalingConfig();\n        if (parts.size() == 2)  {\n          autoScalingConf.writeMap(new MapWriter.EntryWriter() {\n\n            @Override\n            public MapWriter.EntryWriter put(String k, Object v) throws IOException {\n              rsp.getValues().add(k, v);\n              return this;\n            }\n          });\n        } else if (parts.size() == 3) {\n          if (DIAGNOSTICS.equals(parts.get(2))) {\n            handleDiagnostics(rsp, autoScalingConf);\n          } else if (SUGGESTIONS.equals(parts.get(2))) {\n            handleSuggestions(rsp, autoScalingConf);\n          }\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        processOps(req, rsp, ops);\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"457ac99a6d7227f954082cc753a08b18225e4553","date":1540167281,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        if (parts.size() == 2)  {\n          autoScalingConf.writeMap(new MapWriter.EntryWriter() {\n\n            @Override\n            public MapWriter.EntryWriter put(CharSequence k, Object v) {\n              rsp.getValues().add(k.toString(), v);\n              return this;\n            }\n          });\n        } else if (parts.size() == 3) {\n          if (DIAGNOSTICS.equals(parts.get(2))) {\n            handleDiagnostics(rsp, autoScalingConf);\n          } else if (SUGGESTIONS.equals(parts.get(2))) {\n            handleSuggestions(rsp, autoScalingConf);\n          }\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        processOps(req, rsp, ops);\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        if (parts.size() == 2)  {\n          autoScalingConf.writeMap(new MapWriter.EntryWriter() {\n\n            @Override\n            public MapWriter.EntryWriter put(String k, Object v) throws IOException {\n              rsp.getValues().add(k, v);\n              return this;\n            }\n          });\n        } else if (parts.size() == 3) {\n          if (DIAGNOSTICS.equals(parts.get(2))) {\n            handleDiagnostics(rsp, autoScalingConf);\n          } else if (SUGGESTIONS.equals(parts.get(2))) {\n            handleSuggestions(rsp, autoScalingConf);\n          }\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        processOps(req, rsp, ops);\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d3a1cba0d84384334e5c75e77d139a3a9e480fa","date":1557955868,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        if (parts.size() == 2) {\n          autoScalingConf.writeMap(new MapWriter.EntryWriter() {\n\n            @Override\n            public MapWriter.EntryWriter put(CharSequence k, Object v) {\n              rsp.getValues().add(k.toString(), v);\n              return this;\n            }\n          });\n        } else if (parts.size() == 3) {\n          if (DIAGNOSTICS.equals(parts.get(2))) {\n            handleDiagnostics(rsp, autoScalingConf);\n          } else if (SUGGESTIONS.equals(parts.get(2))) {\n            handleSuggestions(rsp, autoScalingConf);\n          }\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        String path = (String) req.getContext().get(\"path\");\n        if (path != null) {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() == 3 && SUGGESTIONS.equals(parts.get(2))) {\n            Map map = (Map) Utils.fromJSON(req.getContentStreams().iterator().next().getStream());\n            AutoScalingConfig config = new AutoScalingConfig(map);\n            handleSuggestions(rsp, config);\n            return;\n          }\n        }\n\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        processOps(req, rsp, ops);\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        if (parts.size() == 2)  {\n          autoScalingConf.writeMap(new MapWriter.EntryWriter() {\n\n            @Override\n            public MapWriter.EntryWriter put(CharSequence k, Object v) {\n              rsp.getValues().add(k.toString(), v);\n              return this;\n            }\n          });\n        } else if (parts.size() == 3) {\n          if (DIAGNOSTICS.equals(parts.get(2))) {\n            handleDiagnostics(rsp, autoScalingConf);\n          } else if (SUGGESTIONS.equals(parts.get(2))) {\n            handleSuggestions(rsp, autoScalingConf);\n          }\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        processOps(req, rsp, ops);\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285d2e15f5866fae57313f480e7499581389acad","date":1558506140,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        if (parts.size() == 2) {\n          autoScalingConf.writeMap(new MapWriter.EntryWriter() {\n\n            @Override\n            public MapWriter.EntryWriter put(CharSequence k, Object v) {\n              rsp.getValues().add(k.toString(), v);\n              return this;\n            }\n          });\n        } else if (parts.size() == 3) {\n          if (DIAGNOSTICS.equals(parts.get(2))) {\n            handleDiagnostics(rsp, autoScalingConf);\n          } else if (SUGGESTIONS.equals(parts.get(2))) {\n            handleSuggestions(rsp, autoScalingConf);\n          }\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        String path = (String) req.getContext().get(\"path\");\n        if (path != null) {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if(parts.size() == 3) {\n            Map map = (Map) Utils.fromJSON(req.getContentStreams().iterator().next().getStream());\n            if (SUGGESTIONS.equals(parts.get(2))) {\n              handleSuggestions(rsp, new AutoScalingConfig(map));\n              return;\n            } else if (DIAGNOSTICS.equals(parts.get(2))) {\n              handleDiagnostics(rsp, new AutoScalingConfig(map));\n              return;\n            }\n          }\n        }\n\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        processOps(req, rsp, ops);\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        if (parts.size() == 2) {\n          autoScalingConf.writeMap(new MapWriter.EntryWriter() {\n\n            @Override\n            public MapWriter.EntryWriter put(CharSequence k, Object v) {\n              rsp.getValues().add(k.toString(), v);\n              return this;\n            }\n          });\n        } else if (parts.size() == 3) {\n          if (DIAGNOSTICS.equals(parts.get(2))) {\n            handleDiagnostics(rsp, autoScalingConf);\n          } else if (SUGGESTIONS.equals(parts.get(2))) {\n            handleSuggestions(rsp, autoScalingConf);\n          }\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        String path = (String) req.getContext().get(\"path\");\n        if (path != null) {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() == 3 && SUGGESTIONS.equals(parts.get(2))) {\n            Map map = (Map) Utils.fromJSON(req.getContentStreams().iterator().next().getStream());\n            AutoScalingConfig config = new AutoScalingConfig(map);\n            handleSuggestions(rsp, config);\n            return;\n          }\n        }\n\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        processOps(req, rsp, ops);\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f90164e4baf99ca8e0d459a85e1c359ccad769","date":1558579809,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/', true);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        if (parts.size() == 2) {\n          autoScalingConf.writeMap(new MapWriter.EntryWriter() {\n\n            @Override\n            public MapWriter.EntryWriter put(CharSequence k, Object v) {\n              rsp.getValues().add(k.toString(), v);\n              return this;\n            }\n          });\n        } else {\n          getSubpathExecutor(parts).ifPresent(it -> it.accept(rsp, autoScalingConf));\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        String path = (String) req.getContext().get(\"path\");\n        if (path != null) {\n          List<String> parts = StrUtils.splitSmart(path, '/', true);\n          if(parts.size() == 3){\n            getSubpathExecutor(parts).ifPresent(it -> {\n              Map map = null;\n              try {\n                map = (Map) Utils.fromJSON(req.getContentStreams().iterator().next().getStream());\n              } catch (IOException e1) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error parsing payload\", e1);\n              }\n              it.accept(rsp, new AutoScalingConfig(map));\n            });\n\n            return;\n          }\n\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        processOps(req, rsp, ops);\n      }\n\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/');\n        if (parts.get(0).isEmpty()) parts.remove(0);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        if (parts.size() == 2) {\n          autoScalingConf.writeMap(new MapWriter.EntryWriter() {\n\n            @Override\n            public MapWriter.EntryWriter put(CharSequence k, Object v) {\n              rsp.getValues().add(k.toString(), v);\n              return this;\n            }\n          });\n        } else if (parts.size() == 3) {\n          if (DIAGNOSTICS.equals(parts.get(2))) {\n            handleDiagnostics(rsp, autoScalingConf);\n          } else if (SUGGESTIONS.equals(parts.get(2))) {\n            handleSuggestions(rsp, autoScalingConf);\n          }\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        String path = (String) req.getContext().get(\"path\");\n        if (path != null) {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if(parts.size() == 3) {\n            Map map = (Map) Utils.fromJSON(req.getContentStreams().iterator().next().getStream());\n            if (SUGGESTIONS.equals(parts.get(2))) {\n              handleSuggestions(rsp, new AutoScalingConfig(map));\n              return;\n            } else if (DIAGNOSTICS.equals(parts.get(2))) {\n              handleDiagnostics(rsp, new AutoScalingConfig(map));\n              return;\n            }\n          }\n        }\n\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        processOps(req, rsp, ops);\n      }\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc9c1463ee15ef7c0d3b9656b69b7a5ba49ac3d4","date":1558992012,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/', true);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        if (parts.size() == 2) {\n          autoScalingConf.writeMap(new MapWriter.EntryWriter() {\n\n            @Override\n            public MapWriter.EntryWriter put(CharSequence k, Object v) {\n              rsp.getValues().add(k.toString(), v);\n              return this;\n            }\n          });\n        } else {\n          getSubpathExecutor(parts, req).ifPresent(it -> it.accept(rsp, autoScalingConf));\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        String path = (String) req.getContext().get(\"path\");\n        if (path != null) {\n          List<String> parts = StrUtils.splitSmart(path, '/', true);\n          if(parts.size() == 3){\n            getSubpathExecutor(parts, req).ifPresent(it -> {\n              Map map = null;\n              try {\n                map = (Map) Utils.fromJSON(req.getContentStreams().iterator().next().getStream());\n              } catch (IOException e1) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error parsing payload\", e1);\n              }\n              it.accept(rsp, new AutoScalingConfig(map));\n            });\n\n            return;\n          }\n\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        processOps(req, rsp, ops);\n      }\n\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/', true);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        if (parts.size() == 2) {\n          autoScalingConf.writeMap(new MapWriter.EntryWriter() {\n\n            @Override\n            public MapWriter.EntryWriter put(CharSequence k, Object v) {\n              rsp.getValues().add(k.toString(), v);\n              return this;\n            }\n          });\n        } else {\n          getSubpathExecutor(parts).ifPresent(it -> it.accept(rsp, autoScalingConf));\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        String path = (String) req.getContext().get(\"path\");\n        if (path != null) {\n          List<String> parts = StrUtils.splitSmart(path, '/', true);\n          if(parts.size() == 3){\n            getSubpathExecutor(parts).ifPresent(it -> {\n              Map map = null;\n              try {\n                map = (Map) Utils.fromJSON(req.getContentStreams().iterator().next().getStream());\n              } catch (IOException e1) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error parsing payload\", e1);\n              }\n              it.accept(rsp, new AutoScalingConfig(map));\n            });\n\n            return;\n          }\n\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        processOps(req, rsp, ops);\n      }\n\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/', true);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        if (parts.size() == 2) {\n          autoScalingConf.writeMap(new MapWriter.EntryWriter() {\n\n            @Override\n            public MapWriter.EntryWriter put(CharSequence k, Object v) {\n              rsp.getValues().add(k.toString(), v);\n              return this;\n            }\n          });\n        } else {\n          getSubpathExecutor(parts, req).ifPresent(it -> it.accept(rsp, autoScalingConf));\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        String path = (String) req.getContext().get(\"path\");\n        if (path != null) {\n          List<String> parts = StrUtils.splitSmart(path, '/', true);\n          if(parts.size() == 3){\n            getSubpathExecutor(parts, req).ifPresent(it -> {\n              Map map = null;\n              try {\n                map = (Map) Utils.fromJSON(req.getContentStreams().iterator().next().getStream());\n              } catch (IOException e1) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error parsing payload\", e1);\n              }\n              it.accept(rsp, new AutoScalingConfig(map));\n            });\n\n            return;\n          }\n\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        processOps(req, rsp, ops);\n      }\n\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/', true);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        if (parts.size() == 2) {\n          autoScalingConf.writeMap(new MapWriter.EntryWriter() {\n\n            @Override\n            public MapWriter.EntryWriter put(CharSequence k, Object v) {\n              rsp.getValues().add(k.toString(), v);\n              return this;\n            }\n          });\n        } else {\n          getSubpathExecutor(parts, req).ifPresent(it -> it.accept(rsp, autoScalingConf));\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        String path = (String) req.getContext().get(\"path\");\n        if (path != null) {\n          List<String> parts = StrUtils.splitSmart(path, '/', true);\n          if(parts.size() == 3){\n            getSubpathExecutor(parts, req).ifPresent(it -> {\n              Map map = null;\n              try {\n                map = (Map) Utils.fromJSON(req.getContentStreams().iterator().next().getStream());\n              } catch (IOException e1) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error parsing payload\", e1);\n              }\n              it.accept(rsp, new AutoScalingConfig(map));\n            });\n\n            return;\n          }\n\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        processOps(req, rsp, ops);\n      }\n\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      String httpMethod = (String) req.getContext().get(\"httpMethod\");\n      RequestHandlerUtils.setWt(req, JSON);\n\n      if (\"GET\".equals(httpMethod)) {\n        String path = (String) req.getContext().get(\"path\");\n        if (path == null) path = \"/cluster/autoscaling\";\n        List<String> parts = StrUtils.splitSmart(path, '/', true);\n\n        if (parts.size() < 2 || parts.size() > 3) {\n          // invalid\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown path: \" + path);\n        }\n\n        AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        if (parts.size() == 2) {\n          autoScalingConf.writeMap(new MapWriter.EntryWriter() {\n\n            @Override\n            public MapWriter.EntryWriter put(CharSequence k, Object v) {\n              rsp.getValues().add(k.toString(), v);\n              return this;\n            }\n          });\n        } else {\n          getSubpathExecutor(parts, req).ifPresent(it -> it.accept(rsp, autoScalingConf));\n        }\n      } else {\n        if (req.getContentStreams() == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No commands specified for autoscaling\");\n        }\n        String path = (String) req.getContext().get(\"path\");\n        if (path != null) {\n          List<String> parts = StrUtils.splitSmart(path, '/', true);\n          if(parts.size() == 3){\n            getSubpathExecutor(parts, req).ifPresent(it -> {\n              Map map = null;\n              try {\n                map = (Map) Utils.fromJSON(req.getContentStreams().iterator().next().getStream());\n              } catch (IOException e1) {\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"error parsing payload\", e1);\n              }\n              it.accept(rsp, new AutoScalingConfig(map));\n            });\n\n            return;\n          }\n\n        }\n        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);\n        if (ops == null) {\n          // errors have already been added to the response so there's nothing left to do\n          return;\n        }\n        processOps(req, rsp, ops);\n      }\n\n    } catch (Exception e) {\n      rsp.getValues().add(\"result\", \"failure\");\n      throw e;\n    } finally {\n      RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a1fb1605adf454c3893d46676e444ce7597ba08":["d913bcce36d9d659d239969d07e20d245a5690d9"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"285d2e15f5866fae57313f480e7499581389acad":["0d3a1cba0d84384334e5c75e77d139a3a9e480fa"],"32c42b3b8d01657c1fa648ce7faafee5d9a68f07":["9227359ab3bd86e5b85fab89a99332da7d5bacb1"],"0d3a1cba0d84384334e5c75e77d139a3a9e480fa":["457ac99a6d7227f954082cc753a08b18225e4553"],"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf":["2a1fb1605adf454c3893d46676e444ce7597ba08"],"d913bcce36d9d659d239969d07e20d245a5690d9":["09d06843c166c033fc611df4ce71e33731bc1ad1"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"9227359ab3bd86e5b85fab89a99332da7d5bacb1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["66bf265775ef85fdd57c7b2bd73d9f3897fae1cf","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"51f90164e4baf99ca8e0d459a85e1c359ccad769":["285d2e15f5866fae57313f480e7499581389acad"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb6a4d0a88fea57ec3a4044266f6ed46659457a5":["32c42b3b8d01657c1fa648ce7faafee5d9a68f07"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["560c18d71dad43d675158783c3840f8c80d6d39c"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"457ac99a6d7227f954082cc753a08b18225e4553":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"fc9c1463ee15ef7c0d3b9656b69b7a5ba49ac3d4":["51f90164e4baf99ca8e0d459a85e1c359ccad769"],"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63":["1b51bf16b2321204d381cc1154f0c975f5e8b9a2"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"09d06843c166c033fc611df4ce71e33731bc1ad1":["a8c611a68829ce670498db444c39975f66888dfd"],"9f71b6d873161f41cef30256f162ac6fa8f88858":["738b0ca71fa4c8a1f63e6368e8a3912bfc540f63"],"a8c611a68829ce670498db444c39975f66888dfd":["9f71b6d873161f41cef30256f162ac6fa8f88858"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["fc9c1463ee15ef7c0d3b9656b69b7a5ba49ac3d4"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1b51bf16b2321204d381cc1154f0c975f5e8b9a2":["bb6a4d0a88fea57ec3a4044266f6ed46659457a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"2a1fb1605adf454c3893d46676e444ce7597ba08":["66bf265775ef85fdd57c7b2bd73d9f3897fae1cf"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"285d2e15f5866fae57313f480e7499581389acad":["51f90164e4baf99ca8e0d459a85e1c359ccad769"],"32c42b3b8d01657c1fa648ce7faafee5d9a68f07":["bb6a4d0a88fea57ec3a4044266f6ed46659457a5"],"0d3a1cba0d84384334e5c75e77d139a3a9e480fa":["285d2e15f5866fae57313f480e7499581389acad"],"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"d913bcce36d9d659d239969d07e20d245a5690d9":["2a1fb1605adf454c3893d46676e444ce7597ba08"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"9227359ab3bd86e5b85fab89a99332da7d5bacb1":["32c42b3b8d01657c1fa648ce7faafee5d9a68f07"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"51f90164e4baf99ca8e0d459a85e1c359ccad769":["fc9c1463ee15ef7c0d3b9656b69b7a5ba49ac3d4"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9227359ab3bd86e5b85fab89a99332da7d5bacb1","74aea047dff7f7c38a2d766827bd20d356f98c6a","28288370235ed02234a64753cdbf0c6ec096304a","a513b6a92751e54c76fb5447948c9e7d437163a7"],"bb6a4d0a88fea57ec3a4044266f6ed46659457a5":["1b51bf16b2321204d381cc1154f0c975f5e8b9a2"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["457ac99a6d7227f954082cc753a08b18225e4553"],"560c18d71dad43d675158783c3840f8c80d6d39c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"457ac99a6d7227f954082cc753a08b18225e4553":["0d3a1cba0d84384334e5c75e77d139a3a9e480fa"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fc9c1463ee15ef7c0d3b9656b69b7a5ba49ac3d4":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"738b0ca71fa4c8a1f63e6368e8a3912bfc540f63":["9f71b6d873161f41cef30256f162ac6fa8f88858"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"09d06843c166c033fc611df4ce71e33731bc1ad1":["d913bcce36d9d659d239969d07e20d245a5690d9"],"9f71b6d873161f41cef30256f162ac6fa8f88858":["a8c611a68829ce670498db444c39975f66888dfd"],"a8c611a68829ce670498db444c39975f66888dfd":["09d06843c166c033fc611df4ce71e33731bc1ad1"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"1b51bf16b2321204d381cc1154f0c975f5e8b9a2":["738b0ca71fa4c8a1f63e6368e8a3912bfc540f63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}