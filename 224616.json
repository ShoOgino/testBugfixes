{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestSplittingBreakIterator#readBoundariesToString(BreakIterator,String).mjava","commits":[{"id":"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","date":1475611903,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestSplittingBreakIterator#readBoundariesToString(BreakIterator,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a string comprised of spaces and '^' only at the boundaries.\n   */\n  private String readBoundariesToString(BreakIterator bi, String text) {\n    // init markers to spaces\n    StringBuilder markers = new StringBuilder();\n    markers.setLength(text.length() + 1);\n    for (int k = 0; k < markers.length(); k++) {\n      markers.setCharAt(k, ' ');\n    }\n\n    bi.setText(text);\n    for (int boundary = bi.current(); boundary != BreakIterator.DONE; boundary = bi.next()) {\n      markers.setCharAt(boundary, '^');\n    }\n    return markers.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestSplittingBreakIterator#readBoundariesToString(BreakIterator,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a string comprised of spaces and '^' only at the boundaries.\n   */\n  private String readBoundariesToString(BreakIterator bi, String text) {\n    // init markers to spaces\n    StringBuilder markers = new StringBuilder();\n    markers.setLength(text.length() + 1);\n    for (int k = 0; k < markers.length(); k++) {\n      markers.setCharAt(k, ' ');\n    }\n\n    bi.setText(text);\n    for (int boundary = bi.current(); boundary != BreakIterator.DONE; boundary = bi.next()) {\n      markers.setCharAt(boundary, '^');\n    }\n    return markers.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1f5ce59aaf4a055cc9ec62c15a89c263a05ff4b2":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}