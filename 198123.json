{"path":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,boolean).mjava","sourceNew":"  /** Wraps another filter's result and caches it. If\n   * {@code recacheDeletes} is {@code true}, then new deletes (for example\n   * after {@link DirectoryReader#openIfChanged}) will cause the filter\n   * {@link DocIdSet} to be recached.\n   *\n   * <p>If your index changes seldom, it is recommended to use {@code recacheDeletes=true},\n   * as recaching will only occur when the index is reopened.\n   * For near-real-time indexes or indexes that are often\n   * reopened with (e.g., {@link DirectoryReader#openIfChanged} is used), you should\n   * pass {@code recacheDeletes=false}. This will cache the filter results omitting\n   * deletions and will AND them in while scoring.\n   * @param filter Filter to cache results of\n   * @param recacheDeletes if deletions on the underlying index should recache\n   */\n  public CachingWrapperFilter(Filter filter, boolean recacheDeletes) {\n    this.filter = filter;\n    this.recacheDeletes = recacheDeletes;\n  }\n\n","sourceOld":"  /** Wraps another filter's result and caches it. If\n   * {@code recacheDeletes} is {@code true}, then new deletes (for example\n   * after {@link DirectoryReader#openIfChanged}) will cause the filter\n   * {@link DocIdSet} to be recached.\n   *\n   * <p>If your index changes seldom, it is recommended to use {@code recacheDeletes=true},\n   * as recaching will only occur when the index is reopened.\n   * For near-real-time indexes or indexes that are often\n   * reopened with (e.g., {@link DirectoryReader#openIfChanged} is used), you should\n   * pass {@code recacheDeletes=false}. This will cache the filter results omitting\n   * deletions and will AND them in while scoring.\n   * @param filter Filter to cache results of\n   * @param recacheDeletes if deletions on the underlying index should recache\n   */\n  public CachingWrapperFilter(Filter filter, boolean recacheDeletes) {\n    this.filter = filter;\n    this.recacheDeletes = recacheDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a3bd393140af58401b6bcd1d1f6bdc896c718c8","date":1354060578,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,boolean).mjava","sourceNew":null,"sourceOld":"  /** Wraps another filter's result and caches it. If\n   * {@code recacheDeletes} is {@code true}, then new deletes (for example\n   * after {@link DirectoryReader#openIfChanged}) will cause the filter\n   * {@link DocIdSet} to be recached.\n   *\n   * <p>If your index changes seldom, it is recommended to use {@code recacheDeletes=true},\n   * as recaching will only occur when the index is reopened.\n   * For near-real-time indexes or indexes that are often\n   * reopened with (e.g., {@link DirectoryReader#openIfChanged} is used), you should\n   * pass {@code recacheDeletes=false}. This will cache the filter results omitting\n   * deletions and will AND them in while scoring.\n   * @param filter Filter to cache results of\n   * @param recacheDeletes if deletions on the underlying index should recache\n   */\n  public CachingWrapperFilter(Filter filter, boolean recacheDeletes) {\n    this.filter = filter;\n    this.recacheDeletes = recacheDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/CachingWrapperFilter#CachingWrapperFilter(Filter,boolean).mjava","sourceNew":null,"sourceOld":"  /** Wraps another filter's result and caches it. If\n   * {@code recacheDeletes} is {@code true}, then new deletes (for example\n   * after {@link DirectoryReader#openIfChanged}) will cause the filter\n   * {@link DocIdSet} to be recached.\n   *\n   * <p>If your index changes seldom, it is recommended to use {@code recacheDeletes=true},\n   * as recaching will only occur when the index is reopened.\n   * For near-real-time indexes or indexes that are often\n   * reopened with (e.g., {@link DirectoryReader#openIfChanged} is used), you should\n   * pass {@code recacheDeletes=false}. This will cache the filter results omitting\n   * deletions and will AND them in while scoring.\n   * @param filter Filter to cache results of\n   * @param recacheDeletes if deletions on the underlying index should recache\n   */\n  public CachingWrapperFilter(Filter filter, boolean recacheDeletes) {\n    this.filter = filter;\n    this.recacheDeletes = recacheDeletes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9a3bd393140af58401b6bcd1d1f6bdc896c718c8"],"9a3bd393140af58401b6bcd1d1f6bdc896c718c8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a3bd393140af58401b6bcd1d1f6bdc896c718c8"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["407687e67faf6e1f02a211ca078d8e3eed631027","9a3bd393140af58401b6bcd1d1f6bdc896c718c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"9a3bd393140af58401b6bcd1d1f6bdc896c718c8":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}