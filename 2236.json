{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPlot().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPlot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testPlot().mjava","sourceNew":"  @Test\n  public void testPlot() throws Exception {\n    String cexpr = \"let(a=array(3,2,3), plot(type=scatter, x=a, y=array(5,6,3)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    String plot = tuples.get(0).getString(\"plot\");\n    assertTrue(plot.equals(\"scatter\"));\n    List<List<Number>> data = (List<List<Number>>)tuples.get(0).get(\"data\");\n    assertTrue(data.size() == 3);\n    List<Number> pair1 = data.get(0);\n    assertTrue(pair1.get(0).intValue() == 3);\n    assertTrue(pair1.get(1).intValue() == 5);\n    List<Number> pair2 = data.get(1);\n    assertTrue(pair2.get(0).intValue() == 2);\n    assertTrue(pair2.get(1).intValue() == 6);\n    List<Number> pair3 = data.get(2);\n    assertTrue(pair3.get(0).intValue() == 3);\n    assertTrue(pair3.get(1).intValue() == 3);\n  }\n\n","sourceOld":"  @Test\n  public void testPlot() throws Exception {\n    String cexpr = \"let(a=array(3,2,3), plot(type=scatter, x=a, y=array(5,6,3)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    String plot = tuples.get(0).getString(\"plot\");\n    assertTrue(plot.equals(\"scatter\"));\n    List<List<Number>> data = (List<List<Number>>)tuples.get(0).get(\"data\");\n    assertTrue(data.size() == 3);\n    List<Number> pair1 = data.get(0);\n    assertTrue(pair1.get(0).intValue() == 3);\n    assertTrue(pair1.get(1).intValue() == 5);\n    List<Number> pair2 = data.get(1);\n    assertTrue(pair2.get(0).intValue() == 2);\n    assertTrue(pair2.get(1).intValue() == 6);\n    List<Number> pair3 = data.get(2);\n    assertTrue(pair3.get(0).intValue() == 3);\n    assertTrue(pair3.get(1).intValue() == 3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPlot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testPlot().mjava","sourceNew":"  @Test\n  public void testPlot() throws Exception {\n    String cexpr = \"let(a=array(3,2,3), plot(type=scatter, x=a, y=array(5,6,3)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    String plot = tuples.get(0).getString(\"plot\");\n    assertTrue(plot.equals(\"scatter\"));\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> data = (List<List<Number>>)tuples.get(0).get(\"data\");\n    assertTrue(data.size() == 3);\n    List<Number> pair1 = data.get(0);\n    assertTrue(pair1.get(0).intValue() == 3);\n    assertTrue(pair1.get(1).intValue() == 5);\n    List<Number> pair2 = data.get(1);\n    assertTrue(pair2.get(0).intValue() == 2);\n    assertTrue(pair2.get(1).intValue() == 6);\n    List<Number> pair3 = data.get(2);\n    assertTrue(pair3.get(0).intValue() == 3);\n    assertTrue(pair3.get(1).intValue() == 3);\n  }\n\n","sourceOld":"  @Test\n  public void testPlot() throws Exception {\n    String cexpr = \"let(a=array(3,2,3), plot(type=scatter, x=a, y=array(5,6,3)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    String plot = tuples.get(0).getString(\"plot\");\n    assertTrue(plot.equals(\"scatter\"));\n    List<List<Number>> data = (List<List<Number>>)tuples.get(0).get(\"data\");\n    assertTrue(data.size() == 3);\n    List<Number> pair1 = data.get(0);\n    assertTrue(pair1.get(0).intValue() == 3);\n    assertTrue(pair1.get(1).intValue() == 5);\n    List<Number> pair2 = data.get(1);\n    assertTrue(pair2.get(0).intValue() == 2);\n    assertTrue(pair2.get(1).intValue() == 6);\n    List<Number> pair3 = data.get(2);\n    assertTrue(pair3.get(0).intValue() == 3);\n    assertTrue(pair3.get(1).intValue() == 3);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}