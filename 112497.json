{"path":"solr/core/src/java/org/apache/solr/schema/IndexSchema#registerDynamicFields(SchemaField...).mjava","commits":[{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#registerDynamicFields(SchemaField...).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#registerDynamicField(SchemaField...).mjava","sourceNew":"  /**\n   * Register one or more new Dynamic Fields with the Schema.\n   * @param fields The sequence of {@link org.apache.solr.schema.SchemaField}\n   */\n  public void registerDynamicFields(SchemaField... fields) {\n    List<DynamicField> dynFields = new ArrayList<DynamicField>(Arrays.asList(dynamicFields));\n    for (SchemaField field : fields) {\n      if (isDuplicateDynField(dynFields, field)) {\n        log.debug(\"dynamic field already exists: dynamic field: [\" + field.getName() + \"]\");\n      } else {\n        log.debug(\"dynamic field creation for schema field: \" + field.getName());\n        addDynamicFieldNoDupCheck(dynFields, field);\n      }\n    }\n    Collections.sort(dynFields);\n    dynamicFields = dynFields.toArray(new DynamicField[dynFields.size()]);\n  }\n\n","sourceOld":"  /**\n   * Register one or more new Dynamic Field with the Schema.\n   * @param f The {@link org.apache.solr.schema.SchemaField}\n   */\n  public void registerDynamicField(SchemaField ... f) {\n    List<DynamicField> dynFields = new ArrayList<DynamicField>(Arrays.asList(dynamicFields));\n    for (SchemaField field : f) {\n      if (isDuplicateDynField(dynFields, field) == false) {\n        log.debug(\"dynamic field creation for schema field: \" + field.getName());\n        addDynamicFieldNoDupCheck(dynFields, field);\n      } else {\n        log.debug(\"dynamic field already exists: dynamic field: [\" + field.getName() + \"]\");\n      }\n    }\n    Collections.sort(dynFields);\n    dynamicFields = dynFields.toArray(new DynamicField[dynFields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#registerDynamicFields(SchemaField...).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#registerDynamicFields(SchemaField...).mjava","sourceNew":"  /**\n   * Register one or more new Dynamic Fields with the Schema.\n   * @param fields The sequence of {@link org.apache.solr.schema.SchemaField}\n   */\n  public void registerDynamicFields(SchemaField... fields) {\n    List<DynamicField> dynFields = new ArrayList<>(Arrays.asList(dynamicFields));\n    for (SchemaField field : fields) {\n      if (isDuplicateDynField(dynFields, field)) {\n        log.debug(\"dynamic field already exists: dynamic field: [\" + field.getName() + \"]\");\n      } else {\n        log.debug(\"dynamic field creation for schema field: \" + field.getName());\n        addDynamicFieldNoDupCheck(dynFields, field);\n      }\n    }\n    Collections.sort(dynFields);\n    dynamicFields = dynFields.toArray(new DynamicField[dynFields.size()]);\n  }\n\n","sourceOld":"  /**\n   * Register one or more new Dynamic Fields with the Schema.\n   * @param fields The sequence of {@link org.apache.solr.schema.SchemaField}\n   */\n  public void registerDynamicFields(SchemaField... fields) {\n    List<DynamicField> dynFields = new ArrayList<DynamicField>(Arrays.asList(dynamicFields));\n    for (SchemaField field : fields) {\n      if (isDuplicateDynField(dynFields, field)) {\n        log.debug(\"dynamic field already exists: dynamic field: [\" + field.getName() + \"]\");\n      } else {\n        log.debug(\"dynamic field creation for schema field: \" + field.getName());\n        addDynamicFieldNoDupCheck(dynFields, field);\n      }\n    }\n    Collections.sort(dynFields);\n    dynamicFields = dynFields.toArray(new DynamicField[dynFields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37e5b631c49de2fb88f245c36ecf87650cfa4a24","date":1409693105,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#registerDynamicFields(SchemaField...).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#registerDynamicFields(SchemaField...).mjava","sourceNew":"  /**\n   * Register one or more new Dynamic Fields with the Schema.\n   * @param fields The sequence of {@link org.apache.solr.schema.SchemaField}\n   */\n  public void registerDynamicFields(SchemaField... fields) {\n    List<DynamicField> dynFields = new ArrayList<>(Arrays.asList(dynamicFields));\n    for (SchemaField field : fields) {\n      if (isDuplicateDynField(dynFields, field)) {\n        log.debug(\"dynamic field already exists: dynamic field: [\" + field.getName() + \"]\");\n      } else {\n        log.debug(\"dynamic field creation for schema field: \" + field.getName());\n        addDynamicFieldNoDupCheck(dynFields, field);\n      }\n    }\n    dynamicFields = dynamicFieldListToSortedArray(dynFields);\n  }\n\n","sourceOld":"  /**\n   * Register one or more new Dynamic Fields with the Schema.\n   * @param fields The sequence of {@link org.apache.solr.schema.SchemaField}\n   */\n  public void registerDynamicFields(SchemaField... fields) {\n    List<DynamicField> dynFields = new ArrayList<>(Arrays.asList(dynamicFields));\n    for (SchemaField field : fields) {\n      if (isDuplicateDynField(dynFields, field)) {\n        log.debug(\"dynamic field already exists: dynamic field: [\" + field.getName() + \"]\");\n      } else {\n        log.debug(\"dynamic field creation for schema field: \" + field.getName());\n        addDynamicFieldNoDupCheck(dynFields, field);\n      }\n    }\n    Collections.sort(dynFields);\n    dynamicFields = dynFields.toArray(new DynamicField[dynFields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83ed5fbd2aab9f605f08774c9293e521ec99f0a1","date":1461251300,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#registerDynamicFields(SchemaField...).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#registerDynamicFields(SchemaField...).mjava","sourceNew":"  /**\n   * Register one or more new Dynamic Fields with the Schema.\n   * @param fields The sequence of {@link org.apache.solr.schema.SchemaField}\n   */\n  public void registerDynamicFields(SchemaField... fields) {\n    List<DynamicField> dynFields = new ArrayList<>(asList(dynamicFields));\n    for (SchemaField field : fields) {\n      if (isDuplicateDynField(dynFields, field)) {\n        log.debug(\"dynamic field already exists: dynamic field: [\" + field.getName() + \"]\");\n      } else {\n        log.debug(\"dynamic field creation for schema field: \" + field.getName());\n        addDynamicFieldNoDupCheck(dynFields, field);\n      }\n    }\n    dynamicFields = dynamicFieldListToSortedArray(dynFields);\n  }\n\n","sourceOld":"  /**\n   * Register one or more new Dynamic Fields with the Schema.\n   * @param fields The sequence of {@link org.apache.solr.schema.SchemaField}\n   */\n  public void registerDynamicFields(SchemaField... fields) {\n    List<DynamicField> dynFields = new ArrayList<>(Arrays.asList(dynamicFields));\n    for (SchemaField field : fields) {\n      if (isDuplicateDynField(dynFields, field)) {\n        log.debug(\"dynamic field already exists: dynamic field: [\" + field.getName() + \"]\");\n      } else {\n        log.debug(\"dynamic field creation for schema field: \" + field.getName());\n        addDynamicFieldNoDupCheck(dynFields, field);\n      }\n    }\n    dynamicFields = dynamicFieldListToSortedArray(dynFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#registerDynamicFields(SchemaField...).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#registerDynamicFields(SchemaField...).mjava","sourceNew":"  /**\n   * Register one or more new Dynamic Fields with the Schema.\n   * @param fields The sequence of {@link org.apache.solr.schema.SchemaField}\n   */\n  public void registerDynamicFields(SchemaField... fields) {\n    List<DynamicField> dynFields = new ArrayList<>(asList(dynamicFields));\n    for (SchemaField field : fields) {\n      if (isDuplicateDynField(dynFields, field)) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"dynamic field already exists: dynamic field: [{}]\", field.getName());\n        }\n      } else {\n        if (log.isDebugEnabled()) {\n          log.debug(\"dynamic field creation for schema field: {}\", field.getName());\n        }\n        addDynamicFieldNoDupCheck(dynFields, field);\n      }\n    }\n    dynamicFields = dynamicFieldListToSortedArray(dynFields);\n  }\n\n","sourceOld":"  /**\n   * Register one or more new Dynamic Fields with the Schema.\n   * @param fields The sequence of {@link org.apache.solr.schema.SchemaField}\n   */\n  public void registerDynamicFields(SchemaField... fields) {\n    List<DynamicField> dynFields = new ArrayList<>(asList(dynamicFields));\n    for (SchemaField field : fields) {\n      if (isDuplicateDynField(dynFields, field)) {\n        log.debug(\"dynamic field already exists: dynamic field: [\" + field.getName() + \"]\");\n      } else {\n        log.debug(\"dynamic field creation for schema field: \" + field.getName());\n        addDynamicFieldNoDupCheck(dynFields, field);\n      }\n    }\n    dynamicFields = dynamicFieldListToSortedArray(dynFields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83ed5fbd2aab9f605f08774c9293e521ec99f0a1":["37e5b631c49de2fb88f245c36ecf87650cfa4a24"],"37e5b631c49de2fb88f245c36ecf87650cfa4a24":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["83ed5fbd2aab9f605f08774c9293e521ec99f0a1"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["37e5b631c49de2fb88f245c36ecf87650cfa4a24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"83ed5fbd2aab9f605f08774c9293e521ec99f0a1":["9df8125ba9193a2e2e285ed92157810b1952a244"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"37e5b631c49de2fb88f245c36ecf87650cfa4a24":["83ed5fbd2aab9f605f08774c9293e521ec99f0a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}