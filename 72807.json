{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","sourceOld":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefix().mjava","sourceNew":null,"sourceOld":"    public void testPhrasePrefix() throws IOException {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        add(\"blueberry pie\", writer);\n        add(\"blueberry strudel\", writer);\n        add(\"blueberry pizza\", writer);\n        add(\"blueberry chewing gum\", writer);\n        add(\"bluebird pizza\", writer);\n        add(\"bluebird foobar pizza\", writer);\n        add(\"piccadilly circus\", writer);\n        writer.optimize();\n        writer.close();\n\n        IndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n        // search for \"blueberry pi*\":\n        MultiPhraseQuery query1 = new MultiPhraseQuery();\n        // search for \"strawberry pi*\":\n        MultiPhraseQuery query2 = new MultiPhraseQuery();\n        query1.add(new Term(\"body\", \"blueberry\"));\n        query2.add(new Term(\"body\", \"strawberry\"));\n\n        LinkedList termsWithPrefix = new LinkedList();\n        IndexReader ir = IndexReader.open(indexStore, true);\n\n        // this TermEnum gives \"piccadilly\", \"pie\" and \"pizza\".\n        String prefix = \"pi\";\n        TermEnum te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n\n        query1.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"blueberry (piccadilly pie pizza)\\\"\", query1.toString());\n        query2.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        assertEquals(\"body:\\\"strawberry (piccadilly pie pizza)\\\"\", query2.toString());\n\n        ScoreDoc[] result;\n        result = searcher.search(query1, null, 1000).scoreDocs;\n        assertEquals(2, result.length);\n        result = searcher.search(query2, null, 1000).scoreDocs;\n        assertEquals(0, result.length);\n\n        // search for \"blue* pizza\":\n        MultiPhraseQuery query3 = new MultiPhraseQuery();\n        termsWithPrefix.clear();\n        prefix = \"blue\";\n        te = ir.terms(new Term(\"body\", prefix));\n        do {\n            if (te.term().text().startsWith(prefix))\n            {\n                termsWithPrefix.add(te.term());\n            }\n        } while (te.next());\n        query3.add((Term[])termsWithPrefix.toArray(new Term[0]));\n        query3.add(new Term(\"body\", \"pizza\"));\n\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(2, result.length); // blueberry pizza, bluebird pizza\n        assertEquals(\"body:\\\"(blueberry bluebird) pizza\\\"\", query3.toString());\n\n        // test slop:\n        query3.setSlop(1);\n        result = searcher.search(query3, null, 1000).scoreDocs;\n        assertEquals(3, result.length); // blueberry pizza, bluebird pizza, bluebird foobar pizza\n\n        MultiPhraseQuery query4 = new MultiPhraseQuery();\n        try {\n          query4.add(new Term(\"field1\", \"foo\"));\n          query4.add(new Term(\"field2\", \"foobar\"));\n          fail();\n        } catch(IllegalArgumentException e) {\n          // okay, all terms must belong to the same field\n        }\n        \n        searcher.close();\n        indexStore.close();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}