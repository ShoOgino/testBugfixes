{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","commits":[{"id":"face217c60f59b356129804dd0f7508779078fe3","date":1498692025,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","pathOld":"/dev/null","sourceNew":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(AutoScaling.EventType.NODELOST, triggerEvent.getEventType());\n    assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7427c059f8ca782712a1bb2e67ff3a56c6d20162","date":1499216619,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(AutoScaling.EventType.NODELOST, triggerEvent.getEventType());\n    assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(AutoScaling.EventType.NODELOST, triggerEvent.getEventType());\n    assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0d9c88546c1a130d50b56981790d87a308daffd","date":1499234617,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(AutoScaling.EventType.NODELOST, triggerEvent.getEventType());\n    assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(AutoScaling.EventType.NODELOST, triggerEvent.getEventType());\n    assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0806aac02ecbbdc6b5d9705ae15da193219c7af4","date":1499930856,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(AutoScaling.EventType.NODELOST, triggerEvent.getEventType());\n    assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(AutoScaling.EventType.NODELOST, triggerEvent.getEventType());\n    assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(AutoScaling.EventType.NODELOST, triggerEvent.getEventType());\n    assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1","date":1503489512,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","pathOld":"/dev/null","sourceNew":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","pathOld":"/dev/null","sourceNew":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d8e6696ad139aa0f0bfe30fb4e933b38530f214","date":1507644775,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+getDataProviderState(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\", operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":["101645ef3f7b3be12940241226f9e1636541aadc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"101645ef3f7b3be12940241226f9e1636541aadc","date":1507815822,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + getDataProviderState() + actionContextPropsRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+getDataProviderState(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":["4d8e6696ad139aa0f0bfe30fb4e933b38530f214"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + getDataProviderState() + actionContextPropsRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6","date":1536060944,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01322d51122b6cbe6b5ba6059fffba67798dae72","date":1539067228,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\", 2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testNodeWithMultipleReplicasLost\", 2, 6);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 6));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(15, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        cluster.stopJettySolrRunner(i);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n    cluster.waitForAllNodes(30);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":["face217c60f59b356129804dd0f7508779078fe3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\", 2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testNodeWithMultipleReplicasLost\", 2, 6);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 6));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(15, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\", 2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testNodeWithMultipleReplicasLost\", 2, 6);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 6));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(15, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  // commented out on: 24-Dec-2018   @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\", 2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testNodeWithMultipleReplicasLost\", 2, 6);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 6));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(15, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\", 2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testNodeWithMultipleReplicasLost\", 2, 6);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 6));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(15, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  // commented out on: 24-Dec-2018   @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\", 2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testNodeWithMultipleReplicasLost\", 2, 6);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 6));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(15, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);\n    if (log.isInfoEnabled()) {\n      operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    }\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  // commented out on: 24-Dec-2018   @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\", 2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testNodeWithMultipleReplicasLost\", 2, 6);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 6));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(15, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  // commented out on: 24-Dec-2018   @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\", 2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testNodeWithMultipleReplicasLost\", 2, 6);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 6));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(15, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);\n    if (log.isInfoEnabled()) {\n      operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    }\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (@SuppressWarnings({\"rawtypes\"})SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  // commented out on: 24-Dec-2018   @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\", 2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testNodeWithMultipleReplicasLost\", 2, 6);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 6));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(15, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);\n    if (log.isInfoEnabled()) {\n      operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    }\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  // commented out on: 24-Dec-2018   @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\", 2, 3);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testNodeWithMultipleReplicasLost\", 2, 6);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 6));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(15, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);\n    if (log.isInfoEnabled()) {\n      operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    }\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (@SuppressWarnings({\"rawtypes\"})SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  // commented out on: 24-Dec-2018   @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\", 2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testNodeWithMultipleReplicasLost\", 2, 6);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 6));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(15, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);\n    if (log.isInfoEnabled()) {\n      operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    }\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (@SuppressWarnings({\"rawtypes\"})SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/ComputePlanActionTest#testNodeWithMultipleReplicasLost().mjava","sourceNew":null,"sourceOld":"  // commented out on: 24-Dec-2018   @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    // start 3 more nodes\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n    cluster.startJettySolrRunner();\n\n    cluster.waitForAllNodes(30);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\", 2, 3);\n    create.process(solrClient);\n    \n    cluster.waitForActiveCollection(\"testNodeWithMultipleReplicasLost\", 2, 6);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 6));\n\n    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);\n      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = jettySolrRunner.getNodeName();\n        replicasToBeMoved = replicas;\n        JettySolrRunner j = cluster.stopJettySolrRunner(i);\n        cluster.waitForJettyToStop(j);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(15, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \"+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);\n    if (log.isInfoEnabled()) {\n      operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    }\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (@SuppressWarnings({\"rawtypes\"})SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"4d8e6696ad139aa0f0bfe30fb4e933b38530f214":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"7427c059f8ca782712a1bb2e67ff3a56c6d20162":["face217c60f59b356129804dd0f7508779078fe3"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["101645ef3f7b3be12940241226f9e1636541aadc"],"face217c60f59b356129804dd0f7508779078fe3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["e0d9c88546c1a130d50b56981790d87a308daffd"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["89948af0461fead48f44ba8fb7866f107ce83f22"],"01322d51122b6cbe6b5ba6059fffba67798dae72":["f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"e0d9c88546c1a130d50b56981790d87a308daffd":["face217c60f59b356129804dd0f7508779078fe3","7427c059f8ca782712a1bb2e67ff3a56c6d20162"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"101645ef3f7b3be12940241226f9e1636541aadc":["4d8e6696ad139aa0f0bfe30fb4e933b38530f214"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6"],"4d8e6696ad139aa0f0bfe30fb4e933b38530f214":["101645ef3f7b3be12940241226f9e1636541aadc"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"7427c059f8ca782712a1bb2e67ff3a56c6d20162":["e0d9c88546c1a130d50b56981790d87a308daffd"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"face217c60f59b356129804dd0f7508779078fe3":["7427c059f8ca782712a1bb2e67ff3a56c6d20162","e0d9c88546c1a130d50b56981790d87a308daffd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"0806aac02ecbbdc6b5d9705ae15da193219c7af4":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"01322d51122b6cbe6b5ba6059fffba67798dae72":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","face217c60f59b356129804dd0f7508779078fe3","560c18d71dad43d675158783c3840f8c80d6d39c"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"560c18d71dad43d675158783c3840f8c80d6d39c":["4d8e6696ad139aa0f0bfe30fb4e933b38530f214"],"e0d9c88546c1a130d50b56981790d87a308daffd":["0806aac02ecbbdc6b5d9705ae15da193219c7af4"],"101645ef3f7b3be12940241226f9e1636541aadc":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"89948af0461fead48f44ba8fb7866f107ce83f22":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}