{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","sourceNew":"  @Test\n  @Ignore(\"Known Locale/TZ problems: see https://issues.apache.org/jira/browse/SOLR-1916\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Known Locale/TZ problems: see https://issues.apache.org/jira/browse/SOLR-1916\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","sourceNew":"  @Test\n  @Ignore(\"Known Locale/TZ problems: see https://issues.apache.org/jira/browse/SOLR-1916\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Known Locale/TZ problems: see https://issues.apache.org/jira/browse/SOLR-1916\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80249aaf913769676b1d45cdf0859ca70bd04fc8","date":1353440934,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","sourceNew":"  @Test\n  @Ignore(\"Known Locale/TZ problems: see https://issues.apache.org/jira/browse/SOLR-1916\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Known Locale/TZ problems: see https://issues.apache.org/jira/browse/SOLR-1916\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1ca5a43c0e473a6ec8fe8f16237f955aee73d2","date":1353944206,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","sourceNew":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Known Locale/TZ problems: see https://issues.apache.org/jira/browse/SOLR-1916\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","sourceNew":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Known Locale/TZ problems: see https://issues.apache.org/jira/browse/SOLR-1916\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","sourceNew":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","sourceNew":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","sourceNew":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir());\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","sourceNew":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","sourceNew":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir());\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir());\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(\"UTF-8\"), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","sourceNew":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir());\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","sourceNew":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir().toFile());\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir());\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de40d002b4bf6ee10652e661f89cdb0a8aac7df2","date":1465289501,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","sourceNew":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = createTempDir().toFile();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir().toFile());\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","sourceNew":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = createTempDir().toFile();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir().toFile());\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","sourceNew":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = createTempDir().toFile();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", createTempDir().toFile());\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","sourceNew":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = createTempDir().toFile();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    runFullImport(DATA_CONFIG_FILE_LIST, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    runFullImport(DATA_CONFIG_FILE_LIST, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = createTempDir().toFile();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","sourceNew":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = createTempDir().toFile();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    runFullImport(DATA_CONFIG_FILE_LIST, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    runFullImport(DATA_CONFIG_FILE_LIST, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = createTempDir().toFile();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    runFullImport(dataConfigFileList, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    runFullImport(dataConfigFileList, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","sourceNew":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = createTempDir().toFile();\n\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    runFullImport(DATA_CONFIG_FILE_LIST, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    runFullImport(DATA_CONFIG_FILE_LIST, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = createTempDir().toFile();\n\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    runFullImport(DATA_CONFIG_FILE_LIST, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    runFullImport(DATA_CONFIG_FILE_LIST, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testFileListEntityProcessor_lastIndexTime().mjava","sourceNew":null,"sourceOld":"  @Test\n  @Ignore(\"Fix Me. See SOLR-4103.\")\n  public void testFileListEntityProcessor_lastIndexTime() throws Exception  {\n    File tmpdir = createTempDir().toFile();\n\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, String> params = createMap(\"baseDir\", tmpdir.getAbsolutePath());\n\n    createFile(tmpdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(tmpdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    runFullImport(DATA_CONFIG_FILE_LIST, params);\n    assertQ(req(\"*:*\"), \"//*[@numFound='3']\");\n\n    // Add a new file after a full index is done\n    createFile(tmpdir, \"t.xml\", \"t.xml\".getBytes(StandardCharsets.UTF_8), false);\n    runFullImport(DATA_CONFIG_FILE_LIST, params);\n    // we should find only 1 because by default clean=true is passed\n    // and this particular import should find only one file t.xml\n    assertQ(req(\"*:*\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","9d3d365762604952e436b51980101dfc84cc1b3e"],"024e13388acbf5562fcbb77a129620982a5e2d79":["5de502b5478255493125e7e801411ba17a6682ec"],"5de502b5478255493125e7e801411ba17a6682ec":["191128ac5b85671b1671e2c857437694283b6ebf"],"ad1ca5a43c0e473a6ec8fe8f16237f955aee73d2":["80249aaf913769676b1d45cdf0859ca70bd04fc8"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["9d3d365762604952e436b51980101dfc84cc1b3e","5eb2511ababf862ea11e10761c70ee560cd84510"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["191128ac5b85671b1671e2c857437694283b6ebf"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","ad1ca5a43c0e473a6ec8fe8f16237f955aee73d2"],"80249aaf913769676b1d45cdf0859ca70bd04fc8":["c26f00b574427b55127e869b935845554afde1fa"],"191128ac5b85671b1671e2c857437694283b6ebf":["f4abec28b874149a7223e32cc7a01704c27790de","de40d002b4bf6ee10652e661f89cdb0a8aac7df2"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["ad1ca5a43c0e473a6ec8fe8f16237f955aee73d2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f4abec28b874149a7223e32cc7a01704c27790de","191128ac5b85671b1671e2c857437694283b6ebf"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["ad1ca5a43c0e473a6ec8fe8f16237f955aee73d2"],"9d3d365762604952e436b51980101dfc84cc1b3e":["1416f9d09d016a6894cd17e1caac137dad2bba59"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"de40d002b4bf6ee10652e661f89cdb0a8aac7df2":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["5eb2511ababf862ea11e10761c70ee560cd84510"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"5de502b5478255493125e7e801411ba17a6682ec":["024e13388acbf5562fcbb77a129620982a5e2d79"],"ad1ca5a43c0e473a6ec8fe8f16237f955aee73d2":["407687e67faf6e1f02a211ca078d8e3eed631027","d0d579490a72f2e6297eaa648940611234c57cf1","1416f9d09d016a6894cd17e1caac137dad2bba59"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"c26f00b574427b55127e869b935845554afde1fa":["407687e67faf6e1f02a211ca078d8e3eed631027","80249aaf913769676b1d45cdf0859ca70bd04fc8"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":[],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"191128ac5b85671b1671e2c857437694283b6ebf":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"80249aaf913769676b1d45cdf0859ca70bd04fc8":["ad1ca5a43c0e473a6ec8fe8f16237f955aee73d2"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"f4abec28b874149a7223e32cc7a01704c27790de":["191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","de40d002b4bf6ee10652e661f89cdb0a8aac7df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["9d3d365762604952e436b51980101dfc84cc1b3e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"de40d002b4bf6ee10652e661f89cdb0a8aac7df2":["191128ac5b85671b1671e2c857437694283b6ebf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f20fd35e3055a0c5b387df0b986a68d65d86441","407687e67faf6e1f02a211ca078d8e3eed631027","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}