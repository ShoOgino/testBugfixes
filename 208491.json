{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/bn/TestBengaliNormalizer#testRandom().mjava","commits":[{"id":"43a32d95e73cfcb877c4d3370b64c03c9b142fd4","date":1504243372,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/bn/TestBengaliNormalizer#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  /** creates random strings in the bengali block and ensures the normalizer doesn't trip up on them */\n  public void testRandom() throws IOException {\n    BengaliNormalizer normalizer = new BengaliNormalizer();\n    for (int i = 0; i < 100000; i++) {\n      String randomBengali = TestUtil.randomSimpleStringRange(random(), '\\u0980', '\\u09FF', 7);\n      try {\n        int newLen = normalizer.normalize(randomBengali.toCharArray(), randomBengali.length());\n        assertTrue(newLen >= 0); // should not return negative length\n        assertTrue(newLen <= randomBengali.length()); // should not increase length of string\n      } catch (Exception e) {\n        System.err.println(\"normalizer failed on input: '\" + randomBengali + \"' (\" + escape(randomBengali) + \")\");\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90f7818241046289c74b5fee75a028e541ba3a4d","date":1504360689,"type":0,"author":"Md.Abdulla-Al-Sun","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/bn/TestBengaliNormalizer#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  /** creates random strings in the bengali block and ensures the normalizer doesn't trip up on them */\n  public void testRandom() throws IOException {\n    BengaliNormalizer normalizer = new BengaliNormalizer();\n    for (int i = 0; i < 100000; i++) {\n      String randomBengali = TestUtil.randomSimpleStringRange(random(), '\\u0980', '\\u09FF', 7);\n      try {\n        int newLen = normalizer.normalize(randomBengali.toCharArray(), randomBengali.length());\n        assertTrue(newLen >= 0); // should not return negative length\n        assertTrue(newLen <= randomBengali.length()); // should not increase length of string\n      } catch (Exception e) {\n        System.err.println(\"normalizer failed on input: '\" + randomBengali + \"' (\" + escape(randomBengali) + \")\");\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3268584f93f4a1a69c3a8732a46f665cd15f89b","date":1504651522,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/bn/TestBengaliNormalizer#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  /** creates random strings in the bengali block and ensures the normalizer doesn't trip up on them */\n  public void testRandom() throws IOException {\n    BengaliNormalizer normalizer = new BengaliNormalizer();\n    for (int i = 0; i < 100000; i++) {\n      String randomBengali = TestUtil.randomSimpleStringRange(random(), '\\u0980', '\\u09FF', 7);\n      try {\n        int newLen = normalizer.normalize(randomBengali.toCharArray(), randomBengali.length());\n        assertTrue(newLen >= 0); // should not return negative length\n        assertTrue(newLen <= randomBengali.length()); // should not increase length of string\n      } catch (Exception e) {\n        System.err.println(\"normalizer failed on input: '\" + randomBengali + \"' (\" + escape(randomBengali) + \")\");\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/bn/TestBengaliNormalizer#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  /** creates random strings in the bengali block and ensures the normalizer doesn't trip up on them */\n  public void testRandom() throws IOException {\n    BengaliNormalizer normalizer = new BengaliNormalizer();\n    for (int i = 0; i < 100000; i++) {\n      String randomBengali = TestUtil.randomSimpleStringRange(random(), '\\u0980', '\\u09FF', 7);\n      try {\n        int newLen = normalizer.normalize(randomBengali.toCharArray(), randomBengali.length());\n        assertTrue(newLen >= 0); // should not return negative length\n        assertTrue(newLen <= randomBengali.length()); // should not increase length of string\n      } catch (Exception e) {\n        System.err.println(\"normalizer failed on input: '\" + randomBengali + \"' (\" + escape(randomBengali) + \")\");\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/bn/TestBengaliNormalizer#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  /** creates random strings in the bengali block and ensures the normalizer doesn't trip up on them */\n  public void testRandom() throws IOException {\n    BengaliNormalizer normalizer = new BengaliNormalizer();\n    for (int i = 0; i < 100000; i++) {\n      String randomBengali = TestUtil.randomSimpleStringRange(random(), '\\u0980', '\\u09FF', 7);\n      try {\n        int newLen = normalizer.normalize(randomBengali.toCharArray(), randomBengali.length());\n        assertTrue(newLen >= 0); // should not return negative length\n        assertTrue(newLen <= randomBengali.length()); // should not increase length of string\n      } catch (Exception e) {\n        System.err.println(\"normalizer failed on input: '\" + randomBengali + \"' (\" + escape(randomBengali) + \")\");\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/bn/TestBengaliNormalizer#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  /** creates random strings in the bengali block and ensures the normalizer doesn't trip up on them */\n  public void testRandom() throws IOException {\n    BengaliNormalizer normalizer = new BengaliNormalizer();\n    for (int i = 0; i < 100000; i++) {\n      String randomBengali = TestUtil.randomSimpleStringRange(random(), '\\u0980', '\\u09FF', 7);\n      try {\n        int newLen = normalizer.normalize(randomBengali.toCharArray(), randomBengali.length());\n        assertTrue(newLen >= 0); // should not return negative length\n        assertTrue(newLen <= randomBengali.length()); // should not increase length of string\n      } catch (Exception e) {\n        System.err.println(\"normalizer failed on input: '\" + randomBengali + \"' (\" + escape(randomBengali) + \")\");\n        throw e;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f3268584f93f4a1a69c3a8732a46f665cd15f89b"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b21283ed01203901a7257aa4b7f0a0899c86e56e"],"43a32d95e73cfcb877c4d3370b64c03c9b142fd4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90f7818241046289c74b5fee75a028e541ba3a4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43a32d95e73cfcb877c4d3370b64c03c9b142fd4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f3268584f93f4a1a69c3a8732a46f665cd15f89b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","90f7818241046289c74b5fee75a028e541ba3a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"]},"commit2Childs":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43a32d95e73cfcb877c4d3370b64c03c9b142fd4":["90f7818241046289c74b5fee75a028e541ba3a4d"],"90f7818241046289c74b5fee75a028e541ba3a4d":["f3268584f93f4a1a69c3a8732a46f665cd15f89b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b21283ed01203901a7257aa4b7f0a0899c86e56e","685bd38810c206c93e9058f3c2cfa9827c086c27","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","43a32d95e73cfcb877c4d3370b64c03c9b142fd4","90f7818241046289c74b5fee75a028e541ba3a4d","f3268584f93f4a1a69c3a8732a46f665cd15f89b"],"f3268584f93f4a1a69c3a8732a46f665cd15f89b":["b21283ed01203901a7257aa4b7f0a0899c86e56e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}