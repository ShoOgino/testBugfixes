{"path":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.Uninvert#uninvertPoints(LeafReader,String).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.Uninvert#uninvertPoints(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.Uninvert#uninvertPoints(LeafReader,String,boolean).mjava","sourceNew":"    final void uninvertPoints(LeafReader reader, String field) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      PointValues values = reader.getPointValues();\n      assert values != null;\n      assert values.size(field) > 0;\n\n      final boolean setDocsWithField;\n      final int docCount = values.getDocCount(field);\n      assert docCount <= maxDoc;\n      if (docCount == maxDoc) {\n        // Fast case: all docs have this field:\n        this.docsWithField = new Bits.MatchAllBits(maxDoc);\n        setDocsWithField = false;\n      } else {\n        setDocsWithField = true;\n      }\n\n      BytesRef scratch = new BytesRef();\n      values.intersect(field, new IntersectVisitor() {\n        @Override\n        public void visit(int docID) throws IOException { \n          throw new AssertionError(); \n        }\n\n        @Override\n        public void visit(int docID, byte[] packedValue) throws IOException {\n          scratch.bytes = packedValue;\n          scratch.length = packedValue.length;\n          visitTerm(scratch);\n          visitDoc(docID);\n          if (setDocsWithField) {\n            if (docsWithField == null) {\n              // Lazy init\n              docsWithField = new FixedBitSet(maxDoc);\n            }\n            ((FixedBitSet)docsWithField).set(docID);\n          }\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return Relation.CELL_CROSSES_QUERY; // inspect all byte-docid pairs\n        }\n      });\n    }\n\n","sourceOld":"    final void uninvertPoints(LeafReader reader, String field, boolean setDocsWithField) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      PointValues values = reader.getPointValues();\n      assert values != null;\n      assert values.size(field) > 0;\n      \n      if (setDocsWithField) {\n        final int docCount = values.getDocCount(field);\n        assert docCount <= maxDoc;\n        if (docCount == maxDoc) {\n          // Fast case: all docs have this field:\n          this.docsWithField = new Bits.MatchAllBits(maxDoc);\n          setDocsWithField = false;\n        }\n      }\n\n      final boolean doDocsWithField = setDocsWithField;\n      BytesRef scratch = new BytesRef();\n      values.intersect(field, new IntersectVisitor() {\n        @Override\n        public void visit(int docID) throws IOException { \n          throw new AssertionError(); \n        }\n\n        @Override\n        public void visit(int docID, byte[] packedValue) throws IOException {\n          scratch.bytes = packedValue;\n          scratch.length = packedValue.length;\n          visitTerm(scratch);\n          visitDoc(docID);\n          if (doDocsWithField) {\n            if (docsWithField == null) {\n              // Lazy init\n              docsWithField = new FixedBitSet(maxDoc);\n            }\n            ((FixedBitSet)docsWithField).set(docID);\n          }\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return Relation.CELL_CROSSES_QUERY; // inspect all byte-docid pairs\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.Uninvert#uninvertPoints(LeafReader,String).mjava","pathOld":"/dev/null","sourceNew":"    final void uninvertPoints(LeafReader reader, String field) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      PointValues values = reader.getPointValues();\n      assert values != null;\n      assert values.size(field) > 0;\n\n      final boolean setDocsWithField;\n      final int docCount = values.getDocCount(field);\n      assert docCount <= maxDoc;\n      if (docCount == maxDoc) {\n        // Fast case: all docs have this field:\n        this.docsWithField = new Bits.MatchAllBits(maxDoc);\n        setDocsWithField = false;\n      } else {\n        setDocsWithField = true;\n      }\n\n      BytesRef scratch = new BytesRef();\n      values.intersect(field, new IntersectVisitor() {\n        @Override\n        public void visit(int docID) throws IOException { \n          throw new AssertionError(); \n        }\n\n        @Override\n        public void visit(int docID, byte[] packedValue) throws IOException {\n          scratch.bytes = packedValue;\n          scratch.length = packedValue.length;\n          visitTerm(scratch);\n          visitDoc(docID);\n          if (setDocsWithField) {\n            if (docsWithField == null) {\n              // Lazy init\n              docsWithField = new FixedBitSet(maxDoc);\n            }\n            ((FixedBitSet)docsWithField).set(docID);\n          }\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return Relation.CELL_CROSSES_QUERY; // inspect all byte-docid pairs\n        }\n      });\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.Uninvert#uninvertPoints(LeafReader,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.Uninvert#uninvertPoints(LeafReader,String).mjava","sourceNew":"    final void uninvertPoints(LeafReader reader, String field) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      PointValues values = reader.getPointValues(field);\n      assert values != null;\n      assert values.size() > 0;\n\n      final boolean setDocsWithField;\n      final int docCount = values.getDocCount();\n      assert docCount <= maxDoc;\n      if (docCount == maxDoc) {\n        // Fast case: all docs have this field:\n        this.docsWithField = new Bits.MatchAllBits(maxDoc);\n        setDocsWithField = false;\n      } else {\n        setDocsWithField = true;\n      }\n\n      BytesRef scratch = new BytesRef();\n      values.intersect(new IntersectVisitor() {\n        @Override\n        public void visit(int docID) throws IOException { \n          throw new AssertionError(); \n        }\n\n        @Override\n        public void visit(int docID, byte[] packedValue) throws IOException {\n          scratch.bytes = packedValue;\n          scratch.length = packedValue.length;\n          visitTerm(scratch);\n          visitDoc(docID);\n          if (setDocsWithField) {\n            if (docsWithField == null) {\n              // Lazy init\n              docsWithField = new FixedBitSet(maxDoc);\n            }\n            ((FixedBitSet)docsWithField).set(docID);\n          }\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return Relation.CELL_CROSSES_QUERY; // inspect all byte-docid pairs\n        }\n      });\n    }\n\n","sourceOld":"    final void uninvertPoints(LeafReader reader, String field) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      PointValues values = reader.getPointValues();\n      assert values != null;\n      assert values.size(field) > 0;\n\n      final boolean setDocsWithField;\n      final int docCount = values.getDocCount(field);\n      assert docCount <= maxDoc;\n      if (docCount == maxDoc) {\n        // Fast case: all docs have this field:\n        this.docsWithField = new Bits.MatchAllBits(maxDoc);\n        setDocsWithField = false;\n      } else {\n        setDocsWithField = true;\n      }\n\n      BytesRef scratch = new BytesRef();\n      values.intersect(field, new IntersectVisitor() {\n        @Override\n        public void visit(int docID) throws IOException { \n          throw new AssertionError(); \n        }\n\n        @Override\n        public void visit(int docID, byte[] packedValue) throws IOException {\n          scratch.bytes = packedValue;\n          scratch.length = packedValue.length;\n          visitTerm(scratch);\n          visitDoc(docID);\n          if (setDocsWithField) {\n            if (docsWithField == null) {\n              // Lazy init\n              docsWithField = new FixedBitSet(maxDoc);\n            }\n            ((FixedBitSet)docsWithField).set(docID);\n          }\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return Relation.CELL_CROSSES_QUERY; // inspect all byte-docid pairs\n        }\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.Uninvert#uninvertPoints(LeafReader,String).mjava","pathOld":"/dev/null","sourceNew":"    final void uninvertPoints(LeafReader reader, String field) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      PointValues values = reader.getPointValues(field);\n      assert values != null;\n      assert values.size() > 0;\n\n      final boolean setDocsWithField;\n      final int docCount = values.getDocCount();\n      assert docCount <= maxDoc;\n      if (docCount == maxDoc) {\n        // Fast case: all docs have this field:\n        this.docsWithField = new Bits.MatchAllBits(maxDoc);\n        setDocsWithField = false;\n      } else {\n        setDocsWithField = true;\n      }\n\n      BytesRef scratch = new BytesRef();\n      values.intersect(new IntersectVisitor() {\n        @Override\n        public void visit(int docID) throws IOException { \n          throw new AssertionError(); \n        }\n\n        @Override\n        public void visit(int docID, byte[] packedValue) throws IOException {\n          scratch.bytes = packedValue;\n          scratch.length = packedValue.length;\n          visitTerm(scratch);\n          visitDoc(docID);\n          if (setDocsWithField) {\n            if (docsWithField == null) {\n              // Lazy init\n              docsWithField = new FixedBitSet(maxDoc);\n            }\n            ((FixedBitSet)docsWithField).set(docID);\n          }\n        }\n\n        @Override\n        public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n          return Relation.CELL_CROSSES_QUERY; // inspect all byte-docid pairs\n        }\n      });\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}