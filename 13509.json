{"path":"solr/src/test-framework/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","commits":[{"id":"7395bdaa5646a7eb2087b1043b713b4bf3294a5c","date":1305324215,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = ObjectBuilder.fromJSON(input);\n    Object expectObj = ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838","8b572b024e0b33a1176216afd84f90a925baf838"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = ObjectBuilder.fromJSON(input);\n    Object expectObj = ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = ObjectBuilder.fromJSON(input);\n    Object expectObj = ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","pathOld":"solr/src/test-framework/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","sourceNew":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = ObjectBuilder.fromJSON(input);\n    Object expectObj = ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj);\n  }\n\n","sourceOld":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = ObjectBuilder.fromJSON(input);\n    Object expectObj = ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","pathOld":"solr/src/test-framework/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","sourceNew":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = ObjectBuilder.fromJSON(input);\n    Object expectObj = ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj);\n  }\n\n","sourceOld":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = ObjectBuilder.fromJSON(input);\n    Object expectObj = ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","pathOld":"solr/src/test-framework/org/apache/solr/JSONTestUtil#match(String,String,String,double).mjava","sourceNew":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = ObjectBuilder.fromJSON(input);\n    Object expectObj = ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj);\n  }\n\n","sourceOld":"  /**\n   * @param path JSON path expression\n   * @param input JSON Structure to parse and test against\n   * @param expected expected value of path\n   * @param delta tollerance allowed in comparing float/double values\n   */\n  public static String match(String path, String input, String expected, double delta) throws Exception {\n    Object inputObj = ObjectBuilder.fromJSON(input);\n    Object expectObj = ObjectBuilder.fromJSON(expected);\n    return matchObj(path, inputObj, expectObj);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7395bdaa5646a7eb2087b1043b713b4bf3294a5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7395bdaa5646a7eb2087b1043b713b4bf3294a5c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"c26f00b574427b55127e869b935845554afde1fa":["7395bdaa5646a7eb2087b1043b713b4bf3294a5c","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7395bdaa5646a7eb2087b1043b713b4bf3294a5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7395bdaa5646a7eb2087b1043b713b4bf3294a5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"7395bdaa5646a7eb2087b1043b713b4bf3294a5c":["c3a8a449466c1ff7ce2274fe73dab487256964b4","c26f00b574427b55127e869b935845554afde1fa","a3776dccca01c11e7046323cfad46a3b4a471233","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7395bdaa5646a7eb2087b1043b713b4bf3294a5c","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}