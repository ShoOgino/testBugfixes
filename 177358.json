{"path":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","commits":[{"id":"4a54d9ede1b7f2f026639186eb07f3f314d87d9a","date":1412176848,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = SolrTestCaseJ4.json( \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"   \\n\" +\n        \"    }\");\n\n    String response = restTestHarness.post(\"/schema?wt=json\", payload);\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n\n    List errorList = (List) ((Map) l.get(0)).get(SchemaManager.ERR_MSGS);\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"No such field type\"));\n    errorList = (List) ((Map) l.get(1)).get(SchemaManager.ERR_MSGS);\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = SolrTestCaseJ4.json( \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"   \\n\" +\n        \"    }\");\n\n    String response = restTestHarness.post(\"/schema?wt=json\", payload);\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n\n    List errorList = (List) ((Map) l.get(0)).get(SchemaManager.ERR_MSGS);\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"No such field type\"));\n    errorList = (List) ((Map) l.get(1)).get(SchemaManager.ERR_MSGS);\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb9af919a17be70cfc512901fc70f1beaf840ca1","date":1413208885,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","sourceNew":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = SolrTestCaseJ4.json( \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"   \\n\" +\n        \"    }\");\n\n    String response = restTestHarness.post(\"/schema?wt=json\", payload);\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n\n    List errorList = (List) ((Map) l.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"No such field type\"));\n    errorList = (List) ((Map) l.get(1)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n\n  }\n\n","sourceOld":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = SolrTestCaseJ4.json( \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"   \\n\" +\n        \"    }\");\n\n    String response = restTestHarness.post(\"/schema?wt=json\", payload);\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n\n    List errorList = (List) ((Map) l.get(0)).get(SchemaManager.ERR_MSGS);\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"No such field type\"));\n    errorList = (List) ((Map) l.get(1)).get(SchemaManager.ERR_MSGS);\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","sourceNew":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = SolrTestCaseJ4.json( \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"   \\n\" +\n        \"    }\");\n\n    String response = restTestHarness.post(\"/schema?wt=json\", payload);\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n\n    List errorList = (List) ((Map) l.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"No such field type\"));\n    errorList = (List) ((Map) l.get(1)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n\n  }\n\n","sourceOld":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = SolrTestCaseJ4.json( \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"   \\n\" +\n        \"    }\");\n\n    String response = restTestHarness.post(\"/schema?wt=json\", payload);\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n\n    List errorList = (List) ((Map) l.get(0)).get(SchemaManager.ERR_MSGS);\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"No such field type\"));\n    errorList = (List) ((Map) l.get(1)).get(SchemaManager.ERR_MSGS);\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeeea2295d6355a29e259130a5c48ace73022d7c","date":1426569216,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","sourceNew":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema?wt=json\", json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n\n    List errorList = (List) ((Map) l.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"No such field type\"));\n    errorList = (List) ((Map) l.get(1)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n\n  }\n\n","sourceOld":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = SolrTestCaseJ4.json( \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"   \\n\" +\n        \"    }\");\n\n    String response = restTestHarness.post(\"/schema?wt=json\", payload);\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n\n    List errorList = (List) ((Map) l.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"No such field type\"));\n    errorList = (List) ((Map) l.get(1)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","sourceNew":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema?wt=json\", json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n\n    List errorList = (List) ((Map) l.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"No such field type\"));\n    errorList = (List) ((Map) l.get(1)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n\n  }\n\n","sourceOld":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = SolrTestCaseJ4.json( \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"   \\n\" +\n        \"    }\");\n\n    String response = restTestHarness.post(\"/schema?wt=json\", payload);\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n\n    List errorList = (List) ((Map) l.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"No such field type\"));\n    errorList = (List) ((Map) l.get(1)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"689567084b83b33da797329124fdc88e35fd5740","date":1475014615,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","sourceNew":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema?wt=json\", json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n    assertNotNull(\"No errors\", l);\n    List errorList = (List) ((Map) l.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"Field 'a1': Field type 'string1' not found.\\n\"));\n    errorList = (List) ((Map) l.get(1)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n  }\n\n","sourceOld":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema?wt=json\", json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n\n    List errorList = (List) ((Map) l.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"No such field type\"));\n    errorList = (List) ((Map) l.get(1)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","sourceNew":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema?wt=json\", json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n    assertNotNull(\"No errors\", l);\n    List errorList = (List) ((Map) l.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"Field 'a1': Field type 'string1' not found.\\n\"));\n    errorList = (List) ((Map) l.get(1)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n  }\n\n","sourceOld":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema?wt=json\", json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n\n    List errorList = (List) ((Map) l.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"No such field type\"));\n    errorList = (List) ((Map) l.get(1)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","sourceNew":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema?wt=json\", json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n    assertNotNull(\"No errors\", l);\n    List errorList = (List) ((Map) l.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"Field 'a1': Field type 'string1' not found.\\n\"));\n    errorList = (List) ((Map) l.get(1)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n  }\n\n","sourceOld":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema?wt=json\", json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n\n    List errorList = (List) ((Map) l.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"No such field type\"));\n    errorList = (List) ((Map) l.get(1)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","sourceNew":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema\", json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n    assertNotNull(\"No errors\", l);\n    List errorList = (List) ((Map) l.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"Field 'a1': Field type 'string1' not found.\\n\"));\n    errorList = (List) ((Map) l.get(1)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n  }\n\n","sourceOld":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema?wt=json\", json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n    assertNotNull(\"No errors\", l);\n    List errorList = (List) ((Map) l.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"Field 'a1': Field type 'string1' not found.\\n\"));\n    errorList = (List) ((Map) l.get(1)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","sourceNew":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema\", json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n    assertNotNull(\"No errors\", l);\n    List errorList = (List) ((Map) l.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"Field 'a1': Field type 'string1' not found.\\n\"));\n    errorList = (List) ((Map) l.get(1)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n  }\n\n","sourceOld":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema?wt=json\", json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n    assertNotNull(\"No errors\", l);\n    List errorList = (List) ((Map) l.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"Field 'a1': Field type 'string1' not found.\\n\"));\n    errorList = (List) ((Map) l.get(1)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","sourceNew":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema\", json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n    assertNotNull(\"No errors\", l);\n    List errorList = (List) ((Map) l.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"Field 'a1': Field type 'string1' not found.\\n\"));\n    errorList = (List) ((Map) l.get(1)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n  }\n\n","sourceOld":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema?wt=json\", json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n    assertNotNull(\"No errors\", l);\n    List errorList = (List) ((Map) l.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"Field 'a1': Field type 'string1' not found.\\n\"));\n    errorList = (List) ((Map) l.get(1)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03d29de0abdd3a2150c0dabfe1bf98024bbfa367","date":1515464714,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","sourceNew":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema\", json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Map error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    List details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 2, details.size());\n    List firstErrorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, firstErrorList.size());\n    assertTrue (((String)firstErrorList.get(0)).contains(\"Field 'a1': Field type 'string1' not found.\\n\"));\n    List secondErrorList = (List)((Map)details.get(1)).get(\"errorMessages\");\n    assertEquals(1, secondErrorList.size());\n    assertTrue (((String)secondErrorList.get(0)).contains(\"is a required field\"));\n  }\n\n","sourceOld":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema\", json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n    assertNotNull(\"No errors\", l);\n    List errorList = (List) ((Map) l.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"Field 'a1': Field type 'string1' not found.\\n\"));\n    errorList = (List) ((Map) l.get(1)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","sourceNew":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema\", json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Map error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    List details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 2, details.size());\n    List firstErrorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, firstErrorList.size());\n    assertTrue (((String)firstErrorList.get(0)).contains(\"Field 'a1': Field type 'string1' not found.\\n\"));\n    List secondErrorList = (List)((Map)details.get(1)).get(\"errorMessages\");\n    assertEquals(1, secondErrorList.size());\n    assertTrue (((String)secondErrorList.get(0)).contains(\"is a required field\"));\n  }\n\n","sourceOld":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema\", json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    List l = (List) map.get(\"errors\");\n    assertNotNull(\"No errors\", l);\n    List errorList = (List) ((Map) l.get(0)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"Field 'a1': Field type 'string1' not found.\\n\"));\n    errorList = (List) ((Map) l.get(1)).get(\"errorMessages\");\n    assertEquals(1, errorList.size());\n    assertTrue (((String)errorList.get(0)).contains(\"is a required field\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","sourceNew":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema\", json(payload));\n    Map map = (Map) fromJSONString(response);\n    Map error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    List details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 2, details.size());\n    List firstErrorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, firstErrorList.size());\n    assertTrue (((String)firstErrorList.get(0)).contains(\"Field 'a1': Field type 'string1' not found.\\n\"));\n    List secondErrorList = (List)((Map)details.get(1)).get(\"errorMessages\");\n    assertEquals(1, secondErrorList.size());\n    assertTrue (((String)secondErrorList.get(0)).contains(\"is a required field\"));\n  }\n\n","sourceOld":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema\", json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Map error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    List details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 2, details.size());\n    List firstErrorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, firstErrorList.size());\n    assertTrue (((String)firstErrorList.get(0)).contains(\"Field 'a1': Field type 'string1' not found.\\n\"));\n    List secondErrorList = (List)((Map)details.get(1)).get(\"errorMessages\");\n    assertEquals(1, secondErrorList.size());\n    assertTrue (((String)secondErrorList.get(0)).contains(\"is a required field\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testMultipleAddFieldWithErrors().mjava","sourceNew":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema\", json(payload));\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = (Map) fromJSONString(response);\n    @SuppressWarnings({\"rawtypes\"})\n    Map error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    @SuppressWarnings({\"rawtypes\"})\n    List details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 2, details.size());\n    @SuppressWarnings({\"rawtypes\"})\n    List firstErrorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, firstErrorList.size());\n    assertTrue (((String)firstErrorList.get(0)).contains(\"Field 'a1': Field type 'string1' not found.\\n\"));\n    @SuppressWarnings({\"rawtypes\"})\n    List secondErrorList = (List)((Map)details.get(1)).get(\"errorMessages\");\n    assertEquals(1, secondErrorList.size());\n    assertTrue (((String)secondErrorList.get(0)).contains(\"is a required field\"));\n  }\n\n","sourceOld":"  public void testMultipleAddFieldWithErrors() throws Exception {\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'name':'a1',\\n\" +\n        \"                 'type': 'string1',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':false\\n\" +\n        \"                 },\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"                 'type': 'string',\\n\" +\n        \"                 'stored':true,\\n\" +\n        \"                 'indexed':true\\n\" +\n        \"                 }\\n\" +\n        \"    }\";\n\n    String response = restTestHarness.post(\"/schema\", json(payload));\n    Map map = (Map) fromJSONString(response);\n    Map error = (Map)map.get(\"error\");\n    assertNotNull(\"No errors\", error);\n    List details = (List)error.get(\"details\");\n    assertNotNull(\"No details\", details);\n    assertEquals(\"Wrong number of details\", 2, details.size());\n    List firstErrorList = (List)((Map)details.get(0)).get(\"errorMessages\");\n    assertEquals(1, firstErrorList.size());\n    assertTrue (((String)firstErrorList.get(0)).contains(\"Field 'a1': Field type 'string1' not found.\\n\"));\n    List secondErrorList = (List)((Map)details.get(1)).get(\"errorMessages\");\n    assertEquals(1, secondErrorList.size());\n    assertTrue (((String)secondErrorList.get(0)).contains(\"is a required field\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a52341299179de5479672f7cf518bf4b173f34b3","03d29de0abdd3a2150c0dabfe1bf98024bbfa367"],"55980207f1977bd1463465de1659b821347e2fa8":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cb9af919a17be70cfc512901fc70f1beaf840ca1"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["cb9af919a17be70cfc512901fc70f1beaf840ca1"],"cb9af919a17be70cfc512901fc70f1beaf840ca1":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","ac1e7fa558287a811ea07634d815ee7b1c541284"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["eeeea2295d6355a29e259130a5c48ace73022d7c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e98520789adb1d5ad05afb4956eca0944a929688":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"03d29de0abdd3a2150c0dabfe1bf98024bbfa367":["a52341299179de5479672f7cf518bf4b173f34b3"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["cb9af919a17be70cfc512901fc70f1beaf840ca1","eeeea2295d6355a29e259130a5c48ace73022d7c"],"a52341299179de5479672f7cf518bf4b173f34b3":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["eeeea2295d6355a29e259130a5c48ace73022d7c","689567084b83b33da797329124fdc88e35fd5740"],"689567084b83b33da797329124fdc88e35fd5740":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"55980207f1977bd1463465de1659b821347e2fa8":[],"eeeea2295d6355a29e259130a5c48ace73022d7c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","689567084b83b33da797329124fdc88e35fd5740"],"cb9af919a17be70cfc512901fc70f1beaf840ca1":["55980207f1977bd1463465de1659b821347e2fa8","eeeea2295d6355a29e259130a5c48ace73022d7c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["55980207f1977bd1463465de1659b821347e2fa8"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["cb9af919a17be70cfc512901fc70f1beaf840ca1","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["e98520789adb1d5ad05afb4956eca0944a929688"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"03d29de0abdd3a2150c0dabfe1bf98024bbfa367":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a52341299179de5479672f7cf518bf4b173f34b3":["b94236357aaa22b76c10629851fe4e376e0cea82","03d29de0abdd3a2150c0dabfe1bf98024bbfa367"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a52341299179de5479672f7cf518bf4b173f34b3","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"689567084b83b33da797329124fdc88e35fd5740":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}