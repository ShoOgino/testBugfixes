{"path":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,ValueType).mjava","commits":[{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,ValueType).mjava","pathOld":"/dev/null","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context, ValueType type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n      dataIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.DATA_EXTENSION), context);\n      version = CodecUtil.checkHeader(dataIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        indexIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION), context);\n        final int version2 = CodecUtil.checkHeader(indexIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7dee0921b2f5f1a89c2821d235d4566a98e81ec","date":1320191700,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,ValueType).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context, ValueType type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n                                                              Writer.DATA_EXTENSION), context);\n        version = CodecUtil.checkHeader(dataIn, codecName, maxVersion, maxVersion);\n        if (doIndex) {\n          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n                                                                 Writer.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(indexIn, codecName,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context, ValueType type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n      dataIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.DATA_EXTENSION), context);\n      version = CodecUtil.checkHeader(dataIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        indexIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION), context);\n        final int version2 = CodecUtil.checkHeader(indexIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,ValueType).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context, ValueType type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                              Writer.DATA_EXTENSION), context);\n        version = CodecUtil.checkHeader(dataIn, codecName, maxVersion, maxVersion);\n        if (doIndex) {\n          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                                 Writer.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(indexIn, codecName,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context, ValueType type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n                                                              Writer.DATA_EXTENSION), context);\n        version = CodecUtil.checkHeader(dataIn, codecName, maxVersion, maxVersion);\n        if (doIndex) {\n          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n                                                                 Writer.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(indexIn, codecName,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,ValueType).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context, ValueType type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                              Writer.DATA_EXTENSION), context);\n        version = CodecUtil.checkHeader(dataIn, codecName, maxVersion, maxVersion);\n        if (doIndex) {\n          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                                 Writer.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(indexIn, codecName,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context, ValueType type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                              Writer.DATA_EXTENSION), context);\n        version = CodecUtil.checkHeader(dataIn, codecName, maxVersion, maxVersion);\n        if (doIndex) {\n          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                                 Writer.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(indexIn, codecName,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,ValueType).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context, Type type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                              Writer.DATA_EXTENSION), context);\n        version = CodecUtil.checkHeader(dataIn, codecName, maxVersion, maxVersion);\n        if (doIndex) {\n          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                                 Writer.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(indexIn, codecName,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context, ValueType type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                              Writer.DATA_EXTENSION), context);\n        version = CodecUtil.checkHeader(dataIn, codecName, maxVersion, maxVersion);\n        if (doIndex) {\n          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                                 Writer.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(indexIn, codecName,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["d7dee0921b2f5f1a89c2821d235d4566a98e81ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["7b91922b55d15444d554721b352861d028eb8278"],"d7dee0921b2f5f1a89c2821d235d4566a98e81ec":["e128967bca58657bc0039d4bfe631e63e81f1977"],"e128967bca58657bc0039d4bfe631e63e81f1977":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["7b91922b55d15444d554721b352861d028eb8278","f9efc72acdea22f5285be0a808f8bba51bb8e367"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["f9efc72acdea22f5285be0a808f8bba51bb8e367","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e128967bca58657bc0039d4bfe631e63e81f1977"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d7dee0921b2f5f1a89c2821d235d4566a98e81ec":["7b91922b55d15444d554721b352861d028eb8278"],"e128967bca58657bc0039d4bfe631e63e81f1977":["d7dee0921b2f5f1a89c2821d235d4566a98e81ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}