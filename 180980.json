{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell2/TestDictionary#testInvalidData().mjava","commits":[{"id":"c214bc712d04c78c4d434119d560d0a4dd2fce4f","date":1393216863,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell2/TestDictionary#testInvalidData().mjava","pathOld":"/dev/null","sourceNew":"  // malformed rule causes ParseException\n  public void testInvalidData() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"broken.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"simple.dic\");\n    \n    try {\n      new Dictionary(affixStream, dictStream);\n      fail(\"didn't get expected exception\");\n    } catch (ParseException expected) {\n      assertEquals(\"The affix file contains a rule with less than five elements\", expected.getMessage());\n      assertEquals(23, expected.getErrorOffset());\n    }\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1bc1343e76d5f1ad7d6a35dd8c55fb52f9b4e3a7","b6b9214e93abd5c360b7dc32483691d5555a9c7e","05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testInvalidData().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell2/TestDictionary#testInvalidData().mjava","sourceNew":"  // malformed rule causes ParseException\n  public void testInvalidData() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"broken.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"simple.dic\");\n    \n    try {\n      new Dictionary(affixStream, dictStream);\n      fail(\"didn't get expected exception\");\n    } catch (ParseException expected) {\n      assertEquals(\"The affix file contains a rule with less than five elements\", expected.getMessage());\n      assertEquals(23, expected.getErrorOffset());\n    }\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":"  // malformed rule causes ParseException\n  public void testInvalidData() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"broken.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"simple.dic\");\n    \n    try {\n      new Dictionary(affixStream, dictStream);\n      fail(\"didn't get expected exception\");\n    } catch (ParseException expected) {\n      assertEquals(\"The affix file contains a rule with less than five elements\", expected.getMessage());\n      assertEquals(23, expected.getErrorOffset());\n    }\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["c214bc712d04c78c4d434119d560d0a4dd2fce4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c214bc712d04c78c4d434119d560d0a4dd2fce4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}