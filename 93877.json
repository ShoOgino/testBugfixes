{"path":"lucene/src/java/org/apache/lucene/util/BytesRefHash#quickSort(Comparator[BytesRef],int[],int,int).mjava","commits":[{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRefHash#quickSort(Comparator[BytesRef],int[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void quickSort(Comparator<BytesRef> comp, int[] entries, int lo,\n      int hi) {\n    if (lo >= hi)\n      return;\n    if (hi == 1 + lo) {\n      if (compare(comp, entries[lo], entries[hi]) > 0) {\n        final int tmp = entries[lo];\n        entries[lo] = entries[hi];\n        entries[hi] = tmp;\n      }\n      return;\n    }\n    final int mid = (lo + hi) >>> 1;\n    if (compare(comp, entries[lo], entries[mid]) > 0) {\n      int tmp = entries[lo];\n      entries[lo] = entries[mid];\n      entries[mid] = tmp;\n    }\n\n    if (compare(comp, entries[mid], entries[hi]) > 0) {\n      int tmp = entries[mid];\n      entries[mid] = entries[hi];\n      entries[hi] = tmp;\n\n      if (compare(comp, entries[lo], entries[mid]) > 0) {\n        int tmp2 = entries[lo];\n        entries[lo] = entries[mid];\n        entries[mid] = tmp2;\n      }\n    }\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    final int partition = entries[mid];\n\n    for (;;) {\n      while (compare(comp, entries[right], partition) > 0)\n        --right;\n\n      while (left < right && compare(comp, entries[left], partition) <= 0)\n        ++left;\n\n      if (left < right) {\n        final int tmp = entries[left];\n        entries[left] = entries[right];\n        entries[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(comp, entries, lo, left);\n    quickSort(comp, entries, left + 1, hi);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","date":1288192616,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRefHash#quickSort(Comparator[BytesRef],int[],int,int).mjava","sourceNew":null,"sourceOld":"  private void quickSort(Comparator<BytesRef> comp, int[] entries, int lo,\n      int hi) {\n    if (lo >= hi)\n      return;\n    if (hi == 1 + lo) {\n      if (compare(comp, entries[lo], entries[hi]) > 0) {\n        final int tmp = entries[lo];\n        entries[lo] = entries[hi];\n        entries[hi] = tmp;\n      }\n      return;\n    }\n    final int mid = (lo + hi) >>> 1;\n    if (compare(comp, entries[lo], entries[mid]) > 0) {\n      int tmp = entries[lo];\n      entries[lo] = entries[mid];\n      entries[mid] = tmp;\n    }\n\n    if (compare(comp, entries[mid], entries[hi]) > 0) {\n      int tmp = entries[mid];\n      entries[mid] = entries[hi];\n      entries[hi] = tmp;\n\n      if (compare(comp, entries[lo], entries[mid]) > 0) {\n        int tmp2 = entries[lo];\n        entries[lo] = entries[mid];\n        entries[mid] = tmp2;\n      }\n    }\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    final int partition = entries[mid];\n\n    for (;;) {\n      while (compare(comp, entries[right], partition) > 0)\n        --right;\n\n      while (left < right && compare(comp, entries[left], partition) <= 0)\n        ++left;\n\n      if (left < right) {\n        final int tmp = entries[left];\n        entries[left] = entries[right];\n        entries[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(comp, entries, lo, left);\n    quickSort(comp, entries, left + 1, hi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRefHash#quickSort(Comparator[BytesRef],int[],int,int).mjava","sourceNew":null,"sourceOld":"  private void quickSort(Comparator<BytesRef> comp, int[] entries, int lo,\n      int hi) {\n    if (lo >= hi)\n      return;\n    if (hi == 1 + lo) {\n      if (compare(comp, entries[lo], entries[hi]) > 0) {\n        final int tmp = entries[lo];\n        entries[lo] = entries[hi];\n        entries[hi] = tmp;\n      }\n      return;\n    }\n    final int mid = (lo + hi) >>> 1;\n    if (compare(comp, entries[lo], entries[mid]) > 0) {\n      int tmp = entries[lo];\n      entries[lo] = entries[mid];\n      entries[mid] = tmp;\n    }\n\n    if (compare(comp, entries[mid], entries[hi]) > 0) {\n      int tmp = entries[mid];\n      entries[mid] = entries[hi];\n      entries[hi] = tmp;\n\n      if (compare(comp, entries[lo], entries[mid]) > 0) {\n        int tmp2 = entries[lo];\n        entries[lo] = entries[mid];\n        entries[mid] = tmp2;\n      }\n    }\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    final int partition = entries[mid];\n\n    for (;;) {\n      while (compare(comp, entries[right], partition) > 0)\n        --right;\n\n      while (left < right && compare(comp, entries[left], partition) <= 0)\n        ++left;\n\n      if (left < right) {\n        final int tmp = entries[left];\n        entries[left] = entries[right];\n        entries[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(comp, entries, lo, left);\n    quickSort(comp, entries, left + 1, hi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"]},"commit2Childs":{"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}