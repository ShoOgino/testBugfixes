{"path":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/TestXLSXResponseWriter#testPseudoFields().mjava","commits":[{"id":"056868364d4e4a9ab9351ae5cc55e0506fe19769","date":1473148338,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/TestXLSXResponseWriter#testPseudoFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPseudoFields() throws Exception {\n    // Use Pseudo Field\n    SolrQueryRequest req = req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,foo_s\");\n    XSSFSheet resultSheet = getWSResultForQuery(req);\n    assertEquals(\"XXX,foo_s\\n1,hi\\n\", getStringFromSheet(resultSheet));\n    \n    String txt = getStringFromSheet(getWSResultForQuery(req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,YYY:[docid],FOO:foo_s\")));\n    String[] lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(\"XXX,YYY,FOO\", lines[0] );\n    assertEquals(\"1,0,hi\", lines[1] );\n\n    //assertions specific to multiple pseudofields functions like abs, div, exists, etc.. (SOLR-5423)\n    String funcText = getStringFromSheet(getWSResultForQuery(req(\"q\",\"*\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,YYY:exists(foo_s1)\")));\n    String[] funcLines = funcText.split(\"\\n\");\n    assertEquals(5, funcLines.length);\n    assertEquals(\"XXX,YYY\", funcLines[0] );\n    assertEquals(\"1,false\", funcLines[1] );\n    assertEquals(\"3,false\", funcLines[3] );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["080177034f0f8c5fc458255dbe1e84334b531ade"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/TestXLSXResponseWriter#testPseudoFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPseudoFields() throws Exception {\n    // Use Pseudo Field\n    SolrQueryRequest req = req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,foo_s\");\n    XSSFSheet resultSheet = getWSResultForQuery(req);\n    assertEquals(\"XXX,foo_s\\n1,hi\\n\", getStringFromSheet(resultSheet));\n    \n    String txt = getStringFromSheet(getWSResultForQuery(req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,YYY:[docid],FOO:foo_s\")));\n    String[] lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(\"XXX,YYY,FOO\", lines[0] );\n    assertEquals(\"1,0,hi\", lines[1] );\n\n    //assertions specific to multiple pseudofields functions like abs, div, exists, etc.. (SOLR-5423)\n    String funcText = getStringFromSheet(getWSResultForQuery(req(\"q\",\"*\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,YYY:exists(foo_s1)\")));\n    String[] funcLines = funcText.split(\"\\n\");\n    assertEquals(5, funcLines.length);\n    assertEquals(\"XXX,YYY\", funcLines[0] );\n    assertEquals(\"1,false\", funcLines[1] );\n    assertEquals(\"3,false\", funcLines[3] );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/TestXLSXResponseWriter#testPseudoFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPseudoFields() throws Exception {\n    // Use Pseudo Field\n    SolrQueryRequest req = req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,foo_s\");\n    XSSFSheet resultSheet = getWSResultForQuery(req);\n    assertEquals(\"XXX,foo_s\\n1,hi\\n\", getStringFromSheet(resultSheet));\n    \n    String txt = getStringFromSheet(getWSResultForQuery(req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,YYY:[docid],FOO:foo_s\")));\n    String[] lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(\"XXX,YYY,FOO\", lines[0] );\n    assertEquals(\"1,0,hi\", lines[1] );\n\n    //assertions specific to multiple pseudofields functions like abs, div, exists, etc.. (SOLR-5423)\n    String funcText = getStringFromSheet(getWSResultForQuery(req(\"q\",\"*\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,YYY:exists(foo_s1)\")));\n    String[] funcLines = funcText.split(\"\\n\");\n    assertEquals(5, funcLines.length);\n    assertEquals(\"XXX,YYY\", funcLines[0] );\n    assertEquals(\"1,false\", funcLines[1] );\n    assertEquals(\"3,false\", funcLines[3] );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/TestXLSXResponseWriter#testPseudoFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPseudoFields() throws Exception {\n    // Use Pseudo Field\n    SolrQueryRequest req = req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,foo_s\");\n    XSSFSheet resultSheet = getWSResultForQuery(req);\n    assertEquals(\"XXX,foo_s\\n1,hi\\n\", getStringFromSheet(resultSheet));\n    \n    String txt = getStringFromSheet(getWSResultForQuery(req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,YYY:[docid],FOO:foo_s\")));\n    String[] lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(\"XXX,YYY,FOO\", lines[0] );\n    assertEquals(\"1,0,hi\", lines[1] );\n\n    //assertions specific to multiple pseudofields functions like abs, div, exists, etc.. (SOLR-5423)\n    String funcText = getStringFromSheet(getWSResultForQuery(req(\"q\",\"*\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,YYY:exists(foo_s1)\")));\n    String[] funcLines = funcText.split(\"\\n\");\n    assertEquals(5, funcLines.length);\n    assertEquals(\"XXX,YYY\", funcLines[0] );\n    assertEquals(\"1,false\", funcLines[1] );\n    assertEquals(\"3,false\", funcLines[3] );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a144790859eb303122988cd315215ff30f449d2","date":1493938430,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/TestXLSXResponseWriter#testPseudoFields().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/TestXLSXResponseWriter#testPseudoFields().mjava","sourceNew":"  @Test\n  public void testPseudoFields() throws Exception {\n    // Use Pseudo Field\n    SolrQueryRequest req = req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,foo_s\");\n    XSSFSheet resultSheet = getWSResultForQuery(req);\n    assertEquals(\"XXX,foo_s\\n1,hi\\n\", getStringFromSheet(resultSheet));\n    \n    String txt = getStringFromSheet(getWSResultForQuery(req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,YYY:[docid],FOO:foo_s\")));\n    String[] lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(\"XXX,YYY,FOO\", lines[0] );\n    assertEquals(\"1,0,hi\", lines[1] );\n\n    //assertions specific to multiple pseudofields functions like abs, div, exists, etc.. (SOLR-5423)\n    String funcText = getStringFromSheet(getWSResultForQuery(req(\"df\", \"text\", \"q\",\"*\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,YYY:exists(foo_s1)\")));\n    String[] funcLines = funcText.split(\"\\n\");\n    assertEquals(5, funcLines.length);\n    assertEquals(\"XXX,YYY\", funcLines[0] );\n    assertEquals(\"1,false\", funcLines[1] );\n    assertEquals(\"3,false\", funcLines[3] );\n  }\n\n","sourceOld":"  @Test\n  public void testPseudoFields() throws Exception {\n    // Use Pseudo Field\n    SolrQueryRequest req = req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,foo_s\");\n    XSSFSheet resultSheet = getWSResultForQuery(req);\n    assertEquals(\"XXX,foo_s\\n1,hi\\n\", getStringFromSheet(resultSheet));\n    \n    String txt = getStringFromSheet(getWSResultForQuery(req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,YYY:[docid],FOO:foo_s\")));\n    String[] lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(\"XXX,YYY,FOO\", lines[0] );\n    assertEquals(\"1,0,hi\", lines[1] );\n\n    //assertions specific to multiple pseudofields functions like abs, div, exists, etc.. (SOLR-5423)\n    String funcText = getStringFromSheet(getWSResultForQuery(req(\"q\",\"*\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,YYY:exists(foo_s1)\")));\n    String[] funcLines = funcText.split(\"\\n\");\n    assertEquals(5, funcLines.length);\n    assertEquals(\"XXX,YYY\", funcLines[0] );\n    assertEquals(\"1,false\", funcLines[1] );\n    assertEquals(\"3,false\", funcLines[3] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/TestXLSXResponseWriter#testPseudoFields().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/TestXLSXResponseWriter#testPseudoFields().mjava","sourceNew":"  @Test\n  public void testPseudoFields() throws Exception {\n    // Use Pseudo Field\n    SolrQueryRequest req = req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,foo_s\");\n    XSSFSheet resultSheet = getWSResultForQuery(req);\n    assertEquals(\"XXX,foo_s\\n1,hi\\n\", getStringFromSheet(resultSheet));\n    \n    String txt = getStringFromSheet(getWSResultForQuery(req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,YYY:[docid],FOO:foo_s\")));\n    String[] lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(\"XXX,YYY,FOO\", lines[0] );\n    assertEquals(\"1,0,hi\", lines[1] );\n\n    //assertions specific to multiple pseudofields functions like abs, div, exists, etc.. (SOLR-5423)\n    String funcText = getStringFromSheet(getWSResultForQuery(req(\"df\", \"text\", \"q\",\"*\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,YYY:exists(foo_s1)\")));\n    String[] funcLines = funcText.split(\"\\n\");\n    assertEquals(5, funcLines.length);\n    assertEquals(\"XXX,YYY\", funcLines[0] );\n    assertEquals(\"1,false\", funcLines[1] );\n    assertEquals(\"3,false\", funcLines[3] );\n  }\n\n","sourceOld":"  @Test\n  public void testPseudoFields() throws Exception {\n    // Use Pseudo Field\n    SolrQueryRequest req = req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,foo_s\");\n    XSSFSheet resultSheet = getWSResultForQuery(req);\n    assertEquals(\"XXX,foo_s\\n1,hi\\n\", getStringFromSheet(resultSheet));\n    \n    String txt = getStringFromSheet(getWSResultForQuery(req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,YYY:[docid],FOO:foo_s\")));\n    String[] lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(\"XXX,YYY,FOO\", lines[0] );\n    assertEquals(\"1,0,hi\", lines[1] );\n\n    //assertions specific to multiple pseudofields functions like abs, div, exists, etc.. (SOLR-5423)\n    String funcText = getStringFromSheet(getWSResultForQuery(req(\"q\",\"*\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,YYY:exists(foo_s1)\")));\n    String[] funcLines = funcText.split(\"\\n\");\n    assertEquals(5, funcLines.length);\n    assertEquals(\"XXX,YYY\", funcLines[0] );\n    assertEquals(\"1,false\", funcLines[1] );\n    assertEquals(\"3,false\", funcLines[3] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"080177034f0f8c5fc458255dbe1e84334b531ade","date":1553677716,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/TestXLSXResponseWriter#testPseudoFields().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/TestXLSXResponseWriter#testPseudoFields().mjava","sourceNew":"  @Test\n  public void testPseudoFields() throws Exception {\n    // Use Pseudo Field\n    SolrQueryRequest req = req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,foo_s\");\n    XSSFSheet resultSheet = getWSResultForQuery(req);\n    assertEquals(\"XXX,foo_s\\n1,hi\\n\", getStringFromSheet(resultSheet));\n    \n    String txt = getStringFromSheet(getWSResultForQuery(req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,YYY:[docid],FOO:foo_s\")));\n    String[] lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(\"XXX,YYY,FOO\", lines[0] );\n    assertEquals(\"1,0,hi\", lines[1] );\n\n    //assertions specific to multiple pseudofields functions like abs, div, exists, etc.. (SOLR-5423)\n    String funcText = getStringFromSheet(getWSResultForQuery(req(\"df\", \"text\", \"q\",\"*\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,YYY:exists(foo_s1)\")));\n    String[] funcLines = funcText.split(\"\\n\");\n    assertEquals(6, funcLines.length);\n    assertEquals(\"XXX,YYY\", funcLines[0] );\n    assertEquals(\"1,false\", funcLines[1] );\n    assertEquals(\"3,false\", funcLines[3] );\n\n    //assertions specific to single function without alias (SOLR-5423)\n    String singleFuncText = getStringFromSheet(\n        getWSResultForQuery(req(\"df\", \"text\", \"q\",\"*\", \"wt\",\"xlsx\", \"fl\",\"exists(foo_s1),XXX:id\")));\n    String[] singleFuncLines = singleFuncText.split(\"\\n\");\n    assertEquals(6, singleFuncLines.length);\n    assertEquals(\"exists(foo_s1),XXX\", singleFuncLines[0] );\n    assertEquals(\"false,1\", singleFuncLines[1] );\n    assertEquals(\"false,3\", singleFuncLines[3] );\n\n    // pseudo-fields with * in fl\n    txt = getStringFromSheet(\n        getWSResultForQuery(req(\"df\", \"text\", \"q\",\"id:4\", \"wt\",\"xlsx\", \"fl\",\"*,YYY:[docid],FOO:foo_s1\")));\n    lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(sortHeader(\"foo_i,foo_l,FOO,foo_s,pubyear_ii,store_iis,\" +\n        \"v2_ss,multiDefault,timestamp,foo_dt1,foo_b,YYY,foo_d,id,foo_f,v_ss,foo_s1,intDefault\"), sortHeader(lines[0]));\n  }\n\n","sourceOld":"  @Test\n  public void testPseudoFields() throws Exception {\n    // Use Pseudo Field\n    SolrQueryRequest req = req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,foo_s\");\n    XSSFSheet resultSheet = getWSResultForQuery(req);\n    assertEquals(\"XXX,foo_s\\n1,hi\\n\", getStringFromSheet(resultSheet));\n    \n    String txt = getStringFromSheet(getWSResultForQuery(req(\"q\",\"id:1\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,YYY:[docid],FOO:foo_s\")));\n    String[] lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(\"XXX,YYY,FOO\", lines[0] );\n    assertEquals(\"1,0,hi\", lines[1] );\n\n    //assertions specific to multiple pseudofields functions like abs, div, exists, etc.. (SOLR-5423)\n    String funcText = getStringFromSheet(getWSResultForQuery(req(\"df\", \"text\", \"q\",\"*\", \"wt\",\"xlsx\", \"fl\",\"XXX:id,YYY:exists(foo_s1)\")));\n    String[] funcLines = funcText.split(\"\\n\");\n    assertEquals(5, funcLines.length);\n    assertEquals(\"XXX,YYY\", funcLines[0] );\n    assertEquals(\"1,false\", funcLines[1] );\n    assertEquals(\"3,false\", funcLines[3] );\n  }\n\n","bugFix":["056868364d4e4a9ab9351ae5cc55e0506fe19769"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"056868364d4e4a9ab9351ae5cc55e0506fe19769":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","1a144790859eb303122988cd315215ff30f449d2"],"080177034f0f8c5fc458255dbe1e84334b531ade":["1a144790859eb303122988cd315215ff30f449d2"],"1a144790859eb303122988cd315215ff30f449d2":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["080177034f0f8c5fc458255dbe1e84334b531ade"],"89424def13674ea17829b41c5883c54ecc31a132":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","056868364d4e4a9ab9351ae5cc55e0506fe19769"]},"commit2Childs":{"056868364d4e4a9ab9351ae5cc55e0506fe19769":["89424def13674ea17829b41c5883c54ecc31a132"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"080177034f0f8c5fc458255dbe1e84334b531ade":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1a144790859eb303122988cd315215ff30f449d2":["e9017cf144952056066919f1ebc7897ff9bd71b1","080177034f0f8c5fc458255dbe1e84334b531ade"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["056868364d4e4a9ab9351ae5cc55e0506fe19769","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e9017cf144952056066919f1ebc7897ff9bd71b1","1a144790859eb303122988cd315215ff30f449d2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}