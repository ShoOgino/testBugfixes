{"path":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testRetrieveChecksum().mjava","commits":[{"id":"a42ec09a7fba21c060922e499bb1ee9f741b6dfc","date":1592301881,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testRetrieveChecksum().mjava","pathOld":"/dev/null","sourceNew":"  public void testRetrieveChecksum() throws IOException {\n    Directory dir = newDirectory();\n    try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n      out.writeByte((byte) 42);\n      CodecUtil.writeFooter(out);\n    }\n    try (IndexInput in = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n      CodecUtil.retrieveChecksum(in, in.length()); // no exception\n\n      CorruptIndexException exception = expectThrows(CorruptIndexException.class,\n          () -> CodecUtil.retrieveChecksum(in, in.length() - 1));\n      assertTrue(exception.getMessage().contains(\"too long\"));\n      assertArrayEquals(new Throwable[0], exception.getSuppressed());\n\n      exception = expectThrows(CorruptIndexException.class,\n          () -> CodecUtil.retrieveChecksum(in, in.length() + 1));\n      assertTrue(exception.getMessage().contains(\"truncated\"));\n      assertArrayEquals(new Throwable[0], exception.getSuppressed());\n    }\n\n    try (IndexOutput out = dir.createOutput(\"bar\", IOContext.DEFAULT)) {\n      for (int i = 0; i <= CodecUtil.footerLength(); ++i) {\n        out.writeByte((byte) i);\n      }\n    }\n    try (IndexInput in = dir.openInput(\"bar\", IOContext.DEFAULT)) {\n      CorruptIndexException exception = expectThrows(CorruptIndexException.class,\n          () -> CodecUtil.retrieveChecksum(in, in.length()));\n      assertTrue(exception.getMessage().contains(\"codec footer mismatch\"));\n      assertArrayEquals(new Throwable[0], exception.getSuppressed());\n\n      exception = expectThrows(CorruptIndexException.class,\n          () -> CodecUtil.retrieveChecksum(in, in.length() - 1));\n      assertTrue(exception.getMessage().contains(\"too long\"));\n\n      exception = expectThrows(CorruptIndexException.class,\n          () -> CodecUtil.retrieveChecksum(in, in.length() + 1));\n      assertTrue(exception.getMessage().contains(\"truncated\"));\n    }\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a42ec09a7fba21c060922e499bb1ee9f741b6dfc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a42ec09a7fba21c060922e499bb1ee9f741b6dfc"]},"commit2Childs":{"a42ec09a7fba21c060922e499bb1ee9f741b6dfc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a42ec09a7fba21c060922e499bb1ee9f741b6dfc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}