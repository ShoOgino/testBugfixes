{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","commits":[{"id":"50c0b52582a8d1ff8421744979b8b13be127cbe4","date":1323495210,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    Thread.sleep(100);\n    ModifiableSolrParams queryAll = params(\"q\", \"*\");\n    QueryResponse qres = solrServer.query(queryAll);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(0, results.getNumFound());\n    Thread.sleep(1000);\n    for (int i = 0; i < 10; i++) {\n      qres = solrServer.query(queryAll);\n      results = qres.getResults();\n      if (2 == results.getNumFound()) {\n        return;\n      }\n      Thread.sleep(500);\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","date":1323540308,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    Thread.sleep(100);\n    ModifiableSolrParams queryAll = params(\"q\", \"*\");\n    QueryResponse qres = solrServer.query(queryAll);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(0, results.getNumFound());\n    Thread.sleep(1000);\n    for (int i = 0; i < 10; i++) {\n      qres = solrServer.query(queryAll);\n      results = qres.getResults();\n      if (2 == results.getNumFound()) {\n        return;\n      }\n      Thread.sleep(500);\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","sourceNew":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    HttpSolrServer solrServer = new HttpSolrServer(url);\n    solrServer.request(req);\n    Thread.sleep(100);\n    ModifiableSolrParams queryAll = params(\"q\", \"*\");\n    QueryResponse qres = solrServer.query(queryAll);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(0, results.getNumFound());\n    Thread.sleep(1000);\n    for (int i = 0; i < 10; i++) {\n      qres = solrServer.query(queryAll);\n      results = qres.getResults();\n      if (2 == results.getNumFound()) {\n        return;\n      }\n      Thread.sleep(500);\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","sourceOld":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    CommonsHttpSolrServer solrServer = new CommonsHttpSolrServer(url);\n    solrServer.request(req);\n    Thread.sleep(100);\n    ModifiableSolrParams queryAll = params(\"q\", \"*\");\n    QueryResponse qres = solrServer.query(queryAll);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(0, results.getNumFound());\n    Thread.sleep(1000);\n    for (int i = 0; i < 10; i++) {\n      qres = solrServer.query(queryAll);\n      results = qres.getResults();\n      if (2 == results.getNumFound()) {\n        return;\n      }\n      Thread.sleep(500);\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f8b5ba78b252ff57082799d1b662ad3d677ecfc","date":1347893162,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","sourceNew":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    String url = \"http://127.0.0.1:\" + jetty.getLocalPort() + \"/solr\";\n    HttpSolrServer solrServer = new HttpSolrServer(url);\n    solrServer.request(req);\n    Thread.sleep(100);\n    ModifiableSolrParams queryAll = params(\"q\", \"*\");\n    QueryResponse qres = solrServer.query(queryAll);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(0, results.getNumFound());\n    Thread.sleep(1000);\n    for (int i = 0; i < 10; i++) {\n      qres = solrServer.query(queryAll);\n      results = qres.getResults();\n      if (2 == results.getNumFound()) {\n        return;\n      }\n      Thread.sleep(500);\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","sourceOld":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    String url = \"http://localhost:\" + jetty.getLocalPort() + \"/solr\";\n    HttpSolrServer solrServer = new HttpSolrServer(url);\n    solrServer.request(req);\n    Thread.sleep(100);\n    ModifiableSolrParams queryAll = params(\"q\", \"*\");\n    QueryResponse qres = solrServer.query(queryAll);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(0, results.getNumFound());\n    Thread.sleep(1000);\n    for (int i = 0; i < 10; i++) {\n      qres = solrServer.query(queryAll);\n      results = qres.getResults();\n      if (2 == results.getNumFound()) {\n        return;\n      }\n      Thread.sleep(500);\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","sourceNew":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    String url = \"http\" + (isSSLMode() ? \"s\" : \"\") + \"://127.0.0.1:\" + jetty.getLocalPort() + \"/solr\";\n    HttpSolrServer solrServer = new HttpSolrServer(url);\n    solrServer.request(req);\n    Thread.sleep(100);\n    ModifiableSolrParams queryAll = params(\"q\", \"*\");\n    QueryResponse qres = solrServer.query(queryAll);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(0, results.getNumFound());\n    Thread.sleep(1000);\n    for (int i = 0; i < 10; i++) {\n      qres = solrServer.query(queryAll);\n      results = qres.getResults();\n      if (2 == results.getNumFound()) {\n        return;\n      }\n      Thread.sleep(500);\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","sourceOld":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    String url = \"http://127.0.0.1:\" + jetty.getLocalPort() + \"/solr\";\n    HttpSolrServer solrServer = new HttpSolrServer(url);\n    solrServer.request(req);\n    Thread.sleep(100);\n    ModifiableSolrParams queryAll = params(\"q\", \"*\");\n    QueryResponse qres = solrServer.query(queryAll);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(0, results.getNumFound());\n    Thread.sleep(1000);\n    for (int i = 0; i < 10; i++) {\n      qres = solrServer.query(queryAll);\n      results = qres.getResults();\n      if (2 == results.getNumFound()) {\n        return;\n      }\n      Thread.sleep(500);\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81ec897f0eb789ef9536a8130d1cdb9337ef108a","date":1392217884,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","sourceNew":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    HttpSolrServer solrServer = new HttpSolrServer(buildUrl(jetty.getLocalPort(), \"/solr\"));\n    solrServer.request(req);\n    Thread.sleep(100);\n    ModifiableSolrParams queryAll = params(\"q\", \"*\");\n    QueryResponse qres = solrServer.query(queryAll);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(0, results.getNumFound());\n    Thread.sleep(1000);\n    for (int i = 0; i < 10; i++) {\n      qres = solrServer.query(queryAll);\n      results = qres.getResults();\n      if (2 == results.getNumFound()) {\n        return;\n      }\n      Thread.sleep(500);\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","sourceOld":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    String url = \"http\" + (isSSLMode() ? \"s\" : \"\") + \"://127.0.0.1:\" + jetty.getLocalPort() + \"/solr\";\n    HttpSolrServer solrServer = new HttpSolrServer(url);\n    solrServer.request(req);\n    Thread.sleep(100);\n    ModifiableSolrParams queryAll = params(\"q\", \"*\");\n    QueryResponse qres = solrServer.query(queryAll);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(0, results.getNumFound());\n    Thread.sleep(1000);\n    for (int i = 0; i < 10; i++) {\n      qres = solrServer.query(queryAll);\n      results = qres.getResults();\n      if (2 == results.getNumFound()) {\n        return;\n      }\n      Thread.sleep(500);\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c7856260bc28f285ae7bfefa99b28db4dca6daf","date":1395253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","sourceNew":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    HttpSolrServer solrServer = new HttpSolrServer(buildUrl(jetty.getLocalPort(), \"/solr\"));\n    solrServer.request(req);\n    Thread.sleep(100);\n    ModifiableSolrParams queryAll = params(\"q\", \"*\");\n    QueryResponse qres = solrServer.query(queryAll);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(0, results.getNumFound());\n    Thread.sleep(1000);\n    for (int i = 0; i < 10; i++) {\n      qres = solrServer.query(queryAll);\n      results = qres.getResults();\n      if (2 == results.getNumFound()) {\n        solrServer.shutdown();\n        return;\n      }\n      Thread.sleep(500);\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","sourceOld":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    HttpSolrServer solrServer = new HttpSolrServer(buildUrl(jetty.getLocalPort(), \"/solr\"));\n    solrServer.request(req);\n    Thread.sleep(100);\n    ModifiableSolrParams queryAll = params(\"q\", \"*\");\n    QueryResponse qres = solrServer.query(queryAll);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(0, results.getNumFound());\n    Thread.sleep(1000);\n    for (int i = 0; i < 10; i++) {\n      qres = solrServer.query(queryAll);\n      results = qres.getResults();\n      if (2 == results.getNumFound()) {\n        return;\n      }\n      Thread.sleep(500);\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","sourceNew":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    HttpSolrClient solrServer = new HttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr\"));\n    solrServer.request(req);\n    Thread.sleep(100);\n    ModifiableSolrParams queryAll = params(\"q\", \"*\");\n    QueryResponse qres = solrServer.query(queryAll);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(0, results.getNumFound());\n    Thread.sleep(1000);\n    for (int i = 0; i < 10; i++) {\n      qres = solrServer.query(queryAll);\n      results = qres.getResults();\n      if (2 == results.getNumFound()) {\n        solrServer.shutdown();\n        return;\n      }\n      Thread.sleep(500);\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","sourceOld":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    HttpSolrServer solrServer = new HttpSolrServer(buildUrl(jetty.getLocalPort(), \"/solr\"));\n    solrServer.request(req);\n    Thread.sleep(100);\n    ModifiableSolrParams queryAll = params(\"q\", \"*\");\n    QueryResponse qres = solrServer.query(queryAll);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(0, results.getNumFound());\n    Thread.sleep(1000);\n    for (int i = 0; i < 10; i++) {\n      qres = solrServer.query(queryAll);\n      results = qres.getResults();\n      if (2 == results.getNumFound()) {\n        solrServer.shutdown();\n        return;\n      }\n      Thread.sleep(500);\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","sourceNew":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    HttpSolrClient solrServer = new HttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"));\n    solrServer.request(req);\n    Thread.sleep(100);\n    ModifiableSolrParams queryAll = params(\"q\", \"*\");\n    QueryResponse qres = solrServer.query(queryAll);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(0, results.getNumFound());\n    Thread.sleep(1000);\n    for (int i = 0; i < 10; i++) {\n      qres = solrServer.query(queryAll);\n      results = qres.getResults();\n      if (2 == results.getNumFound()) {\n        solrServer.shutdown();\n        return;\n      }\n      Thread.sleep(500);\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","sourceOld":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    HttpSolrClient solrServer = new HttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr\"));\n    solrServer.request(req);\n    Thread.sleep(100);\n    ModifiableSolrParams queryAll = params(\"q\", \"*\");\n    QueryResponse qres = solrServer.query(queryAll);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(0, results.getNumFound());\n    Thread.sleep(1000);\n    for (int i = 0; i < 10; i++) {\n      qres = solrServer.query(queryAll);\n      results = qres.getResults();\n      if (2 == results.getNumFound()) {\n        solrServer.shutdown();\n        return;\n      }\n      Thread.sleep(500);\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","sourceNew":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    try (HttpSolrClient solrServer = new HttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrServer.request(req);\n      Thread.sleep(100);\n      ModifiableSolrParams queryAll = params(\"q\", \"*\");\n      QueryResponse qres = solrServer.query(queryAll);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(0, results.getNumFound());\n      Thread.sleep(1000);\n      for (int i = 0; i < 10; i++) {\n        qres = solrServer.query(queryAll);\n        results = qres.getResults();\n        if (2 == results.getNumFound()) {\n          return;\n        }\n        Thread.sleep(500);\n      }\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","sourceOld":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    HttpSolrClient solrServer = new HttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"));\n    solrServer.request(req);\n    Thread.sleep(100);\n    ModifiableSolrParams queryAll = params(\"q\", \"*\");\n    QueryResponse qres = solrServer.query(queryAll);\n    SolrDocumentList results = qres.getResults();\n    assertEquals(0, results.getNumFound());\n    Thread.sleep(1000);\n    for (int i = 0; i < 10; i++) {\n      qres = solrServer.query(queryAll);\n      results = qres.getResults();\n      if (2 == results.getNumFound()) {\n        solrServer.shutdown();\n        return;\n      }\n      Thread.sleep(500);\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","sourceNew":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    try (HttpSolrClient solrServer = getHttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrServer.request(req);\n      Thread.sleep(100);\n      ModifiableSolrParams queryAll = params(\"q\", \"*\");\n      QueryResponse qres = solrServer.query(queryAll);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(0, results.getNumFound());\n      Thread.sleep(1000);\n      for (int i = 0; i < 10; i++) {\n        qres = solrServer.query(queryAll);\n        results = qres.getResults();\n        if (2 == results.getNumFound()) {\n          return;\n        }\n        Thread.sleep(500);\n      }\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","sourceOld":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    try (HttpSolrClient solrServer = new HttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrServer.request(req);\n      Thread.sleep(100);\n      ModifiableSolrParams queryAll = params(\"q\", \"*\");\n      QueryResponse qres = solrServer.query(queryAll);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(0, results.getNumFound());\n      Thread.sleep(1000);\n      for (int i = 0; i < 10; i++) {\n        qres = solrServer.query(queryAll);\n        results = qres.getResults();\n        if (2 == results.getNumFound()) {\n          return;\n        }\n        Thread.sleep(500);\n      }\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","sourceNew":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    try (HttpSolrClient solrServer = getHttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrServer.request(req);\n      Thread.sleep(100);\n      ModifiableSolrParams queryAll = params(\"q\", \"*\");\n      QueryResponse qres = solrServer.query(queryAll);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(0, results.getNumFound());\n      Thread.sleep(1000);\n      for (int i = 0; i < 10; i++) {\n        qres = solrServer.query(queryAll);\n        results = qres.getResults();\n        if (2 == results.getNumFound()) {\n          return;\n        }\n        Thread.sleep(500);\n      }\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","sourceOld":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    try (HttpSolrClient solrServer = new HttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrServer.request(req);\n      Thread.sleep(100);\n      ModifiableSolrParams queryAll = params(\"q\", \"*\");\n      QueryResponse qres = solrServer.query(queryAll);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(0, results.getNumFound());\n      Thread.sleep(1000);\n      for (int i = 0; i < 10; i++) {\n        qres = solrServer.query(queryAll);\n        results = qres.getResults();\n        if (2 == results.getNumFound()) {\n          return;\n        }\n        Thread.sleep(500);\n      }\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a144790859eb303122988cd315215ff30f449d2","date":1493938430,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","sourceNew":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    try (HttpSolrClient solrServer = getHttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrServer.request(req);\n      Thread.sleep(100);\n      ModifiableSolrParams queryAll = params(\"q\", \"*\", \"df\", \"desc\");\n      QueryResponse qres = solrServer.query(queryAll);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(0, results.getNumFound());\n      Thread.sleep(1000);\n      for (int i = 0; i < 10; i++) {\n        qres = solrServer.query(queryAll);\n        results = qres.getResults();\n        if (2 == results.getNumFound()) {\n          return;\n        }\n        Thread.sleep(500);\n      }\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","sourceOld":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    try (HttpSolrClient solrServer = getHttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrServer.request(req);\n      Thread.sleep(100);\n      ModifiableSolrParams queryAll = params(\"q\", \"*\");\n      QueryResponse qres = solrServer.query(queryAll);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(0, results.getNumFound());\n      Thread.sleep(1000);\n      for (int i = 0; i < 10; i++) {\n        qres = solrServer.query(queryAll);\n        results = qres.getResults();\n        if (2 == results.getNumFound()) {\n          return;\n        }\n        Thread.sleep(500);\n      }\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","sourceNew":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    try (HttpSolrClient solrServer = getHttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrServer.request(req);\n      Thread.sleep(100);\n      ModifiableSolrParams queryAll = params(\"q\", \"*\", \"df\", \"desc\");\n      QueryResponse qres = solrServer.query(queryAll);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(0, results.getNumFound());\n      Thread.sleep(1000);\n      for (int i = 0; i < 10; i++) {\n        qres = solrServer.query(queryAll);\n        results = qres.getResults();\n        if (2 == results.getNumFound()) {\n          return;\n        }\n        Thread.sleep(500);\n      }\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","sourceOld":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    try (HttpSolrClient solrServer = getHttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrServer.request(req);\n      Thread.sleep(100);\n      ModifiableSolrParams queryAll = params(\"q\", \"*\");\n      QueryResponse qres = solrServer.query(queryAll);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(0, results.getNumFound());\n      Thread.sleep(1000);\n      for (int i = 0; i < 10; i++) {\n        qres = solrServer.query(queryAll);\n        results = qres.getResults();\n        if (2 == results.getNumFound()) {\n          return;\n        }\n        Thread.sleep(500);\n      }\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a","date":1550036130,"type":3,"author":"Bruno P. Kinoshita","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","sourceNew":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    try (HttpSolrClient solrServer = getHttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrServer.request(req);\n      Thread.sleep(100);\n      ModifiableSolrParams queryAll = params(\"q\", \"*\", \"df\", \"desc\");\n      QueryResponse qres = solrServer.query(queryAll);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(0, results.getNumFound());\n      Thread.sleep(1000);\n      for (int i = 0; i < 10; i++) {\n        qres = solrServer.query(queryAll);\n        results = qres.getResults();\n        if (2 == results.getNumFound()) {\n          return;\n        }\n        Thread.sleep(500);\n      }\n    }\n    fail(\"Commit should have occurred but it did not\");\n  }\n\n","sourceOld":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    try (HttpSolrClient solrServer = getHttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrServer.request(req);\n      Thread.sleep(100);\n      ModifiableSolrParams queryAll = params(\"q\", \"*\", \"df\", \"desc\");\n      QueryResponse qres = solrServer.query(queryAll);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(0, results.getNumFound());\n      Thread.sleep(1000);\n      for (int i = 0; i < 10; i++) {\n        qres = solrServer.query(queryAll);\n        results = qres.getResults();\n        if (2 == results.getNumFound()) {\n          return;\n        }\n        Thread.sleep(500);\n      }\n    }\n    fail(\"Commit should have occured but it did not\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource#testCommitWithin().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCommitWithin() throws Exception {\n    DirectXmlRequest req = new DirectXmlRequest(\"/dataimport\", xml);\n    ModifiableSolrParams params = params(\"command\", \"full-import\", \n        \"clean\", \"false\", UpdateParams.COMMIT, \"false\", \n        UpdateParams.COMMIT_WITHIN, \"1000\");\n    req.setParams(params);\n    try (HttpSolrClient solrServer = getHttpSolrClient(buildUrl(jetty.getLocalPort(), \"/solr/collection1\"))) {\n      solrServer.request(req);\n      Thread.sleep(100);\n      ModifiableSolrParams queryAll = params(\"q\", \"*\", \"df\", \"desc\");\n      QueryResponse qres = solrServer.query(queryAll);\n      SolrDocumentList results = qres.getResults();\n      assertEquals(0, results.getNumFound());\n      Thread.sleep(1000);\n      for (int i = 0; i < 10; i++) {\n        qres = solrServer.query(queryAll);\n        results = qres.getResults();\n        if (2 == results.getNumFound()) {\n          return;\n        }\n        Thread.sleep(500);\n      }\n    }\n    fail(\"Commit should have occurred but it did not\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"8f8b5ba78b252ff57082799d1b662ad3d677ecfc":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["50c0b52582a8d1ff8421744979b8b13be127cbe4"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["bafca15d8e408346a67f4282ad1143b88023893b"],"81ec897f0eb789ef9536a8130d1cdb9337ef108a":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"bafca15d8e408346a67f4282ad1143b88023893b":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","1a144790859eb303122988cd315215ff30f449d2"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"50c0b52582a8d1ff8421744979b8b13be127cbe4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["1a144790859eb303122988cd315215ff30f449d2"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["8f8b5ba78b252ff57082799d1b662ad3d677ecfc"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["81ec897f0eb789ef9536a8130d1cdb9337ef108a"],"1a144790859eb303122988cd315215ff30f449d2":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cc3b13b430571c2e169f98fe38e1e7666f88522d","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","50c0b52582a8d1ff8421744979b8b13be127cbe4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"8f8b5ba78b252ff57082799d1b662ad3d677ecfc":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["8f8b5ba78b252ff57082799d1b662ad3d677ecfc"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"81ec897f0eb789ef9536a8130d1cdb9337ef108a":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"bafca15d8e408346a67f4282ad1143b88023893b":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"50c0b52582a8d1ff8421744979b8b13be127cbe4":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["81ec897f0eb789ef9536a8130d1cdb9337ef108a"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["bafca15d8e408346a67f4282ad1143b88023893b"],"1a144790859eb303122988cd315215ff30f449d2":["e9017cf144952056066919f1ebc7897ff9bd71b1","d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50c0b52582a8d1ff8421744979b8b13be127cbe4","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["e9017cf144952056066919f1ebc7897ff9bd71b1","1a144790859eb303122988cd315215ff30f449d2"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}