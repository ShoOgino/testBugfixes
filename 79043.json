{"path":"solr/core/src/test/org/apache/solr/search/TestRandomCollapseQParserPlugin#testEveryIsolatedSortFieldOnSingleGroup().mjava","commits":[{"id":"0325de99180d346d61d36938843a5c8451fe26ae","date":1447368726,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRandomCollapseQParserPlugin#testEveryIsolatedSortFieldOnSingleGroup().mjava","pathOld":"/dev/null","sourceNew":"  public void testEveryIsolatedSortFieldOnSingleGroup() throws Exception {\n    \n    for (String sortField : ALL_SORT_FIELD_NAMES) {\n      for (String dir : Arrays.asList(\" asc\", \" desc\")) {\n        \n        final String sort = sortField + dir + \", id\" + dir; // need id for tie breaker\n        final String q = random().nextBoolean() ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n\n        final SolrParams sortedP = params(\"q\", q, \"rows\", \"1\",\n                                          \"sort\", sort);\n                                        \n        final QueryResponse sortedRsp = SOLR.query(sortedP);\n\n        // random data -- might be no docs matching our query\n        if (0 != sortedRsp.getResults().getNumFound()) {\n          final SolrDocument firstDoc = sortedRsp.getResults().get(0);\n\n          // check forced array resizing starting from 1\n          for (String p : Arrays.asList(\"{!collapse field=\", \"{!collapse size='1' field=\")) {\n            for (String fq : Arrays.asList\n                   (p + \"same_for_all_docs sort='\"+sort+\"'}\",\n                    // nullPolicy=expand shouldn't change anything since every doc has field\n                    p + \"same_for_all_docs sort='\"+sort+\"' nullPolicy=expand}\",\n                    // a field in no docs with nullPolicy=collapse should have same effect as\n                    // collapsing on a field in every doc\n                    p + \"not_in_any_docs sort='\"+sort+\"' nullPolicy=collapse}\")) {\n              final SolrParams collapseP = params(\"q\", q, \"rows\", \"1\", \"fq\", fq);\n              \n              // since every doc is in the same group, collapse query should return exactly one doc\n              final QueryResponse collapseRsp = SOLR.query(collapseP);\n              assertEquals(\"collapse should have produced exactly one doc: \" + collapseP,\n                           1, collapseRsp.getResults().getNumFound());\n              final SolrDocument groupHead = collapseRsp.getResults().get(0);\n              \n              // the group head from the collapse query should match the first doc of a simple sort\n              assertEquals(sortedP + \" => \" + firstDoc + \" :VS: \" + collapseP + \" => \" + groupHead,\n                           firstDoc.getFieldValue(\"id\"), groupHead.getFieldValue(\"id\"));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0325de99180d346d61d36938843a5c8451fe26ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0325de99180d346d61d36938843a5c8451fe26ae"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0325de99180d346d61d36938843a5c8451fe26ae"],"0325de99180d346d61d36938843a5c8451fe26ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}