{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Hunspell2StemFilter#incrementToken().mjava","commits":[{"id":"c214bc712d04c78c4d434119d560d0a4dd2fce4f","date":1393216863,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Hunspell2StemFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (buffer != null && !buffer.isEmpty()) {\n      Stem nextStem = buffer.remove(0);\n      restoreState(savedState);\n      posIncAtt.setPositionIncrement(0);\n      termAtt.copyBuffer(nextStem.getStem(), 0, nextStem.getStemLength());\n      termAtt.setLength(nextStem.getStemLength());\n      return true;\n    }\n    \n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (keywordAtt.isKeyword()) {\n      return true;\n    }\n    \n    buffer = dedup ? stemmer.uniqueStems(termAtt.buffer(), termAtt.length()) : stemmer.stem(termAtt.buffer(), termAtt.length());\n\n    if (buffer.isEmpty()) { // we do not know this word, return it unchanged\n      return true;\n    }     \n\n    Stem stem = buffer.remove(0);\n    termAtt.copyBuffer(stem.getStem(), 0, stem.getStemLength());\n    termAtt.setLength(stem.getStemLength());\n\n    if (!buffer.isEmpty()) {\n      savedState = captureState();\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"378fdc1eb541e8a672a95d6c660c81d606145d1d","date":1393358825,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Hunspell2StemFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Hunspell2StemFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (buffer != null && !buffer.isEmpty()) {\n      CharsRef nextStem = buffer.remove(0);\n      restoreState(savedState);\n      posIncAtt.setPositionIncrement(0);\n      termAtt.setEmpty().append(nextStem);\n      return true;\n    }\n    \n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (keywordAtt.isKeyword()) {\n      return true;\n    }\n    \n    buffer = dedup ? stemmer.uniqueStems(termAtt.buffer(), termAtt.length()) : stemmer.stem(termAtt.buffer(), termAtt.length());\n\n    if (buffer.isEmpty()) { // we do not know this word, return it unchanged\n      return true;\n    }     \n\n    CharsRef stem = buffer.remove(0);\n    termAtt.setEmpty().append(stem);\n\n    if (!buffer.isEmpty()) {\n      savedState = captureState();\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (buffer != null && !buffer.isEmpty()) {\n      Stem nextStem = buffer.remove(0);\n      restoreState(savedState);\n      posIncAtt.setPositionIncrement(0);\n      termAtt.copyBuffer(nextStem.getStem(), 0, nextStem.getStemLength());\n      termAtt.setLength(nextStem.getStemLength());\n      return true;\n    }\n    \n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (keywordAtt.isKeyword()) {\n      return true;\n    }\n    \n    buffer = dedup ? stemmer.uniqueStems(termAtt.buffer(), termAtt.length()) : stemmer.stem(termAtt.buffer(), termAtt.length());\n\n    if (buffer.isEmpty()) { // we do not know this word, return it unchanged\n      return true;\n    }     \n\n    Stem stem = buffer.remove(0);\n    termAtt.copyBuffer(stem.getStem(), 0, stem.getStemLength());\n    termAtt.setLength(stem.getStemLength());\n\n    if (!buffer.isEmpty()) {\n      savedState = captureState();\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Hunspell2StemFilter#incrementToken().mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (buffer != null && !buffer.isEmpty()) {\n      CharsRef nextStem = buffer.remove(0);\n      restoreState(savedState);\n      posIncAtt.setPositionIncrement(0);\n      termAtt.setEmpty().append(nextStem);\n      return true;\n    }\n    \n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (keywordAtt.isKeyword()) {\n      return true;\n    }\n    \n    buffer = dedup ? stemmer.uniqueStems(termAtt.buffer(), termAtt.length()) : stemmer.stem(termAtt.buffer(), termAtt.length());\n\n    if (buffer.isEmpty()) { // we do not know this word, return it unchanged\n      return true;\n    }     \n\n    CharsRef stem = buffer.remove(0);\n    termAtt.setEmpty().append(stem);\n\n    if (!buffer.isEmpty()) {\n      savedState = captureState();\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["378fdc1eb541e8a672a95d6c660c81d606145d1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"378fdc1eb541e8a672a95d6c660c81d606145d1d":["c214bc712d04c78c4d434119d560d0a4dd2fce4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c214bc712d04c78c4d434119d560d0a4dd2fce4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["378fdc1eb541e8a672a95d6c660c81d606145d1d"],"378fdc1eb541e8a672a95d6c660c81d606145d1d":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}