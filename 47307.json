{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testEmptySet().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testEmptySet().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testEmptySet().mjava","sourceNew":"  /**\n   * Smoketests the static empty set\n   */\n  public void testEmptySet() {\n    assertEquals(0, CharArraySet.EMPTY_SET.size());\n    \n    assertTrue(CharArraySet.EMPTY_SET.isEmpty());\n    for (String stopword : TEST_STOP_WORDS) {\n      assertFalse(CharArraySet.EMPTY_SET.contains(stopword));\n    }\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains((Object) \"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray()));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray(),0,3));\n  }\n\n","sourceOld":"  /**\n   * Smoketests the static empty set\n   */\n  public void testEmptySet() {\n    assertEquals(0, CharArraySet.EMPTY_SET.size());\n    \n    assertTrue(CharArraySet.EMPTY_SET.isEmpty());\n    for (String stopword : TEST_STOP_WORDS) {\n      assertFalse(CharArraySet.EMPTY_SET.contains(stopword));\n    }\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains((Object) \"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray()));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray(),0,3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testEmptySet().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testEmptySet().mjava","sourceNew":"  /**\n   * Smoketests the static empty set\n   */\n  public void testEmptySet() {\n    assertEquals(0, CharArraySet.EMPTY_SET.size());\n    \n    assertTrue(CharArraySet.EMPTY_SET.isEmpty());\n    for (String stopword : TEST_STOP_WORDS) {\n      assertFalse(CharArraySet.EMPTY_SET.contains(stopword));\n    }\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains((Object) \"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray()));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray(),0,3));\n  }\n\n","sourceOld":"  /**\n   * Smoketests the static empty set\n   */\n  public void testEmptySet() {\n    assertEquals(0, CharArraySet.EMPTY_SET.size());\n    \n    assertTrue(CharArraySet.EMPTY_SET.isEmpty());\n    for (String stopword : TEST_STOP_WORDS) {\n      assertFalse(CharArraySet.EMPTY_SET.contains(stopword));\n    }\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains((Object) \"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray()));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray(),0,3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testEmptySet().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testEmptySet().mjava","sourceNew":"  /**\n   * Smoketests the static empty set\n   */\n  public void testEmptySet() {\n    assertEquals(0, CharArraySet.EMPTY_SET.size());\n    \n    assertTrue(CharArraySet.EMPTY_SET.isEmpty());\n    for (String stopword : TEST_STOP_WORDS) {\n      assertFalse(CharArraySet.EMPTY_SET.contains(stopword));\n    }\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains((Object) \"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray()));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray(),0,3));\n  }\n\n","sourceOld":"  /**\n   * Smoketests the static empty set\n   */\n  public void testEmptySet() {\n    assertEquals(0, CharArraySet.EMPTY_SET.size());\n    \n    assertTrue(CharArraySet.EMPTY_SET.isEmpty());\n    for (String stopword : TEST_STOP_WORDS) {\n      assertFalse(CharArraySet.EMPTY_SET.contains(stopword));\n    }\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains((Object) \"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray()));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray(),0,3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testEmptySet().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testEmptySet().mjava","sourceNew":"  /**\n   * Smoketests the static empty set\n   */\n  public void testEmptySet() {\n    assertEquals(0, CharArraySet.EMPTY_SET.size());\n    \n    assertTrue(CharArraySet.EMPTY_SET.isEmpty());\n    for (String stopword : TEST_STOP_WORDS) {\n      assertFalse(CharArraySet.EMPTY_SET.contains(stopword));\n    }\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains((Object) \"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray()));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray(),0,3));\n  }\n\n","sourceOld":"  /**\n   * Smoketests the static empty set\n   */\n  public void testEmptySet() {\n    assertEquals(0, CharArraySet.EMPTY_SET.size());\n    \n    assertTrue(CharArraySet.EMPTY_SET.isEmpty());\n    for (String stopword : TEST_STOP_WORDS) {\n      assertFalse(CharArraySet.EMPTY_SET.contains(stopword));\n    }\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains((Object) \"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray()));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray(),0,3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testEmptySet().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testEmptySet().mjava","sourceNew":"  /**\n   * Smoketests the static empty set\n   */\n  public void testEmptySet() {\n    assertEquals(0, CharArraySet.EMPTY_SET.size());\n    \n    assertTrue(CharArraySet.EMPTY_SET.isEmpty());\n    for (String stopword : TEST_STOP_WORDS) {\n      assertFalse(CharArraySet.EMPTY_SET.contains(stopword));\n    }\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains((Object) \"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray()));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray(),0,3));\n  }\n\n","sourceOld":"  /**\n   * Smoketests the static empty set\n   */\n  public void testEmptySet() {\n    assertEquals(0, CharArraySet.EMPTY_SET.size());\n    \n    assertTrue(CharArraySet.EMPTY_SET.isEmpty());\n    for (String stopword : TEST_STOP_WORDS) {\n      assertFalse(CharArraySet.EMPTY_SET.contains(stopword));\n    }\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains((Object) \"foo\"));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray()));\n    assertFalse(CharArraySet.EMPTY_SET.contains(\"foo\".toCharArray(),0,3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["19275ba31e621f6da1b83bf13af75233876fd3d4","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}