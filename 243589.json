{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","sourceNew":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = BasicOperations.intersection(termsAutomaton, automaton);\n      TreeSet<BytesRef> found = new TreeSet<BytesRef>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = DaciukMihovAutomatonBuilder.build(found);     \n      assertTrue(BasicOperations.sameLanguage(expected, actual));\n    }\n  }\n\n","sourceOld":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = BasicOperations.intersection(termsAutomaton, automaton);\n      TreeSet<BytesRef> found = new TreeSet<BytesRef>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = DaciukMihovAutomatonBuilder.build(found);     \n      assertTrue(BasicOperations.sameLanguage(expected, actual));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","sourceNew":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = BasicOperations.intersection(termsAutomaton, automaton);\n      TreeSet<BytesRef> found = new TreeSet<BytesRef>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = DaciukMihovAutomatonBuilder.build(found);     \n      assertTrue(BasicOperations.sameLanguage(expected, actual));\n    }\n  }\n\n","sourceOld":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random);\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = BasicOperations.intersection(termsAutomaton, automaton);\n      TreeSet<BytesRef> found = new TreeSet<BytesRef>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = DaciukMihovAutomatonBuilder.build(found);     \n      assertTrue(BasicOperations.sameLanguage(expected, actual));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d94feb02e9c604630d8a6758abcb40cbfa91f5d","date":1340964157,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","sourceNew":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = BasicOperations.intersection(termsAutomaton, automaton);\n      TreeSet<BytesRef> found = new TreeSet<BytesRef>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = BasicAutomata.makeStringUnion(found);     \n      assertTrue(BasicOperations.sameLanguage(expected, actual));\n    }\n  }\n\n","sourceOld":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = BasicOperations.intersection(termsAutomaton, automaton);\n      TreeSet<BytesRef> found = new TreeSet<BytesRef>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = DaciukMihovAutomatonBuilder.build(found);     \n      assertTrue(BasicOperations.sameLanguage(expected, actual));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","sourceNew":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = BasicOperations.intersection(termsAutomaton, automaton);\n      TreeSet<BytesRef> found = new TreeSet<BytesRef>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = BasicAutomata.makeStringUnion(found);     \n      assertTrue(BasicOperations.sameLanguage(expected, actual));\n    }\n  }\n\n","sourceOld":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = BasicOperations.intersection(termsAutomaton, automaton);\n      TreeSet<BytesRef> found = new TreeSet<BytesRef>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = DaciukMihovAutomatonBuilder.build(found);     \n      assertTrue(BasicOperations.sameLanguage(expected, actual));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","sourceNew":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = BasicOperations.intersection(termsAutomaton, automaton);\n      TreeSet<BytesRef> found = new TreeSet<>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = BasicAutomata.makeStringUnion(found);     \n      assertTrue(BasicOperations.sameLanguage(expected, actual));\n    }\n  }\n\n","sourceOld":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = BasicOperations.intersection(termsAutomaton, automaton);\n      TreeSet<BytesRef> found = new TreeSet<BytesRef>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = BasicAutomata.makeStringUnion(found);     \n      assertTrue(BasicOperations.sameLanguage(expected, actual));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","sourceNew":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      LightAutomaton automaton = new RegExp(reg, RegExp.NONE).toLightAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      LightAutomaton expected = BasicOperations.determinize(BasicOperations.intersectionLight(termsAutomaton, automaton));\n      TreeSet<BytesRef> found = new TreeSet<>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      LightAutomaton actual = BasicOperations.determinize(BasicAutomata.makeStringUnionLight(found));\n      assertTrue(BasicOperations.sameLanguage(expected, actual));\n    }\n  }\n\n","sourceOld":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = BasicOperations.intersection(termsAutomaton, automaton);\n      TreeSet<BytesRef> found = new TreeSet<>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = BasicAutomata.makeStringUnion(found);     \n      assertTrue(BasicOperations.sameLanguage(expected, actual));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","sourceNew":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, Operations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = Operations.determinize(Operations.intersection(termsAutomaton, automaton));\n      TreeSet<BytesRef> found = new TreeSet<>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = Operations.determinize(Automata.makeStringUnion(found));\n      assertTrue(Operations.sameLanguage(expected, actual));\n    }\n  }\n\n","sourceOld":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      LightAutomaton automaton = new RegExp(reg, RegExp.NONE).toLightAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      LightAutomaton expected = BasicOperations.determinize(BasicOperations.intersectionLight(termsAutomaton, automaton));\n      TreeSet<BytesRef> found = new TreeSet<>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      LightAutomaton actual = BasicOperations.determinize(BasicAutomata.makeStringUnionLight(found));\n      assertTrue(BasicOperations.sameLanguage(expected, actual));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","sourceNew":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, Operations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = Operations.determinize(Operations.intersection(termsAutomaton, automaton));\n      TreeSet<BytesRef> found = new TreeSet<>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = Operations.determinize(Automata.makeStringUnion(found));\n      assertTrue(Operations.sameLanguage(expected, actual));\n    }\n  }\n\n","sourceOld":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = BasicOperations.intersection(termsAutomaton, automaton);\n      TreeSet<BytesRef> found = new TreeSet<>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = BasicAutomata.makeStringUnion(found);     \n      assertTrue(BasicOperations.sameLanguage(expected, actual));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","sourceNew":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, Operations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = Operations.determinize(Operations.intersection(termsAutomaton, automaton),\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      TreeSet<BytesRef> found = new TreeSet<>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = Operations.determinize(Automata.makeStringUnion(found),\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      assertTrue(Operations.sameLanguage(expected, actual));\n    }\n  }\n\n","sourceOld":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, Operations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = Operations.determinize(Operations.intersection(termsAutomaton, automaton));\n      TreeSet<BytesRef> found = new TreeSet<>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = Operations.determinize(Automata.makeStringUnion(found));\n      assertTrue(Operations.sameLanguage(expected, actual));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum2#testIntersect().mjava","sourceNew":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, Operations.isFinite(automaton), false);\n      TermsEnum te = MultiTerms.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = Operations.determinize(Operations.intersection(termsAutomaton, automaton),\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      TreeSet<BytesRef> found = new TreeSet<>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = Operations.determinize(Automata.makeStringUnion(found),\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      assertTrue(Operations.sameLanguage(expected, actual));\n    }\n  }\n\n","sourceOld":"  /** tests intersect: TODO start at a random term! */\n  public void testIntersect() throws Exception {\n    for (int i = 0; i < numIterations; i++) {\n      String reg = AutomatonTestUtil.randomRegexp(random());\n      Automaton automaton = new RegExp(reg, RegExp.NONE).toAutomaton();\n      CompiledAutomaton ca = new CompiledAutomaton(automaton, Operations.isFinite(automaton), false);\n      TermsEnum te = MultiFields.getTerms(reader, \"field\").intersect(ca, null);\n      Automaton expected = Operations.determinize(Operations.intersection(termsAutomaton, automaton),\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      TreeSet<BytesRef> found = new TreeSet<>();\n      while (te.next() != null) {\n        found.add(BytesRef.deepCopyOf(te.term()));\n      }\n      \n      Automaton actual = Operations.determinize(Automata.makeStringUnion(found),\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      assertTrue(Operations.sameLanguage(expected, actual));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8d94feb02e9c604630d8a6758abcb40cbfa91f5d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8d94feb02e9c604630d8a6758abcb40cbfa91f5d"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}