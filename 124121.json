{"path":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#testModifyResolution().mjava","commits":[{"id":"ea73f58403a6c26bcb09b4933832348d80deb45b","date":1202849732,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#testModifyResolution().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test timeout behavior when resolution is modified. \n   */\n  public void testModifyResolution() {\n    try {\n      // increase and test\n      long resolution = 20 * TimeLimitedCollector.DEFAULT_RESOLUTION; //400\n      TimeLimitedCollector.setResolution(resolution);\n      assertEquals(resolution, TimeLimitedCollector.getResolution());\n      doTestTimeout(false);\n      // decrease much and test\n      resolution = 5;\n      TimeLimitedCollector.setResolution(resolution);\n      assertEquals(resolution, TimeLimitedCollector.getResolution());\n      doTestTimeout(false);\n      // return to default and test\n      resolution = TimeLimitedCollector.DEFAULT_RESOLUTION;\n      TimeLimitedCollector.setResolution(resolution);\n      assertEquals(resolution, TimeLimitedCollector.getResolution());\n      doTestTimeout(false);\n    } finally {\n      TimeLimitedCollector.setResolution(TimeLimitedCollector.DEFAULT_RESOLUTION);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e7f18e513f9984ff8d5c94dbdf877c5e21922c92"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7f18e513f9984ff8d5c94dbdf877c5e21922c92","date":1205874488,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#testModifyResolution().mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#testModifyResolution().mjava","sourceNew":"  /**\n   * Test timeout behavior when resolution is modified. \n   */\n  public void testModifyResolution() {\n    try {\n      // increase and test\n      long resolution = 20 * TimeLimitedCollector.DEFAULT_RESOLUTION; //400\n      TimeLimitedCollector.setResolution(resolution);\n      assertEquals(resolution, TimeLimitedCollector.getResolution());\n      doTestTimeout(false,true);\n      // decrease much and test\n      resolution = 5;\n      TimeLimitedCollector.setResolution(resolution);\n      assertEquals(resolution, TimeLimitedCollector.getResolution());\n      doTestTimeout(false,true);\n      // return to default and test\n      resolution = TimeLimitedCollector.DEFAULT_RESOLUTION;\n      TimeLimitedCollector.setResolution(resolution);\n      assertEquals(resolution, TimeLimitedCollector.getResolution());\n      doTestTimeout(false,true);\n    } finally {\n      TimeLimitedCollector.setResolution(TimeLimitedCollector.DEFAULT_RESOLUTION);\n    }\n  }\n\n","sourceOld":"  /**\n   * Test timeout behavior when resolution is modified. \n   */\n  public void testModifyResolution() {\n    try {\n      // increase and test\n      long resolution = 20 * TimeLimitedCollector.DEFAULT_RESOLUTION; //400\n      TimeLimitedCollector.setResolution(resolution);\n      assertEquals(resolution, TimeLimitedCollector.getResolution());\n      doTestTimeout(false);\n      // decrease much and test\n      resolution = 5;\n      TimeLimitedCollector.setResolution(resolution);\n      assertEquals(resolution, TimeLimitedCollector.getResolution());\n      doTestTimeout(false);\n      // return to default and test\n      resolution = TimeLimitedCollector.DEFAULT_RESOLUTION;\n      TimeLimitedCollector.setResolution(resolution);\n      assertEquals(resolution, TimeLimitedCollector.getResolution());\n      doTestTimeout(false);\n    } finally {\n      TimeLimitedCollector.setResolution(TimeLimitedCollector.DEFAULT_RESOLUTION);\n    }\n  }\n\n","bugFix":["ea73f58403a6c26bcb09b4933832348d80deb45b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#testModifyResolution().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test timeout behavior when resolution is modified. \n   */\n  public void testModifyResolution() {\n    try {\n      // increase and test\n      long resolution = 20 * TimeLimitedCollector.DEFAULT_RESOLUTION; //400\n      TimeLimitedCollector.setResolution(resolution);\n      assertEquals(resolution, TimeLimitedCollector.getResolution());\n      doTestTimeout(false,true);\n      // decrease much and test\n      resolution = 5;\n      TimeLimitedCollector.setResolution(resolution);\n      assertEquals(resolution, TimeLimitedCollector.getResolution());\n      doTestTimeout(false,true);\n      // return to default and test\n      resolution = TimeLimitedCollector.DEFAULT_RESOLUTION;\n      TimeLimitedCollector.setResolution(resolution);\n      assertEquals(resolution, TimeLimitedCollector.getResolution());\n      doTestTimeout(false,true);\n    } finally {\n      TimeLimitedCollector.setResolution(TimeLimitedCollector.DEFAULT_RESOLUTION);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#testModifyResolution().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test timeout behavior when resolution is modified. \n   */\n  public void testModifyResolution() {\n    try {\n      // increase and test\n      long resolution = 20 * TimeLimitedCollector.DEFAULT_RESOLUTION; //400\n      TimeLimitedCollector.setResolution(resolution);\n      assertEquals(resolution, TimeLimitedCollector.getResolution());\n      doTestTimeout(false,true);\n      // decrease much and test\n      resolution = 5;\n      TimeLimitedCollector.setResolution(resolution);\n      assertEquals(resolution, TimeLimitedCollector.getResolution());\n      doTestTimeout(false,true);\n      // return to default and test\n      resolution = TimeLimitedCollector.DEFAULT_RESOLUTION;\n      TimeLimitedCollector.setResolution(resolution);\n      assertEquals(resolution, TimeLimitedCollector.getResolution());\n      doTestTimeout(false,true);\n    } finally {\n      TimeLimitedCollector.setResolution(TimeLimitedCollector.DEFAULT_RESOLUTION);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7f18e513f9984ff8d5c94dbdf877c5e21922c92":["ea73f58403a6c26bcb09b4933832348d80deb45b"],"ea73f58403a6c26bcb09b4933832348d80deb45b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["e7f18e513f9984ff8d5c94dbdf877c5e21922c92"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["e7f18e513f9984ff8d5c94dbdf877c5e21922c92","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"e7f18e513f9984ff8d5c94dbdf877c5e21922c92":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"ea73f58403a6c26bcb09b4933832348d80deb45b":["e7f18e513f9984ff8d5c94dbdf877c5e21922c92"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea73f58403a6c26bcb09b4933832348d80deb45b"],"0a046c0c310bc77931fc8441bd920053b607dd14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}