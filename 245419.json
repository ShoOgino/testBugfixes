{"path":"contrib/misc/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","commits":[{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","pathOld":"contrib/miscellaneous/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","sourceNew":"  private void checkBadQuery(String qString) {\n    QueryParser qp = new ComplexPhraseQueryParser(defaultFieldName, analyzer);\n    Throwable expected = null;\n    try {\n      qp.parse(qString);\n    } catch (Throwable e) {\n      expected = e;\n    }\n    assertNotNull(\"Expected parse error in \" + qString, expected);\n\n  }\n\n","sourceOld":"  private void checkBadQuery(String qString) {\n    QueryParser qp = new ComplexPhraseQueryParser(defaultFieldName, analyzer);\n    Throwable expected = null;\n    try {\n      qp.parse(qString);\n    } catch (Throwable e) {\n      expected = e;\n    }\n    assertNotNull(\"Expected parse error in \" + qString, expected);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","sourceNew":"  private void checkBadQuery(String qString) {\n    QueryParser qp = new ComplexPhraseQueryParser(Version.LUCENE_CURRENT, defaultFieldName, analyzer);\n    Throwable expected = null;\n    try {\n      qp.parse(qString);\n    } catch (Throwable e) {\n      expected = e;\n    }\n    assertNotNull(\"Expected parse error in \" + qString, expected);\n\n  }\n\n","sourceOld":"  private void checkBadQuery(String qString) {\n    QueryParser qp = new ComplexPhraseQueryParser(defaultFieldName, analyzer);\n    Throwable expected = null;\n    try {\n      qp.parse(qString);\n    } catch (Throwable e) {\n      expected = e;\n    }\n    assertNotNull(\"Expected parse error in \" + qString, expected);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/misc/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","sourceNew":"  private void checkBadQuery(String qString) {\n    QueryParser qp = new ComplexPhraseQueryParser(TEST_VERSION_CURRENT, defaultFieldName, analyzer);\n    Throwable expected = null;\n    try {\n      qp.parse(qString);\n    } catch (Throwable e) {\n      expected = e;\n    }\n    assertNotNull(\"Expected parse error in \" + qString, expected);\n\n  }\n\n","sourceOld":"  private void checkBadQuery(String qString) {\n    QueryParser qp = new ComplexPhraseQueryParser(Version.LUCENE_CURRENT, defaultFieldName, analyzer);\n    Throwable expected = null;\n    try {\n      qp.parse(qString);\n    } catch (Throwable e) {\n      expected = e;\n    }\n    assertNotNull(\"Expected parse error in \" + qString, expected);\n\n  }\n\n","bugFix":null,"bugIntro":["e2eb9920ac302f8d2a4cd14e42eba6935f84fe0d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/queryParser/complexPhrase/TestComplexPhraseQuery#checkBadQuery(String).mjava","sourceNew":"  private void checkBadQuery(String qString) {\n    QueryParser qp = new ComplexPhraseQueryParser(TEST_VERSION_CURRENT, defaultFieldName, analyzer);\n    Throwable expected = null;\n    try {\n      qp.parse(qString);\n    } catch (Throwable e) {\n      expected = e;\n    }\n    assertNotNull(\"Expected parse error in \" + qString, expected);\n\n  }\n\n","sourceOld":"  private void checkBadQuery(String qString) {\n    QueryParser qp = new ComplexPhraseQueryParser(TEST_VERSION_CURRENT, defaultFieldName, analyzer);\n    Throwable expected = null;\n    try {\n      qp.parse(qString);\n    } catch (Throwable e) {\n      expected = e;\n    }\n    assertNotNull(\"Expected parse error in \" + qString, expected);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["ba1116b3450a9c1642c89445d131b37344055245"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"ba1116b3450a9c1642c89445d131b37344055245":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["ba1116b3450a9c1642c89445d131b37344055245"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba1116b3450a9c1642c89445d131b37344055245":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}