{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String).mjava","commits":[{"id":"3a80994db3380cd78c6f65b84515e2e931b6b3da","date":1329530403,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(SolrCore,String).mjava","sourceNew":"  public void publish(CoreDescriptor cd, String state) {\n    Map<String,String> finalProps = new HashMap<String,String>();\n    finalProps.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    finalProps.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    finalProps.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    finalProps.put(ZkStateReader.STATE_PROP, state);\n    publishState(cd, getNodeName() + \"_\" + cd.getName(),\n        cd.getName(), finalProps);\n  }\n\n","sourceOld":"  public void publish(SolrCore core, String state) {\n    CoreDescriptor cd = core.getCoreDescriptor();\n    Map<String,String> finalProps = new HashMap<String,String>();\n    finalProps.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    finalProps.put(ZkStateReader.CORE_NAME_PROP, core.getName());\n    finalProps.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    finalProps.put(ZkStateReader.STATE_PROP, state);\n    publishState(cd, getNodeName() + \"_\" + core.getName(),\n        core.getName(), finalProps);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   * @param cd\n   * @param state\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void publish(final CoreDescriptor cd, final String state) throws KeeperException, InterruptedException {\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(), ZkStateReader.STATE_PROP, state,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null);\n    overseerStatusQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  public void publish(CoreDescriptor cd, String state) {\n    Map<String,String> finalProps = new HashMap<String,String>();\n    finalProps.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    finalProps.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    finalProps.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    finalProps.put(ZkStateReader.STATE_PROP, state);\n    publishState(cd, getNodeName() + \"_\" + cd.getName(),\n        cd.getName(), finalProps);\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   * @param cd\n   * @param state\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void publish(final CoreDescriptor cd, final String state) throws KeeperException, InterruptedException {\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(), ZkStateReader.STATE_PROP, state,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   * @param cd\n   * @param state\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void publish(final CoreDescriptor cd, final String state) throws KeeperException, InterruptedException {\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(), ZkStateReader.STATE_PROP, state,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null);\n    overseerStatusQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   * @param cd\n   * @param state\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void publish(final CoreDescriptor cd, final String state) throws KeeperException, InterruptedException {\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(), ZkStateReader.STATE_PROP, state,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   * @param cd\n   * @param state\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void publish(final CoreDescriptor cd, final String state) throws KeeperException, InterruptedException {\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(), ZkStateReader.STATE_PROP, state,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null);\n    overseerStatusQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String).mjava","sourceNew":"  public void publish(final CoreDescriptor cd, final String state) throws KeeperException, InterruptedException {\n    publish(cd, state, true);\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   * @param cd\n   * @param state\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void publish(final CoreDescriptor cd, final String state) throws KeeperException, InterruptedException {\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(), ZkStateReader.STATE_PROP, state,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null);\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":["33d0ed80b7b47e34ad3ff033a77544563aba3085","a5093a9e893633cc091cf2f729d7863671c2b715"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String).mjava","sourceNew":null,"sourceOld":"  public void publish(final CoreDescriptor cd, final String state) throws KeeperException, InterruptedException {\n    publish(cd, state, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["a6378064655e76cd7b908b1cab4ce425b384b508"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["a5093a9e893633cc091cf2f729d7863671c2b715"],"a6378064655e76cd7b908b1cab4ce425b384b508":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a5093a9e893633cc091cf2f729d7863671c2b715","33d0ed80b7b47e34ad3ff033a77544563aba3085"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a219f1dcad1700e84807666bdbd2b573e8de7021"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["a6378064655e76cd7b908b1cab4ce425b384b508","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a6378064655e76cd7b908b1cab4ce425b384b508":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a80994db3380cd78c6f65b84515e2e931b6b3da"],"a5093a9e893633cc091cf2f729d7863671c2b715":["33d0ed80b7b47e34ad3ff033a77544563aba3085","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"3a80994db3380cd78c6f65b84515e2e931b6b3da":["a5093a9e893633cc091cf2f729d7863671c2b715"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}