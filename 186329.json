{"path":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#assertRandomEquality(int,int,long).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#assertRandomEquality(int,int,long).mjava","pathOld":"/dev/null","sourceNew":"  private void assertRandomEquality(int valueCount, int bitsPerValue, long randomSeed) {\n    List<PackedInts.Mutable> packedInts = createPackedInts(valueCount, bitsPerValue);\n    for (PackedInts.Mutable packedInt: packedInts) {\n      try {\n        fill(packedInt, (long)(Math.pow(2, bitsPerValue)-1), randomSeed);\n      } catch (Exception e) {\n        e.printStackTrace(System.err);\n        fail(String.format(\n                \"Exception while filling %s: valueCount=%d, bitsPerValue=%s\",\n                packedInt.getClass().getSimpleName(),\n                valueCount, bitsPerValue));\n      }\n    }\n    assertListEquality(packedInts);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#assertRandomEquality(int,int,long).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#assertRandomEquality(int,int,long).mjava","sourceNew":"  private void assertRandomEquality(int valueCount, int bitsPerValue, long randomSeed) {\n    List<PackedInts.Mutable> packedInts = createPackedInts(valueCount, bitsPerValue);\n    for (PackedInts.Mutable packedInt: packedInts) {\n      try {\n        fill(packedInt, (long)(Math.pow(2, bitsPerValue)-1), randomSeed);\n      } catch (Exception e) {\n        e.printStackTrace(System.err);\n        fail(String.format(\n                \"Exception while filling %s: valueCount=%d, bitsPerValue=%s\",\n                packedInt.getClass().getSimpleName(),\n                valueCount, bitsPerValue));\n      }\n    }\n    assertListEquality(packedInts);\n  }\n\n","sourceOld":"  private void assertRandomEquality(int valueCount, int bitsPerValue, long randomSeed) {\n    List<PackedInts.Mutable> packedInts = createPackedInts(valueCount, bitsPerValue);\n    for (PackedInts.Mutable packedInt: packedInts) {\n      try {\n        fill(packedInt, (long)(Math.pow(2, bitsPerValue)-1), randomSeed);\n      } catch (Exception e) {\n        e.printStackTrace(System.err);\n        fail(String.format(\n                \"Exception while filling %s: valueCount=%d, bitsPerValue=%s\",\n                packedInt.getClass().getSimpleName(),\n                valueCount, bitsPerValue));\n      }\n    }\n    assertListEquality(packedInts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}