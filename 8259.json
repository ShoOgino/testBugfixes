{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#skipBlock(IndexInput).mjava","commits":[{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#skipBlock(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Skip the next block of data.\n   *\n   * @param in      the input where to read data\n   * @throws IOException\n   */\n  static void skipBlock(IndexInput in) throws IOException {\n    // see readBlock for comments\n    final int numBits = in.readByte();\n    final int encodedSize = in.readByte();\n    assert numBits > 0 && numBits <= 32 : numBits;\n    assert encodedSize > 0 && encodedSize <= BLOCK_SIZE / 2 : encodedSize;\n    in.seek(in.getFilePointer() + (encodedSize << 3));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d569dbc58dcfe4b83257a5b1d867b66532beef1","date":1344416896,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#skipBlock(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#skipBlock(IndexInput).mjava","sourceNew":"  /**\n   * Skip the next block of data.\n   *\n   * @param in      the input where to read data\n   * @throws IOException\n   */\n  static void skipBlock(IndexInput in) throws IOException {\n    final int numBits = in.readVInt();\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final int encodedSize = encodedSize(numBits);\n    in.seek(in.getFilePointer() + encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Skip the next block of data.\n   *\n   * @param in      the input where to read data\n   * @throws IOException\n   */\n  static void skipBlock(IndexInput in) throws IOException {\n    // see readBlock for comments\n    final int numBits = in.readByte();\n    final int encodedSize = in.readByte();\n    assert numBits > 0 && numBits <= 32 : numBits;\n    assert encodedSize > 0 && encodedSize <= BLOCK_SIZE / 2 : encodedSize;\n    in.seek(in.getFilePointer() + (encodedSize << 3));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf88b0fdab72e7a3389fdd9a68ae252142c41511","date":1344435322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#skipBlock(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#skipBlock(IndexInput).mjava","sourceNew":"  /**\n   * Skip the next block of data.\n   *\n   * @param in      the input where to read data\n   * @throws IOException\n   */\n  void skipBlock(IndexInput in) throws IOException {\n    final int numBits = in.readVInt();\n    if (numBits == ALL_VALUES_EQUAL) {\n      in.seek(in.getFilePointer() + 4);\n      return;\n    }\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final int encodedSize = encodedSize(numBits);\n    in.seek(in.getFilePointer() + encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Skip the next block of data.\n   *\n   * @param in      the input where to read data\n   * @throws IOException\n   */\n  static void skipBlock(IndexInput in) throws IOException {\n    final int numBits = in.readVInt();\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final int encodedSize = encodedSize(numBits);\n    in.seek(in.getFilePointer() + encodedSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee0d2b90b9b7c96860f9c096edae6ed8fad95388","date":1344516744,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#skipBlock(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#skipBlock(IndexInput).mjava","sourceNew":"  /**\n   * Skip the next block of data.\n   *\n   * @param in      the input where to read data\n   * @throws IOException\n   */\n  void skipBlock(IndexInput in) throws IOException {\n    final int numBits = in.readVInt();\n    if (numBits == ALL_VALUES_EQUAL) {\n      in.seek(in.getFilePointer() + 4);\n      return;\n    }\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final int encodedSize = encodedSizes[numBits];\n    in.seek(in.getFilePointer() + encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Skip the next block of data.\n   *\n   * @param in      the input where to read data\n   * @throws IOException\n   */\n  void skipBlock(IndexInput in) throws IOException {\n    final int numBits = in.readVInt();\n    if (numBits == ALL_VALUES_EQUAL) {\n      in.seek(in.getFilePointer() + 4);\n      return;\n    }\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final int encodedSize = encodedSize(numBits);\n    in.seek(in.getFilePointer() + encodedSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#skipBlock(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#skipBlock(IndexInput).mjava","sourceNew":"  /**\n   * Skip the next block of data.\n   *\n   * @param in      the input where to read data\n   * @throws IOException\n   */\n  void skipBlock(IndexInput in) throws IOException {\n    final int numBits = in.readVInt();\n    if (numBits == ALL_VALUES_EQUAL) {\n      in.seek(in.getFilePointer() + 4);\n      return;\n    }\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final int encodedSize = encodedSizes[numBits];\n    in.seek(in.getFilePointer() + encodedSize);\n  }\n\n","sourceOld":"  /**\n   * Skip the next block of data.\n   *\n   * @param in      the input where to read data\n   * @throws IOException\n   */\n  void skipBlock(IndexInput in) throws IOException {\n    final int numBits = in.readVInt();\n    if (numBits == ALL_VALUES_EQUAL) {\n      in.seek(in.getFilePointer() + 4);\n      return;\n    }\n    assert numBits > 0 && numBits <= 32 : numBits;\n    final int encodedSize = encodedSizes[numBits];\n    in.seek(in.getFilePointer() + encodedSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2d569dbc58dcfe4b83257a5b1d867b66532beef1":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"ee0d2b90b9b7c96860f9c096edae6ed8fad95388":["cf88b0fdab72e7a3389fdd9a68ae252142c41511"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf88b0fdab72e7a3389fdd9a68ae252142c41511":["2d569dbc58dcfe4b83257a5b1d867b66532beef1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["ee0d2b90b9b7c96860f9c096edae6ed8fad95388"]},"commit2Childs":{"2d569dbc58dcfe4b83257a5b1d867b66532beef1":["cf88b0fdab72e7a3389fdd9a68ae252142c41511"],"ee0d2b90b9b7c96860f9c096edae6ed8fad95388":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e3359210474c12c0b79e6400450313e3d7ef2bb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["2d569dbc58dcfe4b83257a5b1d867b66532beef1"],"cf88b0fdab72e7a3389fdd9a68ae252142c41511":["ee0d2b90b9b7c96860f9c096edae6ed8fad95388"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}