{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#[T]_createSecondPassCollector(AbstractFirstPassGroupingCollector,String,Sort,Sort,int,int,boolean,boolean,boolean).mjava","commits":[{"id":"6b588d7000deacb0a01f30746b91644112b94326","date":1331201456,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#[T]_createSecondPassCollector(AbstractFirstPassGroupingCollector,String,Sort,Sort,int,int,boolean,boolean,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(AbstractFirstPassGroupingCollector,String,Sort,Sort,int,int,boolean,boolean,boolean).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private <T> AbstractSecondPassGroupingCollector<T> createSecondPassCollector(AbstractFirstPassGroupingCollector firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int groupOffset,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      Collection<SearchGroup> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return DVSecondPassGroupingCollector.create(groupField, diskResident, Type.BYTES_VAR_SORTED, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      Collection<SearchGroup<BytesRef>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (AbstractSecondPassGroupingCollector) new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      Collection<SearchGroup<MutableValue>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (AbstractSecondPassGroupingCollector) new FunctionSecondPassGroupingCollector(searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap());\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private AbstractSecondPassGroupingCollector createSecondPassCollector(AbstractFirstPassGroupingCollector firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int groupOffset,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      Collection<SearchGroup> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return DVSecondPassGroupingCollector.create(groupField, diskResident, Type.BYTES_VAR_SORTED, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      Collection<SearchGroup<BytesRef>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      Collection<SearchGroup<MutableValue>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return new FunctionSecondPassGroupingCollector(searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad342901d48fcf8ec19e667ebb7d5af43fddf343","date":1331202332,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#[T]_createSecondPassCollector(AbstractFirstPassGroupingCollector,String,Sort,Sort,int,int,boolean,boolean,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#[T]_createSecondPassCollector(AbstractFirstPassGroupingCollector,String,Sort,Sort,int,int,boolean,boolean,boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T> AbstractSecondPassGroupingCollector<T> createSecondPassCollector(AbstractFirstPassGroupingCollector firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int groupOffset,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return DVSecondPassGroupingCollector.create(groupField, diskResident, Type.BYTES_VAR_SORTED, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      Collection<SearchGroup<BytesRef>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (AbstractSecondPassGroupingCollector) new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      Collection<SearchGroup<MutableValue>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (AbstractSecondPassGroupingCollector) new FunctionSecondPassGroupingCollector(searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap());\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private <T> AbstractSecondPassGroupingCollector<T> createSecondPassCollector(AbstractFirstPassGroupingCollector firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int groupOffset,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      Collection<SearchGroup> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return DVSecondPassGroupingCollector.create(groupField, diskResident, Type.BYTES_VAR_SORTED, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      Collection<SearchGroup<BytesRef>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (AbstractSecondPassGroupingCollector) new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      Collection<SearchGroup<MutableValue>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (AbstractSecondPassGroupingCollector) new FunctionSecondPassGroupingCollector(searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap());\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":1,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#[T]_createSecondPassCollector(AbstractFirstPassGroupingCollector,String,Sort,Sort,int,int,boolean,boolean,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#createSecondPassCollector(AbstractFirstPassGroupingCollector,String,Sort,Sort,int,int,boolean,boolean,boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T> AbstractSecondPassGroupingCollector<T> createSecondPassCollector(AbstractFirstPassGroupingCollector firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int groupOffset,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return DVSecondPassGroupingCollector.create(groupField, diskResident, Type.BYTES_VAR_SORTED, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      Collection<SearchGroup<BytesRef>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (AbstractSecondPassGroupingCollector) new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      Collection<SearchGroup<MutableValue>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (AbstractSecondPassGroupingCollector) new FunctionSecondPassGroupingCollector(searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap());\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private AbstractSecondPassGroupingCollector createSecondPassCollector(AbstractFirstPassGroupingCollector firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int groupOffset,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      Collection<SearchGroup> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return DVSecondPassGroupingCollector.create(groupField, diskResident, Type.BYTES_VAR_SORTED, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      Collection<SearchGroup<BytesRef>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      Collection<SearchGroup<MutableValue>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return new FunctionSecondPassGroupingCollector(searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#[T]_createSecondPassCollector(AbstractFirstPassGroupingCollector,String,Sort,Sort,int,int,boolean,boolean,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#[T]_createSecondPassCollector(AbstractFirstPassGroupingCollector,String,Sort,Sort,int,int,boolean,boolean,boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T> AbstractSecondPassGroupingCollector<T> createSecondPassCollector(AbstractFirstPassGroupingCollector firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int groupOffset,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random().nextBoolean();\n      Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return DVSecondPassGroupingCollector.create(groupField, diskResident, Type.BYTES_VAR_SORTED, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      Collection<SearchGroup<BytesRef>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (AbstractSecondPassGroupingCollector) new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      Collection<SearchGroup<MutableValue>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (AbstractSecondPassGroupingCollector) new FunctionSecondPassGroupingCollector(searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap());\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T> AbstractSecondPassGroupingCollector<T> createSecondPassCollector(AbstractFirstPassGroupingCollector firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int groupOffset,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random.nextBoolean();\n      Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return DVSecondPassGroupingCollector.create(groupField, diskResident, Type.BYTES_VAR_SORTED, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      Collection<SearchGroup<BytesRef>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (AbstractSecondPassGroupingCollector) new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      Collection<SearchGroup<MutableValue>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (AbstractSecondPassGroupingCollector) new FunctionSecondPassGroupingCollector(searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap());\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#[T]_createSecondPassCollector(AbstractFirstPassGroupingCollector,String,Sort,Sort,int,int,boolean,boolean,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#[T]_createSecondPassCollector(AbstractFirstPassGroupingCollector,String,Sort,Sort,int,int,boolean,boolean,boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T> AbstractSecondPassGroupingCollector<T> createSecondPassCollector(AbstractFirstPassGroupingCollector firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int groupOffset,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random().nextBoolean();\n      Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return DVSecondPassGroupingCollector.create(groupField, diskResident, Type.BYTES_VAR_SORTED, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      Collection<SearchGroup<BytesRef>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (AbstractSecondPassGroupingCollector) new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      Collection<SearchGroup<MutableValue>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (AbstractSecondPassGroupingCollector) new FunctionSecondPassGroupingCollector(searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap());\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private <T> AbstractSecondPassGroupingCollector<T> createSecondPassCollector(AbstractFirstPassGroupingCollector firstPassGroupingCollector,\n                                                                        String groupField,\n                                                                        Sort groupSort,\n                                                                        Sort sortWithinGroup,\n                                                                        int groupOffset,\n                                                                        int maxDocsPerGroup,\n                                                                        boolean getScores,\n                                                                        boolean getMaxScores,\n                                                                        boolean fillSortFields) throws IOException {\n\n    if (DVFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      boolean diskResident = random().nextBoolean();\n      Collection<SearchGroup<T>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return DVSecondPassGroupingCollector.create(groupField, diskResident, Type.BYTES_VAR_SORTED, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields);\n    } else if (TermFirstPassGroupingCollector.class.isAssignableFrom(firstPassGroupingCollector.getClass())) {\n      Collection<SearchGroup<BytesRef>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (AbstractSecondPassGroupingCollector) new TermSecondPassGroupingCollector(groupField, searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup , getScores, getMaxScores, fillSortFields);\n    } else {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      Collection<SearchGroup<MutableValue>> searchGroups = firstPassGroupingCollector.getTopGroups(groupOffset, fillSortFields);\n      return (AbstractSecondPassGroupingCollector) new FunctionSecondPassGroupingCollector(searchGroups, groupSort, sortWithinGroup, maxDocsPerGroup, getScores, getMaxScores, fillSortFields, vs, new HashMap());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad342901d48fcf8ec19e667ebb7d5af43fddf343"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ad342901d48fcf8ec19e667ebb7d5af43fddf343":["6b588d7000deacb0a01f30746b91644112b94326"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["ad342901d48fcf8ec19e667ebb7d5af43fddf343"],"6b588d7000deacb0a01f30746b91644112b94326":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","6b588d7000deacb0a01f30746b91644112b94326"],"ad342901d48fcf8ec19e667ebb7d5af43fddf343":["38e3b736c7ca086d61b7dbb841c905ee115490da","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6b588d7000deacb0a01f30746b91644112b94326":["ad342901d48fcf8ec19e667ebb7d5af43fddf343"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}