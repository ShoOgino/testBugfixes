{"path":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","commits":[{"id":"1bea3922196318026c4274f2013416acb60c691e","date":1336496433,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n\n\n      if (ulog != null) {\n        Object o = ulog.lookup(idBytes);\n        if (o != null) {\n          // should currently be a List<Oper,Ver,Doc/Id>\n          List entry = (List)o;\n          assert entry.size() >= 3;\n          int oper = (Integer)entry.get(0);\n          switch (oper) {\n            case UpdateLog.ADD:\n              sid = (SolrInputDocument)entry.get(entry.size()-1);\n              break;\n            case UpdateLog.DELETE:\n              return null;\n            default:\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,  \"Unknown Operation! \" + oper);\n          }\n        }\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        Document luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getSchema());\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e99829242bceda4cf974ec0eb5d82d713615b3da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e99829242bceda4cf974ec0eb5d82d713615b3da","date":1337646971,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","sourceNew":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n\n\n      if (ulog != null) {\n        Object o = ulog.lookup(idBytes);\n        if (o != null) {\n          // should currently be a List<Oper,Ver,Doc/Id>\n          List entry = (List)o;\n          assert entry.size() >= 3;\n          int oper = (Integer)entry.get(0) & UpdateLog.OPERATION_MASK;\n          switch (oper) {\n            case UpdateLog.ADD:\n              sid = (SolrInputDocument)entry.get(entry.size()-1);\n              break;\n            case UpdateLog.DELETE:\n              return null;\n            default:\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,  \"Unknown Operation! \" + oper);\n          }\n        }\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        Document luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getSchema());\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","sourceOld":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n\n\n      if (ulog != null) {\n        Object o = ulog.lookup(idBytes);\n        if (o != null) {\n          // should currently be a List<Oper,Ver,Doc/Id>\n          List entry = (List)o;\n          assert entry.size() >= 3;\n          int oper = (Integer)entry.get(0);\n          switch (oper) {\n            case UpdateLog.ADD:\n              sid = (SolrInputDocument)entry.get(entry.size()-1);\n              break;\n            case UpdateLog.DELETE:\n              return null;\n            default:\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,  \"Unknown Operation! \" + oper);\n          }\n        }\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        Document luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getSchema());\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","bugFix":["1bea3922196318026c4274f2013416acb60c691e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","sourceNew":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n\n\n      if (ulog != null) {\n        Object o = ulog.lookup(idBytes);\n        if (o != null) {\n          // should currently be a List<Oper,Ver,Doc/Id>\n          List entry = (List)o;\n          assert entry.size() >= 3;\n          int oper = (Integer)entry.get(0) & UpdateLog.OPERATION_MASK;\n          switch (oper) {\n            case UpdateLog.ADD:\n              sid = (SolrInputDocument)entry.get(entry.size()-1);\n              break;\n            case UpdateLog.DELETE:\n              return null;\n            default:\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,  \"Unknown Operation! \" + oper);\n          }\n        }\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        Document luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getSchema());\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","sourceOld":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n\n\n      if (ulog != null) {\n        Object o = ulog.lookup(idBytes);\n        if (o != null) {\n          // should currently be a List<Oper,Ver,Doc/Id>\n          List entry = (List)o;\n          assert entry.size() >= 3;\n          int oper = (Integer)entry.get(0);\n          switch (oper) {\n            case UpdateLog.ADD:\n              sid = (SolrInputDocument)entry.get(entry.size()-1);\n              break;\n            case UpdateLog.DELETE:\n              return null;\n            default:\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,  \"Unknown Operation! \" + oper);\n          }\n        }\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        Document luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getSchema());\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","sourceNew":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n\n\n      if (ulog != null) {\n        Object o = ulog.lookup(idBytes);\n        if (o != null) {\n          // should currently be a List<Oper,Ver,Doc/Id>\n          List entry = (List)o;\n          assert entry.size() >= 3;\n          int oper = (Integer)entry.get(0) & UpdateLog.OPERATION_MASK;\n          switch (oper) {\n            case UpdateLog.ADD:\n              sid = (SolrInputDocument)entry.get(entry.size()-1);\n              break;\n            case UpdateLog.DELETE:\n              return null;\n            default:\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,  \"Unknown Operation! \" + oper);\n          }\n        }\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        StoredDocument luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getSchema());\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","sourceOld":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n\n\n      if (ulog != null) {\n        Object o = ulog.lookup(idBytes);\n        if (o != null) {\n          // should currently be a List<Oper,Ver,Doc/Id>\n          List entry = (List)o;\n          assert entry.size() >= 3;\n          int oper = (Integer)entry.get(0) & UpdateLog.OPERATION_MASK;\n          switch (oper) {\n            case UpdateLog.ADD:\n              sid = (SolrInputDocument)entry.get(entry.size()-1);\n              break;\n            case UpdateLog.DELETE:\n              return null;\n            default:\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,  \"Unknown Operation! \" + oper);\n          }\n        }\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        Document luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getSchema());\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","sourceNew":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n\n\n      if (ulog != null) {\n        Object o = ulog.lookup(idBytes);\n        if (o != null) {\n          // should currently be a List<Oper,Ver,Doc/Id>\n          List entry = (List)o;\n          assert entry.size() >= 3;\n          int oper = (Integer)entry.get(0) & UpdateLog.OPERATION_MASK;\n          switch (oper) {\n            case UpdateLog.ADD:\n              sid = (SolrInputDocument)entry.get(entry.size()-1);\n              break;\n            case UpdateLog.DELETE:\n              return null;\n            default:\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,  \"Unknown Operation! \" + oper);\n          }\n        }\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        StoredDocument luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getSchema());\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","sourceOld":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n\n\n      if (ulog != null) {\n        Object o = ulog.lookup(idBytes);\n        if (o != null) {\n          // should currently be a List<Oper,Ver,Doc/Id>\n          List entry = (List)o;\n          assert entry.size() >= 3;\n          int oper = (Integer)entry.get(0) & UpdateLog.OPERATION_MASK;\n          switch (oper) {\n            case UpdateLog.ADD:\n              sid = (SolrInputDocument)entry.get(entry.size()-1);\n              break;\n            case UpdateLog.DELETE:\n              return null;\n            default:\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,  \"Unknown Operation! \" + oper);\n          }\n        }\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        Document luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getSchema());\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","sourceNew":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n\n\n      if (ulog != null) {\n        Object o = ulog.lookup(idBytes);\n        if (o != null) {\n          // should currently be a List<Oper,Ver,Doc/Id>\n          List entry = (List)o;\n          assert entry.size() >= 3;\n          int oper = (Integer)entry.get(0) & UpdateLog.OPERATION_MASK;\n          switch (oper) {\n            case UpdateLog.ADD:\n              sid = (SolrInputDocument)entry.get(entry.size()-1);\n              break;\n            case UpdateLog.DELETE:\n              return null;\n            default:\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,  \"Unknown Operation! \" + oper);\n          }\n        }\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        StoredDocument luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getLatestSchema());\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","sourceOld":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n\n\n      if (ulog != null) {\n        Object o = ulog.lookup(idBytes);\n        if (o != null) {\n          // should currently be a List<Oper,Ver,Doc/Id>\n          List entry = (List)o;\n          assert entry.size() >= 3;\n          int oper = (Integer)entry.get(0) & UpdateLog.OPERATION_MASK;\n          switch (oper) {\n            case UpdateLog.ADD:\n              sid = (SolrInputDocument)entry.get(entry.size()-1);\n              break;\n            case UpdateLog.DELETE:\n              return null;\n            default:\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,  \"Unknown Operation! \" + oper);\n          }\n        }\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        StoredDocument luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getSchema());\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0","date":1383246815,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","sourceNew":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      sid = getInputDocumentFromTlog(core, idBytes);\n      if (sid == DELETED) {\n        return null;\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        StoredDocument luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getLatestSchema());\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","sourceOld":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n\n\n      if (ulog != null) {\n        Object o = ulog.lookup(idBytes);\n        if (o != null) {\n          // should currently be a List<Oper,Ver,Doc/Id>\n          List entry = (List)o;\n          assert entry.size() >= 3;\n          int oper = (Integer)entry.get(0) & UpdateLog.OPERATION_MASK;\n          switch (oper) {\n            case UpdateLog.ADD:\n              sid = (SolrInputDocument)entry.get(entry.size()-1);\n              break;\n            case UpdateLog.DELETE:\n              return null;\n            default:\n              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,  \"Unknown Operation! \" + oper);\n          }\n        }\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        StoredDocument luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getLatestSchema());\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae75c8a4fb0404ecd05df95a8d635f7d92fad9fe","date":1451338931,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","sourceNew":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      sid = getInputDocumentFromTlog(core, idBytes);\n      if (sid == DELETED) {\n        return null;\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        StoredDocument luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getLatestSchema());\n        searcher.decorateDocValueFields(sid, docid, searcher.getNonStoredDVs(false));\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","sourceOld":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      sid = getInputDocumentFromTlog(core, idBytes);\n      if (sid == DELETED) {\n        return null;\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        StoredDocument luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getLatestSchema());\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","bugFix":null,"bugIntro":["8b93c47fd6615608aaba7a18f08614cc169de66a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","sourceNew":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      sid = getInputDocumentFromTlog(core, idBytes);\n      if (sid == DELETED) {\n        return null;\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        Document luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getLatestSchema());\n        searcher.decorateDocValueFields(sid, docid, searcher.getNonStoredDVs(false));\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","sourceOld":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      sid = getInputDocumentFromTlog(core, idBytes);\n      if (sid == DELETED) {\n        return null;\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        StoredDocument luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getLatestSchema());\n        searcher.decorateDocValueFields(sid, docid, searcher.getNonStoredDVs(false));\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b93c47fd6615608aaba7a18f08614cc169de66a","date":1461873142,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","sourceNew":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      sid = getInputDocumentFromTlog(core, idBytes);\n      if (sid == DELETED) {\n        return null;\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        Document luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getLatestSchema());\n        searcher.decorateDocValueFields(sid, docid, searcher.getNonStoredDVsWithoutCopyTargets());\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","sourceOld":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      sid = getInputDocumentFromTlog(core, idBytes);\n      if (sid == DELETED) {\n        return null;\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        Document luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getLatestSchema());\n        searcher.decorateDocValueFields(sid, docid, searcher.getNonStoredDVs(false));\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","bugFix":["ae75c8a4fb0404ecd05df95a8d635f7d92fad9fe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","sourceNew":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      sid = getInputDocumentFromTlog(core, idBytes);\n      if (sid == DELETED) {\n        return null;\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        Document luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getLatestSchema());\n        searcher.decorateDocValueFields(sid, docid, searcher.getNonStoredDVsWithoutCopyTargets());\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","sourceOld":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      sid = getInputDocumentFromTlog(core, idBytes);\n      if (sid == DELETED) {\n        return null;\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        Document luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getLatestSchema());\n        searcher.decorateDocValueFields(sid, docid, searcher.getNonStoredDVs(false));\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","sourceNew":"  /**\n   * Obtains the latest document for a given id from the tlog or index (if not found in the tlog).\n   * \n   * NOTE: This method uses the effective value for avoidRetrievingStoredFields param as false and\n   * for nonStoredDVs as null in the call to @see {@link RealTimeGetComponent#getInputDocument(SolrCore, BytesRef, AtomicLong, boolean, Set, boolean)},\n   * so as to retrieve all stored and non-stored DV fields from all documents. Also, it uses the effective value of\n   * resolveFullDocument param as true, i.e. it resolves any partial documents (in-place updates), in case the \n   * document is fetched from the tlog, to a full document.\n   */\n  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    return getInputDocument (core, idBytes, null, false, null, true);\n  }\n\n","sourceOld":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      sid = getInputDocumentFromTlog(core, idBytes);\n      if (sid == DELETED) {\n        return null;\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        Document luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getLatestSchema());\n        searcher.decorateDocValueFields(sid, docid, searcher.getNonStoredDVsWithoutCopyTargets());\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","sourceNew":"  /**\n   * Obtains the latest document for a given id from the tlog or index (if not found in the tlog).\n   * \n   * NOTE: This method uses the effective value for avoidRetrievingStoredFields param as false and\n   * for nonStoredDVs as null in the call to @see {@link RealTimeGetComponent#getInputDocument(SolrCore, BytesRef, AtomicLong, boolean, Set, boolean)},\n   * so as to retrieve all stored and non-stored DV fields from all documents. Also, it uses the effective value of\n   * resolveFullDocument param as true, i.e. it resolves any partial documents (in-place updates), in case the \n   * document is fetched from the tlog, to a full document.\n   */\n  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    return getInputDocument (core, idBytes, null, false, null, true);\n  }\n\n","sourceOld":"  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    SolrInputDocument sid = null;\n    RefCounted<SolrIndexSearcher> searcherHolder = null;\n    try {\n      SolrIndexSearcher searcher = null;\n      sid = getInputDocumentFromTlog(core, idBytes);\n      if (sid == DELETED) {\n        return null;\n      }\n\n      if (sid == null) {\n        // didn't find it in the update log, so it should be in the newest searcher opened\n        if (searcher == null) {\n          searcherHolder = core.getRealtimeSearcher();\n          searcher = searcherHolder.get();\n        }\n\n        // SolrCore.verbose(\"RealTimeGet using searcher \", searcher);\n        SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n\n        int docid = searcher.getFirstMatch(new Term(idField.getName(), idBytes));\n        if (docid < 0) return null;\n        Document luceneDocument = searcher.doc(docid);\n        sid = toSolrInputDocument(luceneDocument, core.getLatestSchema());\n        searcher.decorateDocValueFields(sid, docid, searcher.getNonStoredDVsWithoutCopyTargets());\n      }\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n\n    return sid;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07749612bed4eb54dd05255c1434c301133310c1","date":1554879779,"type":5,"author":"Moshe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef,Resolution).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#getInputDocument(SolrCore,BytesRef).mjava","sourceNew":"  /**\n   * Obtains the latest document for a given id from the tlog or index (if not found in the tlog).\n   * \n   * NOTE: This method uses the effective value for nonStoredDVs as null in the call to @see {@link RealTimeGetComponent#getInputDocument(SolrCore, BytesRef, AtomicLong, Set, Resolution)},\n   * so as to retrieve all stored and non-stored DV fields from all documents.\n   */\n\n  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes, Resolution lookupStrategy) throws IOException {\n    return getInputDocument (core, idBytes, null, null, lookupStrategy);\n  }\n\n","sourceOld":"  /**\n   * Obtains the latest document for a given id from the tlog or index (if not found in the tlog).\n   * \n   * NOTE: This method uses the effective value for avoidRetrievingStoredFields param as false and\n   * for nonStoredDVs as null in the call to @see {@link RealTimeGetComponent#getInputDocument(SolrCore, BytesRef, AtomicLong, boolean, Set, boolean)},\n   * so as to retrieve all stored and non-stored DV fields from all documents. Also, it uses the effective value of\n   * resolveFullDocument param as true, i.e. it resolves any partial documents (in-place updates), in case the \n   * document is fetched from the tlog, to a full document.\n   */\n  public static SolrInputDocument getInputDocument(SolrCore core, BytesRef idBytes) throws IOException {\n    return getInputDocument (core, idBytes, null, false, null, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["8b93c47fd6615608aaba7a18f08614cc169de66a"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["55b50463286869f584cf849d1587a0fcd54d1dfa","415bbbe7da8065dd3c477bdc3c703c6425622998"],"8b93c47fd6615608aaba7a18f08614cc169de66a":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"1bea3922196318026c4274f2013416acb60c691e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"07749612bed4eb54dd05255c1434c301133310c1":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"08970e5b8411182a29412c177eff67ec1110095b":["1d028314cced5858683a1bb4741423d0f934257b"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","8b93c47fd6615608aaba7a18f08614cc169de66a"],"1d028314cced5858683a1bb4741423d0f934257b":["e99829242bceda4cf974ec0eb5d82d713615b3da","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"ae75c8a4fb0404ecd05df95a8d635f7d92fad9fe":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["1bea3922196318026c4274f2013416acb60c691e","e99829242bceda4cf974ec0eb5d82d713615b3da"],"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0":["08970e5b8411182a29412c177eff67ec1110095b"],"e99829242bceda4cf974ec0eb5d82d713615b3da":["1bea3922196318026c4274f2013416acb60c691e"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["e99829242bceda4cf974ec0eb5d82d713615b3da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07749612bed4eb54dd05255c1434c301133310c1"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["ae75c8a4fb0404ecd05df95a8d635f7d92fad9fe"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","07749612bed4eb54dd05255c1434c301133310c1"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"8b93c47fd6615608aaba7a18f08614cc169de66a":["415bbbe7da8065dd3c477bdc3c703c6425622998","55b50463286869f584cf849d1587a0fcd54d1dfa"],"1bea3922196318026c4274f2013416acb60c691e":["3599646b4d4c346cf74d334813488b8b337b5bf5","e99829242bceda4cf974ec0eb5d82d713615b3da"],"07749612bed4eb54dd05255c1434c301133310c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["598b5d23aa7c9732bf473c21a9cd309c44599394"],"08970e5b8411182a29412c177eff67ec1110095b":["45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0"],"1d028314cced5858683a1bb4741423d0f934257b":["08970e5b8411182a29412c177eff67ec1110095b"],"ae75c8a4fb0404ecd05df95a8d635f7d92fad9fe":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bea3922196318026c4274f2013416acb60c691e"],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"45a4348f3ba3bf4ff6cbb4169fe5bf7d28288cd0":["ae75c8a4fb0404ecd05df95a8d635f7d92fad9fe"],"e99829242bceda4cf974ec0eb5d82d713615b3da":["1d028314cced5858683a1bb4741423d0f934257b","3599646b4d4c346cf74d334813488b8b337b5bf5","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["8b93c47fd6615608aaba7a18f08614cc169de66a","55b50463286869f584cf849d1587a0fcd54d1dfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","3599646b4d4c346cf74d334813488b8b337b5bf5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}