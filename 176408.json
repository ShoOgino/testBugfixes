{"path":"src/test/org/apache/lucene/ThreadSafetyTest.IndexerThread#run().mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/test/org/apache/lucene/ThreadSafetyTest.IndexerThread#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      try {\n\tfor (int i = 0; i < 1024*16; i++) {\n\t  Document d = new Document();\n\t  int n = RANDOM.nextInt();\n\t  d.add(Field.Keyword(\"id\", Integer.toString(n)));\n\t  d.add(Field.UnStored(\"contents\", intToEnglish(n)));\n\t  System.out.println(\"Adding \" + n);\n\t  writer.addDocument(d);\n\n\t  if (i%reopenInterval == 0) {\n\t    writer.close();\n\t    writer = new IndexWriter(\"index\", ANALYZER, false);\n\t  }\n\t}\n      } catch (Exception e) {\n\tSystem.out.println(e.toString());\n\te.printStackTrace();\n\tSystem.exit(0);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a10198efba39d45c46f8714efe9a15616f9c79d","date":1001608022,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/ThreadSafetyTest.IndexerThread#run().mjava","pathOld":"src/test/org/apache/lucene/ThreadSafetyTest.IndexerThread#run().mjava","sourceNew":"    public void run() {\n      try {\n\tfor (int i = 0; i < 1024*ITERATIONS; i++) {\n\t  Document d = new Document();\n\t  int n = RANDOM.nextInt();\n\t  d.add(Field.Keyword(\"id\", Integer.toString(n)));\n\t  d.add(Field.UnStored(\"contents\", intToEnglish(n)));\n\t  System.out.println(\"Adding \" + n);\n\t  writer.addDocument(d);\n\n\t  if (i%reopenInterval == 0) {\n\t    writer.close();\n\t    writer = new IndexWriter(\"index\", ANALYZER, false);\n\t  }\n\t}\n\t\n\twriter.close();\n\n      } catch (Exception e) {\n\tSystem.out.println(e.toString());\n\te.printStackTrace();\n\tSystem.exit(0);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n\tfor (int i = 0; i < 1024*16; i++) {\n\t  Document d = new Document();\n\t  int n = RANDOM.nextInt();\n\t  d.add(Field.Keyword(\"id\", Integer.toString(n)));\n\t  d.add(Field.UnStored(\"contents\", intToEnglish(n)));\n\t  System.out.println(\"Adding \" + n);\n\t  writer.addDocument(d);\n\n\t  if (i%reopenInterval == 0) {\n\t    writer.close();\n\t    writer = new IndexWriter(\"index\", ANALYZER, false);\n\t  }\n\t}\n      } catch (Exception e) {\n\tSystem.out.println(e.toString());\n\te.printStackTrace();\n\tSystem.exit(0);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":3,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/test/org/apache/lucene/ThreadSafetyTest.IndexerThread#run().mjava","pathOld":"src/test/org/apache/lucene/ThreadSafetyTest.IndexerThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        boolean useCompoundFiles = false;\n        \n        for (int i = 0; i < 1024*ITERATIONS; i++) {\n          Document d = new Document();\n          int n = RANDOM.nextInt();\n          d.add(Field.Keyword(\"id\", Integer.toString(n)));\n          d.add(Field.UnStored(\"contents\", intToEnglish(n)));\n          System.out.println(\"Adding \" + n);\n          \n          // Switch between single and multiple file segments\n          useCompoundFiles = Math.random() < 0.5;\n          writer.setUseCompoundFile(useCompoundFiles);\n          \n          writer.addDocument(d);\n\n          if (i%reopenInterval == 0) {\n            writer.close();\n            writer = new IndexWriter(\"index\", ANALYZER, false);\n          }\n        }\n        \n        writer.close();\n\n      } catch (Exception e) {\n        System.out.println(e.toString());\n        e.printStackTrace();\n        System.exit(0);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n\tfor (int i = 0; i < 1024*ITERATIONS; i++) {\n\t  Document d = new Document();\n\t  int n = RANDOM.nextInt();\n\t  d.add(Field.Keyword(\"id\", Integer.toString(n)));\n\t  d.add(Field.UnStored(\"contents\", intToEnglish(n)));\n\t  System.out.println(\"Adding \" + n);\n\t  writer.addDocument(d);\n\n\t  if (i%reopenInterval == 0) {\n\t    writer.close();\n\t    writer = new IndexWriter(\"index\", ANALYZER, false);\n\t  }\n\t}\n\t\n\twriter.close();\n\n      } catch (Exception e) {\n\tSystem.out.println(e.toString());\n\te.printStackTrace();\n\tSystem.exit(0);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/ThreadSafetyTest.IndexerThread#run().mjava","pathOld":"src/test/org/apache/lucene/ThreadSafetyTest.IndexerThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        boolean useCompoundFiles = false;\n        \n        for (int i = 0; i < 1024*ITERATIONS; i++) {\n          Document d = new Document();\n          int n = RANDOM.nextInt();\n          d.add(Field.Keyword(\"id\", Integer.toString(n)));\n          d.add(Field.UnStored(\"contents\", English.intToEnglish(n)));\n          System.out.println(\"Adding \" + n);\n          \n          // Switch between single and multiple file segments\n          useCompoundFiles = Math.random() < 0.5;\n          writer.setUseCompoundFile(useCompoundFiles);\n          \n          writer.addDocument(d);\n\n          if (i%reopenInterval == 0) {\n            writer.close();\n            writer = new IndexWriter(\"index\", ANALYZER, false);\n          }\n        }\n        \n        writer.close();\n\n      } catch (Exception e) {\n        System.out.println(e.toString());\n        e.printStackTrace();\n        System.exit(0);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        boolean useCompoundFiles = false;\n        \n        for (int i = 0; i < 1024*ITERATIONS; i++) {\n          Document d = new Document();\n          int n = RANDOM.nextInt();\n          d.add(Field.Keyword(\"id\", Integer.toString(n)));\n          d.add(Field.UnStored(\"contents\", intToEnglish(n)));\n          System.out.println(\"Adding \" + n);\n          \n          // Switch between single and multiple file segments\n          useCompoundFiles = Math.random() < 0.5;\n          writer.setUseCompoundFile(useCompoundFiles);\n          \n          writer.addDocument(d);\n\n          if (i%reopenInterval == 0) {\n            writer.close();\n            writer = new IndexWriter(\"index\", ANALYZER, false);\n          }\n        }\n        \n        writer.close();\n\n      } catch (Exception e) {\n        System.out.println(e.toString());\n        e.printStackTrace();\n        System.exit(0);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2355382afa0f25b02f903f0c0c00433c59edd075","date":1094509762,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/ThreadSafetyTest.IndexerThread#run().mjava","pathOld":"src/test/org/apache/lucene/ThreadSafetyTest.IndexerThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        boolean useCompoundFiles = false;\n        \n        for (int i = 0; i < 1024*ITERATIONS; i++) {\n          Document d = new Document();\n          int n = RANDOM.nextInt();\n          d.add(new Field(\"id\", Integer.toString(n), Field.Store.YES, Field.Index.UN_TOKENIZED));\n          d.add(new Field(\"contents\", English.intToEnglish(n), Field.Store.NO, Field.Index.TOKENIZED));\n          System.out.println(\"Adding \" + n);\n          \n          // Switch between single and multiple file segments\n          useCompoundFiles = Math.random() < 0.5;\n          writer.setUseCompoundFile(useCompoundFiles);\n          \n          writer.addDocument(d);\n\n          if (i%reopenInterval == 0) {\n            writer.close();\n            writer = new IndexWriter(\"index\", ANALYZER, false);\n          }\n        }\n        \n        writer.close();\n\n      } catch (Exception e) {\n        System.out.println(e.toString());\n        e.printStackTrace();\n        System.exit(0);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        boolean useCompoundFiles = false;\n        \n        for (int i = 0; i < 1024*ITERATIONS; i++) {\n          Document d = new Document();\n          int n = RANDOM.nextInt();\n          d.add(Field.Keyword(\"id\", Integer.toString(n)));\n          d.add(Field.UnStored(\"contents\", English.intToEnglish(n)));\n          System.out.println(\"Adding \" + n);\n          \n          // Switch between single and multiple file segments\n          useCompoundFiles = Math.random() < 0.5;\n          writer.setUseCompoundFile(useCompoundFiles);\n          \n          writer.addDocument(d);\n\n          if (i%reopenInterval == 0) {\n            writer.close();\n            writer = new IndexWriter(\"index\", ANALYZER, false);\n          }\n        }\n        \n        writer.close();\n\n      } catch (Exception e) {\n        System.out.println(e.toString());\n        e.printStackTrace();\n        System.exit(0);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/ThreadSafetyTest.IndexerThread#run().mjava","pathOld":"src/test/org/apache/lucene/ThreadSafetyTest.IndexerThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        boolean useCompoundFiles = false;\n        \n        for (int i = 0; i < 1024*ITERATIONS; i++) {\n          Document d = new Document();\n          int n = RANDOM.nextInt();\n          d.add(new Field(\"id\", Integer.toString(n), Field.Store.YES, Field.Index.UN_TOKENIZED));\n          d.add(new Field(\"contents\", English.intToEnglish(n), Field.Store.NO, Field.Index.TOKENIZED));\n          System.out.println(\"Adding \" + n);\n          \n          // Switch between single and multiple file segments\n          useCompoundFiles = Math.random() < 0.5;\n          writer.setUseCompoundFile(useCompoundFiles);\n          \n          writer.addDocument(d);\n\n          if (i%reopenInterval == 0) {\n            writer.close();\n            writer = new IndexWriter(\"index\", ANALYZER, false, IndexWriter.MaxFieldLength.LIMITED);\n          }\n        }\n        \n        writer.close();\n\n      } catch (Exception e) {\n        System.out.println(e.toString());\n        e.printStackTrace();\n        System.exit(0);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        boolean useCompoundFiles = false;\n        \n        for (int i = 0; i < 1024*ITERATIONS; i++) {\n          Document d = new Document();\n          int n = RANDOM.nextInt();\n          d.add(new Field(\"id\", Integer.toString(n), Field.Store.YES, Field.Index.UN_TOKENIZED));\n          d.add(new Field(\"contents\", English.intToEnglish(n), Field.Store.NO, Field.Index.TOKENIZED));\n          System.out.println(\"Adding \" + n);\n          \n          // Switch between single and multiple file segments\n          useCompoundFiles = Math.random() < 0.5;\n          writer.setUseCompoundFile(useCompoundFiles);\n          \n          writer.addDocument(d);\n\n          if (i%reopenInterval == 0) {\n            writer.close();\n            writer = new IndexWriter(\"index\", ANALYZER, false);\n          }\n        }\n        \n        writer.close();\n\n      } catch (Exception e) {\n        System.out.println(e.toString());\n        e.printStackTrace();\n        System.exit(0);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/ThreadSafetyTest.IndexerThread#run().mjava","pathOld":"src/test/org/apache/lucene/ThreadSafetyTest.IndexerThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        boolean useCompoundFiles = false;\n        \n        for (int i = 0; i < 1024*ITERATIONS; i++) {\n          Document d = new Document();\n          int n = RANDOM.nextInt();\n          d.add(new Field(\"id\", Integer.toString(n), Field.Store.YES, Field.Index.NOT_ANALYZED));\n          d.add(new Field(\"contents\", English.intToEnglish(n), Field.Store.NO, Field.Index.ANALYZED));\n          System.out.println(\"Adding \" + n);\n          \n          // Switch between single and multiple file segments\n          useCompoundFiles = Math.random() < 0.5;\n          writer.setUseCompoundFile(useCompoundFiles);\n          \n          writer.addDocument(d);\n\n          if (i%reopenInterval == 0) {\n            writer.close();\n            writer = new IndexWriter(\"index\", ANALYZER, false, IndexWriter.MaxFieldLength.LIMITED);\n          }\n        }\n        \n        writer.close();\n\n      } catch (Exception e) {\n        System.out.println(e.toString());\n        e.printStackTrace();\n        System.exit(0);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        boolean useCompoundFiles = false;\n        \n        for (int i = 0; i < 1024*ITERATIONS; i++) {\n          Document d = new Document();\n          int n = RANDOM.nextInt();\n          d.add(new Field(\"id\", Integer.toString(n), Field.Store.YES, Field.Index.UN_TOKENIZED));\n          d.add(new Field(\"contents\", English.intToEnglish(n), Field.Store.NO, Field.Index.TOKENIZED));\n          System.out.println(\"Adding \" + n);\n          \n          // Switch between single and multiple file segments\n          useCompoundFiles = Math.random() < 0.5;\n          writer.setUseCompoundFile(useCompoundFiles);\n          \n          writer.addDocument(d);\n\n          if (i%reopenInterval == 0) {\n            writer.close();\n            writer = new IndexWriter(\"index\", ANALYZER, false, IndexWriter.MaxFieldLength.LIMITED);\n          }\n        }\n        \n        writer.close();\n\n      } catch (Exception e) {\n        System.out.println(e.toString());\n        e.printStackTrace();\n        System.exit(0);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"520d06488b13c8ef837dd0815b77a80fff8779e1","date":1240950232,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/ThreadSafetyTest.IndexerThread#run().mjava","sourceNew":null,"sourceOld":"    public void run() {\n      try {\n        boolean useCompoundFiles = false;\n        \n        for (int i = 0; i < 1024*ITERATIONS; i++) {\n          Document d = new Document();\n          int n = RANDOM.nextInt();\n          d.add(new Field(\"id\", Integer.toString(n), Field.Store.YES, Field.Index.NOT_ANALYZED));\n          d.add(new Field(\"contents\", English.intToEnglish(n), Field.Store.NO, Field.Index.ANALYZED));\n          System.out.println(\"Adding \" + n);\n          \n          // Switch between single and multiple file segments\n          useCompoundFiles = Math.random() < 0.5;\n          writer.setUseCompoundFile(useCompoundFiles);\n          \n          writer.addDocument(d);\n\n          if (i%reopenInterval == 0) {\n            writer.close();\n            writer = new IndexWriter(\"index\", ANALYZER, false, IndexWriter.MaxFieldLength.LIMITED);\n          }\n        }\n        \n        writer.close();\n\n      } catch (Exception e) {\n        System.out.println(e.toString());\n        e.printStackTrace();\n        System.exit(0);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a10198efba39d45c46f8714efe9a15616f9c79d":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"520d06488b13c8ef837dd0815b77a80fff8779e1":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["3a10198efba39d45c46f8714efe9a15616f9c79d"],"2355382afa0f25b02f903f0c0c00433c59edd075":["15c469602973ef1a33c9a07367a380d278ffab20"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["2355382afa0f25b02f903f0c0c00433c59edd075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["520d06488b13c8ef837dd0815b77a80fff8779e1"],"15c469602973ef1a33c9a07367a380d278ffab20":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"]},"commit2Childs":{"3a10198efba39d45c46f8714efe9a15616f9c79d":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["3a10198efba39d45c46f8714efe9a15616f9c79d"],"520d06488b13c8ef837dd0815b77a80fff8779e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["520d06488b13c8ef837dd0815b77a80fff8779e1"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["15c469602973ef1a33c9a07367a380d278ffab20"],"2355382afa0f25b02f903f0c0c00433c59edd075":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"15c469602973ef1a33c9a07367a380d278ffab20":["2355382afa0f25b02f903f0c0c00433c59edd075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}