{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter#AbstractVisitingPrefixTreeFilter(Shape,String,SpatialPrefixTree,int,int).mjava","commits":[{"id":"c659c37800c0dfd82fa025b5834f4ab065903d11","date":1361851047,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter#AbstractVisitingPrefixTreeFilter(Shape,String,SpatialPrefixTree,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public AbstractVisitingPrefixTreeFilter(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                                          int detailLevel, int prefixGridScanLevel) {\n    super(queryShape, fieldName, grid, detailLevel);\n    this.prefixGridScanLevel = Math.max(1, Math.min(prefixGridScanLevel, grid.getMaxLevels() - 1));\n    assert detailLevel <= grid.getMaxLevels();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3702440de9629167be64098f307cea70809df488","3702440de9629167be64098f307cea70809df488"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3702440de9629167be64098f307cea70809df488","date":1365439741,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter#AbstractVisitingPrefixTreeFilter(Shape,String,SpatialPrefixTree,int,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter#AbstractVisitingPrefixTreeFilter(Shape,String,SpatialPrefixTree,int,int).mjava","sourceNew":"  public AbstractVisitingPrefixTreeFilter(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                                          int detailLevel, int prefixGridScanLevel) {\n    super(queryShape, fieldName, grid, detailLevel);\n    this.prefixGridScanLevel = Math.max(0, Math.min(prefixGridScanLevel, grid.getMaxLevels() - 1));\n    assert detailLevel <= grid.getMaxLevels();\n  }\n\n","sourceOld":"  public AbstractVisitingPrefixTreeFilter(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                                          int detailLevel, int prefixGridScanLevel) {\n    super(queryShape, fieldName, grid, detailLevel);\n    this.prefixGridScanLevel = Math.max(1, Math.min(prefixGridScanLevel, grid.getMaxLevels() - 1));\n    assert detailLevel <= grid.getMaxLevels();\n  }\n\n","bugFix":["c659c37800c0dfd82fa025b5834f4ab065903d11"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4","date":1422887461,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter#AbstractVisitingPrefixTreeFilter(Shape,String,SpatialPrefixTree,int,int,boolean).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter#AbstractVisitingPrefixTreeFilter(Shape,String,SpatialPrefixTree,int,int).mjava","sourceNew":"  public AbstractVisitingPrefixTreeFilter(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                                          int detailLevel, int prefixGridScanLevel, boolean hasIndexedLeaves) {\n    super(queryShape, fieldName, grid, detailLevel);\n    this.prefixGridScanLevel = Math.max(0, Math.min(prefixGridScanLevel, grid.getMaxLevels() - 1));\n    this.hasIndexedLeaves = hasIndexedLeaves;\n    assert detailLevel <= grid.getMaxLevels();\n  }\n\n","sourceOld":"  public AbstractVisitingPrefixTreeFilter(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                                          int detailLevel, int prefixGridScanLevel) {\n    super(queryShape, fieldName, grid, detailLevel);\n    this.prefixGridScanLevel = Math.max(0, Math.min(prefixGridScanLevel, grid.getMaxLevels() - 1));\n    assert detailLevel <= grid.getMaxLevels();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0","date":1426015524,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter#AbstractVisitingPrefixTreeFilter(Shape,String,SpatialPrefixTree,int,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter#AbstractVisitingPrefixTreeFilter(Shape,String,SpatialPrefixTree,int,int,boolean).mjava","sourceNew":"  public AbstractVisitingPrefixTreeFilter(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                                          int detailLevel, int prefixGridScanLevel) {\n    super(queryShape, fieldName, grid, detailLevel);\n    this.prefixGridScanLevel = Math.max(0, Math.min(prefixGridScanLevel, grid.getMaxLevels() - 1));\n    assert detailLevel <= grid.getMaxLevels();\n  }\n\n","sourceOld":"  public AbstractVisitingPrefixTreeFilter(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                                          int detailLevel, int prefixGridScanLevel, boolean hasIndexedLeaves) {\n    super(queryShape, fieldName, grid, detailLevel);\n    this.prefixGridScanLevel = Math.max(0, Math.min(prefixGridScanLevel, grid.getMaxLevels() - 1));\n    this.hasIndexedLeaves = hasIndexedLeaves;\n    assert detailLevel <= grid.getMaxLevels();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter#AbstractVisitingPrefixTreeFilter(Shape,String,SpatialPrefixTree,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public AbstractVisitingPrefixTreeFilter(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                                          int detailLevel, int prefixGridScanLevel) {\n    super(queryShape, fieldName, grid, detailLevel);\n    this.prefixGridScanLevel = Math.max(0, Math.min(prefixGridScanLevel, grid.getMaxLevels() - 1));\n    assert detailLevel <= grid.getMaxLevels();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":6,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/composite/IntersectsRPTVerifyQuery.IntersectsDifferentiatingQuery#IntersectsDifferentiatingQuery(Shape,String,SpatialPrefixTree,int,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter#AbstractVisitingPrefixTreeFilter(Shape,String,SpatialPrefixTree,int,int).mjava","sourceNew":"    public IntersectsDifferentiatingQuery(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                                          int detailLevel, int prefixGridScanLevel) {\n      super(queryShape, fieldName, grid, detailLevel, prefixGridScanLevel);\n    }\n\n","sourceOld":"  public AbstractVisitingPrefixTreeFilter(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                                          int detailLevel, int prefixGridScanLevel) {\n    super(queryShape, fieldName, grid, detailLevel);\n    this.prefixGridScanLevel = Math.max(0, Math.min(prefixGridScanLevel, grid.getMaxLevels() - 1));\n    assert detailLevel <= grid.getMaxLevels();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeQuery#AbstractVisitingPrefixTreeQuery(Shape,String,SpatialPrefixTree,int,int).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/AbstractVisitingPrefixTreeFilter#AbstractVisitingPrefixTreeFilter(Shape,String,SpatialPrefixTree,int,int).mjava","sourceNew":"  public AbstractVisitingPrefixTreeQuery(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                                         int detailLevel, int prefixGridScanLevel) {\n    super(queryShape, fieldName, grid, detailLevel);\n    this.prefixGridScanLevel = Math.max(0, Math.min(prefixGridScanLevel, grid.getMaxLevels() - 1));\n    assert detailLevel <= grid.getMaxLevels();\n  }\n\n","sourceOld":"  public AbstractVisitingPrefixTreeFilter(Shape queryShape, String fieldName, SpatialPrefixTree grid,\n                                          int detailLevel, int prefixGridScanLevel) {\n    super(queryShape, fieldName, grid, detailLevel);\n    this.prefixGridScanLevel = Math.max(0, Math.min(prefixGridScanLevel, grid.getMaxLevels() - 1));\n    assert detailLevel <= grid.getMaxLevels();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"672b198fc3dce868916c727917cae58c2906763d":["11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4":["3702440de9629167be64098f307cea70809df488"],"3702440de9629167be64098f307cea70809df488":["c659c37800c0dfd82fa025b5834f4ab065903d11"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["672b198fc3dce868916c727917cae58c2906763d"],"c659c37800c0dfd82fa025b5834f4ab065903d11":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"672b198fc3dce868916c727917cae58c2906763d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c659c37800c0dfd82fa025b5834f4ab065903d11"],"c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"3702440de9629167be64098f307cea70809df488":["c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","672b198fc3dce868916c727917cae58c2906763d"],"c659c37800c0dfd82fa025b5834f4ab065903d11":["3702440de9629167be64098f307cea70809df488"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}