{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/lt/TestLithuanianStemming#testNounsII().mjava","commits":[{"id":"6cc97ef80489825587c37e0ca2efa790041f7f76","date":1437752845,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/lt/TestLithuanianStemming#testNounsII().mjava","pathOld":"/dev/null","sourceNew":"  public void testNounsII() throws IOException {\n    // n. decl II (-a)\n    checkOneTerm(a, \"motina\",    \"motin\"); // nom. sing.\n    checkOneTerm(a, \"motinos\",   \"motin\"); // nom. pl.\n    checkOneTerm(a, \"motinos\",   \"motin\"); // gen. sg.\n    checkOneTerm(a, \"motinų\",    \"motin\"); // gen. pl.\n    checkOneTerm(a, \"motinai\",   \"motin\"); // dat. sg.\n    checkOneTerm(a, \"motinoms\",  \"motin\"); // dat. pl.\n    checkOneTerm(a, \"motiną\",    \"motin\"); // acc. sg.\n    checkOneTerm(a, \"motinas\",   \"motin\"); // acc. pl.\n    checkOneTerm(a, \"motina\",    \"motin\"); // ins. sg.\n    checkOneTerm(a, \"motinomis\", \"motin\"); // ins. pl.\n    checkOneTerm(a, \"motinoje\",  \"motin\"); // loc. sg.\n    checkOneTerm(a, \"motinose\",  \"motin\"); // loc. pl.\n    checkOneTerm(a, \"motina\",    \"motin\"); // voc. sg.\n    checkOneTerm(a, \"motinos\",   \"motin\"); // voc. pl.\n    \n    // n. decl II (-ė)\n    checkOneTerm(a, \"katė\",    \"kat\"); // nom. sing.\n    checkOneTerm(a, \"katės\",   \"kat\"); // nom. pl.\n    checkOneTerm(a, \"katės\",   \"kat\"); // gen. sg.\n    checkOneTerm(a, \"kačių\",   \"kat\"); // gen. pl.\n    checkOneTerm(a, \"katei\",   \"kat\"); // dat. sg.\n    checkOneTerm(a, \"katėms\",  \"kat\"); // dat. pl.\n    checkOneTerm(a, \"katę\",    \"kat\"); // acc. sg.\n    checkOneTerm(a, \"kates\",   \"kat\"); // acc. pl.\n    checkOneTerm(a, \"kate\",    \"kat\"); // ins. sg.\n    checkOneTerm(a, \"katėmis\", \"kat\"); // ins. pl.\n    checkOneTerm(a, \"katėje\",  \"kat\"); // loc. sg.\n    checkOneTerm(a, \"katėse\",  \"kat\"); // loc. pl.\n    checkOneTerm(a, \"kate\",    \"kat\"); // voc. sg.\n    checkOneTerm(a, \"katės\",   \"kat\"); // voc. pl.\n    \n    // n. decl II (-ti)\n    checkOneTerm(a, \"pati\",     \"pat\"); // nom. sing.\n    checkOneTerm(a, \"pačios\",   \"pat\"); // nom. pl.\n    checkOneTerm(a, \"pačios\",   \"pat\"); // gen. sg.\n    checkOneTerm(a, \"pačių\",    \"pat\"); // gen. pl.\n    checkOneTerm(a, \"pačiai\",   \"pat\"); // dat. sg.\n    checkOneTerm(a, \"pačioms\",  \"pat\"); // dat. pl.\n    checkOneTerm(a, \"pačią\",    \"pat\"); // acc. sg.\n    checkOneTerm(a, \"pačias\",   \"pat\"); // acc. pl.\n    checkOneTerm(a, \"pačia\",    \"pat\"); // ins. sg.\n    checkOneTerm(a, \"pačiomis\", \"pat\"); // ins. pl.\n    checkOneTerm(a, \"pačioje\",  \"pat\"); // loc. sg.\n    checkOneTerm(a, \"pačiose\",  \"pat\"); // loc. pl.\n    checkOneTerm(a, \"pati\",     \"pat\"); // voc. sg.\n    checkOneTerm(a, \"pačios\",   \"pat\"); // voc. pl.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6cc97ef80489825587c37e0ca2efa790041f7f76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6cc97ef80489825587c37e0ca2efa790041f7f76"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6cc97ef80489825587c37e0ca2efa790041f7f76"],"6cc97ef80489825587c37e0ca2efa790041f7f76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}