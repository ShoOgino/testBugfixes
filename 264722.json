{"path":"lucene/backwards/src/java/org/apache/lucene/index/MultiLevelSkipListReader#skipTo(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/MultiLevelSkipListReader#skipTo(int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/MultiLevelSkipListReader#skipTo(int).mjava","sourceNew":"  /** Skips entries to the first beyond the current whose document number is\n   *  greater than or equal to <i>target</i>. Returns the current doc count. \n   */\n  int skipTo(int target) throws IOException {\n    if (!haveSkipped) {\n      // first time, load skip levels\n      loadSkipLevels();\n      haveSkipped = true;\n    }\n  \n    // walk up the levels until highest level is found that has a skip\n    // for this target\n    int level = 0;\n    while (level < numberOfSkipLevels - 1 && target > skipDoc[level + 1]) {\n      level++;\n    }    \n\n    while (level >= 0) {\n      if (target > skipDoc[level]) {\n        if (!loadNextSkip(level)) {\n          continue;\n        }\n      } else {\n        // no more skips on this level, go down one level\n        if (level > 0 && lastChildPointer > skipStream[level - 1].getFilePointer()) {\n          seekChild(level - 1);\n        } \n        level--;\n      }\n    }\n    \n    return numSkipped[0] - skipInterval[0] - 1;\n  }\n\n","sourceOld":"  /** Skips entries to the first beyond the current whose document number is\n   *  greater than or equal to <i>target</i>. Returns the current doc count. \n   */\n  int skipTo(int target) throws IOException {\n    if (!haveSkipped) {\n      // first time, load skip levels\n      loadSkipLevels();\n      haveSkipped = true;\n    }\n  \n    // walk up the levels until highest level is found that has a skip\n    // for this target\n    int level = 0;\n    while (level < numberOfSkipLevels - 1 && target > skipDoc[level + 1]) {\n      level++;\n    }    \n\n    while (level >= 0) {\n      if (target > skipDoc[level]) {\n        if (!loadNextSkip(level)) {\n          continue;\n        }\n      } else {\n        // no more skips on this level, go down one level\n        if (level > 0 && lastChildPointer > skipStream[level - 1].getFilePointer()) {\n          seekChild(level - 1);\n        } \n        level--;\n      }\n    }\n    \n    return numSkipped[0] - skipInterval[0] - 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/MultiLevelSkipListReader#skipTo(int).mjava","sourceNew":null,"sourceOld":"  /** Skips entries to the first beyond the current whose document number is\n   *  greater than or equal to <i>target</i>. Returns the current doc count. \n   */\n  int skipTo(int target) throws IOException {\n    if (!haveSkipped) {\n      // first time, load skip levels\n      loadSkipLevels();\n      haveSkipped = true;\n    }\n  \n    // walk up the levels until highest level is found that has a skip\n    // for this target\n    int level = 0;\n    while (level < numberOfSkipLevels - 1 && target > skipDoc[level + 1]) {\n      level++;\n    }    \n\n    while (level >= 0) {\n      if (target > skipDoc[level]) {\n        if (!loadNextSkip(level)) {\n          continue;\n        }\n      } else {\n        // no more skips on this level, go down one level\n        if (level > 0 && lastChildPointer > skipStream[level - 1].getFilePointer()) {\n          seekChild(level - 1);\n        } \n        level--;\n      }\n    }\n    \n    return numSkipped[0] - skipInterval[0] - 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}