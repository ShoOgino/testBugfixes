{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/AnalyzerUtil#getMaxTokenAnalyzer(Analyzer,int).mjava","commits":[{"id":"3bae93f7963db7dbae2fece3941cdbcb1369eaeb","date":1133766624,"type":1,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/AnalyzerUtil#getMaxTokenAnalyzer(Analyzer,int).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/AnalyzerUtil#getMaxTokenAnalyzer(Analyzer,int,int).mjava","sourceNew":"\t/**\n\t * Returns an analyzer wrapper that returns at most the first\n\t * <code>maxTokens</code> tokens from the underlying child analyzer,\n\t * ignoring all remaining tokens.\n\t * \n\t * @param child\n\t *            the underlying child analyzer\n\t * @param maxTokens\n\t *            the maximum number of tokens to return from the underlying\n\t *            analyzer (a value of Integer.MAX_VALUE indicates unlimited)\n\t * @return an analyzer wrapper\n\t */\n\tpublic static Analyzer getMaxTokenAnalyzer(\n\t\t\tfinal Analyzer child, final int maxTokens) {\n\t\t\n\t\tif (child == null) \n\t\t\tthrow new IllegalArgumentException(\"child analyzer must not be null\");\n\t\tif (maxTokens < 0) \n\t\t\tthrow new IllegalArgumentException(\"maxTokens must not be negative\");\n\t\tif (maxTokens == Integer.MAX_VALUE) \n\t\t\treturn child; // no need to wrap\n\t\n\t\treturn new Analyzer() {\n\t\t\tpublic TokenStream tokenStream(String fieldName, Reader reader) {\n\t\t\t\treturn new TokenFilter(child.tokenStream(fieldName, reader)) {\n\t\t\t\t\tprivate int todo = maxTokens;\n\t\t\t\t\t\n\t\t\t\t\tpublic Token next() throws IOException {\n\t\t\t\t\t\treturn --todo >= 0 ? input.next() : null;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n\n","sourceOld":"\t/**\n\t * Returns an analyzer wrapper that returns at most the first\n\t * <code>maxTokens</code> tokens from the underlying child analyzer,\n\t * ignoring all remaining tokens.\n\t * \n\t * @param child\n\t *            the underlying child analyzer\n\t * @param maxTokens\n\t *            the maximum number of tokens to return from the underlying\n\t *            analyzer (a value of Integer.MAX_VALUE indicates unlimited)\n\t * @return an analyzer wrapper\n\t */\n\tpublic static Analyzer getMaxTokenAnalyzer(\n\t\t\tfinal Analyzer child, final int maxTokens, final int maxChars) {\n\t\t\n\t\tif (child == null) \n\t\t\tthrow new IllegalArgumentException(\"child analyzer must not be null\");\n\t\tif (maxTokens < 0) \n\t\t\tthrow new IllegalArgumentException(\"maxTokens must not be negative\");\n\t\tif (maxTokens == Integer.MAX_VALUE) \n\t\t\treturn child; // no need to wrap\n\t\n\t\treturn new Analyzer() {\n\t\t\tpublic TokenStream tokenStream(String fieldName, Reader reader) {\n\t\t\t\treturn new TokenFilter(child.tokenStream(fieldName, reader)) {\n\t\t\t\t\tprivate int todo = maxTokens;\n\t\t\t\t\t\n\t\t\t\t\tpublic Token next() throws IOException {\n\t\t\t\t\t\treturn --todo >= 0 ? input.next() : null;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/AnalyzerUtil#getMaxTokenAnalyzer(Analyzer,int).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/AnalyzerUtil#getMaxTokenAnalyzer(Analyzer,int).mjava","sourceNew":"  /**\n   * Returns an analyzer wrapper that returns at most the first\n   * <code>maxTokens</code> tokens from the underlying child analyzer,\n   * ignoring all remaining tokens.\n   * \n   * @param child\n   *            the underlying child analyzer\n   * @param maxTokens\n   *            the maximum number of tokens to return from the underlying\n   *            analyzer (a value of Integer.MAX_VALUE indicates unlimited)\n   * @return an analyzer wrapper\n   */\n  public static Analyzer getMaxTokenAnalyzer(\n      final Analyzer child, final int maxTokens) {\n    \n    if (child == null) \n      throw new IllegalArgumentException(\"child analyzer must not be null\");\n    if (maxTokens < 0) \n      throw new IllegalArgumentException(\"maxTokens must not be negative\");\n    if (maxTokens == Integer.MAX_VALUE) \n      return child; // no need to wrap\n  \n    return new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(child.tokenStream(fieldName, reader)) {\n          private int todo = maxTokens;\n          \n          public Token next() throws IOException {\n            return --todo >= 0 ? input.next() : null;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"\t/**\n\t * Returns an analyzer wrapper that returns at most the first\n\t * <code>maxTokens</code> tokens from the underlying child analyzer,\n\t * ignoring all remaining tokens.\n\t * \n\t * @param child\n\t *            the underlying child analyzer\n\t * @param maxTokens\n\t *            the maximum number of tokens to return from the underlying\n\t *            analyzer (a value of Integer.MAX_VALUE indicates unlimited)\n\t * @return an analyzer wrapper\n\t */\n\tpublic static Analyzer getMaxTokenAnalyzer(\n\t\t\tfinal Analyzer child, final int maxTokens) {\n\t\t\n\t\tif (child == null) \n\t\t\tthrow new IllegalArgumentException(\"child analyzer must not be null\");\n\t\tif (maxTokens < 0) \n\t\t\tthrow new IllegalArgumentException(\"maxTokens must not be negative\");\n\t\tif (maxTokens == Integer.MAX_VALUE) \n\t\t\treturn child; // no need to wrap\n\t\n\t\treturn new Analyzer() {\n\t\t\tpublic TokenStream tokenStream(String fieldName, Reader reader) {\n\t\t\t\treturn new TokenFilter(child.tokenStream(fieldName, reader)) {\n\t\t\t\t\tprivate int todo = maxTokens;\n\t\t\t\t\t\n\t\t\t\t\tpublic Token next() throws IOException {\n\t\t\t\t\t\treturn --todo >= 0 ? input.next() : null;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/AnalyzerUtil#getMaxTokenAnalyzer(Analyzer,int).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/AnalyzerUtil#getMaxTokenAnalyzer(Analyzer,int).mjava","sourceNew":"  /**\n   * Returns an analyzer wrapper that returns at most the first\n   * <code>maxTokens</code> tokens from the underlying child analyzer,\n   * ignoring all remaining tokens.\n   * \n   * @param child\n   *            the underlying child analyzer\n   * @param maxTokens\n   *            the maximum number of tokens to return from the underlying\n   *            analyzer (a value of Integer.MAX_VALUE indicates unlimited)\n   * @return an analyzer wrapper\n   */\n  public static Analyzer getMaxTokenAnalyzer(\n      final Analyzer child, final int maxTokens) {\n    \n    if (child == null) \n      throw new IllegalArgumentException(\"child analyzer must not be null\");\n    if (maxTokens < 0) \n      throw new IllegalArgumentException(\"maxTokens must not be negative\");\n    if (maxTokens == Integer.MAX_VALUE) \n      return child; // no need to wrap\n  \n    return new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(child.tokenStream(fieldName, reader)) {\n          private int todo = maxTokens;\n          \n          public Token next(final Token reusableToken) throws IOException {\n            assert reusableToken != null;\n            return --todo >= 0 ? input.next(reusableToken) : null;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns an analyzer wrapper that returns at most the first\n   * <code>maxTokens</code> tokens from the underlying child analyzer,\n   * ignoring all remaining tokens.\n   * \n   * @param child\n   *            the underlying child analyzer\n   * @param maxTokens\n   *            the maximum number of tokens to return from the underlying\n   *            analyzer (a value of Integer.MAX_VALUE indicates unlimited)\n   * @return an analyzer wrapper\n   */\n  public static Analyzer getMaxTokenAnalyzer(\n      final Analyzer child, final int maxTokens) {\n    \n    if (child == null) \n      throw new IllegalArgumentException(\"child analyzer must not be null\");\n    if (maxTokens < 0) \n      throw new IllegalArgumentException(\"maxTokens must not be negative\");\n    if (maxTokens == Integer.MAX_VALUE) \n      return child; // no need to wrap\n  \n    return new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(child.tokenStream(fieldName, reader)) {\n          private int todo = maxTokens;\n          \n          public Token next() throws IOException {\n            return --todo >= 0 ? input.next() : null;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/AnalyzerUtil#getMaxTokenAnalyzer(Analyzer,int).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/AnalyzerUtil#getMaxTokenAnalyzer(Analyzer,int).mjava","sourceNew":"  /**\n   * Returns an analyzer wrapper that returns at most the first\n   * <code>maxTokens</code> tokens from the underlying child analyzer,\n   * ignoring all remaining tokens.\n   * \n   * @param child\n   *            the underlying child analyzer\n   * @param maxTokens\n   *            the maximum number of tokens to return from the underlying\n   *            analyzer (a value of Integer.MAX_VALUE indicates unlimited)\n   * @return an analyzer wrapper\n   */\n  public static Analyzer getMaxTokenAnalyzer(\n      final Analyzer child, final int maxTokens) {\n    \n    if (child == null) \n      throw new IllegalArgumentException(\"child analyzer must not be null\");\n    if (maxTokens < 0) \n      throw new IllegalArgumentException(\"maxTokens must not be negative\");\n    if (maxTokens == Integer.MAX_VALUE) \n      return child; // no need to wrap\n  \n    return new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(child.tokenStream(fieldName, reader)) {\n          private int todo = maxTokens;\n          \n          public boolean incrementToken() throws IOException {\n            return --todo >= 0 ? input.incrementToken() : false;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns an analyzer wrapper that returns at most the first\n   * <code>maxTokens</code> tokens from the underlying child analyzer,\n   * ignoring all remaining tokens.\n   * \n   * @param child\n   *            the underlying child analyzer\n   * @param maxTokens\n   *            the maximum number of tokens to return from the underlying\n   *            analyzer (a value of Integer.MAX_VALUE indicates unlimited)\n   * @return an analyzer wrapper\n   */\n  public static Analyzer getMaxTokenAnalyzer(\n      final Analyzer child, final int maxTokens) {\n    \n    if (child == null) \n      throw new IllegalArgumentException(\"child analyzer must not be null\");\n    if (maxTokens < 0) \n      throw new IllegalArgumentException(\"maxTokens must not be negative\");\n    if (maxTokens == Integer.MAX_VALUE) \n      return child; // no need to wrap\n  \n    return new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(child.tokenStream(fieldName, reader)) {\n          private int todo = maxTokens;\n          \n          public Token next(final Token reusableToken) throws IOException {\n            assert reusableToken != null;\n            return --todo >= 0 ? input.next(reusableToken) : null;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d68e5c46e6a5ebdf4dafec4a123344092b915cc0","date":1256752193,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/wordnet/src/java/org/apache/lucene/wordnet/AnalyzerUtil#getMaxTokenAnalyzer(Analyzer,int).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/AnalyzerUtil#getMaxTokenAnalyzer(Analyzer,int).mjava","sourceNew":"  /**\n   * Returns an analyzer wrapper that returns at most the first\n   * <code>maxTokens</code> tokens from the underlying child analyzer,\n   * ignoring all remaining tokens.\n   * \n   * @param child\n   *            the underlying child analyzer\n   * @param maxTokens\n   *            the maximum number of tokens to return from the underlying\n   *            analyzer (a value of Integer.MAX_VALUE indicates unlimited)\n   * @return an analyzer wrapper\n   */\n  public static Analyzer getMaxTokenAnalyzer(\n      final Analyzer child, final int maxTokens) {\n    \n    if (child == null) \n      throw new IllegalArgumentException(\"child analyzer must not be null\");\n    if (maxTokens < 0) \n      throw new IllegalArgumentException(\"maxTokens must not be negative\");\n    if (maxTokens == Integer.MAX_VALUE) \n      return child; // no need to wrap\n  \n    return new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(child.tokenStream(fieldName, reader)) {\n          private int todo = maxTokens;\n          \n          public boolean incrementToken() throws IOException {\n            return --todo >= 0 ? input.incrementToken() : false;\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Returns an analyzer wrapper that returns at most the first\n   * <code>maxTokens</code> tokens from the underlying child analyzer,\n   * ignoring all remaining tokens.\n   * \n   * @param child\n   *            the underlying child analyzer\n   * @param maxTokens\n   *            the maximum number of tokens to return from the underlying\n   *            analyzer (a value of Integer.MAX_VALUE indicates unlimited)\n   * @return an analyzer wrapper\n   */\n  public static Analyzer getMaxTokenAnalyzer(\n      final Analyzer child, final int maxTokens) {\n    \n    if (child == null) \n      throw new IllegalArgumentException(\"child analyzer must not be null\");\n    if (maxTokens < 0) \n      throw new IllegalArgumentException(\"maxTokens must not be negative\");\n    if (maxTokens == Integer.MAX_VALUE) \n      return child; // no need to wrap\n  \n    return new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(child.tokenStream(fieldName, reader)) {\n          private int todo = maxTokens;\n          \n          public boolean incrementToken() throws IOException {\n            return --todo >= 0 ? input.incrementToken() : false;\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["3bae93f7963db7dbae2fece3941cdbcb1369eaeb"],"3bae93f7963db7dbae2fece3941cdbcb1369eaeb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["9b5756469957918cac40a831acec9cf01c8c2bb3"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bae93f7963db7dbae2fece3941cdbcb1369eaeb"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"3bae93f7963db7dbae2fece3941cdbcb1369eaeb":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}