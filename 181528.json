{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#addEpsilons(Automaton,Collection[StatePair]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#addEpsilons(Automaton,Collection[StatePair]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#addEpsilons(Automaton,Collection[StatePair]).mjava","sourceNew":"  /**\n   * Adds epsilon transitions to the given automaton. This method adds extra\n   * character interval transitions that are equivalent to the given set of\n   * epsilon transitions.\n   * \n   * @param pairs collection of {@link StatePair} objects representing pairs of\n   *          source/destination states where epsilon transitions should be\n   *          added\n   */\n  public static void addEpsilons(Automaton a, Collection<StatePair> pairs) {\n    a.expandSingleton();\n    HashMap<State,HashSet<State>> forward = new HashMap<State,HashSet<State>>();\n    HashMap<State,HashSet<State>> back = new HashMap<State,HashSet<State>>();\n    for (StatePair p : pairs) {\n      HashSet<State> to = forward.get(p.s1);\n      if (to == null) {\n        to = new HashSet<State>();\n        forward.put(p.s1, to);\n      }\n      to.add(p.s2);\n      HashSet<State> from = back.get(p.s2);\n      if (from == null) {\n        from = new HashSet<State>();\n        back.put(p.s2, from);\n      }\n      from.add(p.s1);\n    }\n    // calculate epsilon closure\n    LinkedList<StatePair> worklist = new LinkedList<StatePair>(pairs);\n    HashSet<StatePair> workset = new HashSet<StatePair>(pairs);\n    while (!worklist.isEmpty()) {\n      StatePair p = worklist.removeFirst();\n      workset.remove(p);\n      HashSet<State> to = forward.get(p.s2);\n      HashSet<State> from = back.get(p.s1);\n      if (to != null) {\n        for (State s : to) {\n          StatePair pp = new StatePair(p.s1, s);\n          if (!pairs.contains(pp)) {\n            pairs.add(pp);\n            forward.get(p.s1).add(s);\n            back.get(s).add(p.s1);\n            worklist.add(pp);\n            workset.add(pp);\n            if (from != null) {\n              for (State q : from) {\n                StatePair qq = new StatePair(q, p.s1);\n                if (!workset.contains(qq)) {\n                  worklist.add(qq);\n                  workset.add(qq);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    // add transitions\n    for (StatePair p : pairs)\n      p.s1.addEpsilon(p.s2);\n    a.deterministic = false;\n    //a.clearHashCode();\n    a.clearNumberedStates();\n    a.checkMinimizeAlways();\n  }\n\n","sourceOld":"  /**\n   * Adds epsilon transitions to the given automaton. This method adds extra\n   * character interval transitions that are equivalent to the given set of\n   * epsilon transitions.\n   * \n   * @param pairs collection of {@link StatePair} objects representing pairs of\n   *          source/destination states where epsilon transitions should be\n   *          added\n   */\n  public static void addEpsilons(Automaton a, Collection<StatePair> pairs) {\n    a.expandSingleton();\n    HashMap<State,HashSet<State>> forward = new HashMap<State,HashSet<State>>();\n    HashMap<State,HashSet<State>> back = new HashMap<State,HashSet<State>>();\n    for (StatePair p : pairs) {\n      HashSet<State> to = forward.get(p.s1);\n      if (to == null) {\n        to = new HashSet<State>();\n        forward.put(p.s1, to);\n      }\n      to.add(p.s2);\n      HashSet<State> from = back.get(p.s2);\n      if (from == null) {\n        from = new HashSet<State>();\n        back.put(p.s2, from);\n      }\n      from.add(p.s1);\n    }\n    // calculate epsilon closure\n    LinkedList<StatePair> worklist = new LinkedList<StatePair>(pairs);\n    HashSet<StatePair> workset = new HashSet<StatePair>(pairs);\n    while (!worklist.isEmpty()) {\n      StatePair p = worklist.removeFirst();\n      workset.remove(p);\n      HashSet<State> to = forward.get(p.s2);\n      HashSet<State> from = back.get(p.s1);\n      if (to != null) {\n        for (State s : to) {\n          StatePair pp = new StatePair(p.s1, s);\n          if (!pairs.contains(pp)) {\n            pairs.add(pp);\n            forward.get(p.s1).add(s);\n            back.get(s).add(p.s1);\n            worklist.add(pp);\n            workset.add(pp);\n            if (from != null) {\n              for (State q : from) {\n                StatePair qq = new StatePair(q, p.s1);\n                if (!workset.contains(qq)) {\n                  worklist.add(qq);\n                  workset.add(qq);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    // add transitions\n    for (StatePair p : pairs)\n      p.s1.addEpsilon(p.s2);\n    a.deterministic = false;\n    //a.clearHashCode();\n    a.clearNumberedStates();\n    a.checkMinimizeAlways();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#addEpsilons(Automaton,Collection[StatePair]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#addEpsilons(Automaton,Collection[StatePair]).mjava","sourceNew":"  /**\n   * Adds epsilon transitions to the given automaton. This method adds extra\n   * character interval transitions that are equivalent to the given set of\n   * epsilon transitions.\n   * \n   * @param pairs collection of {@link StatePair} objects representing pairs of\n   *          source/destination states where epsilon transitions should be\n   *          added\n   */\n  public static void addEpsilons(Automaton a, Collection<StatePair> pairs) {\n    a.expandSingleton();\n    HashMap<State,HashSet<State>> forward = new HashMap<>();\n    HashMap<State,HashSet<State>> back = new HashMap<>();\n    for (StatePair p : pairs) {\n      HashSet<State> to = forward.get(p.s1);\n      if (to == null) {\n        to = new HashSet<>();\n        forward.put(p.s1, to);\n      }\n      to.add(p.s2);\n      HashSet<State> from = back.get(p.s2);\n      if (from == null) {\n        from = new HashSet<>();\n        back.put(p.s2, from);\n      }\n      from.add(p.s1);\n    }\n    // calculate epsilon closure\n    LinkedList<StatePair> worklist = new LinkedList<>(pairs);\n    HashSet<StatePair> workset = new HashSet<>(pairs);\n    while (!worklist.isEmpty()) {\n      StatePair p = worklist.removeFirst();\n      workset.remove(p);\n      HashSet<State> to = forward.get(p.s2);\n      HashSet<State> from = back.get(p.s1);\n      if (to != null) {\n        for (State s : to) {\n          StatePair pp = new StatePair(p.s1, s);\n          if (!pairs.contains(pp)) {\n            pairs.add(pp);\n            forward.get(p.s1).add(s);\n            back.get(s).add(p.s1);\n            worklist.add(pp);\n            workset.add(pp);\n            if (from != null) {\n              for (State q : from) {\n                StatePair qq = new StatePair(q, p.s1);\n                if (!workset.contains(qq)) {\n                  worklist.add(qq);\n                  workset.add(qq);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    // add transitions\n    for (StatePair p : pairs)\n      p.s1.addEpsilon(p.s2);\n    a.deterministic = false;\n    //a.clearHashCode();\n    a.clearNumberedStates();\n    a.checkMinimizeAlways();\n  }\n\n","sourceOld":"  /**\n   * Adds epsilon transitions to the given automaton. This method adds extra\n   * character interval transitions that are equivalent to the given set of\n   * epsilon transitions.\n   * \n   * @param pairs collection of {@link StatePair} objects representing pairs of\n   *          source/destination states where epsilon transitions should be\n   *          added\n   */\n  public static void addEpsilons(Automaton a, Collection<StatePair> pairs) {\n    a.expandSingleton();\n    HashMap<State,HashSet<State>> forward = new HashMap<State,HashSet<State>>();\n    HashMap<State,HashSet<State>> back = new HashMap<State,HashSet<State>>();\n    for (StatePair p : pairs) {\n      HashSet<State> to = forward.get(p.s1);\n      if (to == null) {\n        to = new HashSet<State>();\n        forward.put(p.s1, to);\n      }\n      to.add(p.s2);\n      HashSet<State> from = back.get(p.s2);\n      if (from == null) {\n        from = new HashSet<State>();\n        back.put(p.s2, from);\n      }\n      from.add(p.s1);\n    }\n    // calculate epsilon closure\n    LinkedList<StatePair> worklist = new LinkedList<StatePair>(pairs);\n    HashSet<StatePair> workset = new HashSet<StatePair>(pairs);\n    while (!worklist.isEmpty()) {\n      StatePair p = worklist.removeFirst();\n      workset.remove(p);\n      HashSet<State> to = forward.get(p.s2);\n      HashSet<State> from = back.get(p.s1);\n      if (to != null) {\n        for (State s : to) {\n          StatePair pp = new StatePair(p.s1, s);\n          if (!pairs.contains(pp)) {\n            pairs.add(pp);\n            forward.get(p.s1).add(s);\n            back.get(s).add(p.s1);\n            worklist.add(pp);\n            workset.add(pp);\n            if (from != null) {\n              for (State q : from) {\n                StatePair qq = new StatePair(q, p.s1);\n                if (!workset.contains(qq)) {\n                  worklist.add(qq);\n                  workset.add(qq);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    // add transitions\n    for (StatePair p : pairs)\n      p.s1.addEpsilon(p.s2);\n    a.deterministic = false;\n    //a.clearHashCode();\n    a.clearNumberedStates();\n    a.checkMinimizeAlways();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#addEpsilons(Automaton,Collection[StatePair]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Adds epsilon transitions to the given automaton. This method adds extra\n   * character interval transitions that are equivalent to the given set of\n   * epsilon transitions.\n   * \n   * @param pairs collection of {@link StatePair} objects representing pairs of\n   *          source/destination states where epsilon transitions should be\n   *          added\n   */\n  public static void addEpsilons(Automaton a, Collection<StatePair> pairs) {\n    a.expandSingleton();\n    HashMap<State,HashSet<State>> forward = new HashMap<>();\n    HashMap<State,HashSet<State>> back = new HashMap<>();\n    for (StatePair p : pairs) {\n      HashSet<State> to = forward.get(p.s1);\n      if (to == null) {\n        to = new HashSet<>();\n        forward.put(p.s1, to);\n      }\n      to.add(p.s2);\n      HashSet<State> from = back.get(p.s2);\n      if (from == null) {\n        from = new HashSet<>();\n        back.put(p.s2, from);\n      }\n      from.add(p.s1);\n    }\n    // calculate epsilon closure\n    LinkedList<StatePair> worklist = new LinkedList<>(pairs);\n    HashSet<StatePair> workset = new HashSet<>(pairs);\n    while (!worklist.isEmpty()) {\n      StatePair p = worklist.removeFirst();\n      workset.remove(p);\n      HashSet<State> to = forward.get(p.s2);\n      HashSet<State> from = back.get(p.s1);\n      if (to != null) {\n        for (State s : to) {\n          StatePair pp = new StatePair(p.s1, s);\n          if (!pairs.contains(pp)) {\n            pairs.add(pp);\n            forward.get(p.s1).add(s);\n            back.get(s).add(p.s1);\n            worklist.add(pp);\n            workset.add(pp);\n            if (from != null) {\n              for (State q : from) {\n                StatePair qq = new StatePair(q, p.s1);\n                if (!workset.contains(qq)) {\n                  worklist.add(qq);\n                  workset.add(qq);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    // add transitions\n    for (StatePair p : pairs)\n      p.s1.addEpsilon(p.s2);\n    a.deterministic = false;\n    //a.clearHashCode();\n    a.clearNumberedStates();\n    a.checkMinimizeAlways();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#addEpsilons(Automaton,Collection[StatePair]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Adds epsilon transitions to the given automaton. This method adds extra\n   * character interval transitions that are equivalent to the given set of\n   * epsilon transitions.\n   * \n   * @param pairs collection of {@link StatePair} objects representing pairs of\n   *          source/destination states where epsilon transitions should be\n   *          added\n   */\n  public static void addEpsilons(Automaton a, Collection<StatePair> pairs) {\n    a.expandSingleton();\n    HashMap<State,HashSet<State>> forward = new HashMap<>();\n    HashMap<State,HashSet<State>> back = new HashMap<>();\n    for (StatePair p : pairs) {\n      HashSet<State> to = forward.get(p.s1);\n      if (to == null) {\n        to = new HashSet<>();\n        forward.put(p.s1, to);\n      }\n      to.add(p.s2);\n      HashSet<State> from = back.get(p.s2);\n      if (from == null) {\n        from = new HashSet<>();\n        back.put(p.s2, from);\n      }\n      from.add(p.s1);\n    }\n    // calculate epsilon closure\n    LinkedList<StatePair> worklist = new LinkedList<>(pairs);\n    HashSet<StatePair> workset = new HashSet<>(pairs);\n    while (!worklist.isEmpty()) {\n      StatePair p = worklist.removeFirst();\n      workset.remove(p);\n      HashSet<State> to = forward.get(p.s2);\n      HashSet<State> from = back.get(p.s1);\n      if (to != null) {\n        for (State s : to) {\n          StatePair pp = new StatePair(p.s1, s);\n          if (!pairs.contains(pp)) {\n            pairs.add(pp);\n            forward.get(p.s1).add(s);\n            back.get(s).add(p.s1);\n            worklist.add(pp);\n            workset.add(pp);\n            if (from != null) {\n              for (State q : from) {\n                StatePair qq = new StatePair(q, p.s1);\n                if (!workset.contains(qq)) {\n                  worklist.add(qq);\n                  workset.add(qq);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    // add transitions\n    for (StatePair p : pairs)\n      p.s1.addEpsilon(p.s2);\n    a.deterministic = false;\n    //a.clearHashCode();\n    a.clearNumberedStates();\n    a.checkMinimizeAlways();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5c84485629d80d203608e8975a1139de9933cc38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}