{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestMultiRangeQueries#testFloatPointMultiRangeQuery().mjava","commits":[{"id":"bc29621aa343e88cbc47d168a1d556972a8d3851","date":1564149243,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestMultiRangeQueries#testFloatPointMultiRangeQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testFloatPointMultiRangeQuery() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    float[] firstPoint = {112.4f, 296.3f, 512.1f};\n    float[] secondPoint = {219.7f, 514.2f, 624.6f};\n\n    Document doc = new Document();\n    doc.add(new FloatPoint(\"point\", firstPoint));\n    iw.addDocument(doc);\n    iw.commit();\n\n    doc = new Document();\n    doc.add(new FloatPoint(\"point\", secondPoint));\n    iw.addDocument(doc);\n    iw.commit();\n\n    // One range matches\n    float[] firstLowerRange= {111.3f, 294.7f, 502.1f};\n    float[] firstUpperRange = {117.2f, 301.6f, 514.3f};\n\n    float[] secondLowerRange = {15.2f, 4.3f, 415.2f};\n    float[] secondUpperRange = {200.6f, 402.3f, 583.8f};\n\n    FloatPointMultiRangeBuilder builder = new FloatPointMultiRangeBuilder(\"point\", 3);\n\n    builder.add(firstLowerRange, firstUpperRange);\n    builder.add(secondLowerRange, secondUpperRange);\n\n    Query query = builder.build();\n\n    IndexReader reader = iw.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    assertEquals(searcher.count(query), 1);\n\n    // Both ranges match\n    float[] firstMatchingLowerRange= {111f, 294f, 502f};\n    float[] firstMatchingUpperRange = {117f, 301f, 514f};\n\n    float[] secondMatchingLowerRange = {212f, 512f, 415f};\n    float[] secondMatchingUpperRange = {228f, 538f, 647f};\n\n    FloatPointMultiRangeBuilder builder2 = new FloatPointMultiRangeBuilder(\"point\", 3);\n\n    builder2.add(firstMatchingLowerRange, firstMatchingUpperRange);\n    builder2.add(secondMatchingLowerRange, secondMatchingUpperRange);\n\n    query = builder2.build();\n\n    assertEquals(searcher.count(query), 2);\n\n    // None Match\n    float[] nonMatchingFirstRangeLower = {1.4f, 3.3f, 2.7f};\n    float[] nonMatchingFirstRangeUpper = {5.4f, 8.2f, 7.3f};\n\n    float[] nonMatchingSecondRangeLower = {11246.2f, 19388.6f, 21248.3f};\n    float[] nonMatchingSecondRangeUpper = {13242.4f, 20214.7f, 23236.3f};\n    FloatPointMultiRangeBuilder builder3 = new FloatPointMultiRangeBuilder(\"point\", 3);\n\n    builder3.add(nonMatchingFirstRangeLower, nonMatchingFirstRangeUpper);\n    builder3.add(nonMatchingSecondRangeLower, nonMatchingSecondRangeUpper);\n\n    query = builder3.build();\n\n    assertEquals(searcher.count(query), 0);\n\n    // Lower point is equal to a point\n    float[] firstEqualsLowerPoint= {112.4f, 296.3f, 512.1f};\n    float[] firstEqualsUpperPoint = {117.3f, 299.4f, 519.3f};\n\n    float[] secondEqualsLowerPoint = {219.7f, 514.2f, 624.6f};\n    float[] secondEqualsUpperPoint = {13242.4f, 20214.7f, 23236.3f};\n\n    FloatPointMultiRangeBuilder builder4 = new FloatPointMultiRangeBuilder(\"point\", 3);\n\n    builder4.add(firstEqualsLowerPoint, firstEqualsUpperPoint);\n    builder4.add(secondEqualsLowerPoint, secondEqualsUpperPoint);\n\n    query = builder4.build();\n\n    assertEquals(searcher.count(query), 2);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf9da1d4a2d2f04a562030d1d46862163f506f62","date":1566205061,"type":0,"author":"Jim Ferenczi","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestMultiRangeQueries#testFloatPointMultiRangeQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testFloatPointMultiRangeQuery() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    float[] firstPoint = {112.4f, 296.3f, 512.1f};\n    float[] secondPoint = {219.7f, 514.2f, 624.6f};\n\n    Document doc = new Document();\n    doc.add(new FloatPoint(\"point\", firstPoint));\n    iw.addDocument(doc);\n    iw.commit();\n\n    doc = new Document();\n    doc.add(new FloatPoint(\"point\", secondPoint));\n    iw.addDocument(doc);\n    iw.commit();\n\n    // One range matches\n    float[] firstLowerRange= {111.3f, 294.7f, 502.1f};\n    float[] firstUpperRange = {117.2f, 301.6f, 514.3f};\n\n    float[] secondLowerRange = {15.2f, 4.3f, 415.2f};\n    float[] secondUpperRange = {200.6f, 402.3f, 583.8f};\n\n    FloatPointMultiRangeBuilder builder = new FloatPointMultiRangeBuilder(\"point\", 3);\n\n    builder.add(firstLowerRange, firstUpperRange);\n    builder.add(secondLowerRange, secondUpperRange);\n\n    Query query = builder.build();\n\n    IndexReader reader = iw.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    assertEquals(searcher.count(query), 1);\n\n    // Both ranges match\n    float[] firstMatchingLowerRange= {111f, 294f, 502f};\n    float[] firstMatchingUpperRange = {117f, 301f, 514f};\n\n    float[] secondMatchingLowerRange = {212f, 512f, 415f};\n    float[] secondMatchingUpperRange = {228f, 538f, 647f};\n\n    FloatPointMultiRangeBuilder builder2 = new FloatPointMultiRangeBuilder(\"point\", 3);\n\n    builder2.add(firstMatchingLowerRange, firstMatchingUpperRange);\n    builder2.add(secondMatchingLowerRange, secondMatchingUpperRange);\n\n    query = builder2.build();\n\n    assertEquals(searcher.count(query), 2);\n\n    // None Match\n    float[] nonMatchingFirstRangeLower = {1.4f, 3.3f, 2.7f};\n    float[] nonMatchingFirstRangeUpper = {5.4f, 8.2f, 7.3f};\n\n    float[] nonMatchingSecondRangeLower = {11246.2f, 19388.6f, 21248.3f};\n    float[] nonMatchingSecondRangeUpper = {13242.4f, 20214.7f, 23236.3f};\n    FloatPointMultiRangeBuilder builder3 = new FloatPointMultiRangeBuilder(\"point\", 3);\n\n    builder3.add(nonMatchingFirstRangeLower, nonMatchingFirstRangeUpper);\n    builder3.add(nonMatchingSecondRangeLower, nonMatchingSecondRangeUpper);\n\n    query = builder3.build();\n\n    assertEquals(searcher.count(query), 0);\n\n    // Lower point is equal to a point\n    float[] firstEqualsLowerPoint= {112.4f, 296.3f, 512.1f};\n    float[] firstEqualsUpperPoint = {117.3f, 299.4f, 519.3f};\n\n    float[] secondEqualsLowerPoint = {219.7f, 514.2f, 624.6f};\n    float[] secondEqualsUpperPoint = {13242.4f, 20214.7f, 23236.3f};\n\n    FloatPointMultiRangeBuilder builder4 = new FloatPointMultiRangeBuilder(\"point\", 3);\n\n    builder4.add(firstEqualsLowerPoint, firstEqualsUpperPoint);\n    builder4.add(secondEqualsLowerPoint, secondEqualsUpperPoint);\n\n    query = builder4.build();\n\n    assertEquals(searcher.count(query), 2);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc29621aa343e88cbc47d168a1d556972a8d3851":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf9da1d4a2d2f04a562030d1d46862163f506f62":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc29621aa343e88cbc47d168a1d556972a8d3851"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf9da1d4a2d2f04a562030d1d46862163f506f62"]},"commit2Childs":{"bc29621aa343e88cbc47d168a1d556972a8d3851":["cf9da1d4a2d2f04a562030d1d46862163f506f62"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc29621aa343e88cbc47d168a1d556972a8d3851","cf9da1d4a2d2f04a562030d1d46862163f506f62"],"cf9da1d4a2d2f04a562030d1d46862163f506f62":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}