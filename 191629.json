{"path":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#clustersToNamedList(List[Cluster],List[NamedList[Object]],boolean,int).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#clustersToNamedList(List[Cluster],List[NamedList[Object]],boolean,int).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#clustersToNamedList(List[Cluster],List[NamedList[Object]],boolean,int).mjava","sourceNew":"  private void clustersToNamedList(List<Cluster> outputClusters,\n                                   List<NamedList<Object>> parent, boolean outputSubClusters, int maxLabels) {\n    for (Cluster outCluster : outputClusters) {\n      NamedList<Object> cluster = new SimpleOrderedMap<Object>();\n      parent.add(cluster);\n\n      // Add labels\n      List<String> labels = outCluster.getPhrases();\n      if (labels.size() > maxLabels) {\n        labels = labels.subList(0, maxLabels);\n      }\n      cluster.add(\"labels\", labels);\n\n      // Add cluster score\n      final Double score = outCluster.getScore();\n      if (score != null) {\n        cluster.add(\"score\", score);\n      }\n\n      // Add other topics marker\n      if (outCluster.isOtherTopics()) {\n        cluster.add(\"other-topics\", outCluster.isOtherTopics());\n      }\n\n      // Add documents\n      List<Document> docs = outputSubClusters ? outCluster.getDocuments() : outCluster.getAllDocuments();\n      List<Object> docList = Lists.newArrayList();\n      cluster.add(\"docs\", docList);\n      for (Document doc : docs) {\n        docList.add(doc.getField(SOLR_DOCUMENT_ID));\n      }\n\n      // Add subclusters\n      if (outputSubClusters && !outCluster.getSubclusters().isEmpty()) {\n        List<NamedList<Object>> subclusters = Lists.newArrayList();\n        cluster.add(\"clusters\", subclusters);\n        clustersToNamedList(outCluster.getSubclusters(), subclusters,\n                outputSubClusters, maxLabels);\n      }\n    }\n  }\n\n","sourceOld":"  private void clustersToNamedList(List<Cluster> outputClusters,\n                                   List<NamedList<Object>> parent, boolean outputSubClusters, int maxLabels) {\n    for (Cluster outCluster : outputClusters) {\n      NamedList<Object> cluster = new SimpleOrderedMap<Object>();\n      parent.add(cluster);\n\n      // Add labels\n      List<String> labels = outCluster.getPhrases();\n      if (labels.size() > maxLabels) {\n        labels = labels.subList(0, maxLabels);\n      }\n      cluster.add(\"labels\", labels);\n\n      // Add cluster score\n      final Double score = outCluster.getScore();\n      if (score != null) {\n        cluster.add(\"score\", score);\n      }\n\n      // Add other topics marker\n      if (outCluster.isOtherTopics()) {\n        cluster.add(\"other-topics\", outCluster.isOtherTopics());\n      }\n\n      // Add documents\n      List<Document> docs = outputSubClusters ? outCluster.getDocuments() : outCluster.getAllDocuments();\n      List<Object> docList = Lists.newArrayList();\n      cluster.add(\"docs\", docList);\n      for (Document doc : docs) {\n        docList.add(doc.getField(SOLR_DOCUMENT_ID));\n      }\n\n      // Add subclusters\n      if (outputSubClusters && !outCluster.getSubclusters().isEmpty()) {\n        List<NamedList<Object>> subclusters = Lists.newArrayList();\n        cluster.add(\"clusters\", subclusters);\n        clustersToNamedList(outCluster.getSubclusters(), subclusters,\n                outputSubClusters, maxLabels);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#clustersToNamedList(List[Cluster],List[NamedList[Object]],boolean,int).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#clustersToNamedList(List[Cluster],List[NamedList[Object]],boolean,int).mjava","sourceNew":"  private void clustersToNamedList(List<Cluster> outputClusters,\n                                   List<NamedList<Object>> parent, boolean outputSubClusters, int maxLabels) {\n    for (Cluster outCluster : outputClusters) {\n      NamedList<Object> cluster = new SimpleOrderedMap<Object>();\n      parent.add(cluster);\n\n      // Add labels\n      List<String> labels = outCluster.getPhrases();\n      if (labels.size() > maxLabels) {\n        labels = labels.subList(0, maxLabels);\n      }\n      cluster.add(\"labels\", labels);\n\n      // Add cluster score\n      final Double score = outCluster.getScore();\n      if (score != null) {\n        cluster.add(\"score\", score);\n      }\n\n      // Add other topics marker\n      if (outCluster.isOtherTopics()) {\n        cluster.add(\"other-topics\", outCluster.isOtherTopics());\n      }\n\n      // Add documents\n      List<Document> docs = outputSubClusters ? outCluster.getDocuments() : outCluster.getAllDocuments();\n      List<Object> docList = Lists.newArrayList();\n      cluster.add(\"docs\", docList);\n      for (Document doc : docs) {\n        docList.add(doc.getField(SOLR_DOCUMENT_ID));\n      }\n\n      // Add subclusters\n      if (outputSubClusters && !outCluster.getSubclusters().isEmpty()) {\n        List<NamedList<Object>> subclusters = Lists.newArrayList();\n        cluster.add(\"clusters\", subclusters);\n        clustersToNamedList(outCluster.getSubclusters(), subclusters,\n                outputSubClusters, maxLabels);\n      }\n    }\n  }\n\n","sourceOld":"  private void clustersToNamedList(List<Cluster> outputClusters,\n                                   List<NamedList<Object>> parent, boolean outputSubClusters, int maxLabels) {\n    for (Cluster outCluster : outputClusters) {\n      NamedList<Object> cluster = new SimpleOrderedMap<Object>();\n      parent.add(cluster);\n\n      // Add labels\n      List<String> labels = outCluster.getPhrases();\n      if (labels.size() > maxLabels) {\n        labels = labels.subList(0, maxLabels);\n      }\n      cluster.add(\"labels\", labels);\n\n      // Add cluster score\n      final Double score = outCluster.getScore();\n      if (score != null) {\n        cluster.add(\"score\", score);\n      }\n\n      // Add other topics marker\n      if (outCluster.isOtherTopics()) {\n        cluster.add(\"other-topics\", outCluster.isOtherTopics());\n      }\n\n      // Add documents\n      List<Document> docs = outputSubClusters ? outCluster.getDocuments() : outCluster.getAllDocuments();\n      List<Object> docList = Lists.newArrayList();\n      cluster.add(\"docs\", docList);\n      for (Document doc : docs) {\n        docList.add(doc.getField(SOLR_DOCUMENT_ID));\n      }\n\n      // Add subclusters\n      if (outputSubClusters && !outCluster.getSubclusters().isEmpty()) {\n        List<NamedList<Object>> subclusters = Lists.newArrayList();\n        cluster.add(\"clusters\", subclusters);\n        clustersToNamedList(outCluster.getSubclusters(), subclusters,\n                outputSubClusters, maxLabels);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#clustersToNamedList(List[Cluster],List[NamedList[Object]],boolean,int).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#clustersToNamedList(List[Cluster],List[NamedList[Object]],boolean,int).mjava","sourceNew":"  private void clustersToNamedList(List<Cluster> outputClusters,\n                                   List<NamedList<Object>> parent, boolean outputSubClusters, int maxLabels) {\n    for (Cluster outCluster : outputClusters) {\n      NamedList<Object> cluster = new SimpleOrderedMap<>();\n      parent.add(cluster);\n\n      // Add labels\n      List<String> labels = outCluster.getPhrases();\n      if (labels.size() > maxLabels) {\n        labels = labels.subList(0, maxLabels);\n      }\n      cluster.add(\"labels\", labels);\n\n      // Add cluster score\n      final Double score = outCluster.getScore();\n      if (score != null) {\n        cluster.add(\"score\", score);\n      }\n\n      // Add other topics marker\n      if (outCluster.isOtherTopics()) {\n        cluster.add(\"other-topics\", outCluster.isOtherTopics());\n      }\n\n      // Add documents\n      List<Document> docs = outputSubClusters ? outCluster.getDocuments() : outCluster.getAllDocuments();\n      List<Object> docList = Lists.newArrayList();\n      cluster.add(\"docs\", docList);\n      for (Document doc : docs) {\n        docList.add(doc.getField(SOLR_DOCUMENT_ID));\n      }\n\n      // Add subclusters\n      if (outputSubClusters && !outCluster.getSubclusters().isEmpty()) {\n        List<NamedList<Object>> subclusters = Lists.newArrayList();\n        cluster.add(\"clusters\", subclusters);\n        clustersToNamedList(outCluster.getSubclusters(), subclusters,\n                outputSubClusters, maxLabels);\n      }\n    }\n  }\n\n","sourceOld":"  private void clustersToNamedList(List<Cluster> outputClusters,\n                                   List<NamedList<Object>> parent, boolean outputSubClusters, int maxLabels) {\n    for (Cluster outCluster : outputClusters) {\n      NamedList<Object> cluster = new SimpleOrderedMap<Object>();\n      parent.add(cluster);\n\n      // Add labels\n      List<String> labels = outCluster.getPhrases();\n      if (labels.size() > maxLabels) {\n        labels = labels.subList(0, maxLabels);\n      }\n      cluster.add(\"labels\", labels);\n\n      // Add cluster score\n      final Double score = outCluster.getScore();\n      if (score != null) {\n        cluster.add(\"score\", score);\n      }\n\n      // Add other topics marker\n      if (outCluster.isOtherTopics()) {\n        cluster.add(\"other-topics\", outCluster.isOtherTopics());\n      }\n\n      // Add documents\n      List<Document> docs = outputSubClusters ? outCluster.getDocuments() : outCluster.getAllDocuments();\n      List<Object> docList = Lists.newArrayList();\n      cluster.add(\"docs\", docList);\n      for (Document doc : docs) {\n        docList.add(doc.getField(SOLR_DOCUMENT_ID));\n      }\n\n      // Add subclusters\n      if (outputSubClusters && !outCluster.getSubclusters().isEmpty()) {\n        List<NamedList<Object>> subclusters = Lists.newArrayList();\n        cluster.add(\"clusters\", subclusters);\n        clustersToNamedList(outCluster.getSubclusters(), subclusters,\n                outputSubClusters, maxLabels);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f","date":1478271720,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#clustersToNamedList(List[Cluster],List[NamedList[Object]],boolean,int).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#clustersToNamedList(List[Cluster],List[NamedList[Object]],boolean,int).mjava","sourceNew":"  private void clustersToNamedList(List<Cluster> outputClusters,\n                                   List<NamedList<Object>> parent, boolean outputSubClusters, int maxLabels) {\n    for (Cluster outCluster : outputClusters) {\n      NamedList<Object> cluster = new SimpleOrderedMap<>();\n      parent.add(cluster);\n\n      // Add labels\n      List<String> labels = outCluster.getPhrases();\n      if (labels.size() > maxLabels) {\n        labels = labels.subList(0, maxLabels);\n      }\n      cluster.add(\"labels\", labels);\n\n      // Add cluster score\n      final Double score = outCluster.getScore();\n      if (score != null) {\n        cluster.add(\"score\", score);\n      }\n\n      // Add other topics marker\n      if (outCluster.isOtherTopics()) {\n        cluster.add(\"other-topics\", outCluster.isOtherTopics());\n      }\n\n      // Add documents\n      List<Document> docs = outputSubClusters ? outCluster.getDocuments() : outCluster.getAllDocuments();\n      List<Object> docList = new ArrayList<>();\n      cluster.add(\"docs\", docList);\n      for (Document doc : docs) {\n        docList.add(doc.getField(SOLR_DOCUMENT_ID));\n      }\n\n      // Add subclusters\n      if (outputSubClusters && !outCluster.getSubclusters().isEmpty()) {\n        List<NamedList<Object>> subclusters = new ArrayList<>();\n        cluster.add(\"clusters\", subclusters);\n        clustersToNamedList(outCluster.getSubclusters(), subclusters,\n                outputSubClusters, maxLabels);\n      }\n    }\n  }\n\n","sourceOld":"  private void clustersToNamedList(List<Cluster> outputClusters,\n                                   List<NamedList<Object>> parent, boolean outputSubClusters, int maxLabels) {\n    for (Cluster outCluster : outputClusters) {\n      NamedList<Object> cluster = new SimpleOrderedMap<>();\n      parent.add(cluster);\n\n      // Add labels\n      List<String> labels = outCluster.getPhrases();\n      if (labels.size() > maxLabels) {\n        labels = labels.subList(0, maxLabels);\n      }\n      cluster.add(\"labels\", labels);\n\n      // Add cluster score\n      final Double score = outCluster.getScore();\n      if (score != null) {\n        cluster.add(\"score\", score);\n      }\n\n      // Add other topics marker\n      if (outCluster.isOtherTopics()) {\n        cluster.add(\"other-topics\", outCluster.isOtherTopics());\n      }\n\n      // Add documents\n      List<Document> docs = outputSubClusters ? outCluster.getDocuments() : outCluster.getAllDocuments();\n      List<Object> docList = Lists.newArrayList();\n      cluster.add(\"docs\", docList);\n      for (Document doc : docs) {\n        docList.add(doc.getField(SOLR_DOCUMENT_ID));\n      }\n\n      // Add subclusters\n      if (outputSubClusters && !outCluster.getSubclusters().isEmpty()) {\n        List<NamedList<Object>> subclusters = Lists.newArrayList();\n        cluster.add(\"clusters\", subclusters);\n        clustersToNamedList(outCluster.getSubclusters(), subclusters,\n                outputSubClusters, maxLabels);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#clustersToNamedList(List[Cluster],List[NamedList[Object]],boolean,int).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#clustersToNamedList(List[Cluster],List[NamedList[Object]],boolean,int).mjava","sourceNew":"  private void clustersToNamedList(List<Cluster> outputClusters,\n                                   List<NamedList<Object>> parent, boolean outputSubClusters, int maxLabels) {\n    for (Cluster outCluster : outputClusters) {\n      NamedList<Object> cluster = new SimpleOrderedMap<>();\n      parent.add(cluster);\n\n      // Add labels\n      List<String> labels = outCluster.getPhrases();\n      if (labels.size() > maxLabels) {\n        labels = labels.subList(0, maxLabels);\n      }\n      cluster.add(\"labels\", labels);\n\n      // Add cluster score\n      final Double score = outCluster.getScore();\n      if (score != null) {\n        cluster.add(\"score\", score);\n      }\n\n      // Add other topics marker\n      if (outCluster.isOtherTopics()) {\n        cluster.add(\"other-topics\", outCluster.isOtherTopics());\n      }\n\n      // Add documents\n      List<Document> docs = outputSubClusters ? outCluster.getDocuments() : outCluster.getAllDocuments();\n      List<Object> docList = new ArrayList<>();\n      cluster.add(\"docs\", docList);\n      for (Document doc : docs) {\n        docList.add(doc.getField(SOLR_DOCUMENT_ID));\n      }\n\n      // Add subclusters\n      if (outputSubClusters && !outCluster.getSubclusters().isEmpty()) {\n        List<NamedList<Object>> subclusters = new ArrayList<>();\n        cluster.add(\"clusters\", subclusters);\n        clustersToNamedList(outCluster.getSubclusters(), subclusters,\n                outputSubClusters, maxLabels);\n      }\n    }\n  }\n\n","sourceOld":"  private void clustersToNamedList(List<Cluster> outputClusters,\n                                   List<NamedList<Object>> parent, boolean outputSubClusters, int maxLabels) {\n    for (Cluster outCluster : outputClusters) {\n      NamedList<Object> cluster = new SimpleOrderedMap<>();\n      parent.add(cluster);\n\n      // Add labels\n      List<String> labels = outCluster.getPhrases();\n      if (labels.size() > maxLabels) {\n        labels = labels.subList(0, maxLabels);\n      }\n      cluster.add(\"labels\", labels);\n\n      // Add cluster score\n      final Double score = outCluster.getScore();\n      if (score != null) {\n        cluster.add(\"score\", score);\n      }\n\n      // Add other topics marker\n      if (outCluster.isOtherTopics()) {\n        cluster.add(\"other-topics\", outCluster.isOtherTopics());\n      }\n\n      // Add documents\n      List<Document> docs = outputSubClusters ? outCluster.getDocuments() : outCluster.getAllDocuments();\n      List<Object> docList = Lists.newArrayList();\n      cluster.add(\"docs\", docList);\n      for (Document doc : docs) {\n        docList.add(doc.getField(SOLR_DOCUMENT_ID));\n      }\n\n      // Add subclusters\n      if (outputSubClusters && !outCluster.getSubclusters().isEmpty()) {\n        List<NamedList<Object>> subclusters = Lists.newArrayList();\n        cluster.add(\"clusters\", subclusters);\n        clustersToNamedList(outCluster.getSubclusters(), subclusters,\n                outputSubClusters, maxLabels);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}