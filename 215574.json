{"path":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n\n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n\n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new MultiValueSource(new OrdFieldSource(field));\n    } else {\n      vs = new MultiValueSource(new ReverseOrdFieldSource(field));\n    }\n\n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n\n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new MultiValueSource(new OrdFieldSource(field));\n    } else {\n      vs = new MultiValueSource(new ReverseOrdFieldSource(field));\n    }\n\n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n    s.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new MultiValueSource(new OrdFieldSource(field));\n    } else {\n      vs = new MultiValueSource(new ReverseOrdFieldSource(field));\n    }\n\n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new MultiValueSource(new OrdFieldSource(field));\n    } else {\n      vs = new MultiValueSource(new ReverseOrdFieldSource(field));\n    }\n\n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(random, q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n    s.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new MultiValueSource(new OrdFieldSource(field));\n    } else {\n      vs = new MultiValueSource(new ReverseOrdFieldSource(field));\n    }\n\n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new MultiValueSource(new OrdFieldSource(field));\n    } else {\n      vs = new MultiValueSource(new ReverseOrdFieldSource(field));\n    }\n\n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(random, q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n    s.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new MultiValueSource(new OrdFieldSource(field));\n    } else {\n      vs = new MultiValueSource(new ReverseOrdFieldSource(field));\n    }\n\n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new MultiValueSource(new OrdFieldSource(field));\n    } else {\n      vs = new MultiValueSource(new ReverseOrdFieldSource(field));\n    }\n\n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(random, q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n    s.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new MultiValueSource(new OrdFieldSource(field));\n    } else {\n      vs = new MultiValueSource(new ReverseOrdFieldSource(field));\n    }\n\n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","date":1309476031,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestRank(String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n\n    Query q = new FunctionQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(random, q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n    s.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new MultiValueSource(new OrdFieldSource(field));\n    } else {\n      vs = new MultiValueSource(new ReverseOrdFieldSource(field));\n    }\n\n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(random, q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":null,"sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new MultiValueSource(new OrdFieldSource(field));\n    } else {\n      vs = new MultiValueSource(new ReverseOrdFieldSource(field));\n    }\n\n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(random, q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestRank(String,boolean).mjava","sourceNew":null,"sourceOld":"  // Test that queries based on reverse/ordFieldScore scores correctly\n  private void doTestRank(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new MultiValueSource(new OrdFieldSource(field));\n    } else {\n      vs = new MultiValueSource(new ReverseOrdFieldSource(field));\n    }\n\n    Query q = new ValueSourceQuery(vs);\n    log(\"test: \" + q);\n    QueryUtils.check(random, q, s);\n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    assertEquals(\"All docs should be matched!\", N_DOCS, h.length);\n    String prevID = inOrder\n            ? \"IE\"   // greater than all ids of docs in this test (\"ID0001\", etc.)\n            : \"IC\";  // smaller than all ids of docs in this test (\"ID0001\", etc.)\n\n    for (int i = 0; i < h.length; i++) {\n      String resID = s.doc(h[i].doc).get(ID_FIELD);\n      log(i + \".   score=\" + h[i].score + \"  -  \" + resID);\n      log(s.explain(q, h[i].doc));\n      if (inOrder) {\n        assertTrue(\"res id \" + resID + \" should be < prev res id \" + prevID, resID.compareTo(prevID) < 0);\n      } else {\n        assertTrue(\"res id \" + resID + \" should be > prev res id \" + prevID, resID.compareTo(prevID) > 0);\n      }\n      prevID = resID;\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["53a31399f2471493d67b19a95c028a74e0113b6a"],"53a31399f2471493d67b19a95c028a74e0113b6a":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","53a31399f2471493d67b19a95c028a74e0113b6a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","53a31399f2471493d67b19a95c028a74e0113b6a"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["53a31399f2471493d67b19a95c028a74e0113b6a","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["53a31399f2471493d67b19a95c028a74e0113b6a","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"53a31399f2471493d67b19a95c028a74e0113b6a":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}