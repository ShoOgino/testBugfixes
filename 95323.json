{"path":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#customPermissionAppliesToRequest(Permission,AuthorizationContext).mjava","commits":[{"id":"c682f5d8dbe387f95559e6bd61039b04c10b140d","date":1553913180,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#customPermissionAppliesToRequest(Permission,AuthorizationContext).mjava","pathOld":"/dev/null","sourceNew":"  private boolean customPermissionAppliesToRequest(Permission customPermission, AuthorizationContext context) {\n    if (customPermission.method != null && !customPermission.method.contains(context.getHttpMethod())) {\n      //this permissions HTTP method does not match this rule. try other rules\n      return false;\n    }\n    if (customPermission.params != null) {\n      for (Map.Entry<String, Function<String[], Boolean>> e : customPermission.params.entrySet()) {\n        String[] paramVal = context.getParams().getParams(e.getKey());\n        if(!e.getValue().apply(paramVal)) return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb842b7eba1323ec814496c88e41dc3264d1d4e0","date":1569005452,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#customPermissionAppliesToRequest(Permission,AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#customPermissionAppliesToRequest(Permission,AuthorizationContext).mjava","sourceNew":"  private boolean customPermissionAppliesToRequest(Permission customPermission, AuthorizationContext context) {\n    log.trace(\"Permission [{}] is a custom permission\", customPermission);\n    if (customPermission.method != null && !customPermission.method.contains(context.getHttpMethod())) {\n      log.trace(\"Custom permission requires method [{}] but request had method [{}]; permission doesn't apply\",\n          customPermission.method, context.getHttpMethod());\n      //this permissions HTTP method does not match this rule. try other rules\n      return false;\n    }\n    if (customPermission.params != null) {\n      for (Map.Entry<String, Function<String[], Boolean>> e : customPermission.params.entrySet()) {\n        String[] paramVal = context.getParams().getParams(e.getKey());\n        if(!e.getValue().apply(paramVal)) {\n          log.trace(\"Request has param [{}] which is incompatible with custom perm [{}]; perm doesnt apply\",\n              e.getKey(), customPermission);\n          return false;\n        }\n      }\n    }\n\n    log.trace(\"Perm [{}] matches method and params for request; permission applies\", customPermission);\n    return true;\n  }\n\n","sourceOld":"  private boolean customPermissionAppliesToRequest(Permission customPermission, AuthorizationContext context) {\n    if (customPermission.method != null && !customPermission.method.contains(context.getHttpMethod())) {\n      //this permissions HTTP method does not match this rule. try other rules\n      return false;\n    }\n    if (customPermission.params != null) {\n      for (Map.Entry<String, Function<String[], Boolean>> e : customPermission.params.entrySet()) {\n        String[] paramVal = context.getParams().getParams(e.getKey());\n        if(!e.getValue().apply(paramVal)) return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#customPermissionAppliesToRequest(Permission,AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#customPermissionAppliesToRequest(Permission,AuthorizationContext).mjava","sourceNew":"  private boolean customPermissionAppliesToRequest(Permission customPermission, AuthorizationContext context) {\n    log.trace(\"Permission [{}] is a custom permission\", customPermission);\n    if (customPermission.method != null && !customPermission.method.contains(context.getHttpMethod())) {\n      if (log.isTraceEnabled()) {\n        log.trace(\"Custom permission requires method [{}] but request had method [{}]; permission doesn't apply\",\n            customPermission.method, context.getHttpMethod());\n      }\n      //this permissions HTTP method does not match this rule. try other rules\n      return false;\n    }\n    if (customPermission.params != null) {\n      for (Map.Entry<String, Function<String[], Boolean>> e : customPermission.params.entrySet()) {\n        String[] paramVal = context.getParams().getParams(e.getKey());\n        if(!e.getValue().apply(paramVal)) {\n          if (log.isTraceEnabled()) {\n            log.trace(\"Request has param [{}] which is incompatible with custom perm [{}]; perm doesnt apply\",\n                e.getKey(), customPermission);\n          }\n          return false;\n        }\n      }\n    }\n\n    log.trace(\"Perm [{}] matches method and params for request; permission applies\", customPermission);\n    return true;\n  }\n\n","sourceOld":"  private boolean customPermissionAppliesToRequest(Permission customPermission, AuthorizationContext context) {\n    log.trace(\"Permission [{}] is a custom permission\", customPermission);\n    if (customPermission.method != null && !customPermission.method.contains(context.getHttpMethod())) {\n      log.trace(\"Custom permission requires method [{}] but request had method [{}]; permission doesn't apply\",\n          customPermission.method, context.getHttpMethod());\n      //this permissions HTTP method does not match this rule. try other rules\n      return false;\n    }\n    if (customPermission.params != null) {\n      for (Map.Entry<String, Function<String[], Boolean>> e : customPermission.params.entrySet()) {\n        String[] paramVal = context.getParams().getParams(e.getKey());\n        if(!e.getValue().apply(paramVal)) {\n          log.trace(\"Request has param [{}] which is incompatible with custom perm [{}]; perm doesnt apply\",\n              e.getKey(), customPermission);\n          return false;\n        }\n      }\n    }\n\n    log.trace(\"Perm [{}] matches method and params for request; permission applies\", customPermission);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8076096f334b0665d0a69a63ee98ac09baad402b","date":1589405373,"type":5,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPluginBase#customPermissionAppliesToRequest(Permission,AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#customPermissionAppliesToRequest(Permission,AuthorizationContext).mjava","sourceNew":"  private boolean customPermissionAppliesToRequest(Permission customPermission, AuthorizationContext context) {\n    log.trace(\"Permission [{}] is a custom permission\", customPermission);\n    if (customPermission.method != null && !customPermission.method.contains(context.getHttpMethod())) {\n      if (log.isTraceEnabled()) {\n        log.trace(\"Custom permission requires method [{}] but request had method [{}]; permission doesn't apply\",\n            customPermission.method, context.getHttpMethod());\n      }\n      //this permissions HTTP method does not match this rule. try other rules\n      return false;\n    }\n    if (customPermission.params != null) {\n      for (Map.Entry<String, Function<String[], Boolean>> e : customPermission.params.entrySet()) {\n        String[] paramVal = context.getParams().getParams(e.getKey());\n        if(!e.getValue().apply(paramVal)) {\n          if (log.isTraceEnabled()) {\n            log.trace(\"Request has param [{}] which is incompatible with custom perm [{}]; perm doesnt apply\",\n                e.getKey(), customPermission);\n          }\n          return false;\n        }\n      }\n    }\n\n    log.trace(\"Perm [{}] matches method and params for request; permission applies\", customPermission);\n    return true;\n  }\n\n","sourceOld":"  private boolean customPermissionAppliesToRequest(Permission customPermission, AuthorizationContext context) {\n    log.trace(\"Permission [{}] is a custom permission\", customPermission);\n    if (customPermission.method != null && !customPermission.method.contains(context.getHttpMethod())) {\n      if (log.isTraceEnabled()) {\n        log.trace(\"Custom permission requires method [{}] but request had method [{}]; permission doesn't apply\",\n            customPermission.method, context.getHttpMethod());\n      }\n      //this permissions HTTP method does not match this rule. try other rules\n      return false;\n    }\n    if (customPermission.params != null) {\n      for (Map.Entry<String, Function<String[], Boolean>> e : customPermission.params.entrySet()) {\n        String[] paramVal = context.getParams().getParams(e.getKey());\n        if(!e.getValue().apply(paramVal)) {\n          if (log.isTraceEnabled()) {\n            log.trace(\"Request has param [{}] which is incompatible with custom perm [{}]; perm doesnt apply\",\n                e.getKey(), customPermission);\n          }\n          return false;\n        }\n      }\n    }\n\n    log.trace(\"Perm [{}] matches method and params for request; permission applies\", customPermission);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cb842b7eba1323ec814496c88e41dc3264d1d4e0"],"8076096f334b0665d0a69a63ee98ac09baad402b":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c682f5d8dbe387f95559e6bd61039b04c10b140d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cb842b7eba1323ec814496c88e41dc3264d1d4e0":["c682f5d8dbe387f95559e6bd61039b04c10b140d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8076096f334b0665d0a69a63ee98ac09baad402b"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["8076096f334b0665d0a69a63ee98ac09baad402b"],"8076096f334b0665d0a69a63ee98ac09baad402b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c682f5d8dbe387f95559e6bd61039b04c10b140d"],"c682f5d8dbe387f95559e6bd61039b04c10b140d":["cb842b7eba1323ec814496c88e41dc3264d1d4e0"],"cb842b7eba1323ec814496c88e41dc3264d1d4e0":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}