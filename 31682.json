{"path":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","commits":[{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to <= the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all\n   *          SegmentInfos.  If the value is True for a\n   *          given SegmentInfo, that means this segment was\n   *          an original segment present in the\n   *          to-be-merged index; else, it was a segment\n   *          produced by a cascaded merge.\n   */\n  public abstract MergeSpecification findForcedMerges(\n          SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge)\n      throws CorruptIndexException, IOException;\n\n","sourceOld":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to <= the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all\n   *          SegmentInfos.  If the value is True for a\n   *          given SegmentInfo, that means this segment was\n   *          an original segment present in the\n   *          to-be-merged index; else, it was a segment\n   *          produced by a cascaded merge.\n   */\n  public abstract MergeSpecification findForcedMerges(\n          SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToMerge)\n      throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to <= the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all\n   *          SegmentInfos.  If the value is True for a\n   *          given SegmentInfo, that means this segment was\n   *          an original segment present in the\n   *          to-be-merged index; else, it was a segment\n   *          produced by a cascaded merge.\n   */\n  public abstract MergeSpecification findForcedMerges(\n          SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge)\n      throws CorruptIndexException, IOException;\n\n","sourceOld":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to <= the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all\n   *          SegmentInfos.  If the value is True for a\n   *          given SegmentInfo, that means this segment was\n   *          an original segment present in the\n   *          to-be-merged index; else, it was a segment\n   *          produced by a cascaded merge.\n   */\n  public abstract MergeSpecification findForcedMerges(\n          SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToMerge)\n      throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","sourceNew":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to <= the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all\n   *          SegmentInfos.  If the value is True for a\n   *          given SegmentInfo, that means this segment was\n   *          an original segment present in the\n   *          to-be-merged index; else, it was a segment\n   *          produced by a cascaded merge.\n   */\n  public abstract MergeSpecification findForcedMerges(\n          SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to <= the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all\n   *          SegmentInfos.  If the value is True for a\n   *          given SegmentInfo, that means this segment was\n   *          an original segment present in the\n   *          to-be-merged index; else, it was a segment\n   *          produced by a cascaded merge.\n   */\n  public abstract MergeSpecification findForcedMerges(\n          SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge)\n      throws CorruptIndexException, IOException;\n\n","bugFix":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","sourceNew":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to <= the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all\n   *          SegmentInfos.  If the value is True for a\n   *          given SegmentInfo, that means this segment was\n   *          an original segment present in the\n   *          to-be-merged index; else, it was a segment\n   *          produced by a cascaded merge.\n   */\n  public abstract MergeSpecification findForcedMerges(\n          SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to <= the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all\n   *          SegmentInfos.  If the value is True for a\n   *          given SegmentInfo, that means this segment was\n   *          an original segment present in the\n   *          to-be-merged index; else, it was a segment\n   *          produced by a cascaded merge.\n   */\n  public abstract MergeSpecification findForcedMerges(\n          SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge)\n      throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","sourceNew":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to <= the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all\n   *          SegmentInfos.  If the value is True for a\n   *          given SegmentInfo, that means this segment was\n   *          an original segment present in the\n   *          to-be-merged index; else, it was a segment\n   *          produced by a cascaded merge.\n   */\n  public abstract MergeSpecification findForcedMerges(\n          SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Determine what set of merge operations is necessary in\n   * order to merge to <= the specified segment count. {@link IndexWriter} calls this when its\n   * {@link IndexWriter#forceMerge} method is called. This call is always\n   * synchronized on the {@link IndexWriter} instance so only one thread at a\n   * time will call this method.\n   * \n   * @param segmentInfos\n   *          the total set of segments in the index\n   * @param maxSegmentCount\n   *          requested maximum number of segments in the index (currently this\n   *          is always 1)\n   * @param segmentsToMerge\n   *          contains the specific SegmentInfo instances that must be merged\n   *          away. This may be a subset of all\n   *          SegmentInfos.  If the value is True for a\n   *          given SegmentInfo, that means this segment was\n   *          an original segment present in the\n   *          to-be-merged index; else, it was a segment\n   *          produced by a cascaded merge.\n   */\n  public abstract MergeSpecification findForcedMerges(\n          SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d153abcf92dc5329d98571a8c3035df9bd80648"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}