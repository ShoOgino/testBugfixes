{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LambdaFunction#createIntLambdaFunction(String,TwoIntInIntOutLambda,IntValue[],boolean).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LambdaFunction#createIntLambdaFunction(String,TwoIntInIntOutLambda,IntValue[],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a function that associatively (order is guaranteed) reduces multiple\n   * single-value integer expressions into a single-value integer expression for each document.\n   * <br>\n   * For a document, every parameter's value must exist for the resulting value to exist if {@code allMustExist} is true.\n   * If {@code allMustExist} is false, only one of the parameters' values must exist.\n   * \n   * @param name name for the function\n   * @param lambda the associative function used to reduce the values: {@code (integer, integer) -> integer}\n   * @param params the expressions to reduce\n   * @param allMustExist whether all parameters are required to exist\n   * @return a single-value expression that reduces the parameters with the given lambda\n   */\n  public static IntValue createIntLambdaFunction(String name, TwoIntInIntOutLambda lambda, IntValue[] params, boolean allMustExist) {\n    if (allMustExist) {\n      return new MultiIntValueInIntValueOutRequireAllFunction(name,lambda,params);\n    } else {\n      return new MultiIntValueInIntValueOutRequireOneFunction(name,lambda,params);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LambdaFunction#createIntLambdaFunction(String,TwoIntInIntOutLambda,IntValue[],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a function that associatively (order is guaranteed) reduces multiple\n   * single-value integer expressions into a single-value integer expression for each document.\n   * <br>\n   * For a document, every parameter's value must exist for the resulting value to exist if {@code allMustExist} is true.\n   * If {@code allMustExist} is false, only one of the parameters' values must exist.\n   * \n   * @param name name for the function\n   * @param lambda the associative function used to reduce the values: {@code (integer, integer) -> integer}\n   * @param params the expressions to reduce\n   * @param allMustExist whether all parameters are required to exist\n   * @return a single-value expression that reduces the parameters with the given lambda\n   */\n  public static IntValue createIntLambdaFunction(String name, TwoIntInIntOutLambda lambda, IntValue[] params, boolean allMustExist) {\n    if (allMustExist) {\n      return new MultiIntValueInIntValueOutRequireAllFunction(name,lambda,params);\n    } else {\n      return new MultiIntValueInIntValueOutRequireOneFunction(name,lambda,params);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LambdaFunction#createIntLambdaFunction(String,TwoIntInIntOutLambda,IntValue[],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a function that associatively (order is guaranteed) reduces multiple\n   * single-value integer expressions into a single-value integer expression for each document.\n   * <br>\n   * For a document, every parameter's value must exist for the resulting value to exist if {@code allMustExist} is true.\n   * If {@code allMustExist} is false, only one of the parameters' values must exist.\n   * \n   * @param name name for the function\n   * @param lambda the associative function used to reduce the values: {@code (integer, integer) -> integer}\n   * @param params the expressions to reduce\n   * @param allMustExist whether all parameters are required to exist\n   * @return a single-value expression that reduces the parameters with the given lambda\n   */\n  public static IntValue createIntLambdaFunction(String name, TwoIntInIntOutLambda lambda, IntValue[] params, boolean allMustExist) {\n    if (allMustExist) {\n      return new MultiIntValueInIntValueOutRequireAllFunction(name,lambda,params);\n    } else {\n      return new MultiIntValueInIntValueOutRequireOneFunction(name,lambda,params);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LambdaFunction#createIntLambdaFunction(String,TwoIntInIntOutLambda,IntValue[],boolean).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LambdaFunction#createIntLambdaFunction(String,TwoIntInIntOutLambda,IntValue[],boolean).mjava","sourceNew":"  /**\n   * Creates a function that associatively (order is guaranteed) reduces multiple\n   * single-value integer expressions into a single-value integer expression for each document.\n   * <br>\n   * For a document, every parameter's value must exist for the resulting value to exist if {@code allMustExist} is true.\n   * If {@code allMustExist} is false, only one of the parameters' values must exist.\n   *\n   * @param name name for the function\n   * @param lambda the associative function used to reduce the values: {@code (integer, integer) -> integer}\n   * @param params the expressions to reduce\n   * @param allMustExist whether all parameters are required to exist\n   * @return a single-value expression that reduces the parameters with the given lambda\n   */\n  public static IntValue createIntLambdaFunction(String name, TwoIntInIntOutLambda lambda, IntValue[] params, boolean allMustExist) {\n    if (allMustExist) {\n      return new MultiIntValueInIntValueOutRequireAllFunction(name,lambda,params);\n    } else {\n      return new MultiIntValueInIntValueOutRequireOneFunction(name,lambda,params);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a function that associatively (order is guaranteed) reduces multiple\n   * single-value integer expressions into a single-value integer expression for each document.\n   * <br>\n   * For a document, every parameter's value must exist for the resulting value to exist if {@code allMustExist} is true.\n   * If {@code allMustExist} is false, only one of the parameters' values must exist.\n   * \n   * @param name name for the function\n   * @param lambda the associative function used to reduce the values: {@code (integer, integer) -> integer}\n   * @param params the expressions to reduce\n   * @param allMustExist whether all parameters are required to exist\n   * @return a single-value expression that reduces the parameters with the given lambda\n   */\n  public static IntValue createIntLambdaFunction(String name, TwoIntInIntOutLambda lambda, IntValue[] params, boolean allMustExist) {\n    if (allMustExist) {\n      return new MultiIntValueInIntValueOutRequireAllFunction(name,lambda,params);\n    } else {\n      return new MultiIntValueInIntValueOutRequireOneFunction(name,lambda,params);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LambdaFunction#createIntLambdaFunction(String,TwoIntInIntOutLambda,IntValue[],boolean).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LambdaFunction#createIntLambdaFunction(String,TwoIntInIntOutLambda,IntValue[],boolean).mjava","sourceNew":"  /**\n   * Creates a function that associatively (order is guaranteed) reduces multiple\n   * single-value integer expressions into a single-value integer expression for each document.\n   * <br>\n   * For a document, every parameter's value must exist for the resulting value to exist if {@code allMustExist} is true.\n   * If {@code allMustExist} is false, only one of the parameters' values must exist.\n   *\n   * @param name name for the function\n   * @param lambda the associative function used to reduce the values: {@code (integer, integer) -> integer}\n   * @param params the expressions to reduce\n   * @param allMustExist whether all parameters are required to exist\n   * @return a single-value expression that reduces the parameters with the given lambda\n   */\n  public static IntValue createIntLambdaFunction(String name, TwoIntInIntOutLambda lambda, IntValue[] params, boolean allMustExist) {\n    if (allMustExist) {\n      return new MultiIntValueInIntValueOutRequireAllFunction(name,lambda,params);\n    } else {\n      return new MultiIntValueInIntValueOutRequireOneFunction(name,lambda,params);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a function that associatively (order is guaranteed) reduces multiple\n   * single-value integer expressions into a single-value integer expression for each document.\n   * <br>\n   * For a document, every parameter's value must exist for the resulting value to exist if {@code allMustExist} is true.\n   * If {@code allMustExist} is false, only one of the parameters' values must exist.\n   * \n   * @param name name for the function\n   * @param lambda the associative function used to reduce the values: {@code (integer, integer) -> integer}\n   * @param params the expressions to reduce\n   * @param allMustExist whether all parameters are required to exist\n   * @return a single-value expression that reduces the parameters with the given lambda\n   */\n  public static IntValue createIntLambdaFunction(String name, TwoIntInIntOutLambda lambda, IntValue[] params, boolean allMustExist) {\n    if (allMustExist) {\n      return new MultiIntValueInIntValueOutRequireAllFunction(name,lambda,params);\n    } else {\n      return new MultiIntValueInIntValueOutRequireOneFunction(name,lambda,params);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"f8061ddd97f3352007d927dae445884a6f3d857b":["28288370235ed02234a64753cdbf0c6ec096304a","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["1e4e64b7199d2f2a17be7f3926c7532553910dce","30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}