{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanOrVersusBooleanTerm().mjava","commits":[{"id":"d14e5699abc6d0854ab3a692587156cb84f189de","date":1428897312,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanOrVersusBooleanTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanOrVersusBoolean().mjava","sourceNew":"  /** SpanOrQuery(A, B) = (A B) */\n  public void testSpanOrVersusBooleanTerm() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(t1), Occur.SHOULD);\n    q1.add(new TermQuery(t2), Occur.SHOULD);\n    SpanQuery q2 = spanQuery(new SpanOrQuery(spanQuery(new SpanTermQuery(t1)), spanQuery(new SpanTermQuery(t2))));\n    assertSameSet(q1, q2);\n  }\n\n","sourceOld":"  /** SpanOrQuery(A, B) = (A B) */\n  public void testSpanOrVersusBoolean() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(t1), Occur.SHOULD);\n    q1.add(new TermQuery(t2), Occur.SHOULD);\n    SpanQuery q2 = spanQuery(new SpanOrQuery(spanQuery(new SpanTermQuery(t1)), spanQuery(new SpanTermQuery(t2))));\n    assertSameSet(q1, q2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanOrVersusBooleanTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanOrVersusBooleanTerm().mjava","sourceNew":"  /** SpanOrQuery(A, B) = (A B) */\n  public void testSpanOrVersusBooleanTerm() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    BooleanQuery.Builder q1 = new BooleanQuery.Builder();\n    q1.add(new TermQuery(t1), Occur.SHOULD);\n    q1.add(new TermQuery(t2), Occur.SHOULD);\n    SpanQuery q2 = spanQuery(new SpanOrQuery(spanQuery(new SpanTermQuery(t1)), spanQuery(new SpanTermQuery(t2))));\n    assertSameSet(q1.build(), q2);\n  }\n\n","sourceOld":"  /** SpanOrQuery(A, B) = (A B) */\n  public void testSpanOrVersusBooleanTerm() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(t1), Occur.SHOULD);\n    q1.add(new TermQuery(t2), Occur.SHOULD);\n    SpanQuery q2 = spanQuery(new SpanOrQuery(spanQuery(new SpanTermQuery(t1)), spanQuery(new SpanTermQuery(t2))));\n    assertSameSet(q1, q2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["d14e5699abc6d0854ab3a692587156cb84f189de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"d14e5699abc6d0854ab3a692587156cb84f189de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d14e5699abc6d0854ab3a692587156cb84f189de"],"d14e5699abc6d0854ab3a692587156cb84f189de":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}