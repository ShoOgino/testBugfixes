{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections#testCloudClientCanConnectAfterClusterComesUp().mjava","commits":[{"id":"7875fce026a0a335830cfc75abc3eb009eff9a73","date":1425897108,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections#testCloudClientCanConnectAfterClusterComesUp().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    // Start by creating a cluster with no jetties\n\n    File solrXml = getFile(\"solrj\").toPath().resolve(\"solr/solr.xml\").toFile();\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir().toFile(), solrXml, buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      // should work now!\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections#testCloudClientCanConnectAfterClusterComesUp().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    // Start by creating a cluster with no jetties\n\n    File solrXml = getFile(\"solrj\").toPath().resolve(\"solr/solr.xml\").toFile();\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir().toFile(), solrXml, buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      // should work now!\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54","date":1446047031,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections#testCloudClientCanConnectAfterClusterComesUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections#testCloudClientCanConnectAfterClusterComesUp().mjava","sourceNew":"  @Test\n  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    // Start by creating a cluster with no jetties\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir());\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      // should work now!\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    // Start by creating a cluster with no jetties\n\n    File solrXml = getFile(\"solrj\").toPath().resolve(\"solr/solr.xml\").toFile();\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir().toFile(), solrXml, buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      // should work now!\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f929b717ab7f8b4a75621bbf4e3c3b08ba561381","date":1446062278,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections#testCloudClientCanConnectAfterClusterComesUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections#testCloudClientCanConnectAfterClusterComesUp().mjava","sourceNew":"  @Test\n  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    // Start by creating a cluster with no jetties\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      // should work now!\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    // Start by creating a cluster with no jetties\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir());\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      // should work now!\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections#testCloudClientCanConnectAfterClusterComesUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections#testCloudClientCanConnectAfterClusterComesUp().mjava","sourceNew":"  @Test\n  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    // Start by creating a cluster with no jetties\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      // should work now!\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    // Start by creating a cluster with no jetties\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      // should work now!\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections#testCloudClientCanConnectAfterClusterComesUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections#testCloudClientCanConnectAfterClusterComesUp().mjava","sourceNew":"  @Test\n  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    // Start by creating a cluster with no jetties\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      SolrException e = expectThrows(SolrException.class, () -> client.request(listReq));\n      assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      // should work now!\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    // Start by creating a cluster with no jetties\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      // should work now!\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections#testCloudClientCanConnectAfterClusterComesUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections#testCloudClientCanConnectAfterClusterComesUp().mjava","sourceNew":"  @Test\n  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    // Start by creating a cluster with no jetties\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      SolrException e = expectThrows(SolrException.class, () -> client.request(listReq));\n      assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      // should work now!\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    // Start by creating a cluster with no jetties\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      // should work now!\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections#testCloudClientCanConnectAfterClusterComesUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections#testCloudClientCanConnectAfterClusterComesUp().mjava","sourceNew":"  @Test\n  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    // Start by creating a cluster with no jetties\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      SolrException e = expectThrows(SolrException.class, () -> client.request(listReq));\n      assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      // should work now!\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    // Start by creating a cluster with no jetties\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      // should work now!\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1c83d9065111bd0c52230300b020dcd37184fb0","date":1591758044,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections#testCloudClientCanConnectAfterClusterComesUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections#testCloudClientCanConnectAfterClusterComesUp().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12823\")\n  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    // Start by creating a cluster with no jetties\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      SolrException e = expectThrows(SolrException.class, () -> client.request(listReq));\n      assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      // should work now!\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    // Start by creating a cluster with no jetties\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      SolrException e = expectThrows(SolrException.class, () -> client.request(listReq));\n      assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      // should work now!\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"463917d1b14d6e950fa80db37a0e798f5326f105","date":1591890616,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections#testCloudClientCanConnectAfterClusterComesUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections#testCloudClientCanConnectAfterClusterComesUp().mjava","sourceNew":"  @Test\n  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    // Start by creating a cluster with no jetties\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      SolrException e = expectThrows(SolrException.class, () -> client.request(listReq));\n      assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      // should work now!\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-12823\")\n  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    // Start by creating a cluster with no jetties\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      SolrException e = expectThrows(SolrException.class, () -> client.request(listReq));\n      assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      // should work now!\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"463917d1b14d6e950fa80db37a0e798f5326f105":["c1c83d9065111bd0c52230300b020dcd37184fb0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7875fce026a0a335830cfc75abc3eb009eff9a73"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f929b717ab7f8b4a75621bbf4e3c3b08ba561381"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f929b717ab7f8b4a75621bbf4e3c3b08ba561381":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54":["7875fce026a0a335830cfc75abc3eb009eff9a73"],"c1c83d9065111bd0c52230300b020dcd37184fb0":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["463917d1b14d6e950fa80db37a0e798f5326f105"]},"commit2Childs":{"463917d1b14d6e950fa80db37a0e798f5326f105":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7875fce026a0a335830cfc75abc3eb009eff9a73"],"f929b717ab7f8b4a75621bbf4e3c3b08ba561381":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54":["f929b717ab7f8b4a75621bbf4e3c3b08ba561381"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["c1c83d9065111bd0c52230300b020dcd37184fb0","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"c1c83d9065111bd0c52230300b020dcd37184fb0":["463917d1b14d6e950fa80db37a0e798f5326f105"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}