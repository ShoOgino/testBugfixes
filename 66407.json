{"path":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeleteRollback() throws Exception {\n    addSimpleDoc(\"A\");\n    addSimpleDoc(\"B\");\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    deleteSimpleDoc(\"B\");\n    \n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    addSimpleDoc(\"ZZZ\");\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","sourceNew":null,"sourceOld":"  public void testDeleteRollback() throws Exception {\n    addSimpleDoc(\"A\");\n    addSimpleDoc(\"B\");\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    deleteSimpleDoc(\"B\");\n    \n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    addSimpleDoc(\"ZZZ\");\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","pathOld":"src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","sourceNew":"  public void testDeleteRollback() throws Exception {\n    addSimpleDoc(\"A\");\n    addSimpleDoc(\"B\");\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    deleteSimpleDoc(\"B\");\n    \n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    addSimpleDoc(\"ZZZ\");\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":"  public void testDeleteRollback() throws Exception {\n    addSimpleDoc(\"A\");\n    addSimpleDoc(\"B\");\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    deleteSimpleDoc(\"B\");\n    \n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    addSimpleDoc(\"ZZZ\");\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeleteRollback() throws Exception {\n    addSimpleDoc(\"A\");\n    addSimpleDoc(\"B\");\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    deleteSimpleDoc(\"B\");\n    \n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    addSimpleDoc(\"ZZZ\");\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd0a7f04b5a49a00149b867e7d51f632fb8a4664","date":1279497978,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","sourceNew":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    addSimpleDoc(\"A\");\n    addSimpleDoc(\"B\");\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    deleteSimpleDoc(\"B\");\n    \n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    addSimpleDoc(\"ZZZ\");\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":"  public void testDeleteRollback() throws Exception {\n    addSimpleDoc(\"A\");\n    addSimpleDoc(\"B\");\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    deleteSimpleDoc(\"B\");\n    \n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    addSimpleDoc(\"ZZZ\");\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","sourceNew":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    addSimpleDoc(\"A\");\n    addSimpleDoc(\"B\");\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    deleteSimpleDoc(\"B\");\n    \n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    addSimpleDoc(\"ZZZ\");\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":"  public void testDeleteRollback() throws Exception {\n    addSimpleDoc(\"A\");\n    addSimpleDoc(\"B\");\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    deleteSimpleDoc(\"B\");\n    \n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    addSimpleDoc(\"ZZZ\");\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","date":1293733647,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","sourceNew":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    addSimpleDoc(\"A\");\n    addSimpleDoc(\"B\");\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    deleteSimpleDoc(\"B\");\n    \n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    addSimpleDoc(\"ZZZ\");\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","sourceNew":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    addSimpleDoc(\"A\");\n    addSimpleDoc(\"B\");\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    deleteSimpleDoc(\"B\");\n    \n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    addSimpleDoc(\"ZZZ\");\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","sourceNew":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    addSimpleDoc(\"A\");\n    addSimpleDoc(\"B\");\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    deleteSimpleDoc(\"B\");\n    \n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand();\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    addSimpleDoc(\"ZZZ\");\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","sourceNew":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","sourceNew":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","pathOld":"solr/src/test/org/apache/solr/update/DirectUpdateHandlerTest#testDeleteRollback().mjava","sourceNew":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","sourceOld":"  @Test\n  public void testDeleteRollback() throws Exception {\n    // re-init the core\n    deleteCore();\n    initCore(\"solrconfig.xml\", \"schema12.xml\");\n\n    assertU(adoc(\"id\",\"A\"));\n    assertU(adoc(\"id\",\"B\"));\n\n    // commit \"A\", \"B\"\n    SolrCore core = h.getCore();\n    UpdateHandler updater = core.getUpdateHandler();\n    assertTrue( updater instanceof DirectUpdateHandler2 );\n    DirectUpdateHandler2 duh2 = (DirectUpdateHandler2)updater;\n    SolrQueryRequest ureq = req();\n    CommitUpdateCommand cmtCmd = new CommitUpdateCommand(ureq, false);\n    cmtCmd.waitSearcher = true;\n    assertEquals( 2, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 0, duh2.commitCommands.get() );\n    updater.commit(cmtCmd);\n    assertEquals( 0, duh2.addCommands.get() );\n    assertEquals( 2, duh2.addCommandsCumulative.get() );\n    assertEquals( 1, duh2.commitCommands.get() );\n    ureq.close();\n\n    // search - \"A\",\"B\" should be found.\n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, \"id:A OR id:B\" );\n    args.put( \"indent\", \"true\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n            ,\"//*[@numFound='2']\"\n            ,\"//result/doc[1]/str[@name='id'][.='A']\"\n            ,\"//result/doc[2]/str[@name='id'][.='B']\"\n            );\n\n    // delete \"B\"\n    assertU(delI(\"B\"));\n\n    // search - \"A\",\"B\" should be found.\n    assertQ(\"\\\"A\\\" and \\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // rollback \"B\"\n    ureq = req();\n    RollbackUpdateCommand rbkCmd = new RollbackUpdateCommand(ureq);\n    assertEquals( 1, duh2.deleteByIdCommands.get() );\n    assertEquals( 1, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 0, duh2.rollbackCommands.get() );\n    updater.rollback(rbkCmd);\n    ureq.close();\n    assertEquals( 0, duh2.deleteByIdCommands.get() );\n    assertEquals( 0, duh2.deleteByIdCommandsCumulative.get() );\n    assertEquals( 1, duh2.rollbackCommands.get() );\n    \n    // search - \"B\" should be found.\n    assertQ(\"\\\"B\\\" should be found.\", req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='A']\"\n        ,\"//result/doc[2]/str[@name='id'][.='B']\"\n        );\n\n    // Add a doc after the rollback to make sure we can continue to add/delete documents\n    // after a rollback as normal\n    assertU(adoc(\"id\",\"ZZZ\"));\n    assertU(commit());\n    assertQ(\"\\\"ZZZ\\\" must be found.\", req(\"q\", \"id:ZZZ\")\n            ,\"//*[@numFound='1']\"\n            ,\"//result/doc[1]/str[@name='id'][.='ZZZ']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["bd0a7f04b5a49a00149b867e7d51f632fb8a4664","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","bd0a7f04b5a49a00149b867e7d51f632fb8a4664"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["5f4e87790277826a2aea119328600dfb07761f32","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["bd0a7f04b5a49a00149b867e7d51f632fb8a4664"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"bd0a7f04b5a49a00149b867e7d51f632fb8a4664":["1da8d55113b689b06716246649de6f62430f15c0"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"1da8d55113b689b06716246649de6f62430f15c0":["5f4e87790277826a2aea119328600dfb07761f32","bd0a7f04b5a49a00149b867e7d51f632fb8a4664"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa":["70ad682703b8585f5d0a637efec044d57ec05efb","c26f00b574427b55127e869b935845554afde1fa","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bd0a7f04b5a49a00149b867e7d51f632fb8a4664":["70ad682703b8585f5d0a637efec044d57ec05efb","5f4e87790277826a2aea119328600dfb07761f32","5ae62bcdfd4a0689a745ab1d38c6bd1c7c390cfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}