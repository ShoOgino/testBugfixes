{"path":"src/test/org/apache/lucene/search/TestBasics#testSpanNot().mjava","commits":[{"id":"0bcbf4ed0baed877c8b36d024e17a99bedfdd904","date":1075500600,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBasics#testSpanNot().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"eight\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanNearQuery near = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                           4, true);\n    SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"forty\"));\n    SpanNotQuery query = new SpanNotQuery(near, term3);\n\n    checkHits(query, new int[]\n      {801, 821, 831, 851, 861, 871, 881, 891});\n\n    //System.out.println(searcher.explain(query, 801));\n    //System.out.println(searcher.explain(query, 891));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3f7c6f227c99761a334d89dab830930117876b","date":1076365551,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestBasics#testSpanNot().mjava","pathOld":"src/test/org/apache/lucene/search/TestBasics#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"eight\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanNearQuery near = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                           4, true);\n    SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"forty\"));\n    SpanNotQuery query = new SpanNotQuery(near, term3);\n\n    checkHits(query, new int[]\n      {801, 821, 831, 851, 861, 871, 881, 891});\n\n    assertTrue(searcher.explain(query, 801).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 891).getValue() > 0.0f);\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"eight\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanNearQuery near = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                           4, true);\n    SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"forty\"));\n    SpanNotQuery query = new SpanNotQuery(near, term3);\n\n    checkHits(query, new int[]\n      {801, 821, 831, 851, 861, 871, 881, 891});\n\n    //System.out.println(searcher.explain(query, 801));\n    //System.out.println(searcher.explain(query, 891));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9c6ad49171d39d4831b1593ee88741b7b38b042","date":1085506498,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestBasics#testSpanNot().mjava","pathOld":"src/test/org/apache/lucene/search/TestBasics#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"eight\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanNearQuery near = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                           4, true);\n    SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"forty\"));\n    SpanNotQuery query = new SpanNotQuery(near, term3);\n\n    checkHits(query, new int[]\n      {801, 821, 831, 851, 861, 871, 881, 891});\n\n    assertTrue(searcher.explain(query, 801).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 891).getValue() > 0.0f);\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"eight\"));\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"one\"));\n    SpanNearQuery near = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                           4, true);\n    SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"forty\"));\n    SpanNotQuery query = new SpanNotQuery(near, term3);\n\n    checkHits(query, new int[]\n      {801, 821, 831, 851, 861, 871, 881, 891});\n\n    assertTrue(searcher.explain(query, 801).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 891).getValue() > 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b9c6ad49171d39d4831b1593ee88741b7b38b042":["0e3f7c6f227c99761a334d89dab830930117876b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b9c6ad49171d39d4831b1593ee88741b7b38b042"],"0e3f7c6f227c99761a334d89dab830930117876b":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"]},"commit2Childs":{"b9c6ad49171d39d4831b1593ee88741b7b38b042":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["0e3f7c6f227c99761a334d89dab830930117876b"],"0e3f7c6f227c99761a334d89dab830930117876b":["b9c6ad49171d39d4831b1593ee88741b7b38b042"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}