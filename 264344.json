{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#explain(Weight,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#explain(Weight,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#explain(Weight,int).mjava","sourceNew":"  /** Expert: low-level implementation method\n   * Returns an Explanation that describes how <code>doc</code> scored against\n   * <code>weight</code>.\n   *\n   * <p>This is intended to be used in developing Similarity implementations,\n   * and, for good performance, should not be displayed with every hit.\n   * Computing an explanation is as expensive as executing the query over the\n   * entire index.\n   * <p>Applications should call {@link IndexSearcher#explain(Query, int)}.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected Explanation explain(Weight weight, int doc) throws IOException {\n    int n = ReaderUtil.subIndex(doc, leafContexts);\n    int deBasedDoc = doc - leafContexts[n].docBase;\n    \n    return weight.explain(leafContexts[n], deBasedDoc);\n  }\n\n","sourceOld":"  /** Expert: low-level implementation method\n   * Returns an Explanation that describes how <code>doc</code> scored against\n   * <code>weight</code>.\n   *\n   * <p>This is intended to be used in developing Similarity implementations,\n   * and, for good performance, should not be displayed with every hit.\n   * Computing an explanation is as expensive as executing the query over the\n   * entire index.\n   * <p>Applications should call {@link IndexSearcher#explain(Query, int)}.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected Explanation explain(Weight weight, int doc) throws IOException {\n    int n = ReaderUtil.subIndex(doc, leafContexts);\n    int deBasedDoc = doc - leafContexts[n].docBase;\n    \n    return weight.explain(leafContexts[n], deBasedDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#explain(Weight,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#explain(Weight,int).mjava","sourceNew":"  /** Expert: low-level implementation method\n   * Returns an Explanation that describes how <code>doc</code> scored against\n   * <code>weight</code>.\n   *\n   * <p>This is intended to be used in developing Similarity implementations,\n   * and, for good performance, should not be displayed with every hit.\n   * Computing an explanation is as expensive as executing the query over the\n   * entire index.\n   * <p>Applications should call {@link IndexSearcher#explain(Query, int)}.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected Explanation explain(Weight weight, int doc) throws IOException {\n    int n = ReaderUtil.subIndex(doc, leafContexts);\n    final AtomicReaderContext ctx = leafContexts.get(n);\n    int deBasedDoc = doc - ctx.docBase;\n    \n    return weight.explain(ctx, deBasedDoc);\n  }\n\n","sourceOld":"  /** Expert: low-level implementation method\n   * Returns an Explanation that describes how <code>doc</code> scored against\n   * <code>weight</code>.\n   *\n   * <p>This is intended to be used in developing Similarity implementations,\n   * and, for good performance, should not be displayed with every hit.\n   * Computing an explanation is as expensive as executing the query over the\n   * entire index.\n   * <p>Applications should call {@link IndexSearcher#explain(Query, int)}.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected Explanation explain(Weight weight, int doc) throws IOException {\n    int n = ReaderUtil.subIndex(doc, leafContexts);\n    int deBasedDoc = doc - leafContexts[n].docBase;\n    \n    return weight.explain(leafContexts[n], deBasedDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#explain(Weight,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#explain(Weight,int).mjava","sourceNew":"  /** Expert: low-level implementation method\n   * Returns an Explanation that describes how <code>doc</code> scored against\n   * <code>weight</code>.\n   *\n   * <p>This is intended to be used in developing Similarity implementations,\n   * and, for good performance, should not be displayed with every hit.\n   * Computing an explanation is as expensive as executing the query over the\n   * entire index.\n   * <p>Applications should call {@link IndexSearcher#explain(Query, int)}.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected Explanation explain(Weight weight, int doc) throws IOException {\n    int n = ReaderUtil.subIndex(doc, leafContexts);\n    final AtomicReaderContext ctx = leafContexts.get(n);\n    int deBasedDoc = doc - ctx.docBase;\n    \n    return weight.explain(ctx, deBasedDoc);\n  }\n\n","sourceOld":"  /** Expert: low-level implementation method\n   * Returns an Explanation that describes how <code>doc</code> scored against\n   * <code>weight</code>.\n   *\n   * <p>This is intended to be used in developing Similarity implementations,\n   * and, for good performance, should not be displayed with every hit.\n   * Computing an explanation is as expensive as executing the query over the\n   * entire index.\n   * <p>Applications should call {@link IndexSearcher#explain(Query, int)}.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected Explanation explain(Weight weight, int doc) throws IOException {\n    int n = ReaderUtil.subIndex(doc, leafContexts);\n    final AtomicReaderContext ctx = leafContexts.get(n);\n    int deBasedDoc = doc - ctx.docBase;\n    \n    return weight.explain(ctx, deBasedDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#explain(Weight,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#explain(Weight,int).mjava","sourceNew":"  /** Expert: low-level implementation method\n   * Returns an Explanation that describes how <code>doc</code> scored against\n   * <code>weight</code>.\n   *\n   * <p>This is intended to be used in developing Similarity implementations,\n   * and, for good performance, should not be displayed with every hit.\n   * Computing an explanation is as expensive as executing the query over the\n   * entire index.\n   * <p>Applications should call {@link IndexSearcher#explain(Query, int)}.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected Explanation explain(Weight weight, int doc) throws IOException {\n    int n = ReaderUtil.subIndex(doc, leafContexts);\n    final LeafReaderContext ctx = leafContexts.get(n);\n    int deBasedDoc = doc - ctx.docBase;\n    \n    return weight.explain(ctx, deBasedDoc);\n  }\n\n","sourceOld":"  /** Expert: low-level implementation method\n   * Returns an Explanation that describes how <code>doc</code> scored against\n   * <code>weight</code>.\n   *\n   * <p>This is intended to be used in developing Similarity implementations,\n   * and, for good performance, should not be displayed with every hit.\n   * Computing an explanation is as expensive as executing the query over the\n   * entire index.\n   * <p>Applications should call {@link IndexSearcher#explain(Query, int)}.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected Explanation explain(Weight weight, int doc) throws IOException {\n    int n = ReaderUtil.subIndex(doc, leafContexts);\n    final AtomicReaderContext ctx = leafContexts.get(n);\n    int deBasedDoc = doc - ctx.docBase;\n    \n    return weight.explain(ctx, deBasedDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#explain(Weight,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#explain(Weight,int).mjava","sourceNew":"  /** Expert: low-level implementation method\n   * Returns an Explanation that describes how <code>doc</code> scored against\n   * <code>weight</code>.\n   *\n   * <p>This is intended to be used in developing Similarity implementations,\n   * and, for good performance, should not be displayed with every hit.\n   * Computing an explanation is as expensive as executing the query over the\n   * entire index.\n   * <p>Applications should call {@link IndexSearcher#explain(Query, int)}.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected Explanation explain(Weight weight, int doc) throws IOException {\n    int n = ReaderUtil.subIndex(doc, leafContexts);\n    final LeafReaderContext ctx = leafContexts.get(n);\n    int deBasedDoc = doc - ctx.docBase;\n    final Bits liveDocs = ctx.reader().getLiveDocs();\n    if (liveDocs != null && liveDocs.get(deBasedDoc) == false) {\n      return Explanation.noMatch(\"Document \" + doc + \" is deleted\");\n    }\n    return weight.explain(ctx, deBasedDoc);\n  }\n\n","sourceOld":"  /** Expert: low-level implementation method\n   * Returns an Explanation that describes how <code>doc</code> scored against\n   * <code>weight</code>.\n   *\n   * <p>This is intended to be used in developing Similarity implementations,\n   * and, for good performance, should not be displayed with every hit.\n   * Computing an explanation is as expensive as executing the query over the\n   * entire index.\n   * <p>Applications should call {@link IndexSearcher#explain(Query, int)}.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected Explanation explain(Weight weight, int doc) throws IOException {\n    int n = ReaderUtil.subIndex(doc, leafContexts);\n    final LeafReaderContext ctx = leafContexts.get(n);\n    int deBasedDoc = doc - ctx.docBase;\n    \n    return weight.explain(ctx, deBasedDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36c70eb3b44de4355a7168b762cadc0f1cf194bc","date":1561542955,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#explain(Weight,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#explain(Weight,int).mjava","sourceNew":"  /** Expert: low-level implementation method\n   * Returns an Explanation that describes how <code>doc</code> scored against\n   * <code>weight</code>.\n   *\n   * <p>This is intended to be used in developing Similarity implementations,\n   * and, for good performance, should not be displayed with every hit.\n   * Computing an explanation is as expensive as executing the query over the\n   * entire index.\n   * <p>Applications should call {@link IndexSearcher#explain(Query, int)}.\n   * @throws TooManyClauses If a query would exceed\n   *         {@link IndexSearcher#getMaxClauseCount()} clauses.\n   */\n  protected Explanation explain(Weight weight, int doc) throws IOException {\n    int n = ReaderUtil.subIndex(doc, leafContexts);\n    final LeafReaderContext ctx = leafContexts.get(n);\n    int deBasedDoc = doc - ctx.docBase;\n    final Bits liveDocs = ctx.reader().getLiveDocs();\n    if (liveDocs != null && liveDocs.get(deBasedDoc) == false) {\n      return Explanation.noMatch(\"Document \" + doc + \" is deleted\");\n    }\n    return weight.explain(ctx, deBasedDoc);\n  }\n\n","sourceOld":"  /** Expert: low-level implementation method\n   * Returns an Explanation that describes how <code>doc</code> scored against\n   * <code>weight</code>.\n   *\n   * <p>This is intended to be used in developing Similarity implementations,\n   * and, for good performance, should not be displayed with every hit.\n   * Computing an explanation is as expensive as executing the query over the\n   * entire index.\n   * <p>Applications should call {@link IndexSearcher#explain(Query, int)}.\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  protected Explanation explain(Weight weight, int doc) throws IOException {\n    int n = ReaderUtil.subIndex(doc, leafContexts);\n    final LeafReaderContext ctx = leafContexts.get(n);\n    int deBasedDoc = doc - ctx.docBase;\n    final Bits liveDocs = ctx.reader().getLiveDocs();\n    if (liveDocs != null && liveDocs.get(deBasedDoc) == false) {\n      return Explanation.noMatch(\"Document \" + doc + \" is deleted\");\n    }\n    return weight.explain(ctx, deBasedDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}