{"path":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Scorer[],float).mjava","commits":[{"id":"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","date":1363294103,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Scorer[],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","sourceNew":"  ConjunctionScorer(Weight weight, Scorer[] scorers, float coord) {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = new DocsAndFreqs[scorers.length];\n    for (int i = 0; i < scorers.length; i++) {\n      docsAndFreqs[i] = new DocsAndFreqs(scorers[i]);\n    }\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      @Override\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return Long.signum(o1.cost - o2.cost);\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","sourceOld":"  ConjunctionTermScorer(Weight weight, float coord,\n      DocsAndFreqs[] docsAndFreqs) {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = docsAndFreqs;\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      @Override\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return o1.docFreq - o2.docFreq;\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47da30f6e362ae055711fad41cdcba60b9dee8c6","date":1363626629,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Scorer[],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Scorer[],float).mjava","sourceNew":"  ConjunctionScorer(Weight weight, Scorer[] scorers, float coord) {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = new DocsAndFreqs[scorers.length];\n    for (int i = 0; i < scorers.length; i++) {\n      docsAndFreqs[i] = new DocsAndFreqs(scorers[i]);\n    }\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      @Override\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return Long.compare(o1.cost, o2.cost);\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","sourceOld":"  ConjunctionScorer(Weight weight, Scorer[] scorers, float coord) {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = new DocsAndFreqs[scorers.length];\n    for (int i = 0; i < scorers.length; i++) {\n      docsAndFreqs[i] = new DocsAndFreqs(scorers[i]);\n    }\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      @Override\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return Long.signum(o1.cost - o2.cost);\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Scorer[],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Scorer[],float).mjava","sourceNew":"  ConjunctionScorer(Weight weight, Scorer[] scorers, float coord) {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = new DocsAndFreqs[scorers.length];\n    for (int i = 0; i < scorers.length; i++) {\n      docsAndFreqs[i] = new DocsAndFreqs(scorers[i]);\n    }\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.timSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      @Override\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return Long.compare(o1.cost, o2.cost);\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","sourceOld":"  ConjunctionScorer(Weight weight, Scorer[] scorers, float coord) {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = new DocsAndFreqs[scorers.length];\n    for (int i = 0; i < scorers.length; i++) {\n      docsAndFreqs[i] = new DocsAndFreqs(scorers[i]);\n    }\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      @Override\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return Long.compare(o1.cost, o2.cost);\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25f698887111a682424e759ba36083180899a1fd","date":1423588899,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,List[#-extends-DocIdSetIterator],List[Scorer],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Scorer[],float).mjava","sourceNew":"  /** Create a new {@link ConjunctionScorer}, note that {@code scorers} must be a subset of {@code required}. */\n  ConjunctionScorer(Weight weight, List<? extends DocIdSetIterator> required, List<Scorer> scorers, float coord) {\n    super(weight);\n    assert required.containsAll(scorers);\n    this.coord = coord;\n    this.docsAndFreqs = new DocsAndFreqs[required.size()];\n    for (int i = 0; i < required.size(); ++i) {\n      docsAndFreqs[i] = new DocsAndFreqs(required.get(i));\n    }\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.timSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      @Override\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return Long.compare(o1.cost, o2.cost);\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n\n    this.scorers = scorers.toArray(new Scorer[scorers.size()]);\n  }\n\n","sourceOld":"  ConjunctionScorer(Weight weight, Scorer[] scorers, float coord) {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = new DocsAndFreqs[scorers.length];\n    for (int i = 0; i < scorers.length; i++) {\n      docsAndFreqs[i] = new DocsAndFreqs(scorers[i]);\n    }\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.timSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      @Override\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return Long.compare(o1.cost, o2.cost);\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"47da30f6e362ae055711fad41cdcba60b9dee8c6":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["47da30f6e362ae055711fad41cdcba60b9dee8c6"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"25f698887111a682424e759ba36083180899a1fd":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["25f698887111a682424e759ba36083180899a1fd"]},"commit2Childs":{"47da30f6e362ae055711fad41cdcba60b9dee8c6":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["25f698887111a682424e759ba36083180899a1fd"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["47da30f6e362ae055711fad41cdcba60b9dee8c6"],"25f698887111a682424e759ba36083180899a1fd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}