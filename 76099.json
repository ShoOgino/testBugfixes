{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoEncodingUtils#geoCodedToPrefixCodedBytes(long,int,BytesRefBuilder).mjava","commits":[{"id":"62cc423073d23f01208c6cf85844dedd80011121","date":1454731549,"type":0,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoEncodingUtils#geoCodedToPrefixCodedBytes(long,int,BytesRefBuilder).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * GeoTerms are coded using 4 prefix bytes + 1 byte to record number of prefix bits\n   *\n   * example prefix at shift 54 (yields 10 significant prefix bits):\n   *  pppppppp pp000000 00000000 00000000 00001010\n   *  (byte 1) (byte 2) (byte 3) (byte 4) (sigbits)\n   */\n  private static void geoCodedToPrefixCodedBytes(final long hash, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 32..63\n    if (shift < 32 || shift > 63) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 32..63; got shift=\" + shift);\n    }\n    int nChars = BUF_SIZE_LONG + 1; // one extra for the byte that contains the number of significant bits\n    bytes.setLength(nChars);\n    bytes.grow(nChars--);\n    final int sigBits = 64 - shift;\n    bytes.setByteAt(BUF_SIZE_LONG, (byte)(sigBits));\n    long sortableBits = hash;\n    sortableBits >>>= shift;\n    sortableBits <<= 32 - sigBits;\n    do {\n      bytes.setByteAt(--nChars, (byte)(sortableBits));\n      sortableBits >>>= 8;\n    } while (nChars > 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoEncodingUtils#geoCodedToPrefixCodedBytes(long,int,BytesRefBuilder).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * GeoTerms are coded using 4 prefix bytes + 1 byte to record number of prefix bits\n   *\n   * example prefix at shift 54 (yields 10 significant prefix bits):\n   *  pppppppp pp000000 00000000 00000000 00001010\n   *  (byte 1) (byte 2) (byte 3) (byte 4) (sigbits)\n   */\n  private static void geoCodedToPrefixCodedBytes(final long hash, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 32..63\n    if (shift < 32 || shift > 63) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 32..63; got shift=\" + shift);\n    }\n    int nChars = BUF_SIZE_LONG + 1; // one extra for the byte that contains the number of significant bits\n    bytes.setLength(nChars);\n    bytes.grow(nChars--);\n    final int sigBits = 64 - shift;\n    bytes.setByteAt(BUF_SIZE_LONG, (byte)(sigBits));\n    long sortableBits = hash;\n    sortableBits >>>= shift;\n    sortableBits <<= 32 - sigBits;\n    do {\n      bytes.setByteAt(--nChars, (byte)(sortableBits));\n      sortableBits >>>= 8;\n    } while (nChars > 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":0,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoEncodingUtils#geoCodedToPrefixCodedBytes(long,int,BytesRefBuilder).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * GeoTerms are coded using 4 prefix bytes + 1 byte to record number of prefix bits\n   *\n   * example prefix at shift 54 (yields 10 significant prefix bits):\n   *  pppppppp pp000000 00000000 00000000 00001010\n   *  (byte 1) (byte 2) (byte 3) (byte 4) (sigbits)\n   */\n  private static void geoCodedToPrefixCodedBytes(final long hash, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 32..63\n    if (shift < 32 || shift > 63) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 32..63; got shift=\" + shift);\n    }\n    int nChars = BUF_SIZE_LONG + 1; // one extra for the byte that contains the number of significant bits\n    bytes.setLength(nChars);\n    bytes.grow(nChars--);\n    final int sigBits = 64 - shift;\n    bytes.setByteAt(BUF_SIZE_LONG, (byte)(sigBits));\n    long sortableBits = hash;\n    sortableBits >>>= shift;\n    sortableBits <<= 32 - sigBits;\n    do {\n      bytes.setByteAt(--nChars, (byte)(sortableBits));\n      sortableBits >>>= 8;\n    } while (nChars > 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"065f36185d91a7d825ce7adac5b0d8df5cb4f73f","date":1461251676,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/document/GeoPointField#geoCodedToPrefixCodedBytes(long,int,BytesRefBuilder).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoEncodingUtils#geoCodedToPrefixCodedBytes(long,int,BytesRefBuilder).mjava","sourceNew":"  /**\n   * GeoTerms are coded using 4 prefix bytes + 1 byte to record number of prefix bits\n   *\n   * example prefix at shift 54 (yields 10 significant prefix bits):\n   *  pppppppp pp000000 00000000 00000000 00001010\n   *  (byte 1) (byte 2) (byte 3) (byte 4) (sigbits)\n   */\n  private static void geoCodedToPrefixCodedBytes(final long hash, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 32..63\n    if (shift < 32 || shift > 63) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 32..63; got shift=\" + shift);\n    }\n    int nChars = BUF_SIZE_LONG + 1; // one extra for the byte that contains the number of significant bits\n    bytes.setLength(nChars);\n    bytes.grow(nChars--);\n    final int sigBits = 64 - shift;\n    bytes.setByteAt(BUF_SIZE_LONG, (byte)(sigBits));\n    long sortableBits = hash;\n    sortableBits >>>= shift;\n    sortableBits <<= 32 - sigBits;\n    do {\n      bytes.setByteAt(--nChars, (byte)(sortableBits));\n      sortableBits >>>= 8;\n    } while (nChars > 0);\n  }\n\n","sourceOld":"  /**\n   * GeoTerms are coded using 4 prefix bytes + 1 byte to record number of prefix bits\n   *\n   * example prefix at shift 54 (yields 10 significant prefix bits):\n   *  pppppppp pp000000 00000000 00000000 00001010\n   *  (byte 1) (byte 2) (byte 3) (byte 4) (sigbits)\n   */\n  private static void geoCodedToPrefixCodedBytes(final long hash, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 32..63\n    if (shift < 32 || shift > 63) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 32..63; got shift=\" + shift);\n    }\n    int nChars = BUF_SIZE_LONG + 1; // one extra for the byte that contains the number of significant bits\n    bytes.setLength(nChars);\n    bytes.grow(nChars--);\n    final int sigBits = 64 - shift;\n    bytes.setByteAt(BUF_SIZE_LONG, (byte)(sigBits));\n    long sortableBits = hash;\n    sortableBits >>>= shift;\n    sortableBits <<= 32 - sigBits;\n    do {\n      bytes.setByteAt(--nChars, (byte)(sortableBits));\n      sortableBits >>>= 8;\n    } while (nChars > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","date":1461308643,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/document/GeoPointField#geoCodedToPrefixCodedBytes(long,int,BytesRefBuilder).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoEncodingUtils#geoCodedToPrefixCodedBytes(long,int,BytesRefBuilder).mjava","sourceNew":"  /**\n   * GeoTerms are coded using 4 prefix bytes + 1 byte to record number of prefix bits\n   *\n   * example prefix at shift 54 (yields 10 significant prefix bits):\n   *  pppppppp pp000000 00000000 00000000 00001010\n   *  (byte 1) (byte 2) (byte 3) (byte 4) (sigbits)\n   */\n  private static void geoCodedToPrefixCodedBytes(final long hash, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 32..63\n    if (shift < 32 || shift > 63) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 32..63; got shift=\" + shift);\n    }\n    int nChars = BUF_SIZE_LONG + 1; // one extra for the byte that contains the number of significant bits\n    bytes.setLength(nChars);\n    bytes.grow(nChars--);\n    final int sigBits = 64 - shift;\n    bytes.setByteAt(BUF_SIZE_LONG, (byte)(sigBits));\n    long sortableBits = hash;\n    sortableBits >>>= shift;\n    sortableBits <<= 32 - sigBits;\n    do {\n      bytes.setByteAt(--nChars, (byte)(sortableBits));\n      sortableBits >>>= 8;\n    } while (nChars > 0);\n  }\n\n","sourceOld":"  /**\n   * GeoTerms are coded using 4 prefix bytes + 1 byte to record number of prefix bits\n   *\n   * example prefix at shift 54 (yields 10 significant prefix bits):\n   *  pppppppp pp000000 00000000 00000000 00001010\n   *  (byte 1) (byte 2) (byte 3) (byte 4) (sigbits)\n   */\n  private static void geoCodedToPrefixCodedBytes(final long hash, final int shift, final BytesRefBuilder bytes) {\n    // ensure shift is 32..63\n    if (shift < 32 || shift > 63) {\n      throw new IllegalArgumentException(\"Illegal shift value, must be 32..63; got shift=\" + shift);\n    }\n    int nChars = BUF_SIZE_LONG + 1; // one extra for the byte that contains the number of significant bits\n    bytes.setLength(nChars);\n    bytes.grow(nChars--);\n    final int sigBits = 64 - shift;\n    bytes.setByteAt(BUF_SIZE_LONG, (byte)(sigBits));\n    long sortableBits = hash;\n    sortableBits >>>= shift;\n    sortableBits <<= 32 - sigBits;\n    do {\n      bytes.setByteAt(--nChars, (byte)(sortableBits));\n      sortableBits >>>= 8;\n    } while (nChars > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"065f36185d91a7d825ce7adac5b0d8df5cb4f73f":["5a207d19eac354d649c3f0e2cce070017c78125e"],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["5a207d19eac354d649c3f0e2cce070017c78125e","065f36185d91a7d825ce7adac5b0d8df5cb4f73f"],"5a207d19eac354d649c3f0e2cce070017c78125e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","62cc423073d23f01208c6cf85844dedd80011121"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","62cc423073d23f01208c6cf85844dedd80011121"],"62cc423073d23f01208c6cf85844dedd80011121":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"]},"commit2Childs":{"065f36185d91a7d825ce7adac5b0d8df5cb4f73f":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a207d19eac354d649c3f0e2cce070017c78125e":["065f36185d91a7d825ce7adac5b0d8df5cb4f73f","ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","62cc423073d23f01208c6cf85844dedd80011121"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"62cc423073d23f01208c6cf85844dedd80011121":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}