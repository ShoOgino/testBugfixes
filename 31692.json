{"path":"src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,Number,Number,boolean,boolean).mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,Number,Number,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private NumericRangeQuery(final String field, final int precisionStep, final int valSize,\n    Number min, Number max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    assert (valSize == 32 || valSize == 64);\n    if (precisionStep < 1 || precisionStep > valSize)\n      throw new IllegalArgumentException(\"precisionStep may only be 1..\"+valSize);\n    this.field = field.intern();\n    this.precisionStep = precisionStep;\n    this.valSize = valSize;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n    setConstantScoreRewrite(true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7d2ae00274b66906b7d2cfb445dcb095f6c1d6d","date":1245919872,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,Number,Number,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,Number,Number,boolean,boolean).mjava","sourceNew":"  private NumericRangeQuery(final String field, final int precisionStep, final int valSize,\n    Number min, Number max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    assert (valSize == 32 || valSize == 64);\n    if (min == null && max == null)\n      throw new IllegalArgumentException(\"At least one value must be non-null\");\n    if (precisionStep < 1 || precisionStep > valSize)\n      throw new IllegalArgumentException(\"precisionStep may only be 1..\"+valSize);\n    this.field = field.intern();\n    this.precisionStep = precisionStep;\n    this.valSize = valSize;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n    setConstantScoreRewrite(true);\n  }\n\n","sourceOld":"  private NumericRangeQuery(final String field, final int precisionStep, final int valSize,\n    Number min, Number max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    assert (valSize == 32 || valSize == 64);\n    if (precisionStep < 1 || precisionStep > valSize)\n      throw new IllegalArgumentException(\"precisionStep may only be 1..\"+valSize);\n    this.field = field.intern();\n    this.precisionStep = precisionStep;\n    this.valSize = valSize;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n    setConstantScoreRewrite(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b2ba469e48c35b93f118b45188ffaf6e9c31c9c","date":1246364870,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,Number,Number,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,Number,Number,boolean,boolean).mjava","sourceNew":"  private NumericRangeQuery(final String field, final int precisionStep, final int valSize,\n    Number min, Number max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    assert (valSize == 32 || valSize == 64);\n    if (precisionStep < 1 || precisionStep > valSize)\n      throw new IllegalArgumentException(\"precisionStep may only be 1..\"+valSize);\n    this.field = field.intern();\n    this.precisionStep = precisionStep;\n    this.valSize = valSize;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n    setConstantScoreRewrite(true);\n  }\n\n","sourceOld":"  private NumericRangeQuery(final String field, final int precisionStep, final int valSize,\n    Number min, Number max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    assert (valSize == 32 || valSize == 64);\n    if (min == null && max == null)\n      throw new IllegalArgumentException(\"At least one value must be non-null\");\n    if (precisionStep < 1 || precisionStep > valSize)\n      throw new IllegalArgumentException(\"precisionStep may only be 1..\"+valSize);\n    this.field = field.intern();\n    this.precisionStep = precisionStep;\n    this.valSize = valSize;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n    setConstantScoreRewrite(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426","date":1247563064,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,Number,Number,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,Number,Number,boolean,boolean).mjava","sourceNew":"  private NumericRangeQuery(final String field, final int precisionStep, final int valSize,\n    Number min, Number max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    assert (valSize == 32 || valSize == 64);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.field = field.intern();\n    this.precisionStep = precisionStep;\n    this.valSize = valSize;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n    setConstantScoreRewrite(true);\n  }\n\n","sourceOld":"  private NumericRangeQuery(final String field, final int precisionStep, final int valSize,\n    Number min, Number max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    assert (valSize == 32 || valSize == 64);\n    if (precisionStep < 1 || precisionStep > valSize)\n      throw new IllegalArgumentException(\"precisionStep may only be 1..\"+valSize);\n    this.field = field.intern();\n    this.precisionStep = precisionStep;\n    this.valSize = valSize;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n    setConstantScoreRewrite(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,Number,Number,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,Number,Number,boolean,boolean).mjava","sourceNew":"  private NumericRangeQuery(final String field, final int precisionStep, final int valSize,\n    Number min, Number max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    assert (valSize == 32 || valSize == 64);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.field = field.intern();\n    this.precisionStep = precisionStep;\n    this.valSize = valSize;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    final MultiTermQuery.RewriteMethod rewriteMethod;\n    if (valSize == 64) {\n      if (precisionStep > 6) {\n        // Likely to hit too many terms, so set to\n        // CONSTANT_SCORE_FILTER right off\n        rewriteMethod = CONSTANT_SCORE_FILTER_REWRITE;\n      } else {\n        rewriteMethod = CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;\n      }\n    } else if (valSize == 32) {\n      if (precisionStep > 8) {\n        // Likely to hit too many terms, so set to\n        // CONSTANT_SCORE_FILTER right off\n        rewriteMethod = CONSTANT_SCORE_FILTER_REWRITE;\n      } else {\n        rewriteMethod = CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;\n      }\n    } else {\n      throw new IllegalStateException(\"unrecognized valSize \" + valSize);\n    }\n    setRewriteMethod(rewriteMethod);\n  }\n\n","sourceOld":"  private NumericRangeQuery(final String field, final int precisionStep, final int valSize,\n    Number min, Number max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    assert (valSize == 32 || valSize == 64);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.field = field.intern();\n    this.precisionStep = precisionStep;\n    this.valSize = valSize;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n    setConstantScoreRewrite(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f72737a1e9086dec7c0a535a50ad665043ac21d5","date":1248519270,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,Number,Number,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,Number,Number,boolean,boolean).mjava","sourceNew":"  private NumericRangeQuery(final String field, final int precisionStep, final int valSize,\n    Number min, Number max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    assert (valSize == 32 || valSize == 64);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.field = field.intern();\n    this.precisionStep = precisionStep;\n    this.valSize = valSize;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    // For bigger precisionSteps this query likely\n    // hits too many terms, so set to CONSTANT_SCORE_FILTER right off\n    // (especially as the FilteredTermEnum is costly if wasted only for AUTO tests because it\n    // creates new enums from IndexReader for each sub-range)\n    switch (valSize) {\n      case 64:\n        setRewriteMethod( (precisionStep > 6) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      case 32:\n        setRewriteMethod( (precisionStep > 8) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      default:\n        // should never happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n  }\n\n","sourceOld":"  private NumericRangeQuery(final String field, final int precisionStep, final int valSize,\n    Number min, Number max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    assert (valSize == 32 || valSize == 64);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.field = field.intern();\n    this.precisionStep = precisionStep;\n    this.valSize = valSize;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    final MultiTermQuery.RewriteMethod rewriteMethod;\n    if (valSize == 64) {\n      if (precisionStep > 6) {\n        // Likely to hit too many terms, so set to\n        // CONSTANT_SCORE_FILTER right off\n        rewriteMethod = CONSTANT_SCORE_FILTER_REWRITE;\n      } else {\n        rewriteMethod = CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;\n      }\n    } else if (valSize == 32) {\n      if (precisionStep > 8) {\n        // Likely to hit too many terms, so set to\n        // CONSTANT_SCORE_FILTER right off\n        rewriteMethod = CONSTANT_SCORE_FILTER_REWRITE;\n      } else {\n        rewriteMethod = CONSTANT_SCORE_AUTO_REWRITE_DEFAULT;\n      }\n    } else {\n      throw new IllegalStateException(\"unrecognized valSize \" + valSize);\n    }\n    setRewriteMethod(rewriteMethod);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf93f7a278746d4746fa3ebb3d53267b22fd040f","date":1249495506,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,Number,Number,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,Number,Number,boolean,boolean).mjava","sourceNew":"  private NumericRangeQuery(final String field, final int precisionStep, final int valSize,\n    Number min, Number max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    assert (valSize == 32 || valSize == 64);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.field = StringHelper.intern(field);\n    this.precisionStep = precisionStep;\n    this.valSize = valSize;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    // For bigger precisionSteps this query likely\n    // hits too many terms, so set to CONSTANT_SCORE_FILTER right off\n    // (especially as the FilteredTermEnum is costly if wasted only for AUTO tests because it\n    // creates new enums from IndexReader for each sub-range)\n    switch (valSize) {\n      case 64:\n        setRewriteMethod( (precisionStep > 6) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      case 32:\n        setRewriteMethod( (precisionStep > 8) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      default:\n        // should never happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n  }\n\n","sourceOld":"  private NumericRangeQuery(final String field, final int precisionStep, final int valSize,\n    Number min, Number max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    assert (valSize == 32 || valSize == 64);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.field = field.intern();\n    this.precisionStep = precisionStep;\n    this.valSize = valSize;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    // For bigger precisionSteps this query likely\n    // hits too many terms, so set to CONSTANT_SCORE_FILTER right off\n    // (especially as the FilteredTermEnum is costly if wasted only for AUTO tests because it\n    // creates new enums from IndexReader for each sub-range)\n    switch (valSize) {\n      case 64:\n        setRewriteMethod( (precisionStep > 6) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      case 32:\n        setRewriteMethod( (precisionStep > 8) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      default:\n        // should never happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a9e462a51fd525218b83cdc33329f5ee00ca20","date":1254431499,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,T,T,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,Number,Number,boolean,boolean).mjava","sourceNew":"  private NumericRangeQuery(final String field, final int precisionStep, final int valSize,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    assert (valSize == 32 || valSize == 64);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.field = StringHelper.intern(field);\n    this.precisionStep = precisionStep;\n    this.valSize = valSize;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    // For bigger precisionSteps this query likely\n    // hits too many terms, so set to CONSTANT_SCORE_FILTER right off\n    // (especially as the FilteredTermEnum is costly if wasted only for AUTO tests because it\n    // creates new enums from IndexReader for each sub-range)\n    switch (valSize) {\n      case 64:\n        setRewriteMethod( (precisionStep > 6) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      case 32:\n        setRewriteMethod( (precisionStep > 8) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      default:\n        // should never happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n  }\n\n","sourceOld":"  private NumericRangeQuery(final String field, final int precisionStep, final int valSize,\n    Number min, Number max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    assert (valSize == 32 || valSize == 64);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.field = StringHelper.intern(field);\n    this.precisionStep = precisionStep;\n    this.valSize = valSize;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    // For bigger precisionSteps this query likely\n    // hits too many terms, so set to CONSTANT_SCORE_FILTER right off\n    // (especially as the FilteredTermEnum is costly if wasted only for AUTO tests because it\n    // creates new enums from IndexReader for each sub-range)\n    switch (valSize) {\n      case 64:\n        setRewriteMethod( (precisionStep > 6) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      case 32:\n        setRewriteMethod( (precisionStep > 8) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      default:\n        // should never happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cf93f7a278746d4746fa3ebb3d53267b22fd040f":["f72737a1e9086dec7c0a535a50ad665043ac21d5"],"b7d2ae00274b66906b7d2cfb445dcb095f6c1d6d":["53b6c192847de8643a5da505cc433cbf8476a175"],"f72737a1e9086dec7c0a535a50ad665043ac21d5":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"9b2ba469e48c35b93f118b45188ffaf6e9c31c9c":["b7d2ae00274b66906b7d2cfb445dcb095f6c1d6d"],"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426":["9b2ba469e48c35b93f118b45188ffaf6e9c31c9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["cf93f7a278746d4746fa3ebb3d53267b22fd040f"],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70a9e462a51fd525218b83cdc33329f5ee00ca20"]},"commit2Childs":{"cf93f7a278746d4746fa3ebb3d53267b22fd040f":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"b7d2ae00274b66906b7d2cfb445dcb095f6c1d6d":["9b2ba469e48c35b93f118b45188ffaf6e9c31c9c"],"f72737a1e9086dec7c0a535a50ad665043ac21d5":["cf93f7a278746d4746fa3ebb3d53267b22fd040f"],"9b2ba469e48c35b93f118b45188ffaf6e9c31c9c":["6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426"],"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"53b6c192847de8643a5da505cc433cbf8476a175":["b7d2ae00274b66906b7d2cfb445dcb095f6c1d6d"],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["f72737a1e9086dec7c0a535a50ad665043ac21d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}