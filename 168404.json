{"path":"src/test/org/apache/lucene/util/TestNumericUtils#testLongSpecialValues().mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestNumericUtils#testLongSpecialValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testLongSpecialValues() throws Exception {\n    long[] vals=new long[]{\n      Long.MIN_VALUE, Long.MIN_VALUE+1, Long.MIN_VALUE+2, -5003400000000L,\n      -4000L, -3000L, -2000L, -1000L, -1L, 0L, 1L, 10L, 300L, 50006789999999999L, Long.MAX_VALUE-2, Long.MAX_VALUE-1, Long.MAX_VALUE\n    };\n    String[] prefixVals=new String[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i]=NumericUtils.longToPrefixCoded(vals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same long\", vals[i], NumericUtils.prefixCodedToLong(prefixVals[i]) );\n\n      // test if decoding values as int fails correctly\n      try {\n        NumericUtils.prefixCodedToInt(prefixVals[i]);\n        fail(\"decoding a prefix coded long value as int should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].compareTo( prefixVals[i] ) < 0 );\n    }\n        \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<64; j++) {\n        long prefixVal=NumericUtils.prefixCodedToLong(NumericUtils.longToPrefixCoded(vals[i], j));\n        long mask=(1L << j) - 1L;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testLongSpecialValues().mjava","pathOld":"src/test/org/apache/lucene/util/TestNumericUtils#testLongSpecialValues().mjava","sourceNew":"  public void testLongSpecialValues() throws Exception {\n    long[] vals=new long[]{\n      Long.MIN_VALUE, Long.MIN_VALUE+1, Long.MIN_VALUE+2, -5003400000000L,\n      -4000L, -3000L, -2000L, -1000L, -1L, 0L, 1L, 10L, 300L, 50006789999999999L, Long.MAX_VALUE-2, Long.MAX_VALUE-1, Long.MAX_VALUE\n    };\n    String[] prefixVals=new String[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i]=NumericUtils.longToPrefixCoded(vals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same long\", vals[i], NumericUtils.prefixCodedToLong(prefixVals[i]) );\n\n      // test if decoding values as int fails correctly\n      try {\n        NumericUtils.prefixCodedToInt(prefixVals[i]);\n        fail(\"decoding a prefix coded long value as int should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].compareTo( prefixVals[i] ) < 0 );\n    }\n        \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<64; j++) {\n        long prefixVal=NumericUtils.prefixCodedToLong(NumericUtils.longToPrefixCoded(vals[i], j));\n        long mask=(1L << j) - 1L;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","sourceOld":"  public void testLongSpecialValues() throws Exception {\n    long[] vals=new long[]{\n      Long.MIN_VALUE, Long.MIN_VALUE+1, Long.MIN_VALUE+2, -5003400000000L,\n      -4000L, -3000L, -2000L, -1000L, -1L, 0L, 1L, 10L, 300L, 50006789999999999L, Long.MAX_VALUE-2, Long.MAX_VALUE-1, Long.MAX_VALUE\n    };\n    String[] prefixVals=new String[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i]=NumericUtils.longToPrefixCoded(vals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same long\", vals[i], NumericUtils.prefixCodedToLong(prefixVals[i]) );\n\n      // test if decoding values as int fails correctly\n      try {\n        NumericUtils.prefixCodedToInt(prefixVals[i]);\n        fail(\"decoding a prefix coded long value as int should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].compareTo( prefixVals[i] ) < 0 );\n    }\n        \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<64; j++) {\n        long prefixVal=NumericUtils.prefixCodedToLong(NumericUtils.longToPrefixCoded(vals[i], j));\n        long mask=(1L << j) - 1L;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["53b6c192847de8643a5da505cc433cbf8476a175"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"53b6c192847de8643a5da505cc433cbf8476a175":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}