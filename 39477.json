{"path":"solr/core/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","pathOld":"solr/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","sourceNew":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","sourceOld":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","pathOld":"solr/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","sourceNew":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","sourceOld":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","pathOld":"solr/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","sourceNew":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","sourceOld":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","sourceNew":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(info.getStart(), token.get(\"start\"));\n    assertEquals(info.getEnd(), token.get(\"end\"));\n    assertEquals(info.getPosition(), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","sourceOld":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","sourceNew":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(info.getStart(), token.get(\"start\"));\n    assertEquals(info.getEnd(), token.get(\"end\"));\n    assertEquals(info.getPosition(), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","sourceOld":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","sourceNew":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(info.getStart(), token.get(\"start\"));\n    assertEquals(info.getEnd(), token.get(\"end\"));\n    assertEquals(info.getPosition(), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","sourceOld":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(new Integer(info.getStart()), token.get(\"start\"));\n    assertEquals(new Integer(info.getEnd()), token.get(\"end\"));\n    assertEquals(new Integer(info.getPosition()), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/AnalysisRequestHandlerTestBase#assertToken(NamedList,TokenInfo).mjava","sourceNew":"  protected void assertToken(@SuppressWarnings({\"rawtypes\"})NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(info.getStart(), token.get(\"start\"));\n    assertEquals(info.getEnd(), token.get(\"end\"));\n    assertEquals(info.getPosition(), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","sourceOld":"  protected void assertToken(NamedList token, TokenInfo info) {\n    assertEquals(info.getText(), token.get(\"text\"));\n    if (info.getRawText() != null) {\n      assertEquals(info.getRawText(), token.get(\"raw_text\"));\n    }\n    assertEquals(info.getType(), token.get(\"type\"));\n    assertEquals(info.getStart(), token.get(\"start\"));\n    assertEquals(info.getEnd(), token.get(\"end\"));\n    assertEquals(info.getPosition(), token.get(\"position\"));\n    assertArrayEquals(info.getPositionHistory(), ArrayUtils.toPrimitive((Integer[]) token.get(\"positionHistory\")));\n    if (info.isMatch()) {\n      assertEquals(Boolean.TRUE, token.get(\"match\"));\n    }\n    if (info.getPayload() != null) {\n      assertEquals(info.getPayload(), token.get(\"payload\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["c26f00b574427b55127e869b935845554afde1fa"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["c26f00b574427b55127e869b935845554afde1fa","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["c26f00b574427b55127e869b935845554afde1fa","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}