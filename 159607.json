{"path":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#GrowableWriter(int,int,float).mjava","commits":[{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#GrowableWriter(int,int,float).mjava","pathOld":"/dev/null","sourceNew":"  public GrowableWriter(int startBitsPerValue, int valueCount, float acceptableOverheadRatio) {\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    current = PackedInts.getMutable(valueCount, startBitsPerValue, this.acceptableOverheadRatio);\n    currentMaxValue = PackedInts.maxValue(current.getBitsPerValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#GrowableWriter(int,int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#GrowableWriter(int,int,float).mjava","sourceNew":"  /**\n   * @param startBitsPerValue       the initial number of bits per value, may grow depending on the data\n   * @param valueCount              the number of values\n   * @param acceptableOverheadRatio an acceptable overhead ratio\n   */\n  public GrowableWriter(int startBitsPerValue, int valueCount, float acceptableOverheadRatio) {\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    current = PackedInts.getMutable(valueCount, startBitsPerValue, this.acceptableOverheadRatio);\n    currentMask = mask(current.getBitsPerValue());\n  }\n\n","sourceOld":"  public GrowableWriter(int startBitsPerValue, int valueCount, float acceptableOverheadRatio) {\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    current = PackedInts.getMutable(valueCount, startBitsPerValue, this.acceptableOverheadRatio);\n    currentMaxValue = PackedInts.maxValue(current.getBitsPerValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#GrowableWriter(int,int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/GrowableWriter#GrowableWriter(int,int,float).mjava","sourceNew":"  /**\n   * @param startBitsPerValue       the initial number of bits per value, may grow depending on the data\n   * @param valueCount              the number of values\n   * @param acceptableOverheadRatio an acceptable overhead ratio\n   */\n  public GrowableWriter(int startBitsPerValue, int valueCount, float acceptableOverheadRatio) {\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    current = PackedInts.getMutable(valueCount, startBitsPerValue, this.acceptableOverheadRatio);\n    currentMask = mask(current.getBitsPerValue());\n  }\n\n","sourceOld":"  public GrowableWriter(int startBitsPerValue, int valueCount, float acceptableOverheadRatio) {\n    this.acceptableOverheadRatio = acceptableOverheadRatio;\n    current = PackedInts.getMutable(valueCount, startBitsPerValue, this.acceptableOverheadRatio);\n    currentMaxValue = PackedInts.maxValue(current.getBitsPerValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["4a470c93b2b0f8f51241f52705fc110a01f27ad2","59a0020b413d44dd79d85d7a66ed5004265fb453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59a0020b413d44dd79d85d7a66ed5004265fb453"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}