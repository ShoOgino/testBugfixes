{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#openNewWriterAndSearcher(boolean).mjava","commits":[{"id":"bd8bc29700397ec1886e73bae0a67ff536bad223","date":1362159450,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#openNewWriterAndSearcher(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#doCommit(boolean).mjava","sourceNew":"  private void openNewWriterAndSearcher(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded, false);\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      // first try to open an NRT searcher so that the new\n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException e) {\n          SolrException.log(LOG, e);\n        } catch (ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","sourceOld":"  private void doCommit(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded, false);\n    \n    try {\n      // first try to open an NRT searcher so that the new\n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      solrCore.getSearcher(true, false, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException e) {\n          SolrException.log(LOG, e);\n        } catch (ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      \n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11fa6b3c54740236744aa64f1a29954b1cf172a5","date":1363907001,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#openNewWriterAndSearcher(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#openNewWriterAndSearcher(boolean).mjava","sourceNew":"  private void openNewWriterAndSearcher(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded);\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      // first try to open an NRT searcher so that the new\n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException e) {\n          SolrException.log(LOG, e);\n        } catch (ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","sourceOld":"  private void openNewWriterAndSearcher(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded, false);\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      // first try to open an NRT searcher so that the new\n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException e) {\n          SolrException.log(LOG, e);\n        } catch (ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","bugFix":["bd8bc29700397ec1886e73bae0a67ff536bad223"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"058801f8673d53a5abac8088204860ec29a40f0d","date":1364178882,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#openNewWriterAndSearcher(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#openNewWriterAndSearcher(boolean).mjava","sourceNew":"  private void openNewWriterAndSearcher(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded);\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException e) {\n          SolrException.log(LOG, e);\n        } catch (ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","sourceOld":"  private void openNewWriterAndSearcher(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded);\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      // first try to open an NRT searcher so that the new\n      // IndexWriter is registered with the reader\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException e) {\n          SolrException.log(LOG, e);\n        } catch (ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","bugFix":["bd8bc29700397ec1886e73bae0a67ff536bad223"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8a3067239133ceb0117bc3d48356169cf03894f","date":1372268205,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#openNewSearcherAndUpdateCommitPoint(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#openNewWriterAndSearcher(boolean).mjava","sourceNew":"  private void openNewSearcherAndUpdateCommitPoint(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException e) {\n          SolrException.log(LOG, e);\n        } catch (ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","sourceOld":"  private void openNewWriterAndSearcher(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded);\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException e) {\n          SolrException.log(LOG, e);\n        } catch (ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#openNewWriterAndSearcher(boolean).mjava","sourceNew":null,"sourceOld":"  private void openNewWriterAndSearcher(boolean isFullCopyNeeded) throws IOException {\n    SolrQueryRequest req = new LocalSolrQueryRequest(solrCore,\n        new ModifiableSolrParams());\n    // reboot the writer on the new index and get a new searcher\n    solrCore.getUpdateHandler().newIndexWriter(isFullCopyNeeded);\n    \n    RefCounted<SolrIndexSearcher> searcher = null;\n    IndexCommit commitPoint;\n    try {\n      Future[] waitSearcher = new Future[1];\n      searcher = solrCore.getSearcher(true, true, waitSearcher, true);\n      if (waitSearcher[0] != null) {\n        try {\n          waitSearcher[0].get();\n        } catch (InterruptedException e) {\n          SolrException.log(LOG, e);\n        } catch (ExecutionException e) {\n          SolrException.log(LOG, e);\n        }\n      }\n      commitPoint = searcher.get().getIndexReader().getIndexCommit();\n    } finally {\n      req.close();\n      if (searcher != null) {\n        searcher.decref();\n      }\n    }\n\n    // update the commit point in replication handler\n    replicationHandler.indexCommitPoint = commitPoint;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"058801f8673d53a5abac8088204860ec29a40f0d":["11fa6b3c54740236744aa64f1a29954b1cf172a5"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["058801f8673d53a5abac8088204860ec29a40f0d","d8a3067239133ceb0117bc3d48356169cf03894f"],"11fa6b3c54740236744aa64f1a29954b1cf172a5":["bd8bc29700397ec1886e73bae0a67ff536bad223"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8a3067239133ceb0117bc3d48356169cf03894f":["058801f8673d53a5abac8088204860ec29a40f0d"],"bd8bc29700397ec1886e73bae0a67ff536bad223":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d8a3067239133ceb0117bc3d48356169cf03894f"]},"commit2Childs":{"058801f8673d53a5abac8088204860ec29a40f0d":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d8a3067239133ceb0117bc3d48356169cf03894f"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"11fa6b3c54740236744aa64f1a29954b1cf172a5":["058801f8673d53a5abac8088204860ec29a40f0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd8bc29700397ec1886e73bae0a67ff536bad223"],"d8a3067239133ceb0117bc3d48356169cf03894f":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bd8bc29700397ec1886e73bae0a67ff536bad223":["11fa6b3c54740236744aa64f1a29954b1cf172a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}