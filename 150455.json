{"path":"src/test/org/apache/lucene/index/TestIndexReader#testDocsInOrderSearch().mjava","commits":[{"id":"87b6140eb35784da365e76a7236e4cd52a1a396c","date":1233591709,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDocsInOrderSearch().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1483\n  public void testDocsInOrderSearch() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    \n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(createDocument(\"a\"));\n    writer.commit();\n    writer.addDocument(createDocument(\"a\"));\n    writer.addDocument(createDocument(\"a\"));\n    writer.close();\n\n    Query q = new TermQuery(new Term(\"id\", \"a\"));\n\n    IndexSearcher s = new IndexSearcher(dir);\n    s.search(q, new MultiReaderHitCollector() {\n        int lastDocBase = -1;\n        public void setNextReader(IndexReader reader, int docBase) {\n          if (lastDocBase == -1) {\n            assertEquals(1, docBase);\n          } else if (lastDocBase == 1) {\n            assertEquals(0, docBase);\n          } else {\n            fail();\n          }\n          lastDocBase = docBase;\n        }\n        public void collect(int doc, float score) {}\n      });\n    s.close();\n\n    IndexReader r = IndexReader.open(dir);\n    s = new IndexSearcher(r, true);\n    s.search(q, new MultiReaderHitCollector() {\n        int lastDocBase = -1;\n        public void setNextReader(IndexReader reader, int docBase) {\n          if (lastDocBase == -1) {\n            assertEquals(0, docBase);\n          } else if (lastDocBase == 0) {\n            assertEquals(1, docBase);\n          } else {\n            fail();\n          }\n          lastDocBase = docBase;\n        }\n        public void collect(int doc, float score) {}\n      });\n    s.close();\n    r.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDocsInOrderSearch().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDocsInOrderSearch().mjava","sourceNew":"  // LUCENE-1483\n  public void testDocsInOrderSearch() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    \n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(createDocument(\"a\"));\n    writer.commit();\n    writer.addDocument(createDocument(\"a\"));\n    writer.addDocument(createDocument(\"a\"));\n    writer.close();\n\n    Query q = new TermQuery(new Term(\"id\", \"a\"));\n\n    IndexSearcher s = new IndexSearcher(dir);\n    s.search(q, new Collector() {\n        int lastDocBase = -1;\n        public void setNextReader(IndexReader reader, int docBase) {\n          if (lastDocBase == -1) {\n            assertEquals(1, docBase);\n          } else if (lastDocBase == 1) {\n            assertEquals(0, docBase);\n          } else {\n            fail();\n          }\n          lastDocBase = docBase;\n        }\n        public void collect(int doc) {}\n        public void setScorer(Scorer scorer) {}\n      });\n    s.close();\n\n    IndexReader r = IndexReader.open(dir);\n    s = new IndexSearcher(r, true);\n    s.search(q, new Collector() {\n        int lastDocBase = -1;\n        public void setNextReader(IndexReader reader, int docBase) {\n          if (lastDocBase == -1) {\n            assertEquals(0, docBase);\n          } else if (lastDocBase == 0) {\n            assertEquals(1, docBase);\n          } else {\n            fail();\n          }\n          lastDocBase = docBase;\n        }\n        public void collect(int doc) {}\n        public void setScorer(Scorer scorer) {}\n      });\n    s.close();\n    r.close();\n  }\n\n","sourceOld":"  // LUCENE-1483\n  public void testDocsInOrderSearch() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    \n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(createDocument(\"a\"));\n    writer.commit();\n    writer.addDocument(createDocument(\"a\"));\n    writer.addDocument(createDocument(\"a\"));\n    writer.close();\n\n    Query q = new TermQuery(new Term(\"id\", \"a\"));\n\n    IndexSearcher s = new IndexSearcher(dir);\n    s.search(q, new MultiReaderHitCollector() {\n        int lastDocBase = -1;\n        public void setNextReader(IndexReader reader, int docBase) {\n          if (lastDocBase == -1) {\n            assertEquals(1, docBase);\n          } else if (lastDocBase == 1) {\n            assertEquals(0, docBase);\n          } else {\n            fail();\n          }\n          lastDocBase = docBase;\n        }\n        public void collect(int doc, float score) {}\n      });\n    s.close();\n\n    IndexReader r = IndexReader.open(dir);\n    s = new IndexSearcher(r, true);\n    s.search(q, new MultiReaderHitCollector() {\n        int lastDocBase = -1;\n        public void setNextReader(IndexReader reader, int docBase) {\n          if (lastDocBase == -1) {\n            assertEquals(0, docBase);\n          } else if (lastDocBase == 0) {\n            assertEquals(1, docBase);\n          } else {\n            fail();\n          }\n          lastDocBase = docBase;\n        }\n        public void collect(int doc, float score) {}\n      });\n    s.close();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDocsInOrderSearch().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1483\n  public void testDocsInOrderSearch() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    \n    IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(),\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(createDocument(\"a\"));\n    writer.commit();\n    writer.addDocument(createDocument(\"a\"));\n    writer.addDocument(createDocument(\"a\"));\n    writer.close();\n\n    Query q = new TermQuery(new Term(\"id\", \"a\"));\n\n    IndexSearcher s = new IndexSearcher(dir);\n    s.search(q, new Collector() {\n        int lastDocBase = -1;\n        public void setNextReader(IndexReader reader, int docBase) {\n          if (lastDocBase == -1) {\n            assertEquals(1, docBase);\n          } else if (lastDocBase == 1) {\n            assertEquals(0, docBase);\n          } else {\n            fail();\n          }\n          lastDocBase = docBase;\n        }\n        public void collect(int doc) {}\n        public void setScorer(Scorer scorer) {}\n      });\n    s.close();\n\n    IndexReader r = IndexReader.open(dir);\n    s = new IndexSearcher(r, true);\n    s.search(q, new Collector() {\n        int lastDocBase = -1;\n        public void setNextReader(IndexReader reader, int docBase) {\n          if (lastDocBase == -1) {\n            assertEquals(0, docBase);\n          } else if (lastDocBase == 0) {\n            assertEquals(1, docBase);\n          } else {\n            fail();\n          }\n          lastDocBase = docBase;\n        }\n        public void collect(int doc) {}\n        public void setScorer(Scorer scorer) {}\n      });\n    s.close();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["87b6140eb35784da365e76a7236e4cd52a1a396c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87b6140eb35784da365e76a7236e4cd52a1a396c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"]},"commit2Childs":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87b6140eb35784da365e76a7236e4cd52a1a396c"],"87b6140eb35784da365e76a7236e4cd52a1a396c":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}