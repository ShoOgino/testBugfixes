{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LLRect#createBox(LatLng,double,double).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LLRect#createBox(LatLng,double,double).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LLRect#createBox(LatLng,double,double).mjava","sourceNew":"  /**\n   * Approximates a box centered at the given point with the given width and height in miles.\n   * @param center\n   * @param widthMi\n   * @param heightMi\n   */\n  public static LLRect createBox(LatLng center, double widthMi, double heightMi) {\n    double d = widthMi;\n    LatLng ur = boxCorners(center, d, 45.0); // assume right angles\n    LatLng ll = boxCorners(center, d, 225.0);\n\n    //System.err.println(\"boxCorners: ur \" + ur.getLat() + ',' + ur.getLng());\n    //System.err.println(\"boxCorners: cnt \" + center.getLat() + ',' + center.getLng());\n    //System.err.println(\"boxCorners: ll \" + ll.getLat() + ',' + ll.getLng());\n    return new LLRect(ll, ur);\n  }\n\n","sourceOld":"  /**\n   * Approximates a box centered at the given point with the given width and height in miles.\n   * @param center\n   * @param widthMi\n   * @param heightMi\n   */\n  public static LLRect createBox(LatLng center, double widthMi, double heightMi) {\n    double d = widthMi;\n    LatLng ur = boxCorners(center, d, 45.0); // assume right angles\n    LatLng ll = boxCorners(center, d, 225.0);\n\n    //System.err.println(\"boxCorners: ur \" + ur.getLat() + ',' + ur.getLng());\n    //System.err.println(\"boxCorners: cnt \" + center.getLat() + ',' + center.getLng());\n    //System.err.println(\"boxCorners: ll \" + ll.getLat() + ',' + ll.getLng());\n    return new LLRect(ll, ur);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b6f51785c57651e9e1864b7b883037f24541c76","date":1271186480,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LLRect#createBox(LatLng,double,double).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LLRect#createBox(LatLng,double,double).mjava","sourceNew":"  /**\n   * Approximates a box centered at the given point with the given width and height in miles.\n   * @param center\n   * @param widthMi\n   * @param heightMi\n   */\n  public static LLRect createBox(LatLng center, double widthMi, double heightMi) {\n\t\tdouble minLat;\n    double maxLat;\n\t\tdouble minLng;\n    double maxLng;\n    double radius= Math.max(widthMi, heightMi);\n\t\t\n\t\tif (radius > center.arcDistance(new FloatLatLng(LatLng.LATITUDE_DEGREE_MAX, LatLng.HEADING_NORTH))) {\n\t\t\tmaxLat = LatLng.LATITUDE_DEGREE_MAX;\n\t\t} else {\n\t\t\tmaxLat = LatLng.computeDestination(center, radius, LatLng.HEADING_NORTH).getLat();\n\t\t\t\n\t\t}\n\t\tif (radius > center.arcDistance(new FloatLatLng(LatLng.LATITUDE_DEGREE_MIN, LatLng.HEADING_NORTH))) {\n\t\t\tminLat = LatLng.LATITUDE_DEGREE_MIN;\n\t\t} else {\n\t\t\tminLat = LatLng.computeDestination(center, radius, LatLng.HEADING_SOUTH).getLat();\n\t\t}\n\n\t\tif((radius > 2 * Math.PI * DistanceUnits.MILES.earthRadius() * Math.cos(Math.toRadians(minLat))) ||\n        (radius > 2 * Math.PI * DistanceUnits.MILES.earthRadius() * Math.cos(Math.toRadians(maxLat)))) {\n\t\t\tmaxLng = LatLng.LONGITUDE_DEGREE_MAX;\n\t\t\tminLng = LatLng.LONGITUDE_DEGREE_MIN;\n\t\t} else {\n\t\t\tmaxLng = LatLng.computeDestination(new FloatLatLng(Math.max(Math.abs(minLat), Math.abs(maxLat)), center.getLng()), radius, LatLng.HEADING_EAST).getLng();\n\t\t\tminLng = LatLng.computeDestination(new FloatLatLng(Math.max(Math.abs(minLat), Math.abs(maxLat)), center.getLng()), radius, LatLng.HEADING_WEST).getLng();\n\t\t}\n\n\t\treturn new LLRect((new FloatLatLng(minLat, minLng).normalize()), (new FloatLatLng(maxLat, maxLng)).normalize());\n  }\n\n","sourceOld":"  /**\n   * Approximates a box centered at the given point with the given width and height in miles.\n   * @param center\n   * @param widthMi\n   * @param heightMi\n   */\n  public static LLRect createBox(LatLng center, double widthMi, double heightMi) {\n    double d = widthMi;\n    LatLng ur = boxCorners(center, d, 45.0); // assume right angles\n    LatLng ll = boxCorners(center, d, 225.0);\n\n    //System.err.println(\"boxCorners: ur \" + ur.getLat() + ',' + ur.getLng());\n    //System.err.println(\"boxCorners: cnt \" + center.getLat() + ',' + center.getLng());\n    //System.err.println(\"boxCorners: ll \" + ll.getLat() + ',' + ll.getLng());\n    return new LLRect(ll, ur);\n  }\n\n","bugFix":["04a4a94db1eb59c8583adb166acfe686a031bedc","0a04035855bf53c50aaef580f2ec794acf73029e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e6ff1dd868eee0c9202357a60a5636ad62cb0c5","date":1271290552,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LLRect#createBox(LatLng,double,double).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LLRect#createBox(LatLng,double,double).mjava","sourceNew":"  /**\n   * Approximates a box centered at the given point with the given width and height in miles.\n   * @param center\n   * @param widthMi\n   * @param heightMi\n   */\n  public static LLRect createBox(LatLng center, double widthMi, double heightMi) {\n    double d = widthMi;\n    LatLng ur = boxCorners(center, d, 45.0); // assume right angles\n    LatLng ll = boxCorners(center, d, 225.0);\n\n    //System.err.println(\"boxCorners: ur \" + ur.getLat() + ',' + ur.getLng());\n    //System.err.println(\"boxCorners: cnt \" + center.getLat() + ',' + center.getLng());\n    //System.err.println(\"boxCorners: ll \" + ll.getLat() + ',' + ll.getLng());\n    return new LLRect(ll, ur);\n  }\n\n","sourceOld":"  /**\n   * Approximates a box centered at the given point with the given width and height in miles.\n   * @param center\n   * @param widthMi\n   * @param heightMi\n   */\n  public static LLRect createBox(LatLng center, double widthMi, double heightMi) {\n\t\tdouble minLat;\n    double maxLat;\n\t\tdouble minLng;\n    double maxLng;\n    double radius= Math.max(widthMi, heightMi);\n\t\t\n\t\tif (radius > center.arcDistance(new FloatLatLng(LatLng.LATITUDE_DEGREE_MAX, LatLng.HEADING_NORTH))) {\n\t\t\tmaxLat = LatLng.LATITUDE_DEGREE_MAX;\n\t\t} else {\n\t\t\tmaxLat = LatLng.computeDestination(center, radius, LatLng.HEADING_NORTH).getLat();\n\t\t\t\n\t\t}\n\t\tif (radius > center.arcDistance(new FloatLatLng(LatLng.LATITUDE_DEGREE_MIN, LatLng.HEADING_NORTH))) {\n\t\t\tminLat = LatLng.LATITUDE_DEGREE_MIN;\n\t\t} else {\n\t\t\tminLat = LatLng.computeDestination(center, radius, LatLng.HEADING_SOUTH).getLat();\n\t\t}\n\n\t\tif((radius > 2 * Math.PI * DistanceUnits.MILES.earthRadius() * Math.cos(Math.toRadians(minLat))) ||\n        (radius > 2 * Math.PI * DistanceUnits.MILES.earthRadius() * Math.cos(Math.toRadians(maxLat)))) {\n\t\t\tmaxLng = LatLng.LONGITUDE_DEGREE_MAX;\n\t\t\tminLng = LatLng.LONGITUDE_DEGREE_MIN;\n\t\t} else {\n\t\t\tmaxLng = LatLng.computeDestination(new FloatLatLng(Math.max(Math.abs(minLat), Math.abs(maxLat)), center.getLng()), radius, LatLng.HEADING_EAST).getLng();\n\t\t\tminLng = LatLng.computeDestination(new FloatLatLng(Math.max(Math.abs(minLat), Math.abs(maxLat)), center.getLng()), radius, LatLng.HEADING_WEST).getLng();\n\t\t}\n\n\t\treturn new LLRect((new FloatLatLng(minLat, minLng).normalize()), (new FloatLatLng(maxLat, maxLng)).normalize());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fb7e38713d15939e085d376c6391e6e6262a81f","date":1329897272,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LLRect#createBox(LatLng,double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Approximates a box centered at the given point with the given width and height in miles.\n   * @param center\n   * @param widthMi\n   * @param heightMi\n   */\n  public static LLRect createBox(LatLng center, double widthMi, double heightMi) {\n    double d = widthMi;\n    LatLng ur = boxCorners(center, d, 45.0); // assume right angles\n    LatLng ll = boxCorners(center, d, 225.0);\n\n    //System.err.println(\"boxCorners: ur \" + ur.getLat() + ',' + ur.getLng());\n    //System.err.println(\"boxCorners: cnt \" + center.getLat() + ',' + center.getLng());\n    //System.err.println(\"boxCorners: ll \" + ll.getLat() + ',' + ll.getLng());\n    return new LLRect(ll, ur);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LLRect#createBox(LatLng,double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Approximates a box centered at the given point with the given width and height in miles.\n   * @param center\n   * @param widthMi\n   * @param heightMi\n   */\n  public static LLRect createBox(LatLng center, double widthMi, double heightMi) {\n    double d = widthMi;\n    LatLng ur = boxCorners(center, d, 45.0); // assume right angles\n    LatLng ll = boxCorners(center, d, 225.0);\n\n    //System.err.println(\"boxCorners: ur \" + ur.getLat() + ',' + ur.getLng());\n    //System.err.println(\"boxCorners: cnt \" + center.getLat() + ',' + center.getLng());\n    //System.err.println(\"boxCorners: ll \" + ll.getLat() + ',' + ll.getLng());\n    return new LLRect(ll, ur);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b6f51785c57651e9e1864b7b883037f24541c76":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8e6ff1dd868eee0c9202357a60a5636ad62cb0c5":["3b6f51785c57651e9e1864b7b883037f24541c76"],"e47768b261c28e7e6032060e8331475c81057953":["8e6ff1dd868eee0c9202357a60a5636ad62cb0c5","2fb7e38713d15939e085d376c6391e6e6262a81f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e47768b261c28e7e6032060e8331475c81057953"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["8e6ff1dd868eee0c9202357a60a5636ad62cb0c5"]},"commit2Childs":{"3b6f51785c57651e9e1864b7b883037f24541c76":["8e6ff1dd868eee0c9202357a60a5636ad62cb0c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8e6ff1dd868eee0c9202357a60a5636ad62cb0c5":["e47768b261c28e7e6032060e8331475c81057953","2fb7e38713d15939e085d376c6391e6e6262a81f"],"e47768b261c28e7e6032060e8331475c81057953":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3b6f51785c57651e9e1864b7b883037f24541c76"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}