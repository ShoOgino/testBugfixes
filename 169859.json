{"path":"lucene/core/src/java/org/apache/lucene/geo/Rectangle2D#Rectangle2D(double,double,double,double).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Rectangle2D#Rectangle2D(double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Rectangle2D#Rectangle2D(double,double,double,double).mjava","sourceNew":"  protected Rectangle2D(double minLat, double maxLat, double minLon, double maxLon) {\n    this.bbox = new byte[4 * BYTES];\n    int minXenc = encodeLongitudeCeil(minLon);\n    int maxXenc = encodeLongitude(maxLon);\n    int minYenc = encodeLatitudeCeil(minLat);\n    int maxYenc = encodeLatitude(maxLat);\n    if (minYenc > maxYenc) {\n      minYenc = maxYenc;\n    }\n    this.minY = minYenc;\n    this.maxY = maxYenc;\n\n    if (minLon > maxLon == true) {\n      // crossing dateline is split into east/west boxes\n      this.west = new byte[4 * BYTES];\n      this.minX = minXenc;\n      this.maxX = maxXenc;\n      encode(MIN_LON_ENCODED, this.maxX, this.minY, this.maxY, this.west);\n      encode(this.minX, MAX_LON_ENCODED, this.minY, this.maxY, this.bbox);\n    } else {\n      // encodeLongitudeCeil may cause minX to be > maxX iff\n      // the delta between the longitude < the encoding resolution\n      if (minXenc > maxXenc) {\n        minXenc = maxXenc;\n      }\n      this.west = null;\n      this.minX = minXenc;\n      this.maxX = maxXenc;\n      encode(this.minX, this.maxX, this.minY, this.maxY, bbox);\n    }\n  }\n\n","sourceOld":"  protected Rectangle2D(double minLat, double maxLat, double minLon, double maxLon) {\n    this.bbox = new byte[4 * BYTES];\n    int minXenc = encodeLongitudeCeil(minLon);\n    int maxXenc = encodeLongitude(maxLon);\n    int minYenc = encodeLatitudeCeil(minLat);\n    int maxYenc = encodeLatitude(maxLat);\n    if (minYenc > maxYenc) {\n      minYenc = maxYenc;\n    }\n    this.minY = minYenc;\n    this.maxY = maxYenc;\n\n    if (minLon > maxLon == true) {\n      // crossing dateline is split into east/west boxes\n      this.west = new byte[4 * BYTES];\n      this.minX = minXenc;\n      this.maxX = maxXenc;\n      encode(MIN_LON_ENCODED, this.maxX, this.minY, this.maxY, this.west);\n      encode(this.minX, MAX_LON_ENCODED, this.minY, this.maxY, this.bbox);\n    } else {\n      // encodeLongitudeCeil may cause minX to be > maxX iff\n      // the delta between the longitude < the encoding resolution\n      if (minXenc > maxXenc) {\n        minXenc = maxXenc;\n      }\n      this.west = null;\n      this.minX = minXenc;\n      this.maxX = maxXenc;\n      encode(this.minX, this.maxX, this.minY, this.maxY, bbox);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56c42be8d779573d0c86ba775117e17360dbf5a6","date":1583217404,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Rectangle2D#Rectangle2D(double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Rectangle2D#Rectangle2D(double,double,double,double).mjava","sourceNew":"  private Rectangle2D(double minX, double maxX, double minY, double maxY) {\n    this.minX =  minX;\n    this.maxX =  maxX;\n    this.minY =  minY;\n    this.maxY =  maxY;\n  }\n\n","sourceOld":"  protected Rectangle2D(double minLat, double maxLat, double minLon, double maxLon) {\n    this.bbox = new byte[4 * BYTES];\n    int minXenc = encodeLongitudeCeil(minLon);\n    int maxXenc = encodeLongitude(maxLon);\n    int minYenc = encodeLatitudeCeil(minLat);\n    int maxYenc = encodeLatitude(maxLat);\n    if (minYenc > maxYenc) {\n      minYenc = maxYenc;\n    }\n    this.minY = minYenc;\n    this.maxY = maxYenc;\n\n    if (minLon > maxLon == true) {\n      // crossing dateline is split into east/west boxes\n      this.west = new byte[4 * BYTES];\n      this.minX = minXenc;\n      this.maxX = maxXenc;\n      encode(MIN_LON_ENCODED, this.maxX, this.minY, this.maxY, this.west);\n      encode(this.minX, MAX_LON_ENCODED, this.minY, this.maxY, this.bbox);\n    } else {\n      // encodeLongitudeCeil may cause minX to be > maxX iff\n      // the delta between the longitude < the encoding resolution\n      if (minXenc > maxXenc) {\n        minXenc = maxXenc;\n      }\n      this.west = null;\n      this.minX = minXenc;\n      this.maxX = maxXenc;\n      encode(this.minX, this.maxX, this.minY, this.maxY, bbox);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56c42be8d779573d0c86ba775117e17360dbf5a6"]},"commit2Childs":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}