{"path":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","commits":[{"id":"3cdd24a5b48ffd59f921ccc4f5199fc029f65797","date":1485039431,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected Query getDocValuesRangeQuery(QParser parser, SchemaField field, String min, String max,\n      boolean minInclusive, boolean maxInclusive) {\n    assert field.hasDocValues() && !field.multiValued();\n    \n    switch (getType()) {\n      case INTEGER:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : (long) Integer.parseInt(min),\n              max == null ? null : (long) Integer.parseInt(max),\n              minInclusive, maxInclusive);\n      case FLOAT:\n        return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n      case LONG:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : Long.parseLong(min),\n              max == null ? null : Long.parseLong(max),\n              minInclusive, maxInclusive);\n      case DOUBLE:\n        return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n      case DATE:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : DateMathParser.parseMath(null, min).getTime(),\n              max == null ? null : DateMathParser.parseMath(null, max).getTime(),\n              minInclusive, maxInclusive);\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for point field\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["92f8ab19a30ff70981e43b8cc78069cb0941476e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ec9eaf56660f0438887cf46c6d538cc97b0d6","date":1485040921,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  protected Query getDocValuesRangeQuery(QParser parser, SchemaField field, String min, String max,\n      boolean minInclusive, boolean maxInclusive) {\n    assert field.hasDocValues() && !field.multiValued();\n    \n    switch (getType()) {\n      case INTEGER:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : (long) Integer.parseInt(min),\n              max == null ? null : (long) Integer.parseInt(max),\n              minInclusive, maxInclusive);\n      case FLOAT:\n        return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n      case LONG:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : Long.parseLong(min),\n              max == null ? null : Long.parseLong(max),\n              minInclusive, maxInclusive);\n      case DOUBLE:\n        return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n      case DATE:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : DateMathParser.parseMath(null, min).getTime(),\n              max == null ? null : DateMathParser.parseMath(null, max).getTime(),\n              minInclusive, maxInclusive);\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for numeric field\");\n    }\n  }\n\n","sourceOld":"  protected Query getDocValuesRangeQuery(QParser parser, SchemaField field, String min, String max,\n      boolean minInclusive, boolean maxInclusive) {\n    assert field.hasDocValues() && !field.multiValued();\n    \n    switch (getType()) {\n      case INTEGER:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : (long) Integer.parseInt(min),\n              max == null ? null : (long) Integer.parseInt(max),\n              minInclusive, maxInclusive);\n      case FLOAT:\n        return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n      case LONG:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : Long.parseLong(min),\n              max == null ? null : Long.parseLong(max),\n              minInclusive, maxInclusive);\n      case DOUBLE:\n        return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n      case DATE:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : DateMathParser.parseMath(null, min).getTime(),\n              max == null ? null : DateMathParser.parseMath(null, max).getTime(),\n              minInclusive, maxInclusive);\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for point field\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected Query getDocValuesRangeQuery(QParser parser, SchemaField field, String min, String max,\n      boolean minInclusive, boolean maxInclusive) {\n    assert field.hasDocValues() && !field.multiValued();\n    \n    switch (getType()) {\n      case INTEGER:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : (long) Integer.parseInt(min),\n              max == null ? null : (long) Integer.parseInt(max),\n              minInclusive, maxInclusive);\n      case FLOAT:\n        return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n      case LONG:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : Long.parseLong(min),\n              max == null ? null : Long.parseLong(max),\n              minInclusive, maxInclusive);\n      case DOUBLE:\n        return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n      case DATE:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : DateMathParser.parseMath(null, min).getTime(),\n              max == null ? null : DateMathParser.parseMath(null, max).getTime(),\n              minInclusive, maxInclusive);\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for numeric field\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d81baa64023bbb9b43f6d929ee168b105940d30","date":1486492702,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  protected Query getDocValuesRangeQuery(QParser parser, SchemaField field, String min, String max,\n      boolean minInclusive, boolean maxInclusive) {\n    assert field.hasDocValues() && !field.multiValued();\n    \n    switch (getNumberType()) {\n      case INTEGER:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : (long) Integer.parseInt(min),\n              max == null ? null : (long) Integer.parseInt(max),\n              minInclusive, maxInclusive);\n      case FLOAT:\n        return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n      case LONG:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : Long.parseLong(min),\n              max == null ? null : Long.parseLong(max),\n              minInclusive, maxInclusive);\n      case DOUBLE:\n        return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n      case DATE:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : DateMathParser.parseMath(null, min).getTime(),\n              max == null ? null : DateMathParser.parseMath(null, max).getTime(),\n              minInclusive, maxInclusive);\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for numeric field\");\n    }\n  }\n\n","sourceOld":"  protected Query getDocValuesRangeQuery(QParser parser, SchemaField field, String min, String max,\n      boolean minInclusive, boolean maxInclusive) {\n    assert field.hasDocValues() && !field.multiValued();\n    \n    switch (getType()) {\n      case INTEGER:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : (long) Integer.parseInt(min),\n              max == null ? null : (long) Integer.parseInt(max),\n              minInclusive, maxInclusive);\n      case FLOAT:\n        return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n      case LONG:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : Long.parseLong(min),\n              max == null ? null : Long.parseLong(max),\n              minInclusive, maxInclusive);\n      case DOUBLE:\n        return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n      case DATE:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : DateMathParser.parseMath(null, min).getTime(),\n              max == null ? null : DateMathParser.parseMath(null, max).getTime(),\n              minInclusive, maxInclusive);\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for numeric field\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"744b111b17d15d490a648eb021bfa240e7f11556","date":1487008069,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  protected Query getDocValuesRangeQuery(QParser parser, SchemaField field, String min, String max,\n      boolean minInclusive, boolean maxInclusive) {\n    assert field.hasDocValues() && (field.getType().isPointField() || !field.multiValued());\n    \n    switch (getNumberType()) {\n      case INTEGER:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : (long) Integer.parseInt(min),\n              max == null ? null : (long) Integer.parseInt(max),\n              minInclusive, maxInclusive, field.multiValued());\n      case FLOAT:\n        if (field.multiValued()) {\n          return getRangeQueryForMultiValuedFloatDocValues(field, min, max, minInclusive, maxInclusive);\n        } else {\n          return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        }\n      case LONG:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : Long.parseLong(min),\n              max == null ? null : Long.parseLong(max),\n              minInclusive, maxInclusive, field.multiValued());\n      case DOUBLE:\n        if (field.multiValued()) { \n          return getRangeQueryForMultiValuedDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        } else {\n          return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        }\n      case DATE:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : DateMathParser.parseMath(null, min).getTime(),\n              max == null ? null : DateMathParser.parseMath(null, max).getTime(),\n              minInclusive, maxInclusive, field.multiValued());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for numeric field\");\n    }\n  }\n\n","sourceOld":"  protected Query getDocValuesRangeQuery(QParser parser, SchemaField field, String min, String max,\n      boolean minInclusive, boolean maxInclusive) {\n    assert field.hasDocValues() && !field.multiValued();\n    \n    switch (getNumberType()) {\n      case INTEGER:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : (long) Integer.parseInt(min),\n              max == null ? null : (long) Integer.parseInt(max),\n              minInclusive, maxInclusive);\n      case FLOAT:\n        return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n      case LONG:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : Long.parseLong(min),\n              max == null ? null : Long.parseLong(max),\n              minInclusive, maxInclusive);\n      case DOUBLE:\n        return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n      case DATE:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : DateMathParser.parseMath(null, min).getTime(),\n              max == null ? null : DateMathParser.parseMath(null, max).getTime(),\n              minInclusive, maxInclusive);\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for numeric field\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  protected Query getDocValuesRangeQuery(QParser parser, SchemaField field, String min, String max,\n      boolean minInclusive, boolean maxInclusive) {\n    assert field.hasDocValues() && (field.getType().isPointField() || !field.multiValued());\n    \n    switch (getNumberType()) {\n      case INTEGER:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : (long) Integer.parseInt(min),\n              max == null ? null : (long) Integer.parseInt(max),\n              minInclusive, maxInclusive, field.multiValued());\n      case FLOAT:\n        if (field.multiValued()) {\n          return getRangeQueryForMultiValuedFloatDocValues(field, min, max, minInclusive, maxInclusive);\n        } else {\n          return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        }\n      case LONG:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : Long.parseLong(min),\n              max == null ? null : Long.parseLong(max),\n              minInclusive, maxInclusive, field.multiValued());\n      case DOUBLE:\n        if (field.multiValued()) { \n          return getRangeQueryForMultiValuedDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        } else {\n          return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        }\n      case DATE:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : DateMathParser.parseMath(null, min).getTime(),\n              max == null ? null : DateMathParser.parseMath(null, max).getTime(),\n              minInclusive, maxInclusive, field.multiValued());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for numeric field\");\n    }\n  }\n\n","sourceOld":"  protected Query getDocValuesRangeQuery(QParser parser, SchemaField field, String min, String max,\n      boolean minInclusive, boolean maxInclusive) {\n    assert field.hasDocValues() && !field.multiValued();\n    \n    switch (getNumberType()) {\n      case INTEGER:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : (long) Integer.parseInt(min),\n              max == null ? null : (long) Integer.parseInt(max),\n              minInclusive, maxInclusive);\n      case FLOAT:\n        return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n      case LONG:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : Long.parseLong(min),\n              max == null ? null : Long.parseLong(max),\n              minInclusive, maxInclusive);\n      case DOUBLE:\n        return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n      case DATE:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : DateMathParser.parseMath(null, min).getTime(),\n              max == null ? null : DateMathParser.parseMath(null, max).getTime(),\n              minInclusive, maxInclusive);\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for numeric field\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  protected Query getDocValuesRangeQuery(QParser parser, SchemaField field, String min, String max,\n      boolean minInclusive, boolean maxInclusive) {\n    assert field.hasDocValues() && !field.multiValued();\n    \n    switch (getNumberType()) {\n      case INTEGER:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : (long) Integer.parseInt(min),\n              max == null ? null : (long) Integer.parseInt(max),\n              minInclusive, maxInclusive);\n      case FLOAT:\n        return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n      case LONG:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : Long.parseLong(min),\n              max == null ? null : Long.parseLong(max),\n              minInclusive, maxInclusive);\n      case DOUBLE:\n        return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n      case DATE:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : DateMathParser.parseMath(null, min).getTime(),\n              max == null ? null : DateMathParser.parseMath(null, max).getTime(),\n              minInclusive, maxInclusive);\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for numeric field\");\n    }\n  }\n\n","sourceOld":"  protected Query getDocValuesRangeQuery(QParser parser, SchemaField field, String min, String max,\n      boolean minInclusive, boolean maxInclusive) {\n    assert field.hasDocValues() && (field.getType().isPointField() || !field.multiValued());\n    \n    switch (getNumberType()) {\n      case INTEGER:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : (long) Integer.parseInt(min),\n              max == null ? null : (long) Integer.parseInt(max),\n              minInclusive, maxInclusive, field.multiValued());\n      case FLOAT:\n        if (field.multiValued()) {\n          return getRangeQueryForMultiValuedFloatDocValues(field, min, max, minInclusive, maxInclusive);\n        } else {\n          return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        }\n      case LONG:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : Long.parseLong(min),\n              max == null ? null : Long.parseLong(max),\n              minInclusive, maxInclusive, field.multiValued());\n      case DOUBLE:\n        if (field.multiValued()) { \n          return getRangeQueryForMultiValuedDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        } else {\n          return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        }\n      case DATE:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : DateMathParser.parseMath(null, min).getTime(),\n              max == null ? null : DateMathParser.parseMath(null, max).getTime(),\n              minInclusive, maxInclusive, field.multiValued());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for numeric field\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  protected Query getDocValuesRangeQuery(QParser parser, SchemaField field, String min, String max,\n      boolean minInclusive, boolean maxInclusive) {\n    assert field.hasDocValues() && (field.getType().isPointField() || !field.multiValued());\n    \n    switch (getNumberType()) {\n      case INTEGER:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : (long) Integer.parseInt(min),\n              max == null ? null : (long) Integer.parseInt(max),\n              minInclusive, maxInclusive, field.multiValued());\n      case FLOAT:\n        if (field.multiValued()) {\n          return getRangeQueryForMultiValuedFloatDocValues(field, min, max, minInclusive, maxInclusive);\n        } else {\n          return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        }\n      case LONG:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : Long.parseLong(min),\n              max == null ? null : Long.parseLong(max),\n              minInclusive, maxInclusive, field.multiValued());\n      case DOUBLE:\n        if (field.multiValued()) { \n          return getRangeQueryForMultiValuedDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        } else {\n          return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        }\n      case DATE:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : DateMathParser.parseMath(null, min).getTime(),\n              max == null ? null : DateMathParser.parseMath(null, max).getTime(),\n              minInclusive, maxInclusive, field.multiValued());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for numeric field\");\n    }\n  }\n\n","sourceOld":"  protected Query getDocValuesRangeQuery(QParser parser, SchemaField field, String min, String max,\n      boolean minInclusive, boolean maxInclusive) {\n    assert field.hasDocValues() && !field.multiValued();\n    \n    switch (getNumberType()) {\n      case INTEGER:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : (long) Integer.parseInt(min),\n              max == null ? null : (long) Integer.parseInt(max),\n              minInclusive, maxInclusive);\n      case FLOAT:\n        return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n      case LONG:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : Long.parseLong(min),\n              max == null ? null : Long.parseLong(max),\n              minInclusive, maxInclusive);\n      case DOUBLE:\n        return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n      case DATE:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : DateMathParser.parseMath(null, min).getTime(),\n              max == null ? null : DateMathParser.parseMath(null, max).getTime(),\n              minInclusive, maxInclusive);\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for numeric field\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"92f8ab19a30ff70981e43b8cc78069cb0941476e","date":1497374252,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  protected Query getDocValuesRangeQuery(QParser parser, SchemaField field, String min, String max,\n      boolean minInclusive, boolean maxInclusive) {\n    assert field.hasDocValues() && (field.getType().isPointField() || !field.multiValued());\n    \n    switch (getNumberType()) {\n      case INTEGER:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : (long) parseIntFromUser(field.getName(), min),\n              max == null ? null : (long) parseIntFromUser(field.getName(), max),\n              minInclusive, maxInclusive, field.multiValued());\n      case FLOAT:\n        if (field.multiValued()) {\n          return getRangeQueryForMultiValuedFloatDocValues(field, min, max, minInclusive, maxInclusive);\n        } else {\n          return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        }\n      case LONG:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : parseLongFromUser(field.getName(), min),\n              max == null ? null : parseLongFromUser(field.getName(),max),\n              minInclusive, maxInclusive, field.multiValued());\n      case DOUBLE:\n        if (field.multiValued()) { \n          return getRangeQueryForMultiValuedDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        } else {\n          return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        }\n      case DATE:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : DateMathParser.parseMath(null, min).getTime(),\n              max == null ? null : DateMathParser.parseMath(null, max).getTime(),\n              minInclusive, maxInclusive, field.multiValued());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for numeric field\");\n    }\n  }\n\n","sourceOld":"  protected Query getDocValuesRangeQuery(QParser parser, SchemaField field, String min, String max,\n      boolean minInclusive, boolean maxInclusive) {\n    assert field.hasDocValues() && (field.getType().isPointField() || !field.multiValued());\n    \n    switch (getNumberType()) {\n      case INTEGER:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : (long) Integer.parseInt(min),\n              max == null ? null : (long) Integer.parseInt(max),\n              minInclusive, maxInclusive, field.multiValued());\n      case FLOAT:\n        if (field.multiValued()) {\n          return getRangeQueryForMultiValuedFloatDocValues(field, min, max, minInclusive, maxInclusive);\n        } else {\n          return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        }\n      case LONG:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : Long.parseLong(min),\n              max == null ? null : Long.parseLong(max),\n              minInclusive, maxInclusive, field.multiValued());\n      case DOUBLE:\n        if (field.multiValued()) { \n          return getRangeQueryForMultiValuedDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        } else {\n          return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        }\n      case DATE:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : DateMathParser.parseMath(null, min).getTime(),\n              max == null ? null : DateMathParser.parseMath(null, max).getTime(),\n              minInclusive, maxInclusive, field.multiValued());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for numeric field\");\n    }\n  }\n\n","bugFix":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  protected Query getDocValuesRangeQuery(QParser parser, SchemaField field, String min, String max,\n      boolean minInclusive, boolean maxInclusive) {\n    assert field.hasDocValues() && (field.getType().isPointField() || !field.multiValued());\n    \n    switch (getNumberType()) {\n      case INTEGER:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : (long) parseIntFromUser(field.getName(), min),\n              max == null ? null : (long) parseIntFromUser(field.getName(), max),\n              minInclusive, maxInclusive, field.multiValued());\n      case FLOAT:\n        if (field.multiValued()) {\n          return getRangeQueryForMultiValuedFloatDocValues(field, min, max, minInclusive, maxInclusive);\n        } else {\n          return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        }\n      case LONG:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : parseLongFromUser(field.getName(), min),\n              max == null ? null : parseLongFromUser(field.getName(),max),\n              minInclusive, maxInclusive, field.multiValued());\n      case DOUBLE:\n        if (field.multiValued()) { \n          return getRangeQueryForMultiValuedDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        } else {\n          return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        }\n      case DATE:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : DateMathParser.parseMath(null, min).getTime(),\n              max == null ? null : DateMathParser.parseMath(null, max).getTime(),\n              minInclusive, maxInclusive, field.multiValued());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for numeric field\");\n    }\n  }\n\n","sourceOld":"  protected Query getDocValuesRangeQuery(QParser parser, SchemaField field, String min, String max,\n      boolean minInclusive, boolean maxInclusive) {\n    assert field.hasDocValues() && (field.getType().isPointField() || !field.multiValued());\n    \n    switch (getNumberType()) {\n      case INTEGER:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : (long) Integer.parseInt(min),\n              max == null ? null : (long) Integer.parseInt(max),\n              minInclusive, maxInclusive, field.multiValued());\n      case FLOAT:\n        if (field.multiValued()) {\n          return getRangeQueryForMultiValuedFloatDocValues(field, min, max, minInclusive, maxInclusive);\n        } else {\n          return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        }\n      case LONG:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : Long.parseLong(min),\n              max == null ? null : Long.parseLong(max),\n              minInclusive, maxInclusive, field.multiValued());\n      case DOUBLE:\n        if (field.multiValued()) { \n          return getRangeQueryForMultiValuedDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        } else {\n          return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        }\n      case DATE:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : DateMathParser.parseMath(null, min).getTime(),\n              max == null ? null : DateMathParser.parseMath(null, max).getTime(),\n              minInclusive, maxInclusive, field.multiValued());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for numeric field\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/NumericFieldType#getDocValuesRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  protected Query getDocValuesRangeQuery(QParser parser, SchemaField field, String min, String max,\n      boolean minInclusive, boolean maxInclusive) {\n    assert field.hasDocValues() && (field.getType().isPointField() || !field.multiValued());\n    \n    switch (getNumberType()) {\n      case INTEGER:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : (long) parseIntFromUser(field.getName(), min),\n              max == null ? null : (long) parseIntFromUser(field.getName(), max),\n              minInclusive, maxInclusive, field.multiValued());\n      case FLOAT:\n        if (field.multiValued()) {\n          return getRangeQueryForMultiValuedFloatDocValues(field, min, max, minInclusive, maxInclusive);\n        } else {\n          return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        }\n      case LONG:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : parseLongFromUser(field.getName(), min),\n              max == null ? null : parseLongFromUser(field.getName(),max),\n              minInclusive, maxInclusive, field.multiValued());\n      case DOUBLE:\n        if (field.multiValued()) { \n          return getRangeQueryForMultiValuedDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        } else {\n          return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        }\n      case DATE:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : DateMathParser.parseMath(null, min).getTime(),\n              max == null ? null : DateMathParser.parseMath(null, max).getTime(),\n              minInclusive, maxInclusive, field.multiValued());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for numeric field\");\n    }\n  }\n\n","sourceOld":"  protected Query getDocValuesRangeQuery(QParser parser, SchemaField field, String min, String max,\n      boolean minInclusive, boolean maxInclusive) {\n    assert field.hasDocValues() && (field.getType().isPointField() || !field.multiValued());\n    \n    switch (getNumberType()) {\n      case INTEGER:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : (long) Integer.parseInt(min),\n              max == null ? null : (long) Integer.parseInt(max),\n              minInclusive, maxInclusive, field.multiValued());\n      case FLOAT:\n        if (field.multiValued()) {\n          return getRangeQueryForMultiValuedFloatDocValues(field, min, max, minInclusive, maxInclusive);\n        } else {\n          return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        }\n      case LONG:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : Long.parseLong(min),\n              max == null ? null : Long.parseLong(max),\n              minInclusive, maxInclusive, field.multiValued());\n      case DOUBLE:\n        if (field.multiValued()) { \n          return getRangeQueryForMultiValuedDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        } else {\n          return getRangeQueryForFloatDoubleDocValues(field, min, max, minInclusive, maxInclusive);\n        }\n      case DATE:\n        return numericDocValuesRangeQuery(field.getName(),\n              min == null ? null : DateMathParser.parseMath(null, min).getTime(),\n              max == null ? null : DateMathParser.parseMath(null, max).getTime(),\n              minInclusive, maxInclusive, field.multiValued());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for numeric field\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cdd24a5b48ffd59f921ccc4f5199fc029f65797":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"92f8ab19a30ff70981e43b8cc78069cb0941476e":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"28288370235ed02234a64753cdbf0c6ec096304a":["897b06b1364bd1f658a8be7591e43f0851458e7f","92f8ab19a30ff70981e43b8cc78069cb0941476e"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2a3ec9eaf56660f0438887cf46c6d538cc97b0d6"],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"022a4de90e0479b604264ca9c2e134c996454ab3":["3d81baa64023bbb9b43f6d929ee168b105940d30","744b111b17d15d490a648eb021bfa240e7f11556"],"2a3ec9eaf56660f0438887cf46c6d538cc97b0d6":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797"],"3d81baa64023bbb9b43f6d929ee168b105940d30":["2a3ec9eaf56660f0438887cf46c6d538cc97b0d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"744b111b17d15d490a648eb021bfa240e7f11556":["3d81baa64023bbb9b43f6d929ee168b105940d30"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["897b06b1364bd1f658a8be7591e43f0851458e7f","92f8ab19a30ff70981e43b8cc78069cb0941476e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"3cdd24a5b48ffd59f921ccc4f5199fc029f65797":["2a3ec9eaf56660f0438887cf46c6d538cc97b0d6"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["92f8ab19a30ff70981e43b8cc78069cb0941476e","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"92f8ab19a30ff70981e43b8cc78069cb0941476e":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"2a3ec9eaf56660f0438887cf46c6d538cc97b0d6":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","3d81baa64023bbb9b43f6d929ee168b105940d30"],"3d81baa64023bbb9b43f6d929ee168b105940d30":["022a4de90e0479b604264ca9c2e134c996454ab3","744b111b17d15d490a648eb021bfa240e7f11556"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"744b111b17d15d490a648eb021bfa240e7f11556":["022a4de90e0479b604264ca9c2e134c996454ab3"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}