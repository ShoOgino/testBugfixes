{"path":"solr/core/src/java/org/apache/solr/search/FastLRUCache#generateDescription(int,int,int,int,boolean).mjava","commits":[{"id":"63131741120598595ba46620adaf3fad049ca291","date":1335567423,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#generateDescription(int,int,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @return Returns the description of this Cache.\n   */\n  protected String generateDescription(int limit, int initialSize, int minLimit, int acceptableLimit, boolean newThread) {\n    String description = \"Concurrent LRU Cache(maxSize=\" + limit + \", initialSize=\" + initialSize +\n        \", minSize=\"+minLimit + \", acceptableSize=\"+acceptableLimit+\", cleanupThread=\"+newThread;\n    if (isAutowarmingOn()) {\n      description += \", \" + getAutowarmDescription();\n    }\n    description += ')';\n    return description;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a117d95183986014a31f25bb04e5464ca06d6068","date":1566208086,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#generateDescription(int,int,int,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#generateDescription(int,int,int,int,boolean).mjava","sourceNew":"  /**\n   * @return Returns the description of this Cache.\n   */\n  protected String generateDescription(int limit, int initialSize, int minLimit, int acceptableLimit, boolean newThread) {\n    String description = \"Concurrent LRU Cache(maxSize=\" + limit + \", initialSize=\" + initialSize +\n        \", minSize=\" + minLimit + \", acceptableSize=\" + acceptableLimit + \", cleanupThread=\" + newThread;\n    if (isAutowarmingOn()) {\n      description += \", \" + getAutowarmDescription();\n    }\n    description += ')';\n    return description;\n  }\n\n","sourceOld":"  /**\n   * @return Returns the description of this Cache.\n   */\n  protected String generateDescription(int limit, int initialSize, int minLimit, int acceptableLimit, boolean newThread) {\n    String description = \"Concurrent LRU Cache(maxSize=\" + limit + \", initialSize=\" + initialSize +\n        \", minSize=\"+minLimit + \", acceptableSize=\"+acceptableLimit+\", cleanupThread=\"+newThread;\n    if (isAutowarmingOn()) {\n      description += \", \" + getAutowarmDescription();\n    }\n    description += ')';\n    return description;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#generateDescription(int,int,int,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#generateDescription(int,int,int,int,boolean).mjava","sourceNew":"  /**\n   * @return Returns the description of this Cache.\n   */\n  protected String generateDescription(int limit, int initialSize, int minLimit, int acceptableLimit, boolean newThread) {\n    String description = \"Concurrent LRU Cache(maxSize=\" + limit + \", initialSize=\" + initialSize +\n        \", minSize=\"+minLimit + \", acceptableSize=\"+acceptableLimit+\", cleanupThread=\"+newThread;\n    if (isAutowarmingOn()) {\n      description += \", \" + getAutowarmDescription();\n    }\n    description += ')';\n    return description;\n  }\n\n","sourceOld":"  /**\n   * @return Returns the description of this Cache.\n   */\n  protected String generateDescription(int limit, int initialSize, int minLimit, int acceptableLimit, boolean newThread) {\n    String description = \"Concurrent LRU Cache(maxSize=\" + limit + \", initialSize=\" + initialSize +\n        \", minSize=\" + minLimit + \", acceptableSize=\" + acceptableLimit + \", cleanupThread=\" + newThread;\n    if (isAutowarmingOn()) {\n      description += \", \" + getAutowarmDescription();\n    }\n    description += ')';\n    return description;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#generateDescription(int,int,int,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#generateDescription(int,int,int,int,boolean).mjava","sourceNew":"  /**\n   * @return Returns the description of this Cache.\n   */\n  protected String generateDescription(int limit, int initialSize, int minLimit, int acceptableLimit, boolean newThread) {\n    String description = \"Concurrent LRU Cache(maxSize=\" + limit + \", initialSize=\" + initialSize +\n        \", minSize=\"+minLimit + \", acceptableSize=\"+acceptableLimit+\", cleanupThread=\"+newThread;\n    if (isAutowarmingOn()) {\n      description += \", \" + getAutowarmDescription();\n    }\n    description += ')';\n    return description;\n  }\n\n","sourceOld":"  /**\n   * @return Returns the description of this Cache.\n   */\n  protected String generateDescription(int limit, int initialSize, int minLimit, int acceptableLimit, boolean newThread) {\n    String description = \"Concurrent LRU Cache(maxSize=\" + limit + \", initialSize=\" + initialSize +\n        \", minSize=\" + minLimit + \", acceptableSize=\" + acceptableLimit + \", cleanupThread=\" + newThread;\n    if (isAutowarmingOn()) {\n      description += \", \" + getAutowarmDescription();\n    }\n    description += ')';\n    return description;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/FastLRUCache#generateDescription(int,int,int,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#generateDescription(int,int,int,int,boolean).mjava","sourceNew":"  /**\n   * @return Returns the description of this Cache.\n   */\n  protected String generateDescription(int limit, int initialSize, int minLimit, int acceptableLimit, boolean newThread) {\n    String description = \"Concurrent LRU Cache(maxSize=\" + limit + \", initialSize=\" + initialSize +\n        \", minSize=\" + minLimit + \", acceptableSize=\" + acceptableLimit + \", cleanupThread=\" + newThread;\n    if (isAutowarmingOn()) {\n      description += \", \" + getAutowarmDescription();\n    }\n    description += ')';\n    return description;\n  }\n\n","sourceOld":"  /**\n   * @return Returns the description of this Cache.\n   */\n  protected String generateDescription(int limit, int initialSize, int minLimit, int acceptableLimit, boolean newThread) {\n    String description = \"Concurrent LRU Cache(maxSize=\" + limit + \", initialSize=\" + initialSize +\n        \", minSize=\"+minLimit + \", acceptableSize=\"+acceptableLimit+\", cleanupThread=\"+newThread;\n    if (isAutowarmingOn()) {\n      description += \", \" + getAutowarmDescription();\n    }\n    description += ')';\n    return description;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/FastLRUCache#generateDescription(int,int,int,int,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @return Returns the description of this Cache.\n   */\n  protected String generateDescription(int limit, int initialSize, int minLimit, int acceptableLimit, boolean newThread) {\n    String description = \"Concurrent LRU Cache(maxSize=\" + limit + \", initialSize=\" + initialSize +\n        \", minSize=\" + minLimit + \", acceptableSize=\" + acceptableLimit + \", cleanupThread=\" + newThread;\n    if (isAutowarmingOn()) {\n      description += \", \" + getAutowarmDescription();\n    }\n    description += ')';\n    return description;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["c44cc06c26e456fe9c215072b79fce30babe3975"],"4d7d3943904804560937e6239effeebda0f920e4":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["a117d95183986014a31f25bb04e5464ca06d6068"],"a117d95183986014a31f25bb04e5464ca06d6068":["63131741120598595ba46620adaf3fad049ca291"],"63131741120598595ba46620adaf3fad049ca291":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a117d95183986014a31f25bb04e5464ca06d6068","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["4d7d3943904804560937e6239effeebda0f920e4"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["63131741120598595ba46620adaf3fad049ca291"],"c44cc06c26e456fe9c215072b79fce30babe3975":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","b0b597c65628ca9e73913a07e81691f8229bae35"],"a117d95183986014a31f25bb04e5464ca06d6068":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"63131741120598595ba46620adaf3fad049ca291":["a117d95183986014a31f25bb04e5464ca06d6068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}