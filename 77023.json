{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean doFlush = docWriter.bufferDeleteTerms(terms);\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean doFlush = docWriter.bufferDeleteTerms(terms);\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b832cbed6eb3d54a8bb9339296bdda8eeb53014","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      return docWriter.bufferDeleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n    return -1;\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean doFlush = docWriter.bufferDeleteTerms(terms);\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"334c1175813aea771a71728cd2c4ee4754fd0603","date":1279710173,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean doFlush = docWriter.bufferDeleteTerms(terms);\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      return docWriter.bufferDeleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fe956d65251358d755c56f14fe8380644790e47","date":1279711318,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      return docWriter.bufferDeleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n    return -1;\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean doFlush = docWriter.bufferDeleteTerms(terms);\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteTerms(terms)) {\n        flush(true, false, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean doFlush = docWriter.bufferDeleteTerms(terms);\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteTerms(terms)) {\n        flush(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteTerms(terms)) {\n        flush(true, false, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteTerms(terms)) {\n        flush(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean doFlush = docWriter.bufferDeleteTerms(terms);\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteTerms(terms)) {\n        flush(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public long deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      return docWriter.bufferDeleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4","date":1303818069,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteTerms(terms)) {\n        flush(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ec3c42a56287de321024ceb6e46e78993a647d5","date":1303983484,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteTerms(terms)) {\n        flush(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteTerms(terms)) {\n        flush(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All deletes are flushed at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      if (docWriter.deleteTerms(terms)) {\n        flush(true, false);\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#deleteDocuments(Term...).mjava","sourceNew":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Deletes the document(s) containing any of the\n   * terms. All given deletes are applied and flushed atomically\n   * at the same time.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param terms array of terms to identify the documents\n   * to be deleted\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void deleteDocuments(Term... terms) throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      docWriter.deleteTerms(terms);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"deleteDocuments(Term..)\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["334c1175813aea771a71728cd2c4ee4754fd0603"],"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","5ec3c42a56287de321024ceb6e46e78993a647d5"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["334c1175813aea771a71728cd2c4ee4754fd0603","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"334c1175813aea771a71728cd2c4ee4754fd0603":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["8fe956d65251358d755c56f14fe8380644790e47","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5ec3c42a56287de321024ceb6e46e78993a647d5":["761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fe956d65251358d755c56f14fe8380644790e47":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4":["5ec3c42a56287de321024ceb6e46e78993a647d5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"334c1175813aea771a71728cd2c4ee4754fd0603":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["334c1175813aea771a71728cd2c4ee4754fd0603"],"5ec3c42a56287de321024ceb6e46e78993a647d5":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8fe956d65251358d755c56f14fe8380644790e47":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a3776dccca01c11e7046323cfad46a3b4a471233"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014","8fe956d65251358d755c56f14fe8380644790e47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}