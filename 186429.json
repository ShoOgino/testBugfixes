{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testOverseerStatus().mjava","commits":[{"id":"30f9ea0e61a3df8b29a67bce1ea06c83201ad871","date":1457138084,"type":1,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testOverseerStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testOverseerStatus().mjava","sourceNew":"  private void testOverseerStatus() throws IOException, SolrServerException {\n    CollectionAdminResponse response = new CollectionAdminRequest.OverseerStatus().process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertNotNull(\"overseer_operations shouldn't be null\", response.getResponse().get(\"overseer_operations\"));\n  }\n\n","sourceOld":"  private void testOverseerStatus() throws IOException, SolrServerException {\n    CollectionAdminResponse response = new CollectionAdminRequest.OverseerStatus().process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertNotNull(\"overseer_operations shouldn't be null\", response.getResponse().get(\"overseer_operations\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testOverseerStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testOverseerStatus().mjava","sourceNew":"  private void testOverseerStatus() throws IOException, SolrServerException {\n    CollectionAdminResponse response = new CollectionAdminRequest.OverseerStatus().process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertNotNull(\"overseer_operations shouldn't be null\", response.getResponse().get(\"overseer_operations\"));\n  }\n\n","sourceOld":"  private void testOverseerStatus() throws IOException, SolrServerException {\n    CollectionAdminResponse response = new CollectionAdminRequest.OverseerStatus().process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertNotNull(\"overseer_operations shouldn't be null\", response.getResponse().get(\"overseer_operations\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testOverseerStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testOverseerStatus().mjava","sourceNew":"  @Test\n  public void testOverseerStatus() throws IOException, SolrServerException {\n    CollectionAdminResponse response = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertNotNull(\"overseer_operations shouldn't be null\", response.getResponse().get(\"overseer_operations\"));\n  }\n\n","sourceOld":"  private void testOverseerStatus() throws IOException, SolrServerException {\n    CollectionAdminResponse response = new CollectionAdminRequest.OverseerStatus().process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertNotNull(\"overseer_operations shouldn't be null\", response.getResponse().get(\"overseer_operations\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testOverseerStatus().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testOverseerStatus().mjava","sourceNew":"  @Test\n  public void testOverseerStatus() throws IOException, SolrServerException {\n    CollectionAdminResponse response = new CollectionAdminRequest.OverseerStatus().process(cluster.getSolrClient());\n    assertEquals(0, response.getStatus());\n    assertNotNull(\"overseer_operations shouldn't be null\", response.getResponse().get(\"overseer_operations\"));\n  }\n\n","sourceOld":"  private void testOverseerStatus() throws IOException, SolrServerException {\n    CollectionAdminResponse response = new CollectionAdminRequest.OverseerStatus().process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertNotNull(\"overseer_operations shouldn't be null\", response.getResponse().get(\"overseer_operations\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"636a04bc82e662bf141a55f1d10f52e1c76c727b":["922ddd897402a6df25c766ea8300443be5e82b3d"],"922ddd897402a6df25c766ea8300443be5e82b3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["922ddd897402a6df25c766ea8300443be5e82b3d","636a04bc82e662bf141a55f1d10f52e1c76c727b"]},"commit2Childs":{"636a04bc82e662bf141a55f1d10f52e1c76c727b":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"922ddd897402a6df25c766ea8300443be5e82b3d":["636a04bc82e662bf141a55f1d10f52e1c76c727b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["922ddd897402a6df25c766ea8300443be5e82b3d","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["922ddd897402a6df25c766ea8300443be5e82b3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}