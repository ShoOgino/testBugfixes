{"path":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","pathOld":"/dev/null","sourceNew":"  private boolean handleResponse(ShardResponse srsp) {\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      if (srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException\n            || solrException instanceof NoHttpResponseException) {\n          return true;\n        }\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n      \n      return false;\n    }\n\n    ShardRequest sreq = srsp.getShardRequest();\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508","db8c3036d7a71259ececaf30a59e9543ddba4131","1525b4dfbc0d413b8d7247da232009778e624836"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","pathOld":"/dev/null","sourceNew":"  private boolean handleResponse(ShardResponse srsp) {\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      if (srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException\n            || solrException instanceof NoHttpResponseException) {\n          return true;\n        }\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n      \n      return false;\n    }\n\n    ShardRequest sreq = srsp.getShardRequest();\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","pathOld":"/dev/null","sourceNew":"  private boolean handleResponse(ShardResponse srsp) {\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      if (srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException\n            || solrException instanceof NoHttpResponseException) {\n          return true;\n        }\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n      \n      return false;\n    }\n\n    ShardRequest sreq = srsp.getShardRequest();\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5620d3cb34306ea5b7d016a832fbc964b74c2650","date":1329755478,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","sourceNew":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException\n            || solrException instanceof NoHttpResponseException) {\n          log.info(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n      \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", counting as success\");\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","sourceOld":"  private boolean handleResponse(ShardResponse srsp) {\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      if (srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException\n            || solrException instanceof NoHttpResponseException) {\n          return true;\n        }\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n      \n      return false;\n    }\n\n    ShardRequest sreq = srsp.getShardRequest();\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","sourceNew":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException\n            || solrException instanceof NoHttpResponseException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","sourceOld":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException\n            || solrException instanceof NoHttpResponseException) {\n          log.info(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n      \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", counting as success\");\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","5620d3cb34306ea5b7d016a832fbc964b74c2650"],"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db8c3036d7a71259ececaf30a59e9543ddba4131","date":1348441120,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","sourceNew":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException\n            || solrException instanceof NoHttpResponseException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","sourceOld":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException\n            || solrException instanceof NoHttpResponseException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":["a935e32f3b1ffa13f8c6bb6301853a05d2b01a89"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"88f39c3b3a16aebc5a91335341c7ad5b560e2277","date":1350066344,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","sourceNew":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException\n            || solrException instanceof NoHttpResponseException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        log.warn(msg() + \" got a 404 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","sourceOld":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException\n            || solrException instanceof NoHttpResponseException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d82832af39f94dbb58a3130fd216ff1d49435589","date":1350147242,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","sourceNew":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException\n            || solrException instanceof NoHttpResponseException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        log.warn(msg() + \" got a 404 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","sourceOld":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException\n            || solrException instanceof NoHttpResponseException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","sourceNew":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException\n            || solrException instanceof NoHttpResponseException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        log.warn(msg() + \" got a 404 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","sourceOld":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException\n            || solrException instanceof NoHttpResponseException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1525b4dfbc0d413b8d7247da232009778e624836","date":1351101135,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","sourceNew":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException\n            || solrException instanceof NoHttpResponseException || solrException instanceof SocketException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        log.warn(msg() + \" got a 404 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","sourceOld":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException\n            || solrException instanceof NoHttpResponseException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        log.warn(msg() + \" got a 404 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","sourceNew":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException\n            || solrException instanceof NoHttpResponseException || solrException instanceof SocketException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        log.warn(msg() + \" got a 404 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","sourceOld":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException\n            || solrException instanceof NoHttpResponseException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        log.warn(msg() + \" got a 404 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6198fb63e3890bd8fe0da672eba02a8ab6190c8","date":1385449337,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","sourceNew":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException\n            || solrException instanceof NoHttpResponseException || solrException instanceof SocketException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        log.warn(msg() + \" got a 404 from \" + srsp.getShardAddress() + \", counting as success. \" +\n            \"Perhaps /get is not registered?\");\n        return true;\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","sourceOld":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException\n            || solrException instanceof NoHttpResponseException || solrException instanceof SocketException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        log.warn(msg() + \" got a 404 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","sourceNew":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException\n            || solrException instanceof NoHttpResponseException || solrException instanceof SocketException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        log.warn(msg() + \" got a 404 from \" + srsp.getShardAddress() + \", counting as success. \" +\n            \"Perhaps /get is not registered?\");\n        return true;\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","sourceOld":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException\n            || solrException instanceof NoHttpResponseException || solrException instanceof SocketException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        log.warn(msg() + \" got a 404 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a935e32f3b1ffa13f8c6bb6301853a05d2b01a89","date":1388373865,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","sourceNew":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        boolean connectTimeoutExceptionInChain = connectTimeoutExceptionInChain(srsp.getException());\n        if (connectTimeoutExceptionInChain || solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException\n            || solrException instanceof NoHttpResponseException || solrException instanceof SocketException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        log.warn(msg() + \" got a 404 from \" + srsp.getShardAddress() + \", counting as success. \" +\n            \"Perhaps /get is not registered?\");\n        return true;\n      }\n      \n      // TODO: we should return the above information so that when we can request a recovery through zookeeper, we do\n      // that for these nodes\n      \n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","sourceOld":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        if (solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException\n            || solrException instanceof NoHttpResponseException || solrException instanceof SocketException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        log.warn(msg() + \" got a 404 from \" + srsp.getShardAddress() + \", counting as success. \" +\n            \"Perhaps /get is not registered?\");\n        return true;\n      }\n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","bugFix":["db8c3036d7a71259ececaf30a59e9543ddba4131"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","sourceNew":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        boolean connectTimeoutExceptionInChain = connectTimeoutExceptionInChain(srsp.getException());\n        if (connectTimeoutExceptionInChain || solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException\n            || solrException instanceof NoHttpResponseException || solrException instanceof SocketException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\", srsp.getException());\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\", srsp.getException());\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        log.warn(msg() + \" got a 404 from \" + srsp.getShardAddress() + \", counting as success. \" +\n            \"Perhaps /get is not registered?\", srsp.getException());\n        return true;\n      }\n      \n      // TODO: we should return the above information so that when we can request a recovery through zookeeper, we do\n      // that for these nodes\n      \n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","sourceOld":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        boolean connectTimeoutExceptionInChain = connectTimeoutExceptionInChain(srsp.getException());\n        if (connectTimeoutExceptionInChain || solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException\n            || solrException instanceof NoHttpResponseException || solrException instanceof SocketException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\");\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\");\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        log.warn(msg() + \" got a 404 from \" + srsp.getShardAddress() + \", counting as success. \" +\n            \"Perhaps /get is not registered?\");\n        return true;\n      }\n      \n      // TODO: we should return the above information so that when we can request a recovery through zookeeper, we do\n      // that for these nodes\n      \n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","bugFix":["a6378064655e76cd7b908b1cab4ce425b384b508","f6198fb63e3890bd8fe0da672eba02a8ab6190c8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da63281d8d361c09cdc90d0dda545f07055ad397","date":1585881569,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","sourceNew":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        boolean connectTimeoutExceptionInChain = connectTimeoutExceptionInChain(srsp.getException());\n        if (connectTimeoutExceptionInChain || solrException instanceof ConnectTimeoutException || solrException instanceof SocketTimeoutException\n            || solrException instanceof NoHttpResponseException || solrException instanceof SocketException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\", srsp.getException());\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\", srsp.getException());\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        log.warn(msg() + \" got a 404 from \" + srsp.getShardAddress() + \", counting as success. \" +\n            \"Perhaps /get is not registered?\", srsp.getException());\n        return true;\n      }\n      \n      // TODO: we should return the above information so that when we can request a recovery through zookeeper, we do\n      // that for these nodes\n      \n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","sourceOld":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        boolean connectTimeoutExceptionInChain = connectTimeoutExceptionInChain(srsp.getException());\n        if (connectTimeoutExceptionInChain || solrException instanceof ConnectException || solrException instanceof ConnectTimeoutException\n            || solrException instanceof NoHttpResponseException || solrException instanceof SocketException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\", srsp.getException());\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\", srsp.getException());\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        log.warn(msg() + \" got a 404 from \" + srsp.getShardAddress() + \", counting as success. \" +\n            \"Perhaps /get is not registered?\", srsp.getException());\n        return true;\n      }\n      \n      // TODO: we should return the above information so that when we can request a recovery through zookeeper, we do\n      // that for these nodes\n      \n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","sourceNew":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        boolean connectTimeoutExceptionInChain = connectTimeoutExceptionInChain(srsp.getException());\n        if (connectTimeoutExceptionInChain || solrException instanceof ConnectTimeoutException || solrException instanceof SocketTimeoutException\n            || solrException instanceof NoHttpResponseException || solrException instanceof SocketException) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"{} couldn't connect to {}, counting as success \", msg(), srsp.getShardAddress(), srsp.getException());\n          }\n\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"{} got a 503 from {}, counting as success \"\n              , msg(), srsp.getShardAddress(), srsp.getException());\n        }\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"{} got a 404 from {}, counting as success. {} Perhaps /get is not registered?\"\n              , msg(), srsp.getShardAddress(), srsp.getException());\n        }\n        return true;\n      }\n      \n      // TODO: we should return the above information so that when we can request a recovery through zookeeper, we do\n      // that for these nodes\n      \n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n\n      if (log.isWarnEnabled()) {\n        log.warn(\"{} exception talking to {}, failed\", msg(), srsp.getShardAddress(), srsp.getException());\n      }\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","sourceOld":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        boolean connectTimeoutExceptionInChain = connectTimeoutExceptionInChain(srsp.getException());\n        if (connectTimeoutExceptionInChain || solrException instanceof ConnectTimeoutException || solrException instanceof SocketTimeoutException\n            || solrException instanceof NoHttpResponseException || solrException instanceof SocketException) {\n          log.warn(msg() + \" couldn't connect to \" + srsp.getShardAddress() + \", counting as success\", srsp.getException());\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(msg() + \" got a 503 from \" + srsp.getShardAddress() + \", counting as success\", srsp.getException());\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        log.warn(msg() + \" got a 404 from \" + srsp.getShardAddress() + \", counting as success. \" +\n            \"Perhaps /get is not registered?\", srsp.getException());\n        return true;\n      }\n      \n      // TODO: we should return the above information so that when we can request a recovery through zookeeper, we do\n      // that for these nodes\n      \n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n     \n      log.warn(msg() + \" exception talking to \" + srsp.getShardAddress() + \", failed\", srsp.getException());\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleResponse(ShardResponse).mjava","sourceNew":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        boolean connectTimeoutExceptionInChain = connectTimeoutExceptionInChain(srsp.getException());\n        if (connectTimeoutExceptionInChain || solrException instanceof ConnectTimeoutException || solrException instanceof SocketTimeoutException\n            || solrException instanceof NoHttpResponseException || solrException instanceof SocketException) {\n\n          log.warn(\"{} couldn't connect to {}, counting as success \", msg(), srsp.getShardAddress(), srsp.getException());\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        log.warn(\"{} got a 503 from {}, counting as success \", msg(), srsp.getShardAddress(), srsp.getException());\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        log.warn(\"{} got a 404 from {}, counting as success. {} Perhaps /get is not registered?\"\n            , msg(), srsp.getShardAddress(), srsp.getException());\n        return true;\n      }\n      \n      // TODO: we should return the above information so that when we can request a recovery through zookeeper, we do\n      // that for these nodes\n      \n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n\n      log.warn(\"{} exception talking to {}, failed\", msg(), srsp.getShardAddress(), srsp.getException());\n\n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","sourceOld":"  private boolean handleResponse(ShardResponse srsp) {\n    ShardRequest sreq = srsp.getShardRequest();\n\n    if (srsp.getException() != null) {\n\n      // TODO: look at this more thoroughly - we don't want\n      // to fail on connection exceptions, but it may make sense\n      // to determine this based on the number of fails\n      //\n      // If the replica went down between asking for versions and asking for specific updates, that\n      // shouldn't be treated as success since we counted on getting those updates back (and avoided\n      // redundantly asking other replicas for them).\n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrServerException) {\n        Throwable solrException = ((SolrServerException) srsp.getException())\n            .getRootCause();\n        boolean connectTimeoutExceptionInChain = connectTimeoutExceptionInChain(srsp.getException());\n        if (connectTimeoutExceptionInChain || solrException instanceof ConnectTimeoutException || solrException instanceof SocketTimeoutException\n            || solrException instanceof NoHttpResponseException || solrException instanceof SocketException) {\n          if (log.isWarnEnabled()) {\n            log.warn(\"{} couldn't connect to {}, counting as success \", msg(), srsp.getShardAddress(), srsp.getException());\n          }\n\n\n          return true;\n        }\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 503) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"{} got a 503 from {}, counting as success \"\n              , msg(), srsp.getShardAddress(), srsp.getException());\n        }\n        return true;\n      }\n      \n      if (cantReachIsSuccess && sreq.purpose == 1 && srsp.getException() instanceof SolrException && ((SolrException) srsp.getException()).code() == 404) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"{} got a 404 from {}, counting as success. {} Perhaps /get is not registered?\"\n              , msg(), srsp.getShardAddress(), srsp.getException());\n        }\n        return true;\n      }\n      \n      // TODO: we should return the above information so that when we can request a recovery through zookeeper, we do\n      // that for these nodes\n      \n      // TODO: at least log???\n      // srsp.getException().printStackTrace(System.out);\n\n      if (log.isWarnEnabled()) {\n        log.warn(\"{} exception talking to {}, failed\", msg(), srsp.getShardAddress(), srsp.getException());\n      }\n      \n      return false;\n    }\n\n    if (sreq.purpose == 1) {\n      return handleVersions(srsp);\n    } else {\n      return handleUpdates(srsp);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5620d3cb34306ea5b7d016a832fbc964b74c2650":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"740d649f013f07efbeb73ca854f106c60166e7c0":["da63281d8d361c09cdc90d0dda545f07055ad397"],"a935e32f3b1ffa13f8c6bb6301853a05d2b01a89":["f6198fb63e3890bd8fe0da672eba02a8ab6190c8"],"db8c3036d7a71259ececaf30a59e9543ddba4131":["a6378064655e76cd7b908b1cab4ce425b384b508"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["db8c3036d7a71259ececaf30a59e9543ddba4131","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"575e66bd4b2349209027f6801184da7fc3cba13f":["740d649f013f07efbeb73ca854f106c60166e7c0"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a6378064655e76cd7b908b1cab4ce425b384b508":["5620d3cb34306ea5b7d016a832fbc964b74c2650"],"da63281d8d361c09cdc90d0dda545f07055ad397":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"d82832af39f94dbb58a3130fd216ff1d49435589":["db8c3036d7a71259ececaf30a59e9543ddba4131","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["db8c3036d7a71259ececaf30a59e9543ddba4131"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["1525b4dfbc0d413b8d7247da232009778e624836","f6198fb63e3890bd8fe0da672eba02a8ab6190c8"],"f2126b84bd093fa3d921582a109a0ee578c28126":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","1525b4dfbc0d413b8d7247da232009778e624836"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["a935e32f3b1ffa13f8c6bb6301853a05d2b01a89"],"1525b4dfbc0d413b8d7247da232009778e624836":["88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"f6198fb63e3890bd8fe0da672eba02a8ab6190c8":["1525b4dfbc0d413b8d7247da232009778e624836"]},"commit2Childs":{"5620d3cb34306ea5b7d016a832fbc964b74c2650":["a6378064655e76cd7b908b1cab4ce425b384b508"],"740d649f013f07efbeb73ca854f106c60166e7c0":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a935e32f3b1ffa13f8c6bb6301853a05d2b01a89":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"db8c3036d7a71259ececaf30a59e9543ddba4131":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","d82832af39f94dbb58a3130fd216ff1d49435589","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["f2126b84bd093fa3d921582a109a0ee578c28126"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a6378064655e76cd7b908b1cab4ce425b384b508":["db8c3036d7a71259ececaf30a59e9543ddba4131"],"da63281d8d361c09cdc90d0dda545f07055ad397":["740d649f013f07efbeb73ca854f106c60166e7c0"],"d82832af39f94dbb58a3130fd216ff1d49435589":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["5620d3cb34306ea5b7d016a832fbc964b74c2650","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","d82832af39f94dbb58a3130fd216ff1d49435589","1525b4dfbc0d413b8d7247da232009778e624836"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["da63281d8d361c09cdc90d0dda545f07055ad397"],"1525b4dfbc0d413b8d7247da232009778e624836":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","f2126b84bd093fa3d921582a109a0ee578c28126","f6198fb63e3890bd8fe0da672eba02a8ab6190c8"],"f6198fb63e3890bd8fe0da672eba02a8ab6190c8":["a935e32f3b1ffa13f8c6bb6301853a05d2b01a89","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","d82832af39f94dbb58a3130fd216ff1d49435589","74f45af4339b0daf7a95c820ab88c1aea74fbce0","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}