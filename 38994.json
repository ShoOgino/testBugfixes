{"path":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","sourceNew":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        w.forceMerge(1);\n      } else {\n        // partial forceMerge\n        final int limit = _TestUtil.nextInt(r, 1, segCount);\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n    switchDoDocValues();\n  }\n\n","sourceOld":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        w.forceMerge(1);\n      } else {\n        // partial forceMerge\n        final int limit = _TestUtil.nextInt(r, 1, segCount);\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n    switchDoDocValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eae2a56dc810a17cf807d831f720dec931a03de","date":1349262073,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","sourceNew":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else {\n        // partial forceMerge\n        final int limit = _TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n    switchDoDocValues();\n  }\n\n","sourceOld":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        w.forceMerge(1);\n      } else {\n        // partial forceMerge\n        final int limit = _TestUtil.nextInt(r, 1, segCount);\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n    switchDoDocValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"003dc2cb64b06ce8caea28156505feb3c5059ba2","date":1359688932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","sourceNew":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else {\n        // partial forceMerge\n        final int limit = _TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n  }\n\n","sourceOld":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else {\n        // partial forceMerge\n        final int limit = _TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n    switchDoDocValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","sourceNew":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else {\n        // partial forceMerge\n        final int limit = _TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n  }\n\n","sourceOld":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else {\n        // partial forceMerge\n        final int limit = _TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n    switchDoDocValues();\n  }\n\n","bugFix":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","sourceNew":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else {\n        // partial forceMerge\n        final int limit = TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n  }\n\n","sourceOld":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else {\n        // partial forceMerge\n        final int limit = _TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b7d69c53c444cbbdbc1cd27e9f51f83b3ed14cb","date":1400265925,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","sourceNew":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      // nocommit put random force merge deletes here\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else {\n        // partial forceMerge\n        final int limit = TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n  }\n\n","sourceOld":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else {\n        // partial forceMerge\n        final int limit = TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"430d747ee1b3d38db2cc1cae71671655d970055a","date":1400265951,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","sourceNew":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else {\n        // partial forceMerge\n        final int limit = TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n  }\n\n","sourceOld":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      // nocommit put random force merge deletes here\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else {\n        // partial forceMerge\n        final int limit = TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"91d34336c8863b33047124bd0bbe44ca6b3fd532","date":1400269546,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","sourceNew":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else if (r.nextBoolean()) {\n        // partial forceMerge\n        final int limit = TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      } else {\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: do random forceMergeDeletes()\");\n        }\n        w.forceMergeDeletes();\n      }\n    }\n  }\n\n","sourceOld":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else {\n        // partial forceMerge\n        final int limit = TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","sourceNew":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else if (r.nextBoolean()) {\n        // partial forceMerge\n        final int limit = TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      } else {\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: do random forceMergeDeletes()\");\n        }\n        w.forceMergeDeletes();\n      }\n    }\n  }\n\n","sourceOld":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else {\n        // partial forceMerge\n        final int limit = TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fad98724008cd9cb272454c6dfa7d4c10174758","date":1530235717,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","sourceNew":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else if (r.nextBoolean()) {\n        // partial forceMerge\n        final int limit = TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        if (limit == 1 || (w.getConfig().getMergePolicy() instanceof TieredMergePolicy) == false) {\n          assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit : \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n        }\n      } else {\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: do random forceMergeDeletes()\");\n        }\n        w.forceMergeDeletes();\n      }\n    }\n  }\n\n","sourceOld":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else if (r.nextBoolean()) {\n        // partial forceMerge\n        final int limit = TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      } else {\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: do random forceMergeDeletes()\");\n        }\n        w.forceMergeDeletes();\n      }\n    }\n  }\n\n","bugFix":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","sourceNew":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else if (r.nextBoolean()) {\n        // partial forceMerge\n        final int limit = TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        if (limit == 1 || (w.getConfig().getMergePolicy() instanceof TieredMergePolicy) == false) {\n          assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit : \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n        }\n      } else {\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: do random forceMergeDeletes()\");\n        }\n        w.forceMergeDeletes();\n      }\n    }\n  }\n\n","sourceOld":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else if (r.nextBoolean()) {\n        // partial forceMerge\n        final int limit = TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      } else {\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: do random forceMergeDeletes()\");\n        }\n        w.forceMergeDeletes();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","sourceNew":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else if (r.nextBoolean()) {\n        // partial forceMerge\n        final int limit = TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        if (limit == 1 || (w.getConfig().getMergePolicy() instanceof TieredMergePolicy) == false) {\n          assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit : \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n        }\n      } else {\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: do random forceMergeDeletes()\");\n        }\n        w.forceMergeDeletes();\n      }\n    }\n  }\n\n","sourceOld":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else if (r.nextBoolean()) {\n        // partial forceMerge\n        final int limit = TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      } else {\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: do random forceMergeDeletes()\");\n        }\n        w.forceMergeDeletes();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e84628e1e00d06556b67af150a13dbfb1849a818","date":1588191102,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomIndexWriter#doRandomForceMerge().mjava","sourceNew":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else if (r.nextBoolean()) {\n        // partial forceMerge\n        final int limit = TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        if (limit == 1 || (config.getMergePolicy() instanceof TieredMergePolicy) == false) {\n          assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit : \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n        }\n      } else {\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: do random forceMergeDeletes()\");\n        }\n        w.forceMergeDeletes();\n      }\n    }\n  }\n\n","sourceOld":"  private void doRandomForceMerge() throws IOException {\n    if (doRandomForceMerge) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full forceMerge\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(1)\");\n        }\n        w.forceMerge(1);\n      } else if (r.nextBoolean()) {\n        // partial forceMerge\n        final int limit = TestUtil.nextInt(r, 1, segCount);\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: doRandomForceMerge(\" + limit + \")\");\n        }\n        w.forceMerge(limit);\n        if (limit == 1 || (w.getConfig().getMergePolicy() instanceof TieredMergePolicy) == false) {\n          assert !doRandomForceMergeAssert || w.getSegmentCount() <= limit : \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n        }\n      } else {\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"RIW: do random forceMergeDeletes()\");\n        }\n        w.forceMergeDeletes();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e84628e1e00d06556b67af150a13dbfb1849a818":["5fad98724008cd9cb272454c6dfa7d4c10174758"],"9eae2a56dc810a17cf807d831f720dec931a03de":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5fad98724008cd9cb272454c6dfa7d4c10174758":["91d34336c8863b33047124bd0bbe44ca6b3fd532"],"91d34336c8863b33047124bd0bbe44ca6b3fd532":["430d747ee1b3d38db2cc1cae71671655d970055a"],"430d747ee1b3d38db2cc1cae71671655d970055a":["5b7d69c53c444cbbdbc1cd27e9f51f83b3ed14cb"],"56572ec06f1407c066d6b7399413178b33176cd8":["6613659748fe4411a7dcf85266e55db1f95f7315","91d34336c8863b33047124bd0bbe44ca6b3fd532"],"5b7d69c53c444cbbdbc1cd27e9f51f83b3ed14cb":["6613659748fe4411a7dcf85266e55db1f95f7315"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["91d34336c8863b33047124bd0bbe44ca6b3fd532","5fad98724008cd9cb272454c6dfa7d4c10174758"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["9eae2a56dc810a17cf807d831f720dec931a03de","003dc2cb64b06ce8caea28156505feb3c5059ba2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"003dc2cb64b06ce8caea28156505feb3c5059ba2":["9eae2a56dc810a17cf807d831f720dec931a03de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e84628e1e00d06556b67af150a13dbfb1849a818"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["91d34336c8863b33047124bd0bbe44ca6b3fd532","5fad98724008cd9cb272454c6dfa7d4c10174758"]},"commit2Childs":{"e84628e1e00d06556b67af150a13dbfb1849a818":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9eae2a56dc810a17cf807d831f720dec931a03de":["d4d69c535930b5cce125cff868d40f6373dc27d4","003dc2cb64b06ce8caea28156505feb3c5059ba2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9eae2a56dc810a17cf807d831f720dec931a03de"],"6613659748fe4411a7dcf85266e55db1f95f7315":["56572ec06f1407c066d6b7399413178b33176cd8","5b7d69c53c444cbbdbc1cd27e9f51f83b3ed14cb"],"5fad98724008cd9cb272454c6dfa7d4c10174758":["e84628e1e00d06556b67af150a13dbfb1849a818","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"91d34336c8863b33047124bd0bbe44ca6b3fd532":["5fad98724008cd9cb272454c6dfa7d4c10174758","56572ec06f1407c066d6b7399413178b33176cd8","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"430d747ee1b3d38db2cc1cae71671655d970055a":["91d34336c8863b33047124bd0bbe44ca6b3fd532"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"5b7d69c53c444cbbdbc1cd27e9f51f83b3ed14cb":["430d747ee1b3d38db2cc1cae71671655d970055a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"003dc2cb64b06ce8caea28156505feb3c5059ba2":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}