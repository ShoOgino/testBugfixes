{"path":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#countDocsWithClass().mjava","commits":[{"id":"134a24d0cb66520908d88384f1a559875704ed25","date":1445326601,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#countDocsWithClass().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Counts the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws java.io.IOException If accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.leafReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector classQueryCountCollector = new TotalHitCountCollector();\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q.build(),\n          classQueryCountCollector);\n      docCount = classQueryCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0780ce1bf8d563b5988dc0d6f9ade232de0b61","date":1464272038,"type":4,"author":"Tommaso Teofili","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#countDocsWithClass().mjava","sourceNew":null,"sourceOld":"  /**\n   * Counts the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws java.io.IOException If accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.leafReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector classQueryCountCollector = new TotalHitCountCollector();\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q.build(),\n          classQueryCountCollector);\n      docCount = classQueryCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#countDocsWithClass().mjava","sourceNew":null,"sourceOld":"  /**\n   * Counts the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws java.io.IOException If accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.leafReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector classQueryCountCollector = new TotalHitCountCollector();\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q.build(),\n          classQueryCountCollector);\n      docCount = classQueryCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#countDocsWithClass().mjava","sourceNew":null,"sourceOld":"  /**\n   * Counts the number of documents in the index having at least a value for the 'class' field\n   *\n   * @return the no. of documents having a value for the 'class' field\n   * @throws java.io.IOException If accessing to term vectors or search fails\n   */\n  protected int countDocsWithClass() throws IOException {\n    int docCount = MultiFields.getTerms(this.leafReader, this.classFieldName).getDocCount();\n    if (docCount == -1) { // in case codec doesn't support getDocCount\n      TotalHitCountCollector classQueryCountCollector = new TotalHitCountCollector();\n      BooleanQuery.Builder q = new BooleanQuery.Builder();\n      q.add(new BooleanClause(new WildcardQuery(new Term(classFieldName, String.valueOf(WildcardQuery.WILDCARD_STRING))), BooleanClause.Occur.MUST));\n      if (query != null) {\n        q.add(query, BooleanClause.Occur.MUST);\n      }\n      indexSearcher.search(q.build(),\n          classQueryCountCollector);\n      docCount = classQueryCountCollector.getTotalHits();\n    }\n    return docCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0780ce1bf8d563b5988dc0d6f9ade232de0b61":["134a24d0cb66520908d88384f1a559875704ed25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["134a24d0cb66520908d88384f1a559875704ed25","8f0780ce1bf8d563b5988dc0d6f9ade232de0b61"],"134a24d0cb66520908d88384f1a559875704ed25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["134a24d0cb66520908d88384f1a559875704ed25","8f0780ce1bf8d563b5988dc0d6f9ade232de0b61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8f0780ce1bf8d563b5988dc0d6f9ade232de0b61"]},"commit2Childs":{"8f0780ce1bf8d563b5988dc0d6f9ade232de0b61":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["134a24d0cb66520908d88384f1a559875704ed25"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"134a24d0cb66520908d88384f1a559875704ed25":["8f0780ce1bf8d563b5988dc0d6f9ade232de0b61","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}