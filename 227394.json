{"path":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    Map editable_prop_map = (Map) new ObjectBuilder(new JSONParser(new StringReader(\n        ConfigOverlay.MAPPING))).getObject();\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall((String)e.getKey() , errs, (Map) e.getValue());\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n      threads.add(t);\n      t.start();\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    Map editable_prop_map = (Map) new ObjectBuilder(new JSONParser(new StringReader(\n        ConfigOverlay.MAPPING))).getObject();\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall((String)e.getKey() , errs, (Map) e.getValue());\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n      threads.add(t);\n      t.start();\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"838023f0d6d39e0c8096a7124a3a63a39c7630da","date":1455836349,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    Map editable_prop_map = (Map) Utils.fromJSONResource(\"EditableSolrConfigAttributes.json\");\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall((String)e.getKey() , errs, (Map) e.getValue());\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n      threads.add(t);\n      t.start();\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    Map editable_prop_map = (Map) new ObjectBuilder(new JSONParser(new StringReader(\n        ConfigOverlay.MAPPING))).getObject();\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall((String)e.getKey() , errs, (Map) e.getValue());\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n      threads.add(t);\n      t.start();\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0853c291617e0f9d0474b720bf609eb350e9225c","date":1514464265,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    Map editable_prop_map = (Map) Utils.fromJSONResource(\"EditableSolrConfigAttributes.json\");\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupRestTestHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall((String)e.getKey() , errs, (Map) e.getValue());\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n      threads.add(t);\n      t.start();\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    Map editable_prop_map = (Map) Utils.fromJSONResource(\"EditableSolrConfigAttributes.json\");\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall((String)e.getKey() , errs, (Map) e.getValue());\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n      threads.add(t);\n      t.start();\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5331c9bfb89f82059e196c689d5c881791a8ad6","date":1534751756,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    Map editable_prop_map = (Map) Utils.fromJSONResource(\"EditableSolrConfigAttributes.json\");\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupRestTestHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      if (e.getValue() instanceof Map) {\n        Map value = (Map) e.getValue();\n        Thread t = new Thread() {\n          @Override\n          public void run() {\n            try {\n              List<String> errs = new ArrayList<>();\n              collectErrors.add(errs);\n              invokeBulkCall((String)e.getKey() , errs, value);\n            } catch (Exception e) {\n              e.printStackTrace();\n            }\n          }\n        };\n        threads.add(t);\n        t.start();\n      }\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    Map editable_prop_map = (Map) Utils.fromJSONResource(\"EditableSolrConfigAttributes.json\");\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupRestTestHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall((String)e.getKey() , errs, (Map) e.getValue());\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n      threads.add(t);\n      t.start();\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c9780b447ddf847479e7fa9978cb7809a15a0bf","date":1538692320,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    Map editable_prop_map = (Map) Utils.fromJSONResource(\"EditableSolrConfigAttributes.json\");\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupRestTestHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      if (e.getValue() instanceof Map) {\n        Map value = (Map) e.getValue();\n        Thread t = new Thread(() -> {\n          try {\n            List<String> errs = new ArrayList<>();\n            collectErrors.add(errs);\n            invokeBulkCall((String)e.getKey() , errs, value);\n          } catch (Exception e1) {\n            e1.printStackTrace();\n          }\n        });\n        threads.add(t);\n        t.start();\n      }\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    Map editable_prop_map = (Map) Utils.fromJSONResource(\"EditableSolrConfigAttributes.json\");\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupRestTestHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      if (e.getValue() instanceof Map) {\n        Map value = (Map) e.getValue();\n        Thread t = new Thread() {\n          @Override\n          public void run() {\n            try {\n              List<String> errs = new ArrayList<>();\n              collectErrors.add(errs);\n              invokeBulkCall((String)e.getKey() , errs, value);\n            } catch (Exception e) {\n              e.printStackTrace();\n            }\n          }\n        };\n        threads.add(t);\n        t.start();\n      }\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":["2bbe57532ac1b7d8e9055e27cdf07a6bea27e5b4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2bbe57532ac1b7d8e9055e27cdf07a6bea27e5b4","date":1540405844,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    Map editable_prop_map = (Map) Utils.fromJSONResource(\"EditableSolrConfigAttributes.json\");\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupRestTestHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      if (e.getValue() instanceof Map) {\n        List<String> errs = new ArrayList<>();\n        collectErrors.add(errs);\n        Map value = (Map) e.getValue();\n        Thread t = new Thread(() -> {\n          try {\n            invokeBulkCall((String)e.getKey() , errs, value);\n          } catch (Exception e1) {\n            e1.printStackTrace();\n          }\n        });\n        threads.add(t);\n        t.start();\n      }\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    Map editable_prop_map = (Map) Utils.fromJSONResource(\"EditableSolrConfigAttributes.json\");\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupRestTestHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      if (e.getValue() instanceof Map) {\n        Map value = (Map) e.getValue();\n        Thread t = new Thread(() -> {\n          try {\n            List<String> errs = new ArrayList<>();\n            collectErrors.add(errs);\n            invokeBulkCall((String)e.getKey() , errs, value);\n          } catch (Exception e1) {\n            e1.printStackTrace();\n          }\n        });\n        threads.add(t);\n        t.start();\n      }\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","bugFix":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    Map editable_prop_map = (Map) Utils.fromJSONResource(\"EditableSolrConfigAttributes.json\");\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupRestTestHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      if (e.getValue() instanceof Map) {\n        List<String> errs = new ArrayList<>();\n        collectErrors.add(errs);\n        Map value = (Map) e.getValue();\n        Thread t = new Thread(() -> {\n          try {\n            invokeBulkCall((String)e.getKey() , errs, value);\n          } catch (Exception e1) {\n            e1.printStackTrace();\n          }\n        });\n        threads.add(t);\n        t.start();\n      }\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(\"{}\", e);\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    Map editable_prop_map = (Map) Utils.fromJSONResource(\"EditableSolrConfigAttributes.json\");\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupRestTestHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      if (e.getValue() instanceof Map) {\n        List<String> errs = new ArrayList<>();\n        collectErrors.add(errs);\n        Map value = (Map) e.getValue();\n        Thread t = new Thread(() -> {\n          try {\n            invokeBulkCall((String)e.getKey() , errs, value);\n          } catch (Exception e1) {\n            e1.printStackTrace();\n          }\n        });\n        threads.add(t);\n        t.start();\n      }\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSolrConfigHandlerConcurrent#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    @SuppressWarnings({\"rawtypes\"})\n    Map editable_prop_map = (Map) Utils.fromJSONResource(\"EditableSolrConfigAttributes.json\");\n    @SuppressWarnings({\"rawtypes\"})\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupRestTestHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    @SuppressWarnings({\"rawtypes\"})\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      @SuppressWarnings({\"rawtypes\"})\n      final Map.Entry e = (Map.Entry) o;\n      if (e.getValue() instanceof Map) {\n        List<String> errs = new ArrayList<>();\n        collectErrors.add(errs);\n        @SuppressWarnings({\"rawtypes\"})\n        Map value = (Map) e.getValue();\n        Thread t = new Thread(() -> {\n          try {\n            invokeBulkCall((String)e.getKey() , errs, value);\n          } catch (Exception e1) {\n            e1.printStackTrace();\n          }\n        });\n        threads.add(t);\n        t.start();\n      }\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (@SuppressWarnings({\"rawtypes\"})List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(\"{}\", e);\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    Map editable_prop_map = (Map) Utils.fromJSONResource(\"EditableSolrConfigAttributes.json\");\n    Map caches = (Map) editable_prop_map.get(\"query\");\n\n    setupRestTestHarnesses();\n    List<Thread> threads = new ArrayList<>(caches.size());\n    final List<List> collectErrors = new ArrayList<>();\n\n    for (Object o : caches.entrySet()) {\n      final Map.Entry e = (Map.Entry) o;\n      if (e.getValue() instanceof Map) {\n        List<String> errs = new ArrayList<>();\n        collectErrors.add(errs);\n        Map value = (Map) e.getValue();\n        Thread t = new Thread(() -> {\n          try {\n            invokeBulkCall((String)e.getKey() , errs, value);\n          } catch (Exception e1) {\n            e1.printStackTrace();\n          }\n        });\n        threads.add(t);\n        t.start();\n      }\n    }\n\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(\"{}\", e);\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5331c9bfb89f82059e196c689d5c881791a8ad6":["0853c291617e0f9d0474b720bf609eb350e9225c"],"0853c291617e0f9d0474b720bf609eb350e9225c":["838023f0d6d39e0c8096a7124a3a63a39c7630da"],"838023f0d6d39e0c8096a7124a3a63a39c7630da":["abb23fcc2461782ab204e61213240feb77d355aa"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2bbe57532ac1b7d8e9055e27cdf07a6bea27e5b4":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["2bbe57532ac1b7d8e9055e27cdf07a6bea27e5b4"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["b5331c9bfb89f82059e196c689d5c881791a8ad6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"b5331c9bfb89f82059e196c689d5c881791a8ad6":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"0853c291617e0f9d0474b720bf609eb350e9225c":["b5331c9bfb89f82059e196c689d5c881791a8ad6"],"838023f0d6d39e0c8096a7124a3a63a39c7630da":["0853c291617e0f9d0474b720bf609eb350e9225c"],"abb23fcc2461782ab204e61213240feb77d355aa":["838023f0d6d39e0c8096a7124a3a63a39c7630da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"2bbe57532ac1b7d8e9055e27cdf07a6bea27e5b4":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["2bbe57532ac1b7d8e9055e27cdf07a6bea27e5b4"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}