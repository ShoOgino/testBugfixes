{"path":"solr/core/src/java/org/apache/solr/response/ArrayOfNamedValuePairJSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","commits":[{"id":"be24bc5afb9111e35bec7963fc84f96ebd98d9ee","date":1477912779,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/ArrayOfNamedValuePairJSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n\n    if (val instanceof SimpleOrderedMap) {\n      super.writeNamedList(name, val);\n      return;\n    }\n\n    final int sz = val.size();\n    indent();\n\n    writeArrayOpener(sz);\n    incLevel();\n\n    boolean first = true;\n    for (int i=0; i<sz; i++) {\n      if (first) {\n        first = false;\n      } else {\n        writeArraySeparator();\n      }\n\n      indent();\n\n      final String elementName = val.getName(i);\n      final Object elementVal = val.getVal(i);\n\n      /*\n       * JSONWriter's writeNamedListAsArrMap turns NamedList(\"bar\"=\"foo\") into [{\"foo\":\"bar\"}]\n       * but we here wish to turn it into [ {\"name\":\"bar\",\"str\":\"foo\"} ] instead.\n       *\n       * So first we write the <code>{\"name\":\"bar\",</code> portion ...\n       */\n      writeMapOpener(-1);\n      if (elementName != null) {\n        writeKey(\"name\", false);\n        writeVal(\"name\", elementName);\n        writeMapSeparator();\n      }\n\n      /*\n       * ... and then we write the <code>\"str\":\"foo\"}</code> portion.\n       */\n      writeTypeAsKey = true;\n      writeVal(null, elementVal); // passing null since writeVal doesn't actually use name (and we already wrote elementName above)\n      if (writeTypeAsKey) {\n        throw new RuntimeException(\"writeTypeAsKey should have been reset to false by writeVal('\"+elementName+\"','\"+elementVal+\"')\");\n      }\n      writeMapCloser();\n    }\n\n    decLevel();\n    writeArrayCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/ArrayOfNamedValuePairJSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n\n    if (val instanceof SimpleOrderedMap) {\n      super.writeNamedList(name, val);\n      return;\n    }\n\n    final int sz = val.size();\n    indent();\n\n    writeArrayOpener(sz);\n    incLevel();\n\n    boolean first = true;\n    for (int i=0; i<sz; i++) {\n      if (first) {\n        first = false;\n      } else {\n        writeArraySeparator();\n      }\n\n      indent();\n\n      final String elementName = val.getName(i);\n      final Object elementVal = val.getVal(i);\n\n      /*\n       * JSONWriter's writeNamedListAsArrMap turns NamedList(\"bar\"=\"foo\") into [{\"foo\":\"bar\"}]\n       * but we here wish to turn it into [ {\"name\":\"bar\",\"str\":\"foo\"} ] instead.\n       *\n       * So first we write the <code>{\"name\":\"bar\",</code> portion ...\n       */\n      writeMapOpener(-1);\n      if (elementName != null) {\n        writeKey(\"name\", false);\n        writeVal(\"name\", elementName);\n        writeMapSeparator();\n      }\n\n      /*\n       * ... and then we write the <code>\"str\":\"foo\"}</code> portion.\n       */\n      writeTypeAsKey = true;\n      writeVal(null, elementVal); // passing null since writeVal doesn't actually use name (and we already wrote elementName above)\n      if (writeTypeAsKey) {\n        throw new RuntimeException(\"writeTypeAsKey should have been reset to false by writeVal('\"+elementName+\"','\"+elementVal+\"')\");\n      }\n      writeMapCloser();\n    }\n\n    decLevel();\n    writeArrayCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87f40a063571d1870bae89b6d191c3cb53b10f5e","date":1482933535,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/ArrayOfNameTypeValueJSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/ArrayOfNamedValuePairJSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","sourceNew":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n\n    if (val instanceof SimpleOrderedMap) {\n      super.writeNamedList(name, val);\n      return;\n    }\n\n    final int sz = val.size();\n    indent();\n\n    writeArrayOpener(sz);\n    incLevel();\n\n    boolean first = true;\n    for (int i=0; i<sz; i++) {\n      if (first) {\n        first = false;\n      } else {\n        writeArraySeparator();\n      }\n\n      indent();\n\n      final String elementName = val.getName(i);\n      final Object elementVal = val.getVal(i);\n\n      /*\n       * JSONWriter's writeNamedListAsArrMap turns NamedList(\"bar\"=\"foo\") into [{\"foo\":\"bar\"}]\n       * but we here wish to turn it into [ {\"name\":\"bar\",\"type\":\"str\",\"value\":\"foo\"} ] instead.\n       *\n       * So first we write the <code>{\"name\":\"bar\",</code> portion ...\n       */\n      writeMapOpener(-1);\n      if (elementName != null || writeNullName) {\n        writeKey(\"name\", false);\n        writeVal(\"name\", elementName);\n        writeMapSeparator();\n      }\n\n      /*\n       * ... and then we write the <code>\"type\":\"str\",\"value\":\"foo\"}</code> portion.\n       */\n      writeTypeAndValueKey = true;\n      writeVal(null, elementVal); // passing null since writeVal doesn't actually use name (and we already wrote elementName above)\n      if (writeTypeAndValueKey) {\n        throw new RuntimeException(\"writeTypeAndValueKey should have been reset to false by writeVal('\"+elementName+\"','\"+elementVal+\"')\");\n      }\n      writeMapCloser();\n    }\n\n    decLevel();\n    writeArrayCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n\n    if (val instanceof SimpleOrderedMap) {\n      super.writeNamedList(name, val);\n      return;\n    }\n\n    final int sz = val.size();\n    indent();\n\n    writeArrayOpener(sz);\n    incLevel();\n\n    boolean first = true;\n    for (int i=0; i<sz; i++) {\n      if (first) {\n        first = false;\n      } else {\n        writeArraySeparator();\n      }\n\n      indent();\n\n      final String elementName = val.getName(i);\n      final Object elementVal = val.getVal(i);\n\n      /*\n       * JSONWriter's writeNamedListAsArrMap turns NamedList(\"bar\"=\"foo\") into [{\"foo\":\"bar\"}]\n       * but we here wish to turn it into [ {\"name\":\"bar\",\"str\":\"foo\"} ] instead.\n       *\n       * So first we write the <code>{\"name\":\"bar\",</code> portion ...\n       */\n      writeMapOpener(-1);\n      if (elementName != null) {\n        writeKey(\"name\", false);\n        writeVal(\"name\", elementName);\n        writeMapSeparator();\n      }\n\n      /*\n       * ... and then we write the <code>\"str\":\"foo\"}</code> portion.\n       */\n      writeTypeAsKey = true;\n      writeVal(null, elementVal); // passing null since writeVal doesn't actually use name (and we already wrote elementName above)\n      if (writeTypeAsKey) {\n        throw new RuntimeException(\"writeTypeAsKey should have been reset to false by writeVal('\"+elementName+\"','\"+elementVal+\"')\");\n      }\n      writeMapCloser();\n    }\n\n    decLevel();\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/response/ArrayOfNamedValuePairJSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n\n    if (val instanceof SimpleOrderedMap) {\n      super.writeNamedList(name, val);\n      return;\n    }\n\n    final int sz = val.size();\n    indent();\n\n    writeArrayOpener(sz);\n    incLevel();\n\n    boolean first = true;\n    for (int i=0; i<sz; i++) {\n      if (first) {\n        first = false;\n      } else {\n        writeArraySeparator();\n      }\n\n      indent();\n\n      final String elementName = val.getName(i);\n      final Object elementVal = val.getVal(i);\n\n      /*\n       * JSONWriter's writeNamedListAsArrMap turns NamedList(\"bar\"=\"foo\") into [{\"foo\":\"bar\"}]\n       * but we here wish to turn it into [ {\"name\":\"bar\",\"str\":\"foo\"} ] instead.\n       *\n       * So first we write the <code>{\"name\":\"bar\",</code> portion ...\n       */\n      writeMapOpener(-1);\n      if (elementName != null) {\n        writeKey(\"name\", false);\n        writeVal(\"name\", elementName);\n        writeMapSeparator();\n      }\n\n      /*\n       * ... and then we write the <code>\"str\":\"foo\"}</code> portion.\n       */\n      writeTypeAsKey = true;\n      writeVal(null, elementVal); // passing null since writeVal doesn't actually use name (and we already wrote elementName above)\n      if (writeTypeAsKey) {\n        throw new RuntimeException(\"writeTypeAsKey should have been reset to false by writeVal('\"+elementName+\"','\"+elementVal+\"')\");\n      }\n      writeMapCloser();\n    }\n\n    decLevel();\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be24bc5afb9111e35bec7963fc84f96ebd98d9ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"87f40a063571d1870bae89b6d191c3cb53b10f5e":["be24bc5afb9111e35bec7963fc84f96ebd98d9ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"320888923ec13b91f53082558f01f4c9960dd226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","be24bc5afb9111e35bec7963fc84f96ebd98d9ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87f40a063571d1870bae89b6d191c3cb53b10f5e"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["320888923ec13b91f53082558f01f4c9960dd226","87f40a063571d1870bae89b6d191c3cb53b10f5e"]},"commit2Childs":{"be24bc5afb9111e35bec7963fc84f96ebd98d9ee":["87f40a063571d1870bae89b6d191c3cb53b10f5e","320888923ec13b91f53082558f01f4c9960dd226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be24bc5afb9111e35bec7963fc84f96ebd98d9ee","320888923ec13b91f53082558f01f4c9960dd226"],"87f40a063571d1870bae89b6d191c3cb53b10f5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"320888923ec13b91f53082558f01f4c9960dd226":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}