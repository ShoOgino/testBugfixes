{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector#createDvGroupFacetCollector(String,Type,boolean,String,Type,boolean,BytesRef,int).mjava","commits":[{"id":"080433b7f87f31638fa702a1c5cff2141f5ead0a","date":1331811752,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector#createDvGroupFacetCollector(String,Type,boolean,String,Type,boolean,BytesRef,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector#createDvGroupFacetCollector(String,DocValues.Type,boolean,String,DocValues.Type,boolean,BytesRef,int).mjava","sourceNew":"  /**\n   * Factory method for creating the right implementation based on the group docvalues type and the facet docvalues\n   * type.\n   *\n   * Currently only the {@link Type#BYTES_VAR_SORTED} and the {@link Type#BYTES_FIXED_SORTED} are\n   * the only docvalues type supported for both the group and facet field.\n   *\n   * @param groupField        The group field\n   * @param groupDvType       The docvalues type for the group field\n   * @param groupDiskResident Whether the group docvalues should be disk resident\n   * @param facetField        The facet field\n   * @param facetDvType       The docvalues type for the facet field\n   * @param facetDiskResident Whether the facet docvalues should be disk resident\n   * @param facetPrefix       The facet prefix a facet entry should start with to be included.\n   * @param initialSize       The initial allocation size of the internal int set and group facet list which should roughly\n   *                          match the total number of expected unique groups. Be aware that the heap usage is\n   *                          4 bytes * initialSize.\n   * @return a <code>DVGroupFacetCollector</code> implementation\n   */\n  public static DVGroupFacetCollector createDvGroupFacetCollector(String groupField,\n                                                                  Type groupDvType,\n                                                                  boolean groupDiskResident,\n                                                                  String facetField,\n                                                                  Type facetDvType,\n                                                                  boolean facetDiskResident,\n                                                                  BytesRef facetPrefix,\n                                                                  int initialSize) {\n    switch (groupDvType) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FLOAT_32:\n      case FLOAT_64:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        throw new IllegalArgumentException(String.format(\"Group valueType %s not supported\", groupDvType));\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        return GroupSortedBR.createGroupSortedFacetCollector(groupField, groupDvType, groupDiskResident, facetField, facetDvType, facetDiskResident, facetPrefix, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"Group valueType %s not supported\", groupDvType));\n    }\n  }\n\n","sourceOld":"  /**\n   * Factory method for creating the right implementation based on the group docvalues type and the facet docvalues\n   * type.\n   *\n   * Currently only the {@link DocValues.Type#BYTES_VAR_SORTED} and the {@link DocValues.Type#BYTES_FIXED_SORTED} are\n   * the only docvalues type supported for both the group and facet field.\n   *\n   * @param groupField        The group field\n   * @param groupDvType       The docvalues type for the group field\n   * @param groupDiskResident Whether the group docvalues should be disk resident\n   * @param facetField        The facet field\n   * @param facetDvType       The docvalues type for the facet field\n   * @param facetDiskResident Whether the facet docvalues should be disk resident\n   * @param facetPrefix       The facet prefix a facet entry should start with to be included.\n   * @param initialSize       The initial allocation size of the internal int set and group facet list which should roughly\n   *                          match the total number of expected unique groups. Be aware that the heap usage is\n   *                          4 bytes * initialSize.\n   * @return a <code>DVGroupFacetCollector</code> implementation\n   */\n  public static DVGroupFacetCollector createDvGroupFacetCollector(String groupField,\n                                                                  DocValues.Type groupDvType,\n                                                                  boolean groupDiskResident,\n                                                                  String facetField,\n                                                                  DocValues.Type facetDvType,\n                                                                  boolean facetDiskResident,\n                                                                  BytesRef facetPrefix,\n                                                                  int initialSize) {\n    switch (groupDvType) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FLOAT_32:\n      case FLOAT_64:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        throw new IllegalArgumentException(String.format(\"Group valueType %s not supported\", groupDvType));\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        return GroupSortedBR.createGroupSortedFacetCollector(groupField, groupDvType, groupDiskResident, facetField, facetDvType, facetDiskResident, facetPrefix, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"Group valueType %s not supported\", groupDvType));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector#createDvGroupFacetCollector(String,Type,boolean,String,Type,boolean,BytesRef,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/dv/DVGroupFacetCollector#createDvGroupFacetCollector(String,Type,boolean,String,Type,boolean,BytesRef,int).mjava","sourceNew":"  /**\n   * Factory method for creating the right implementation based on the group docvalues type and the facet docvalues\n   * type.\n   *\n   * Currently only the {@link Type#BYTES_VAR_SORTED} and the {@link Type#BYTES_FIXED_SORTED} are\n   * the only docvalues type supported for both the group and facet field.\n   *\n   * @param groupField        The group field\n   * @param groupDvType       The docvalues type for the group field\n   * @param groupDiskResident Whether the group docvalues should be disk resident\n   * @param facetField        The facet field\n   * @param facetDvType       The docvalues type for the facet field\n   * @param facetDiskResident Whether the facet docvalues should be disk resident\n   * @param facetPrefix       The facet prefix a facet entry should start with to be included.\n   * @param initialSize       The initial allocation size of the internal int set and group facet list which should roughly\n   *                          match the total number of expected unique groups. Be aware that the heap usage is\n   *                          4 bytes * initialSize.\n   * @return a <code>DVGroupFacetCollector</code> implementation\n   */\n  public static DVGroupFacetCollector createDvGroupFacetCollector(String groupField,\n                                                                  Type groupDvType,\n                                                                  boolean groupDiskResident,\n                                                                  String facetField,\n                                                                  Type facetDvType,\n                                                                  boolean facetDiskResident,\n                                                                  BytesRef facetPrefix,\n                                                                  int initialSize) {\n    switch (groupDvType) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FLOAT_32:\n      case FLOAT_64:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        throw new IllegalArgumentException(String.format(\"Group valueType %s not supported\", groupDvType));\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        return GroupSortedBR.createGroupSortedFacetCollector(groupField, groupDvType, groupDiskResident, facetField, facetDvType, facetDiskResident, facetPrefix, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"Group valueType %s not supported\", groupDvType));\n    }\n  }\n\n","sourceOld":"  /**\n   * Factory method for creating the right implementation based on the group docvalues type and the facet docvalues\n   * type.\n   *\n   * Currently only the {@link Type#BYTES_VAR_SORTED} and the {@link Type#BYTES_FIXED_SORTED} are\n   * the only docvalues type supported for both the group and facet field.\n   *\n   * @param groupField        The group field\n   * @param groupDvType       The docvalues type for the group field\n   * @param groupDiskResident Whether the group docvalues should be disk resident\n   * @param facetField        The facet field\n   * @param facetDvType       The docvalues type for the facet field\n   * @param facetDiskResident Whether the facet docvalues should be disk resident\n   * @param facetPrefix       The facet prefix a facet entry should start with to be included.\n   * @param initialSize       The initial allocation size of the internal int set and group facet list which should roughly\n   *                          match the total number of expected unique groups. Be aware that the heap usage is\n   *                          4 bytes * initialSize.\n   * @return a <code>DVGroupFacetCollector</code> implementation\n   */\n  public static DVGroupFacetCollector createDvGroupFacetCollector(String groupField,\n                                                                  Type groupDvType,\n                                                                  boolean groupDiskResident,\n                                                                  String facetField,\n                                                                  Type facetDvType,\n                                                                  boolean facetDiskResident,\n                                                                  BytesRef facetPrefix,\n                                                                  int initialSize) {\n    switch (groupDvType) {\n      case VAR_INTS:\n      case FIXED_INTS_8:\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FLOAT_32:\n      case FLOAT_64:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_FIXED_DEREF:\n      case BYTES_VAR_STRAIGHT:\n      case BYTES_VAR_DEREF:\n        throw new IllegalArgumentException(String.format(\"Group valueType %s not supported\", groupDvType));\n      case BYTES_VAR_SORTED:\n      case BYTES_FIXED_SORTED:\n        return GroupSortedBR.createGroupSortedFacetCollector(groupField, groupDvType, groupDiskResident, facetField, facetDvType, facetDiskResident, facetPrefix, initialSize);\n      default:\n        throw new IllegalArgumentException(String.format(\"Group valueType %s not supported\", groupDvType));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["080433b7f87f31638fa702a1c5cff2141f5ead0a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"080433b7f87f31638fa702a1c5cff2141f5ead0a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["080433b7f87f31638fa702a1c5cff2141f5ead0a"],"080433b7f87f31638fa702a1c5cff2141f5ead0a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}