{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","commits":[{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      try {\n        subReaders[i].docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n\n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n\n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n\n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      try {\n        subReaders[i].docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      try {\n        subReaders[i].docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      try {\n        subReaders[i].docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      try {\n        subReaders[i].docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", TextField.TYPE_UNSTORED));\n    doc.add(newField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      try {\n        subReaders[i].docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders().get(0)).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    List<? extends AtomicReader> subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.size());\n    for(AtomicReader s : subReaders) {\n      try {\n        s.docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders()[0]).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    IndexReader[] subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.length);\n    for(int i=0;i<2;i++) {\n      try {\n        subReaders[i].docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.leaves().get(0).reader()).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    List<AtomicReaderContext> leaves = r2.leaves();\n    assertEquals(2, leaves.size());\n    for(AtomicReaderContext ctx : leaves) {\n      try {\n        ctx.reader().docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders().get(0)).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    List<? extends AtomicReader> subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.size());\n    for(AtomicReader s : subReaders) {\n      try {\n        s.docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.leaves().get(0).reader()).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    List<AtomicReaderContext> leaves = r2.leaves();\n    assertEquals(2, leaves.size());\n    for(AtomicReaderContext ctx : leaves) {\n      try {\n        ctx.reader().docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders().get(0)).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    List<? extends AtomicReader> subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.size());\n    for(AtomicReader s : subReaders) {\n      try {\n        s.docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.leaves().get(0).reader()).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    List<AtomicReaderContext> leaves = r2.leaves();\n    assertEquals(2, leaves.size());\n    for(AtomicReaderContext ctx : leaves) {\n      try {\n        ctx.reader().docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders().get(0)).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    List<? extends AtomicReader> subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.size());\n    for(AtomicReader s : subReaders) {\n      try {\n        s.docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders().get(0)).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    List<? extends AtomicReader> subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.size());\n    for(AtomicReader s : subReaders) {\n      try {\n        s.docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.leaves().get(0).reader()).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    List<AtomicReaderContext> leaves = r2.leaves();\n    assertEquals(2, leaves.size());\n    for(AtomicReaderContext ctx : leaves) {\n      try {\n        ctx.reader().docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.leaves().get(0).reader()).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    List<AtomicReaderContext> leaves = r2.leaves();\n    assertEquals(2, leaves.size());\n    for(AtomicReaderContext ctx : leaves) {\n      try {\n        ctx.reader().docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.getSequentialSubReaders().get(0)).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    List<? extends AtomicReader> subReaders = r2.getSequentialSubReaders();\n    assertEquals(2, subReaders.size());\n    for(AtomicReader s : subReaders) {\n      try {\n        s.docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.leaves().get(0).reader()).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    List<AtomicReaderContext> leaves = r2.leaves();\n    assertEquals(2, leaves.size());\n    for(AtomicReaderContext ctx : leaves) {\n      try {\n        ctx.reader().docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.leaves().get(0).reader()).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    List<AtomicReaderContext> leaves = r2.leaves();\n    assertEquals(2, leaves.size());\n    for(AtomicReaderContext ctx : leaves) {\n      try {\n        ctx.reader().docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.leaves().get(0).reader()).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    List<AtomicReaderContext> leaves = r2.leaves();\n    assertEquals(2, leaves.size());\n    for(AtomicReaderContext ctx : leaves) {\n      try {\n        ctx.reader().docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.leaves().get(0).reader()).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    List<AtomicReaderContext> leaves = r2.leaves();\n    assertEquals(2, leaves.size());\n    for(AtomicReaderContext ctx : leaves) {\n      try {\n        ctx.reader().docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","sourceNew":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.leaves().get(0).reader()).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    List<AtomicReaderContext> leaves = r2.leaves();\n    assertEquals(2, leaves.size());\n    for(AtomicReaderContext ctx : leaves) {\n      try {\n        ctx.reader().docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.leaves().get(0).reader()).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene40PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    List<AtomicReaderContext> leaves = r2.leaves();\n    assertEquals(2, leaves.size());\n    for(AtomicReaderContext ctx : leaves) {\n      try {\n        ctx.reader().docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.leaves().get(0).reader()).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    List<AtomicReaderContext> leaves = r2.leaves();\n    assertEquals(2, leaves.size());\n    for(AtomicReaderContext ctx : leaves) {\n      try {\n        ctx.reader().docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testNoTermsIndex().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1609: don't load terms index\n  public void testNoTermsIndex() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\", Field.Store.NO));\n    doc.add(newTextField(\"number\", \"0 1 2 3 4 5 6 7 8 9\", Field.Store.NO));\n    writer.addDocument(doc);\n    writer.addDocument(doc);\n    writer.close();\n  \n    DirectoryReader r = DirectoryReader.open(dir, -1);\n    try {\n      r.docFreq(new Term(\"field\", \"f\"));\n      fail(\"did not hit expected exception\");\n    } catch (IllegalStateException ise) {\n      // expected\n    }\n  \n    assertEquals(-1, ((SegmentReader) r.leaves().get(0).reader()).getTermInfosIndexDivisor());\n    writer = new IndexWriter(\n        dir,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    writer.addDocument(doc);\n    writer.close();\n  \n    // LUCENE-1718: ensure re-open carries over no terms index:\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    r.close();\n    List<AtomicReaderContext> leaves = r2.leaves();\n    assertEquals(2, leaves.size());\n    for(AtomicReaderContext ctx : leaves) {\n      try {\n        ctx.reader().docFreq(new Term(\"field\", \"f\"));\n        fail(\"did not hit expected exception\");\n      } catch (IllegalStateException ise) {\n        // expected\n      }\n    }\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"a45bec74b98f6fc05f52770cfb425739e6563960":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["ced66195b26fdb1f77ee00e2a77ec6918dedd766","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["ced66195b26fdb1f77ee00e2a77ec6918dedd766","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a45bec74b98f6fc05f52770cfb425739e6563960"]},"commit2Childs":{"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["3c188105a9aae04f56c24996f98f8333fc825d2e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a45bec74b98f6fc05f52770cfb425739e6563960":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"04f07771a2a7dd3a395700665ed839c3dae2def2":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a45bec74b98f6fc05f52770cfb425739e6563960","db4fdbf3d262768eabc027cd8321edca0cd11fa8","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","db4fdbf3d262768eabc027cd8321edca0cd11fa8","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","db4fdbf3d262768eabc027cd8321edca0cd11fa8","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}