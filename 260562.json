{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","commits":[{"id":"30f9ea0e61a3df8b29a67bce1ea06c83201ad871","date":1457138084,"type":1,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testCreateCollectionWithPropertyParam().mjava","sourceNew":"  private void testCreateCollectionWithPropertyParam() throws Exception {\n    String collectionName = \"solrj_test_core_props\";\n    \n    File tmpDir = createTempDir(\"testPropertyParamsForCreate\").toFile();\n    File dataDir = new File(tmpDir, \"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    File ulogDir = new File(tmpDir, \"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, dataDir.getAbsolutePath());\n    properties.put(CoreAdminParams.ULOG_DIR, ulogDir.getAbsolutePath());\n\n    CollectionAdminRequest.Create createReq = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(1)\n            .setConfigName(\"conf1\")\n            .setProperties(properties);\n\n    CollectionAdminResponse response = createReq.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = cloudClient.getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n\n    Replica replica1 = testCollection.getReplica(\"core_node1\");\n\n    try (HttpSolrClient client = new HttpSolrClient(replica1.getStr(\"base_url\"))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(replica1.getStr(\"core\"), client);\n      NamedList<Object> coreStatus = status.getCoreStatus(replica1.getStr(\"core\"));\n      String dataDirStr = (String) coreStatus.get(\"dataDir\");\n      assertEquals(\"Data dir does not match param given in property.dataDir syntax\",\n          new File(dataDirStr).getAbsolutePath(), dataDir.getAbsolutePath());\n    }\n\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(collectionName);\n    deleteCollectionRequest.process(cloudClient);\n  }\n\n","sourceOld":"  private void testCreateCollectionWithPropertyParam() throws Exception {\n    String collectionName = \"solrj_test_core_props\";\n    \n    File tmpDir = createTempDir(\"testPropertyParamsForCreate\").toFile();\n    File dataDir = new File(tmpDir, \"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    File ulogDir = new File(tmpDir, \"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, dataDir.getAbsolutePath());\n    properties.put(CoreAdminParams.ULOG_DIR, ulogDir.getAbsolutePath());\n\n    CollectionAdminRequest.Create createReq = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(1)\n            .setConfigName(\"conf1\")\n            .setProperties(properties);\n\n    CollectionAdminResponse response = createReq.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = cloudClient.getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n\n    Replica replica1 = testCollection.getReplica(\"core_node1\");\n\n    try (HttpSolrClient client = new HttpSolrClient(replica1.getStr(\"base_url\"))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(replica1.getStr(\"core\"), client);\n      NamedList<Object> coreStatus = status.getCoreStatus(replica1.getStr(\"core\"));\n      String dataDirStr = (String) coreStatus.get(\"dataDir\");\n      assertEquals(\"Data dir does not match param given in property.dataDir syntax\",\n          new File(dataDirStr).getAbsolutePath(), dataDir.getAbsolutePath());\n    }\n\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(collectionName);\n    deleteCollectionRequest.process(cloudClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testCreateCollectionWithPropertyParam().mjava","sourceNew":"  private void testCreateCollectionWithPropertyParam() throws Exception {\n    String collectionName = \"solrj_test_core_props\";\n    \n    File tmpDir = createTempDir(\"testPropertyParamsForCreate\").toFile();\n    File dataDir = new File(tmpDir, \"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    File ulogDir = new File(tmpDir, \"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, dataDir.getAbsolutePath());\n    properties.put(CoreAdminParams.ULOG_DIR, ulogDir.getAbsolutePath());\n\n    CollectionAdminRequest.Create createReq = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(1)\n            .setConfigName(\"conf1\")\n            .setProperties(properties);\n\n    CollectionAdminResponse response = createReq.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = cloudClient.getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n\n    Replica replica1 = testCollection.getReplica(\"core_node1\");\n\n    try (HttpSolrClient client = new HttpSolrClient(replica1.getStr(\"base_url\"))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(replica1.getStr(\"core\"), client);\n      NamedList<Object> coreStatus = status.getCoreStatus(replica1.getStr(\"core\"));\n      String dataDirStr = (String) coreStatus.get(\"dataDir\");\n      assertEquals(\"Data dir does not match param given in property.dataDir syntax\",\n          new File(dataDirStr).getAbsolutePath(), dataDir.getAbsolutePath());\n    }\n\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(collectionName);\n    deleteCollectionRequest.process(cloudClient);\n  }\n\n","sourceOld":"  private void testCreateCollectionWithPropertyParam() throws Exception {\n    String collectionName = \"solrj_test_core_props\";\n    \n    File tmpDir = createTempDir(\"testPropertyParamsForCreate\").toFile();\n    File dataDir = new File(tmpDir, \"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    File ulogDir = new File(tmpDir, \"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, dataDir.getAbsolutePath());\n    properties.put(CoreAdminParams.ULOG_DIR, ulogDir.getAbsolutePath());\n\n    CollectionAdminRequest.Create createReq = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(1)\n            .setConfigName(\"conf1\")\n            .setProperties(properties);\n\n    CollectionAdminResponse response = createReq.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = cloudClient.getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n\n    Replica replica1 = testCollection.getReplica(\"core_node1\");\n\n    try (HttpSolrClient client = new HttpSolrClient(replica1.getStr(\"base_url\"))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(replica1.getStr(\"core\"), client);\n      NamedList<Object> coreStatus = status.getCoreStatus(replica1.getStr(\"core\"));\n      String dataDirStr = (String) coreStatus.get(\"dataDir\");\n      assertEquals(\"Data dir does not match param given in property.dataDir syntax\",\n          new File(dataDirStr).getAbsolutePath(), dataDir.getAbsolutePath());\n    }\n\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(collectionName);\n    deleteCollectionRequest.process(cloudClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","sourceNew":"  private void testCreateCollectionWithPropertyParam() throws Exception {\n    String collectionName = \"solrj_test_core_props\";\n    \n    File tmpDir = createTempDir(\"testPropertyParamsForCreate\").toFile();\n    File dataDir = new File(tmpDir, \"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    File ulogDir = new File(tmpDir, \"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, dataDir.getAbsolutePath());\n    properties.put(CoreAdminParams.ULOG_DIR, ulogDir.getAbsolutePath());\n\n    CollectionAdminRequest.Create createReq = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(1)\n            .setConfigName(\"conf1\")\n            .setProperties(properties);\n\n    CollectionAdminResponse response = createReq.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = cloudClient.getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n\n    Replica replica1 = testCollection.getReplica(\"core_node1\");\n\n    try (HttpSolrClient client = getHttpSolrClient(replica1.getStr(\"base_url\"))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(replica1.getStr(\"core\"), client);\n      NamedList<Object> coreStatus = status.getCoreStatus(replica1.getStr(\"core\"));\n      String dataDirStr = (String) coreStatus.get(\"dataDir\");\n      assertEquals(\"Data dir does not match param given in property.dataDir syntax\",\n          new File(dataDirStr).getAbsolutePath(), dataDir.getAbsolutePath());\n    }\n\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(collectionName);\n    deleteCollectionRequest.process(cloudClient);\n  }\n\n","sourceOld":"  private void testCreateCollectionWithPropertyParam() throws Exception {\n    String collectionName = \"solrj_test_core_props\";\n    \n    File tmpDir = createTempDir(\"testPropertyParamsForCreate\").toFile();\n    File dataDir = new File(tmpDir, \"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    File ulogDir = new File(tmpDir, \"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, dataDir.getAbsolutePath());\n    properties.put(CoreAdminParams.ULOG_DIR, ulogDir.getAbsolutePath());\n\n    CollectionAdminRequest.Create createReq = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(1)\n            .setConfigName(\"conf1\")\n            .setProperties(properties);\n\n    CollectionAdminResponse response = createReq.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = cloudClient.getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n\n    Replica replica1 = testCollection.getReplica(\"core_node1\");\n\n    try (HttpSolrClient client = new HttpSolrClient(replica1.getStr(\"base_url\"))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(replica1.getStr(\"core\"), client);\n      NamedList<Object> coreStatus = status.getCoreStatus(replica1.getStr(\"core\"));\n      String dataDirStr = (String) coreStatus.get(\"dataDir\");\n      assertEquals(\"Data dir does not match param given in property.dataDir syntax\",\n          new File(dataDirStr).getAbsolutePath(), dataDir.getAbsolutePath());\n    }\n\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(collectionName);\n    deleteCollectionRequest.process(cloudClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","sourceNew":"  private void testCreateCollectionWithPropertyParam() throws Exception {\n    String collectionName = \"solrj_test_core_props\";\n    \n    File tmpDir = createTempDir(\"testPropertyParamsForCreate\").toFile();\n    File dataDir = new File(tmpDir, \"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    File ulogDir = new File(tmpDir, \"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, dataDir.getAbsolutePath());\n    properties.put(CoreAdminParams.ULOG_DIR, ulogDir.getAbsolutePath());\n\n    CollectionAdminRequest.Create createReq = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(1)\n            .setConfigName(\"conf1\")\n            .setProperties(properties);\n\n    CollectionAdminResponse response = createReq.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = cloudClient.getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n\n    Replica replica1 = testCollection.getReplica(\"core_node1\");\n\n    try (HttpSolrClient client = getHttpSolrClient(replica1.getStr(\"base_url\"))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(replica1.getStr(\"core\"), client);\n      NamedList<Object> coreStatus = status.getCoreStatus(replica1.getStr(\"core\"));\n      String dataDirStr = (String) coreStatus.get(\"dataDir\");\n      assertEquals(\"Data dir does not match param given in property.dataDir syntax\",\n          new File(dataDirStr).getAbsolutePath(), dataDir.getAbsolutePath());\n    }\n\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(collectionName);\n    deleteCollectionRequest.process(cloudClient);\n  }\n\n","sourceOld":"  private void testCreateCollectionWithPropertyParam() throws Exception {\n    String collectionName = \"solrj_test_core_props\";\n    \n    File tmpDir = createTempDir(\"testPropertyParamsForCreate\").toFile();\n    File dataDir = new File(tmpDir, \"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    File ulogDir = new File(tmpDir, \"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, dataDir.getAbsolutePath());\n    properties.put(CoreAdminParams.ULOG_DIR, ulogDir.getAbsolutePath());\n\n    CollectionAdminRequest.Create createReq = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(1)\n            .setConfigName(\"conf1\")\n            .setProperties(properties);\n\n    CollectionAdminResponse response = createReq.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = cloudClient.getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n\n    Replica replica1 = testCollection.getReplica(\"core_node1\");\n\n    try (HttpSolrClient client = new HttpSolrClient(replica1.getStr(\"base_url\"))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(replica1.getStr(\"core\"), client);\n      NamedList<Object> coreStatus = status.getCoreStatus(replica1.getStr(\"core\"));\n      String dataDirStr = (String) coreStatus.get(\"dataDir\");\n      assertEquals(\"Data dir does not match param given in property.dataDir syntax\",\n          new File(dataDirStr).getAbsolutePath(), dataDir.getAbsolutePath());\n    }\n\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(collectionName);\n    deleteCollectionRequest.process(cloudClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","sourceNew":"  @Test\n  public void testCreateCollectionWithPropertyParam() throws Exception {\n\n    String collectionName = \"solrj_test_core_props\";\n    \n    Path tmpDir = createTempDir(\"testPropertyParamsForCreate\");\n    Path dataDir = tmpDir.resolve(\"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    Path ulogDir = tmpDir.resolve(\"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .withProperty(CoreAdminParams.DATA_DIR, dataDir.toString())\n        .withProperty(CoreAdminParams.ULOG_DIR, ulogDir.toString())\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = getCollectionState(collectionName);\n\n    Replica replica1 = testCollection.getReplica(\"core_node1\");\n    CoreStatus coreStatus = getCoreStatus(replica1);\n\n    assertEquals(Paths.get(coreStatus.getDataDirectory()).toString(), dataDir.toString());\n\n  }\n\n","sourceOld":"  private void testCreateCollectionWithPropertyParam() throws Exception {\n    String collectionName = \"solrj_test_core_props\";\n    \n    File tmpDir = createTempDir(\"testPropertyParamsForCreate\").toFile();\n    File dataDir = new File(tmpDir, \"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    File ulogDir = new File(tmpDir, \"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, dataDir.getAbsolutePath());\n    properties.put(CoreAdminParams.ULOG_DIR, ulogDir.getAbsolutePath());\n\n    CollectionAdminRequest.Create createReq = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(1)\n            .setConfigName(\"conf1\")\n            .setProperties(properties);\n\n    CollectionAdminResponse response = createReq.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = cloudClient.getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n\n    Replica replica1 = testCollection.getReplica(\"core_node1\");\n\n    try (HttpSolrClient client = getHttpSolrClient(replica1.getStr(\"base_url\"))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(replica1.getStr(\"core\"), client);\n      NamedList<Object> coreStatus = status.getCoreStatus(replica1.getStr(\"core\"));\n      String dataDirStr = (String) coreStatus.get(\"dataDir\");\n      assertEquals(\"Data dir does not match param given in property.dataDir syntax\",\n          new File(dataDirStr).getAbsolutePath(), dataDir.getAbsolutePath());\n    }\n\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(collectionName);\n    deleteCollectionRequest.process(cloudClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","sourceNew":"  @Test\n  public void testCreateCollectionWithPropertyParam() throws Exception {\n\n    String collectionName = \"solrj_test_core_props\";\n    \n    Path tmpDir = createTempDir(\"testPropertyParamsForCreate\");\n    Path dataDir = tmpDir.resolve(\"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    Path ulogDir = tmpDir.resolve(\"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .withProperty(CoreAdminParams.DATA_DIR, dataDir.toString())\n        .withProperty(CoreAdminParams.ULOG_DIR, ulogDir.toString())\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = getCollectionState(collectionName);\n\n    Replica replica1 = testCollection.getReplica(\"core_node1\");\n    CoreStatus coreStatus = getCoreStatus(replica1);\n\n    assertEquals(Paths.get(coreStatus.getDataDirectory()).toString(), dataDir.toString());\n\n  }\n\n","sourceOld":"  private void testCreateCollectionWithPropertyParam() throws Exception {\n    String collectionName = \"solrj_test_core_props\";\n    \n    File tmpDir = createTempDir(\"testPropertyParamsForCreate\").toFile();\n    File dataDir = new File(tmpDir, \"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    File ulogDir = new File(tmpDir, \"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, dataDir.getAbsolutePath());\n    properties.put(CoreAdminParams.ULOG_DIR, ulogDir.getAbsolutePath());\n\n    CollectionAdminRequest.Create createReq = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(1)\n            .setConfigName(\"conf1\")\n            .setProperties(properties);\n\n    CollectionAdminResponse response = createReq.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = cloudClient.getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n\n    Replica replica1 = testCollection.getReplica(\"core_node1\");\n\n    try (HttpSolrClient client = getHttpSolrClient(replica1.getStr(\"base_url\"))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(replica1.getStr(\"core\"), client);\n      NamedList<Object> coreStatus = status.getCoreStatus(replica1.getStr(\"core\"));\n      String dataDirStr = (String) coreStatus.get(\"dataDir\");\n      assertEquals(\"Data dir does not match param given in property.dataDir syntax\",\n          new File(dataDirStr).getAbsolutePath(), dataDir.getAbsolutePath());\n    }\n\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(collectionName);\n    deleteCollectionRequest.process(cloudClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e021e73178a0be1b0ff15a0894796c23f0556144","date":1493262514,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","sourceNew":"  @Test\n  public void testCreateCollectionWithPropertyParam() throws Exception {\n\n    String collectionName = \"solrj_test_core_props\";\n\n    Path tmpDir = createTempDir(\"testPropertyParamsForCreate\");\n    Path dataDir = tmpDir.resolve(\"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    Path ulogDir = tmpDir.resolve(\"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .withProperty(CoreAdminParams.DATA_DIR, dataDir.toString())\n        .withProperty(CoreAdminParams.ULOG_DIR, ulogDir.toString())\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = getCollectionState(collectionName);\n\n    Replica replica1 = testCollection.getReplica(\"core_node1\");\n    CoreStatus coreStatus = getCoreStatus(replica1);\n\n    assertEquals(Paths.get(coreStatus.getDataDirectory()).toString(), dataDir.toString());\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateCollectionWithPropertyParam() throws Exception {\n\n    String collectionName = \"solrj_test_core_props\";\n    \n    Path tmpDir = createTempDir(\"testPropertyParamsForCreate\");\n    Path dataDir = tmpDir.resolve(\"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    Path ulogDir = tmpDir.resolve(\"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .withProperty(CoreAdminParams.DATA_DIR, dataDir.toString())\n        .withProperty(CoreAdminParams.ULOG_DIR, ulogDir.toString())\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = getCollectionState(collectionName);\n\n    Replica replica1 = testCollection.getReplica(\"core_node1\");\n    CoreStatus coreStatus = getCoreStatus(replica1);\n\n    assertEquals(Paths.get(coreStatus.getDataDirectory()).toString(), dataDir.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","sourceNew":"  @Test\n  public void testCreateCollectionWithPropertyParam() throws Exception {\n\n    String collectionName = \"solrj_test_core_props\";\n\n    Path tmpDir = createTempDir(\"testPropertyParamsForCreate\");\n    Path dataDir = tmpDir.resolve(\"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    Path ulogDir = tmpDir.resolve(\"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .withProperty(CoreAdminParams.DATA_DIR, dataDir.toString())\n        .withProperty(CoreAdminParams.ULOG_DIR, ulogDir.toString())\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = getCollectionState(collectionName);\n\n    Replica replica1 = testCollection.getReplica(\"core_node1\");\n    CoreStatus coreStatus = getCoreStatus(replica1);\n\n    assertEquals(Paths.get(coreStatus.getDataDirectory()).toString(), dataDir.toString());\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateCollectionWithPropertyParam() throws Exception {\n\n    String collectionName = \"solrj_test_core_props\";\n    \n    Path tmpDir = createTempDir(\"testPropertyParamsForCreate\");\n    Path dataDir = tmpDir.resolve(\"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    Path ulogDir = tmpDir.resolve(\"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .withProperty(CoreAdminParams.DATA_DIR, dataDir.toString())\n        .withProperty(CoreAdminParams.ULOG_DIR, ulogDir.toString())\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = getCollectionState(collectionName);\n\n    Replica replica1 = testCollection.getReplica(\"core_node1\");\n    CoreStatus coreStatus = getCoreStatus(replica1);\n\n    assertEquals(Paths.get(coreStatus.getDataDirectory()).toString(), dataDir.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651c3ddf5bc1266d9de0a972ec05e59d77099a4c","date":1500969855,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","sourceNew":"  @Test\n  public void testCreateCollectionWithPropertyParam() throws Exception {\n\n    String collectionName = \"solrj_test_core_props\";\n\n    Path tmpDir = createTempDir(\"testPropertyParamsForCreate\");\n    Path dataDir = tmpDir.resolve(\"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    Path ulogDir = tmpDir.resolve(\"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .withProperty(CoreAdminParams.DATA_DIR, dataDir.toString())\n        .withProperty(CoreAdminParams.ULOG_DIR, ulogDir.toString())\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = getCollectionState(collectionName);\n\n    Replica replica1 = testCollection.getReplicas().iterator().next();\n    CoreStatus coreStatus = getCoreStatus(replica1);\n\n    assertEquals(Paths.get(coreStatus.getDataDirectory()).toString(), dataDir.toString());\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateCollectionWithPropertyParam() throws Exception {\n\n    String collectionName = \"solrj_test_core_props\";\n\n    Path tmpDir = createTempDir(\"testPropertyParamsForCreate\");\n    Path dataDir = tmpDir.resolve(\"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    Path ulogDir = tmpDir.resolve(\"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .withProperty(CoreAdminParams.DATA_DIR, dataDir.toString())\n        .withProperty(CoreAdminParams.ULOG_DIR, ulogDir.toString())\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = getCollectionState(collectionName);\n\n    Replica replica1 = testCollection.getReplica(\"core_node1\");\n    CoreStatus coreStatus = getCoreStatus(replica1);\n\n    assertEquals(Paths.get(coreStatus.getDataDirectory()).toString(), dataDir.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","sourceNew":"  @Test\n  public void testCreateCollectionWithPropertyParam() throws Exception {\n\n    String collectionName = \"solrj_test_core_props\";\n\n    Path tmpDir = createTempDir(\"testPropertyParamsForCreate\");\n    Path dataDir = tmpDir.resolve(\"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    Path ulogDir = tmpDir.resolve(\"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .withProperty(CoreAdminParams.DATA_DIR, dataDir.toString())\n        .withProperty(CoreAdminParams.ULOG_DIR, ulogDir.toString())\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = getCollectionState(collectionName);\n\n    Replica replica1 = testCollection.getReplicas().iterator().next();\n    CoreStatus coreStatus = getCoreStatus(replica1);\n\n    assertEquals(Paths.get(coreStatus.getDataDirectory()).toString(), dataDir.toString());\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateCollectionWithPropertyParam() throws Exception {\n\n    String collectionName = \"solrj_test_core_props\";\n\n    Path tmpDir = createTempDir(\"testPropertyParamsForCreate\");\n    Path dataDir = tmpDir.resolve(\"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    Path ulogDir = tmpDir.resolve(\"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .withProperty(CoreAdminParams.DATA_DIR, dataDir.toString())\n        .withProperty(CoreAdminParams.ULOG_DIR, ulogDir.toString())\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = getCollectionState(collectionName);\n\n    Replica replica1 = testCollection.getReplica(\"core_node1\");\n    CoreStatus coreStatus = getCoreStatus(replica1);\n\n    assertEquals(Paths.get(coreStatus.getDataDirectory()).toString(), dataDir.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","sourceNew":"  @Test\n  public void testCreateCollectionWithPropertyParam() throws Exception {\n\n    String collectionName = \"solrj_test_core_props\";\n\n    Path tmpDir = createTempDir(\"testPropertyParamsForCreate\");\n    Path dataDir = tmpDir.resolve(\"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    Path ulogDir = tmpDir.resolve(\"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .withProperty(CoreAdminParams.DATA_DIR, dataDir.toString())\n        .withProperty(CoreAdminParams.ULOG_DIR, ulogDir.toString())\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = getCollectionState(collectionName);\n\n    Replica replica1 = testCollection.getReplicas().iterator().next();\n    CoreStatus coreStatus = getCoreStatus(replica1);\n\n    assertEquals(Paths.get(coreStatus.getDataDirectory()).toString(), dataDir.toString());\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateCollectionWithPropertyParam() throws Exception {\n\n    String collectionName = \"solrj_test_core_props\";\n\n    Path tmpDir = createTempDir(\"testPropertyParamsForCreate\");\n    Path dataDir = tmpDir.resolve(\"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    Path ulogDir = tmpDir.resolve(\"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .withProperty(CoreAdminParams.DATA_DIR, dataDir.toString())\n        .withProperty(CoreAdminParams.ULOG_DIR, ulogDir.toString())\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = getCollectionState(collectionName);\n\n    Replica replica1 = testCollection.getReplica(\"core_node1\");\n    CoreStatus coreStatus = getCoreStatus(replica1);\n\n    assertEquals(Paths.get(coreStatus.getDataDirectory()).toString(), dataDir.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","sourceNew":"  @Test\n  public void testCreateCollectionWithPropertyParam() throws Exception {\n\n    String collectionName = \"solrj_test_core_props\";\n\n    Path tmpDir = createTempDir(\"testPropertyParamsForCreate\");\n    Path dataDir = tmpDir.resolve(\"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    Path ulogDir = tmpDir.resolve(\"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .withProperty(CoreAdminParams.DATA_DIR, dataDir.toString())\n        .withProperty(CoreAdminParams.ULOG_DIR, ulogDir.toString())\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    \n    cluster.waitForActiveCollection(collectionName, 1, 1);\n    \n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = getCollectionState(collectionName);\n\n    Replica replica1 = testCollection.getReplicas().iterator().next();\n    CoreStatus coreStatus = getCoreStatus(replica1);\n\n    assertEquals(Paths.get(coreStatus.getDataDirectory()).toString(), dataDir.toString());\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateCollectionWithPropertyParam() throws Exception {\n\n    String collectionName = \"solrj_test_core_props\";\n\n    Path tmpDir = createTempDir(\"testPropertyParamsForCreate\");\n    Path dataDir = tmpDir.resolve(\"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    Path ulogDir = tmpDir.resolve(\"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .withProperty(CoreAdminParams.DATA_DIR, dataDir.toString())\n        .withProperty(CoreAdminParams.ULOG_DIR, ulogDir.toString())\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = getCollectionState(collectionName);\n\n    Replica replica1 = testCollection.getReplicas().iterator().next();\n    CoreStatus coreStatus = getCoreStatus(replica1);\n\n    assertEquals(Paths.get(coreStatus.getDataDirectory()).toString(), dataDir.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373","date":1592489632,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateCollectionWithPropertyParam().mjava","sourceNew":"  @Test\n  public void testCreateCollectionWithPropertyParam() throws Exception {\n\n    String collectionName = \"solrj_test_core_props\";\n\n    Path tmpDir = createTempDir(\"testPropertyParamsForCreate\");\n    Path dataDir = tmpDir.resolve(\"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    Path ulogDir = tmpDir.resolve(\"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    cluster.getJettySolrRunners().forEach(j -> j.getCoreContainer().getAllowPaths().add(tmpDir));\n\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .withProperty(CoreAdminParams.DATA_DIR, dataDir.toString())\n        .withProperty(CoreAdminParams.ULOG_DIR, ulogDir.toString())\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    \n    cluster.waitForActiveCollection(collectionName, 1, 1);\n    \n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = getCollectionState(collectionName);\n\n    Replica replica1 = testCollection.getReplicas().iterator().next();\n    CoreStatus coreStatus = getCoreStatus(replica1);\n\n    assertEquals(Paths.get(coreStatus.getDataDirectory()).toString(), dataDir.toString());\n\n  }\n\n","sourceOld":"  @Test\n  public void testCreateCollectionWithPropertyParam() throws Exception {\n\n    String collectionName = \"solrj_test_core_props\";\n\n    Path tmpDir = createTempDir(\"testPropertyParamsForCreate\");\n    Path dataDir = tmpDir.resolve(\"dataDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n    Path ulogDir = tmpDir.resolve(\"ulogDir-\" + TestUtil.randomSimpleString(random(), 1, 5));\n\n    CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName, \"conf\", 1, 1)\n        .withProperty(CoreAdminParams.DATA_DIR, dataDir.toString())\n        .withProperty(CoreAdminParams.ULOG_DIR, ulogDir.toString())\n        .process(cluster.getSolrClient());\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    \n    cluster.waitForActiveCollection(collectionName, 1, 1);\n    \n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(1, coresStatus.size());\n\n    DocCollection testCollection = getCollectionState(collectionName);\n\n    Replica replica1 = testCollection.getReplicas().iterator().next();\n    CoreStatus coreStatus = getCoreStatus(replica1);\n\n    assertEquals(Paths.get(coreStatus.getDataDirectory()).toString(), dataDir.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["e021e73178a0be1b0ff15a0894796c23f0556144"],"922ddd897402a6df25c766ea8300443be5e82b3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a52341299179de5479672f7cf518bf4b173f34b3"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["922ddd897402a6df25c766ea8300443be5e82b3d"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["e9017cf144952056066919f1ebc7897ff9bd71b1","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","636a04bc82e662bf141a55f1d10f52e1c76c727b"],"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["636a04bc82e662bf141a55f1d10f52e1c76c727b","e021e73178a0be1b0ff15a0894796c23f0556144"],"a52341299179de5479672f7cf518bf4b173f34b3":["e021e73178a0be1b0ff15a0894796c23f0556144","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e021e73178a0be1b0ff15a0894796c23f0556144":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["922ddd897402a6df25c766ea8300443be5e82b3d","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c75c0fad5a9b6633e919ce2e9f96e1f0c496d373"]},"commit2Childs":{"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"922ddd897402a6df25c766ea8300443be5e82b3d":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["c75c0fad5a9b6633e919ce2e9f96e1f0c496d373"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"c75c0fad5a9b6633e919ce2e9f96e1f0c496d373":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"a52341299179de5479672f7cf518bf4b173f34b3":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["f03e4bed5023ec3ef93a771b8888cae991cf448d","e9017cf144952056066919f1ebc7897ff9bd71b1","e021e73178a0be1b0ff15a0894796c23f0556144"],"e021e73178a0be1b0ff15a0894796c23f0556144":["651c3ddf5bc1266d9de0a972ec05e59d77099a4c","e9017cf144952056066919f1ebc7897ff9bd71b1","a52341299179de5479672f7cf518bf4b173f34b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["922ddd897402a6df25c766ea8300443be5e82b3d","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["922ddd897402a6df25c766ea8300443be5e82b3d"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["f03e4bed5023ec3ef93a771b8888cae991cf448d","636a04bc82e662bf141a55f1d10f52e1c76c727b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}