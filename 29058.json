{"path":"solr/core/src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object o) {\n    if (o==this) return true;\n    if (!(o instanceof QueryResultKey)) return false;\n    QueryResultKey other = (QueryResultKey)o;\n\n    // fast check of the whole hash code... most hash tables will only use\n    // some of the bits, so if this is a hash collision, it's still likely\n    // that the full cached hash code will be different.\n    if (this.hc != other.hc) return false;\n\n    // check for the thing most likely to be different (and the fastest things)\n    // first.\n    if (this.sfields.length != other.sfields.length) return false;\n    if (!this.query.equals(other.query)) return false;\n    if (!isEqual(this.filters, other.filters)) return false;\n\n    for (int i=0; i<sfields.length; i++) {\n      SortField sf1 = this.sfields[i];\n      SortField sf2 = other.sfields[i];\n      if (!sf1.equals(sf2)) return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (o==this) return true;\n    if (!(o instanceof QueryResultKey)) return false;\n    QueryResultKey other = (QueryResultKey)o;\n\n    // fast check of the whole hash code... most hash tables will only use\n    // some of the bits, so if this is a hash collision, it's still likely\n    // that the full cached hash code will be different.\n    if (this.hc != other.hc) return false;\n\n    // check for the thing most likely to be different (and the fastest things)\n    // first.\n    if (this.sfields.length != other.sfields.length) return false;\n    if (!this.query.equals(other.query)) return false;\n    if (!isEqual(this.filters, other.filters)) return false;\n\n    for (int i=0; i<sfields.length; i++) {\n      SortField sf1 = this.sfields[i];\n      SortField sf2 = other.sfields[i];\n      if (!sf1.equals(sf2)) return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object o) {\n    if (o==this) return true;\n    if (!(o instanceof QueryResultKey)) return false;\n    QueryResultKey other = (QueryResultKey)o;\n\n    // fast check of the whole hash code... most hash tables will only use\n    // some of the bits, so if this is a hash collision, it's still likely\n    // that the full cached hash code will be different.\n    if (this.hc != other.hc) return false;\n\n    // check for the thing most likely to be different (and the fastest things)\n    // first.\n    if (this.sfields.length != other.sfields.length) return false;\n    if (!this.query.equals(other.query)) return false;\n    if (!isEqual(this.filters, other.filters)) return false;\n\n    for (int i=0; i<sfields.length; i++) {\n      SortField sf1 = this.sfields[i];\n      SortField sf2 = other.sfields[i];\n      if (!sf1.equals(sf2)) return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (o==this) return true;\n    if (!(o instanceof QueryResultKey)) return false;\n    QueryResultKey other = (QueryResultKey)o;\n\n    // fast check of the whole hash code... most hash tables will only use\n    // some of the bits, so if this is a hash collision, it's still likely\n    // that the full cached hash code will be different.\n    if (this.hc != other.hc) return false;\n\n    // check for the thing most likely to be different (and the fastest things)\n    // first.\n    if (this.sfields.length != other.sfields.length) return false;\n    if (!this.query.equals(other.query)) return false;\n    if (!isEqual(this.filters, other.filters)) return false;\n\n    for (int i=0; i<sfields.length; i++) {\n      SortField sf1 = this.sfields[i];\n      SortField sf2 = other.sfields[i];\n      if (!sf1.equals(sf2)) return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","pathOld":"solr/src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object o) {\n    if (o==this) return true;\n    if (!(o instanceof QueryResultKey)) return false;\n    QueryResultKey other = (QueryResultKey)o;\n\n    // fast check of the whole hash code... most hash tables will only use\n    // some of the bits, so if this is a hash collision, it's still likely\n    // that the full cached hash code will be different.\n    if (this.hc != other.hc) return false;\n\n    // check for the thing most likely to be different (and the fastest things)\n    // first.\n    if (this.sfields.length != other.sfields.length) return false;\n    if (!this.query.equals(other.query)) return false;\n    if (!isEqual(this.filters, other.filters)) return false;\n\n    for (int i=0; i<sfields.length; i++) {\n      SortField sf1 = this.sfields[i];\n      SortField sf2 = other.sfields[i];\n      if (!sf1.equals(sf2)) return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (o==this) return true;\n    if (!(o instanceof QueryResultKey)) return false;\n    QueryResultKey other = (QueryResultKey)o;\n\n    // fast check of the whole hash code... most hash tables will only use\n    // some of the bits, so if this is a hash collision, it's still likely\n    // that the full cached hash code will be different.\n    if (this.hc != other.hc) return false;\n\n    // check for the thing most likely to be different (and the fastest things)\n    // first.\n    if (this.sfields.length != other.sfields.length) return false;\n    if (!this.query.equals(other.query)) return false;\n    if (!isEqual(this.filters, other.filters)) return false;\n\n    for (int i=0; i<sfields.length; i++) {\n      SortField sf1 = this.sfields[i];\n      SortField sf2 = other.sfields[i];\n      if (!sf1.equals(sf2)) return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f","date":1389311746,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object o) {\n    if (o==this) return true;\n    if (!(o instanceof QueryResultKey)) return false;\n    QueryResultKey other = (QueryResultKey)o;\n\n    // fast check of the whole hash code... most hash tables will only use\n    // some of the bits, so if this is a hash collision, it's still likely\n    // that the full cached hash code will be different.\n    if (this.hc != other.hc) return false;\n\n    // check for the thing most likely to be different (and the fastest things)\n    // first.\n    if (this.sfields.length != other.sfields.length) return false;\n    if (!this.query.equals(other.query)) return false;\n    if (!unorderedCompare(this.filters, other.filters)) return false;\n\n    for (int i=0; i<sfields.length; i++) {\n      SortField sf1 = this.sfields[i];\n      SortField sf2 = other.sfields[i];\n      if (!sf1.equals(sf2)) return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (o==this) return true;\n    if (!(o instanceof QueryResultKey)) return false;\n    QueryResultKey other = (QueryResultKey)o;\n\n    // fast check of the whole hash code... most hash tables will only use\n    // some of the bits, so if this is a hash collision, it's still likely\n    // that the full cached hash code will be different.\n    if (this.hc != other.hc) return false;\n\n    // check for the thing most likely to be different (and the fastest things)\n    // first.\n    if (this.sfields.length != other.sfields.length) return false;\n    if (!this.query.equals(other.query)) return false;\n    if (!isEqual(this.filters, other.filters)) return false;\n\n    for (int i=0; i<sfields.length; i++) {\n      SortField sf1 = this.sfields[i];\n      SortField sf2 = other.sfields[i];\n      if (!sf1.equals(sf2)) return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object o) {\n    if (o==this) return true;\n    if (!(o instanceof QueryResultKey)) return false;\n    QueryResultKey other = (QueryResultKey)o;\n\n    // fast check of the whole hash code... most hash tables will only use\n    // some of the bits, so if this is a hash collision, it's still likely\n    // that the full cached hash code will be different.\n    if (this.hc != other.hc) return false;\n\n    // check for the thing most likely to be different (and the fastest things)\n    // first.\n    if (this.sfields.length != other.sfields.length) return false;\n    if (!this.query.equals(other.query)) return false;\n    if (!unorderedCompare(this.filters, other.filters)) return false;\n    if (this.minExactHits != other.minExactHits) return false;\n\n    for (int i=0; i<sfields.length; i++) {\n      SortField sf1 = this.sfields[i];\n      SortField sf2 = other.sfields[i];\n      if (!sf1.equals(sf2)) return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (o==this) return true;\n    if (!(o instanceof QueryResultKey)) return false;\n    QueryResultKey other = (QueryResultKey)o;\n\n    // fast check of the whole hash code... most hash tables will only use\n    // some of the bits, so if this is a hash collision, it's still likely\n    // that the full cached hash code will be different.\n    if (this.hc != other.hc) return false;\n\n    // check for the thing most likely to be different (and the fastest things)\n    // first.\n    if (this.sfields.length != other.sfields.length) return false;\n    if (!this.query.equals(other.query)) return false;\n    if (!unorderedCompare(this.filters, other.filters)) return false;\n\n    for (int i=0; i<sfields.length; i++) {\n      SortField sf1 = this.sfields[i];\n      SortField sf2 = other.sfields[i];\n      if (!sf1.equals(sf2)) return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b8ad6d99eb2424679c78255c369b8fac243e7dd","date":1590104557,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object o) {\n    if (o==this) return true;\n    if (!(o instanceof QueryResultKey)) return false;\n    QueryResultKey other = (QueryResultKey)o;\n\n    // fast check of the whole hash code... most hash tables will only use\n    // some of the bits, so if this is a hash collision, it's still likely\n    // that the full cached hash code will be different.\n    if (this.hc != other.hc) return false;\n\n    // check for the thing most likely to be different (and the fastest things)\n    // first.\n    if (this.sfields.length != other.sfields.length) return false;\n    if (!this.query.equals(other.query)) return false;\n    if (!unorderedCompare(this.filters, other.filters)) return false;\n    if (this.minExactCount != other.minExactCount) return false;\n\n    for (int i=0; i<sfields.length; i++) {\n      SortField sf1 = this.sfields[i];\n      SortField sf2 = other.sfields[i];\n      if (!sf1.equals(sf2)) return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (o==this) return true;\n    if (!(o instanceof QueryResultKey)) return false;\n    QueryResultKey other = (QueryResultKey)o;\n\n    // fast check of the whole hash code... most hash tables will only use\n    // some of the bits, so if this is a hash collision, it's still likely\n    // that the full cached hash code will be different.\n    if (this.hc != other.hc) return false;\n\n    // check for the thing most likely to be different (and the fastest things)\n    // first.\n    if (this.sfields.length != other.sfields.length) return false;\n    if (!this.query.equals(other.query)) return false;\n    if (!unorderedCompare(this.filters, other.filters)) return false;\n    if (this.minExactHits != other.minExactHits) return false;\n\n    for (int i=0; i<sfields.length; i++) {\n      SortField sf1 = this.sfields[i];\n      SortField sf2 = other.sfields[i];\n      if (!sf1.equals(sf2)) return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72afa881b0b5c361ebd0b6d37927fe072151fbe0","date":1590107364,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/QueryResultKey#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object o) {\n    if (o==this) return true;\n    if (!(o instanceof QueryResultKey)) return false;\n    QueryResultKey other = (QueryResultKey)o;\n\n    // fast check of the whole hash code... most hash tables will only use\n    // some of the bits, so if this is a hash collision, it's still likely\n    // that the full cached hash code will be different.\n    if (this.hc != other.hc) return false;\n\n    // check for the thing most likely to be different (and the fastest things)\n    // first.\n    if (this.sfields.length != other.sfields.length) return false;\n    if (!this.query.equals(other.query)) return false;\n    if (!unorderedCompare(this.filters, other.filters)) return false;\n    if (this.minExactCount != other.minExactCount) return false;\n\n    for (int i=0; i<sfields.length; i++) {\n      SortField sf1 = this.sfields[i];\n      SortField sf2 = other.sfields[i];\n      if (!sf1.equals(sf2)) return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (o==this) return true;\n    if (!(o instanceof QueryResultKey)) return false;\n    QueryResultKey other = (QueryResultKey)o;\n\n    // fast check of the whole hash code... most hash tables will only use\n    // some of the bits, so if this is a hash collision, it's still likely\n    // that the full cached hash code will be different.\n    if (this.hc != other.hc) return false;\n\n    // check for the thing most likely to be different (and the fastest things)\n    // first.\n    if (this.sfields.length != other.sfields.length) return false;\n    if (!this.query.equals(other.query)) return false;\n    if (!unorderedCompare(this.filters, other.filters)) return false;\n    if (this.minExactHits != other.minExactHits) return false;\n\n    for (int i=0; i<sfields.length; i++) {\n      SortField sf1 = this.sfields[i];\n      SortField sf2 = other.sfields[i];\n      if (!sf1.equals(sf2)) return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"72afa881b0b5c361ebd0b6d37927fe072151fbe0":["640ded7811e1b7d29236a5e2934ec3cd266a8199","6b8ad6d99eb2424679c78255c369b8fac243e7dd"],"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f":["c26f00b574427b55127e869b935845554afde1fa"],"6b8ad6d99eb2424679c78255c369b8fac243e7dd":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["72afa881b0b5c361ebd0b6d37927fe072151fbe0"]},"commit2Childs":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["72afa881b0b5c361ebd0b6d37927fe072151fbe0","6b8ad6d99eb2424679c78255c369b8fac243e7dd"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"72afa881b0b5c361ebd0b6d37927fe072151fbe0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"6b8ad6d99eb2424679c78255c369b8fac243e7dd":["72afa881b0b5c361ebd0b6d37927fe072151fbe0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}