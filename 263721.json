{"path":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriter.SortingTermsEnum#postings(PostingsEnum,int).mjava","commits":[{"id":"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63","date":1599130480,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriter.SortingTermsEnum#postings(PostingsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingTermsEnum#postings(PostingsEnum,int).mjava","sourceNew":"    @Override\n    public PostingsEnum postings( PostingsEnum reuse, final int flags) throws IOException {\n\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(inReuse, flags);\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","sourceOld":"    @Override\n    public PostingsEnum postings( PostingsEnum reuse, final int flags) throws IOException {\n\n      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {\n        final PostingsEnum inReuse;\n        final SortingPostingsEnum wrapReuse;\n        if (reuse != null && reuse instanceof SortingPostingsEnum) {\n          // if we're asked to reuse the given DocsEnum and it is Sorting, return\n          // the wrapped one, since some Codecs expect it.\n          wrapReuse = (SortingPostingsEnum) reuse;\n          inReuse = wrapReuse.getWrapped();\n        } else {\n          wrapReuse = null;\n          inReuse = reuse;\n        }\n\n        final PostingsEnum inDocsAndPositions = in.postings(inReuse, flags);\n        // we ignore the fact that offsets may be stored but not asked for,\n        // since this code is expected to be used during addIndexes which will\n        // ask for everything. if that assumption changes in the future, we can\n        // factor in whether 'flags' says offsets are not required.\n        final boolean storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n        return new SortingPostingsEnum(docMap.size(), wrapReuse, inDocsAndPositions, docMap, storeOffsets);\n      }\n\n      final PostingsEnum inReuse;\n      final SortingDocsEnum wrapReuse;\n      if (reuse != null && reuse instanceof SortingDocsEnum) {\n        // if we're asked to reuse the given DocsEnum and it is Sorting, return\n        // the wrapped one, since some Codecs expect it.\n        wrapReuse = (SortingDocsEnum) reuse;\n        inReuse = wrapReuse.getWrapped();\n      } else {\n        wrapReuse = null;\n        inReuse = reuse;\n      }\n\n      final PostingsEnum inDocs = in.postings(inReuse, flags);\n      final boolean withFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >=0 && PostingsEnum.featureRequested(flags, PostingsEnum.FREQS);\n      return new SortingDocsEnum(docMap.size(), wrapReuse, inDocs, withFreqs, docMap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63"],"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}