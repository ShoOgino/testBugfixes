{"path":"solr/core/src/java/org/apache/solr/core/SolrCores#getLoadedCoreNames().mjava","commits":[{"id":"9435d55e3ea95c5d94406d3affc36f9505b6a736","date":1491251232,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getLoadedCoreNames().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets the cores that are currently loaded, i.e. cores that have\n   * 1> loadOnStartup=true and are either not-transient or, if transient, have been loaded and have not been swapped out\n   * 2> loadOnStartup=false and have been loaded but either non-transient or have not been swapped out.\n   * \n   * Put another way, this will not return any names of cores that are lazily loaded but have not been called for yet\n   * or are transient and either not loaded or have been swapped out.\n   * \n   * @return List of currently loaded cores.\n   */\n  Set<String> getLoadedCoreNames() {\n    Set<String> set = new TreeSet<>();\n\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (container.getTransientCacheHandler() != null) {\n        set.addAll(container.getTransientCacheHandler().getLoadedCoreNames());\n      }\n    }\n    return set;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6a4b585aed7660a589375f6a09b90efd29c961","date":1491296430,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getLoadedCoreNames().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets the cores that are currently loaded, i.e. cores that have\n   * 1> loadOnStartup=true and are either not-transient or, if transient, have been loaded and have not been swapped out\n   * 2> loadOnStartup=false and have been loaded but either non-transient or have not been swapped out.\n   * \n   * Put another way, this will not return any names of cores that are lazily loaded but have not been called for yet\n   * or are transient and either not loaded or have been swapped out.\n   * \n   * @return List of currently loaded cores.\n   */\n  Set<String> getLoadedCoreNames() {\n    Set<String> set = new TreeSet<>();\n\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (container.getTransientCacheHandler() != null) {\n        set.addAll(container.getTransientCacheHandler().getLoadedCoreNames());\n      }\n    }\n    return set;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getLoadedCoreNames().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getLoadedCoreNames().mjava","sourceNew":"  /**\n   * Gets the cores that are currently loaded, i.e. cores that have\n   * 1> loadOnStartup=true and are either not-transient or, if transient, have been loaded and have not been aged out\n   * 2> loadOnStartup=false and have been loaded but either non-transient or have not been aged out.\n   * \n   * Put another way, this will not return any names of cores that are lazily loaded but have not been called for yet\n   * or are transient and either not loaded or have been swapped out.\n   * \n   * @return List of currently loaded cores.\n   */\n  Set<String> getLoadedCoreNames() {\n    Set<String> set = new TreeSet<>();\n\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (getTransientCacheHandler() != null) {\n        set.addAll(getTransientCacheHandler().getLoadedCoreNames());\n      }\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Gets the cores that are currently loaded, i.e. cores that have\n   * 1> loadOnStartup=true and are either not-transient or, if transient, have been loaded and have not been swapped out\n   * 2> loadOnStartup=false and have been loaded but either non-transient or have not been swapped out.\n   * \n   * Put another way, this will not return any names of cores that are lazily loaded but have not been called for yet\n   * or are transient and either not loaded or have been swapped out.\n   * \n   * @return List of currently loaded cores.\n   */\n  Set<String> getLoadedCoreNames() {\n    Set<String> set = new TreeSet<>();\n\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (container.getTransientCacheHandler() != null) {\n        set.addAll(container.getTransientCacheHandler().getLoadedCoreNames());\n      }\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getLoadedCoreNames().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getLoadedCoreNames().mjava","sourceNew":"  /**\n   * Gets the cores that are currently loaded, i.e. cores that have\n   * 1> loadOnStartup=true and are either not-transient or, if transient, have been loaded and have not been aged out\n   * 2> loadOnStartup=false and have been loaded but either non-transient or have not been aged out.\n   * \n   * Put another way, this will not return any names of cores that are lazily loaded but have not been called for yet\n   * or are transient and either not loaded or have been swapped out.\n   * \n   * @return List of currently loaded cores.\n   */\n  Set<String> getLoadedCoreNames() {\n    Set<String> set = new TreeSet<>();\n\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (getTransientCacheHandler() != null) {\n        set.addAll(getTransientCacheHandler().getLoadedCoreNames());\n      }\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Gets the cores that are currently loaded, i.e. cores that have\n   * 1> loadOnStartup=true and are either not-transient or, if transient, have been loaded and have not been swapped out\n   * 2> loadOnStartup=false and have been loaded but either non-transient or have not been swapped out.\n   * \n   * Put another way, this will not return any names of cores that are lazily loaded but have not been called for yet\n   * or are transient and either not loaded or have been swapped out.\n   * \n   * @return List of currently loaded cores.\n   */\n  Set<String> getLoadedCoreNames() {\n    Set<String> set = new TreeSet<>();\n\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (container.getTransientCacheHandler() != null) {\n        set.addAll(container.getTransientCacheHandler().getLoadedCoreNames());\n      }\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getLoadedCoreNames().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getLoadedCoreNames().mjava","sourceNew":"  /**\n   * Gets the cores that are currently loaded, i.e. cores that have\n   * 1> loadOnStartup=true and are either not-transient or, if transient, have been loaded and have not been aged out\n   * 2> loadOnStartup=false and have been loaded but either non-transient or have not been aged out.\n   * \n   * Put another way, this will not return any names of cores that are lazily loaded but have not been called for yet\n   * or are transient and either not loaded or have been swapped out.\n   * \n   * @return List of currently loaded cores.\n   */\n  Set<String> getLoadedCoreNames() {\n    Set<String> set = new TreeSet<>();\n\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (getTransientCacheHandler() != null) {\n        set.addAll(getTransientCacheHandler().getLoadedCoreNames());\n      }\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Gets the cores that are currently loaded, i.e. cores that have\n   * 1> loadOnStartup=true and are either not-transient or, if transient, have been loaded and have not been swapped out\n   * 2> loadOnStartup=false and have been loaded but either non-transient or have not been swapped out.\n   * \n   * Put another way, this will not return any names of cores that are lazily loaded but have not been called for yet\n   * or are transient and either not loaded or have been swapped out.\n   * \n   * @return List of currently loaded cores.\n   */\n  Set<String> getLoadedCoreNames() {\n    Set<String> set = new TreeSet<>();\n\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (container.getTransientCacheHandler() != null) {\n        set.addAll(container.getTransientCacheHandler().getLoadedCoreNames());\n      }\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","date":1571071547,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getLoadedCoreNames().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getLoadedCoreNames().mjava","sourceNew":"  /**\n   * Gets the cores that are currently loaded, i.e. cores that have\n   * 1> loadOnStartup=true and are either not-transient or, if transient, have been loaded and have not been aged out\n   * 2> loadOnStartup=false and have been loaded but either non-transient or have not been aged out.\n   * \n   * Put another way, this will not return any names of cores that are lazily loaded but have not been called for yet\n   * or are transient and either not loaded or have been swapped out.\n   * \n   * @return List of currently loaded cores.\n   */\n  Set<String> getLoadedCoreNames() {\n    Set<String> set;\n\n    synchronized (modifyLock) {\n      set = new TreeSet<>(cores.keySet());\n      if (getTransientCacheHandler() != null) {\n        set.addAll(getTransientCacheHandler().getLoadedCoreNames());\n      }\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Gets the cores that are currently loaded, i.e. cores that have\n   * 1> loadOnStartup=true and are either not-transient or, if transient, have been loaded and have not been aged out\n   * 2> loadOnStartup=false and have been loaded but either non-transient or have not been aged out.\n   * \n   * Put another way, this will not return any names of cores that are lazily loaded but have not been called for yet\n   * or are transient and either not loaded or have been swapped out.\n   * \n   * @return List of currently loaded cores.\n   */\n  Set<String> getLoadedCoreNames() {\n    Set<String> set = new TreeSet<>();\n\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (getTransientCacheHandler() != null) {\n        set.addAll(getTransientCacheHandler().getLoadedCoreNames());\n      }\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#getLoadedCoreNames().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#getLoadedCoreNames().mjava","sourceNew":"  /**\n   * Gets the cores that are currently loaded, i.e. cores that have\n   * 1> loadOnStartup=true and are either not-transient or, if transient, have been loaded and have not been aged out\n   * 2> loadOnStartup=false and have been loaded but either non-transient or have not been aged out.\n   * \n   * Put another way, this will not return any names of cores that are lazily loaded but have not been called for yet\n   * or are transient and either not loaded or have been swapped out.\n   * \n   * @return List of currently loaded cores.\n   */\n  Set<String> getLoadedCoreNames() {\n    Set<String> set;\n\n    synchronized (modifyLock) {\n      set = new TreeSet<>(cores.keySet());\n      if (getTransientCacheHandler() != null) {\n        set.addAll(getTransientCacheHandler().getLoadedCoreNames());\n      }\n    }\n    return set;\n  }\n\n","sourceOld":"  /**\n   * Gets the cores that are currently loaded, i.e. cores that have\n   * 1> loadOnStartup=true and are either not-transient or, if transient, have been loaded and have not been aged out\n   * 2> loadOnStartup=false and have been loaded but either non-transient or have not been aged out.\n   * \n   * Put another way, this will not return any names of cores that are lazily loaded but have not been called for yet\n   * or are transient and either not loaded or have been swapped out.\n   * \n   * @return List of currently loaded cores.\n   */\n  Set<String> getLoadedCoreNames() {\n    Set<String> set = new TreeSet<>();\n\n    synchronized (modifyLock) {\n      set.addAll(cores.keySet());\n      if (getTransientCacheHandler() != null) {\n        set.addAll(getTransientCacheHandler().getLoadedCoreNames());\n      }\n    }\n    return set;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["28288370235ed02234a64753cdbf0c6ec096304a"],"9435d55e3ea95c5d94406d3affc36f9505b6a736":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["9435d55e3ea95c5d94406d3affc36f9505b6a736"],"30c8e5574b55d57947e989443dfde611646530ee":["8b6a4b585aed7660a589375f6a09b90efd29c961","28288370235ed02234a64753cdbf0c6ec096304a"],"8b6a4b585aed7660a589375f6a09b90efd29c961":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["9435d55e3ea95c5d94406d3affc36f9505b6a736","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"],"b0b597c65628ca9e73913a07e81691f8229bae35":["28288370235ed02234a64753cdbf0c6ec096304a","23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"]},"commit2Childs":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"9435d55e3ea95c5d94406d3affc36f9505b6a736":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9435d55e3ea95c5d94406d3affc36f9505b6a736","8b6a4b585aed7660a589375f6a09b90efd29c961"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"8b6a4b585aed7660a589375f6a09b90efd29c961":["30c8e5574b55d57947e989443dfde611646530ee"],"28288370235ed02234a64753cdbf0c6ec096304a":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","30c8e5574b55d57947e989443dfde611646530ee","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}