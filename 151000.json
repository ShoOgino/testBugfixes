{"path":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrParams,List[ContentStream]).mjava","commits":[{"id":"d80013b5e260def972025c93a0b08524f9c38f49","date":1170102801,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrParams,List[ContentStream]).mjava","pathOld":"/dev/null","sourceNew":"  SolrQueryRequest buildRequestFrom( SolrParams params, List<ContentStream> streams ) throws Exception\n  {\n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( SolrParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( 400, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        final URLConnection conn = new URL(url).openConnection();\n        streams.add( new ContentStream() {\n          public String getContentType() { return conn.getContentType(); } \n          public String getName() { return url; }\n          public Long getSize() { return new Long( conn.getContentLength() ); }\n          public String getSourceInfo() {\n            return SolrParams.STREAM_URL;\n          }\n          public InputStream getStream() throws IOException {\n            return conn.getInputStream();\n          }\n        });\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( SolrParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        streams.add( new ContentStream() {\n          public String getContentType() { return null; } // Is there anything meaningful?\n          public String getName() { return null; }\n          public Long getSize() { return null; }\n          public String getSourceInfo() {\n            return SolrParams.STREAM_BODY;\n          }\n          public InputStream getStream() throws IOException {\n            return new ByteArrayInputStream( body.getBytes() );\n          }\n        });\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    \n    return q;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"440157898846af9a00b84382942df3f6e3c41a93","date":1175189311,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrParams,List[ContentStream]).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrParams,List[ContentStream]).mjava","sourceNew":"  SolrQueryRequest buildRequestFrom( SolrParams params, List<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( SolrParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( SolrParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( 400, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( SolrParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( 400, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( SolrParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","sourceOld":"  SolrQueryRequest buildRequestFrom( SolrParams params, List<ContentStream> streams ) throws Exception\n  {\n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( SolrParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( 400, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        final URLConnection conn = new URL(url).openConnection();\n        streams.add( new ContentStream() {\n          public String getContentType() { return conn.getContentType(); } \n          public String getName() { return url; }\n          public Long getSize() { return new Long( conn.getContentLength() ); }\n          public String getSourceInfo() {\n            return SolrParams.STREAM_URL;\n          }\n          public InputStream getStream() throws IOException {\n            return conn.getInputStream();\n          }\n        });\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( SolrParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        streams.add( new ContentStream() {\n          public String getContentType() { return null; } // Is there anything meaningful?\n          public String getName() { return null; }\n          public Long getSize() { return null; }\n          public String getSourceInfo() {\n            return SolrParams.STREAM_BODY;\n          }\n          public InputStream getStream() throws IOException {\n            return new ByteArrayInputStream( body.getBytes() );\n          }\n        });\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    \n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrParams,List[ContentStream]).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrParams,List[ContentStream]).mjava","sourceNew":"  SolrQueryRequest buildRequestFrom( SolrParams params, List<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( SolrParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( SolrParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( SolrParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( SolrParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","sourceOld":"  SolrQueryRequest buildRequestFrom( SolrParams params, List<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( SolrParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( SolrParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( 400, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( SolrParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( 400, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( SolrParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43a89c1b665c7572c870f5fd6951c7822f003763","date":1180565082,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrParams,List[ContentStream]).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrParams,List[ContentStream]).mjava","sourceNew":"  SolrQueryRequest buildRequestFrom( SolrParams params, List<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( SolrParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( SolrParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( SolrParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( SolrParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","sourceOld":"  SolrQueryRequest buildRequestFrom( SolrParams params, List<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( SolrParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( SolrParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( SolrParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( SolrParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e351baee89678b5f619d4e0c01cda80d09140566","date":1180839467,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrParams,Collection[ContentStream]).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#buildRequestFrom(SolrParams,List[ContentStream]).mjava","sourceNew":"  SolrQueryRequest buildRequestFrom( SolrParams params, Collection<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( SolrParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( SolrParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( SolrParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( SolrParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","sourceOld":"  SolrQueryRequest buildRequestFrom( SolrParams params, List<ContentStream> streams ) throws Exception\n  {\n    // The content type will be applied to all streaming content\n    String contentType = params.get( SolrParams.STREAM_CONTENTTYPE );\n      \n    // Handle anything with a remoteURL\n    String[] strs = params.getParams( SolrParams.STREAM_URL );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String url : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.URLStream( new URL(url) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Handle streaming files\n    strs = params.getParams( SolrParams.STREAM_FILE );\n    if( strs != null ) {\n      if( !enableRemoteStreams ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"Remote Streaming is disabled.\" );\n      }\n      for( final String file : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.FileStream( new File(file) );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    // Check for streams in the request parameters\n    strs = params.getParams( SolrParams.STREAM_BODY );\n    if( strs != null ) {\n      for( final String body : strs ) {\n        ContentStreamBase stream = new ContentStreamBase.StringStream( body );\n        if( contentType != null ) {\n          stream.setContentType( contentType );\n        }\n        streams.add( stream );\n      }\n    }\n    \n    SolrQueryRequestBase q = new SolrQueryRequestBase( core, params ) { };\n    if( streams != null && streams.size() > 0 ) {\n      q.setContentStreams( streams );\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"440157898846af9a00b84382942df3f6e3c41a93":["d80013b5e260def972025c93a0b08524f9c38f49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e351baee89678b5f619d4e0c01cda80d09140566":["43a89c1b665c7572c870f5fd6951c7822f003763"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"43a89c1b665c7572c870f5fd6951c7822f003763":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["440157898846af9a00b84382942df3f6e3c41a93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d80013b5e260def972025c93a0b08524f9c38f49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"440157898846af9a00b84382942df3f6e3c41a93":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e351baee89678b5f619d4e0c01cda80d09140566":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d80013b5e260def972025c93a0b08524f9c38f49"],"43a89c1b665c7572c870f5fd6951c7822f003763":["e351baee89678b5f619d4e0c01cda80d09140566"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["43a89c1b665c7572c870f5fd6951c7822f003763"],"d80013b5e260def972025c93a0b08524f9c38f49":["440157898846af9a00b84382942df3f6e3c41a93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e351baee89678b5f619d4e0c01cda80d09140566","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}