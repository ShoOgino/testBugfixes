{"path":"solr/core/src/test/org/apache/solr/cloud/FieldProps[DocValuesNotIndexedTest]#resetBase().mjava","commits":[{"id":"949bde462bfd00409852e22bedf12f7b18868909","date":1480227090,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FieldProps[DocValuesNotIndexedTest]#resetBase().mjava","pathOld":"/dev/null","sourceNew":"  void resetBase() {\n    if (name.startsWith(\"int\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextInt());\n    } else if (name.startsWith(\"long\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextLong());\n    } else if (name.startsWith(\"float\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextFloat());\n    } else if (name.startsWith(\"double\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextDouble());\n    } else if (name.startsWith(\"date\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextLong());\n    } else if (name.startsWith(\"bool\")) {\n      base = true; // Must start with a known value since bools only have a two values....\n    } else if (name.startsWith(\"string\")) {\n      base = \"base_string_\" + DocValuesNotIndexedTest.random().nextInt(1_000_000) + \"_\";\n    } else {\n      throw new RuntimeException(\"Should have found a prefix for the field before now!\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0e7ddedf744427dad36befd57a11188002f735f9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FieldProps[DocValuesNotIndexedTest]#resetBase().mjava","pathOld":"/dev/null","sourceNew":"  void resetBase() {\n    if (name.startsWith(\"int\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextInt());\n    } else if (name.startsWith(\"long\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextLong());\n    } else if (name.startsWith(\"float\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextFloat());\n    } else if (name.startsWith(\"double\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextDouble());\n    } else if (name.startsWith(\"date\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextLong());\n    } else if (name.startsWith(\"bool\")) {\n      base = true; // Must start with a known value since bools only have a two values....\n    } else if (name.startsWith(\"string\")) {\n      base = \"base_string_\" + DocValuesNotIndexedTest.random().nextInt(1_000_000) + \"_\";\n    } else {\n      throw new RuntimeException(\"Should have found a prefix for the field before now!\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"931cb705e783c7f07cdb110a0cb03bad79fe1b2b","date":1480386986,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FieldProps[DocValuesNotIndexedTest]#resetBase().mjava","pathOld":"/dev/null","sourceNew":"  void resetBase() {\n    if (name.startsWith(\"int\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextInt());\n    } else if (name.startsWith(\"long\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextLong());\n    } else if (name.startsWith(\"float\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextFloat());\n    } else if (name.startsWith(\"double\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextDouble());\n    } else if (name.startsWith(\"date\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextLong());\n    } else if (name.startsWith(\"bool\")) {\n      base = true; // Must start with a known value since bools only have a two values....\n    } else if (name.startsWith(\"string\")) {\n      base = \"base_string_\" + DocValuesNotIndexedTest.random().nextInt(1_000_000) + \"_\";\n    } else {\n      throw new RuntimeException(\"Should have found a prefix for the field before now!\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7ddedf744427dad36befd57a11188002f735f9","date":1481407395,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FieldProps[DocValuesNotIndexedTest]#resetBase().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FieldProps[DocValuesNotIndexedTest]#resetBase().mjava","sourceNew":"  void resetBase() {\n    if (name.startsWith(\"int\")) {\n      base = Math.abs(random().nextInt());\n    } else if (name.startsWith(\"long\")) {\n      base = Math.abs(random().nextLong());\n    } else if (name.startsWith(\"float\")) {\n      base = Math.abs(random().nextFloat());\n    } else if (name.startsWith(\"double\")) {\n      base = Math.abs(random().nextDouble());\n    } else if (name.startsWith(\"date\")) {\n      base = Math.abs(random().nextLong());\n    } else if (name.startsWith(\"bool\")) {\n      base = true; // Must start with a known value since bools only have a two values....\n    } else if (name.startsWith(\"string\")) {\n      base = \"base_string_\" + random().nextInt(1_000_000) + \"_\";\n    } else {\n      throw new RuntimeException(\"Should have found a prefix for the field before now!\");\n    }\n    counter = 0;\n  }\n\n","sourceOld":"  void resetBase() {\n    if (name.startsWith(\"int\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextInt());\n    } else if (name.startsWith(\"long\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextLong());\n    } else if (name.startsWith(\"float\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextFloat());\n    } else if (name.startsWith(\"double\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextDouble());\n    } else if (name.startsWith(\"date\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextLong());\n    } else if (name.startsWith(\"bool\")) {\n      base = true; // Must start with a known value since bools only have a two values....\n    } else if (name.startsWith(\"string\")) {\n      base = \"base_string_\" + DocValuesNotIndexedTest.random().nextInt(1_000_000) + \"_\";\n    } else {\n      throw new RuntimeException(\"Should have found a prefix for the field before now!\");\n    }\n  }\n\n","bugFix":["949bde462bfd00409852e22bedf12f7b18868909"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FieldProps[DocValuesNotIndexedTest]#resetBase().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FieldProps[DocValuesNotIndexedTest]#resetBase().mjava","sourceNew":"  void resetBase() {\n    if (name.startsWith(\"int\")) {\n      base = Math.abs(random().nextInt());\n    } else if (name.startsWith(\"long\")) {\n      base = Math.abs(random().nextLong());\n    } else if (name.startsWith(\"float\")) {\n      base = Math.abs(random().nextFloat());\n    } else if (name.startsWith(\"double\")) {\n      base = Math.abs(random().nextDouble());\n    } else if (name.startsWith(\"date\")) {\n      base = Math.abs(random().nextLong());\n    } else if (name.startsWith(\"bool\")) {\n      base = true; // Must start with a known value since bools only have a two values....\n    } else if (name.startsWith(\"string\")) {\n      base = \"base_string_\" + random().nextInt(1_000_000) + \"_\";\n    } else {\n      throw new RuntimeException(\"Should have found a prefix for the field before now!\");\n    }\n    counter = 0;\n  }\n\n","sourceOld":"  void resetBase() {\n    if (name.startsWith(\"int\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextInt());\n    } else if (name.startsWith(\"long\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextLong());\n    } else if (name.startsWith(\"float\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextFloat());\n    } else if (name.startsWith(\"double\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextDouble());\n    } else if (name.startsWith(\"date\")) {\n      base = Math.abs(DocValuesNotIndexedTest.random().nextLong());\n    } else if (name.startsWith(\"bool\")) {\n      base = true; // Must start with a known value since bools only have a two values....\n    } else if (name.startsWith(\"string\")) {\n      base = \"base_string_\" + DocValuesNotIndexedTest.random().nextInt(1_000_000) + \"_\";\n    } else {\n      throw new RuntimeException(\"Should have found a prefix for the field before now!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4","date":1550862271,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FieldProps[DocValuesNotIndexedTest]#resetBase().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FieldProps[DocValuesNotIndexedTest]#resetBase().mjava","sourceNew":"  void resetBase() {\n    if (name.startsWith(\"int\")) {\n      base = Math.abs(random().nextInt());\n    } else if (name.startsWith(\"long\")) {\n      base = Math.abs(random().nextLong());\n    } else if (name.startsWith(\"float\")) {\n      base = Math.abs(random().nextFloat());\n    } else if (name.startsWith(\"double\")) {\n      base = Math.abs(random().nextDouble());\n    } else if (name.startsWith(\"date\")) {\n      base = Math.abs(random().nextLong());\n    } else if (name.startsWith(\"bool\")) {\n      base = true; // Must start with a known value since bools only have a two values....\n    } else if (name.startsWith(\"string\") || name.startsWith(\"sortable\")) {\n      base = \"base_string_\" + random().nextInt(1_000_000) + \"_\";\n    } else {\n      throw new RuntimeException(\"Should have found a prefix for the field before now!\");\n    }\n    counter = 0;\n  }\n\n","sourceOld":"  void resetBase() {\n    if (name.startsWith(\"int\")) {\n      base = Math.abs(random().nextInt());\n    } else if (name.startsWith(\"long\")) {\n      base = Math.abs(random().nextLong());\n    } else if (name.startsWith(\"float\")) {\n      base = Math.abs(random().nextFloat());\n    } else if (name.startsWith(\"double\")) {\n      base = Math.abs(random().nextDouble());\n    } else if (name.startsWith(\"date\")) {\n      base = Math.abs(random().nextLong());\n    } else if (name.startsWith(\"bool\")) {\n      base = true; // Must start with a known value since bools only have a two values....\n    } else if (name.startsWith(\"string\")) {\n      base = \"base_string_\" + random().nextInt(1_000_000) + \"_\";\n    } else {\n      throw new RuntimeException(\"Should have found a prefix for the field before now!\");\n    }\n    counter = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","date":1551083645,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FieldProps[DocValuesNotIndexedTest]#resetBase().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FieldProps[DocValuesNotIndexedTest]#resetBase().mjava","sourceNew":"  void resetBase() {\n    if (name.startsWith(\"int\")) {\n      base = Math.abs(random().nextInt());\n    } else if (name.startsWith(\"long\")) {\n      base = Math.abs(random().nextLong());\n    } else if (name.startsWith(\"float\")) {\n      base = Math.abs(random().nextFloat());\n    } else if (name.startsWith(\"double\")) {\n      base = Math.abs(random().nextDouble());\n    } else if (name.startsWith(\"date\")) {\n      base = Math.abs(random().nextLong());\n    } else if (name.startsWith(\"bool\")) {\n      base = true; // Must start with a known value since bools only have a two values....\n    } else if (name.startsWith(\"string\") || name.startsWith(\"sortable\")) {\n      base = \"base_string_\" + random().nextInt(1_000_000) + \"_\";\n    } else {\n      throw new RuntimeException(\"Should have found a prefix for the field before now!\");\n    }\n    counter = 0;\n  }\n\n","sourceOld":"  void resetBase() {\n    if (name.startsWith(\"int\")) {\n      base = Math.abs(random().nextInt());\n    } else if (name.startsWith(\"long\")) {\n      base = Math.abs(random().nextLong());\n    } else if (name.startsWith(\"float\")) {\n      base = Math.abs(random().nextFloat());\n    } else if (name.startsWith(\"double\")) {\n      base = Math.abs(random().nextDouble());\n    } else if (name.startsWith(\"date\")) {\n      base = Math.abs(random().nextLong());\n    } else if (name.startsWith(\"bool\")) {\n      base = true; // Must start with a known value since bools only have a two values....\n    } else if (name.startsWith(\"string\")) {\n      base = \"base_string_\" + random().nextInt(1_000_000) + \"_\";\n    } else {\n      throw new RuntimeException(\"Should have found a prefix for the field before now!\");\n    }\n    counter = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c344401c324a00bc10cacfb90598738235a4decb","date":1556461561,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FieldProps[DocValuesNotIndexedTest]#resetBase().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FieldProps[DocValuesNotIndexedTest]#resetBase().mjava","sourceNew":"  // There's a vague chance that counts will roll over, so let's insure we have some room to grow in a positive direction\n  void resetBase() {\n    if (name.startsWith(\"int\")) {\n      base = Math.abs(random().nextInt()) / 2;\n    } else if (name.startsWith(\"long\")) {\n      base = Math.abs(random().nextLong()) / 2;\n    } else if (name.startsWith(\"float\")) {\n      base = Math.abs(random().nextFloat()) / 2;\n    } else if (name.startsWith(\"double\")) {\n      base = Math.abs(random().nextDouble()) / 2;\n    } else if (name.startsWith(\"date\")) {\n      base = Math.abs(random().nextLong()) / 2;\n    } else if (name.startsWith(\"bool\")) {\n      base = true; // Must start with a known value since bools only have a two values....\n    } else if (name.startsWith(\"string\") || name.startsWith(\"sortable\")) {\n      base = \"base_string_\" + random().nextInt(1_000_000) + \"_\";\n    } else {\n      throw new RuntimeException(\"Should have found a prefix for the field before now!\");\n    }\n    counter = 0;\n  }\n\n","sourceOld":"  void resetBase() {\n    if (name.startsWith(\"int\")) {\n      base = Math.abs(random().nextInt());\n    } else if (name.startsWith(\"long\")) {\n      base = Math.abs(random().nextLong());\n    } else if (name.startsWith(\"float\")) {\n      base = Math.abs(random().nextFloat());\n    } else if (name.startsWith(\"double\")) {\n      base = Math.abs(random().nextDouble());\n    } else if (name.startsWith(\"date\")) {\n      base = Math.abs(random().nextLong());\n    } else if (name.startsWith(\"bool\")) {\n      base = true; // Must start with a known value since bools only have a two values....\n    } else if (name.startsWith(\"string\") || name.startsWith(\"sortable\")) {\n      base = \"base_string_\" + random().nextInt(1_000_000) + \"_\";\n    } else {\n      throw new RuntimeException(\"Should have found a prefix for the field before now!\");\n    }\n    counter = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4":["0e7ddedf744427dad36befd57a11188002f735f9"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","949bde462bfd00409852e22bedf12f7b18868909"],"0e7ddedf744427dad36befd57a11188002f735f9":["931cb705e783c7f07cdb110a0cb03bad79fe1b2b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["727bb765ff2542275f6d31f67be18d7104bae148","0e7ddedf744427dad36befd57a11188002f735f9"],"931cb705e783c7f07cdb110a0cb03bad79fe1b2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","949bde462bfd00409852e22bedf12f7b18868909"],"c344401c324a00bc10cacfb90598738235a4decb":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"949bde462bfd00409852e22bedf12f7b18868909":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["0e7ddedf744427dad36befd57a11188002f735f9","ab3edb4bdcf1695b3c43f8584d7473f9516a34e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c344401c324a00bc10cacfb90598738235a4decb"]},"commit2Childs":{"ab3edb4bdcf1695b3c43f8584d7473f9516a34e4":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"727bb765ff2542275f6d31f67be18d7104bae148":["9856095f7afb5a607bf5e65077615ed91273508c"],"0e7ddedf744427dad36befd57a11188002f735f9":["ab3edb4bdcf1695b3c43f8584d7473f9516a34e4","9856095f7afb5a607bf5e65077615ed91273508c","0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["727bb765ff2542275f6d31f67be18d7104bae148","931cb705e783c7f07cdb110a0cb03bad79fe1b2b","949bde462bfd00409852e22bedf12f7b18868909"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"931cb705e783c7f07cdb110a0cb03bad79fe1b2b":["0e7ddedf744427dad36befd57a11188002f735f9"],"c344401c324a00bc10cacfb90598738235a4decb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"949bde462bfd00409852e22bedf12f7b18868909":["727bb765ff2542275f6d31f67be18d7104bae148","931cb705e783c7f07cdb110a0cb03bad79fe1b2b"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["c344401c324a00bc10cacfb90598738235a4decb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}