{"path":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#fillInterestingTermsFromMLTQuery(Query,List[InterestingTerm]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#fillInterestingTermsFromMLTQuery(Query,List[InterestingTerm]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#fillInterestingTermsFromMLTQuery(Query,List[InterestingTerm]).mjava","sourceNew":"    private void fillInterestingTermsFromMLTQuery( Query query, List<InterestingTerm> terms )\n    { \n      List clauses = ((BooleanQuery)query).clauses();\n      for( Object o : clauses ) {\n        TermQuery q = (TermQuery)((BooleanClause)o).getQuery();\n        InterestingTerm it = new InterestingTerm();\n        it.boost = q.getBoost();\n        it.term = q.getTerm();\n        terms.add( it );\n      } \n      // alternatively we could use\n      // mltquery.extractTerms( terms );\n    }\n\n","sourceOld":"    private void fillInterestingTermsFromMLTQuery( Query query, List<InterestingTerm> terms )\n    { \n      List clauses = ((BooleanQuery)query).clauses();\n      for( Object o : clauses ) {\n        TermQuery q = (TermQuery)((BooleanClause)o).getQuery();\n        InterestingTerm it = new InterestingTerm();\n        it.boost = q.getBoost();\n        it.term = q.getTerm();\n        terms.add( it );\n      } \n      // alternatively we could use\n      // mltquery.extractTerms( terms );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#fillInterestingTermsFromMLTQuery(Query,List[InterestingTerm]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#fillInterestingTermsFromMLTQuery(Query,List[InterestingTerm]).mjava","sourceNew":"    private void fillInterestingTermsFromMLTQuery( Query query, List<InterestingTerm> terms )\n    { \n      List clauses = ((BooleanQuery)query).clauses();\n      for( Object o : clauses ) {\n        TermQuery q = (TermQuery)((BooleanClause)o).getQuery();\n        InterestingTerm it = new InterestingTerm();\n        it.boost = q.getBoost();\n        it.term = q.getTerm();\n        terms.add( it );\n      } \n      // alternatively we could use\n      // mltquery.extractTerms( terms );\n    }\n\n","sourceOld":"    private void fillInterestingTermsFromMLTQuery( Query query, List<InterestingTerm> terms )\n    { \n      List clauses = ((BooleanQuery)query).clauses();\n      for( Object o : clauses ) {\n        TermQuery q = (TermQuery)((BooleanClause)o).getQuery();\n        InterestingTerm it = new InterestingTerm();\n        it.boost = q.getBoost();\n        it.term = q.getTerm();\n        terms.add( it );\n      } \n      // alternatively we could use\n      // mltquery.extractTerms( terms );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#fillInterestingTermsFromMLTQuery(Query,List[InterestingTerm]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#fillInterestingTermsFromMLTQuery(Query,List[InterestingTerm]).mjava","sourceNew":"    private void fillInterestingTermsFromMLTQuery( Query query, List<InterestingTerm> terms )\n    { \n      List clauses = ((BooleanQuery)query).clauses();\n      for( Object o : clauses ) {\n        TermQuery q = (TermQuery)((BooleanClause)o).getQuery();\n        InterestingTerm it = new InterestingTerm();\n        it.boost = q.getBoost();\n        it.term = q.getTerm();\n        terms.add( it );\n      } \n      // alternatively we could use\n      // mltquery.extractTerms( terms );\n    }\n\n","sourceOld":"    private void fillInterestingTermsFromMLTQuery( Query query, List<InterestingTerm> terms )\n    { \n      List clauses = ((BooleanQuery)query).clauses();\n      for( Object o : clauses ) {\n        TermQuery q = (TermQuery)((BooleanClause)o).getQuery();\n        InterestingTerm it = new InterestingTerm();\n        it.boost = q.getBoost();\n        it.term = q.getTerm();\n        terms.add( it );\n      } \n      // alternatively we could use\n      // mltquery.extractTerms( terms );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#fillInterestingTermsFromMLTQuery(Query,List[InterestingTerm]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#fillInterestingTermsFromMLTQuery(Query,List[InterestingTerm]).mjava","sourceNew":"    private void fillInterestingTermsFromMLTQuery( Query query, List<InterestingTerm> terms )\n    { \n      Collection<BooleanClause> clauses = ((BooleanQuery)query).clauses();\n      for( BooleanClause o : clauses ) {\n        TermQuery q = (TermQuery) o.getQuery();\n        InterestingTerm it = new InterestingTerm();\n        it.boost = q.getBoost();\n        it.term = q.getTerm();\n        terms.add( it );\n      } \n      // alternatively we could use\n      // mltquery.extractTerms( terms );\n    }\n\n","sourceOld":"    private void fillInterestingTermsFromMLTQuery( Query query, List<InterestingTerm> terms )\n    { \n      List clauses = ((BooleanQuery)query).clauses();\n      for( Object o : clauses ) {\n        TermQuery q = (TermQuery)((BooleanClause)o).getQuery();\n        InterestingTerm it = new InterestingTerm();\n        it.boost = q.getBoost();\n        it.term = q.getTerm();\n        terms.add( it );\n      } \n      // alternatively we could use\n      // mltquery.extractTerms( terms );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#fillInterestingTermsFromMLTQuery(Query,List[InterestingTerm]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#fillInterestingTermsFromMLTQuery(Query,List[InterestingTerm]).mjava","sourceNew":"    private void fillInterestingTermsFromMLTQuery( Query query, List<InterestingTerm> terms )\n    { \n      Collection<BooleanClause> clauses = ((BooleanQuery)query).clauses();\n      for( BooleanClause o : clauses ) {\n        Query q = o.getQuery();\n        float boost = 1f;\n        if (query instanceof BoostQuery) {\n          BoostQuery bq = (BoostQuery) q;\n          q = bq.getQuery();\n          boost = bq.getBoost();\n        }\n        InterestingTerm it = new InterestingTerm();\n        it.boost = boost;\n        it.term = ((TermQuery) q).getTerm();\n        terms.add( it );\n      } \n      // alternatively we could use\n      // mltquery.extractTerms( terms );\n    }\n\n","sourceOld":"    private void fillInterestingTermsFromMLTQuery( Query query, List<InterestingTerm> terms )\n    { \n      Collection<BooleanClause> clauses = ((BooleanQuery)query).clauses();\n      for( BooleanClause o : clauses ) {\n        TermQuery q = (TermQuery) o.getQuery();\n        InterestingTerm it = new InterestingTerm();\n        it.boost = q.getBoost();\n        it.term = q.getTerm();\n        terms.add( it );\n      } \n      // alternatively we could use\n      // mltquery.extractTerms( terms );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1","date":1451604685,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#fillInterestingTermsFromMLTQuery(Query,List[InterestingTerm]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/MoreLikeThisHandler.MoreLikeThisHelper#fillInterestingTermsFromMLTQuery(Query,List[InterestingTerm]).mjava","sourceNew":"    private void fillInterestingTermsFromMLTQuery( Query query, List<InterestingTerm> terms )\n    { \n      Collection<BooleanClause> clauses = ((BooleanQuery)query).clauses();\n      for( BooleanClause o : clauses ) {\n        Query q = o.getQuery();\n        float boost = 1f;\n        if (q instanceof BoostQuery) {\n          BoostQuery bq = (BoostQuery) q;\n          q = bq.getQuery();\n          boost = bq.getBoost();\n        }\n        InterestingTerm it = new InterestingTerm();\n        it.boost = boost;\n        it.term = ((TermQuery) q).getTerm();\n        terms.add( it );\n      } \n      // alternatively we could use\n      // mltquery.extractTerms( terms );\n    }\n\n","sourceOld":"    private void fillInterestingTermsFromMLTQuery( Query query, List<InterestingTerm> terms )\n    { \n      Collection<BooleanClause> clauses = ((BooleanQuery)query).clauses();\n      for( BooleanClause o : clauses ) {\n        Query q = o.getQuery();\n        float boost = 1f;\n        if (query instanceof BoostQuery) {\n          BoostQuery bq = (BoostQuery) q;\n          q = bq.getQuery();\n          boost = bq.getBoost();\n        }\n        InterestingTerm it = new InterestingTerm();\n        it.boost = boost;\n        it.term = ((TermQuery) q).getTerm();\n        terms.add( it );\n      } \n      // alternatively we could use\n      // mltquery.extractTerms( terms );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}