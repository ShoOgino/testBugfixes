{"path":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testBasics().mjava","commits":[{"id":"637a392e2e05d4e1179ac3c532cfeef0cde977ba","date":1376347977,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    List<Document> blocks = new ArrayList<Document>(Arrays.asList(\n        block(\"abcD\"),\n        block(\"efgH\"),\n        merge(block(\"ijkL\"), block(\"mnoP\")),\n        merge(block(\"qrsT\"), block(\"uvwX\")),\n        block(\"Y\"),\n        block(\"Z\")));\n    \n    Collections.shuffle(blocks);\n    \n    log.trace(\"{}\", blocks);\n    \n    for (Future<Void> f : exe.invokeAll(callables(blocks))) {\n      f.get(); // exceptions?\n    }\n    \n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    // final String resp = h.query(req(\"q\",\"*:*\", \"sort\",\"_docid_ asc\", \"rows\",\n    // \"10000\"));\n    // log.trace(resp);\n    int parentsNum = \"DHLPTXYZ\".length();\n    assertQ(req(parent + \":[* TO *]\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(child + \":[* TO *]\"), \"//*[@numFound='\"\n        + (('z' - 'a' + 1) - parentsNum) + \"']\");\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + ('z' - 'a' + 1) + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n    assertSingleParentOf(searcher, one(\"ijk\"), \"L\");\n    assertSingleParentOf(searcher, one(\"mno\"), \"P\");\n    assertSingleParentOf(searcher, one(\"qrs\"), \"T\");\n    assertSingleParentOf(searcher, one(\"uvw\"), \"X\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["103857ec20f79f31c7a00310a91ed001b9a6ef17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    List<Document> blocks = new ArrayList<Document>(Arrays.asList(\n        block(\"abcD\"),\n        block(\"efgH\"),\n        merge(block(\"ijkL\"), block(\"mnoP\")),\n        merge(block(\"qrsT\"), block(\"uvwX\")),\n        block(\"Y\"),\n        block(\"Z\")));\n    \n    Collections.shuffle(blocks);\n    \n    log.trace(\"{}\", blocks);\n    \n    for (Future<Void> f : exe.invokeAll(callables(blocks))) {\n      f.get(); // exceptions?\n    }\n    \n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    // final String resp = h.query(req(\"q\",\"*:*\", \"sort\",\"_docid_ asc\", \"rows\",\n    // \"10000\"));\n    // log.trace(resp);\n    int parentsNum = \"DHLPTXYZ\".length();\n    assertQ(req(parent + \":[* TO *]\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(child + \":[* TO *]\"), \"//*[@numFound='\"\n        + (('z' - 'a' + 1) - parentsNum) + \"']\");\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + ('z' - 'a' + 1) + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n    assertSingleParentOf(searcher, one(\"ijk\"), \"L\");\n    assertSingleParentOf(searcher, one(\"mno\"), \"P\");\n    assertSingleParentOf(searcher, one(\"qrs\"), \"T\");\n    assertSingleParentOf(searcher, one(\"uvw\"), \"X\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49368dc30c6d7f57e2547707f2a26a2e790dc587","date":1378306664,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    List<Document> blocks = new ArrayList<Document>(Arrays.asList(\n        block(\"abcD\"),\n        block(\"efgH\"),\n        merge(block(\"ijkL\"), block(\"mnoP\")),\n        merge(block(\"qrsT\"), block(\"uvwX\")),\n        block(\"Y\"),\n        block(\"Z\")));\n    \n    Collections.shuffle(blocks);\n    \n    log.trace(\"{}\", blocks);\n    \n    for (Future<Void> f : exe.invokeAll(callables(blocks))) {\n      f.get(); // exceptions?\n    }\n    \n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    // final String resp = h.query(req(\"q\",\"*:*\", \"sort\",\"_docid_ asc\", \"rows\",\n    // \"10000\"));\n    // log.trace(resp);\n    int parentsNum = \"DHLPTXYZ\".length();\n    assertQ(req(parent + \":[* TO *]\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(child + \":[* TO *]\"), \"//*[@numFound='\"\n        + (('z' - 'a' + 1) - parentsNum) + \"']\");\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + ('z' - 'a' + 1) + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n    assertSingleParentOf(searcher, one(\"ijk\"), \"L\");\n    assertSingleParentOf(searcher, one(\"mno\"), \"P\");\n    assertSingleParentOf(searcher, one(\"qrs\"), \"T\");\n    assertSingleParentOf(searcher, one(\"uvw\"), \"X\");\n   \n    assertQ(req(\"q\",child+\":(a b c)\", \"sort\",\"_docid_ asc\"),\n        \"//*[@numFound='3']\", // assert physical order of children\n      \"//doc[1]/arr[@name='child_s']/str[text()='a']\",\n      \"//doc[2]/arr[@name='child_s']/str[text()='b']\",\n      \"//doc[3]/arr[@name='child_s']/str[text()='c']\");\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    List<Document> blocks = new ArrayList<Document>(Arrays.asList(\n        block(\"abcD\"),\n        block(\"efgH\"),\n        merge(block(\"ijkL\"), block(\"mnoP\")),\n        merge(block(\"qrsT\"), block(\"uvwX\")),\n        block(\"Y\"),\n        block(\"Z\")));\n    \n    Collections.shuffle(blocks);\n    \n    log.trace(\"{}\", blocks);\n    \n    for (Future<Void> f : exe.invokeAll(callables(blocks))) {\n      f.get(); // exceptions?\n    }\n    \n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    // final String resp = h.query(req(\"q\",\"*:*\", \"sort\",\"_docid_ asc\", \"rows\",\n    // \"10000\"));\n    // log.trace(resp);\n    int parentsNum = \"DHLPTXYZ\".length();\n    assertQ(req(parent + \":[* TO *]\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(child + \":[* TO *]\"), \"//*[@numFound='\"\n        + (('z' - 'a' + 1) - parentsNum) + \"']\");\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + ('z' - 'a' + 1) + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n    assertSingleParentOf(searcher, one(\"ijk\"), \"L\");\n    assertSingleParentOf(searcher, one(\"mno\"), \"P\");\n    assertSingleParentOf(searcher, one(\"qrs\"), \"T\");\n    assertSingleParentOf(searcher, one(\"uvw\"), \"X\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    List<Document> blocks = new ArrayList<>(Arrays.asList(\n        block(\"abcD\"),\n        block(\"efgH\"),\n        merge(block(\"ijkL\"), block(\"mnoP\")),\n        merge(block(\"qrsT\"), block(\"uvwX\")),\n        block(\"Y\"),\n        block(\"Z\")));\n    \n    Collections.shuffle(blocks);\n    \n    log.trace(\"{}\", blocks);\n    \n    for (Future<Void> f : exe.invokeAll(callables(blocks))) {\n      f.get(); // exceptions?\n    }\n    \n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    // final String resp = h.query(req(\"q\",\"*:*\", \"sort\",\"_docid_ asc\", \"rows\",\n    // \"10000\"));\n    // log.trace(resp);\n    int parentsNum = \"DHLPTXYZ\".length();\n    assertQ(req(parent + \":[* TO *]\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(child + \":[* TO *]\"), \"//*[@numFound='\"\n        + (('z' - 'a' + 1) - parentsNum) + \"']\");\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + ('z' - 'a' + 1) + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n    assertSingleParentOf(searcher, one(\"ijk\"), \"L\");\n    assertSingleParentOf(searcher, one(\"mno\"), \"P\");\n    assertSingleParentOf(searcher, one(\"qrs\"), \"T\");\n    assertSingleParentOf(searcher, one(\"uvw\"), \"X\");\n   \n    assertQ(req(\"q\",child+\":(a b c)\", \"sort\",\"_docid_ asc\"),\n        \"//*[@numFound='3']\", // assert physical order of children\n      \"//doc[1]/arr[@name='child_s']/str[text()='a']\",\n      \"//doc[2]/arr[@name='child_s']/str[text()='b']\",\n      \"//doc[3]/arr[@name='child_s']/str[text()='c']\");\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    List<Document> blocks = new ArrayList<Document>(Arrays.asList(\n        block(\"abcD\"),\n        block(\"efgH\"),\n        merge(block(\"ijkL\"), block(\"mnoP\")),\n        merge(block(\"qrsT\"), block(\"uvwX\")),\n        block(\"Y\"),\n        block(\"Z\")));\n    \n    Collections.shuffle(blocks);\n    \n    log.trace(\"{}\", blocks);\n    \n    for (Future<Void> f : exe.invokeAll(callables(blocks))) {\n      f.get(); // exceptions?\n    }\n    \n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    // final String resp = h.query(req(\"q\",\"*:*\", \"sort\",\"_docid_ asc\", \"rows\",\n    // \"10000\"));\n    // log.trace(resp);\n    int parentsNum = \"DHLPTXYZ\".length();\n    assertQ(req(parent + \":[* TO *]\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(child + \":[* TO *]\"), \"//*[@numFound='\"\n        + (('z' - 'a' + 1) - parentsNum) + \"']\");\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + ('z' - 'a' + 1) + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n    assertSingleParentOf(searcher, one(\"ijk\"), \"L\");\n    assertSingleParentOf(searcher, one(\"mno\"), \"P\");\n    assertSingleParentOf(searcher, one(\"qrs\"), \"T\");\n    assertSingleParentOf(searcher, one(\"uvw\"), \"X\");\n   \n    assertQ(req(\"q\",child+\":(a b c)\", \"sort\",\"_docid_ asc\"),\n        \"//*[@numFound='3']\", // assert physical order of children\n      \"//doc[1]/arr[@name='child_s']/str[text()='a']\",\n      \"//doc[2]/arr[@name='child_s']/str[text()='b']\",\n      \"//doc[3]/arr[@name='child_s']/str[text()='c']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"103857ec20f79f31c7a00310a91ed001b9a6ef17","date":1412698959,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    List<Document> blocks = new ArrayList<>(Arrays.asList(\n        block(\"abcD\"),\n        block(\"efgH\"),\n        merge(block(\"ijkL\"), block(\"mnoP\")),\n        merge(block(\"qrsT\"), block(\"uvwX\")),\n        block(\"Y\"),\n        block(\"Z\")));\n    \n    Collections.shuffle(blocks, random());\n    \n    log.trace(\"{}\", blocks);\n    \n    for (Future<Void> f : exe.invokeAll(callables(blocks))) {\n      f.get(); // exceptions?\n    }\n    \n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    // final String resp = h.query(req(\"q\",\"*:*\", \"sort\",\"_docid_ asc\", \"rows\",\n    // \"10000\"));\n    // log.trace(resp);\n    int parentsNum = \"DHLPTXYZ\".length();\n    assertQ(req(parent + \":[* TO *]\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(child + \":[* TO *]\"), \"//*[@numFound='\"\n        + (('z' - 'a' + 1) - parentsNum) + \"']\");\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + ('z' - 'a' + 1) + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n    assertSingleParentOf(searcher, one(\"ijk\"), \"L\");\n    assertSingleParentOf(searcher, one(\"mno\"), \"P\");\n    assertSingleParentOf(searcher, one(\"qrs\"), \"T\");\n    assertSingleParentOf(searcher, one(\"uvw\"), \"X\");\n   \n    assertQ(req(\"q\",child+\":(a b c)\", \"sort\",\"_docid_ asc\"),\n        \"//*[@numFound='3']\", // assert physical order of children\n      \"//doc[1]/arr[@name='child_s']/str[text()='a']\",\n      \"//doc[2]/arr[@name='child_s']/str[text()='b']\",\n      \"//doc[3]/arr[@name='child_s']/str[text()='c']\");\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    List<Document> blocks = new ArrayList<>(Arrays.asList(\n        block(\"abcD\"),\n        block(\"efgH\"),\n        merge(block(\"ijkL\"), block(\"mnoP\")),\n        merge(block(\"qrsT\"), block(\"uvwX\")),\n        block(\"Y\"),\n        block(\"Z\")));\n    \n    Collections.shuffle(blocks);\n    \n    log.trace(\"{}\", blocks);\n    \n    for (Future<Void> f : exe.invokeAll(callables(blocks))) {\n      f.get(); // exceptions?\n    }\n    \n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    // final String resp = h.query(req(\"q\",\"*:*\", \"sort\",\"_docid_ asc\", \"rows\",\n    // \"10000\"));\n    // log.trace(resp);\n    int parentsNum = \"DHLPTXYZ\".length();\n    assertQ(req(parent + \":[* TO *]\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(child + \":[* TO *]\"), \"//*[@numFound='\"\n        + (('z' - 'a' + 1) - parentsNum) + \"']\");\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + ('z' - 'a' + 1) + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n    assertSingleParentOf(searcher, one(\"ijk\"), \"L\");\n    assertSingleParentOf(searcher, one(\"mno\"), \"P\");\n    assertSingleParentOf(searcher, one(\"qrs\"), \"T\");\n    assertSingleParentOf(searcher, one(\"uvw\"), \"X\");\n   \n    assertQ(req(\"q\",child+\":(a b c)\", \"sort\",\"_docid_ asc\"),\n        \"//*[@numFound='3']\", // assert physical order of children\n      \"//doc[1]/arr[@name='child_s']/str[text()='a']\",\n      \"//doc[2]/arr[@name='child_s']/str[text()='b']\",\n      \"//doc[3]/arr[@name='child_s']/str[text()='c']\");\n  }\n\n","bugFix":["637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    List<Document> blocks = new ArrayList<>(Arrays.asList(\n        block(\"abcD\"),\n        block(\"efgH\"),\n        merge(block(\"ijkL\"), block(\"mnoP\")),\n        merge(block(\"qrsT\"), block(\"uvwX\")),\n        block(\"Y\"),\n        block(\"Z\")));\n    \n    Collections.shuffle(blocks, random());\n    \n    log.trace(\"{}\", blocks);\n    \n    for (Future<Void> f : exe.invokeAll(callables(blocks))) {\n      f.get(); // exceptions?\n    }\n    \n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    // final String resp = h.query(req(\"q\",\"*:*\", \"sort\",\"_docid_ asc\", \"rows\",\n    // \"10000\"));\n    // log.trace(resp);\n    int parentsNum = \"DHLPTXYZ\".length();\n    assertQ(req(parent + \":[* TO *]\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(child + \":[* TO *]\"), \"//*[@numFound='\"\n        + (('z' - 'a' + 1) - parentsNum) + \"']\");\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + ('z' - 'a' + 1) + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n    assertSingleParentOf(searcher, one(\"ijk\"), \"L\");\n    assertSingleParentOf(searcher, one(\"mno\"), \"P\");\n    assertSingleParentOf(searcher, one(\"qrs\"), \"T\");\n    assertSingleParentOf(searcher, one(\"uvw\"), \"X\");\n   \n    assertQ(req(\"q\",child+\":(a b c)\", \"sort\",\"_docid_ asc\"),\n        \"//*[@numFound='3']\", // assert physical order of children\n      \"//doc[1]/arr[@name='child_s']/str[text()='a']\",\n      \"//doc[2]/arr[@name='child_s']/str[text()='b']\",\n      \"//doc[3]/arr[@name='child_s']/str[text()='c']\");\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    List<Document> blocks = new ArrayList<>(Arrays.asList(\n        block(\"abcD\"),\n        block(\"efgH\"),\n        merge(block(\"ijkL\"), block(\"mnoP\")),\n        merge(block(\"qrsT\"), block(\"uvwX\")),\n        block(\"Y\"),\n        block(\"Z\")));\n    \n    Collections.shuffle(blocks);\n    \n    log.trace(\"{}\", blocks);\n    \n    for (Future<Void> f : exe.invokeAll(callables(blocks))) {\n      f.get(); // exceptions?\n    }\n    \n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    // final String resp = h.query(req(\"q\",\"*:*\", \"sort\",\"_docid_ asc\", \"rows\",\n    // \"10000\"));\n    // log.trace(resp);\n    int parentsNum = \"DHLPTXYZ\".length();\n    assertQ(req(parent + \":[* TO *]\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(child + \":[* TO *]\"), \"//*[@numFound='\"\n        + (('z' - 'a' + 1) - parentsNum) + \"']\");\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + ('z' - 'a' + 1) + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n    assertSingleParentOf(searcher, one(\"ijk\"), \"L\");\n    assertSingleParentOf(searcher, one(\"mno\"), \"P\");\n    assertSingleParentOf(searcher, one(\"qrs\"), \"T\");\n    assertSingleParentOf(searcher, one(\"uvw\"), \"X\");\n   \n    assertQ(req(\"q\",child+\":(a b c)\", \"sort\",\"_docid_ asc\"),\n        \"//*[@numFound='3']\", // assert physical order of children\n      \"//doc[1]/arr[@name='child_s']/str[text()='a']\",\n      \"//doc[2]/arr[@name='child_s']/str[text()='b']\",\n      \"//doc[3]/arr[@name='child_s']/str[text()='c']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1a5eff758fefcac883606f32579ae501a14119","date":1553516101,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    List<Document> blocks = new ArrayList<>(Arrays.asList(\n        block(\"abcD\"),\n        block(\"efgH\"),\n        merge(block(\"ijkL\"), block(\"mnoP\")),\n        merge(block(\"qrsT\"), block(\"uvwX\")),\n        block(\"Y\"),\n        block(\"Z\")));\n\n    Collections.shuffle(blocks, random());\n\n    log.trace(\"{}\", blocks);\n\n    for (Future<Void> f : exe.invokeAll(callables(blocks))) {\n      f.get(); // exceptions?\n    }\n\n    assertU(commit());\n\n    final SolrIndexSearcher searcher = getSearcher();\n    // final String resp = h.query(req(\"q\",\"*:*\", \"sort\",\"_docid_ asc\", \"rows\",\n    // \"10000\"));\n    // log.trace(resp);\n    int parentsNum = \"DHLPTXYZ\".length();\n    assertQ(req(parent + \":[* TO *]\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(child + \":[* TO *]\"), \"//*[@numFound='\"\n        + (('z' - 'a' + 1) - parentsNum) + \"']\");\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + ('z' - 'a' + 1) + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n    assertSingleParentOf(searcher, one(\"ijk\"), \"L\");\n    assertSingleParentOf(searcher, one(\"mno\"), \"P\");\n    assertSingleParentOf(searcher, one(\"qrs\"), \"T\");\n    assertSingleParentOf(searcher, one(\"uvw\"), \"X\");\n\n    assertQ(req(\"q\",child+\":(a b c)\", \"sort\",\"_docid_ asc\"),\n        \"//*[@numFound='3']\", // assert physical order of children\n      \"//doc[1]/arr[@name='child_s']/str[text()='a']\",\n      \"//doc[2]/arr[@name='child_s']/str[text()='b']\",\n      \"//doc[3]/arr[@name='child_s']/str[text()='c']\");\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    List<Document> blocks = new ArrayList<>(Arrays.asList(\n        block(\"abcD\"),\n        block(\"efgH\"),\n        merge(block(\"ijkL\"), block(\"mnoP\")),\n        merge(block(\"qrsT\"), block(\"uvwX\")),\n        block(\"Y\"),\n        block(\"Z\")));\n    \n    Collections.shuffle(blocks, random());\n    \n    log.trace(\"{}\", blocks);\n    \n    for (Future<Void> f : exe.invokeAll(callables(blocks))) {\n      f.get(); // exceptions?\n    }\n    \n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    // final String resp = h.query(req(\"q\",\"*:*\", \"sort\",\"_docid_ asc\", \"rows\",\n    // \"10000\"));\n    // log.trace(resp);\n    int parentsNum = \"DHLPTXYZ\".length();\n    assertQ(req(parent + \":[* TO *]\"), \"//*[@numFound='\" + parentsNum + \"']\");\n    assertQ(req(child + \":[* TO *]\"), \"//*[@numFound='\"\n        + (('z' - 'a' + 1) - parentsNum) + \"']\");\n    assertQ(req(\"*:*\"), \"//*[@numFound='\" + ('z' - 'a' + 1) + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n    assertSingleParentOf(searcher, one(\"ijk\"), \"L\");\n    assertSingleParentOf(searcher, one(\"mno\"), \"P\");\n    assertSingleParentOf(searcher, one(\"qrs\"), \"T\");\n    assertSingleParentOf(searcher, one(\"uvw\"), \"X\");\n   \n    assertQ(req(\"q\",child+\":(a b c)\", \"sort\",\"_docid_ asc\"),\n        \"//*[@numFound='3']\", // assert physical order of children\n      \"//doc[1]/arr[@name='child_s']/str[text()='a']\",\n      \"//doc[2]/arr[@name='child_s']/str[text()='b']\",\n      \"//doc[3]/arr[@name='child_s']/str[text()='c']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["49368dc30c6d7f57e2547707f2a26a2e790dc587"],"55980207f1977bd1463465de1659b821347e2fa8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","103857ec20f79f31c7a00310a91ed001b9a6ef17"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb1a5eff758fefcac883606f32579ae501a14119":["103857ec20f79f31c7a00310a91ed001b9a6ef17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"103857ec20f79f31c7a00310a91ed001b9a6ef17":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"49368dc30c6d7f57e2547707f2a26a2e790dc587":["637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb1a5eff758fefcac883606f32579ae501a14119"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["55980207f1977bd1463465de1659b821347e2fa8","103857ec20f79f31c7a00310a91ed001b9a6ef17"],"55980207f1977bd1463465de1659b821347e2fa8":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","49368dc30c6d7f57e2547707f2a26a2e790dc587"],"bb1a5eff758fefcac883606f32579ae501a14119":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"103857ec20f79f31c7a00310a91ed001b9a6ef17":["55980207f1977bd1463465de1659b821347e2fa8","bb1a5eff758fefcac883606f32579ae501a14119"],"49368dc30c6d7f57e2547707f2a26a2e790dc587":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}