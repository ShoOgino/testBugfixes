{"path":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testZeroTries().mjava","commits":[{"id":"8df1678a43c7068815b38e922e40d8e2260ac2e5","date":1404915728,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testZeroTries().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testZeroTries() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    List<String> collations = suggestions.getAll(\"collation\");\n    assertTrue(collations.size() == 2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"343d2d9477b299075fa3a19a46e654b6c3bf552b","date":1407872410,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testZeroTries().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testZeroTries().mjava","sourceNew":"  @Test\n  public void testZeroTries() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 2);\n  }\n\n","sourceOld":"  @Test\n  public void testZeroTries() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n    List<String> collations = suggestions.getAll(\"collation\");\n    assertTrue(collations.size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd75942508378ccc92c3a26f71db6cba9f25784","date":1450708761,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testZeroTries().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testZeroTries().mjava","sourceNew":"  @Test\n  public void testZeroTries() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 2);\n  }\n\n","sourceOld":"  @Test\n  public void testZeroTries() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testZeroTries().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testZeroTries().mjava","sourceNew":"  @Test\n  public void testZeroTries() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 2);\n  }\n\n","sourceOld":"  @Test\n  public void testZeroTries() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testZeroTries().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testZeroTries().mjava","sourceNew":"  @Test\n  public void testZeroTries() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 2);\n  }\n\n","sourceOld":"  @Test\n  public void testZeroTries() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testZeroTries().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testZeroTries().mjava","sourceNew":"  @Test\n  public void testZeroTries() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 2);\n  }\n\n","sourceOld":"  @Test\n  public void testZeroTries() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testZeroTries().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testZeroTries().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testZeroTries() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 2);\n  }\n\n","sourceOld":"  @Test\n  public void testZeroTries() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"0\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["28288370235ed02234a64753cdbf0c6ec096304a"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["8df1678a43c7068815b38e922e40d8e2260ac2e5"],"8df1678a43c7068815b38e922e40d8e2260ac2e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["ecd75942508378ccc92c3a26f71db6cba9f25784","28288370235ed02234a64753cdbf0c6ec096304a"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"28288370235ed02234a64753cdbf0c6ec096304a":["ecd75942508378ccc92c3a26f71db6cba9f25784","5ff704ef91e9ae30ca59babb23ece85720701b60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["ecd75942508378ccc92c3a26f71db6cba9f25784"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"8df1678a43c7068815b38e922e40d8e2260ac2e5":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8df1678a43c7068815b38e922e40d8e2260ac2e5"],"30c8e5574b55d57947e989443dfde611646530ee":[],"ecd75942508378ccc92c3a26f71db6cba9f25784":["30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a","5ff704ef91e9ae30ca59babb23ece85720701b60"],"28288370235ed02234a64753cdbf0c6ec096304a":["aa2585c33d5d66a1c837c312221eb55ddb3c4300","30c8e5574b55d57947e989443dfde611646530ee"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}