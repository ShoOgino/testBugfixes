{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,String,int,int,SolrClient,String).mjava","commits":[{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,String,int,int,SolrClient,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createCollection(Map[String,List[Integer]],String,String,int,int,int,SolrClient,String).mjava","sourceNew":"  @Override\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, String configSetName, int numShards, int numReplicas, SolrClient client, String createNodeSetStr) throws SolrServerException, IOException {\n    // TODO: Use CollectionAdminRequest for this test\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionMessageHandler.NUM_SLICES, numShards);\n    params.set(ZkStateReader.REPLICATION_FACTOR, numReplicas);\n    if (createNodeSetStr != null) params.set(OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    params.set(\"collection.configName\", configSetName);\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      try (SolrClient aClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(aClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  protected CollectionAdminResponse createCollection(Map<String, List<Integer>> collectionInfos,\n                                                     String collectionName, String configSetName, int numShards, int numReplicas, int maxShardsPerNode, SolrClient client, String createNodeSetStr) throws SolrServerException, IOException {\n    // TODO: Use CollectionAdminRequest for this test\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"action\", CollectionAction.CREATE.toString());\n\n    params.set(OverseerCollectionMessageHandler.NUM_SLICES, numShards);\n    params.set(ZkStateReader.REPLICATION_FACTOR, numReplicas);\n    params.set(ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode);\n    if (createNodeSetStr != null) params.set(OverseerCollectionMessageHandler.CREATE_NODE_SET, createNodeSetStr);\n\n    int clientIndex = clients.size() > 1 ? random().nextInt(2) : 0;\n    List<Integer> list = new ArrayList<>();\n    list.add(numShards);\n    list.add(numReplicas);\n    if (collectionInfos != null) {\n      collectionInfos.put(collectionName, list);\n    }\n    params.set(\"name\", collectionName);\n    params.set(\"collection.configName\", configSetName);\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n\n    CollectionAdminResponse res = new CollectionAdminResponse();\n    if (client == null) {\n      final String baseUrl = ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().substring(\n          0,\n          ((HttpSolrClient) clients.get(clientIndex)).getBaseURL().length()\n              - DEFAULT_COLLECTION.length() - 1);\n      \n      try (SolrClient aClient = createNewSolrClient(\"\", baseUrl)) {\n        res.setResponse(aClient.request(request));\n      }\n    } else {\n      res.setResponse(client.request(request));\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}