{"path":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","pathOld":"solr/src/test-framework/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","sourceNew":"  boolean matchMap() {\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\n    Map<String,Object> v = asMap();\n    if (v == null) return false;\n\n    boolean ordered = false;\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\n\n    if (orderedStr != null) ordered = true;\n    if (unorderedStr != null) ordered = false;\n\n    Set<String> match = null;\n    if (matchList != null) {\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\n    }\n\n    Set<String> skips = null;\n    if (skipList != null) {\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\n    }\n\n    Set<String> keys = match != null ? match : expectedMap.keySet();\n    Set<String> visited = new HashSet<String>();\n\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\n\n    int numExpected=0;\n\n    pushPath(null);\n    for (String expectedKey : keys) {\n      if (reserved.contains(expectedKey)) continue;\n      numExpected++;\n\n      setPath(expectedKey);\n      if (!v.containsKey(expectedKey)) {\n        popPath();\n        setErr(\"expected key '\" + expectedKey + \"'\");\n        return false;\n      }\n\n      expected = expectedMap.get(expectedKey);\n\n      if (ordered) {\n        Map.Entry<String,Object> entry;\n        String foundKey;\n        for(;;) {\n          if (!iter.hasNext()) {\n            popPath();\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\n            return false;           \n          }\n          entry = iter.next();\n          foundKey = entry.getKey();\n          if (skips != null && skips.contains(foundKey))continue;\n          if (match != null && !match.contains(foundKey)) continue;\n          break;\n        }\n\n        if (!entry.getKey().equals(expectedKey)) {\n          popPath();          \n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\n          return false;\n        }\n        val = entry.getValue();\n      } else {\n        if (skips != null && skips.contains(expectedKey)) continue;\n        val = v.get(expectedKey);\n      }\n\n      if (!match()) return false;\n    }\n\n    popPath();\n\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\n    if (match == null) {\n      int skipped = 0;\n      if (skips != null) {\n        for (String skipStr : skips)\n          if (v.containsKey(skipStr)) skipped++;\n      }\n      if (numExpected != (v.size() - skipped)) {\n        HashSet<String> set = new HashSet<String>(v.keySet());\n        set.removeAll(expectedMap.keySet());\n        setErr(\"unexpected map keys \" + set); \n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  boolean matchMap() {\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\n    Map<String,Object> v = asMap();\n    if (v == null) return false;\n\n    boolean ordered = false;\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\n\n    if (orderedStr != null) ordered = true;\n    if (unorderedStr != null) ordered = false;\n\n    Set<String> match = null;\n    if (matchList != null) {\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\n    }\n\n    Set<String> skips = null;\n    if (skipList != null) {\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\n    }\n\n    Set<String> keys = match != null ? match : expectedMap.keySet();\n    Set<String> visited = new HashSet<String>();\n\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\n\n    int numExpected=0;\n\n    pushPath(null);\n    for (String expectedKey : keys) {\n      if (reserved.contains(expectedKey)) continue;\n      numExpected++;\n\n      setPath(expectedKey);\n      if (!v.containsKey(expectedKey)) {\n        popPath();\n        setErr(\"expected key '\" + expectedKey + \"'\");\n        return false;\n      }\n\n      expected = expectedMap.get(expectedKey);\n\n      if (ordered) {\n        Map.Entry<String,Object> entry;\n        String foundKey;\n        for(;;) {\n          if (!iter.hasNext()) {\n            popPath();\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\n            return false;           \n          }\n          entry = iter.next();\n          foundKey = entry.getKey();\n          if (skips != null && skips.contains(foundKey))continue;\n          if (match != null && !match.contains(foundKey)) continue;\n          break;\n        }\n\n        if (!entry.getKey().equals(expectedKey)) {\n          popPath();          \n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\n          return false;\n        }\n        val = entry.getValue();\n      } else {\n        if (skips != null && skips.contains(expectedKey)) continue;\n        val = v.get(expectedKey);\n      }\n\n      if (!match()) return false;\n    }\n\n    popPath();\n\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\n    if (match == null) {\n      int skipped = 0;\n      if (skips != null) {\n        for (String skipStr : skips)\n          if (v.containsKey(skipStr)) skipped++;\n      }\n      if (numExpected != (v.size() - skipped)) {\n        HashSet<String> set = new HashSet<String>(v.keySet());\n        set.removeAll(expectedMap.keySet());\n        setErr(\"unexpected map keys \" + set); \n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","pathOld":"solr/src/test-framework/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","sourceNew":"  boolean matchMap() {\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\n    Map<String,Object> v = asMap();\n    if (v == null) return false;\n\n    boolean ordered = false;\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\n\n    if (orderedStr != null) ordered = true;\n    if (unorderedStr != null) ordered = false;\n\n    Set<String> match = null;\n    if (matchList != null) {\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\n    }\n\n    Set<String> skips = null;\n    if (skipList != null) {\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\n    }\n\n    Set<String> keys = match != null ? match : expectedMap.keySet();\n    Set<String> visited = new HashSet<String>();\n\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\n\n    int numExpected=0;\n\n    pushPath(null);\n    for (String expectedKey : keys) {\n      if (reserved.contains(expectedKey)) continue;\n      numExpected++;\n\n      setPath(expectedKey);\n      if (!v.containsKey(expectedKey)) {\n        popPath();\n        setErr(\"expected key '\" + expectedKey + \"'\");\n        return false;\n      }\n\n      expected = expectedMap.get(expectedKey);\n\n      if (ordered) {\n        Map.Entry<String,Object> entry;\n        String foundKey;\n        for(;;) {\n          if (!iter.hasNext()) {\n            popPath();\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\n            return false;           \n          }\n          entry = iter.next();\n          foundKey = entry.getKey();\n          if (skips != null && skips.contains(foundKey))continue;\n          if (match != null && !match.contains(foundKey)) continue;\n          break;\n        }\n\n        if (!entry.getKey().equals(expectedKey)) {\n          popPath();          \n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\n          return false;\n        }\n        val = entry.getValue();\n      } else {\n        if (skips != null && skips.contains(expectedKey)) continue;\n        val = v.get(expectedKey);\n      }\n\n      if (!match()) return false;\n    }\n\n    popPath();\n\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\n    if (match == null) {\n      int skipped = 0;\n      if (skips != null) {\n        for (String skipStr : skips)\n          if (v.containsKey(skipStr)) skipped++;\n      }\n      if (numExpected != (v.size() - skipped)) {\n        HashSet<String> set = new HashSet<String>(v.keySet());\n        set.removeAll(expectedMap.keySet());\n        setErr(\"unexpected map keys \" + set); \n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  boolean matchMap() {\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\n    Map<String,Object> v = asMap();\n    if (v == null) return false;\n\n    boolean ordered = false;\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\n\n    if (orderedStr != null) ordered = true;\n    if (unorderedStr != null) ordered = false;\n\n    Set<String> match = null;\n    if (matchList != null) {\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\n    }\n\n    Set<String> skips = null;\n    if (skipList != null) {\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\n    }\n\n    Set<String> keys = match != null ? match : expectedMap.keySet();\n    Set<String> visited = new HashSet<String>();\n\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\n\n    int numExpected=0;\n\n    pushPath(null);\n    for (String expectedKey : keys) {\n      if (reserved.contains(expectedKey)) continue;\n      numExpected++;\n\n      setPath(expectedKey);\n      if (!v.containsKey(expectedKey)) {\n        popPath();\n        setErr(\"expected key '\" + expectedKey + \"'\");\n        return false;\n      }\n\n      expected = expectedMap.get(expectedKey);\n\n      if (ordered) {\n        Map.Entry<String,Object> entry;\n        String foundKey;\n        for(;;) {\n          if (!iter.hasNext()) {\n            popPath();\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\n            return false;           \n          }\n          entry = iter.next();\n          foundKey = entry.getKey();\n          if (skips != null && skips.contains(foundKey))continue;\n          if (match != null && !match.contains(foundKey)) continue;\n          break;\n        }\n\n        if (!entry.getKey().equals(expectedKey)) {\n          popPath();          \n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\n          return false;\n        }\n        val = entry.getValue();\n      } else {\n        if (skips != null && skips.contains(expectedKey)) continue;\n        val = v.get(expectedKey);\n      }\n\n      if (!match()) return false;\n    }\n\n    popPath();\n\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\n    if (match == null) {\n      int skipped = 0;\n      if (skips != null) {\n        for (String skipStr : skips)\n          if (v.containsKey(skipStr)) skipped++;\n      }\n      if (numExpected != (v.size() - skipped)) {\n        HashSet<String> set = new HashSet<String>(v.keySet());\n        set.removeAll(expectedMap.keySet());\n        setErr(\"unexpected map keys \" + set); \n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","pathOld":"solr/src/test-framework/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","sourceNew":"  boolean matchMap() {\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\n    Map<String,Object> v = asMap();\n    if (v == null) return false;\n\n    boolean ordered = false;\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\n\n    if (orderedStr != null) ordered = true;\n    if (unorderedStr != null) ordered = false;\n\n    Set<String> match = null;\n    if (matchList != null) {\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\n    }\n\n    Set<String> skips = null;\n    if (skipList != null) {\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\n    }\n\n    Set<String> keys = match != null ? match : expectedMap.keySet();\n    Set<String> visited = new HashSet<String>();\n\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\n\n    int numExpected=0;\n\n    pushPath(null);\n    for (String expectedKey : keys) {\n      if (reserved.contains(expectedKey)) continue;\n      numExpected++;\n\n      setPath(expectedKey);\n      if (!v.containsKey(expectedKey)) {\n        popPath();\n        setErr(\"expected key '\" + expectedKey + \"'\");\n        return false;\n      }\n\n      expected = expectedMap.get(expectedKey);\n\n      if (ordered) {\n        Map.Entry<String,Object> entry;\n        String foundKey;\n        for(;;) {\n          if (!iter.hasNext()) {\n            popPath();\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\n            return false;           \n          }\n          entry = iter.next();\n          foundKey = entry.getKey();\n          if (skips != null && skips.contains(foundKey))continue;\n          if (match != null && !match.contains(foundKey)) continue;\n          break;\n        }\n\n        if (!entry.getKey().equals(expectedKey)) {\n          popPath();          \n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\n          return false;\n        }\n        val = entry.getValue();\n      } else {\n        if (skips != null && skips.contains(expectedKey)) continue;\n        val = v.get(expectedKey);\n      }\n\n      if (!match()) return false;\n    }\n\n    popPath();\n\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\n    if (match == null) {\n      int skipped = 0;\n      if (skips != null) {\n        for (String skipStr : skips)\n          if (v.containsKey(skipStr)) skipped++;\n      }\n      if (numExpected != (v.size() - skipped)) {\n        HashSet<String> set = new HashSet<String>(v.keySet());\n        set.removeAll(expectedMap.keySet());\n        setErr(\"unexpected map keys \" + set); \n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  boolean matchMap() {\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\n    Map<String,Object> v = asMap();\n    if (v == null) return false;\n\n    boolean ordered = false;\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\n\n    if (orderedStr != null) ordered = true;\n    if (unorderedStr != null) ordered = false;\n\n    Set<String> match = null;\n    if (matchList != null) {\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\n    }\n\n    Set<String> skips = null;\n    if (skipList != null) {\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\n    }\n\n    Set<String> keys = match != null ? match : expectedMap.keySet();\n    Set<String> visited = new HashSet<String>();\n\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\n\n    int numExpected=0;\n\n    pushPath(null);\n    for (String expectedKey : keys) {\n      if (reserved.contains(expectedKey)) continue;\n      numExpected++;\n\n      setPath(expectedKey);\n      if (!v.containsKey(expectedKey)) {\n        popPath();\n        setErr(\"expected key '\" + expectedKey + \"'\");\n        return false;\n      }\n\n      expected = expectedMap.get(expectedKey);\n\n      if (ordered) {\n        Map.Entry<String,Object> entry;\n        String foundKey;\n        for(;;) {\n          if (!iter.hasNext()) {\n            popPath();\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\n            return false;           \n          }\n          entry = iter.next();\n          foundKey = entry.getKey();\n          if (skips != null && skips.contains(foundKey))continue;\n          if (match != null && !match.contains(foundKey)) continue;\n          break;\n        }\n\n        if (!entry.getKey().equals(expectedKey)) {\n          popPath();          \n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\n          return false;\n        }\n        val = entry.getValue();\n      } else {\n        if (skips != null && skips.contains(expectedKey)) continue;\n        val = v.get(expectedKey);\n      }\n\n      if (!match()) return false;\n    }\n\n    popPath();\n\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\n    if (match == null) {\n      int skipped = 0;\n      if (skips != null) {\n        for (String skipStr : skips)\n          if (v.containsKey(skipStr)) skipped++;\n      }\n      if (numExpected != (v.size() - skipped)) {\n        HashSet<String> set = new HashSet<String>(v.keySet());\n        set.removeAll(expectedMap.keySet());\n        setErr(\"unexpected map keys \" + set); \n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","sourceNew":"  boolean matchMap() {\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\n    Map<String,Object> v = asMap();\n    if (v == null) return false;\n\n    boolean ordered = false;\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\n\n    if (orderedStr != null) ordered = true;\n    if (unorderedStr != null) ordered = false;\n\n    Set<String> match = null;\n    if (matchList != null) {\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\n    }\n\n    Set<String> skips = null;\n    if (skipList != null) {\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\n    }\n\n    Set<String> keys = match != null ? match : expectedMap.keySet();\n    Set<String> visited = new HashSet<>();\n\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\n\n    int numExpected=0;\n\n    pushPath(null);\n    for (String expectedKey : keys) {\n      if (reserved.contains(expectedKey)) continue;\n      numExpected++;\n\n      setPath(expectedKey);\n      if (!v.containsKey(expectedKey)) {\n        popPath();\n        setErr(\"expected key '\" + expectedKey + \"'\");\n        return false;\n      }\n\n      expected = expectedMap.get(expectedKey);\n\n      if (ordered) {\n        Map.Entry<String,Object> entry;\n        String foundKey;\n        for(;;) {\n          if (!iter.hasNext()) {\n            popPath();\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\n            return false;           \n          }\n          entry = iter.next();\n          foundKey = entry.getKey();\n          if (skips != null && skips.contains(foundKey))continue;\n          if (match != null && !match.contains(foundKey)) continue;\n          break;\n        }\n\n        if (!entry.getKey().equals(expectedKey)) {\n          popPath();          \n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\n          return false;\n        }\n        val = entry.getValue();\n      } else {\n        if (skips != null && skips.contains(expectedKey)) continue;\n        val = v.get(expectedKey);\n      }\n\n      if (!match()) return false;\n    }\n\n    popPath();\n\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\n    if (match == null) {\n      int skipped = 0;\n      if (skips != null) {\n        for (String skipStr : skips)\n          if (v.containsKey(skipStr)) skipped++;\n      }\n      if (numExpected != (v.size() - skipped)) {\n        HashSet<String> set = new HashSet<>(v.keySet());\n        set.removeAll(expectedMap.keySet());\n        setErr(\"unexpected map keys \" + set); \n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  boolean matchMap() {\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\n    Map<String,Object> v = asMap();\n    if (v == null) return false;\n\n    boolean ordered = false;\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\n\n    if (orderedStr != null) ordered = true;\n    if (unorderedStr != null) ordered = false;\n\n    Set<String> match = null;\n    if (matchList != null) {\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\n    }\n\n    Set<String> skips = null;\n    if (skipList != null) {\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\n    }\n\n    Set<String> keys = match != null ? match : expectedMap.keySet();\n    Set<String> visited = new HashSet<String>();\n\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\n\n    int numExpected=0;\n\n    pushPath(null);\n    for (String expectedKey : keys) {\n      if (reserved.contains(expectedKey)) continue;\n      numExpected++;\n\n      setPath(expectedKey);\n      if (!v.containsKey(expectedKey)) {\n        popPath();\n        setErr(\"expected key '\" + expectedKey + \"'\");\n        return false;\n      }\n\n      expected = expectedMap.get(expectedKey);\n\n      if (ordered) {\n        Map.Entry<String,Object> entry;\n        String foundKey;\n        for(;;) {\n          if (!iter.hasNext()) {\n            popPath();\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\n            return false;           \n          }\n          entry = iter.next();\n          foundKey = entry.getKey();\n          if (skips != null && skips.contains(foundKey))continue;\n          if (match != null && !match.contains(foundKey)) continue;\n          break;\n        }\n\n        if (!entry.getKey().equals(expectedKey)) {\n          popPath();          \n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\n          return false;\n        }\n        val = entry.getValue();\n      } else {\n        if (skips != null && skips.contains(expectedKey)) continue;\n        val = v.get(expectedKey);\n      }\n\n      if (!match()) return false;\n    }\n\n    popPath();\n\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\n    if (match == null) {\n      int skipped = 0;\n      if (skips != null) {\n        for (String skipStr : skips)\n          if (v.containsKey(skipStr)) skipped++;\n      }\n      if (numExpected != (v.size() - skipped)) {\n        HashSet<String> set = new HashSet<String>(v.keySet());\n        set.removeAll(expectedMap.keySet());\n        setErr(\"unexpected map keys \" + set); \n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6809a6d7924df2c864d6a5863944aff9dfeb372c","date":1591826750,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#matchMap().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  boolean matchMap() {\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\n    Map<String,Object> v = asMap();\n    if (v == null) return false;\n\n    boolean ordered = false;\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\n\n    if (orderedStr != null) ordered = true;\n    if (unorderedStr != null) ordered = false;\n\n    Set<String> match = null;\n    if (matchList != null) {\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\n    }\n\n    Set<String> skips = null;\n    if (skipList != null) {\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\n    }\n\n    Set<String> keys = match != null ? match : expectedMap.keySet();\n    Set<String> visited = new HashSet<>();\n\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\n\n    int numExpected=0;\n\n    pushPath(null);\n    for (String expectedKey : keys) {\n      if (reserved.contains(expectedKey)) continue;\n      numExpected++;\n\n      setPath(expectedKey);\n      if (!v.containsKey(expectedKey)) {\n        popPath();\n        setErr(\"expected key '\" + expectedKey + \"'\");\n        return false;\n      }\n\n      expected = expectedMap.get(expectedKey);\n\n      if (ordered) {\n        Map.Entry<String,Object> entry;\n        String foundKey;\n        for(;;) {\n          if (!iter.hasNext()) {\n            popPath();\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\n            return false;           \n          }\n          entry = iter.next();\n          foundKey = entry.getKey();\n          if (skips != null && skips.contains(foundKey))continue;\n          if (match != null && !match.contains(foundKey)) continue;\n          break;\n        }\n\n        if (!entry.getKey().equals(expectedKey)) {\n          popPath();          \n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\n          return false;\n        }\n        val = entry.getValue();\n      } else {\n        if (skips != null && skips.contains(expectedKey)) continue;\n        val = v.get(expectedKey);\n      }\n\n      if (!match()) return false;\n    }\n\n    popPath();\n\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\n    if (match == null) {\n      int skipped = 0;\n      if (skips != null) {\n        for (String skipStr : skips)\n          if (v.containsKey(skipStr)) skipped++;\n      }\n      if (numExpected != (v.size() - skipped)) {\n        HashSet<String> set = new HashSet<>(v.keySet());\n        set.removeAll(expectedMap.keySet());\n        setErr(\"unexpected map keys \" + set); \n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  boolean matchMap() {\n    Map<String,Object> expectedMap = (Map<String,Object>)expected;\n    Map<String,Object> v = asMap();\n    if (v == null) return false;\n\n    boolean ordered = false;\n    String skipList = (String)expectedMap.get(\"_SKIP_\");\n    String matchList = (String)expectedMap.get(\"_MATCH_\");\n    Object orderedStr = expectedMap.get(\"_ORDERED_\");\n    Object unorderedStr = expectedMap.get(\"_UNORDERED_\");\n\n    if (orderedStr != null) ordered = true;\n    if (unorderedStr != null) ordered = false;\n\n    Set<String> match = null;\n    if (matchList != null) {\n      match = new HashSet(StrUtils.splitSmart(matchList,\",\",false));\n    }\n\n    Set<String> skips = null;\n    if (skipList != null) {\n      skips = new HashSet(StrUtils.splitSmart(skipList,\",\",false));\n    }\n\n    Set<String> keys = match != null ? match : expectedMap.keySet();\n    Set<String> visited = new HashSet<>();\n\n    Iterator<Map.Entry<String,Object>> iter = ordered ? v.entrySet().iterator() : null;\n\n    int numExpected=0;\n\n    pushPath(null);\n    for (String expectedKey : keys) {\n      if (reserved.contains(expectedKey)) continue;\n      numExpected++;\n\n      setPath(expectedKey);\n      if (!v.containsKey(expectedKey)) {\n        popPath();\n        setErr(\"expected key '\" + expectedKey + \"'\");\n        return false;\n      }\n\n      expected = expectedMap.get(expectedKey);\n\n      if (ordered) {\n        Map.Entry<String,Object> entry;\n        String foundKey;\n        for(;;) {\n          if (!iter.hasNext()) {\n            popPath();\n            setErr(\"expected key '\" + expectedKey + \"' in ordered map\");\n            return false;           \n          }\n          entry = iter.next();\n          foundKey = entry.getKey();\n          if (skips != null && skips.contains(foundKey))continue;\n          if (match != null && !match.contains(foundKey)) continue;\n          break;\n        }\n\n        if (!entry.getKey().equals(expectedKey)) {\n          popPath();          \n          setErr(\"expected key '\" + expectedKey + \"' instead of '\"+entry.getKey()+\"' in ordered map\");\n          return false;\n        }\n        val = entry.getValue();\n      } else {\n        if (skips != null && skips.contains(expectedKey)) continue;\n        val = v.get(expectedKey);\n      }\n\n      if (!match()) return false;\n    }\n\n    popPath();\n\n    // now check if there were any extra keys in the value (as long as there wasn't a specific list to include)\n    if (match == null) {\n      int skipped = 0;\n      if (skips != null) {\n        for (String skipStr : skips)\n          if (v.containsKey(skipStr)) skipped++;\n      }\n      if (numExpected != (v.size() - skipped)) {\n        HashSet<String> set = new HashSet<>(v.keySet());\n        set.removeAll(expectedMap.keySet());\n        setErr(\"unexpected map keys \" + set); \n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6809a6d7924df2c864d6a5863944aff9dfeb372c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6809a6d7924df2c864d6a5863944aff9dfeb372c"]},"commit2Childs":{"6809a6d7924df2c864d6a5863944aff9dfeb372c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6809a6d7924df2c864d6a5863944aff9dfeb372c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}