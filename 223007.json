{"path":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase.VerifyHits#test(AtomicBoolean,boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","commits":[{"id":"0a5621907ebbd315f9ceb1060cbcb194455edee3","date":1451905835,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase.VerifyHits#test(AtomicBoolean,boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase.VerifyHits#test(boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","sourceNew":"    public void test(AtomicBoolean failed, boolean small, IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        Boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else if (Double.isNaN(lats[id])) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        // null means it's a borderline case which is allowed to be wrong:\n        if (expected != null && hits.get(docID) != expected) {\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should not match but did\");\n          }\n          System.out.println(\"  small=\" + small + \" query=\" + query +\n                             \" docID=\" + docID + \"\\n  lat=\" + lats[id] + \" lon=\" + lons[id] +\n                             \"\\n  deleted?=\" + deleted.contains(id));\n          if (Double.isNaN(lats[id]) == false) {\n            describe(docID, lats[id], lons[id]);\n          }\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        failed.set(true);\n        fail(\"some hits were wrong\");\n      }\n    }\n\n","sourceOld":"    public void test(boolean small, IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        Boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else if (Double.isNaN(lats[id])) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        // null means it's a borderline case which is allowed to be wrong:\n        if (expected != null && hits.get(docID) != expected) {\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should not match but did\");\n          }\n          System.out.println(\"  small=\" + small + \" query=\" + query +\n                             \" docID=\" + docID + \"\\n  lat=\" + lats[id] + \" lon=\" + lons[id] +\n                             \"\\n  deleted?=\" + deleted.contains(id));\n          if (Double.isNaN(lats[id]) == false) {\n            describe(docID, lats[id], lons[id]);\n          }\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase.VerifyHits#test(AtomicBoolean,boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase.VerifyHits#test(AtomicBoolean,boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","sourceNew":"    public void test(AtomicBoolean failed, boolean small, IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        Boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else if (Double.isNaN(lats[id])) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        // null means it's a borderline case which is allowed to be wrong:\n        if (expected != null && hits.get(docID) != expected) {\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should not match but did\");\n          }\n          System.out.println(\"  small=\" + small + \" query=\" + query +\n                             \" docID=\" + docID + \"\\n  lat=\" + lats[id] + \" lon=\" + lons[id] +\n                             \"\\n  deleted?=\" + deleted.contains(id));\n          if (Double.isNaN(lats[id]) == false) {\n            describe(docID, lats[id], lons[id]);\n          }\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        failed.set(true);\n        fail(\"some hits were wrong\");\n      }\n    }\n\n","sourceOld":"    public void test(AtomicBoolean failed, boolean small, IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        Boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else if (Double.isNaN(lats[id])) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        // null means it's a borderline case which is allowed to be wrong:\n        if (expected != null && hits.get(docID) != expected) {\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should not match but did\");\n          }\n          System.out.println(\"  small=\" + small + \" query=\" + query +\n                             \" docID=\" + docID + \"\\n  lat=\" + lats[id] + \" lon=\" + lons[id] +\n                             \"\\n  deleted?=\" + deleted.contains(id));\n          if (Double.isNaN(lats[id]) == false) {\n            describe(docID, lats[id], lons[id]);\n          }\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        failed.set(true);\n        fail(\"some hits were wrong\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase.VerifyHits#test(AtomicBoolean,boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase.VerifyHits#test(AtomicBoolean,boolean,IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","sourceNew":"    public void test(AtomicBoolean failed, boolean small, IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        Boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else if (Double.isNaN(lats[id])) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        // null means it's a borderline case which is allowed to be wrong:\n        if (expected != null && hits.get(docID) != expected) {\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should not match but did\");\n          }\n          System.out.println(\"  small=\" + small + \" query=\" + query +\n                             \" docID=\" + docID + \"\\n  lat=\" + lats[id] + \" lon=\" + lons[id] +\n                             \"\\n  deleted?=\" + deleted.contains(id));\n          if (Double.isNaN(lats[id]) == false) {\n            describe(docID, lats[id], lons[id]);\n          }\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        failed.set(true);\n        fail(\"some hits were wrong\");\n      }\n    }\n\n","sourceOld":"    public void test(AtomicBoolean failed, boolean small, IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        Boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else if (Double.isNaN(lats[id])) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        // null means it's a borderline case which is allowed to be wrong:\n        if (expected != null && hits.get(docID) != expected) {\n          if (expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should match but did not\");\n          } else {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id + \" should not match but did\");\n          }\n          System.out.println(\"  small=\" + small + \" query=\" + query +\n                             \" docID=\" + docID + \"\\n  lat=\" + lats[id] + \" lon=\" + lons[id] +\n                             \"\\n  deleted?=\" + deleted.contains(id));\n          if (Double.isNaN(lats[id]) == false) {\n            describe(docID, lats[id], lons[id]);\n          }\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        failed.set(true);\n        fail(\"some hits were wrong\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a5621907ebbd315f9ceb1060cbcb194455edee3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["0a5621907ebbd315f9ceb1060cbcb194455edee3","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["0a5621907ebbd315f9ceb1060cbcb194455edee3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"]},"commit2Childs":{"0a5621907ebbd315f9ceb1060cbcb194455edee3":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a5621907ebbd315f9ceb1060cbcb194455edee3"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}