{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","commits":[{"id":"84b590669deb3d3a471cec6cb13b104b2ee94418","date":1288889547,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect AlreadyClosedException\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect AlreadyClosedException\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect AlreadyClosedException\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect AlreadyClosedException\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect AlreadyClosedException\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergeScheduler(new ConcurrentMergeScheduler());\n      // We expect AlreadyClosedException\n      ((ConcurrentMergeScheduler) conf.getMergeScheduler()).setSuppressExceptions();\n      IndexWriter writer = new IndexWriter(dir, conf);\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"217e3aafb012489cd28d40cce9bd6eb179b7cded","date":1309265073,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a37d7952ff54064a735708748444570f9963683e","date":1309331473,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getLiveDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getLiveDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getLiveDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<7;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getDeletedDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getLiveDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = MultiFields.getTermDocsEnum(reader,\n                                                  MultiFields.getLiveDocs(reader),\n                                                  \"field\",\n                                                  new BytesRef(\"aaa\"));\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir, true);\n      DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws Exception {\n    int NUM_THREADS = 3;\n    int numIterations = TEST_NIGHTLY ? 7 : 3;\n    for(int iter=0;iter<numIterations;iter++) {\n      Directory dir = newDirectory();\n\n      IndexWriter writer = new IndexWriter(\n          dir,\n          newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n              setMaxBufferedDocs(10).\n              setMergeScheduler(new ConcurrentMergeScheduler()).\n              setMergePolicy(newLogMergePolicy(4))\n      );\n      ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).setSuppressExceptions();\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        Thread.sleep(100);\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          } else if (!threads[i].isAlive()) {\n            fail(\"thread failed before indexing a single document\");\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        // Without fix for LUCENE-1130: one of the\n        // threads will hang\n        threads[i].join();\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      DocsEnum tdocs = _TestUtil.docs(random, reader,\n                                      \"field\",\n                                      new BytesRef(\"aaa\"),\n                                      MultiFields.getLiveDocs(reader),\n                                      null,\n                                      false);\n      int count = 0;\n      while(tdocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a37d7952ff54064a735708748444570f9963683e":["217e3aafb012489cd28d40cce9bd6eb179b7cded"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["872cff1d3a554e0cd64014cd97f88d3002b0f491","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["a37d7952ff54064a735708748444570f9963683e"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","84b590669deb3d3a471cec6cb13b104b2ee94418"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f2c5f0cb44df114db4228c8f77861714b5cabaea","962d04139994fce5193143ef35615499a9a96d78"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","217e3aafb012489cd28d40cce9bd6eb179b7cded"],"217e3aafb012489cd28d40cce9bd6eb179b7cded":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"84b590669deb3d3a471cec6cb13b104b2ee94418":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["872cff1d3a554e0cd64014cd97f88d3002b0f491","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"3bb13258feba31ab676502787ab2e1779f129b7a":["85a883878c0af761245ab048babc63d099f835f3","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["84b590669deb3d3a471cec6cb13b104b2ee94418"]},"commit2Childs":{"a37d7952ff54064a735708748444570f9963683e":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["872cff1d3a554e0cd64014cd97f88d3002b0f491","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"85a883878c0af761245ab048babc63d099f835f3":["3bb13258feba31ab676502787ab2e1779f129b7a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","217e3aafb012489cd28d40cce9bd6eb179b7cded","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","b65b350ca9588f9fc76ce7d6804160d06c45ff42","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"962d04139994fce5193143ef35615499a9a96d78":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"217e3aafb012489cd28d40cce9bd6eb179b7cded":["a37d7952ff54064a735708748444570f9963683e","2553b00f699380c64959ccb27991289aae87be2e"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"84b590669deb3d3a471cec6cb13b104b2ee94418":["85a883878c0af761245ab048babc63d099f835f3","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","962d04139994fce5193143ef35615499a9a96d78"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","84b590669deb3d3a471cec6cb13b104b2ee94418"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}