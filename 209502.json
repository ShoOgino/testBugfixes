{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicReader,CacheKey,Object).mjava","commits":[{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicReader,CacheKey,Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicReader,Entry,Object).mjava","sourceNew":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicReader reader, CacheKey key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<CacheKey,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<CacheKey,Object>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","sourceOld":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicReader reader, Entry key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<Entry,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<Entry,Object>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicReader,CacheKey,Object).mjava","pathOld":"/dev/null","sourceNew":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicReader reader, CacheKey key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<CacheKey,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<CacheKey,Object>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicReader,CacheKey,Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicReader,CacheKey,Object).mjava","sourceNew":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicReader reader, CacheKey key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<CacheKey,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","sourceOld":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicReader reader, CacheKey key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<CacheKey,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<CacheKey,Object>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Cache#put(AtomicReader,CacheKey,Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicReader,CacheKey,Object).mjava","sourceNew":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicReader reader, CacheKey key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<CacheKey,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","sourceOld":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicReader reader, CacheKey key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<CacheKey,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Cache#put(AtomicReader,CacheKey,Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicReader,CacheKey,Object).mjava","sourceNew":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicReader reader, CacheKey key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<CacheKey,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","sourceOld":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicReader reader, CacheKey key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<CacheKey,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Cache#put(AtomicReader,CacheKey,Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.Cache#put(AtomicReader,CacheKey,Object).mjava","sourceNew":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicReader reader, CacheKey key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<CacheKey,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","sourceOld":"    /** Sets the key to the value for the provided reader;\n     *  if the key is already set then this doesn't change it. */\n    public void put(AtomicReader reader, CacheKey key, Object value) {\n      final Object readerKey = reader.getCoreCacheKey();\n      synchronized (readerCache) {\n        Map<CacheKey,Object> innerCache = readerCache.get(readerKey);\n        if (innerCache == null) {\n          // First time this reader is using FieldCache\n          innerCache = new HashMap<>();\n          readerCache.put(readerKey, innerCache);\n          wrapper.initReader(reader);\n        }\n        if (innerCache.get(key) == null) {\n          innerCache.put(key, value);\n        } else {\n          // Another thread beat us to it; leave the current\n          // value\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a4d374b2bebd0d52acaa61038fbf23068620fba7"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","a4d374b2bebd0d52acaa61038fbf23068620fba7"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}