{"path":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTest(File,boolean,String).mjava","commits":[{"id":"1bc1076e669ef72f6939198a862b40a0ffd1fc70","date":1248689703,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTest(File,boolean,String).mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocMakerTest#doIndexAndSearchTest(File,boolean,String).mjava","sourceNew":"  private void doIndexAndSearchTest(File file, boolean setBZCompress,\n      String bz2CompressVal) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (setBZCompress) {\n      props.setProperty(\"bzip.compression\", bz2CompressVal);\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", SimpleAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(1, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    searcher.close();\n  }\n\n","sourceOld":"  private void doIndexAndSearchTest(File file, boolean setBZCompress,\n      String bz2CompressVal) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocMaker specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (setBZCompress) {\n      props.setProperty(\"bzip.compression\", bz2CompressVal);\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", SimpleAnalyzer.class.getName());\n    props.setProperty(\"doc.maker\", LineDocMaker.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(1, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTest(File,boolean,String).mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/feeds/LineDocSourceTest#doIndexAndSearchTest(File,boolean,String).mjava","sourceNew":"  private void doIndexAndSearchTest(File file, boolean setBZCompress,\n      String bz2CompressVal) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (setBZCompress) {\n      props.setProperty(\"bzip.compression\", bz2CompressVal);\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", SimpleAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(1, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    searcher.close();\n  }\n\n","sourceOld":"  private void doIndexAndSearchTest(File file, boolean setBZCompress,\n      String bz2CompressVal) throws Exception {\n\n    Properties props = new Properties();\n    \n    // LineDocSource specific settings.\n    props.setProperty(\"docs.file\", file.getAbsolutePath());\n    if (setBZCompress) {\n      props.setProperty(\"bzip.compression\", bz2CompressVal);\n    }\n    \n    // Indexing configuration.\n    props.setProperty(\"analyzer\", SimpleAnalyzer.class.getName());\n    props.setProperty(\"content.source\", LineDocSource.class.getName());\n    props.setProperty(\"directory\", \"RAMDirectory\");\n    \n    // Create PerfRunData\n    Config config = new Config(props);\n    PerfRunData runData = new PerfRunData(config);\n\n    TaskSequence tasks = new TaskSequence(runData, \"testBzip2\", null, false);\n    tasks.addTask(new CreateIndexTask(runData));\n    tasks.addTask(new AddDocTask(runData));\n    tasks.addTask(new CloseIndexTask(runData));\n    tasks.doLogic();\n    \n    IndexSearcher searcher = new IndexSearcher(runData.getDirectory(), true);\n    TopDocs td = searcher.search(new TermQuery(new Term(\"body\", \"body\")), 10);\n    assertEquals(1, td.totalHits);\n    assertNotNull(td.scoreDocs[0]);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1bc1076e669ef72f6939198a862b40a0ffd1fc70"],"1bc1076e669ef72f6939198a862b40a0ffd1fc70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bc1076e669ef72f6939198a862b40a0ffd1fc70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1bc1076e669ef72f6939198a862b40a0ffd1fc70":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}