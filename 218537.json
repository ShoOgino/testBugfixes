{"path":"src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","commits":[{"id":"183ba46e9837e95333f35c590df5d02d0071c076","date":1164074105,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n\n    Calendar cal = Calendar.getInstance(zone, loc);\n    cal.setTime(getNow());\n\n    /* check for No-Op */\n    if (0==math.length()) {\n      return cal.getTime();\n    }\n    \n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          round(cal, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.valueOf(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          add(cal, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return cal.getTime();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","pathOld":"src/java/org/apache/solr/util/DateMathParser#parseMath(String).mjava","sourceNew":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n\n    Calendar cal = Calendar.getInstance(zone, loc);\n    cal.setTime(getNow());\n\n    /* check for No-Op */\n    if (0==math.length()) {\n      return cal.getTime();\n    }\n    \n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          round(cal, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.valueOf(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          add(cal, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return cal.getTime();\n  }\n\n","sourceOld":"  /**\n   * Parses a string of commands relative \"now\" are returns the resulting Date.\n   * \n   * @exception ParseException positions in ParseExceptions are token positions, not character positions.\n   */\n  public Date parseMath(String math) throws ParseException {\n\n    Calendar cal = Calendar.getInstance(zone, loc);\n    cal.setTime(getNow());\n\n    /* check for No-Op */\n    if (0==math.length()) {\n      return cal.getTime();\n    }\n    \n    String[] ops = splitter.split(math);\n    int pos = 0;\n    while ( pos < ops.length ) {\n\n      if (1 != ops[pos].length()) {\n        throw new ParseException\n          (\"Multi character command found: \\\"\" + ops[pos] + \"\\\"\", pos);\n      }\n      char command = ops[pos++].charAt(0);\n\n      switch (command) {\n      case '/':\n        if (ops.length < pos + 1) {\n          throw new ParseException\n            (\"Need a unit after command: \\\"\" + command + \"\\\"\", pos);\n        }\n        try {\n          round(cal, ops[pos++]);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      case '+': /* fall through */\n      case '-':\n        if (ops.length < pos + 2) {\n          throw new ParseException\n            (\"Need a value and unit for command: \\\"\" + command + \"\\\"\", pos);\n        }\n        int val = 0;\n        try {\n          val = Integer.valueOf(ops[pos++]);\n        } catch (NumberFormatException e) {\n          throw new ParseException\n            (\"Not a Number: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        if ('-' == command) {\n          val = 0 - val;\n        }\n        try {\n          String unit = ops[pos++];\n          add(cal, val, unit);\n        } catch (IllegalArgumentException e) {\n          throw new ParseException\n            (\"Unit not recognized: \\\"\" + ops[pos-1] + \"\\\"\", pos-1);\n        }\n        break;\n      default:\n        throw new ParseException\n          (\"Unrecognized command: \\\"\" + command + \"\\\"\", pos-1);\n      }\n    }\n    \n    return cal.getTime();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"183ba46e9837e95333f35c590df5d02d0071c076":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["183ba46e9837e95333f35c590df5d02d0071c076"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"183ba46e9837e95333f35c590df5d02d0071c076":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["183ba46e9837e95333f35c590df5d02d0071c076"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}