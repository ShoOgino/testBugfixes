{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int,int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int,int,int).mjava","sourceNew":"  private void checkSpans(Spans spans, int expectedNumSpans, int expectedNumPayloads,\n                          int expectedPayloadLength, int expectedFirstByte) throws IOException {\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    //each position match should have a span associated with it, since there is just one underlying term query, there should\n    //only be one entry in the span\n    int seen = 0;\n    while (spans.next() == true)\n    {\n      //if we expect payloads, then isPayloadAvailable should be true\n      if (expectedNumPayloads > 0) {\n        assertTrue(\"isPayloadAvailable is not returning the correct value: \" + spans.isPayloadAvailable()\n                + \" and it should be: \" + (expectedNumPayloads >  0),\n                spans.isPayloadAvailable() == true);\n      } else {\n        assertTrue(\"isPayloadAvailable should be false\", spans.isPayloadAvailable() == false);\n      }\n      //See payload helper, for the PayloadHelper.FIELD field, there is a single byte payload at every token\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        assertTrue(\"payload Size: \" + payload.size() + \" is not: \" + expectedNumPayloads, payload.size() == expectedNumPayloads);\n        for (final byte [] thePayload : payload) {\n          assertTrue(\"payload[0] Size: \" + thePayload.length + \" is not: \" + expectedPayloadLength,\n                  thePayload.length == expectedPayloadLength);\n          assertTrue(thePayload[0] + \" does not equal: \" + expectedFirstByte, thePayload[0] == expectedFirstByte);\n\n        }\n\n      }\n      seen++;\n    }\n    assertTrue(seen + \" does not equal: \" + expectedNumSpans, seen == expectedNumSpans);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int expectedNumSpans, int expectedNumPayloads,\n                          int expectedPayloadLength, int expectedFirstByte) throws IOException {\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    //each position match should have a span associated with it, since there is just one underlying term query, there should\n    //only be one entry in the span\n    int seen = 0;\n    while (spans.next() == true)\n    {\n      //if we expect payloads, then isPayloadAvailable should be true\n      if (expectedNumPayloads > 0) {\n        assertTrue(\"isPayloadAvailable is not returning the correct value: \" + spans.isPayloadAvailable()\n                + \" and it should be: \" + (expectedNumPayloads >  0),\n                spans.isPayloadAvailable() == true);\n      } else {\n        assertTrue(\"isPayloadAvailable should be false\", spans.isPayloadAvailable() == false);\n      }\n      //See payload helper, for the PayloadHelper.FIELD field, there is a single byte payload at every token\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        assertTrue(\"payload Size: \" + payload.size() + \" is not: \" + expectedNumPayloads, payload.size() == expectedNumPayloads);\n        for (final byte [] thePayload : payload) {\n          assertTrue(\"payload[0] Size: \" + thePayload.length + \" is not: \" + expectedPayloadLength,\n                  thePayload.length == expectedPayloadLength);\n          assertTrue(thePayload[0] + \" does not equal: \" + expectedFirstByte, thePayload[0] == expectedFirstByte);\n\n        }\n\n      }\n      seen++;\n    }\n    assertTrue(seen + \" does not equal: \" + expectedNumSpans, seen == expectedNumSpans);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int,int,int).mjava","sourceNew":"  private void checkSpans(Spans spans, int expectedNumSpans, int expectedNumPayloads,\n                          int expectedPayloadLength, int expectedFirstByte) throws IOException {\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    //each position match should have a span associated with it, since there is just one underlying term query, there should\n    //only be one entry in the span\n    int seen = 0;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        assertEquals(\"isPayloadAvailable should return true/false as payloads are expected\", expectedNumPayloads > 0, spans.isPayloadAvailable());\n        //See payload helper, for the PayloadHelper.FIELD field, there is a single byte payload at every token\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          assertEquals(\"payload size\", expectedNumPayloads, payload.size());\n          for (final byte [] thePayload : payload) {\n            assertEquals(\"payload length\", expectedPayloadLength, thePayload.length);\n            assertEquals(\"payload first byte\", expectedFirstByte, thePayload[0]);\n          }\n        }\n        seen++;\n      }\n    }\n    assertEquals(\"expectedNumSpans\", expectedNumSpans, seen);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int expectedNumSpans, int expectedNumPayloads,\n                          int expectedPayloadLength, int expectedFirstByte) throws IOException {\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    //each position match should have a span associated with it, since there is just one underlying term query, there should\n    //only be one entry in the span\n    int seen = 0;\n    while (spans.next() == true)\n    {\n      //if we expect payloads, then isPayloadAvailable should be true\n      if (expectedNumPayloads > 0) {\n        assertTrue(\"isPayloadAvailable is not returning the correct value: \" + spans.isPayloadAvailable()\n                + \" and it should be: \" + (expectedNumPayloads >  0),\n                spans.isPayloadAvailable() == true);\n      } else {\n        assertTrue(\"isPayloadAvailable should be false\", spans.isPayloadAvailable() == false);\n      }\n      //See payload helper, for the PayloadHelper.FIELD field, there is a single byte payload at every token\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        assertTrue(\"payload Size: \" + payload.size() + \" is not: \" + expectedNumPayloads, payload.size() == expectedNumPayloads);\n        for (final byte [] thePayload : payload) {\n          assertTrue(\"payload[0] Size: \" + thePayload.length + \" is not: \" + expectedPayloadLength,\n                  thePayload.length == expectedPayloadLength);\n          assertTrue(thePayload[0] + \" does not equal: \" + expectedFirstByte, thePayload[0] == expectedFirstByte);\n\n        }\n\n      }\n      seen++;\n    }\n    assertTrue(seen + \" does not equal: \" + expectedNumSpans, seen == expectedNumSpans);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int,int,int).mjava","sourceNew":"  private void checkSpans(Spans spans, int expectedNumSpans, int expectedNumPayloads,\n                          int expectedPayloadLength, int expectedFirstByte) throws IOException {\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    //each position match should have a span associated with it, since there is just one underlying term query, there should\n    //only be one entry in the span\n    int seen = 0;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        assertEquals(\"isPayloadAvailable should return true/false as payloads are expected\", expectedNumPayloads > 0, spans.isPayloadAvailable());\n        //See payload helper, for the PayloadHelper.FIELD field, there is a single byte payload at every token\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          assertEquals(\"payload size\", expectedNumPayloads, payload.size());\n          for (final byte [] thePayload : payload) {\n            assertEquals(\"payload length\", expectedPayloadLength, thePayload.length);\n            assertEquals(\"payload first byte\", expectedFirstByte, thePayload[0]);\n          }\n        }\n        seen++;\n      }\n    }\n    assertEquals(\"expectedNumSpans\", expectedNumSpans, seen);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int expectedNumSpans, int expectedNumPayloads,\n                          int expectedPayloadLength, int expectedFirstByte) throws IOException {\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    //each position match should have a span associated with it, since there is just one underlying term query, there should\n    //only be one entry in the span\n    int seen = 0;\n    while (spans.next() == true)\n    {\n      //if we expect payloads, then isPayloadAvailable should be true\n      if (expectedNumPayloads > 0) {\n        assertTrue(\"isPayloadAvailable is not returning the correct value: \" + spans.isPayloadAvailable()\n                + \" and it should be: \" + (expectedNumPayloads >  0),\n                spans.isPayloadAvailable() == true);\n      } else {\n        assertTrue(\"isPayloadAvailable should be false\", spans.isPayloadAvailable() == false);\n      }\n      //See payload helper, for the PayloadHelper.FIELD field, there is a single byte payload at every token\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        assertTrue(\"payload Size: \" + payload.size() + \" is not: \" + expectedNumPayloads, payload.size() == expectedNumPayloads);\n        for (final byte [] thePayload : payload) {\n          assertTrue(\"payload[0] Size: \" + thePayload.length + \" is not: \" + expectedPayloadLength,\n                  thePayload.length == expectedPayloadLength);\n          assertTrue(thePayload[0] + \" does not equal: \" + expectedFirstByte, thePayload[0] == expectedFirstByte);\n\n        }\n\n      }\n      seen++;\n    }\n    assertTrue(seen + \" does not equal: \" + expectedNumSpans, seen == expectedNumSpans);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#checkSpans(Spans,int,int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int,int,int).mjava","sourceNew":"  private void checkSpans(Spans spans, int expectedNumSpans, int expectedNumPayloads,\n                          int expectedPayloadLength, int expectedFirstByte) throws IOException {\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    //each position match should have a span associated with it, since there is just one underlying term query, there should\n    //only be one entry in the span\n    int seen = 0;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        assertEquals(\"isPayloadAvailable should return true/false as payloads are expected\", expectedNumPayloads > 0, spans.isPayloadAvailable());\n        //See payload helper, for the PayloadHelper.FIELD field, there is a single byte payload at every token\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          assertEquals(\"payload size\", expectedNumPayloads, payload.size());\n          for (final byte [] thePayload : payload) {\n            assertEquals(\"payload length\", expectedPayloadLength, thePayload.length);\n            assertEquals(\"payload first byte\", expectedFirstByte, thePayload[0]);\n          }\n        }\n        seen++;\n      }\n    }\n    assertEquals(\"expectedNumSpans\", expectedNumSpans, seen);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int expectedNumSpans, int expectedNumPayloads,\n                          int expectedPayloadLength, int expectedFirstByte) throws IOException {\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    //each position match should have a span associated with it, since there is just one underlying term query, there should\n    //only be one entry in the span\n    int seen = 0;\n    while (spans.nextDoc() != Spans.NO_MORE_DOCS) {\n      while (spans.nextStartPosition() != Spans.NO_MORE_POSITIONS) {\n        assertEquals(\"isPayloadAvailable should return true/false as payloads are expected\", expectedNumPayloads > 0, spans.isPayloadAvailable());\n        //See payload helper, for the PayloadHelper.FIELD field, there is a single byte payload at every token\n        if (spans.isPayloadAvailable()) {\n          Collection<byte[]> payload = spans.getPayload();\n          assertEquals(\"payload size\", expectedNumPayloads, payload.size());\n          for (final byte [] thePayload : payload) {\n            assertEquals(\"payload length\", expectedPayloadLength, thePayload.length);\n            assertEquals(\"payload first byte\", expectedFirstByte, thePayload[0]);\n          }\n        }\n        seen++;\n      }\n    }\n    assertEquals(\"expectedNumSpans\", expectedNumSpans, seen);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fab172655716b96f7e42376116235017a922de3a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"]},"commit2Childs":{"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}