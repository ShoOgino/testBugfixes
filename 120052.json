{"path":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8d5405ac4f2510f9f83e07236792d1056c19640","date":1322235986,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    part1 = analyzeIfMultitermTermText(field, part1, schema.getFieldType(field).getMultiTermAnalyzer());\n    part2 = analyzeIfMultitermTermText(field, part2, schema.getFieldType(field).getMultiTermAnalyzer());\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15795b2193a8dd132f374975d4243687bee9351","date":1322413478,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    part1 = analyzeIfMultitermTermText(field, part1, schema.getFieldType(field).getMultiTermAnalyzer());\n    part2 = analyzeIfMultitermTermText(field, part2, schema.getFieldType(field).getMultiTermAnalyzer());\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#getRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  // called from parser\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws SyntaxError {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#getRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) throws ParseException {\n    checkNullField(field);\n    SchemaField sf = schema.getField(field);\n    return sf.getType().getRangeQuery(parser, sf, part1, part2, startInclusive, endInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cdb67100dc016748799a77218aa409478372d79":["f15795b2193a8dd132f374975d4243687bee9351"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["f15795b2193a8dd132f374975d4243687bee9351","3cdb67100dc016748799a77218aa409478372d79"],"f8d5405ac4f2510f9f83e07236792d1056c19640":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f15795b2193a8dd132f374975d4243687bee9351":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cdb67100dc016748799a77218aa409478372d79"]},"commit2Childs":{"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"f8d5405ac4f2510f9f83e07236792d1056c19640":["f15795b2193a8dd132f374975d4243687bee9351"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f15795b2193a8dd132f374975d4243687bee9351":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}