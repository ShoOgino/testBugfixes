{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/dXYdZSolid#dXYdZSolid(PlanetModel,double,double,double,double).mjava","commits":[{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/dXYdZSolid#dXYdZSolid(PlanetModel,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sole constructor\n   *\n   *@param planetModel is the planet model.\n   *@param X is the X value.\n   *@param minY is the minimum Y value.\n   *@param maxY is the maximum Y value.\n   *@param Z is the Z value.\n   */\n  public dXYdZSolid(final PlanetModel planetModel,\n    final double X,\n    final double minY,\n    final double maxY,\n    final double Z) {\n    super(planetModel);\n    // Argument checking\n    if (maxY - minY < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Y values in wrong order or identical\");\n\n    // Build the planes and intersect them.\n    final Plane xPlane = new Plane(xUnitVector,-X);\n    final Plane zPlane = new Plane(zUnitVector,-Z);\n    final SidedPlane minYPlane = new SidedPlane(0.0,maxY,0.0,yUnitVector,-minY);\n    final SidedPlane maxYPlane = new SidedPlane(0.0,minY,0.0,yUnitVector,-maxY);\n    surfacePoints = xPlane.findIntersections(planetModel,zPlane,minYPlane,maxYPlane);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/dXYdZSolid#dXYdZSolid(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/dXYdZSolid#dXYdZSolid(PlanetModel,double,double,double,double).mjava","sourceNew":"  /**\n   * Sole constructor\n   *\n   *@param planetModel is the planet model.\n   *@param X is the X value.\n   *@param minY is the minimum Y value.\n   *@param maxY is the maximum Y value.\n   *@param Z is the Z value.\n   */\n  public dXYdZSolid(final PlanetModel planetModel,\n    final double X,\n    final double minY,\n    final double maxY,\n    final double Z) {\n    super(planetModel);\n    // Argument checking\n    if (maxY - minY < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Y values in wrong order or identical\");\n\n    // Build the planes and intersect them.\n    final Plane xPlane = new Plane(xUnitVector,-X);\n    final Plane zPlane = new Plane(zUnitVector,-Z);\n    final SidedPlane minYPlane = new SidedPlane(0.0,maxY,0.0,yUnitVector,-minY);\n    final SidedPlane maxYPlane = new SidedPlane(0.0,minY,0.0,yUnitVector,-maxY);\n    surfacePoints = xPlane.findIntersections(planetModel,zPlane,minYPlane,maxYPlane);\n  }\n\n","sourceOld":"  /**\n   * Sole constructor\n   *\n   *@param planetModel is the planet model.\n   *@param X is the X value.\n   *@param minY is the minimum Y value.\n   *@param maxY is the maximum Y value.\n   *@param Z is the Z value.\n   */\n  public dXYdZSolid(final PlanetModel planetModel,\n    final double X,\n    final double minY,\n    final double maxY,\n    final double Z) {\n    super(planetModel);\n    // Argument checking\n    if (maxY - minY < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"Y values in wrong order or identical\");\n\n    // Build the planes and intersect them.\n    final Plane xPlane = new Plane(xUnitVector,-X);\n    final Plane zPlane = new Plane(zUnitVector,-Z);\n    final SidedPlane minYPlane = new SidedPlane(0.0,maxY,0.0,yUnitVector,-minY);\n    final SidedPlane maxYPlane = new SidedPlane(0.0,minY,0.0,yUnitVector,-maxY);\n    surfacePoints = xPlane.findIntersections(planetModel,zPlane,minYPlane,maxYPlane);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f64b7098768253180859cd8faeae6b1a185b06ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e444678504caf66a8060b1d514383aa4feac0c":["f64b7098768253180859cd8faeae6b1a185b06ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"f64b7098768253180859cd8faeae6b1a185b06ed":["b4e444678504caf66a8060b1d514383aa4feac0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f64b7098768253180859cd8faeae6b1a185b06ed"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}