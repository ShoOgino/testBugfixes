{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","commits":[{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docTermStartFP - lastState.docTermStartFP;\n    if (fieldHasPositions) {\n      longs[1] = state.posTermStartFP - lastState.posTermStartFP;\n      if (fieldHasPayloads || fieldHasOffsets) {\n        longs[2] = state.payTermStartFP - lastState.payTermStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (fieldHasPositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3263230f04a1aa8d431d722fdfce583a9542c18","date":1377603209,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = newTermState();\n    }\n    //System.out.println(\"PW: state=\" + state);\n    //System.out.println(\"     last=\" + lastState);\n    if (VERSION_CURRENT < VERSION_META_ARRAY) {  // impersonation\n      _encodeTerm(out, fieldInfo, state);\n      return;\n    }\n    longs[0] = state.docTermStartFP - lastState.docTermStartFP;\n    if (fieldHasPositions) {\n      longs[1] = state.posTermStartFP - lastState.posTermStartFP;\n      if (fieldHasPayloads || fieldHasOffsets) {\n        if (state.payTermStartFP == -1) {\n          longs[2] = 0;\n        } else {\n          longs[2] = state.payTermStartFP - lastState.payTermStartFP;\n        }\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (fieldHasPositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    if (state.payTermStartFP == -1) {\n      state.payTermStartFP = lastState.payTermStartFP;\n    }\n    lastState = state;\n  }\n\n","sourceOld":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docTermStartFP - lastState.docTermStartFP;\n    if (fieldHasPositions) {\n      longs[1] = state.posTermStartFP - lastState.posTermStartFP;\n      if (fieldHasPayloads || fieldHasOffsets) {\n        longs[2] = state.payTermStartFP - lastState.payTermStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (fieldHasPositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cff9c2f82cba41c789e4f62f8ca8c65585d48eb7","date":1378009921,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = newTermState();\n    }\n    if (VERSION_CURRENT < VERSION_META_ARRAY) {  // impersonation\n      _encodeTerm(out, fieldInfo, state);\n      return;\n    }\n    longs[0] = state.docTermStartFP - lastState.docTermStartFP;\n    if (fieldHasPositions) {\n      longs[1] = state.posTermStartFP - lastState.posTermStartFP;\n      if (fieldHasPayloads || fieldHasOffsets) {\n        if (state.payTermStartFP == -1) {\n          longs[2] = 0;\n        } else {\n          longs[2] = state.payTermStartFP - lastState.payTermStartFP;\n        }\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (fieldHasPositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    if (state.payTermStartFP == -1) {\n      state.payTermStartFP = lastState.payTermStartFP;\n    }\n    lastState = state;\n  }\n\n","sourceOld":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = newTermState();\n    }\n    //System.out.println(\"PW: state=\" + state);\n    //System.out.println(\"     last=\" + lastState);\n    if (VERSION_CURRENT < VERSION_META_ARRAY) {  // impersonation\n      _encodeTerm(out, fieldInfo, state);\n      return;\n    }\n    longs[0] = state.docTermStartFP - lastState.docTermStartFP;\n    if (fieldHasPositions) {\n      longs[1] = state.posTermStartFP - lastState.posTermStartFP;\n      if (fieldHasPayloads || fieldHasOffsets) {\n        if (state.payTermStartFP == -1) {\n          longs[2] = 0;\n        } else {\n          longs[2] = state.payTermStartFP - lastState.payTermStartFP;\n        }\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (fieldHasPositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    if (state.payTermStartFP == -1) {\n      state.payTermStartFP = lastState.payTermStartFP;\n    }\n    lastState = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75bb5d39efc3017188ad2881bd61b25153a8e3de","date":1378175814,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = newTermState();\n    }\n    if (VERSION_CURRENT < VERSION_META_ARRAY) {  // impersonation\n      _encodeTerm(out, fieldInfo, state);\n      return;\n    }\n    longs[0] = state.docTermStartFP - lastState.docTermStartFP;\n    if (fieldHasPositions) {\n      longs[1] = state.posTermStartFP - lastState.posTermStartFP;\n      if (fieldHasPayloads || fieldHasOffsets) {\n        longs[2] = state.payTermStartFP - lastState.payTermStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (fieldHasPositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    if (state.payTermStartFP == -1) {\n      state.payTermStartFP = lastState.payTermStartFP;\n    }\n    lastState = state;\n  }\n\n","sourceOld":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = newTermState();\n    }\n    if (VERSION_CURRENT < VERSION_META_ARRAY) {  // impersonation\n      _encodeTerm(out, fieldInfo, state);\n      return;\n    }\n    longs[0] = state.docTermStartFP - lastState.docTermStartFP;\n    if (fieldHasPositions) {\n      longs[1] = state.posTermStartFP - lastState.posTermStartFP;\n      if (fieldHasPayloads || fieldHasOffsets) {\n        if (state.payTermStartFP == -1) {\n          longs[2] = 0;\n        } else {\n          longs[2] = state.payTermStartFP - lastState.payTermStartFP;\n        }\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (fieldHasPositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    if (state.payTermStartFP == -1) {\n      state.payTermStartFP = lastState.payTermStartFP;\n    }\n    lastState = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"563ccede63f326b5dfd37df2341608ce1a80075d","date":1378480344,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docTermStartFP - lastState.docTermStartFP;\n    if (fieldHasPositions) {\n      longs[1] = state.posTermStartFP - lastState.posTermStartFP;\n      if (fieldHasPayloads || fieldHasOffsets) {\n        longs[2] = state.payTermStartFP - lastState.payTermStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (fieldHasPositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","sourceOld":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = newTermState();\n    }\n    if (VERSION_CURRENT < VERSION_META_ARRAY) {  // impersonation\n      _encodeTerm(out, fieldInfo, state);\n      return;\n    }\n    longs[0] = state.docTermStartFP - lastState.docTermStartFP;\n    if (fieldHasPositions) {\n      longs[1] = state.posTermStartFP - lastState.posTermStartFP;\n      if (fieldHasPayloads || fieldHasOffsets) {\n        longs[2] = state.payTermStartFP - lastState.payTermStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (fieldHasPositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    if (state.payTermStartFP == -1) {\n      state.payTermStartFP = lastState.payTermStartFP;\n    }\n    lastState = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"339d0e916669734510414f62912f1fcf120ecf9d","date":1378483491,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docStartFP - lastState.docStartFP;\n    if (fieldHasPositions) {\n      longs[1] = state.posStartFP - lastState.posStartFP;\n      if (fieldHasPayloads || fieldHasOffsets) {\n        longs[2] = state.payStartFP - lastState.payStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (fieldHasPositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","sourceOld":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docTermStartFP - lastState.docTermStartFP;\n    if (fieldHasPositions) {\n      longs[1] = state.posTermStartFP - lastState.posTermStartFP;\n      if (fieldHasPayloads || fieldHasOffsets) {\n        longs[2] = state.payTermStartFP - lastState.payTermStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (fieldHasPositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docStartFP - lastState.docStartFP;\n    if (fieldHasPositions) {\n      longs[1] = state.posStartFP - lastState.posStartFP;\n      if (fieldHasPayloads || fieldHasOffsets) {\n        longs[2] = state.payStartFP - lastState.payStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (fieldHasPositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docStartFP - lastState.docStartFP;\n    if (writePositions) {\n      longs[1] = state.posStartFP - lastState.posStartFP;\n      if (writePayloads || writeOffsets) {\n        longs[2] = state.payStartFP - lastState.payStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (writePositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","sourceOld":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docStartFP - lastState.docStartFP;\n    if (fieldHasPositions) {\n      longs[1] = state.posStartFP - lastState.posStartFP;\n      if (fieldHasPayloads || fieldHasOffsets) {\n        longs[2] = state.payStartFP - lastState.payStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (fieldHasPositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docStartFP - lastState.docStartFP;\n    if (writePositions) {\n      longs[1] = state.posStartFP - lastState.posStartFP;\n      if (writePayloads || writeOffsets) {\n        longs[2] = state.payStartFP - lastState.payStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (writePositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","sourceOld":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docStartFP - lastState.docStartFP;\n    if (writePositions) {\n      longs[1] = state.posStartFP - lastState.posStartFP;\n      if (writePayloads || writeOffsets) {\n        longs[2] = state.payStartFP - lastState.payStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (writePositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docStartFP - lastState.docStartFP;\n    if (writePositions) {\n      longs[1] = state.posStartFP - lastState.posStartFP;\n      if (writePayloads || writeOffsets) {\n        longs[2] = state.payStartFP - lastState.payStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (writePositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","sourceOld":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docStartFP - lastState.docStartFP;\n    if (writePositions) {\n      longs[1] = state.posStartFP - lastState.posStartFP;\n      if (writePayloads || writeOffsets) {\n        longs[2] = state.payStartFP - lastState.payStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (writePositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docStartFP - lastState.docStartFP;\n    if (writePositions) {\n      longs[1] = state.posStartFP - lastState.posStartFP;\n      if (writePayloads || writeOffsets) {\n        longs[2] = state.payStartFP - lastState.payStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (writePositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","sourceOld":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docStartFP - lastState.docStartFP;\n    if (writePositions) {\n      longs[1] = state.posStartFP - lastState.posStartFP;\n      if (writePayloads || writeOffsets) {\n        longs[2] = state.payStartFP - lastState.payStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (writePositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#encodeTerm(long[],DataOutput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docStartFP - lastState.docStartFP;\n    if (writePositions) {\n      longs[1] = state.posStartFP - lastState.posStartFP;\n      if (writePayloads || writeOffsets) {\n        longs[2] = state.payStartFP - lastState.payStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (writePositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","sourceOld":"  @Override\n  public void encodeTerm(long[] longs, DataOutput out, FieldInfo fieldInfo, BlockTermState _state, boolean absolute) throws IOException {\n    IntBlockTermState state = (IntBlockTermState)_state;\n    if (absolute) {\n      lastState = emptyState;\n    }\n    longs[0] = state.docStartFP - lastState.docStartFP;\n    if (writePositions) {\n      longs[1] = state.posStartFP - lastState.posStartFP;\n      if (writePayloads || writeOffsets) {\n        longs[2] = state.payStartFP - lastState.payStartFP;\n      }\n    }\n    if (state.singletonDocID != -1) {\n      out.writeVInt(state.singletonDocID);\n    }\n    if (writePositions) {\n      if (state.lastPosBlockOffset != -1) {\n        out.writeVLong(state.lastPosBlockOffset);\n      }\n    }\n    if (state.skipOffset != -1) {\n      out.writeVLong(state.skipOffset);\n    }\n    lastState = state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"339d0e916669734510414f62912f1fcf120ecf9d":["563ccede63f326b5dfd37df2341608ce1a80075d"],"563ccede63f326b5dfd37df2341608ce1a80075d":["75bb5d39efc3017188ad2881bd61b25153a8e3de"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"99eb4a732d1a908f4636ace52928876136bf1896":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"cff9c2f82cba41c789e4f62f8ca8c65585d48eb7":["e3263230f04a1aa8d431d722fdfce583a9542c18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52","99eb4a732d1a908f4636ace52928876136bf1896"],"75bb5d39efc3017188ad2881bd61b25153a8e3de":["cff9c2f82cba41c789e4f62f8ca8c65585d48eb7"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","339d0e916669734510414f62912f1fcf120ecf9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"e3263230f04a1aa8d431d722fdfce583a9542c18":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"]},"commit2Childs":{"339d0e916669734510414f62912f1fcf120ecf9d":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"563ccede63f326b5dfd37df2341608ce1a80075d":["339d0e916669734510414f62912f1fcf120ecf9d"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["e3263230f04a1aa8d431d722fdfce583a9542c18"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cff9c2f82cba41c789e4f62f8ca8c65585d48eb7":["75bb5d39efc3017188ad2881bd61b25153a8e3de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"75bb5d39efc3017188ad2881bd61b25153a8e3de":["563ccede63f326b5dfd37df2341608ce1a80075d"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"e3263230f04a1aa8d431d722fdfce583a9542c18":["cff9c2f82cba41c789e4f62f8ca8c65585d48eb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}