{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getChildrenArrays().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getChildrenArrays().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getChildrenArrays().mjava","sourceNew":"  /**\n   * getChildrenArrays() returns a {@link ChildrenArrays} object which can\n   * be used together to efficiently enumerate the children of any category. \n   * <P>\n   * The caller can hold on to the object it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the object which it got (and\n   * the arrays it contains) as read-only and <B>not modify it</B>, because\n   * other callers might have gotten the same object too.\n   * <P>\n   * Implementations should have O(getSize()) time for the first call or\n   * after a refresh(), but O(1) time for further calls. In neither case\n   * there should be a need to read new data from disk. These guarantees\n   * are most likely achieved by calculating this object (based on the\n   * getParentArray()) when first needed, and later (if the taxonomy was not\n   * refreshed) returning the same object (without any allocation or copying)\n   * when requested.\n   * <P>\n   * The reason we have one method returning one object, rather than two\n   * methods returning two arrays, is to avoid race conditions in a multi-\n   * threaded application: We want to avoid the possibility of returning one\n   * new array and one old array, as those could not be used together.\n   */\n  public ChildrenArrays getChildrenArrays();\n\n","sourceOld":"  /**\n   * getChildrenArrays() returns a {@link ChildrenArrays} object which can\n   * be used together to efficiently enumerate the children of any category. \n   * <P>\n   * The caller can hold on to the object it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the object which it got (and\n   * the arrays it contains) as read-only and <B>not modify it</B>, because\n   * other callers might have gotten the same object too.\n   * <P>\n   * Implementations should have O(getSize()) time for the first call or\n   * after a refresh(), but O(1) time for further calls. In neither case\n   * there should be a need to read new data from disk. These guarantees\n   * are most likely achieved by calculating this object (based on the\n   * getParentArray()) when first needed, and later (if the taxonomy was not\n   * refreshed) returning the same object (without any allocation or copying)\n   * when requested.\n   * <P>\n   * The reason we have one method returning one object, rather than two\n   * methods returning two arrays, is to avoid race conditions in a multi-\n   * threaded application: We want to avoid the possibility of returning one\n   * new array and one old array, as those could not be used together.\n   */\n  public ChildrenArrays getChildrenArrays();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getChildrenArrays().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getChildrenArrays().mjava","sourceNew":"  /**\n   * Returns a {@link ChildrenArrays} object which can be used together to\n   * efficiently enumerate the children of any category.\n   * <p>\n   * The caller can hold on to the object it got indefinitely - it is guaranteed\n   * that no-one else will modify it. The other side of the same coin is that\n   * the caller must treat the object which it got (and the arrays it contains)\n   * as read-only and <b>not modify it</b>, because other callers might have\n   * gotten the same object too.\n   */\n  public abstract ChildrenArrays getChildrenArrays() throws IOException;\n\n","sourceOld":"  /**\n   * getChildrenArrays() returns a {@link ChildrenArrays} object which can\n   * be used together to efficiently enumerate the children of any category. \n   * <P>\n   * The caller can hold on to the object it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the object which it got (and\n   * the arrays it contains) as read-only and <B>not modify it</B>, because\n   * other callers might have gotten the same object too.\n   * <P>\n   * Implementations should have O(getSize()) time for the first call or\n   * after a refresh(), but O(1) time for further calls. In neither case\n   * there should be a need to read new data from disk. These guarantees\n   * are most likely achieved by calculating this object (based on the\n   * getParentArray()) when first needed, and later (if the taxonomy was not\n   * refreshed) returning the same object (without any allocation or copying)\n   * when requested.\n   * <P>\n   * The reason we have one method returning one object, rather than two\n   * methods returning two arrays, is to avoid race conditions in a multi-\n   * threaded application: We want to avoid the possibility of returning one\n   * new array and one old array, as those could not be used together.\n   */\n  public ChildrenArrays getChildrenArrays();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d58d08788c3fd51172ba34474cca42499d6391b","date":1354802133,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getChildrenArrays().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a {@link ChildrenArrays} object which can be used together to\n   * efficiently enumerate the children of any category.\n   * <p>\n   * The caller can hold on to the object it got indefinitely - it is guaranteed\n   * that no-one else will modify it. The other side of the same coin is that\n   * the caller must treat the object which it got (and the arrays it contains)\n   * as read-only and <b>not modify it</b>, because other callers might have\n   * gotten the same object too.\n   */\n  public abstract ChildrenArrays getChildrenArrays() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getChildrenArrays().mjava","sourceNew":null,"sourceOld":"  /**\n   * getChildrenArrays() returns a {@link ChildrenArrays} object which can\n   * be used together to efficiently enumerate the children of any category. \n   * <P>\n   * The caller can hold on to the object it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the object which it got (and\n   * the arrays it contains) as read-only and <B>not modify it</B>, because\n   * other callers might have gotten the same object too.\n   * <P>\n   * Implementations should have O(getSize()) time for the first call or\n   * after a refresh(), but O(1) time for further calls. In neither case\n   * there should be a need to read new data from disk. These guarantees\n   * are most likely achieved by calculating this object (based on the\n   * getParentArray()) when first needed, and later (if the taxonomy was not\n   * refreshed) returning the same object (without any allocation or copying)\n   * when requested.\n   * <P>\n   * The reason we have one method returning one object, rather than two\n   * methods returning two arrays, is to avoid race conditions in a multi-\n   * threaded application: We want to avoid the possibility of returning one\n   * new array and one old array, as those could not be used together.\n   */\n  public ChildrenArrays getChildrenArrays();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","3d58d08788c3fd51172ba34474cca42499d6391b"],"3d58d08788c3fd51172ba34474cca42499d6391b":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3d58d08788c3fd51172ba34474cca42499d6391b"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["407687e67faf6e1f02a211ca078d8e3eed631027","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3d58d08788c3fd51172ba34474cca42499d6391b":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["3d58d08788c3fd51172ba34474cca42499d6391b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}