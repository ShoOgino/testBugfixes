{"path":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getFieldOrNull(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getFieldOrNull(String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/IndexSchema#getFieldOrNull(String).mjava","sourceNew":"  /**\n   * Returns the SchemaField that should be used for the specified field name, or\n   * null if none exists.\n   *\n   * @param fieldName may be an explicitly defined field or a name that\n   * matches a dynamic field.\n   * @see #getFieldType\n   * @see #getField(String)\n   * @return The {@link org.apache.solr.schema.SchemaField}\n   */\n  public SchemaField getFieldOrNull(String fieldName) {\n    SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    return f;\n  }\n\n","sourceOld":"  /**\n   * Returns the SchemaField that should be used for the specified field name, or\n   * null if none exists.\n   *\n   * @param fieldName may be an explicitly defined field or a name that\n   * matches a dynamic field.\n   * @see #getFieldType\n   * @see #getField(String)\n   * @return The {@link org.apache.solr.schema.SchemaField}\n   */\n  public SchemaField getFieldOrNull(String fieldName) {\n    SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getFieldOrNull(String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/IndexSchema#getFieldOrNull(String).mjava","sourceNew":"  /**\n   * Returns the SchemaField that should be used for the specified field name, or\n   * null if none exists.\n   *\n   * @param fieldName may be an explicitly defined field or a name that\n   * matches a dynamic field.\n   * @see #getFieldType\n   * @see #getField(String)\n   * @return The {@link org.apache.solr.schema.SchemaField}\n   */\n  public SchemaField getFieldOrNull(String fieldName) {\n    SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    return f;\n  }\n\n","sourceOld":"  /**\n   * Returns the SchemaField that should be used for the specified field name, or\n   * null if none exists.\n   *\n   * @param fieldName may be an explicitly defined field or a name that\n   * matches a dynamic field.\n   * @see #getFieldType\n   * @see #getField(String)\n   * @return The {@link org.apache.solr.schema.SchemaField}\n   */\n  public SchemaField getFieldOrNull(String fieldName) {\n    SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getFieldOrNull(String).mjava","pathOld":"solr/src/java/org/apache/solr/schema/IndexSchema#getFieldOrNull(String).mjava","sourceNew":"  /**\n   * Returns the SchemaField that should be used for the specified field name, or\n   * null if none exists.\n   *\n   * @param fieldName may be an explicitly defined field or a name that\n   * matches a dynamic field.\n   * @see #getFieldType\n   * @see #getField(String)\n   * @return The {@link org.apache.solr.schema.SchemaField}\n   */\n  public SchemaField getFieldOrNull(String fieldName) {\n    SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    return f;\n  }\n\n","sourceOld":"  /**\n   * Returns the SchemaField that should be used for the specified field name, or\n   * null if none exists.\n   *\n   * @param fieldName may be an explicitly defined field or a name that\n   * matches a dynamic field.\n   * @see #getFieldType\n   * @see #getField(String)\n   * @return The {@link org.apache.solr.schema.SchemaField}\n   */\n  public SchemaField getFieldOrNull(String fieldName) {\n    SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e7ba4f223712927a09f4dfb65a4c261d07ccc54","date":1544513757,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getFieldOrNull(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getFieldOrNull(String).mjava","sourceNew":"  /**\n   * Returns the SchemaField that should be used for the specified field name, or\n   * null if none exists.\n   *\n   * @param fieldName may be an explicitly defined field or a name that\n   * matches a dynamic field.\n   * @see #getFieldType\n   * @see #getField(String)\n   * @return The {@link org.apache.solr.schema.SchemaField}\n   */\n  public SchemaField getFieldOrNull(String fieldName) {\n    SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n    f = dynamicFieldCache.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) {\n        dynamicFieldCache.put(fieldName, f = df.makeSchemaField(fieldName));\n        break;\n      }\n    }\n\n    return f;\n  }\n\n","sourceOld":"  /**\n   * Returns the SchemaField that should be used for the specified field name, or\n   * null if none exists.\n   *\n   * @param fieldName may be an explicitly defined field or a name that\n   * matches a dynamic field.\n   * @see #getFieldType\n   * @see #getField(String)\n   * @return The {@link org.apache.solr.schema.SchemaField}\n   */\n  public SchemaField getFieldOrNull(String fieldName) {\n    SchemaField f = fields.get(fieldName);\n    if (f != null) return f;\n\n    for (DynamicField df : dynamicFields) {\n      if (df.matches(fieldName)) return df.makeSchemaField(fieldName);\n    }\n\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e7ba4f223712927a09f4dfb65a4c261d07ccc54":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e7ba4f223712927a09f4dfb65a4c261d07ccc54"]},"commit2Childs":{"4e7ba4f223712927a09f4dfb65a4c261d07ccc54":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["4e7ba4f223712927a09f4dfb65a4c261d07ccc54"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}