{"path":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testSortAndDedupNumericUpdatesByTerms().mjava","commits":[{"id":"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8","date":1582222690,"type":0,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testSortAndDedupNumericUpdatesByTerms().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortAndDedupNumericUpdatesByTerms() throws IOException {\n    List<DocValuesUpdate.NumericDocValuesUpdate> updates = new ArrayList<>();\n    int numUpdates = 1 + random().nextInt(1000);\n    Counter counter = Counter.newCounter();\n    String termField = RandomPicks.randomFrom(random(), Arrays.asList(\"id\", \"_id\", \"some_other_field\"));\n    long docValue = 1 + random().nextInt(1000);\n    DocValuesUpdate.NumericDocValuesUpdate randomUpdate = new DocValuesUpdate.NumericDocValuesUpdate(\n        new Term(termField, Integer.toString(random().nextInt(1000))), \"numeric\", docValue);\n    randomUpdate = randomUpdate.prepareForApply(randomDocUpTo());\n    updates.add(randomUpdate);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, randomUpdate, randomUpdate.docIDUpto);\n    for (int i = 0; i < numUpdates; i++) {\n      randomUpdate = new DocValuesUpdate.NumericDocValuesUpdate(\n          new Term(termField, Integer.toString(random().nextInt(1000))), \"numeric\", docValue);\n      randomUpdate = randomUpdate.prepareForApply(randomDocUpTo());\n      updates.add(randomUpdate);\n      buffer.addUpdate(randomUpdate.term, randomUpdate.getValue(), randomUpdate.docIDUpto);\n    }\n    buffer.finish();\n    assertBufferUpdates(buffer, updates, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f94c392daa8f5708186bede16c84eafad4cdd2","date":1599578873,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testSortAndDedupNumericUpdatesByTerms().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testSortAndDedupNumericUpdatesByTerms().mjava","sourceNew":"  public void testSortAndDedupNumericUpdatesByTerms() throws IOException {\n    List<DocValuesUpdate.NumericDocValuesUpdate> updates = new ArrayList<>();\n    int numUpdates = 1 + random().nextInt(1000);\n    Counter counter = Counter.newCounter();\n    String termField = RandomPicks.randomFrom(random(), Arrays.asList(\"id\", \"_id\", \"some_other_field\"));\n    long docValue = 1 + random().nextInt(1000);\n    DocValuesUpdate.NumericDocValuesUpdate randomUpdate = new DocValuesUpdate.NumericDocValuesUpdate(\n        new Term(termField, Integer.toString(random().nextInt(1000))), \"numeric\", docValue);\n    randomUpdate = randomUpdate.prepareForApply(randomDocUpTo());\n    updates.add(randomUpdate);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, randomUpdate, randomUpdate.docIDUpTo);\n    for (int i = 0; i < numUpdates; i++) {\n      randomUpdate = new DocValuesUpdate.NumericDocValuesUpdate(\n          new Term(termField, Integer.toString(random().nextInt(1000))), \"numeric\", docValue);\n      randomUpdate = randomUpdate.prepareForApply(randomDocUpTo());\n      updates.add(randomUpdate);\n      buffer.addUpdate(randomUpdate.term, randomUpdate.getValue(), randomUpdate.docIDUpTo);\n    }\n    buffer.finish();\n    assertBufferUpdates(buffer, updates, true);\n  }\n\n","sourceOld":"  public void testSortAndDedupNumericUpdatesByTerms() throws IOException {\n    List<DocValuesUpdate.NumericDocValuesUpdate> updates = new ArrayList<>();\n    int numUpdates = 1 + random().nextInt(1000);\n    Counter counter = Counter.newCounter();\n    String termField = RandomPicks.randomFrom(random(), Arrays.asList(\"id\", \"_id\", \"some_other_field\"));\n    long docValue = 1 + random().nextInt(1000);\n    DocValuesUpdate.NumericDocValuesUpdate randomUpdate = new DocValuesUpdate.NumericDocValuesUpdate(\n        new Term(termField, Integer.toString(random().nextInt(1000))), \"numeric\", docValue);\n    randomUpdate = randomUpdate.prepareForApply(randomDocUpTo());\n    updates.add(randomUpdate);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, randomUpdate, randomUpdate.docIDUpto);\n    for (int i = 0; i < numUpdates; i++) {\n      randomUpdate = new DocValuesUpdate.NumericDocValuesUpdate(\n          new Term(termField, Integer.toString(random().nextInt(1000))), \"numeric\", docValue);\n      randomUpdate = randomUpdate.prepareForApply(randomDocUpTo());\n      updates.add(randomUpdate);\n      buffer.addUpdate(randomUpdate.term, randomUpdate.getValue(), randomUpdate.docIDUpto);\n    }\n    buffer.finish();\n    assertBufferUpdates(buffer, updates, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9f94c392daa8f5708186bede16c84eafad4cdd2":["fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9f94c392daa8f5708186bede16c84eafad4cdd2"]},"commit2Childs":{"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8":["c9f94c392daa8f5708186bede16c84eafad4cdd2"],"c9f94c392daa8f5708186bede16c84eafad4cdd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}