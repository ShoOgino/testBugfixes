{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#tryToBeInsane(AtomicReader,String,DocValuesType,DocValuesType).mjava","commits":[{"id":"5275a994b4fc707fafce0408625bd3456edc28a4","date":1400004510,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#tryToBeInsane(AtomicReader,String,DocValuesType,DocValuesType).mjava","pathOld":"/dev/null","sourceNew":"  private void tryToBeInsane(AtomicReader reader, String field, DocValuesType actualType, DocValuesType insaneType) throws IOException {\n    try {\n      switch(insaneType) {\n        case NUMERIC:\n          reader.getNumericDocValues(field);\n          break;\n        case SORTED:\n          reader.getSortedDocValues(field);\n          break;\n        case BINARY:\n          reader.getBinaryDocValues(field);\n          break;\n        case SORTED_SET:\n          reader.getSortedSetDocValues(field);\n        default:\n          throw new AssertionError();\n      }\n      fail(\"didn't get expected exception: actual=\" + actualType + \",insane=\" + insaneType);\n    } catch (IllegalStateException expected) {}\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#tryToBeInsane(AtomicReader,String,DocValuesType,DocValuesType).mjava","pathOld":"/dev/null","sourceNew":"  private void tryToBeInsane(AtomicReader reader, String field, DocValuesType actualType, DocValuesType insaneType) throws IOException {\n    try {\n      switch(insaneType) {\n        case NUMERIC:\n          reader.getNumericDocValues(field);\n          break;\n        case SORTED:\n          reader.getSortedDocValues(field);\n          break;\n        case BINARY:\n          reader.getBinaryDocValues(field);\n          break;\n        case SORTED_SET:\n          reader.getSortedSetDocValues(field);\n        default:\n          throw new AssertionError();\n      }\n      fail(\"didn't get expected exception: actual=\" + actualType + \",insane=\" + insaneType);\n    } catch (IllegalStateException expected) {}\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#tryToBeInsane(AtomicReader,String,DocValuesType,DocValuesType).mjava","pathOld":"/dev/null","sourceNew":"  private void tryToBeInsane(AtomicReader reader, String field, DocValuesType actualType, DocValuesType insaneType) throws IOException {\n    try {\n      switch(insaneType) {\n        case NUMERIC:\n          reader.getNumericDocValues(field);\n          break;\n        case SORTED:\n          reader.getSortedDocValues(field);\n          break;\n        case BINARY:\n          reader.getBinaryDocValues(field);\n          break;\n        case SORTED_SET:\n          reader.getSortedSetDocValues(field);\n        default:\n          throw new AssertionError();\n      }\n      fail(\"didn't get expected exception: actual=\" + actualType + \",insane=\" + insaneType);\n    } catch (IllegalStateException expected) {}\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#tryToBeInsane(AtomicReader,String,DocValuesType,DocValuesType).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#tryToBeInsane(AtomicReader,String,DocValuesType,DocValuesType).mjava","sourceNew":"  private void tryToBeInsane(AtomicReader reader, String field, DocValuesType actualType, DocValuesType insaneType) throws IOException {\n    try {\n      switch(insaneType) {\n        case NUMERIC:\n          reader.getNumericDocValues(field);\n          break;\n        case SORTED:\n          reader.getSortedDocValues(field);\n          break;\n        case BINARY:\n          reader.getBinaryDocValues(field);\n          break;\n        case SORTED_SET:\n          reader.getSortedSetDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          // not supported\n          return;\n        default:\n          throw new AssertionError();\n      }\n      fail(\"didn't get expected exception: actual=\" + actualType + \",insane=\" + insaneType);\n    } catch (IllegalStateException expected) {}\n  }\n\n","sourceOld":"  private void tryToBeInsane(AtomicReader reader, String field, DocValuesType actualType, DocValuesType insaneType) throws IOException {\n    try {\n      switch(insaneType) {\n        case NUMERIC:\n          reader.getNumericDocValues(field);\n          break;\n        case SORTED:\n          reader.getSortedDocValues(field);\n          break;\n        case BINARY:\n          reader.getBinaryDocValues(field);\n          break;\n        case SORTED_SET:\n          reader.getSortedSetDocValues(field);\n        default:\n          throw new AssertionError();\n      }\n      fail(\"didn't get expected exception: actual=\" + actualType + \",insane=\" + insaneType);\n    } catch (IllegalStateException expected) {}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#tryToBeInsane(AtomicReader,String,DocValuesType,DocValuesType).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#tryToBeInsane(AtomicReader,String,DocValuesType,DocValuesType).mjava","sourceNew":"  private void tryToBeInsane(AtomicReader reader, String field, DocValuesType actualType, DocValuesType insaneType) throws IOException {\n    try {\n      switch(insaneType) {\n        case NUMERIC:\n          reader.getNumericDocValues(field);\n          break;\n        case SORTED:\n          reader.getSortedDocValues(field);\n          break;\n        case BINARY:\n          reader.getBinaryDocValues(field);\n          break;\n        case SORTED_SET:\n          reader.getSortedSetDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          // not supported\n          return;\n        default:\n          throw new AssertionError();\n      }\n      fail(\"didn't get expected exception: actual=\" + actualType + \",insane=\" + insaneType);\n    } catch (IllegalStateException expected) {}\n  }\n\n","sourceOld":"  private void tryToBeInsane(AtomicReader reader, String field, DocValuesType actualType, DocValuesType insaneType) throws IOException {\n    try {\n      switch(insaneType) {\n        case NUMERIC:\n          reader.getNumericDocValues(field);\n          break;\n        case SORTED:\n          reader.getSortedDocValues(field);\n          break;\n        case BINARY:\n          reader.getBinaryDocValues(field);\n          break;\n        case SORTED_SET:\n          reader.getSortedSetDocValues(field);\n        default:\n          throw new AssertionError();\n      }\n      fail(\"didn't get expected exception: actual=\" + actualType + \",insane=\" + insaneType);\n    } catch (IllegalStateException expected) {}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b3768e97375c7a745c68f0b54710e8bedccc11","date":1406635606,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#tryToBeInsane(AtomicReader,String,DocValuesType,DocValuesType).mjava","sourceNew":null,"sourceOld":"  private void tryToBeInsane(AtomicReader reader, String field, DocValuesType actualType, DocValuesType insaneType) throws IOException {\n    try {\n      switch(insaneType) {\n        case NUMERIC:\n          reader.getNumericDocValues(field);\n          break;\n        case SORTED:\n          reader.getSortedDocValues(field);\n          break;\n        case BINARY:\n          reader.getBinaryDocValues(field);\n          break;\n        case SORTED_SET:\n          reader.getSortedSetDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          // not supported\n          return;\n        default:\n          throw new AssertionError();\n      }\n      fail(\"didn't get expected exception: actual=\" + actualType + \",insane=\" + insaneType);\n    } catch (IllegalStateException expected) {}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5275a994b4fc707fafce0408625bd3456edc28a4"],"5275a994b4fc707fafce0408625bd3456edc28a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b0b3768e97375c7a745c68f0b54710e8bedccc11":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["93dd449115a9247533e44bab47e8429e5dccbc6d","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b0b3768e97375c7a745c68f0b54710e8bedccc11"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","56572ec06f1407c066d6b7399413178b33176cd8","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"5275a994b4fc707fafce0408625bd3456edc28a4":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","5275a994b4fc707fafce0408625bd3456edc28a4","56572ec06f1407c066d6b7399413178b33176cd8"],"b0b3768e97375c7a745c68f0b54710e8bedccc11":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["b0b3768e97375c7a745c68f0b54710e8bedccc11","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}