{"path":"lucene/sandbox/src/java/org/apache/lucene/search/NearestNeighbor.Cell#toString().mjava","commits":[{"id":"88b0212386fe531136816706dc37dc49b9dbf7dc","date":1532560226,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/NearestNeighbor.Cell#toString().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.Cell#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      double minLat = decodeLatitude(minPacked, 0);\n      double minLon = decodeLongitude(minPacked, Integer.BYTES);\n      double maxLat = decodeLatitude(maxPacked, 0);\n      double maxLon = decodeLongitude(maxPacked, Integer.BYTES);\n      return \"Cell(readerIndex=\" + readerIndex + \" nodeID=\" + index.getNodeID() + \" isLeaf=\" + index.isLeafNode() + \" lat=\" + minLat + \" TO \" + maxLat + \", lon=\" + minLon + \" TO \" + maxLon + \"; distanceMeters=\" + distanceMeters + \")\";\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      double minLat = decodeLatitude(minPacked, 0);\n      double minLon = decodeLongitude(minPacked, Integer.BYTES);\n      double maxLat = decodeLatitude(maxPacked, 0);\n      double maxLon = decodeLongitude(maxPacked, Integer.BYTES);\n      return \"Cell(readerIndex=\" + readerIndex + \" nodeID=\" + index.getNodeID() + \" isLeaf=\" + index.isLeafNode() + \" lat=\" + minLat + \" TO \" + maxLat + \", lon=\" + minLon + \" TO \" + maxLon + \"; distanceMeters=\" + distanceMeters + \")\";\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f703b580a38c8a12d78077283f2372b6f65312a0","date":1566551787,"type":3,"author":"Julie Tibshirani","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/NearestNeighbor.Cell#toString().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/NearestNeighbor.Cell#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      double minLat = decodeLatitude(minPacked, 0);\n      double minLon = decodeLongitude(minPacked, Integer.BYTES);\n      double maxLat = decodeLatitude(maxPacked, 0);\n      double maxLon = decodeLongitude(maxPacked, Integer.BYTES);\n      return \"Cell(readerIndex=\" + readerIndex + \" nodeID=\" + index.getNodeID() + \" isLeaf=\" + index.isLeafNode() + \" lat=\" + minLat + \" TO \" + maxLat + \", lon=\" + minLon + \" TO \" + maxLon + \"; distanceSortKey=\" + distanceSortKey + \")\";\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      double minLat = decodeLatitude(minPacked, 0);\n      double minLon = decodeLongitude(minPacked, Integer.BYTES);\n      double maxLat = decodeLatitude(maxPacked, 0);\n      double maxLon = decodeLongitude(maxPacked, Integer.BYTES);\n      return \"Cell(readerIndex=\" + readerIndex + \" nodeID=\" + index.getNodeID() + \" isLeaf=\" + index.isLeafNode() + \" lat=\" + minLat + \" TO \" + maxLat + \", lon=\" + minLon + \" TO \" + maxLon + \"; distanceMeters=\" + distanceMeters + \")\";\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"88b0212386fe531136816706dc37dc49b9dbf7dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f703b580a38c8a12d78077283f2372b6f65312a0":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f703b580a38c8a12d78077283f2372b6f65312a0"]},"commit2Childs":{"88b0212386fe531136816706dc37dc49b9dbf7dc":["f703b580a38c8a12d78077283f2372b6f65312a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"f703b580a38c8a12d78077283f2372b6f65312a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}