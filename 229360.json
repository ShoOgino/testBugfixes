{"path":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testHashCodeEquals().mjava","commits":[{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testHashCodeEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testHashCodeEquals() {\n    // This test can't handle numBits==0:\n    final int numBits = random().nextInt(2000) + 1;\n    LongBitSet b1 = new LongBitSet(numBits);\n    LongBitSet b2 = new LongBitSet(numBits);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      int idx = random().nextInt(numBits);\n      if (!b1.get(idx)) {\n        b1.set(idx);\n        assertFalse(b1.equals(b2));\n        assertFalse(b1.hashCode() == b2.hashCode());\n        b2.set(idx);\n        assertEquals(b1, b2);\n        assertEquals(b1.hashCode(), b2.hashCode());\n      }\n    }\n  } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0928240f49ec17419b86cc8df48087ea42980fba","date":1504271720,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testHashCodeEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testHashCodeEquals().mjava","sourceNew":"  public void testHashCodeEquals() {\n    // This test can't handle numBits==0:\n    final int numBits = random().nextInt(2000) + 1;\n    LongBitSet b1 = new LongBitSet(numBits);\n    LongBitSet b2 = new LongBitSet(numBits);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      int idx = random().nextInt(numBits);\n      if (!b1.get(idx)) {\n        b1.set(idx);\n        assertFalse(b1.equals(b2));\n        assertFalse(b1.hashCode() == b2.hashCode());\n        b2.set(idx);\n        assertEquals(b1, b2);\n        assertEquals(b1.hashCode(), b2.hashCode());\n      }\n    }\n  }\n\n","sourceOld":"  public void testHashCodeEquals() {\n    // This test can't handle numBits==0:\n    final int numBits = random().nextInt(2000) + 1;\n    LongBitSet b1 = new LongBitSet(numBits);\n    LongBitSet b2 = new LongBitSet(numBits);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      int idx = random().nextInt(numBits);\n      if (!b1.get(idx)) {\n        b1.set(idx);\n        assertFalse(b1.equals(b2));\n        assertFalse(b1.hashCode() == b2.hashCode());\n        b2.set(idx);\n        assertEquals(b1, b2);\n        assertEquals(b1.hashCode(), b2.hashCode());\n      }\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testHashCodeEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testHashCodeEquals().mjava","sourceNew":"  public void testHashCodeEquals() {\n    // This test can't handle numBits==0:\n    final int numBits = random().nextInt(2000) + 1;\n    LongBitSet b1 = new LongBitSet(numBits);\n    LongBitSet b2 = new LongBitSet(numBits);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      int idx = random().nextInt(numBits);\n      if (!b1.get(idx)) {\n        b1.set(idx);\n        assertFalse(b1.equals(b2));\n        assertFalse(b1.hashCode() == b2.hashCode());\n        b2.set(idx);\n        assertEquals(b1, b2);\n        assertEquals(b1.hashCode(), b2.hashCode());\n      }\n    }\n  }\n\n","sourceOld":"  public void testHashCodeEquals() {\n    // This test can't handle numBits==0:\n    final int numBits = random().nextInt(2000) + 1;\n    LongBitSet b1 = new LongBitSet(numBits);\n    LongBitSet b2 = new LongBitSet(numBits);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      int idx = random().nextInt(numBits);\n      if (!b1.get(idx)) {\n        b1.set(idx);\n        assertFalse(b1.equals(b2));\n        assertFalse(b1.hashCode() == b2.hashCode());\n        b2.set(idx);\n        assertEquals(b1, b2);\n        assertEquals(b1.hashCode(), b2.hashCode());\n      }\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testHashCodeEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testHashCodeEquals().mjava","sourceNew":"  public void testHashCodeEquals() {\n    // This test can't handle numBits==0:\n    final int numBits = random().nextInt(2000) + 1;\n    LongBitSet b1 = new LongBitSet(numBits);\n    LongBitSet b2 = new LongBitSet(numBits);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      int idx = random().nextInt(numBits);\n      if (!b1.get(idx)) {\n        b1.set(idx);\n        assertFalse(b1.equals(b2));\n        assertFalse(b1.hashCode() == b2.hashCode());\n        b2.set(idx);\n        assertEquals(b1, b2);\n        assertEquals(b1.hashCode(), b2.hashCode());\n      }\n    }\n  }\n\n","sourceOld":"  public void testHashCodeEquals() {\n    // This test can't handle numBits==0:\n    final int numBits = random().nextInt(2000) + 1;\n    LongBitSet b1 = new LongBitSet(numBits);\n    LongBitSet b2 = new LongBitSet(numBits);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      int idx = random().nextInt(numBits);\n      if (!b1.get(idx)) {\n        b1.set(idx);\n        assertFalse(b1.equals(b2));\n        assertFalse(b1.hashCode() == b2.hashCode());\n        b2.set(idx);\n        assertEquals(b1, b2);\n        assertEquals(b1.hashCode(), b2.hashCode());\n      }\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testHashCodeEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLongBitSet#testHashCodeEquals().mjava","sourceNew":"  public void testHashCodeEquals() {\n    // This test can't handle numBits==0:\n    final int numBits = random().nextInt(2000) + 1;\n    LongBitSet b1 = new LongBitSet(numBits);\n    LongBitSet b2 = new LongBitSet(numBits);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      int idx = random().nextInt(numBits);\n      if (!b1.get(idx)) {\n        b1.set(idx);\n        assertFalse(b1.equals(b2));\n        assertFalse(b1.hashCode() == b2.hashCode());\n        b2.set(idx);\n        assertEquals(b1, b2);\n        assertEquals(b1.hashCode(), b2.hashCode());\n      }\n    }\n  }\n\n","sourceOld":"  public void testHashCodeEquals() {\n    // This test can't handle numBits==0:\n    final int numBits = random().nextInt(2000) + 1;\n    LongBitSet b1 = new LongBitSet(numBits);\n    LongBitSet b2 = new LongBitSet(numBits);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      int idx = random().nextInt(numBits);\n      if (!b1.get(idx)) {\n        b1.set(idx);\n        assertFalse(b1.equals(b2));\n        assertFalse(b1.hashCode() == b2.hashCode());\n        b2.set(idx);\n        assertEquals(b1, b2);\n        assertEquals(b1.hashCode(), b2.hashCode());\n      }\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["3995f83351082af8ae83bb017e63c56818fc1568","0928240f49ec17419b86cc8df48087ea42980fba"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["3995f83351082af8ae83bb017e63c56818fc1568","b21283ed01203901a7257aa4b7f0a0899c86e56e"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["3995f83351082af8ae83bb017e63c56818fc1568","0928240f49ec17419b86cc8df48087ea42980fba"],"0928240f49ec17419b86cc8df48087ea42980fba":["3995f83351082af8ae83bb017e63c56818fc1568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3995f83351082af8ae83bb017e63c56818fc1568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"]},"commit2Childs":{"b21283ed01203901a7257aa4b7f0a0899c86e56e":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"0928240f49ec17419b86cc8df48087ea42980fba":["b21283ed01203901a7257aa4b7f0a0899c86e56e","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3995f83351082af8ae83bb017e63c56818fc1568"],"3995f83351082af8ae83bb017e63c56818fc1568":["b21283ed01203901a7257aa4b7f0a0899c86e56e","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","3a7809d1d753b67f48b1a706e17034bf8b624ea3","0928240f49ec17419b86cc8df48087ea42980fba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}