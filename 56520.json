{"path":"solr/core/src/java/org/apache/solr/search/DocSetUtil#getDocSet(DocSetCollector,SolrIndexSearcher).mjava","commits":[{"id":"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3","date":1485881524,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetUtil#getDocSet(DocSetCollector,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This variant of getDocSet will attempt to do some deduplication\n   * on certain DocSets such as DocSets that match numDocs.  This means it can return\n   * a cached version of the set, and the returned set should not be modified.\n   * @lucene.experimental\n   */\n  public static DocSet getDocSet(DocSetCollector collector, SolrIndexSearcher searcher) {\n    if (collector.size() == searcher.numDocs()) {\n      if (!searcher.isLiveDocsInstantiated()) {\n        searcher.setLiveDocs( collector.getDocSet() );\n      }\n      try {\n        return searcher.getLiveDocs();\n      } catch (IOException e) {\n        // should be impossible... liveDocs should exist, so no IO should be necessary\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n\n    return collector.getDocSet();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetUtil#getDocSet(DocSetCollector,SolrIndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This variant of getDocSet will attempt to do some deduplication\n   * on certain DocSets such as DocSets that match numDocs.  This means it can return\n   * a cached version of the set, and the returned set should not be modified.\n   * @lucene.experimental\n   */\n  public static DocSet getDocSet(DocSetCollector collector, SolrIndexSearcher searcher) {\n    if (collector.size() == searcher.numDocs()) {\n      if (!searcher.isLiveDocsInstantiated()) {\n        searcher.setLiveDocs( collector.getDocSet() );\n      }\n      try {\n        return searcher.getLiveDocs();\n      } catch (IOException e) {\n        // should be impossible... liveDocs should exist, so no IO should be necessary\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n\n    return collector.getDocSet();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf29cc8a76949bbcbc15b386a9e46a533f5b3332","date":1527778512,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetUtil#getDocSet(DocSetCollector,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetUtil#getDocSet(DocSetCollector,SolrIndexSearcher).mjava","sourceNew":"  /**\n   * This variant of getDocSet will attempt to do some deduplication\n   * on certain DocSets such as DocSets that match numDocs.  This means it can return\n   * a cached version of the set, and the returned set should not be modified.\n   * @lucene.experimental\n   */\n  public static DocSet getDocSet(DocSetCollector collector, SolrIndexSearcher searcher) {\n    if (collector.size() == searcher.numDocs()) {\n      if (!searcher.isLiveDocsInstantiated()) {\n        searcher.setLiveDocs( collector.getDocSet() );\n      }\n      try {\n        return searcher.getLiveDocSet();\n      } catch (IOException e) {\n        // should be impossible... liveDocs should exist, so no IO should be necessary\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n\n    return collector.getDocSet();\n  }\n\n","sourceOld":"  /**\n   * This variant of getDocSet will attempt to do some deduplication\n   * on certain DocSets such as DocSets that match numDocs.  This means it can return\n   * a cached version of the set, and the returned set should not be modified.\n   * @lucene.experimental\n   */\n  public static DocSet getDocSet(DocSetCollector collector, SolrIndexSearcher searcher) {\n    if (collector.size() == searcher.numDocs()) {\n      if (!searcher.isLiveDocsInstantiated()) {\n        searcher.setLiveDocs( collector.getDocSet() );\n      }\n      try {\n        return searcher.getLiveDocs();\n      } catch (IOException e) {\n        // should be impossible... liveDocs should exist, so no IO should be necessary\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      }\n    }\n\n    return collector.getDocSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bf29cc8a76949bbcbc15b386a9e46a533f5b3332":["0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf29cc8a76949bbcbc15b386a9e46a533f5b3332"]},"commit2Childs":{"bf29cc8a76949bbcbc15b386a9e46a533f5b3332":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"0cb5245d4a5c7ba59bbfdedb7ace8a9fbd36ada3":["bf29cc8a76949bbcbc15b386a9e46a533f5b3332","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}