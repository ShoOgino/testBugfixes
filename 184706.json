{"path":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String,Comparator[TermStats]).mjava","commits":[{"id":"f0aae73ca2eeb899108e9fe36611ddf5a83ec790","date":1378482998,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String,Comparator[TermStats]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String).mjava","sourceNew":"  /**\n   * Returns TermStats[] ordered by the specified comparator\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field, Comparator<TermStats> comparator) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        tiq = new TermStatsQueue(numTerms, comparator);\n        tiq.fill(field, termsEnum);\n      }\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms, comparator);\n      for (String fieldName : fields) {\n        Terms terms = fields.terms(fieldName);\n        if (terms != null) {\n          tiq.fill(fieldName, terms.iterator(null));\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns TermStats[] ordered by terms with highest docFreq first.\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        tiq = new TermStatsQueue(numTerms);\n        tiq.fill(field, termsEnum);\n      }\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms);\n      for (String fieldName : fields) {\n        Terms terms = fields.terms(fieldName);\n        if (terms != null) {\n          tiq.fill(fieldName, terms.iterator(null));\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8028ab7a24273833d53d35eb160dba5b57283cf5","date":1416767720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String,Comparator[TermStats]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String,Comparator[TermStats]).mjava","sourceNew":"  /**\n   * Returns TermStats[] ordered by the specified comparator\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field, Comparator<TermStats> comparator) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Terms terms = MultiFields.getTerms(reader, field);\n      if (terms == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n      tiq = new TermStatsQueue(numTerms, comparator);\n      tiq.fill(field, termsEnum);\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields.size() == 0) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms, comparator);\n      for (String fieldName : fields) {\n        Terms terms = fields.terms(fieldName);\n        if (terms != null) {\n          tiq.fill(fieldName, terms.iterator(null));\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns TermStats[] ordered by the specified comparator\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field, Comparator<TermStats> comparator) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n      Terms terms = fields.terms(field);\n      if (terms != null) {\n        TermsEnum termsEnum = terms.iterator(null);\n        tiq = new TermStatsQueue(numTerms, comparator);\n        tiq.fill(field, termsEnum);\n      }\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields == null) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms, comparator);\n      for (String fieldName : fields) {\n        Terms terms = fields.terms(fieldName);\n        if (terms != null) {\n          tiq.fill(fieldName, terms.iterator(null));\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","bugFix":["1513361122ebc5ddd6075f633cd77d2345611767","f0aae73ca2eeb899108e9fe36611ddf5a83ec790","c1384ca7a3f6c23e84ab220381ba3fc1a4624649","3cc749c053615f5871f3b95715fe292f34e70a53","e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String,Comparator[TermStats]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String,Comparator[TermStats]).mjava","sourceNew":"  /**\n   * Returns TermStats[] ordered by the specified comparator\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field, Comparator<TermStats> comparator) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Terms terms = MultiFields.getTerms(reader, field);\n      if (terms == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n\n      TermsEnum termsEnum = terms.iterator();\n      tiq = new TermStatsQueue(numTerms, comparator);\n      tiq.fill(field, termsEnum);\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields.size() == 0) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms, comparator);\n      for (String fieldName : fields) {\n        Terms terms = fields.terms(fieldName);\n        if (terms != null) {\n          tiq.fill(fieldName, terms.iterator());\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns TermStats[] ordered by the specified comparator\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field, Comparator<TermStats> comparator) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Terms terms = MultiFields.getTerms(reader, field);\n      if (terms == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n      tiq = new TermStatsQueue(numTerms, comparator);\n      tiq.fill(field, termsEnum);\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields.size() == 0) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms, comparator);\n      for (String fieldName : fields) {\n        Terms terms = fields.terms(fieldName);\n        if (terms != null) {\n          tiq.fill(fieldName, terms.iterator(null));\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7","date":1538404752,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String,Comparator[TermStats]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String,Comparator[TermStats]).mjava","sourceNew":"  /**\n   * Returns TermStats[] ordered by the specified comparator\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field, Comparator<TermStats> comparator) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Terms terms = MultiFields.getTerms(reader, field);\n      if (terms == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n\n      TermsEnum termsEnum = terms.iterator();\n      tiq = new TermStatsQueue(numTerms, comparator);\n      tiq.fill(field, termsEnum);\n    } else {\n      Collection<String> fields = MultiFields.getIndexedFields(reader);\n      if (fields.size() == 0) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms, comparator);\n      for (String fieldName : fields) {\n        Terms terms = MultiFields.getTerms(reader, fieldName);\n        if (terms != null) {\n          tiq.fill(fieldName, terms.iterator());\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns TermStats[] ordered by the specified comparator\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field, Comparator<TermStats> comparator) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Terms terms = MultiFields.getTerms(reader, field);\n      if (terms == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n\n      TermsEnum termsEnum = terms.iterator();\n      tiq = new TermStatsQueue(numTerms, comparator);\n      tiq.fill(field, termsEnum);\n    } else {\n      Fields fields = MultiFields.getFields(reader);\n      if (fields.size() == 0) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms, comparator);\n      for (String fieldName : fields) {\n        Terms terms = fields.terms(fieldName);\n        if (terms != null) {\n          tiq.fill(fieldName, terms.iterator());\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String,Comparator[TermStats]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/HighFreqTerms#getHighFreqTerms(IndexReader,int,String,Comparator[TermStats]).mjava","sourceNew":"  /**\n   * Returns TermStats[] ordered by the specified comparator\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field, Comparator<TermStats> comparator) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Terms terms = MultiTerms.getTerms(reader, field);\n      if (terms == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n\n      TermsEnum termsEnum = terms.iterator();\n      tiq = new TermStatsQueue(numTerms, comparator);\n      tiq.fill(field, termsEnum);\n    } else {\n      Collection<String> fields = FieldInfos.getIndexedFields(reader);\n      if (fields.size() == 0) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms, comparator);\n      for (String fieldName : fields) {\n        Terms terms = MultiTerms.getTerms(reader, fieldName);\n        if (terms != null) {\n          tiq.fill(fieldName, terms.iterator());\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns TermStats[] ordered by the specified comparator\n   */\n  public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field, Comparator<TermStats> comparator) throws Exception {\n    TermStatsQueue tiq = null;\n    \n    if (field != null) {\n      Terms terms = MultiFields.getTerms(reader, field);\n      if (terms == null) {\n        throw new RuntimeException(\"field \" + field + \" not found\");\n      }\n\n      TermsEnum termsEnum = terms.iterator();\n      tiq = new TermStatsQueue(numTerms, comparator);\n      tiq.fill(field, termsEnum);\n    } else {\n      Collection<String> fields = MultiFields.getIndexedFields(reader);\n      if (fields.size() == 0) {\n        throw new RuntimeException(\"no fields found for this index\");\n      }\n      tiq = new TermStatsQueue(numTerms, comparator);\n      for (String fieldName : fields) {\n        Terms terms = MultiFields.getTerms(reader, fieldName);\n        if (terms != null) {\n          tiq.fill(fieldName, terms.iterator());\n        }\n      }\n    }\n    \n    TermStats[] result = new TermStats[tiq.size()];\n    // we want highest first so we read the queue and populate the array\n    // starting at the end and work backwards\n    int count = tiq.size() - 1;\n    while (tiq.size() != 0) {\n      result[count] = tiq.pop();\n      count--;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"8028ab7a24273833d53d35eb160dba5b57283cf5":["f0aae73ca2eeb899108e9fe36611ddf5a83ec790"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"f0aae73ca2eeb899108e9fe36611ddf5a83ec790":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7"],"8028ab7a24273833d53d35eb160dba5b57283cf5":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0aae73ca2eeb899108e9fe36611ddf5a83ec790"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ddad75c20492a8ce36565647b4eaf7b6f3fd1f7":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"f0aae73ca2eeb899108e9fe36611ddf5a83ec790":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}