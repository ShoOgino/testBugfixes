{"path":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#randomFilter().mjava","commits":[{"id":"92749b51992f15c9e464fd464baf3372bd5573a2","date":1330019010,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#randomFilter().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a random filter over the document set\n   */\n  protected Filter randomFilter() {\n    return new QueryWrapperFilter(TermRangeQuery.newStringRange(\"field\", \"a\", \"\" + randomChar(), true, true));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#randomFilter().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a random filter over the document set\n   */\n  protected Filter randomFilter() {\n    return new QueryWrapperFilter(TermRangeQuery.newStringRange(\"field\", \"a\", \"\" + randomChar(), true, true));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35425d74dd6cebe2e074b05228429765e67d1b35","date":1425216299,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#randomFilter().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#randomFilter().mjava","sourceNew":"  /**\n   * Returns a random filter over the document set\n   */\n  protected Filter randomFilter() {\n    final Query query;\n    if (random().nextBoolean()) {\n      query = TermRangeQuery.newStringRange(\"field\", \"a\", \"\" + randomChar(), true, true);\n    } else {\n      // use a query with a two-phase approximation\n      PhraseQuery phrase = new PhraseQuery();\n      phrase.add(new Term(\"field\", \"\" + randomChar()));\n      phrase.add(new Term(\"field\", \"\" + randomChar()));\n      phrase.setSlop(100);\n      query = phrase;\n    }\n    \n    // now wrap the query as a filter. QWF has its own codepath\n    if (random().nextBoolean()) {\n      return new QueryWrapperFilter(query);\n    } else {\n      return new SlowWrapperFilter(query, random().nextBoolean());\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a random filter over the document set\n   */\n  protected Filter randomFilter() {\n    return new QueryWrapperFilter(TermRangeQuery.newStringRange(\"field\", \"a\", \"\" + randomChar(), true, true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#randomFilter().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#randomFilter().mjava","sourceNew":"  /**\n   * Returns a random filter over the document set\n   */\n  protected Filter randomFilter() {\n    final Query query;\n    if (random().nextBoolean()) {\n      query = TermRangeQuery.newStringRange(\"field\", \"a\", \"\" + randomChar(), true, true);\n    } else {\n      // use a query with a two-phase approximation\n      PhraseQuery phrase = new PhraseQuery();\n      phrase.add(new Term(\"field\", \"\" + randomChar()));\n      phrase.add(new Term(\"field\", \"\" + randomChar()));\n      phrase.setSlop(100);\n      query = phrase;\n    }\n    \n    // now wrap the query as a filter. QWF has its own codepath\n    if (random().nextBoolean()) {\n      return new QueryWrapperFilter(query);\n    } else {\n      return new SlowWrapperFilter(query, random().nextBoolean());\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a random filter over the document set\n   */\n  protected Filter randomFilter() {\n    return new QueryWrapperFilter(TermRangeQuery.newStringRange(\"field\", \"a\", \"\" + randomChar(), true, true));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#randomFilter().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#randomFilter().mjava","sourceNew":"  /**\n   * Returns a random filter over the document set\n   */\n  protected Filter randomFilter() {\n    final Query query;\n    if (random().nextBoolean()) {\n      query = TermRangeQuery.newStringRange(\"field\", \"a\", \"\" + randomChar(), true, true);\n    } else {\n      // use a query with a two-phase approximation\n      PhraseQuery phrase = new PhraseQuery(100, \"field\", \"\" + randomChar(), \"\" + randomChar());\n      query = phrase;\n    }\n    \n    // now wrap the query as a filter. QWF has its own codepath\n    if (random().nextBoolean()) {\n      return new QueryWrapperFilter(query);\n    } else {\n      return new SlowWrapperFilter(query, random().nextBoolean());\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a random filter over the document set\n   */\n  protected Filter randomFilter() {\n    final Query query;\n    if (random().nextBoolean()) {\n      query = TermRangeQuery.newStringRange(\"field\", \"a\", \"\" + randomChar(), true, true);\n    } else {\n      // use a query with a two-phase approximation\n      PhraseQuery phrase = new PhraseQuery();\n      phrase.add(new Term(\"field\", \"\" + randomChar()));\n      phrase.add(new Term(\"field\", \"\" + randomChar()));\n      phrase.setSlop(100);\n      query = phrase;\n    }\n    \n    // now wrap the query as a filter. QWF has its own codepath\n    if (random().nextBoolean()) {\n      return new QueryWrapperFilter(query);\n    } else {\n      return new SlowWrapperFilter(query, random().nextBoolean());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e91a2d9ed80172872da0f517870da6756289554","date":1436431140,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#randomFilter().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#randomFilter().mjava","sourceNew":"  /**\n   * Returns a random filter over the document set\n   */\n  protected Query randomFilter() {\n    final Query query;\n    if (random().nextBoolean()) {\n      query = TermRangeQuery.newStringRange(\"field\", \"a\", \"\" + randomChar(), true, true);\n    } else {\n      // use a query with a two-phase approximation\n      PhraseQuery phrase = new PhraseQuery(100, \"field\", \"\" + randomChar(), \"\" + randomChar());\n      query = phrase;\n    }\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Returns a random filter over the document set\n   */\n  protected Filter randomFilter() {\n    final Query query;\n    if (random().nextBoolean()) {\n      query = TermRangeQuery.newStringRange(\"field\", \"a\", \"\" + randomChar(), true, true);\n    } else {\n      // use a query with a two-phase approximation\n      PhraseQuery phrase = new PhraseQuery(100, \"field\", \"\" + randomChar(), \"\" + randomChar());\n      query = phrase;\n    }\n    \n    // now wrap the query as a filter. QWF has its own codepath\n    if (random().nextBoolean()) {\n      return new QueryWrapperFilter(query);\n    } else {\n      return new SlowWrapperFilter(query, random().nextBoolean());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35425d74dd6cebe2e074b05228429765e67d1b35":["92749b51992f15c9e464fd464baf3372bd5573a2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["92749b51992f15c9e464fd464baf3372bd5573a2","35425d74dd6cebe2e074b05228429765e67d1b35"],"e9e1499c5d26c936238506df90a3c02c76707722":["35425d74dd6cebe2e074b05228429765e67d1b35"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92749b51992f15c9e464fd464baf3372bd5573a2"],"0e91a2d9ed80172872da0f517870da6756289554":["e9e1499c5d26c936238506df90a3c02c76707722"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92749b51992f15c9e464fd464baf3372bd5573a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e91a2d9ed80172872da0f517870da6756289554"]},"commit2Childs":{"35425d74dd6cebe2e074b05228429765e67d1b35":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e9e1499c5d26c936238506df90a3c02c76707722"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"e9e1499c5d26c936238506df90a3c02c76707722":["0e91a2d9ed80172872da0f517870da6756289554"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"0e91a2d9ed80172872da0f517870da6756289554":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","92749b51992f15c9e464fd464baf3372bd5573a2"],"92749b51992f15c9e464fd464baf3372bd5573a2":["35425d74dd6cebe2e074b05228429765e67d1b35","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}