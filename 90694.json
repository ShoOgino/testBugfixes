{"path":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#getTextTermFreqForClass(BytesRef,String).mjava","commits":[{"id":"134a24d0cb66520908d88384f1a559875704ed25","date":1445326601,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#getTextTermFreqForClass(BytesRef,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the average number of unique terms times the number of docs belonging to the input class\n   *\n   * @param c the class\n   * @return the average number of unique terms\n   * @throws java.io.IOException If there is a low-level I/O error\n   */\n  private double getTextTermFreqForClass(BytesRef c, String fieldName) throws IOException {\n    double avgNumberOfUniqueTerms;\n    Terms terms = MultiFields.getTerms(leafReader, fieldName);\n    long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n    avgNumberOfUniqueTerms = numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    int docsWithC = leafReader.docFreq(new Term(classFieldName, c));\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text fields per doc * # docs with c\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38b5bd3ae837751f57f363e9a41b833794222814","date":1445342257,"type":5,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#getTextTermFreqForClass(Term,String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#getTextTermFreqForClass(BytesRef,String).mjava","sourceNew":"  /**\n   * Returns the average number of unique terms times the number of docs belonging to the input class\n   *\n   * @param  term the class term\n   * @return the average number of unique terms\n   * @throws java.io.IOException If there is a low-level I/O error\n   */\n  private double getTextTermFreqForClass(Term term, String fieldName) throws IOException {\n    double avgNumberOfUniqueTerms;\n    Terms terms = MultiFields.getTerms(leafReader, fieldName);\n    long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n    avgNumberOfUniqueTerms = numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    int docsWithC = leafReader.docFreq(term);\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text fields per doc * # docs with c\n  }\n\n","sourceOld":"  /**\n   * Returns the average number of unique terms times the number of docs belonging to the input class\n   *\n   * @param c the class\n   * @return the average number of unique terms\n   * @throws java.io.IOException If there is a low-level I/O error\n   */\n  private double getTextTermFreqForClass(BytesRef c, String fieldName) throws IOException {\n    double avgNumberOfUniqueTerms;\n    Terms terms = MultiFields.getTerms(leafReader, fieldName);\n    long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n    avgNumberOfUniqueTerms = numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    int docsWithC = leafReader.docFreq(new Term(classFieldName, c));\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text fields per doc * # docs with c\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38b5bd3ae837751f57f363e9a41b833794222814":["134a24d0cb66520908d88384f1a559875704ed25"],"134a24d0cb66520908d88384f1a559875704ed25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["38b5bd3ae837751f57f363e9a41b833794222814"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["134a24d0cb66520908d88384f1a559875704ed25"],"38b5bd3ae837751f57f363e9a41b833794222814":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"134a24d0cb66520908d88384f1a559875704ed25":["38b5bd3ae837751f57f363e9a41b833794222814"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}