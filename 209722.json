{"path":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,HitCollector).mjava","commits":[{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,HitCollector).mjava","pathOld":"/dev/null","sourceNew":"  // inherit javadoc\n  public void search(Weight weight, Filter filter,\n                     final HitCollector results) throws IOException {\n    HitCollector collector = results;\n    if (filter != null) {\n      final BitSet bits = filter.bits(reader);\n      collector = new HitCollector() {\n          public final void collect(int doc, float score) {\n            if (bits.get(doc)) {                  // skip docs not in bits\n              results.collect(doc, score);\n            }\n          }\n        };\n    }\n\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return;\n    scorer.score(collector);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,HitCollector).mjava","sourceNew":"  // inherit javadoc\n  public void search(Weight weight, Filter filter,\n                     final HitCollector results) throws IOException {\n\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return;\n\n    if (filter == null) {\n      scorer.score(results);\n      return;\n    }\n\n    DocIdSetIterator docIdSetIterator = filter.getDocIdSet(reader).iterator(); // CHECKME: use ConjunctionScorer here?\n    boolean more = docIdSetIterator.next();\n    while (more) {\n      int filterDocId = docIdSetIterator.doc();\n      if (! scorer.skipTo(filterDocId)) {\n        more = false;\n      } else {\n        int scorerDocId = scorer.doc();\n        if (scorerDocId == filterDocId) { // permitted by filter\n          results.collect(scorerDocId, scorer.score());\n          more = docIdSetIterator.skipTo(scorerDocId + 1);\n        } else {\n          more = docIdSetIterator.skipTo(scorerDocId);\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  // inherit javadoc\n  public void search(Weight weight, Filter filter,\n                     final HitCollector results) throws IOException {\n    HitCollector collector = results;\n    if (filter != null) {\n      final BitSet bits = filter.bits(reader);\n      collector = new HitCollector() {\n          public final void collect(int doc, float score) {\n            if (bits.get(doc)) {                  // skip docs not in bits\n              results.collect(doc, score);\n            }\n          }\n        };\n    }\n\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return;\n    scorer.score(collector);\n  }\n\n","bugFix":null,"bugIntro":["340ef609ce3f6fbddf0034adc6977a963f65a075"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"340ef609ce3f6fbddf0034adc6977a963f65a075","date":1202424397,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,HitCollector).mjava","sourceNew":"  // inherit javadoc\n  public void search(Weight weight, Filter filter,\n                     final HitCollector results) throws IOException {\n\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return;\n\n    if (filter == null) {\n      scorer.score(results);\n      return;\n    }\n\n    DocIdSetIterator docIdSetIterator = filter.getDocIdSet(reader).iterator(); // CHECKME: use ConjunctionScorer here?\n    \n    boolean more = docIdSetIterator.next() && scorer.skipTo(docIdSetIterator.doc());\n\n    while (more) {\n      int filterDocId = docIdSetIterator.doc();\n      if (filterDocId > scorer.doc() && !scorer.skipTo(filterDocId)) {\n        more = false;\n      } else {\n        int scorerDocId = scorer.doc();\n        if (scorerDocId == filterDocId) { // permitted by filter\n          results.collect(scorerDocId, scorer.score());\n          more = docIdSetIterator.next();\n        } else {\n          more = docIdSetIterator.skipTo(scorerDocId);\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  // inherit javadoc\n  public void search(Weight weight, Filter filter,\n                     final HitCollector results) throws IOException {\n\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return;\n\n    if (filter == null) {\n      scorer.score(results);\n      return;\n    }\n\n    DocIdSetIterator docIdSetIterator = filter.getDocIdSet(reader).iterator(); // CHECKME: use ConjunctionScorer here?\n    boolean more = docIdSetIterator.next();\n    while (more) {\n      int filterDocId = docIdSetIterator.doc();\n      if (! scorer.skipTo(filterDocId)) {\n        more = false;\n      } else {\n        int scorerDocId = scorer.doc();\n        if (scorerDocId == filterDocId) { // permitted by filter\n          results.collect(scorerDocId, scorer.score());\n          more = docIdSetIterator.skipTo(scorerDocId + 1);\n        } else {\n          more = docIdSetIterator.skipTo(scorerDocId);\n        }\n      }\n    }\n\n  }\n\n","bugFix":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ae8ae8d7ebd41e210dde90be06d428ab43f312","date":1202426554,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,HitCollector).mjava","sourceNew":"  // inherit javadoc\n  public void search(Weight weight, Filter filter,\n                     final HitCollector results) throws IOException {\n\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return;\n\n    if (filter == null) {\n      scorer.score(results);\n      return;\n    }\n\n    DocIdSetIterator filterDocIdIterator = filter.getDocIdSet(reader).iterator(); // CHECKME: use ConjunctionScorer here?\n    \n    boolean more = filterDocIdIterator.next() && scorer.skipTo(filterDocIdIterator.doc());\n\n    while (more) {\n      int filterDocId = filterDocIdIterator.doc();\n      if (filterDocId > scorer.doc() && !scorer.skipTo(filterDocId)) {\n        more = false;\n      } else {\n        int scorerDocId = scorer.doc();\n        if (scorerDocId == filterDocId) { // permitted by filter\n          results.collect(scorerDocId, scorer.score());\n          more = filterDocIdIterator.next();\n        } else {\n          more = filterDocIdIterator.skipTo(scorerDocId);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  // inherit javadoc\n  public void search(Weight weight, Filter filter,\n                     final HitCollector results) throws IOException {\n\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return;\n\n    if (filter == null) {\n      scorer.score(results);\n      return;\n    }\n\n    DocIdSetIterator docIdSetIterator = filter.getDocIdSet(reader).iterator(); // CHECKME: use ConjunctionScorer here?\n    \n    boolean more = docIdSetIterator.next() && scorer.skipTo(docIdSetIterator.doc());\n\n    while (more) {\n      int filterDocId = docIdSetIterator.doc();\n      if (filterDocId > scorer.doc() && !scorer.skipTo(filterDocId)) {\n        more = false;\n      } else {\n        int scorerDocId = scorer.doc();\n        if (scorerDocId == filterDocId) { // permitted by filter\n          results.collect(scorerDocId, scorer.score());\n          more = docIdSetIterator.next();\n        } else {\n          more = docIdSetIterator.skipTo(scorerDocId);\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,HitCollector).mjava","sourceNew":"  // inherit javadoc\n  public void search(Weight weight, Filter filter, HitCollector results)\n      throws IOException {\n\n    final MultiReaderHitCollector collector;\n    if (results instanceof MultiReaderHitCollector) {\n      collector = (MultiReaderHitCollector) results;\n    } else {\n      collector = new MultiReaderCollectorWrapper(results);\n    }\n\n    for (int i = 0; i < sortedSubReaders.length; i++) { // search each subreader\n      collector.setNextReader(sortedSubReaders[i], sortedStarts[i]);\n      doSearch(sortedSubReaders[i], weight, filter, collector);\n    }\n  }\n\n","sourceOld":"  // inherit javadoc\n  public void search(Weight weight, Filter filter,\n                     final HitCollector results) throws IOException {\n\n    Scorer scorer = weight.scorer(reader);\n    if (scorer == null)\n      return;\n\n    if (filter == null) {\n      scorer.score(results);\n      return;\n    }\n\n    DocIdSetIterator filterDocIdIterator = filter.getDocIdSet(reader).iterator(); // CHECKME: use ConjunctionScorer here?\n    \n    boolean more = filterDocIdIterator.next() && scorer.skipTo(filterDocIdIterator.doc());\n\n    while (more) {\n      int filterDocId = filterDocIdIterator.doc();\n      if (filterDocId > scorer.doc() && !scorer.skipTo(filterDocId)) {\n        more = false;\n      } else {\n        int scorerDocId = scorer.doc();\n        if (scorerDocId == filterDocId) { // permitted by filter\n          results.collect(scorerDocId, scorer.score());\n          more = filterDocIdIterator.next();\n        } else {\n          more = filterDocIdIterator.skipTo(scorerDocId);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,HitCollector).mjava","sourceNew":"  // inherit javadoc\n  /** @deprecated use {@link #search(Weight, Filter, Collector)} instead. */\n  public void search(Weight weight, Filter filter, HitCollector results)\n      throws IOException {\n    search(weight, filter, new HitCollectorWrapper(results));\n  }\n\n","sourceOld":"  // inherit javadoc\n  public void search(Weight weight, Filter filter, HitCollector results)\n      throws IOException {\n\n    final MultiReaderHitCollector collector;\n    if (results instanceof MultiReaderHitCollector) {\n      collector = (MultiReaderHitCollector) results;\n    } else {\n      collector = new MultiReaderCollectorWrapper(results);\n    }\n\n    for (int i = 0; i < sortedSubReaders.length; i++) { // search each subreader\n      collector.setNextReader(sortedSubReaders[i], sortedStarts[i]);\n      doSearch(sortedSubReaders[i], weight, filter, collector);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,HitCollector).mjava","sourceNew":null,"sourceOld":"  // inherit javadoc\n  /** @deprecated use {@link #search(Weight, Filter, Collector)} instead. */\n  public void search(Weight weight, Filter filter, HitCollector results)\n      throws IOException {\n    search(weight, filter, new HitCollectorWrapper(results));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"340ef609ce3f6fbddf0034adc6977a963f65a075":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"052fac7830290bd38a04cddee1a121ee07656b56":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"63bc3238545c6012bd44f5d294077997f236bc4e":["d1ae8ae8d7ebd41e210dde90be06d428ab43f312"],"d1ae8ae8d7ebd41e210dde90be06d428ab43f312":["340ef609ce3f6fbddf0034adc6977a963f65a075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["052fac7830290bd38a04cddee1a121ee07656b56"]},"commit2Childs":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["052fac7830290bd38a04cddee1a121ee07656b56"],"340ef609ce3f6fbddf0034adc6977a963f65a075":["d1ae8ae8d7ebd41e210dde90be06d428ab43f312"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["340ef609ce3f6fbddf0034adc6977a963f65a075"],"63bc3238545c6012bd44f5d294077997f236bc4e":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"052fac7830290bd38a04cddee1a121ee07656b56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1ae8ae8d7ebd41e210dde90be06d428ab43f312":["63bc3238545c6012bd44f5d294077997f236bc4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}