{"path":"solr/core/src/java/org/apache/solr/handler/CdcrBufferStateManager#synchronize().mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrBufferStateManager#synchronize().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Synchronise the state to Zookeeper. This method must be called only by the handler receiving the\n   * action.\n   */\n  void synchronize() {\n    SolrZkClient zkClient = core.getCoreDescriptor().getCoreContainer().getZkController().getZkClient();\n    try {\n      zkClient.setData(this.getZnodePath(), this.getState().getBytes(), true);\n      // check if nobody changed it in the meantime, and set a new watcher\n      this.setState(CdcrParams.BufferState.get(zkClient.getData(this.getZnodePath(), watcher, null, true)));\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed synchronising new state\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrBufferStateManager#synchronize().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrBufferStateManager#synchronize().mjava","sourceNew":"  /**\n   * Synchronise the state to Zookeeper. This method must be called only by the handler receiving the\n   * action.\n   */\n  void synchronize() {\n    SolrZkClient zkClient = core.getCoreContainer().getZkController().getZkClient();\n    try {\n      zkClient.setData(this.getZnodePath(), this.getState().getBytes(), true);\n      // check if nobody changed it in the meantime, and set a new watcher\n      this.setState(CdcrParams.BufferState.get(zkClient.getData(this.getZnodePath(), watcher, null, true)));\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed synchronising new state\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Synchronise the state to Zookeeper. This method must be called only by the handler receiving the\n   * action.\n   */\n  void synchronize() {\n    SolrZkClient zkClient = core.getCoreDescriptor().getCoreContainer().getZkController().getZkClient();\n    try {\n      zkClient.setData(this.getZnodePath(), this.getState().getBytes(), true);\n      // check if nobody changed it in the meantime, and set a new watcher\n      this.setState(CdcrParams.BufferState.get(zkClient.getData(this.getZnodePath(), watcher, null, true)));\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed synchronising new state\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrBufferStateManager#synchronize().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrBufferStateManager#synchronize().mjava","sourceNew":"  /**\n   * Synchronise the state to Zookeeper. This method must be called only by the handler receiving the\n   * action.\n   */\n  void synchronize() {\n    SolrZkClient zkClient = core.getCoreContainer().getZkController().getZkClient();\n    try {\n      zkClient.setData(this.getZnodePath(), this.getState().getBytes(), true);\n      // check if nobody changed it in the meantime, and set a new watcher\n      this.setState(CdcrParams.BufferState.get(zkClient.getData(this.getZnodePath(), watcher, null, true)));\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed synchronising new state\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Synchronise the state to Zookeeper. This method must be called only by the handler receiving the\n   * action.\n   */\n  void synchronize() {\n    SolrZkClient zkClient = core.getCoreDescriptor().getCoreContainer().getZkController().getZkClient();\n    try {\n      zkClient.setData(this.getZnodePath(), this.getState().getBytes(), true);\n      // check if nobody changed it in the meantime, and set a new watcher\n      this.setState(CdcrParams.BufferState.get(zkClient.getData(this.getZnodePath(), watcher, null, true)));\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed synchronising new state\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrBufferStateManager#synchronize().mjava","sourceNew":null,"sourceOld":"  /**\n   * Synchronise the state to Zookeeper. This method must be called only by the handler receiving the\n   * action.\n   */\n  void synchronize() {\n    SolrZkClient zkClient = core.getCoreContainer().getZkController().getZkClient();\n    try {\n      zkClient.setData(this.getZnodePath(), this.getState().getBytes(), true);\n      // check if nobody changed it in the meantime, and set a new watcher\n      this.setState(CdcrParams.BufferState.get(zkClient.getData(this.getZnodePath(), watcher, null, true)));\n    } catch (KeeperException | InterruptedException e) {\n      log.warn(\"Failed synchronising new state\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"86290366cefc1b9d4eced13b430858c4a4c0421d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}