{"path":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getTerms(LeafReader,String,float).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getTerms(LeafReader,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getTerms(LeafReader,String,boolean,float).mjava","sourceNew":"  public BinaryDocValues getTerms(LeafReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.emptyBinary();\n    } else if (info.getDocValuesType() != DocValuesType.NONE) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (info.getIndexOptions() == IndexOptions.NONE) {\n      return DocValues.emptyBinary();\n    }\n\n    BinaryDocValuesImpl impl = (BinaryDocValuesImpl) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio));\n    return impl.iterator(getDocsWithField(reader, field, null));\n  }\n\n","sourceOld":"  public BinaryDocValues getTerms(LeafReader reader, String field, boolean setDocsWithField, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.emptyBinary();\n    } else if (info.getDocValuesType() != DocValuesType.NONE) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (info.getIndexOptions() == IndexOptions.NONE) {\n      return DocValues.emptyBinary();\n    }\n\n    BinaryDocValuesImpl impl = (BinaryDocValuesImpl) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio), setDocsWithField);\n    return impl.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getTerms(LeafReader,String,float).mjava","pathOld":"/dev/null","sourceNew":"  public BinaryDocValues getTerms(LeafReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.emptyBinary();\n    } else if (info.getDocValuesType() != DocValuesType.NONE) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (info.getIndexOptions() == IndexOptions.NONE) {\n      return DocValues.emptyBinary();\n    }\n\n    BinaryDocValuesImpl impl = (BinaryDocValuesImpl) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio));\n    return impl.iterator(getDocsWithField(reader, field, null));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getTerms(LeafReader,String,float).mjava","pathOld":"/dev/null","sourceNew":"  public BinaryDocValues getTerms(LeafReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.emptyBinary();\n    } else if (info.getDocValuesType() != DocValuesType.NONE) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (info.getIndexOptions() == IndexOptions.NONE) {\n      return DocValues.emptyBinary();\n    }\n\n    BinaryDocValuesImpl impl = (BinaryDocValuesImpl) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio));\n    return impl.iterator(getDocsWithField(reader, field, null));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c066767cf781550d3a8f94fff30ed80464bc0ad","date":1481239747,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getTerms(LeafReader,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getTerms(LeafReader,String,float).mjava","sourceNew":"  public BinaryDocValues getTerms(LeafReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.emptyBinary();\n    } else if (info.getDocValuesType() != DocValuesType.NONE) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (info.getIndexOptions() == IndexOptions.NONE) {\n      return DocValues.emptyBinary();\n    }\n\n    BinaryDocValuesImpl impl = (BinaryDocValuesImpl) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio));\n    return impl.iterator();\n  }\n\n","sourceOld":"  public BinaryDocValues getTerms(LeafReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.emptyBinary();\n    } else if (info.getDocValuesType() != DocValuesType.NONE) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (info.getIndexOptions() == IndexOptions.NONE) {\n      return DocValues.emptyBinary();\n    }\n\n    BinaryDocValuesImpl impl = (BinaryDocValuesImpl) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio));\n    return impl.iterator(getDocsWithField(reader, field, null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getTerms(LeafReader,String,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getTerms(LeafReader,String,float).mjava","sourceNew":"  public BinaryDocValues getTerms(LeafReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.emptyBinary();\n    } else if (info.getDocValuesType() != DocValuesType.NONE) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (info.getIndexOptions() == IndexOptions.NONE) {\n      return DocValues.emptyBinary();\n    }\n\n    BinaryDocValuesImpl impl = (BinaryDocValuesImpl) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio));\n    return impl.iterator();\n  }\n\n","sourceOld":"  public BinaryDocValues getTerms(LeafReader reader, String field, float acceptableOverheadRatio) throws IOException {\n    BinaryDocValues valuesIn = reader.getBinaryDocValues(field);\n    if (valuesIn == null) {\n      valuesIn = reader.getSortedDocValues(field);\n    }\n\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    }\n\n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.emptyBinary();\n    } else if (info.getDocValuesType() != DocValuesType.NONE) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (info.getIndexOptions() == IndexOptions.NONE) {\n      return DocValues.emptyBinary();\n    }\n\n    BinaryDocValuesImpl impl = (BinaryDocValuesImpl) caches.get(BinaryDocValues.class).get(reader, new CacheKey(field, acceptableOverheadRatio));\n    return impl.iterator(getDocsWithField(reader, field, null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9c066767cf781550d3a8f94fff30ed80464bc0ad"],"9c066767cf781550d3a8f94fff30ed80464bc0ad":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c066767cf781550d3a8f94fff30ed80464bc0ad"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9c066767cf781550d3a8f94fff30ed80464bc0ad","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"9c066767cf781550d3a8f94fff30ed80464bc0ad":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}