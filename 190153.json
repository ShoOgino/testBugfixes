{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","commits":[{"id":"79509167584beb75c0b777d2b701adeb1f06d885","date":1441841855,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testSubFacetStream() throws Exception {\n\n    indexr(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        \"collection1\",\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        \"collection1\",\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  private void testSubFacetStream() throws Exception {\n\n    indexr(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        \"collection1\",\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        \"collection1\",\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  private void testSubFacetStream() throws Exception {\n\n    indexr(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        \"collection1\",\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        \"collection1\",\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  private void testSubFacetStream() throws Exception {\n\n    indexr(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        \"collection1\",\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        \"collection1\",\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  private void testSubFacetStream() throws Exception {\n\n    indexr(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        \"collection1\",\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        \"collection1\",\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\",\"*:*\",\"fl\",\"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        paramsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58bb411852ed0249bf624e9fc223b4973776d357","date":1479107017,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assertEquals(6, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(35, sumi.longValue());\n    assertEquals(3, count, 0.1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(15, sumi.longValue());\n    assertEquals(2, count, 0.1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(11, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(4, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(3, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(2, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assertEquals(6, tuples.size());\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(11, sumi.longValue());\n    assertEquals(1, count, 0.1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(4, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(35, sumi.longValue());\n    assertEquals(3, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(3, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(15, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(2, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8243e301531f97de264740d6afa71de6781dd64","date":1479139589,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assertEquals(6, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(35, sumi.longValue());\n    assertEquals(3, count, 0.1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(15, sumi.longValue());\n    assertEquals(2, count, 0.1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(11, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(4, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(3, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(2, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assertEquals(6, tuples.size());\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(11, sumi.longValue());\n    assertEquals(1, count, 0.1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(4, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(35, sumi.longValue());\n    assertEquals(3, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(3, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(15, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(2, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assert(tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 11);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello4\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 4);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 35);\n    assertTrue(count.doubleValue() == 3);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello3\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 3);\n    assertTrue(count.doubleValue() == 1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"b\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket1.equals(\"hello0\"));\n    assertTrue(bucket2.equals(\"a\"));\n    assertTrue(sumi.longValue() == 2);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTIONORALIAS,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assertEquals(6, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(35, sumi.longValue());\n    assertEquals(3, count, 0.1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(15, sumi.longValue());\n    assertEquals(2, count, 0.1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(11, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(4, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(3, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(2, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTIONORALIAS,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assertEquals(6, tuples.size());\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(11, sumi.longValue());\n    assertEquals(1, count, 0.1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(4, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(35, sumi.longValue());\n    assertEquals(3, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(3, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(15, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(2, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assertEquals(6, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(35, sumi.longValue());\n    assertEquals(3, count, 0.1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(15, sumi.longValue());\n    assertEquals(2, count, 0.1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(11, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(4, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(3, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(2, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assertEquals(6, tuples.size());\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(11, sumi.longValue());\n    assertEquals(1, count, 0.1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(4, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(35, sumi.longValue());\n    assertEquals(3, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(3, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(15, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(2, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTIONORALIAS,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assertEquals(6, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(35, sumi.longValue());\n    assertEquals(3, count, 0.1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(15, sumi.longValue());\n    assertEquals(2, count, 0.1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(11, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(4, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(3, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(2, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTIONORALIAS,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assertEquals(6, tuples.size());\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(11, sumi.longValue());\n    assertEquals(1, count, 0.1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(4, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(35, sumi.longValue());\n    assertEquals(3, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(3, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(15, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(2, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assertEquals(6, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(35, sumi.longValue());\n    assertEquals(3, count, 0.1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(15, sumi.longValue());\n    assertEquals(2, count, 0.1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(11, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(4, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(3, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(2, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTION,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assertEquals(6, tuples.size());\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(11, sumi.longValue());\n    assertEquals(1, count, 0.1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(4, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(35, sumi.longValue());\n    assertEquals(3, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(3, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(15, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(2, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_i,a_f\");\n\n      Bucket[] buckets = {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new CountMetric()};\n\n      FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n      FacetStream facetStream = new FacetStream(\n          zkHost,\n          COLLECTIONORALIAS,\n          sParamsA,\n          buckets,\n          metrics,\n          sorts,\n          100);\n      facetStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(facetStream);\n      assertEquals(6, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      String bucket1 = tuple.getString(\"level1_s\");\n      String bucket2 = tuple.getString(\"level2_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket1);\n      assertEquals(\"b\", bucket2);\n      assertEquals(35, sumi.longValue());\n      assertEquals(3, count, 0.1);\n\n      tuple = tuples.get(1);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket1);\n      assertEquals(\"b\", bucket2);\n      assertEquals(15, sumi.longValue());\n      assertEquals(2, count, 0.1);\n\n      tuple = tuples.get(2);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket1);\n      assertEquals(\"b\", bucket2);\n      assertEquals(11, sumi.longValue());\n      assertEquals(1, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(3);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket1);\n      assertEquals(\"a\", bucket2);\n      assertEquals(4, sumi.longValue());\n      assertEquals(1, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(4);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket1);\n      assertEquals(\"a\", bucket2);\n      assertEquals(3, sumi.longValue());\n      assertEquals(1, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(5);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket1);\n      assertEquals(\"a\", bucket2);\n      assertEquals(2, sumi.longValue());\n      assertEquals(2, count.doubleValue(), 0.1);\n\n      sorts[0] = new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING);\n      sorts[1] = new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING);\n      facetStream = new FacetStream(\n          zkHost,\n          COLLECTIONORALIAS,\n          sParamsA,\n          buckets,\n          metrics,\n          sorts,\n          100);\n      facetStream.setStreamContext(streamContext);\n      tuples = getTuples(facetStream);\n      assertEquals(6, tuples.size());\n\n      tuple = tuples.get(0);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket1);\n      assertEquals(\"b\", bucket2);\n      assertEquals(11, sumi.longValue());\n      assertEquals(1, count, 0.1);\n\n      tuple = tuples.get(1);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket1);\n      assertEquals(\"a\", bucket2);\n      assertEquals(4, sumi.longValue());\n      assertEquals(1, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(2);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket1);\n      assertEquals(\"b\", bucket2);\n      assertEquals(35, sumi.longValue());\n      assertEquals(3, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(3);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket1);\n      assertEquals(\"a\", bucket2);\n      assertEquals(3, sumi.longValue());\n      assertEquals(1, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(4);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket1);\n      assertEquals(\"b\", bucket2);\n      assertEquals(15, sumi.longValue());\n      assertEquals(2, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(5);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket1);\n      assertEquals(\"a\", bucket2);\n      assertEquals(2, sumi.longValue());\n      assertEquals(2, count.doubleValue(), 0.1);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTIONORALIAS,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assertEquals(6, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(35, sumi.longValue());\n    assertEquals(3, count, 0.1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(15, sumi.longValue());\n    assertEquals(2, count, 0.1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(11, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(4, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(3, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(2, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTIONORALIAS,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assertEquals(6, tuples.size());\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(11, sumi.longValue());\n    assertEquals(1, count, 0.1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(4, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(35, sumi.longValue());\n    assertEquals(3, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(3, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(15, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(2, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testSubFacetStream().mjava","sourceNew":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_i,a_f\");\n\n      Bucket[] buckets = {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new CountMetric()};\n\n      FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n      FacetStream facetStream = new FacetStream(\n          zkHost,\n          COLLECTIONORALIAS,\n          sParamsA,\n          buckets,\n          metrics,\n          sorts,\n          100);\n      facetStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(facetStream);\n      assertEquals(6, tuples.size());\n\n      Tuple tuple = tuples.get(0);\n      String bucket1 = tuple.getString(\"level1_s\");\n      String bucket2 = tuple.getString(\"level2_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket1);\n      assertEquals(\"b\", bucket2);\n      assertEquals(35, sumi.longValue());\n      assertEquals(3, count, 0.1);\n\n      tuple = tuples.get(1);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket1);\n      assertEquals(\"b\", bucket2);\n      assertEquals(15, sumi.longValue());\n      assertEquals(2, count, 0.1);\n\n      tuple = tuples.get(2);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket1);\n      assertEquals(\"b\", bucket2);\n      assertEquals(11, sumi.longValue());\n      assertEquals(1, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(3);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket1);\n      assertEquals(\"a\", bucket2);\n      assertEquals(4, sumi.longValue());\n      assertEquals(1, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(4);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket1);\n      assertEquals(\"a\", bucket2);\n      assertEquals(3, sumi.longValue());\n      assertEquals(1, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(5);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket1);\n      assertEquals(\"a\", bucket2);\n      assertEquals(2, sumi.longValue());\n      assertEquals(2, count.doubleValue(), 0.1);\n\n      sorts[0] = new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING);\n      sorts[1] = new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING);\n      facetStream = new FacetStream(\n          zkHost,\n          COLLECTIONORALIAS,\n          sParamsA,\n          buckets,\n          metrics,\n          sorts,\n          100);\n      facetStream.setStreamContext(streamContext);\n      tuples = getTuples(facetStream);\n      assertEquals(6, tuples.size());\n\n      tuple = tuples.get(0);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket1);\n      assertEquals(\"b\", bucket2);\n      assertEquals(11, sumi.longValue());\n      assertEquals(1, count, 0.1);\n\n      tuple = tuples.get(1);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket1);\n      assertEquals(\"a\", bucket2);\n      assertEquals(4, sumi.longValue());\n      assertEquals(1, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(2);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket1);\n      assertEquals(\"b\", bucket2);\n      assertEquals(35, sumi.longValue());\n      assertEquals(3, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(3);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket1);\n      assertEquals(\"a\", bucket2);\n      assertEquals(3, sumi.longValue());\n      assertEquals(1, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(4);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket1);\n      assertEquals(\"b\", bucket2);\n      assertEquals(15, sumi.longValue());\n      assertEquals(2, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(5);\n      bucket1 = tuple.getString(\"level1_s\");\n      bucket2 = tuple.getString(\"level2_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket1);\n      assertEquals(\"a\", bucket2);\n      assertEquals(2, sumi.longValue());\n      assertEquals(2, count.doubleValue(), 0.1);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSubFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"level1_s\", \"hello0\", \"level2_s\", \"a\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"level1_s\", \"hello3\", \"level2_s\", \"a\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"level1_s\", \"hello4\", \"level2_s\", \"a\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"level1_s\", \"hello4\", \"level2_s\", \"b\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"level1_s\", \"hello3\", \"level2_s\", \"b\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"level1_s\", \"hello0\", \"level2_s\", \"b\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_i,a_f\");\n\n    Bucket[] buckets =  {new Bucket(\"level1_s\"), new Bucket(\"level2_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING), new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING)};\n\n    FacetStream facetStream = new FacetStream(\n        zkHost,\n        COLLECTIONORALIAS,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n    assertEquals(6, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    String bucket1 = tuple.getString(\"level1_s\");\n    String bucket2 = tuple.getString(\"level2_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(35, sumi.longValue());\n    assertEquals(3, count, 0.1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(15, sumi.longValue());\n    assertEquals(2, count, 0.1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(11, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(4, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(3, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(2, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n    sorts[0] =  new FieldComparator(\"level1_s\", ComparatorOrder.DESCENDING );\n    sorts[1] =  new FieldComparator(\"level2_s\", ComparatorOrder.DESCENDING );\n    facetStream = new FacetStream(\n        zkHost,\n        COLLECTIONORALIAS,\n        sParamsA,\n        buckets,\n        metrics,\n        sorts,\n        100);\n\n    tuples = getTuples(facetStream);\n    assertEquals(6, tuples.size());\n\n    tuple = tuples.get(0);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(11, sumi.longValue());\n    assertEquals(1, count, 0.1);\n\n    tuple = tuples.get(1);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(4, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(2);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(35, sumi.longValue());\n    assertEquals(3, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(3);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(3, sumi.longValue());\n    assertEquals(1, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(4);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"b\", bucket2);\n    assertEquals(15, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(5);\n    bucket1 = tuple.getString(\"level1_s\");\n    bucket2 = tuple.getString(\"level2_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket1);\n    assertEquals(\"a\", bucket2);\n    assertEquals(2, sumi.longValue());\n    assertEquals(2, count.doubleValue(), 0.1);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"79509167584beb75c0b777d2b701adeb1f06d885":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"73450c0955930295d34703e7ddbfc6973b7a121a":["79509167584beb75c0b777d2b701adeb1f06d885","b940572a59da1b42b6c20ab5278155b12816807a"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"b940572a59da1b42b6c20ab5278155b12816807a":["79509167584beb75c0b777d2b701adeb1f06d885"],"58bb411852ed0249bf624e9fc223b4973776d357":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["73450c0955930295d34703e7ddbfc6973b7a121a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["73450c0955930295d34703e7ddbfc6973b7a121a","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["79509167584beb75c0b777d2b701adeb1f06d885","b940572a59da1b42b6c20ab5278155b12816807a"],"c8243e301531f97de264740d6afa71de6781dd64":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","58bb411852ed0249bf624e9fc223b4973776d357"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["79509167584beb75c0b777d2b701adeb1f06d885","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"8c969f15cd04d31e520319c619a445ae21f02d72":["58bb411852ed0249bf624e9fc223b4973776d357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"79509167584beb75c0b777d2b701adeb1f06d885":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"73450c0955930295d34703e7ddbfc6973b7a121a":["826d15444ddf61716dc768c229cd54b2c2ccce1c","d470c8182e92b264680e34081b75e70a9f2b3c89","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"58bb411852ed0249bf624e9fc223b4973776d357":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c8243e301531f97de264740d6afa71de6781dd64"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["58bb411852ed0249bf624e9fc223b4973776d357","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c8243e301531f97de264740d6afa71de6781dd64":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["e66a459d38c1c4a2f97128433dab546f683a9fed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["79509167584beb75c0b777d2b701adeb1f06d885"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}