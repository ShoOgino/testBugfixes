{"path":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"7d72e80cee24be385c713864a9f1f90be3744482","date":1417420925,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path){\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\" :\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\" :\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\" :\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\" : {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\" : {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/solrqueryparser\":{\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          rsp.add(IndexSchema.SOLR_QUERY_PARSER, props);\n          break;\n        }\n        case \"/schema/zkversion\" : {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number)refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema)schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\"+refreshIfBelowVersion+\n                  \", currentVersion=\"+zkVersion+\") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader)req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        case \"/schema/solrqueryparser/defaultoperator\" : {\n          rsp.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          break;\n        }\n        default : {\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\"No such path \"+path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1c7207d1200ca5f52d4214da9c87a2cb93ce7564"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9b95b7a900f914658251ea859980db26d8bbec77","date":1423653028,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\": {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/solrqueryparser\": {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          rsp.add(IndexSchema.SOLR_QUERY_PARSER, props);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        case \"/schema/solrqueryparser/defaultoperator\": {\n          rsp.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          break;\n        }\n        default: {\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","sourceOld":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path){\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\" :\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\" :\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\" :\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\" : {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\" : {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/solrqueryparser\":{\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          rsp.add(IndexSchema.SOLR_QUERY_PARSER, props);\n          break;\n        }\n        case \"/schema/zkversion\" : {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number)refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema)schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\"+refreshIfBelowVersion+\n                  \", currentVersion=\"+zkVersion+\") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader)req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        case \"/schema/solrqueryparser/defaultoperator\" : {\n          rsp.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          break;\n        }\n        default : {\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\"No such path \"+path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["1c7207d1200ca5f52d4214da9c87a2cb93ce7564"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f494bc636a1302995e4930fdccd371eeda452f87","date":1457370876,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\": {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/solrqueryparser\": {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          rsp.add(IndexSchema.SOLR_QUERY_PARSER, props);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        case \"/schema/solrqueryparser/defaultoperator\": {\n          rsp.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = level2.get(parts.get(1));\n            SimpleOrderedMap<Object> propertyValues = req.getSchema().getNamedPropertyValues(req.getParams());\n            Object o = propertyValues.get(realName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(realName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(realName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","sourceOld":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\": {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/solrqueryparser\": {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          rsp.add(IndexSchema.SOLR_QUERY_PARSER, props);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        case \"/schema/solrqueryparser/defaultoperator\": {\n          rsp.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          break;\n        }\n        default: {\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["9ac1922a6e5b4d1ec298c612640d012484d4e022"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83ed5fbd2aab9f605f08774c9293e521ec99f0a1","date":1461251300,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\": {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/solrqueryparser\": {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          rsp.add(IndexSchema.SOLR_QUERY_PARSER, props);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        case \"/schema/solrqueryparser/defaultoperator\": {\n          rsp.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = level2.get(parts.get(1));\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(realName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(realName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(realName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","sourceOld":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\": {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/solrqueryparser\": {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          rsp.add(IndexSchema.SOLR_QUERY_PARSER, props);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        case \"/schema/solrqueryparser/defaultoperator\": {\n          rsp.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = level2.get(parts.get(1));\n            SimpleOrderedMap<Object> propertyValues = req.getSchema().getNamedPropertyValues(req.getParams());\n            Object o = propertyValues.get(realName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(realName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(realName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ac1922a6e5b4d1ec298c612640d012484d4e022","date":1461304949,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\": {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/solrqueryparser\": {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          rsp.add(IndexSchema.SOLR_QUERY_PARSER, props);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        case \"/schema/solrqueryparser/defaultoperator\": {\n          rsp.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.SchemaProps.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","sourceOld":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\": {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/solrqueryparser\": {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          rsp.add(IndexSchema.SOLR_QUERY_PARSER, props);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        case \"/schema/solrqueryparser/defaultoperator\": {\n          rsp.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = level2.get(parts.get(1));\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(realName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(realName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(realName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","bugFix":["f494bc636a1302995e4930fdccd371eeda452f87"],"bugIntro":["3b48da680331ce09bbf3b1e4f19a381b7b38459f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b48da680331ce09bbf3b1e4f19a381b7b38459f","date":1470293431,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\": {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/solrqueryparser\": {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          rsp.add(IndexSchema.SOLR_QUERY_PARSER, props);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        case \"/schema/solrqueryparser/defaultoperator\": {\n          rsp.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","sourceOld":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\": {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/solrqueryparser\": {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          rsp.add(IndexSchema.SOLR_QUERY_PARSER, props);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        case \"/schema/solrqueryparser/defaultoperator\": {\n          rsp.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.SchemaProps.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","bugFix":["9ac1922a6e5b4d1ec298c612640d012484d4e022"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\": {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/solrqueryparser\": {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          rsp.add(IndexSchema.SOLR_QUERY_PARSER, props);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        case \"/schema/solrqueryparser/defaultoperator\": {\n          rsp.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","sourceOld":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\": {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/solrqueryparser\": {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          rsp.add(IndexSchema.SOLR_QUERY_PARSER, props);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        case \"/schema/solrqueryparser/defaultoperator\": {\n          rsp.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.SchemaProps.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\": {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/solrqueryparser\": {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          rsp.add(IndexSchema.SOLR_QUERY_PARSER, props);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        case \"/schema/solrqueryparser/defaultoperator\": {\n          rsp.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","sourceOld":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\": {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/solrqueryparser\": {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          rsp.add(IndexSchema.SOLR_QUERY_PARSER, props);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        case \"/schema/solrqueryparser/defaultoperator\": {\n          rsp.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.SchemaProps.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c418b5fb43bf7b591b636df532dd1ac44296469a","date":1494834249,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\": {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","sourceOld":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\": {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/solrqueryparser\": {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          rsp.add(IndexSchema.SOLR_QUERY_PARSER, props);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        case \"/schema/solrqueryparser/defaultoperator\": {\n          rsp.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","date":1495081498,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\": {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","sourceOld":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\": {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/solrqueryparser\": {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          rsp.add(IndexSchema.SOLR_QUERY_PARSER, props);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        case \"/schema/solrqueryparser/defaultoperator\": {\n          rsp.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d057970b5f9fcaabc49d2f54c59a5d2a09da1769","date":1495200448,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","sourceOld":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\": {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","sourceOld":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/defaultsearchfield\": {\n          final String defaultSearchFieldName = req.getSchema().getDefaultSearchFieldName();\n          if (null == defaultSearchFieldName) {\n            final String message = \"undefined \" + IndexSchema.DEFAULT_SEARCH_FIELD;\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n          break;\n        }\n        case \"/schema/solrqueryparser\": {\n          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();\n          props.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          rsp.add(IndexSchema.SOLR_QUERY_PARSER, props);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        case \"/schema/solrqueryparser/defaultoperator\": {\n          rsp.add(IndexSchema.DEFAULT_OPERATOR, req.getSchema().getQueryParserDefaultOperator());\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e3a2e58ed1e5737ee598a96a2ef095036e513de","date":1497305754,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = req.getParams().getInt(\"refreshIfBelowVersion\", -1);\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","sourceOld":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"431332290bd53a7347d2e0e1e08dd8fac027d62e","date":1497388745,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","sourceOld":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = req.getParams().getInt(\"refreshIfBelowVersion\", -1);\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f90164e4baf99ca8e0d459a85e1c359ccad769","date":1558579809,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/', true);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","sourceOld":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/');\n          if (parts.get(0).isEmpty()) parts.remove(0);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion={}, currentVersion={}) before returning version!\"\n                  , refreshIfBelowVersion, zkVersion);\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/', true);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","sourceOld":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion=\" + refreshIfBelowVersion +\n                  \", currentVersion=\" + zkVersion + \") before returning version!\");\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/', true);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion={}, currentVersion={}) before returning version!\"\n                  , refreshIfBelowVersion, zkVersion);\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/', true);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            @SuppressWarnings({\"rawtypes\"})\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                @SuppressWarnings({\"rawtypes\"})\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    @SuppressWarnings({\"rawtypes\"})\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","sourceOld":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion={}, currentVersion={}) before returning version!\"\n                  , refreshIfBelowVersion, zkVersion);\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/', true);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c7207d1200ca5f52d4214da9c87a2cb93ce7564","date":1591903314,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = req.getParams().getInt(\"refreshIfBelowVersion\");\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion={}, currentVersion={}) before returning version!\"\n                  , refreshIfBelowVersion, zkVersion);\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/', true);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            @SuppressWarnings({\"rawtypes\"})\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                @SuppressWarnings({\"rawtypes\"})\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    @SuppressWarnings({\"rawtypes\"})\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","sourceOld":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = -1;\n          Object refreshParam = req.getParams().get(\"refreshIfBelowVersion\");\n          if (refreshParam != null)\n            refreshIfBelowVersion = (refreshParam instanceof Number) ? ((Number) refreshParam).intValue()\n                : Integer.parseInt(refreshParam.toString());\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion={}, currentVersion={}) before returning version!\"\n                  , refreshIfBelowVersion, zkVersion);\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/', true);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            @SuppressWarnings({\"rawtypes\"})\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                @SuppressWarnings({\"rawtypes\"})\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    @SuppressWarnings({\"rawtypes\"})\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","bugFix":["7d72e80cee24be385c713864a9f1f90be3744482","9b95b7a900f914658251ea859980db26d8bbec77"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ed9b72e5fa27a7bd4857f222ca815341979d4a","date":1594879524,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SchemaHandler#handleGET(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = req.getParams().getInt(\"refreshIfBelowVersion\");\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion={}, currentVersion={}) before returning version!\"\n                  , refreshIfBelowVersion, zkVersion);\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/', true);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            @SuppressWarnings({\"rawtypes\"})\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                @SuppressWarnings({\"rawtypes\"})\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    @SuppressWarnings({\"rawtypes\"})\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      insertPackageInfo(rsp.getValues(), req);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            insertPackageInfo(rsp.getValues(), req);\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","sourceOld":"  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {\n    try {\n      String path = (String) req.getContext().get(\"path\");\n      switch (path) {\n        case \"/schema\":\n          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());\n          break;\n        case \"/schema/version\":\n          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());\n          break;\n        case \"/schema/uniquekey\":\n          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());\n          break;\n        case \"/schema/similarity\":\n          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());\n          break;\n        case \"/schema/name\": {\n          final String schemaName = req.getSchema().getSchemaName();\n          if (null == schemaName) {\n            String message = \"Schema has no name\";\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);\n          }\n          rsp.add(IndexSchema.NAME, schemaName);\n          break;\n        }\n        case \"/schema/zkversion\": {\n          int refreshIfBelowVersion = req.getParams().getInt(\"refreshIfBelowVersion\");\n          int zkVersion = -1;\n          IndexSchema schema = req.getSchema();\n          if (schema instanceof ManagedIndexSchema) {\n            ManagedIndexSchema managed = (ManagedIndexSchema) schema;\n            zkVersion = managed.getSchemaZkVersion();\n            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {\n              log.info(\"REFRESHING SCHEMA (refreshIfBelowVersion={}, currentVersion={}) before returning version!\"\n                  , refreshIfBelowVersion, zkVersion);\n              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();\n              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();\n              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);\n              zkVersion = managed.getSchemaZkVersion();\n            }\n          }\n          rsp.add(\"zkversion\", zkVersion);\n          break;\n        }\n        default: {\n          List<String> parts = StrUtils.splitSmart(path, '/', true);\n          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {\n            String realName = parts.get(1);\n            String fieldName = IndexSchema.nameMapping.get(realName);\n\n            String pathParam = level2.get(realName);\n            if (parts.size() > 2) {\n              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));\n            }\n            @SuppressWarnings({\"rawtypes\"})\n            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());\n            Object o = propertyValues.get(fieldName);\n            if(parts.size()> 2) {\n              String name = parts.get(2);\n              if (o instanceof List) {\n                @SuppressWarnings({\"rawtypes\"})\n                List list = (List) o;\n                for (Object obj : list) {\n                  if (obj instanceof SimpleOrderedMap) {\n                    @SuppressWarnings({\"rawtypes\"})\n                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;\n                    if(name.equals(simpleOrderedMap.get(\"name\"))) {\n                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);\n                      return;\n                    }\n                  }\n                }\n              }\n              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n            } else {\n              rsp.add(fieldName, o);\n            }\n            return;\n          }\n\n          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"No such path \" + path);\n        }\n      }\n\n    } catch (Exception e) {\n      rsp.setException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e3a2e58ed1e5737ee598a96a2ef095036e513de":["d057970b5f9fcaabc49d2f54c59a5d2a09da1769"],"7d72e80cee24be385c713864a9f1f90be3744482":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"431332290bd53a7347d2e0e1e08dd8fac027d62e":["1e3a2e58ed1e5737ee598a96a2ef095036e513de"],"d057970b5f9fcaabc49d2f54c59a5d2a09da1769":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"1c7207d1200ca5f52d4214da9c87a2cb93ce7564":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"3b48da680331ce09bbf3b1e4f19a381b7b38459f":["9ac1922a6e5b4d1ec298c612640d012484d4e022"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["3b48da680331ce09bbf3b1e4f19a381b7b38459f","c418b5fb43bf7b591b636df532dd1ac44296469a"],"9ac1922a6e5b4d1ec298c612640d012484d4e022":["83ed5fbd2aab9f605f08774c9293e521ec99f0a1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9ac1922a6e5b4d1ec298c612640d012484d4e022","3b48da680331ce09bbf3b1e4f19a381b7b38459f"],"c418b5fb43bf7b591b636df532dd1ac44296469a":["3b48da680331ce09bbf3b1e4f19a381b7b38459f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["3b48da680331ce09bbf3b1e4f19a381b7b38459f","d057970b5f9fcaabc49d2f54c59a5d2a09da1769"],"51f90164e4baf99ca8e0d459a85e1c359ccad769":["d057970b5f9fcaabc49d2f54c59a5d2a09da1769"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["1c7207d1200ca5f52d4214da9c87a2cb93ce7564"],"f494bc636a1302995e4930fdccd371eeda452f87":["9b95b7a900f914658251ea859980db26d8bbec77"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["51f90164e4baf99ca8e0d459a85e1c359ccad769"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83ed5fbd2aab9f605f08774c9293e521ec99f0a1":["f494bc636a1302995e4930fdccd371eeda452f87"],"9b95b7a900f914658251ea859980db26d8bbec77":["7d72e80cee24be385c713864a9f1f90be3744482"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["9ac1922a6e5b4d1ec298c612640d012484d4e022","3b48da680331ce09bbf3b1e4f19a381b7b38459f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"]},"commit2Childs":{"1e3a2e58ed1e5737ee598a96a2ef095036e513de":["431332290bd53a7347d2e0e1e08dd8fac027d62e"],"7d72e80cee24be385c713864a9f1f90be3744482":["9b95b7a900f914658251ea859980db26d8bbec77"],"431332290bd53a7347d2e0e1e08dd8fac027d62e":[],"d057970b5f9fcaabc49d2f54c59a5d2a09da1769":["1e3a2e58ed1e5737ee598a96a2ef095036e513de","e9017cf144952056066919f1ebc7897ff9bd71b1","51f90164e4baf99ca8e0d459a85e1c359ccad769"],"1c7207d1200ca5f52d4214da9c87a2cb93ce7564":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"3b48da680331ce09bbf3b1e4f19a381b7b38459f":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c418b5fb43bf7b591b636df532dd1ac44296469a","e9017cf144952056066919f1ebc7897ff9bd71b1","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["d057970b5f9fcaabc49d2f54c59a5d2a09da1769"],"9ac1922a6e5b4d1ec298c612640d012484d4e022":["3b48da680331ce09bbf3b1e4f19a381b7b38459f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c418b5fb43bf7b591b636df532dd1ac44296469a":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"51f90164e4baf99ca8e0d459a85e1c359ccad769":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f494bc636a1302995e4930fdccd371eeda452f87":["83ed5fbd2aab9f605f08774c9293e521ec99f0a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d72e80cee24be385c713864a9f1f90be3744482"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["1c7207d1200ca5f52d4214da9c87a2cb93ce7564"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"83ed5fbd2aab9f605f08774c9293e521ec99f0a1":["9ac1922a6e5b4d1ec298c612640d012484d4e022"],"9b95b7a900f914658251ea859980db26d8bbec77":["f494bc636a1302995e4930fdccd371eeda452f87"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["431332290bd53a7347d2e0e1e08dd8fac027d62e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}