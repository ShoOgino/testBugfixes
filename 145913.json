{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#tearDown().mjava","commits":[{"id":"9e6c873b95174ff04c895232927baa76a95925eb","date":1385054916,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#tearDown().mjava","pathOld":"/dev/null","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    super.tearDown();\n    for (Overseer overseer : overseers) {\n      overseer.close();\n    }\n    overseers.clear();\n    for (ZkStateReader reader : readers) {\n      reader.close();\n    }\n    readers.clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#tearDown().mjava","pathOld":"/dev/null","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    super.tearDown();\n    for (Overseer overseer : overseers) {\n      overseer.close();\n    }\n    overseers.clear();\n    for (ZkStateReader reader : readers) {\n      reader.close();\n    }\n    readers.clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#tearDown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#tearDown().mjava","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    super.tearDown();\n    for (Overseer overseer : overseers) {\n      overseer.close();\n    }\n    overseers.clear();\n    for (ZkStateReader reader : readers) {\n      reader.close();\n    }\n    readers.clear();\n    \n    for (HttpShardHandlerFactory handlerFactory : httpShardHandlerFactorys) {\n      handlerFactory.close();\n    }\n    httpShardHandlerFactorys.clear();\n    \n    for (UpdateShardHandler updateShardHandler : updateShardHandlers) {\n      updateShardHandler.close();\n    }\n    updateShardHandlers.clear();\n  }\n\n","sourceOld":"  @After\n  public void tearDown() throws Exception {\n    super.tearDown();\n    for (Overseer overseer : overseers) {\n      overseer.close();\n    }\n    overseers.clear();\n    for (ZkStateReader reader : readers) {\n      reader.close();\n    }\n    readers.clear();\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#tearDown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#tearDown().mjava","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    super.tearDown();\n    for (Overseer overseer : overseers) {\n      overseer.close();\n    }\n    overseers.clear();\n    for (ZkStateReader reader : readers) {\n      reader.close();\n    }\n    readers.clear();\n    \n    for (HttpShardHandlerFactory handlerFactory : httpShardHandlerFactorys) {\n      handlerFactory.close();\n    }\n    httpShardHandlerFactorys.clear();\n    \n    for (UpdateShardHandler updateShardHandler : updateShardHandlers) {\n      updateShardHandler.close();\n    }\n    updateShardHandlers.clear();\n    for (CloudSolrClient client : solrClients) {\n      client.close();\n    }\n    solrClients.clear();\n  }\n\n","sourceOld":"  @After\n  public void tearDown() throws Exception {\n    super.tearDown();\n    for (Overseer overseer : overseers) {\n      overseer.close();\n    }\n    overseers.clear();\n    for (ZkStateReader reader : readers) {\n      reader.close();\n    }\n    readers.clear();\n    \n    for (HttpShardHandlerFactory handlerFactory : httpShardHandlerFactorys) {\n      handlerFactory.close();\n    }\n    httpShardHandlerFactorys.clear();\n    \n    for (UpdateShardHandler updateShardHandler : updateShardHandlers) {\n      updateShardHandler.close();\n    }\n    updateShardHandlers.clear();\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#tearDown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#tearDown().mjava","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    testDone = true;\n    \n    ForkJoinPool customThreadPool = new ForkJoinPool(16);\n  \n    customThreadPool.submit( () -> zkControllers.parallelStream().forEach(c -> { c.close(); }));\n    \n    customThreadPool.submit( () -> httpShardHandlerFactorys.parallelStream().forEach(c -> { c.close(); }));\n    \n    customThreadPool.submit( () -> updateShardHandlers.parallelStream().forEach(c -> { c.close(); }));\n    \n    customThreadPool.submit( () -> solrClients.parallelStream().forEach(c -> { IOUtils.closeQuietly(c); } ));\n\n    \n    customThreadPool.submit( () -> readers.parallelStream().forEach(c -> { c.close();}));\n    \n    customThreadPool.submit( () -> zkClients.parallelStream().forEach(c -> { IOUtils.closeQuietly(c); }));\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = new ForkJoinPool(4);\n    \n    customThreadPool.submit( () -> overseers.parallelStream().forEach(c -> { c.close(); }));\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    overseers.clear();\n    zkControllers.clear();\n    httpShardHandlerFactorys.clear();\n    updateShardHandlers.clear();\n    solrClients.clear();\n    readers.clear();\n    zkClients.clear();\n    \n    server.tryCleanSolrZkNode();\n    server.makeSolrZkNode();\n    \n    super.tearDown();\n  }\n\n","sourceOld":"  @After\n  public void tearDown() throws Exception {\n    super.tearDown();\n    for (Overseer overseer : overseers) {\n      overseer.close();\n    }\n    overseers.clear();\n    for (ZkStateReader reader : readers) {\n      reader.close();\n    }\n    readers.clear();\n    \n    for (HttpShardHandlerFactory handlerFactory : httpShardHandlerFactorys) {\n      handlerFactory.close();\n    }\n    httpShardHandlerFactorys.clear();\n    \n    for (UpdateShardHandler updateShardHandler : updateShardHandlers) {\n      updateShardHandler.close();\n    }\n    updateShardHandlers.clear();\n    for (CloudSolrClient client : solrClients) {\n      client.close();\n    }\n    solrClients.clear();\n  }\n\n","bugFix":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","6784d0cc613dc1ee97030eaaa5e0754edc22d164","9e6c873b95174ff04c895232927baa76a95925eb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e34aff27dfe70db6a9f0d2da0f5d9b640fbac18","date":1543645562,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#tearDown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#tearDown().mjava","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    testDone = true;\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n  \n    for (ZkController zkController : zkControllers) {\n      customThreadPool.submit( () -> zkController.close());\n    }\n\n    for (HttpShardHandlerFactory httpShardHandlerFactory : httpShardHandlerFactorys) {\n      customThreadPool.submit( () -> httpShardHandlerFactory.close());\n    }\n\n    for (UpdateShardHandler updateShardHandler : updateShardHandlers) {\n      customThreadPool.submit( () -> updateShardHandler.close());\n    }\n    \n    for (SolrClient solrClient : solrClients) {\n      customThreadPool.submit( () -> IOUtils.closeQuietly(solrClient));\n    }\n\n    for (ZkStateReader reader : readers) {\n      customThreadPool.submit( () -> reader.close());\n    }\n    \n    for (SolrZkClient solrZkClient : zkClients) {\n      customThreadPool.submit( () -> IOUtils.closeQuietly(solrZkClient));\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n    \n    for (Overseer overseer : overseers) {\n      customThreadPool.submit( () -> overseer.close());\n    }\n\n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    overseers.clear();\n    zkControllers.clear();\n    httpShardHandlerFactorys.clear();\n    updateShardHandlers.clear();\n    solrClients.clear();\n    readers.clear();\n    zkClients.clear();\n    \n    server.tryCleanSolrZkNode();\n    server.makeSolrZkNode();\n    \n    super.tearDown();\n  }\n\n","sourceOld":"  @After\n  public void tearDown() throws Exception {\n    testDone = true;\n    \n    ForkJoinPool customThreadPool = new ForkJoinPool(16);\n  \n    customThreadPool.submit( () -> zkControllers.parallelStream().forEach(c -> { c.close(); }));\n    \n    customThreadPool.submit( () -> httpShardHandlerFactorys.parallelStream().forEach(c -> { c.close(); }));\n    \n    customThreadPool.submit( () -> updateShardHandlers.parallelStream().forEach(c -> { c.close(); }));\n    \n    customThreadPool.submit( () -> solrClients.parallelStream().forEach(c -> { IOUtils.closeQuietly(c); } ));\n\n    \n    customThreadPool.submit( () -> readers.parallelStream().forEach(c -> { c.close();}));\n    \n    customThreadPool.submit( () -> zkClients.parallelStream().forEach(c -> { IOUtils.closeQuietly(c); }));\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = new ForkJoinPool(4);\n    \n    customThreadPool.submit( () -> overseers.parallelStream().forEach(c -> { c.close(); }));\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    overseers.clear();\n    zkControllers.clear();\n    httpShardHandlerFactorys.clear();\n    updateShardHandlers.clear();\n    solrClients.clear();\n    readers.clear();\n    zkClients.clear();\n    \n    server.tryCleanSolrZkNode();\n    server.makeSolrZkNode();\n    \n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#tearDown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#tearDown().mjava","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    testDone = true;\n\n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n    for (ZkController zkController : zkControllers) {\n      customThreadPool.submit( () -> zkController.close());\n    }\n\n    for (HttpShardHandlerFactory httpShardHandlerFactory : httpShardHandlerFactorys) {\n      customThreadPool.submit( () -> httpShardHandlerFactory.close());\n    }\n\n    for (UpdateShardHandler updateShardHandler : updateShardHandlers) {\n      customThreadPool.submit( () -> updateShardHandler.close());\n    }\n\n    for (SolrClient solrClient : solrClients) {\n      customThreadPool.submit( () -> IOUtils.closeQuietly(solrClient));\n    }\n\n    for (ZkStateReader reader : readers) {\n      customThreadPool.submit( () -> reader.close());\n    }\n\n    for (SolrZkClient solrZkClient : zkClients) {\n      customThreadPool.submit( () -> IOUtils.closeQuietly(solrZkClient));\n    }\n\n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n\n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n\n    for (Overseer overseer : overseers) {\n      customThreadPool.submit( () -> overseer.close());\n    }\n\n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n\n    overseers.clear();\n    zkControllers.clear();\n    httpShardHandlerFactorys.clear();\n    updateShardHandlers.clear();\n    solrClients.clear();\n    readers.clear();\n    zkClients.clear();\n\n    server.tryCleanSolrZkNode();\n    server.makeSolrZkNode();\n\n    super.tearDown();\n  }\n\n","sourceOld":"  @After\n  public void tearDown() throws Exception {\n    testDone = true;\n    \n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n  \n    for (ZkController zkController : zkControllers) {\n      customThreadPool.submit( () -> zkController.close());\n    }\n\n    for (HttpShardHandlerFactory httpShardHandlerFactory : httpShardHandlerFactorys) {\n      customThreadPool.submit( () -> httpShardHandlerFactory.close());\n    }\n\n    for (UpdateShardHandler updateShardHandler : updateShardHandlers) {\n      customThreadPool.submit( () -> updateShardHandler.close());\n    }\n    \n    for (SolrClient solrClient : solrClients) {\n      customThreadPool.submit( () -> IOUtils.closeQuietly(solrClient));\n    }\n\n    for (ZkStateReader reader : readers) {\n      customThreadPool.submit( () -> reader.close());\n    }\n    \n    for (SolrZkClient solrZkClient : zkClients) {\n      customThreadPool.submit( () -> IOUtils.closeQuietly(solrZkClient));\n    }\n    \n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n    \n    for (Overseer overseer : overseers) {\n      customThreadPool.submit( () -> overseer.close());\n    }\n\n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n    \n    overseers.clear();\n    zkControllers.clear();\n    httpShardHandlerFactorys.clear();\n    updateShardHandlers.clear();\n    solrClients.clear();\n    readers.clear();\n    zkClients.clear();\n    \n    server.tryCleanSolrZkNode();\n    server.makeSolrZkNode();\n    \n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#tearDown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#tearDown().mjava","sourceNew":"  @After\n  public void tearDown() throws Exception {\n    testDone = true;\n\n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"closeThreadPool\"));\n\n    for (ZkController zkController : zkControllers) {\n      customThreadPool.submit( () -> zkController.close());\n    }\n\n    for (HttpShardHandlerFactory httpShardHandlerFactory : httpShardHandlerFactorys) {\n      customThreadPool.submit( () -> httpShardHandlerFactory.close());\n    }\n\n    for (UpdateShardHandler updateShardHandler : updateShardHandlers) {\n      customThreadPool.submit( () -> updateShardHandler.close());\n    }\n\n    for (SolrClient solrClient : solrClients) {\n      customThreadPool.submit( () -> IOUtils.closeQuietly(solrClient));\n    }\n\n    for (ZkStateReader reader : readers) {\n      customThreadPool.submit( () -> reader.close());\n    }\n\n    for (SolrZkClient solrZkClient : zkClients) {\n      customThreadPool.submit( () -> IOUtils.closeQuietly(solrZkClient));\n    }\n\n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n\n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"closeThreadPool\"));\n\n\n    for (Overseer overseer : overseers) {\n      customThreadPool.submit( () -> overseer.close());\n    }\n\n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n\n    overseers.clear();\n    zkControllers.clear();\n    httpShardHandlerFactorys.clear();\n    updateShardHandlers.clear();\n    solrClients.clear();\n    readers.clear();\n    zkClients.clear();\n\n    server.tryCleanSolrZkNode();\n    server.makeSolrZkNode();\n\n    super.tearDown();\n  }\n\n","sourceOld":"  @After\n  public void tearDown() throws Exception {\n    testDone = true;\n\n    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n    for (ZkController zkController : zkControllers) {\n      customThreadPool.submit( () -> zkController.close());\n    }\n\n    for (HttpShardHandlerFactory httpShardHandlerFactory : httpShardHandlerFactorys) {\n      customThreadPool.submit( () -> httpShardHandlerFactory.close());\n    }\n\n    for (UpdateShardHandler updateShardHandler : updateShardHandlers) {\n      customThreadPool.submit( () -> updateShardHandler.close());\n    }\n\n    for (SolrClient solrClient : solrClients) {\n      customThreadPool.submit( () -> IOUtils.closeQuietly(solrClient));\n    }\n\n    for (ZkStateReader reader : readers) {\n      customThreadPool.submit( () -> reader.close());\n    }\n\n    for (SolrZkClient solrZkClient : zkClients) {\n      customThreadPool.submit( () -> IOUtils.closeQuietly(solrZkClient));\n    }\n\n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n\n    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"closeThreadPool\"));\n\n\n    for (Overseer overseer : overseers) {\n      customThreadPool.submit( () -> overseer.close());\n    }\n\n    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);\n\n    overseers.clear();\n    zkControllers.clear();\n    httpShardHandlerFactorys.clear();\n    updateShardHandlers.clear();\n    solrClients.clear();\n    readers.clear();\n    zkClients.clear();\n\n    server.tryCleanSolrZkNode();\n    server.makeSolrZkNode();\n\n    super.tearDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"9e6c873b95174ff04c895232927baa76a95925eb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e34aff27dfe70db6a9f0d2da0f5d9b640fbac18":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e6c873b95174ff04c895232927baa76a95925eb"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["0e34aff27dfe70db6a9f0d2da0f5d9b640fbac18"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["9e6c873b95174ff04c895232927baa76a95925eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0e34aff27dfe70db6a9f0d2da0f5d9b640fbac18"],"9e6c873b95174ff04c895232927baa76a95925eb":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"0e34aff27dfe70db6a9f0d2da0f5d9b640fbac18":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e6c873b95174ff04c895232927baa76a95925eb","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}