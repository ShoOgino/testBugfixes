{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#saveState().mjava","commits":[{"id":"8598a11db0eb9efa116ba7656c437f5bed7de0f7","date":1272964265,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#saveState().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#saveState().mjava","sourceNew":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAttribute.length());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAttribute.length()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAttribute.length(), RamUsageEstimator.NUM_BYTES_CHAR)];\n    }\n\n    System.arraycopy(termAttribute.buffer(), 0, savedBuffer, 0, termAttribute.length());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","sourceOld":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAttribute.length());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAttribute.length()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAttribute.length(), RamUsageEstimator.NUM_BYTES_CHAR)];\n    }\n\n    System.arraycopy(termAttribute.buffer(), 0, savedBuffer, 0, termAttribute.length());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#saveState().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilter#saveState().mjava","sourceNew":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAttribute.length());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAttribute.length()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAttribute.length(), RamUsageEstimator.NUM_BYTES_CHAR)];\n    }\n\n    System.arraycopy(termAttribute.buffer(), 0, savedBuffer, 0, termAttribute.length());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","sourceOld":"  /**\n   * Saves the existing attribute states\n   */\n  private void saveState() {\n    // otherwise, we have delimiters, save state\n    savedStartOffset = offsetAttribute.startOffset();\n    savedEndOffset = offsetAttribute.endOffset();\n    // if length by start + end offsets doesn't match the term text then assume this is a synonym and don't adjust the offsets.\n    hasIllegalOffsets = (savedEndOffset - savedStartOffset != termAttribute.length());\n    savedType = typeAttribute.type();\n\n    if (savedBuffer.length < termAttribute.length()) {\n      savedBuffer = new char[ArrayUtil.oversize(termAttribute.length(), RamUsageEstimator.NUM_BYTES_CHAR)];\n    }\n\n    System.arraycopy(termAttribute.buffer(), 0, savedBuffer, 0, termAttribute.length());\n    iterator.text = savedBuffer;\n\n    hasSavedState = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8598a11db0eb9efa116ba7656c437f5bed7de0f7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["8598a11db0eb9efa116ba7656c437f5bed7de0f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"8598a11db0eb9efa116ba7656c437f5bed7de0f7":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8598a11db0eb9efa116ba7656c437f5bed7de0f7"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}