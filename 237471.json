{"path":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testDefaultField().mjava","commits":[{"id":"560eb5b313b37946d4f94aa72f3303de59147c88","date":1253017871,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testDefaultField().mjava","pathOld":"/dev/null","sourceNew":"  public void testDefaultField() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    try {\n      loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"lowernames\", \"true\",\n        \"captureAttr\", \"true\",\n        //\"map.content_type\", \"abcxyz\",\n        \"commit\", \"true\"  // test immediate commit\n      );\n      assertTrue(false);\n\n    } catch (SolrException e) {\n      //do nothing\n    }\n    \n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      ExtractingParams.DEFAULT_FIELD, \"defaultExtr\",//test that unmapped fields go to the text field when no uprefix is specified\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      //\"map.content_type\", \"abcxyz\",\n      \"commit\", \"true\"  // test immediate commit\n    );\n    assertQ(req(\"id:simple2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"defaultExtr:http\\\\://www.apache.org\"), \"//*[@numFound='1']\");\n\n    //Test when both uprefix and default are specified.\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      ExtractingParams.DEFAULT_FIELD, \"defaultExtr\",//test that unmapped fields go to the text field when no uprefix is specified\n            ExtractingParams.UNKNOWN_FIELD_PREFIX, \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"map.a\",\"t_href\",\n      //\"map.content_type\", \"abcxyz\",\n      \"commit\", \"true\"  // test immediate commit\n    );\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0b96ebf39aa5127497a01b3456891ab9a50957ce","0b96ebf39aa5127497a01b3456891ab9a50957ce","0b96ebf39aa5127497a01b3456891ab9a50957ce","0b96ebf39aa5127497a01b3456891ab9a50957ce","0b96ebf39aa5127497a01b3456891ab9a50957ce","0b96ebf39aa5127497a01b3456891ab9a50957ce"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c156fce3696e4675bc1974f81364deb8b87858e1","date":1253114156,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testDefaultField().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testDefaultField().mjava","sourceNew":"  public void testDefaultField() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    try {\n      loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"lowernames\", \"true\",\n        \"captureAttr\", \"true\",\n        //\"fmap.content_type\", \"abcxyz\",\n        \"commit\", \"true\"  // test immediate commit\n      );\n      assertTrue(false);\n\n    } catch (SolrException e) {\n      //do nothing\n    }\n    \n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      ExtractingParams.DEFAULT_FIELD, \"defaultExtr\",//test that unmapped fields go to the text field when no uprefix is specified\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      //\"fmap.content_type\", \"abcxyz\",\n      \"commit\", \"true\"  // test immediate commit\n    );\n    assertQ(req(\"id:simple2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"defaultExtr:http\\\\://www.apache.org\"), \"//*[@numFound='1']\");\n\n    //Test when both uprefix and default are specified.\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      ExtractingParams.DEFAULT_FIELD, \"defaultExtr\",//test that unmapped fields go to the text field when no uprefix is specified\n            ExtractingParams.UNKNOWN_FIELD_PREFIX, \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      //\"fmap.content_type\", \"abcxyz\",\n      \"commit\", \"true\"  // test immediate commit\n    );\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  public void testDefaultField() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    try {\n      loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"lowernames\", \"true\",\n        \"captureAttr\", \"true\",\n        //\"map.content_type\", \"abcxyz\",\n        \"commit\", \"true\"  // test immediate commit\n      );\n      assertTrue(false);\n\n    } catch (SolrException e) {\n      //do nothing\n    }\n    \n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      ExtractingParams.DEFAULT_FIELD, \"defaultExtr\",//test that unmapped fields go to the text field when no uprefix is specified\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      //\"map.content_type\", \"abcxyz\",\n      \"commit\", \"true\"  // test immediate commit\n    );\n    assertQ(req(\"id:simple2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"defaultExtr:http\\\\://www.apache.org\"), \"//*[@numFound='1']\");\n\n    //Test when both uprefix and default are specified.\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      ExtractingParams.DEFAULT_FIELD, \"defaultExtr\",//test that unmapped fields go to the text field when no uprefix is specified\n            ExtractingParams.UNKNOWN_FIELD_PREFIX, \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"map.a\",\"t_href\",\n      //\"map.content_type\", \"abcxyz\",\n      \"commit\", \"true\"  // test immediate commit\n    );\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testDefaultField().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testDefaultField().mjava","sourceNew":"  public void testDefaultField() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    try {\n      loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"lowernames\", \"true\",\n        \"captureAttr\", \"true\",\n        //\"fmap.content_type\", \"abcxyz\",\n        \"commit\", \"true\"  // test immediate commit\n      );\n      assertTrue(false);\n\n    } catch (SolrException e) {\n      //do nothing\n    }\n    \n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      ExtractingParams.DEFAULT_FIELD, \"defaultExtr\",//test that unmapped fields go to the text field when no uprefix is specified\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      //\"fmap.content_type\", \"abcxyz\",\n      \"commit\", \"true\"  // test immediate commit\n    );\n    assertQ(req(\"id:simple2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"defaultExtr:http\\\\://www.apache.org\"), \"//*[@numFound='1']\");\n\n    //Test when both uprefix and default are specified.\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      ExtractingParams.DEFAULT_FIELD, \"defaultExtr\",//test that unmapped fields go to the text field when no uprefix is specified\n            ExtractingParams.UNKNOWN_FIELD_PREFIX, \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      //\"fmap.content_type\", \"abcxyz\",\n      \"commit\", \"true\"  // test immediate commit\n    );\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  public void testDefaultField() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    try {\n      loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      \"lowernames\", \"true\",\n        \"captureAttr\", \"true\",\n        //\"fmap.content_type\", \"abcxyz\",\n        \"commit\", \"true\"  // test immediate commit\n      );\n      assertTrue(false);\n\n    } catch (SolrException e) {\n      //do nothing\n    }\n    \n\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      ExtractingParams.DEFAULT_FIELD, \"defaultExtr\",//test that unmapped fields go to the text field when no uprefix is specified\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      //\"fmap.content_type\", \"abcxyz\",\n      \"commit\", \"true\"  // test immediate commit\n    );\n    assertQ(req(\"id:simple2\"), \"//*[@numFound='1']\");\n    assertQ(req(\"defaultExtr:http\\\\://www.apache.org\"), \"//*[@numFound='1']\");\n\n    //Test when both uprefix and default are specified.\n    loadLocal(\"simple.html\",\n      \"literal.id\",\"simple2\",\n      ExtractingParams.DEFAULT_FIELD, \"defaultExtr\",//test that unmapped fields go to the text field when no uprefix is specified\n            ExtractingParams.UNKNOWN_FIELD_PREFIX, \"t_\",\n      \"lowernames\", \"true\",\n      \"captureAttr\", \"true\",\n      \"fmap.a\",\"t_href\",\n      //\"fmap.content_type\", \"abcxyz\",\n      \"commit\", \"true\"  // test immediate commit\n    );\n    assertQ(req(\"+id:simple2 +t_href:[* TO *]\"), \"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c156fce3696e4675bc1974f81364deb8b87858e1"],"c156fce3696e4675bc1974f81364deb8b87858e1":["560eb5b313b37946d4f94aa72f3303de59147c88"],"560eb5b313b37946d4f94aa72f3303de59147c88":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["560eb5b313b37946d4f94aa72f3303de59147c88"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c156fce3696e4675bc1974f81364deb8b87858e1":["ad94625fb8d088209f46650c8097196fec67f00c"],"560eb5b313b37946d4f94aa72f3303de59147c88":["c156fce3696e4675bc1974f81364deb8b87858e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}