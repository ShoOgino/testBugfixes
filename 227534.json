{"path":"lucene/core/src/java/org/apache/lucene/util/Sorter#binarySort(int,int).mjava","commits":[{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Sorter#binarySort(int,int).mjava","pathOld":"/dev/null","sourceNew":"  void binarySort(int from, int to) {\n    binarySort(from, to, from + 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a20457919db052812998f60294d17daa883ff972","date":1470227748,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Sorter#binarySort(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/Sorter#binarySort(int,int).mjava","sourceNew":"  /**\n   * A binary sort implementation. This performs {@code O(n*log(n))} comparisons\n   * and {@code O(n^2)} swaps. It is typically used by more sophisticated\n   * implementations as a fall-back when the numbers of items to sort has become\n   * less than {@value #BINARY_SORT_THRESHOLD}.\n   */\n  void binarySort(int from, int to) {\n    binarySort(from, to, from + 1);\n  }\n\n","sourceOld":"  void binarySort(int from, int to) {\n    binarySort(from, to, from + 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Sorter#binarySort(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/Sorter#binarySort(int,int).mjava","sourceNew":"  /**\n   * A binary sort implementation. This performs {@code O(n*log(n))} comparisons\n   * and {@code O(n^2)} swaps. It is typically used by more sophisticated\n   * implementations as a fall-back when the numbers of items to sort has become\n   * less than {@value #BINARY_SORT_THRESHOLD}.\n   */\n  void binarySort(int from, int to) {\n    binarySort(from, to, from + 1);\n  }\n\n","sourceOld":"  void binarySort(int from, int to) {\n    binarySort(from, to, from + 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Sorter#binarySort(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/Sorter#binarySort(int,int).mjava","sourceNew":"  /**\n   * A binary sort implementation. This performs {@code O(n*log(n))} comparisons\n   * and {@code O(n^2)} swaps. It is typically used by more sophisticated\n   * implementations as a fall-back when the numbers of items to sort has become\n   * less than {@value #BINARY_SORT_THRESHOLD}.\n   */\n  void binarySort(int from, int to) {\n    binarySort(from, to, from + 1);\n  }\n\n","sourceOld":"  void binarySort(int from, int to) {\n    binarySort(from, to, from + 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a20457919db052812998f60294d17daa883ff972":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f","a20457919db052812998f60294d17daa883ff972"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f","a20457919db052812998f60294d17daa883ff972"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a20457919db052812998f60294d17daa883ff972"]},"commit2Childs":{"a20457919db052812998f60294d17daa883ff972":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["a20457919db052812998f60294d17daa883ff972","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}