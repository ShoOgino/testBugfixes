{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelRollupStream().mjava","commits":[{"id":"3078cad1008b796c6d573b743c586fdf9ef5660a","date":1436019875,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelRollupStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testParallelRollupStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);     \n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    expression = StreamExpressionParser.parse(\"parallel(collection1,\"\n                                              + \"rollup(\"\n                                                + \"search(collection1, q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n                                                + \"over=\\\"a_s\\\",\"\n                                                + \"sum(a_i),\"\n                                                + \"sum(a_f),\"\n                                                + \"min(a_i),\"\n                                                + \"min(a_f),\"\n                                                + \"max(a_i),\"\n                                                + \"max(a_f),\"\n                                                + \"avg(a_i),\"\n                                                + \"avg(a_f),\"\n                                                + \"count(*)\"\n                                              + \"),\"\n                                              + \"workers=\\\"2\\\", zkHost=\\\"\"+zkServer.getZkAddress()+\"\\\", sort=\\\"a_s asc\\\")\"\n                                              );\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);     \n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    expression = StreamExpressionParser.parse(\"parallel(\" + COLLECTION + \",\"\n                                              + \"rollup(\"\n                                                + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n                                                + \"over=\\\"a_s\\\",\"\n                                                + \"sum(a_i),\"\n                                                + \"sum(a_f),\"\n                                                + \"min(a_i),\"\n                                                + \"min(a_f),\"\n                                                + \"max(a_i),\"\n                                                + \"max(a_f),\"\n                                                + \"avg(a_i),\"\n                                                + \"avg(a_f),\"\n                                                + \"count(*)\"\n                                              + \"),\"\n                                              + \"workers=\\\"2\\\", zkHost=\\\"\"+cluster.getZkServer().getZkAddress()+\"\\\", sort=\\\"a_s asc\\\")\"\n                                              );\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  private void testParallelRollupStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);     \n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    expression = StreamExpressionParser.parse(\"parallel(collection1,\"\n                                              + \"rollup(\"\n                                                + \"search(collection1, q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n                                                + \"over=\\\"a_s\\\",\"\n                                                + \"sum(a_i),\"\n                                                + \"sum(a_f),\"\n                                                + \"min(a_i),\"\n                                                + \"min(a_f),\"\n                                                + \"max(a_i),\"\n                                                + \"max(a_f),\"\n                                                + \"avg(a_i),\"\n                                                + \"avg(a_f),\"\n                                                + \"count(*)\"\n                                              + \"),\"\n                                              + \"workers=\\\"2\\\", zkHost=\\\"\"+zkServer.getZkAddress()+\"\\\", sort=\\\"a_s asc\\\")\"\n                                              );\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);     \n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    expression = StreamExpressionParser.parse(\"parallel(\" + COLLECTION + \",\"\n                                              + \"rollup(\"\n                                                + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n                                                + \"over=\\\"a_s\\\",\"\n                                                + \"sum(a_i),\"\n                                                + \"sum(a_f),\"\n                                                + \"min(a_i),\"\n                                                + \"min(a_f),\"\n                                                + \"max(a_i),\"\n                                                + \"max(a_f),\"\n                                                + \"avg(a_i),\"\n                                                + \"avg(a_f),\"\n                                                + \"count(*)\"\n                                              + \"),\"\n                                              + \"workers=\\\"2\\\", zkHost=\\\"\"+cluster.getZkServer().getZkAddress()+\"\\\", sort=\\\"a_s asc\\\")\"\n                                              );\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  private void testParallelRollupStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);     \n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    expression = StreamExpressionParser.parse(\"parallel(collection1,\"\n                                              + \"rollup(\"\n                                                + \"search(collection1, q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n                                                + \"over=\\\"a_s\\\",\"\n                                                + \"sum(a_i),\"\n                                                + \"sum(a_f),\"\n                                                + \"min(a_i),\"\n                                                + \"min(a_f),\"\n                                                + \"max(a_i),\"\n                                                + \"max(a_f),\"\n                                                + \"avg(a_i),\"\n                                                + \"avg(a_f),\"\n                                                + \"count(*)\"\n                                              + \"),\"\n                                              + \"workers=\\\"2\\\", zkHost=\\\"\"+zkServer.getZkAddress()+\"\\\", sort=\\\"a_s asc\\\")\"\n                                              );\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);     \n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    expression = StreamExpressionParser.parse(\"parallel(\" + COLLECTION + \",\"\n                                              + \"rollup(\"\n                                                + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n                                                + \"over=\\\"a_s\\\",\"\n                                                + \"sum(a_i),\"\n                                                + \"sum(a_f),\"\n                                                + \"min(a_i),\"\n                                                + \"min(a_f),\"\n                                                + \"max(a_i),\"\n                                                + \"max(a_f),\"\n                                                + \"avg(a_i),\"\n                                                + \"avg(a_f),\"\n                                                + \"count(*)\"\n                                              + \"),\"\n                                              + \"workers=\\\"2\\\", zkHost=\\\"\"+cluster.getZkServer().getZkAddress()+\"\\\", sort=\\\"a_s asc\\\")\"\n                                              );\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  private void testParallelRollupStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);     \n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    expression = StreamExpressionParser.parse(\"parallel(collection1,\"\n                                              + \"rollup(\"\n                                                + \"search(collection1, q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n                                                + \"over=\\\"a_s\\\",\"\n                                                + \"sum(a_i),\"\n                                                + \"sum(a_f),\"\n                                                + \"min(a_i),\"\n                                                + \"min(a_f),\"\n                                                + \"max(a_i),\"\n                                                + \"max(a_f),\"\n                                                + \"avg(a_i),\"\n                                                + \"avg(a_f),\"\n                                                + \"count(*)\"\n                                              + \"),\"\n                                              + \"workers=\\\"2\\\", zkHost=\\\"\"+zkServer.getZkAddress()+\"\\\", sort=\\\"a_s asc\\\")\"\n                                              );\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);     \n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    expression = StreamExpressionParser.parse(\"parallel(\" + COLLECTION + \",\"\n                                              + \"rollup(\"\n                                                + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n                                                + \"over=\\\"a_s\\\",\"\n                                                + \"sum(a_i),\"\n                                                + \"sum(a_f),\"\n                                                + \"min(a_i),\"\n                                                + \"min(a_f),\"\n                                                + \"max(a_i),\"\n                                                + \"max(a_f),\"\n                                                + \"avg(a_i),\"\n                                                + \"avg(a_f),\"\n                                                + \"count(*)\"\n                                              + \"),\"\n                                              + \"workers=\\\"2\\\", zkHost=\\\"\"+cluster.getZkServer().getZkAddress()+\"\\\", sort=\\\"a_s asc\\\")\"\n                                              );\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  private void testParallelRollupStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);     \n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    expression = StreamExpressionParser.parse(\"parallel(collection1,\"\n                                              + \"rollup(\"\n                                                + \"search(collection1, q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n                                                + \"over=\\\"a_s\\\",\"\n                                                + \"sum(a_i),\"\n                                                + \"sum(a_f),\"\n                                                + \"min(a_i),\"\n                                                + \"min(a_f),\"\n                                                + \"max(a_i),\"\n                                                + \"max(a_f),\"\n                                                + \"avg(a_i),\"\n                                                + \"avg(a_f),\"\n                                                + \"count(*)\"\n                                              + \"),\"\n                                              + \"workers=\\\"2\\\", zkHost=\\\"\"+zkServer.getZkAddress()+\"\\\", sort=\\\"a_s asc\\\")\"\n                                              );\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);     \n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    expression = StreamExpressionParser.parse(\"parallel(\" + COLLECTIONORALIAS + \",\"\n                                              + \"rollup(\"\n                                                + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n                                                + \"over=\\\"a_s\\\",\"\n                                                + \"sum(a_i),\"\n                                                + \"sum(a_f),\"\n                                                + \"min(a_i),\"\n                                                + \"min(a_f),\"\n                                                + \"max(a_i),\"\n                                                + \"max(a_f),\"\n                                                + \"avg(a_i),\"\n                                                + \"avg(a_f),\"\n                                                + \"count(*)\"\n                                              + \"),\"\n                                              + \"workers=\\\"2\\\", zkHost=\\\"\"+cluster.getZkServer().getZkAddress()+\"\\\", sort=\\\"a_s asc\\\")\"\n                                              );\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);     \n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    expression = StreamExpressionParser.parse(\"parallel(\" + COLLECTION + \",\"\n                                              + \"rollup(\"\n                                                + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n                                                + \"over=\\\"a_s\\\",\"\n                                                + \"sum(a_i),\"\n                                                + \"sum(a_f),\"\n                                                + \"min(a_i),\"\n                                                + \"min(a_f),\"\n                                                + \"max(a_i),\"\n                                                + \"max(a_f),\"\n                                                + \"avg(a_i),\"\n                                                + \"avg(a_f),\"\n                                                + \"count(*)\"\n                                              + \"),\"\n                                              + \"workers=\\\"2\\\", zkHost=\\\"\"+cluster.getZkServer().getZkAddress()+\"\\\", sort=\\\"a_s asc\\\")\"\n                                              );\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);     \n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    expression = StreamExpressionParser.parse(\"parallel(\" + COLLECTIONORALIAS + \",\"\n                                              + \"rollup(\"\n                                                + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n                                                + \"over=\\\"a_s\\\",\"\n                                                + \"sum(a_i),\"\n                                                + \"sum(a_f),\"\n                                                + \"min(a_i),\"\n                                                + \"min(a_f),\"\n                                                + \"max(a_i),\"\n                                                + \"max(a_f),\"\n                                                + \"avg(a_i),\"\n                                                + \"avg(a_f),\"\n                                                + \"count(*)\"\n                                              + \"),\"\n                                              + \"workers=\\\"2\\\", zkHost=\\\"\"+cluster.getZkServer().getZkAddress()+\"\\\", sort=\\\"a_s asc\\\")\"\n                                              );\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","sourceOld":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);     \n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    expression = StreamExpressionParser.parse(\"parallel(\" + COLLECTION + \",\"\n                                              + \"rollup(\"\n                                                + \"search(\" + COLLECTION + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n                                                + \"over=\\\"a_s\\\",\"\n                                                + \"sum(a_i),\"\n                                                + \"sum(a_f),\"\n                                                + \"min(a_i),\"\n                                                + \"min(a_f),\"\n                                                + \"max(a_i),\"\n                                                + \"max(a_f),\"\n                                                + \"avg(a_i),\"\n                                                + \"avg(a_f),\"\n                                                + \"count(*)\"\n                                              + \"),\"\n                                              + \"workers=\\\"2\\\", zkHost=\\\"\"+cluster.getZkServer().getZkAddress()+\"\\\", sort=\\\"a_s asc\\\")\"\n                                              );\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    try {\n      expression = StreamExpressionParser.parse(\"parallel(\" + COLLECTIONORALIAS + \",\"\n              + \"rollup(\"\n              + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n              + \"over=\\\"a_s\\\",\"\n              + \"sum(a_i),\"\n              + \"sum(a_f),\"\n              + \"min(a_i),\"\n              + \"min(a_f),\"\n              + \"max(a_i),\"\n              + \"max(a_f),\"\n              + \"avg(a_i),\"\n              + \"avg(a_f),\"\n              + \"count(*)\"\n              + \"),\"\n              + \"workers=\\\"2\\\", zkHost=\\\"\" + cluster.getZkServer().getZkAddress() + \"\\\", sort=\\\"a_s asc\\\")\"\n      );\n\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);     \n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    expression = StreamExpressionParser.parse(\"parallel(\" + COLLECTIONORALIAS + \",\"\n                                              + \"rollup(\"\n                                                + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n                                                + \"over=\\\"a_s\\\",\"\n                                                + \"sum(a_i),\"\n                                                + \"sum(a_f),\"\n                                                + \"min(a_i),\"\n                                                + \"min(a_f),\"\n                                                + \"max(a_i),\"\n                                                + \"max(a_f),\"\n                                                + \"avg(a_i),\"\n                                                + \"avg(a_f),\"\n                                                + \"count(*)\"\n                                              + \"),\"\n                                              + \"workers=\\\"2\\\", zkHost=\\\"\"+cluster.getZkServer().getZkAddress()+\"\\\", sort=\\\"a_s asc\\\")\"\n                                              );\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    try {\n      expression = StreamExpressionParser.parse(\"parallel(\" + COLLECTIONORALIAS + \",\"\n              + \"rollup(\"\n              + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n              + \"over=\\\"a_s\\\",\"\n              + \"sum(a_i),\"\n              + \"sum(a_f),\"\n              + \"min(a_i),\"\n              + \"min(a_f),\"\n              + \"max(a_i),\"\n              + \"max(a_f),\"\n              + \"avg(a_i),\"\n              + \"avg(a_f),\"\n              + \"count(*)\"\n              + \"),\"\n              + \"workers=\\\"2\\\", zkHost=\\\"\" + cluster.getZkServer().getZkAddress() + \"\\\", sort=\\\"a_s asc\\\")\"\n      );\n\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);     \n    \n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    expression = StreamExpressionParser.parse(\"parallel(\" + COLLECTIONORALIAS + \",\"\n                                              + \"rollup(\"\n                                                + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n                                                + \"over=\\\"a_s\\\",\"\n                                                + \"sum(a_i),\"\n                                                + \"sum(a_f),\"\n                                                + \"min(a_i),\"\n                                                + \"min(a_f),\"\n                                                + \"max(a_i),\"\n                                                + \"max(a_f),\"\n                                                + \"avg(a_i),\"\n                                                + \"avg(a_f),\"\n                                                + \"count(*)\"\n                                              + \"),\"\n                                              + \"workers=\\\"2\\\", zkHost=\\\"\"+cluster.getZkServer().getZkAddress()+\"\\\", sort=\\\"a_s asc\\\")\"\n                                              );\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    //Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testParallelRollupStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testParallelRollupStream().mjava","sourceNew":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    try {\n      expression = StreamExpressionParser.parse(\"parallel(\" + COLLECTIONORALIAS + \",\"\n              + \"rollup(\"\n              + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n              + \"over=\\\"a_s\\\",\"\n              + \"sum(a_i),\"\n              + \"sum(a_f),\"\n              + \"min(a_i),\"\n              + \"min(a_f),\"\n              + \"max(a_i),\"\n              + \"max(a_f),\"\n              + \"avg(a_i),\"\n              + \"avg(a_f),\"\n              + \"count(*)\"\n              + \"),\"\n              + \"workers=\\\"2\\\", zkHost=\\\"\" + cluster.getZkServer().getZkAddress() + \"\\\", sort=\\\"a_s asc\\\")\"\n      );\n\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testParallelRollupStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"count\", CountMetric.class);\n\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamExpression expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    try {\n      expression = StreamExpressionParser.parse(\"parallel(\" + COLLECTIONORALIAS + \",\"\n              + \"rollup(\"\n              + \"search(\" + COLLECTIONORALIAS + \", q=*:*, fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n              + \"over=\\\"a_s\\\",\"\n              + \"sum(a_i),\"\n              + \"sum(a_f),\"\n              + \"min(a_i),\"\n              + \"min(a_f),\"\n              + \"max(a_i),\"\n              + \"max(a_f),\"\n              + \"avg(a_i),\"\n              + \"avg(a_f),\"\n              + \"count(*)\"\n              + \"),\"\n              + \"workers=\\\"2\\\", zkHost=\\\"\" + cluster.getZkServer().getZkAddress() + \"\\\", sort=\\\"a_s asc\\\")\"\n      );\n\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      //Test Long and Double Sums\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello0\"));\n      assertTrue(sumi.doubleValue() == 17.0D);\n      assertTrue(sumf.doubleValue() == 18.0D);\n      assertTrue(mini.doubleValue() == 0.0D);\n      assertTrue(minf.doubleValue() == 1.0D);\n      assertTrue(maxi.doubleValue() == 14.0D);\n      assertTrue(maxf.doubleValue() == 10.0D);\n      assertTrue(avgi.doubleValue() == 4.25D);\n      assertTrue(avgf.doubleValue() == 4.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello4\"));\n      assertTrue(sumi.longValue() == 15);\n      assertTrue(sumf.doubleValue() == 11.0D);\n      assertTrue(mini.doubleValue() == 4.0D);\n      assertTrue(minf.doubleValue() == 4.0D);\n      assertTrue(maxi.doubleValue() == 11.0D);\n      assertTrue(maxf.doubleValue() == 7.0D);\n      assertTrue(avgi.doubleValue() == 7.5D);\n      assertTrue(avgf.doubleValue() == 5.5D);\n      assertTrue(count.doubleValue() == 2);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"3078cad1008b796c6d573b743c586fdf9ef5660a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["3078cad1008b796c6d573b743c586fdf9ef5660a","b940572a59da1b42b6c20ab5278155b12816807a"],"73450c0955930295d34703e7ddbfc6973b7a121a":["3078cad1008b796c6d573b743c586fdf9ef5660a","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["3078cad1008b796c6d573b743c586fdf9ef5660a","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","8c969f15cd04d31e520319c619a445ae21f02d72"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"8c969f15cd04d31e520319c619a445ae21f02d72":["73450c0955930295d34703e7ddbfc6973b7a121a"],"b940572a59da1b42b6c20ab5278155b12816807a":["3078cad1008b796c6d573b743c586fdf9ef5660a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"3078cad1008b796c6d573b743c586fdf9ef5660a":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","b940572a59da1b42b6c20ab5278155b12816807a"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","8c969f15cd04d31e520319c619a445ae21f02d72"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3078cad1008b796c6d573b743c586fdf9ef5660a"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"b940572a59da1b42b6c20ab5278155b12816807a":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","73450c0955930295d34703e7ddbfc6973b7a121a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}