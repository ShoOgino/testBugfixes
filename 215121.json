{"path":"solr/core/src/test/org/apache/solr/util/hll/IntegrationTestGenerator#stringCardinality(HLL).mjava","commits":[{"id":"6faa211c4af605e3cf078a76d200c1dc348973f5","date":1437043657,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/IntegrationTestGenerator#stringCardinality(HLL).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns the algorithm-specific cardinality of the specified {@link HLL}\n     * as a {@link String} appropriate for comparison with the algorithm-specific\n     * cardinality provided by the PostgreSQL implementation.\n     *\n     * @param  hll the HLL whose algorithm-specific cardinality is to be printed.\n     *         This cannot be <code>null</code>.\n     * @return the algorithm-specific cardinality of the instance as a PostgreSQL-\n     *         compatible String. This will never be <code>null</code>\n     */\n    private static String stringCardinality(final HLL hll) {\n        switch(hll.getType()) {\n            case EMPTY:\n                return \"0\";\n            case EXPLICIT:/*promotion has not yet occurred*/\n                return Long.toString(hll.cardinality());\n            case SPARSE:\n                return Double.toString(hll.sparseProbabilisticAlgorithmCardinality());\n            case FULL:\n                return Double.toString(hll.fullProbabilisticAlgorithmCardinality());\n            default:\n                throw new RuntimeException(\"Unknown HLL type \" + hll.getType());\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/IntegrationTestGenerator#stringCardinality(HLL).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns the algorithm-specific cardinality of the specified {@link HLL}\n     * as a {@link String} appropriate for comparison with the algorithm-specific\n     * cardinality provided by the PostgreSQL implementation.\n     *\n     * @param  hll the HLL whose algorithm-specific cardinality is to be printed.\n     *         This cannot be <code>null</code>.\n     * @return the algorithm-specific cardinality of the instance as a PostgreSQL-\n     *         compatible String. This will never be <code>null</code>\n     */\n    private static String stringCardinality(final HLL hll) {\n        switch(hll.getType()) {\n            case EMPTY:\n                return \"0\";\n            case EXPLICIT:/*promotion has not yet occurred*/\n                return Long.toString(hll.cardinality());\n            case SPARSE:\n                return Double.toString(hll.sparseProbabilisticAlgorithmCardinality());\n            case FULL:\n                return Double.toString(hll.fullProbabilisticAlgorithmCardinality());\n            default:\n                throw new RuntimeException(\"Unknown HLL type \" + hll.getType());\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6faa211c4af605e3cf078a76d200c1dc348973f5"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6faa211c4af605e3cf078a76d200c1dc348973f5"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}