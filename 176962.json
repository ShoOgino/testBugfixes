{"path":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupWithDocsNotSearchable().mjava","commits":[{"id":"7c0c76f8855bd391c39890131d8dbd56c3fdcef0","date":1512185429,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupWithDocsNotSearchable().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBackupWithDocsNotSearchable() throws Exception {\n    //See SOLR-11616 to see when this issue can be triggered\n\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    assertU(adoc(\"id\", \"2\"));\n\n    assertU(commit(\"openSearcher\", \"false\"));\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='1']\");\n\n    //call backup\n    String location = createTempDir().toFile().getAbsolutePath();\n    String snapshotName = TestUtil.randomSimpleString(random(), 1, 5);\n\n    final CoreContainer cores = h.getCoreContainer();\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n            \"core\", DEFAULT_TEST_COLLECTION_NAME, \"name\", snapshotName, \"location\", location)\n            , resp);\n    assertNull(\"Backup should have succeeded\", resp.getException());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["19f02bb04467ed179738a398a7da80bbbe161c16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"670400747be2d99524159f3806d449ecfb0c2389","date":1512293281,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupWithDocsNotSearchable().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBackupWithDocsNotSearchable() throws Exception {\n    //See SOLR-11616 to see when this issue can be triggered\n\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    assertU(adoc(\"id\", \"2\"));\n\n    assertU(commit(\"openSearcher\", \"false\"));\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='1']\");\n\n    //call backup\n    String location = createTempDir().toFile().getAbsolutePath();\n    String snapshotName = TestUtil.randomSimpleString(random(), 1, 5);\n\n    final CoreContainer cores = h.getCoreContainer();\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n            \"core\", DEFAULT_TEST_COLLECTION_NAME, \"name\", snapshotName, \"location\", location)\n            , resp);\n    assertNull(\"Backup should have succeeded\", resp.getException());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19f02bb04467ed179738a398a7da80bbbe161c16","date":1573660732,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupWithDocsNotSearchable().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupWithDocsNotSearchable().mjava","sourceNew":"  public void testBackupWithDocsNotSearchable() throws Exception {\n    //See SOLR-11616 to see when this issue can be triggered\n\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    assertU(adoc(\"id\", \"2\"));\n\n    assertU(commit(\"openSearcher\", \"false\"));\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"id:1\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"id:2\"), \"//result[@numFound='0']\");\n\n    //call backup\n    String location = createTempDir().toFile().getAbsolutePath();\n    String snapshotName = TestUtil.randomSimpleString(random(), 1, 5);\n\n    final CoreContainer cores = h.getCoreContainer();\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n            \"core\", DEFAULT_TEST_COLLECTION_NAME, \"name\", snapshotName, \"location\", location)\n            , resp);\n    assertNull(\"Backup should have succeeded\", resp.getException());\n    simpleBackupCheck(new File(location, \"snapshot.\" + snapshotName), 2);\n  }\n\n","sourceOld":"  @Test\n  public void testBackupWithDocsNotSearchable() throws Exception {\n    //See SOLR-11616 to see when this issue can be triggered\n\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    assertU(adoc(\"id\", \"2\"));\n\n    assertU(commit(\"openSearcher\", \"false\"));\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='1']\");\n\n    //call backup\n    String location = createTempDir().toFile().getAbsolutePath();\n    String snapshotName = TestUtil.randomSimpleString(random(), 1, 5);\n\n    final CoreContainer cores = h.getCoreContainer();\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n            \"core\", DEFAULT_TEST_COLLECTION_NAME, \"name\", snapshotName, \"location\", location)\n            , resp);\n    assertNull(\"Backup should have succeeded\", resp.getException());\n\n  }\n\n","bugFix":["7c0c76f8855bd391c39890131d8dbd56c3fdcef0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupWithDocsNotSearchable().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupWithDocsNotSearchable().mjava","sourceNew":"  public void testBackupWithDocsNotSearchable() throws Exception {\n    //See SOLR-11616 to see when this issue can be triggered\n\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    assertU(adoc(\"id\", \"2\"));\n\n    assertU(commit(\"openSearcher\", \"false\"));\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"id:1\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"id:2\"), \"//result[@numFound='0']\");\n\n    //call backup\n    String location = createTempDir().toFile().getAbsolutePath();\n    String snapshotName = TestUtil.randomSimpleString(random(), 1, 5);\n\n    final CoreContainer cores = h.getCoreContainer();\n    try (final CoreAdminHandler admin = new CoreAdminHandler(cores)) {\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n              \"core\", DEFAULT_TEST_COLLECTION_NAME, \"name\", snapshotName, \"location\", location)\n              , resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(location, \"snapshot.\" + snapshotName), 2);\n    }\n  }\n\n","sourceOld":"  public void testBackupWithDocsNotSearchable() throws Exception {\n    //See SOLR-11616 to see when this issue can be triggered\n\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    assertU(adoc(\"id\", \"2\"));\n\n    assertU(commit(\"openSearcher\", \"false\"));\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"id:1\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"id:2\"), \"//result[@numFound='0']\");\n\n    //call backup\n    String location = createTempDir().toFile().getAbsolutePath();\n    String snapshotName = TestUtil.randomSimpleString(random(), 1, 5);\n\n    final CoreContainer cores = h.getCoreContainer();\n    final CoreAdminHandler admin = new CoreAdminHandler(cores);\n    SolrQueryResponse resp = new SolrQueryResponse();\n    admin.handleRequestBody\n        (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n            \"core\", DEFAULT_TEST_COLLECTION_NAME, \"name\", snapshotName, \"location\", location)\n            , resp);\n    assertNull(\"Backup should have succeeded\", resp.getException());\n    simpleBackupCheck(new File(location, \"snapshot.\" + snapshotName), 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6b17e67903ace8abb1d4d602bfc40d1994692ff","date":1593429504,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupWithDocsNotSearchable().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestCoreBackup#testBackupWithDocsNotSearchable().mjava","sourceNew":"  public void testBackupWithDocsNotSearchable() throws Exception {\n    //See SOLR-11616 to see when this issue can be triggered\n\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    assertU(adoc(\"id\", \"2\"));\n\n    assertU(commit(\"openSearcher\", \"false\"));\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"id:1\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"id:2\"), \"//result[@numFound='0']\");\n\n    //call backup\n    String location = createTempDir().toFile().getAbsolutePath();\n    String snapshotName = TestUtil.randomSimpleString(random(), 1, 5);\n\n    final CoreContainer cores = h.getCoreContainer();\n    cores.getAllowPaths().add(Paths.get(location));\n    try (final CoreAdminHandler admin = new CoreAdminHandler(cores)) {\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n              \"core\", DEFAULT_TEST_COLLECTION_NAME, \"name\", snapshotName, \"location\", location)\n              , resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(location, \"snapshot.\" + snapshotName), 2);\n    }\n  }\n\n","sourceOld":"  public void testBackupWithDocsNotSearchable() throws Exception {\n    //See SOLR-11616 to see when this issue can be triggered\n\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n\n    assertU(adoc(\"id\", \"2\"));\n\n    assertU(commit(\"openSearcher\", \"false\"));\n    assertQ(req(\"q\", \"*:*\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"id:1\"), \"//result[@numFound='1']\");\n    assertQ(req(\"q\", \"id:2\"), \"//result[@numFound='0']\");\n\n    //call backup\n    String location = createTempDir().toFile().getAbsolutePath();\n    String snapshotName = TestUtil.randomSimpleString(random(), 1, 5);\n\n    final CoreContainer cores = h.getCoreContainer();\n    try (final CoreAdminHandler admin = new CoreAdminHandler(cores)) {\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.BACKUPCORE.toString(),\n              \"core\", DEFAULT_TEST_COLLECTION_NAME, \"name\", snapshotName, \"location\", location)\n              , resp);\n      assertNull(\"Backup should have succeeded\", resp.getException());\n      simpleBackupCheck(new File(location, \"snapshot.\" + snapshotName), 2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6b17e67903ace8abb1d4d602bfc40d1994692ff":["ba055e19afc289adcb5bedaf68513793a7254012"],"ba055e19afc289adcb5bedaf68513793a7254012":["19f02bb04467ed179738a398a7da80bbbe161c16"],"19f02bb04467ed179738a398a7da80bbbe161c16":["670400747be2d99524159f3806d449ecfb0c2389"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c0c76f8855bd391c39890131d8dbd56c3fdcef0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"670400747be2d99524159f3806d449ecfb0c2389":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7c0c76f8855bd391c39890131d8dbd56c3fdcef0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6b17e67903ace8abb1d4d602bfc40d1994692ff"]},"commit2Childs":{"a6b17e67903ace8abb1d4d602bfc40d1994692ff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba055e19afc289adcb5bedaf68513793a7254012":["a6b17e67903ace8abb1d4d602bfc40d1994692ff"],"19f02bb04467ed179738a398a7da80bbbe161c16":["ba055e19afc289adcb5bedaf68513793a7254012"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c0c76f8855bd391c39890131d8dbd56c3fdcef0","670400747be2d99524159f3806d449ecfb0c2389"],"7c0c76f8855bd391c39890131d8dbd56c3fdcef0":["670400747be2d99524159f3806d449ecfb0c2389"],"670400747be2d99524159f3806d449ecfb0c2389":["19f02bb04467ed179738a398a7da80bbbe161c16"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}