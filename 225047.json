{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,SortedDocValues,int,String,boolean,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","commits":[{"id":"1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87","date":1440409984,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,SortedDocValues,int,String,boolean,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,SortedDocValues,int,String,boolean,boolean,FieldType,IntIntOpenHashMap,FunctionQuery,IndexSearcher).mjava","sourceNew":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  SortedDocValues collapseValues,\n                                  int nullPolicy,\n                                  String field,\n                                  boolean max,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValues = collapseValues;\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      if(funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        if(fieldType instanceof TrieIntField) {\n          this.collapseStrategy = new OrdIntStrategy(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, collapseValues);\n        } else if(fieldType instanceof TrieFloatField) {\n          this.collapseStrategy = new OrdFloatStrategy(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, collapseValues);\n        } else if(fieldType instanceof TrieLongField) {\n          this.collapseStrategy =  new OrdLongStrategy(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, collapseValues);\n        } else {\n          throw new IOException(\"min/max must be either TrieInt, TrieLong, TrieFloat.\");\n        }\n      }\n    }\n\n","sourceOld":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  SortedDocValues collapseValues,\n                                  int nullPolicy,\n                                  String field,\n                                  boolean max,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntOpenHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValues = collapseValues;\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      if(funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        if(fieldType instanceof TrieIntField) {\n          this.collapseStrategy = new OrdIntStrategy(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, collapseValues);\n        } else if(fieldType instanceof TrieFloatField) {\n          this.collapseStrategy = new OrdFloatStrategy(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, collapseValues);\n        } else if(fieldType instanceof TrieLongField) {\n          this.collapseStrategy =  new OrdLongStrategy(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, collapseValues);\n        } else {\n          throw new IOException(\"min/max must be either TrieInt, TrieLong, TrieFloat.\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0325de99180d346d61d36938843a5c8451fe26ae","date":1447368726,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,SortedDocValues,int,GroupHeadSelector,SortSpec,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#OrdFieldValueCollector(int,int,SortedDocValues,int,String,boolean,boolean,FieldType,IntIntHashMap,FunctionQuery,IndexSearcher).mjava","sourceNew":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  SortedDocValues collapseValues,\n                                  int nullPolicy,\n                                  GroupHeadSelector groupHeadSelector,\n                                  SortSpec sortSpec,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      assert ! GroupHeadSelectorType.SCORE.equals(groupHeadSelector.type);\n      \n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValues = collapseValues;\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      if (null != sortSpec) {\n        this.collapseStrategy = new OrdSortSpecStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, sortSpec, searcher, collapseValues);\n      } else if (funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        if(fieldType instanceof TrieIntField) {\n          this.collapseStrategy = new OrdIntStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if(fieldType instanceof TrieFloatField) {\n          this.collapseStrategy = new OrdFloatStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else if(fieldType instanceof TrieLongField) {\n          this.collapseStrategy =  new OrdLongStrategy(maxDoc, nullPolicy, new int[valueCount], groupHeadSelector, this.needsScores, boostDocs, collapseValues);\n        } else {\n          throw new IOException(\"min/max must be either TrieInt, TrieLong, TrieFloat.\");\n        }\n      }\n    }\n\n","sourceOld":"    public OrdFieldValueCollector(int maxDoc,\n                                  int segments,\n                                  SortedDocValues collapseValues,\n                                  int nullPolicy,\n                                  String field,\n                                  boolean max,\n                                  boolean needsScores,\n                                  FieldType fieldType,\n                                  IntIntHashMap boostDocs,\n                                  FunctionQuery funcQuery, IndexSearcher searcher) throws IOException{\n\n      this.maxDoc = maxDoc;\n      this.contexts = new LeafReaderContext[segments];\n      this.collapseValues = collapseValues;\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n\n      int valueCount = collapseValues.getValueCount();\n      this.nullPolicy = nullPolicy;\n      this.needsScores = needsScores;\n      if(funcQuery != null) {\n        this.collapseStrategy =  new OrdValueSourceStrategy(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, funcQuery, searcher, collapseValues);\n      } else {\n        if(fieldType instanceof TrieIntField) {\n          this.collapseStrategy = new OrdIntStrategy(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, collapseValues);\n        } else if(fieldType instanceof TrieFloatField) {\n          this.collapseStrategy = new OrdFloatStrategy(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, collapseValues);\n        } else if(fieldType instanceof TrieLongField) {\n          this.collapseStrategy =  new OrdLongStrategy(maxDoc, field, nullPolicy, new int[valueCount], max, this.needsScores, boostDocs, collapseValues);\n        } else {\n          throw new IOException(\"min/max must be either TrieInt, TrieLong, TrieFloat.\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0325de99180d346d61d36938843a5c8451fe26ae":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87"],"1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0325de99180d346d61d36938843a5c8451fe26ae"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87"],"0325de99180d346d61d36938843a5c8451fe26ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87":["0325de99180d346d61d36938843a5c8451fe26ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}