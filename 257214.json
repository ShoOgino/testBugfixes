{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","commits":[{"id":"fd4c4b2a55a46d2c45e3de4514f08e33215caa21","date":1288902330,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02ca424ac3c9ed6bc744a94c98aa797a68be260a","date":1290340291,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n      //writer.setInfoStream(System.out);\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd641edd796340315609425e9f70819e6d9ef0e","date":1295970051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        assertNotNull(delDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        assertNotNull(delDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        assertNotNull(delDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        assertNotNull(delDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        assertNotNull(delDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      int expected = 3+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      final Bits delDocs = MultiFields.getDeletedDocs(reader);\n      assertNotNull(delDocs);\n      for(int j=0;j<reader.maxDoc();j++) {\n        if (delDocs.get(j))\n          numDel++;\n        else {\n          reader.document(j);\n          reader.getTermFreqVectors(j);\n        }\n      }\n      reader.close();\n\n      assertEquals(1, numDel);\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","date":1305207152,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        assertNotNull(delDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        assertNotNull(delDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        assertNotNull(delDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        assertNotNull(delDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        assertNotNull(delDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        assertNotNull(delDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        assertNotNull(delDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        assertNotNull(delDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits delDocs = MultiFields.getDeletedDocs(reader);\n        assertNotNull(delDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (delDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getDeletedDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n      doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      doc.add(newField(\"other\", \"this will not get indexed\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                          Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", Field.Store.YES,\n                        Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53ae89cd75b0acbdfb8890710c6742f3fb80e65d","date":1315806626,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new ReusableAnalyzerBase(new ReusableAnalyzerBase.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n      doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n      doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n      doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new ReusableAnalyzerBase(new ReusableAnalyzerBase.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n      doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n      doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n      writer.setInfoStream(VERBOSE ? System.out : null);\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n      doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n      doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n      doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.optimize();\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n      doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n      doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermFreqVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermFreqVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n      doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n      doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n      doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n      doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n      doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n      doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir, true);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir, true);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterExceptions().mjava","sourceNew":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n      doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testDocumentsWriterExceptions() throws IOException {\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    for(int i=0;i<2;i++) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: cycle i=\" + i);\n      }\n      MockDirectoryWrapper dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setMergePolicy(newLogMergePolicy()));\n\n      // don't allow a sudden merge to clean up the deleted\n      // doc below:\n      LogMergePolicy lmp = (LogMergePolicy) writer.getConfig().getMergePolicy();\n      lmp.setMergeFactor(Math.max(lmp.getMergeFactor(), 5));\n\n      Document doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      writer.addDocument(doc);\n      writer.addDocument(doc);\n      doc.add(newField(\"crash\", \"this should crash after 4 terms\", DocCopyIterator.custom5));\n      doc.add(newField(\"other\", \"this will not get indexed\", DocCopyIterator.custom5));\n      try {\n        writer.addDocument(doc);\n        fail(\"did not hit expected exception\");\n      } catch (IOException ioe) {\n        if (VERBOSE) {\n          System.out.println(\"TEST: hit expected exception\");\n          ioe.printStackTrace(System.out);\n        }\n      }\n\n      if (0 == i) {\n        doc = new Document();\n        doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n        writer.addDocument(doc);\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      if (VERBOSE) {\n        System.out.println(\"TEST: open reader\");\n      }\n      IndexReader reader = IndexReader.open(dir);\n      if (i == 0) { \n        int expected = 5;\n        assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n        assertEquals(expected, reader.maxDoc());\n        int numDel = 0;\n        final Bits liveDocs = MultiFields.getLiveDocs(reader);\n        assertNotNull(liveDocs);\n        for(int j=0;j<reader.maxDoc();j++) {\n          if (!liveDocs.get(j))\n            numDel++;\n          else {\n            reader.document(j);\n            reader.getTermVectors(j);\n          }\n        }\n        assertEquals(1, numDel);\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          analyzer).setMaxBufferedDocs(10));\n      doc = new Document();\n      doc.add(newField(\"contents\", \"here are some contents\", DocCopyIterator.custom5));\n      for(int j=0;j<17;j++)\n        writer.addDocument(doc);\n      writer.forceMerge(1);\n      writer.close();\n\n      reader = IndexReader.open(dir);\n      int expected = 19+(1-i)*2;\n      assertEquals(expected, reader.docFreq(new Term(\"contents\", \"here\")));\n      assertEquals(expected, reader.maxDoc());\n      int numDel = 0;\n      assertNull(MultiFields.getLiveDocs(reader));\n      for(int j=0;j<reader.maxDoc();j++) {\n        reader.document(j);\n        reader.getTermVectors(j);\n      }\n      reader.close();\n      assertEquals(0, numDel);\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["3cc749c053615f5871f3b95715fe292f34e70a53","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3cc749c053615f5871f3b95715fe292f34e70a53"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02ca424ac3c9ed6bc744a94c98aa797a68be260a"],"c19f985e36a65cc969e8e564fe337a0d41512075":["cfd641edd796340315609425e9f70819e6d9ef0e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f49143da0a5d278a72f741432047fcfa6da996e":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["29ef99d61cda9641b6250bf9567329a6e65f901d","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"06584e6e98d592b34e1329b384182f368d2025e8":["2f49143da0a5d278a72f741432047fcfa6da996e"],"cfd641edd796340315609425e9f70819e6d9ef0e":["02ca424ac3c9ed6bc744a94c98aa797a68be260a"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"3cc749c053615f5871f3b95715fe292f34e70a53":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4":["c19f985e36a65cc969e8e564fe337a0d41512075"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"02ca424ac3c9ed6bc744a94c98aa797a68be260a":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["3cc749c053615f5871f3b95715fe292f34e70a53","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"3bb13258feba31ab676502787ab2e1779f129b7a":["85a883878c0af761245ab048babc63d099f835f3","02ca424ac3c9ed6bc744a94c98aa797a68be260a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["1509f151d7692d84fae414b2b799ac06ba60fcb4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3cc749c053615f5871f3b95715fe292f34e70a53"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","a3776dccca01c11e7046323cfad46a3b4a471233"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","85a883878c0af761245ab048babc63d099f835f3","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"2f49143da0a5d278a72f741432047fcfa6da996e":["06584e6e98d592b34e1329b384182f368d2025e8"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"cfd641edd796340315609425e9f70819e6d9ef0e":["c19f985e36a65cc969e8e564fe337a0d41512075"],"85a883878c0af761245ab048babc63d099f835f3":["3bb13258feba31ab676502787ab2e1779f129b7a"],"3cc749c053615f5871f3b95715fe292f34e70a53":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["2f49143da0a5d278a72f741432047fcfa6da996e"],"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"02ca424ac3c9ed6bc744a94c98aa797a68be260a":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cfd641edd796340315609425e9f70819e6d9ef0e","3bb13258feba31ab676502787ab2e1779f129b7a"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["85a883878c0af761245ab048babc63d099f835f3","02ca424ac3c9ed6bc744a94c98aa797a68be260a"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","bde51b089eb7f86171eb3406e38a274743f9b7ac","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}