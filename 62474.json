{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#missingTest().mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#missingTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingTest() throws Exception { \n    String[] params = new String[] {\n        \"o.missingn.s.int\", \"missing(int_id)\",\n        \"o.missingn.s.long\", \"missing(long_ld)\",\n        \"o.missingn.s.float\", \"missing(float_fd)\",\n        \"o.missingn.s.double\", \"missing(double_dd)\",\n        \"o.missingn.ff\", \"string_sd\",\n        \"o.missingn.ff\", \"date_dtd\",\n\n        \"o.missing.s.str\", \"missing(string_sd)\",\n        \"o.missing.s.date\", \"missing(date_dtd)\",\n        \"o.missing.ff\", \"int_id\",\n        \"o.missing.ff\", \"long_ld\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Date\n    Collection<Long> intDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"int\", false);\n    setLatestType(\"int\");\n    assertEquals(responseStr,intDateTestMissing,intDate);\n    \n    //Int String\n    Collection<Long> intString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    assertEquals(responseStr,intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    setLatestType(\"long\");\n    assertEquals(responseStr,longDateTestMissing,longDate);\n    \n    //Long String\n    Collection<Long> longString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    assertEquals(responseStr,longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    setLatestType(\"float\");\n    assertEquals(responseStr,floatDateTestMissing,floatDate);\n    \n    //Float String\n    Collection<Long> floatString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    assertEquals(responseStr,floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    setLatestType(\"double\");\n    assertEquals(responseStr,doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    Collection<Long> doubleString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    assertEquals(responseStr,doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"date\", false);\n    setLatestType(\"date\");\n    assertEquals(responseStr,dateIntTestMissing,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"date\", false);\n    assertEquals(responseStr,dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"str\", false);\n    setLatestType(\"string\");\n    assertEquals(responseStr,stringIntTestMissing,stringInt);\n    \n    //String Long\n    Collection<Long> stringLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"str\", false);\n    assertEquals(responseStr,stringLongTestMissing,stringLong);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#missingTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingTest() throws Exception { \n    String[] params = new String[] {\n        \"o.missingn.s.int\", \"missing(int_id)\",\n        \"o.missingn.s.long\", \"missing(long_ld)\",\n        \"o.missingn.s.float\", \"missing(float_fd)\",\n        \"o.missingn.s.double\", \"missing(double_dd)\",\n        \"o.missingn.ff\", \"string_sd\",\n        \"o.missingn.ff\", \"date_dtd\",\n\n        \"o.missing.s.str\", \"missing(string_sd)\",\n        \"o.missing.s.date\", \"missing(date_dtd)\",\n        \"o.missing.ff\", \"int_id\",\n        \"o.missing.ff\", \"long_ld\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Date\n    Collection<Long> intDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"int\", false);\n    setLatestType(\"int\");\n    assertEquals(responseStr,intDateTestMissing,intDate);\n    \n    //Int String\n    Collection<Long> intString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    assertEquals(responseStr,intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    setLatestType(\"long\");\n    assertEquals(responseStr,longDateTestMissing,longDate);\n    \n    //Long String\n    Collection<Long> longString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    assertEquals(responseStr,longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    setLatestType(\"float\");\n    assertEquals(responseStr,floatDateTestMissing,floatDate);\n    \n    //Float String\n    Collection<Long> floatString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    assertEquals(responseStr,floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    setLatestType(\"double\");\n    assertEquals(responseStr,doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    Collection<Long> doubleString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    assertEquals(responseStr,doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"date\", false);\n    setLatestType(\"date\");\n    assertEquals(responseStr,dateIntTestMissing,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"date\", false);\n    assertEquals(responseStr,dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"str\", false);\n    setLatestType(\"string\");\n    assertEquals(responseStr,stringIntTestMissing,stringInt);\n    \n    //String Long\n    Collection<Long> stringLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"str\", false);\n    assertEquals(responseStr,stringLongTestMissing,stringLong);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#missingTest().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingTest() throws Exception { \n    String[] params = new String[] {\n        \"o.missingn.s.int\", \"missing(int_id)\",\n        \"o.missingn.s.long\", \"missing(long_ld)\",\n        \"o.missingn.s.float\", \"missing(float_fd)\",\n        \"o.missingn.s.double\", \"missing(double_dd)\",\n        \"o.missingn.ff\", \"string_sd\",\n        \"o.missingn.ff\", \"date_dtd\",\n\n        \"o.missing.s.str\", \"missing(string_sd)\",\n        \"o.missing.s.date\", \"missing(date_dtd)\",\n        \"o.missing.ff\", \"int_id\",\n        \"o.missing.ff\", \"long_ld\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Date\n    Collection<Long> intDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"int\", false);\n    setLatestType(\"int\");\n    assertEquals(responseStr,intDateTestMissing,intDate);\n    \n    //Int String\n    Collection<Long> intString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    assertEquals(responseStr,intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    setLatestType(\"long\");\n    assertEquals(responseStr,longDateTestMissing,longDate);\n    \n    //Long String\n    Collection<Long> longString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    assertEquals(responseStr,longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    setLatestType(\"float\");\n    assertEquals(responseStr,floatDateTestMissing,floatDate);\n    \n    //Float String\n    Collection<Long> floatString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    assertEquals(responseStr,floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    setLatestType(\"double\");\n    assertEquals(responseStr,doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    Collection<Long> doubleString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    assertEquals(responseStr,doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"date\", false);\n    setLatestType(\"date\");\n    assertEquals(responseStr,dateIntTestMissing,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"date\", false);\n    assertEquals(responseStr,dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"str\", false);\n    setLatestType(\"string\");\n    assertEquals(responseStr,stringIntTestMissing,stringInt);\n    \n    //String Long\n    Collection<Long> stringLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"str\", false);\n    assertEquals(responseStr,stringLongTestMissing,stringLong);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3268d17c69c8720ec02a4815ece73ac3ab438c1","date":1499337647,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#missingTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#missingTest().mjava","sourceNew":"  @Test\n  public void missingTest() throws Exception { \n    String[] params = new String[] {\n        \"o.missingn.s.int\", \"missing(int_id)\",\n        \"o.missingn.s.long\", \"missing(long_ld)\",\n        \"o.missingn.s.float\", \"missing(float_fd)\",\n        \"o.missingn.s.double\", \"missing(double_dd)\",\n        \"o.missingn.ff\", \"string_sd\",\n        \"o.missingn.ff\", \"date_dtd\",\n\n        \"o.missing.s.str\", \"missing(string_sd)\",\n        \"o.missing.s.date\", \"missing(date_dtd)\",\n        \"o.missing.ff\", \"int_id\",\n        \"o.missing.ff\", \"long_ld\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Date\n    Collection<Long> intDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"int\", false);\n    setLatestType(\"int\");\n    assertEquals(responseStr,intDateTestMissing,intDate);\n    \n    //Int String\n    Collection<Long> intString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    assertEquals(responseStr,intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    setLatestType(\"long\");\n    assertEquals(responseStr,longDateTestMissing,longDate);\n    \n    //Long String\n    Collection<Long> longString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    assertEquals(responseStr,longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    setLatestType(\"float\");\n    assertEquals(responseStr,floatDateTestMissing,floatDate);\n    \n    //Float String\n    Collection<Long> floatString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    assertEquals(responseStr,floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    setLatestType(\"double\");\n    assertEquals(responseStr,doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    Collection<Long> doubleString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    assertEquals(responseStr,doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"date\", false);\n    setLatestType(\"date\");\n    assertEquals(responseStr,dateIntTestMissing,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"date\", false);\n    assertEquals(responseStr,dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"str\", false);\n    setLatestType(\"string\");\n    assertEquals(responseStr,stringIntTestMissing,stringInt);\n    \n    //String Long\n    Collection<Long> stringLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"str\", false);\n    assertEquals(responseStr,stringLongTestMissing,stringLong);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingTest() throws Exception { \n    String[] params = new String[] {\n        \"o.missingn.s.int\", \"missing(int_id)\",\n        \"o.missingn.s.long\", \"missing(long_ld)\",\n        \"o.missingn.s.float\", \"missing(float_fd)\",\n        \"o.missingn.s.double\", \"missing(double_dd)\",\n        \"o.missingn.ff\", \"string_sd\",\n        \"o.missingn.ff\", \"date_dtd\",\n\n        \"o.missing.s.str\", \"missing(string_sd)\",\n        \"o.missing.s.date\", \"missing(date_dtd)\",\n        \"o.missing.ff\", \"int_id\",\n        \"o.missing.ff\", \"long_ld\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Date\n    Collection<Long> intDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"int\", false);\n    setLatestType(\"int\");\n    assertEquals(responseStr,intDateTestMissing,intDate);\n    \n    //Int String\n    Collection<Long> intString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    assertEquals(responseStr,intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    setLatestType(\"long\");\n    assertEquals(responseStr,longDateTestMissing,longDate);\n    \n    //Long String\n    Collection<Long> longString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    assertEquals(responseStr,longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    setLatestType(\"float\");\n    assertEquals(responseStr,floatDateTestMissing,floatDate);\n    \n    //Float String\n    Collection<Long> floatString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    assertEquals(responseStr,floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    setLatestType(\"double\");\n    assertEquals(responseStr,doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    Collection<Long> doubleString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    assertEquals(responseStr,doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"date\", false);\n    setLatestType(\"date\");\n    assertEquals(responseStr,dateIntTestMissing,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"date\", false);\n    assertEquals(responseStr,dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"str\", false);\n    setLatestType(\"string\");\n    assertEquals(responseStr,stringIntTestMissing,stringInt);\n    \n    //String Long\n    Collection<Long> stringLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"str\", false);\n    assertEquals(responseStr,stringLongTestMissing,stringLong);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#missingTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#missingTest().mjava","sourceNew":"  @Test\n  public void missingTest() throws Exception { \n    String[] params = new String[] {\n        \"o.missingn.s.int\", \"missing(int_id)\",\n        \"o.missingn.s.long\", \"missing(long_ld)\",\n        \"o.missingn.s.float\", \"missing(float_fd)\",\n        \"o.missingn.s.double\", \"missing(double_dd)\",\n        \"o.missingn.ff\", \"string_sd\",\n        \"o.missingn.ff\", \"date_dtd\",\n\n        \"o.missing.s.str\", \"missing(string_sd)\",\n        \"o.missing.s.date\", \"missing(date_dtd)\",\n        \"o.missing.ff\", \"int_id\",\n        \"o.missing.ff\", \"long_ld\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Date\n    Collection<Long> intDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"int\", false);\n    setLatestType(\"int\");\n    assertEquals(responseStr,intDateTestMissing,intDate);\n    \n    //Int String\n    Collection<Long> intString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    assertEquals(responseStr,intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    setLatestType(\"long\");\n    assertEquals(responseStr,longDateTestMissing,longDate);\n    \n    //Long String\n    Collection<Long> longString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    assertEquals(responseStr,longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    setLatestType(\"float\");\n    assertEquals(responseStr,floatDateTestMissing,floatDate);\n    \n    //Float String\n    Collection<Long> floatString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    assertEquals(responseStr,floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    setLatestType(\"double\");\n    assertEquals(responseStr,doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    Collection<Long> doubleString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    assertEquals(responseStr,doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"date\", false);\n    setLatestType(\"date\");\n    assertEquals(responseStr,dateIntTestMissing,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"date\", false);\n    assertEquals(responseStr,dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"str\", false);\n    setLatestType(\"string\");\n    assertEquals(responseStr,stringIntTestMissing,stringInt);\n    \n    //String Long\n    Collection<Long> stringLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"str\", false);\n    assertEquals(responseStr,stringLongTestMissing,stringLong);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingTest() throws Exception { \n    String[] params = new String[] {\n        \"o.missingn.s.int\", \"missing(int_id)\",\n        \"o.missingn.s.long\", \"missing(long_ld)\",\n        \"o.missingn.s.float\", \"missing(float_fd)\",\n        \"o.missingn.s.double\", \"missing(double_dd)\",\n        \"o.missingn.ff\", \"string_sd\",\n        \"o.missingn.ff\", \"date_dtd\",\n\n        \"o.missing.s.str\", \"missing(string_sd)\",\n        \"o.missing.s.date\", \"missing(date_dtd)\",\n        \"o.missing.ff\", \"int_id\",\n        \"o.missing.ff\", \"long_ld\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Date\n    Collection<Long> intDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"int\", false);\n    setLatestType(\"int\");\n    assertEquals(responseStr,intDateTestMissing,intDate);\n    \n    //Int String\n    Collection<Long> intString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    assertEquals(responseStr,intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    setLatestType(\"long\");\n    assertEquals(responseStr,longDateTestMissing,longDate);\n    \n    //Long String\n    Collection<Long> longString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    assertEquals(responseStr,longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    setLatestType(\"float\");\n    assertEquals(responseStr,floatDateTestMissing,floatDate);\n    \n    //Float String\n    Collection<Long> floatString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    assertEquals(responseStr,floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    setLatestType(\"double\");\n    assertEquals(responseStr,doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    Collection<Long> doubleString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    assertEquals(responseStr,doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"date\", false);\n    setLatestType(\"date\");\n    assertEquals(responseStr,dateIntTestMissing,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"date\", false);\n    assertEquals(responseStr,dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"str\", false);\n    setLatestType(\"string\");\n    assertEquals(responseStr,stringIntTestMissing,stringInt);\n    \n    //String Long\n    Collection<Long> stringLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"str\", false);\n    assertEquals(responseStr,stringLongTestMissing,stringLong);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":4,"author":"Houston Putman","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetCloudTest#missingTest().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void missingTest() throws Exception { \n    String[] params = new String[] {\n        \"o.missingn.s.int\", \"missing(int_id)\",\n        \"o.missingn.s.long\", \"missing(long_ld)\",\n        \"o.missingn.s.float\", \"missing(float_fd)\",\n        \"o.missingn.s.double\", \"missing(double_dd)\",\n        \"o.missingn.ff\", \"string_sd\",\n        \"o.missingn.ff\", \"date_dtd\",\n\n        \"o.missing.s.str\", \"missing(string_sd)\",\n        \"o.missing.s.date\", \"missing(date_dtd)\",\n        \"o.missing.ff\", \"int_id\",\n        \"o.missing.ff\", \"long_ld\"\n    };\n    NamedList<Object> response = queryCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int Date\n    Collection<Long> intDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"int\", false);\n    setLatestType(\"int\");\n    assertEquals(responseStr,intDateTestMissing,intDate);\n    \n    //Int String\n    Collection<Long> intString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"int\", false);\n    assertEquals(responseStr,intStringTestMissing,intString);\n\n    //Long Date\n    Collection<Long> longDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"long\", false);\n    setLatestType(\"long\");\n    assertEquals(responseStr,longDateTestMissing,longDate);\n    \n    //Long String\n    Collection<Long> longString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"long\", false);\n    assertEquals(responseStr,longStringTestMissing,longString);\n\n    //Float Date\n    Collection<Long> floatDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"float\", false);\n    setLatestType(\"float\");\n    assertEquals(responseStr,floatDateTestMissing,floatDate);\n    \n    //Float String\n    Collection<Long> floatString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"float\", false);\n    assertEquals(responseStr,floatStringTestMissing,floatString);\n\n    //Double Date\n    Collection<Long> doubleDate = getValueList(response, \"missingn\", \"fieldFacets\", \"date_dtd\", \"double\", false);\n    setLatestType(\"double\");\n    assertEquals(responseStr,doubleDateTestMissing,doubleDate);\n    \n    //Double String\n    Collection<Long> doubleString = getValueList(response, \"missingn\", \"fieldFacets\", \"string_sd\", \"double\", false);\n    assertEquals(responseStr,doubleStringTestMissing,doubleString);\n\n    //Date Int\n    Collection<Long> dateInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"date\", false);\n    setLatestType(\"date\");\n    assertEquals(responseStr,dateIntTestMissing,dateInt);\n    \n    //Date Long\n    Collection<Long> dateLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"date\", false);\n    assertEquals(responseStr,dateLongTestMissing,dateLong);\n\n    //String Int\n    Collection<Long> stringInt = getValueList(response, \"missing\", \"fieldFacets\", \"int_id\", \"str\", false);\n    setLatestType(\"string\");\n    assertEquals(responseStr,stringIntTestMissing,stringInt);\n    \n    //String Long\n    Collection<Long> stringLong = getValueList(response, \"missing\", \"fieldFacets\", \"long_ld\", \"str\", false);\n    assertEquals(responseStr,stringLongTestMissing,stringLong);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3268d17c69c8720ec02a4815ece73ac3ab438c1":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"e73d8d559120669b47658108d818b637df5456ea":["30c8e5574b55d57947e989443dfde611646530ee","e3268d17c69c8720ec02a4815ece73ac3ab438c1"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["e3268d17c69c8720ec02a4815ece73ac3ab438c1"]},"commit2Childs":{"e3268d17c69c8720ec02a4815ece73ac3ab438c1":["e73d8d559120669b47658108d818b637df5456ea","3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":["e73d8d559120669b47658108d818b637df5456ea"],"e73d8d559120669b47658108d818b637df5456ea":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["e3268d17c69c8720ec02a4815ece73ac3ab438c1","30c8e5574b55d57947e989443dfde611646530ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}