{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#bearingGreatCircle(double,double,double,double).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#bearingGreatCircle(double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoProjectionUtils#bearingGreatCircle(double,double,double,double).mjava","sourceNew":"  /**\n   * Finds the bearing (in degrees) between 2 geo points (lon, lat) using great circle arc\n   * @param lon1 first point longitude in degrees\n   * @param lat1 first point latitude in degrees\n   * @param lon2 second point longitude in degrees\n   * @param lat2 second point latitude in degrees\n   * @return the bearing (in degrees) between the two provided points\n   */\n  public static double bearingGreatCircle(double lon1, double lat1, double lon2, double lat2) {\n    double dLon = (lon2 - lon1) * TO_RADIANS;\n    lat2 *= TO_RADIANS;\n    lat1 *= TO_RADIANS;\n    double y = sin(dLon) * cos(lat2);\n    double x = cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(dLon);\n    return Math.atan2(y, x) * TO_DEGREES;\n  }\n\n","sourceOld":"  /**\n   * Finds the bearing (in degrees) between 2 geo points (lon, lat) using great circle arc\n   * @param lon1 first point longitude in degrees\n   * @param lat1 first point latitude in degrees\n   * @param lon2 second point longitude in degrees\n   * @param lat2 second point latitude in degrees\n   * @return the bearing (in degrees) between the two provided points\n   */\n  public static double bearingGreatCircle(double lon1, double lat1, double lon2, double lat2) {\n    double dLon = (lon2 - lon1) * TO_RADIANS;\n    lat2 *= TO_RADIANS;\n    lat1 *= TO_RADIANS;\n    double y = SloppyMath.sin(dLon) * SloppyMath.cos(lat2);\n    double x = SloppyMath.cos(lat1) * SloppyMath.sin(lat2) - SloppyMath.sin(lat1) * SloppyMath.cos(lat2) * SloppyMath.cos(dLon);\n    return Math.atan2(y, x) * TO_DEGREES;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#bearingGreatCircle(double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoProjectionUtils#bearingGreatCircle(double,double,double,double).mjava","sourceNew":"  /**\n   * Finds the bearing (in degrees) between 2 geo points (lon, lat) using great circle arc\n   * @param lon1 first point longitude in degrees\n   * @param lat1 first point latitude in degrees\n   * @param lon2 second point longitude in degrees\n   * @param lat2 second point latitude in degrees\n   * @return the bearing (in degrees) between the two provided points\n   */\n  public static double bearingGreatCircle(double lon1, double lat1, double lon2, double lat2) {\n    double dLon = (lon2 - lon1) * TO_RADIANS;\n    lat2 *= TO_RADIANS;\n    lat1 *= TO_RADIANS;\n    double y = sin(dLon) * cos(lat2);\n    double x = cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(dLon);\n    return Math.atan2(y, x) * TO_DEGREES;\n  }\n\n","sourceOld":"  /**\n   * Finds the bearing (in degrees) between 2 geo points (lon, lat) using great circle arc\n   * @param lon1 first point longitude in degrees\n   * @param lat1 first point latitude in degrees\n   * @param lon2 second point longitude in degrees\n   * @param lat2 second point latitude in degrees\n   * @return the bearing (in degrees) between the two provided points\n   */\n  public static double bearingGreatCircle(double lon1, double lat1, double lon2, double lat2) {\n    double dLon = (lon2 - lon1) * TO_RADIANS;\n    lat2 *= TO_RADIANS;\n    lat1 *= TO_RADIANS;\n    double y = SloppyMath.sin(dLon) * SloppyMath.cos(lat2);\n    double x = SloppyMath.cos(lat1) * SloppyMath.sin(lat2) - SloppyMath.sin(lat1) * SloppyMath.cos(lat2) * SloppyMath.cos(dLon);\n    return Math.atan2(y, x) * TO_DEGREES;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#bearingGreatCircle(double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#bearingGreatCircle(double,double,double,double).mjava","sourceNew":"  /**\n   * Finds the bearing (in degrees) between 2 geo points (lon, lat) using great circle arc\n   * @param lon1 first point longitude in degrees\n   * @param lat1 first point latitude in degrees\n   * @param lon2 second point longitude in degrees\n   * @param lat2 second point latitude in degrees\n   * @return the bearing (in degrees) between the two provided points\n   */\n  public static double bearingGreatCircle(double lon1, double lat1, double lon2, double lat2) {\n    double dLon = (lon2 - lon1) * TO_RADIANS;\n    lat2 *= TO_RADIANS;\n    lat1 *= TO_RADIANS;\n    double y = sloppySin(dLon) * cos(lat2);\n    double x = cos(lat1) * sloppySin(lat2) - sloppySin(lat1) * cos(lat2) * cos(dLon);\n    return Math.atan2(y, x) * TO_DEGREES;\n  }\n\n","sourceOld":"  /**\n   * Finds the bearing (in degrees) between 2 geo points (lon, lat) using great circle arc\n   * @param lon1 first point longitude in degrees\n   * @param lat1 first point latitude in degrees\n   * @param lon2 second point longitude in degrees\n   * @param lat2 second point latitude in degrees\n   * @return the bearing (in degrees) between the two provided points\n   */\n  public static double bearingGreatCircle(double lon1, double lat1, double lon2, double lat2) {\n    double dLon = (lon2 - lon1) * TO_RADIANS;\n    lat2 *= TO_RADIANS;\n    lat1 *= TO_RADIANS;\n    double y = sin(dLon) * cos(lat2);\n    double x = cos(lat1) * sin(lat2) - sin(lat1) * cos(lat2) * cos(dLon);\n    return Math.atan2(y, x) * TO_DEGREES;\n  }\n\n","bugFix":["937923083e4d137932336fc80f3d78758ff698a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#bearingGreatCircle(double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#bearingGreatCircle(double,double,double,double).mjava","sourceNew":"  /**\n   * Finds the bearing (in degrees) between 2 geo points (lat, lon) using great circle arc\n   * @param lat1 first point latitude in degrees\n   * @param lon1 first point longitude in degrees\n   * @param lat2 second point latitude in degrees\n   * @param lon2 second point longitude in degrees\n   * @return the bearing (in degrees) between the two provided points\n   */\n  public static double bearingGreatCircle(double lat1, double lon1, double lat2, double lon2) {\n    double dLon = (lon2 - lon1) * TO_RADIANS;\n    lat2 *= TO_RADIANS;\n    lat1 *= TO_RADIANS;\n    double y = sloppySin(dLon) * cos(lat2);\n    double x = cos(lat1) * sloppySin(lat2) - sloppySin(lat1) * cos(lat2) * cos(dLon);\n    return Math.atan2(y, x) * TO_DEGREES;\n  }\n\n","sourceOld":"  /**\n   * Finds the bearing (in degrees) between 2 geo points (lon, lat) using great circle arc\n   * @param lon1 first point longitude in degrees\n   * @param lat1 first point latitude in degrees\n   * @param lon2 second point longitude in degrees\n   * @param lat2 second point latitude in degrees\n   * @return the bearing (in degrees) between the two provided points\n   */\n  public static double bearingGreatCircle(double lon1, double lat1, double lon2, double lat2) {\n    double dLon = (lon2 - lon1) * TO_RADIANS;\n    lat2 *= TO_RADIANS;\n    lat1 *= TO_RADIANS;\n    double y = sloppySin(dLon) * cos(lat2);\n    double x = cos(lat1) * sloppySin(lat2) - sloppySin(lat1) * cos(lat2) * cos(dLon);\n    return Math.atan2(y, x) * TO_DEGREES;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3","date":1458680048,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoProjectionUtils#bearingGreatCircle(double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Finds the bearing (in degrees) between 2 geo points (lat, lon) using great circle arc\n   * @param lat1 first point latitude in degrees\n   * @param lon1 first point longitude in degrees\n   * @param lat2 second point latitude in degrees\n   * @param lon2 second point longitude in degrees\n   * @return the bearing (in degrees) between the two provided points\n   */\n  public static double bearingGreatCircle(double lat1, double lon1, double lat2, double lon2) {\n    double dLon = (lon2 - lon1) * TO_RADIANS;\n    lat2 *= TO_RADIANS;\n    lat1 *= TO_RADIANS;\n    double y = sloppySin(dLon) * cos(lat2);\n    double x = cos(lat1) * sloppySin(lat2) - sloppySin(lat1) * cos(lat2) * cos(dLon);\n    return Math.atan2(y, x) * TO_DEGREES;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["937923083e4d137932336fc80f3d78758ff698a6"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"]},"commit2Childs":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"937923083e4d137932336fc80f3d78758ff698a6":["ec60431d008a694828dacb4bc3cda775b6c44a9f","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}