{"path":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/util/ConnectionCostsBuilder#build(Path).mjava","commits":[{"id":"e3010cab237afb0b81c042f263115756e3cc6d67","date":1564503244,"type":0,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/util/ConnectionCostsBuilder#build(Path).mjava","pathOld":"/dev/null","sourceNew":"  public static ConnectionCostsWriter build(Path path) throws IOException {\n    try (Reader reader = Files.newBufferedReader(path, StandardCharsets.US_ASCII);\n         LineNumberReader lineReader = new LineNumberReader(reader)) {\n\n      String line = lineReader.readLine();\n      String[] dimensions = line.split(\"\\\\s+\");\n\n      assert dimensions.length == 2;\n\n      int forwardSize = Integer.parseInt(dimensions[0]);\n      int backwardSize = Integer.parseInt(dimensions[1]);\n\n      assert forwardSize > 0 && backwardSize > 0;\n\n      ConnectionCostsWriter costs = new ConnectionCostsWriter(forwardSize, backwardSize);\n\n      while ((line = lineReader.readLine()) != null) {\n        String[] fields = line.split(\"\\\\s+\");\n\n        assert fields.length == 3;\n\n        int forwardId = Integer.parseInt(fields[0]);\n        int backwardId = Integer.parseInt(fields[1]);\n        int cost = Integer.parseInt(fields[2]);\n\n        costs.add(forwardId, backwardId, cost);\n      }\n      return costs;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":0,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/util/ConnectionCostsBuilder#build(Path).mjava","pathOld":"/dev/null","sourceNew":"  public static ConnectionCostsWriter build(Path path) throws IOException {\n    try (Reader reader = Files.newBufferedReader(path, StandardCharsets.US_ASCII);\n         LineNumberReader lineReader = new LineNumberReader(reader)) {\n\n      String line = lineReader.readLine();\n      String[] dimensions = line.split(\"\\\\s+\");\n\n      assert dimensions.length == 2;\n\n      int forwardSize = Integer.parseInt(dimensions[0]);\n      int backwardSize = Integer.parseInt(dimensions[1]);\n\n      assert forwardSize > 0 && backwardSize > 0;\n\n      ConnectionCostsWriter costs = new ConnectionCostsWriter(forwardSize, backwardSize);\n\n      while ((line = lineReader.readLine()) != null) {\n        String[] fields = line.split(\"\\\\s+\");\n\n        assert fields.length == 3;\n\n        int forwardId = Integer.parseInt(fields[0]);\n        int backwardId = Integer.parseInt(fields[1]);\n        int cost = Integer.parseInt(fields[2]);\n\n        costs.add(forwardId, backwardId, cost);\n      }\n      return costs;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3010cab237afb0b81c042f263115756e3cc6d67":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3010cab237afb0b81c042f263115756e3cc6d67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3010cab237afb0b81c042f263115756e3cc6d67"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3010cab237afb0b81c042f263115756e3cc6d67","f8061ddd97f3352007d927dae445884a6f3d857b"],"e3010cab237afb0b81c042f263115756e3cc6d67":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}