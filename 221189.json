{"path":"solr/core/src/java/org/apache/solr/core/SolrCores#addCoreProperty(Map[String,String],SolrResourceLoader,Node,String,String,String).mjava","commits":[{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#addCoreProperty(Map[String,String],SolrResourceLoader,Node,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps#addCoreProperty(Map[String,String],SolrResourceLoader,Node,String,String,String).mjava","sourceNew":"  private void addCoreProperty(Map<String,String> coreAttribs, SolrResourceLoader loader, Node node, String name,\n      String value, String defaultValue) {\n    \n    if (node == null) {\n      coreAttribs.put(name, value);\n      return;\n    }\n    \n    if (node != null) {\n      String rawAttribValue = DOMUtil.getAttr(node, name, null);\n\n      if (value == null) {\n        coreAttribs.put(name, rawAttribValue);\n        return;\n      }\n      if (rawAttribValue == null && defaultValue != null && value.equals(defaultValue)) {\n        return;\n      }\n      if (rawAttribValue != null && value.equals(DOMUtil.substituteProperty(rawAttribValue, loader.getCoreProperties()))){\n        coreAttribs.put(name, rawAttribValue);\n      } else {\n        coreAttribs.put(name, value);\n      }\n    }\n\n  }\n\n","sourceOld":"  private void addCoreProperty(Map<String,String> coreAttribs, SolrResourceLoader loader, Node node, String name,\n      String value, String defaultValue) {\n    \n    if (node == null) {\n      coreAttribs.put(name, value);\n      return;\n    }\n    \n    if (node != null) {\n      String rawAttribValue = DOMUtil.getAttr(node, name, null);\n\n      if (value == null) {\n        coreAttribs.put(name, rawAttribValue);\n        return;\n      }\n      if (rawAttribValue == null && defaultValue != null && value.equals(defaultValue)) {\n        return;\n      }\n      if (rawAttribValue != null && value.equals(DOMUtil.substituteProperty(rawAttribValue, loader.getCoreProperties()))){\n        coreAttribs.put(name, rawAttribValue);\n      } else {\n        coreAttribs.put(name, value);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc6e48afbb50ae0a22fa76e226f04fd585532938","date":1371429211,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#addCoreProperty(Map[String,String],SolrResourceLoader,Node,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#addCoreProperty(Map[String,String],SolrResourceLoader,Node,String,String,String).mjava","sourceNew":"  private void addCoreProperty(Map<String,String> propMap, SolrResourceLoader loader, Node node, String name,\n      String value, String defaultValue) {\n\n    if (node == null) {\n      propMap.put(name, value);\n      return;\n    }\n\n    if (node != null) {\n      String rawAttribValue = DOMUtil.getAttr(node, name, null);\n\n      if (rawAttribValue == null) {\n        return; // It was never in the original definition.\n      }\n\n      if (value == null) {\n        propMap.put(name, rawAttribValue);\n        return;\n      }\n\n      // There are some _really stupid_ additions/subtractions of the slash that we should look out for. I'm (EOE)\n      // ashamed of this but it fixes some things and we're throwing persistence away anyway (although\n      // maybe not for core.properties files).\n      String defComp = regularizeAttr(defaultValue);\n\n      if (defComp != null && regularizeAttr(value).equals(defComp)) {\n        return;\n      }\n      String rawComp = regularizeAttr(rawAttribValue);\n      if (rawComp != null && regularizeAttr(value).equals(\n          regularizeAttr(DOMUtil.substituteProperty(rawAttribValue, loader.getCoreProperties())))) {\n        propMap.put(name, rawAttribValue);\n      } else {\n        propMap.put(name, value);\n      }\n    }\n  }\n\n","sourceOld":"  private void addCoreProperty(Map<String,String> coreAttribs, SolrResourceLoader loader, Node node, String name,\n      String value, String defaultValue) {\n    \n    if (node == null) {\n      coreAttribs.put(name, value);\n      return;\n    }\n    \n    if (node != null) {\n      String rawAttribValue = DOMUtil.getAttr(node, name, null);\n\n      if (value == null) {\n        coreAttribs.put(name, rawAttribValue);\n        return;\n      }\n      if (rawAttribValue == null && defaultValue != null && value.equals(defaultValue)) {\n        return;\n      }\n      if (rawAttribValue != null && value.equals(DOMUtil.substituteProperty(rawAttribValue, loader.getCoreProperties()))){\n        coreAttribs.put(name, rawAttribValue);\n      } else {\n        coreAttribs.put(name, value);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#addCoreProperty(Map[String,String],SolrResourceLoader,Node,String,String,String).mjava","sourceNew":null,"sourceOld":"  private void addCoreProperty(Map<String,String> propMap, SolrResourceLoader loader, Node node, String name,\n      String value, String defaultValue) {\n\n    if (node == null) {\n      propMap.put(name, value);\n      return;\n    }\n\n    if (node != null) {\n      String rawAttribValue = DOMUtil.getAttr(node, name, null);\n\n      if (rawAttribValue == null) {\n        return; // It was never in the original definition.\n      }\n\n      if (value == null) {\n        propMap.put(name, rawAttribValue);\n        return;\n      }\n\n      // There are some _really stupid_ additions/subtractions of the slash that we should look out for. I'm (EOE)\n      // ashamed of this but it fixes some things and we're throwing persistence away anyway (although\n      // maybe not for core.properties files).\n      String defComp = regularizeAttr(defaultValue);\n\n      if (defComp != null && regularizeAttr(value).equals(defComp)) {\n        return;\n      }\n      String rawComp = regularizeAttr(rawAttribValue);\n      if (rawComp != null && regularizeAttr(value).equals(\n          regularizeAttr(DOMUtil.substituteProperty(rawAttribValue, loader.getCoreProperties())))) {\n        propMap.put(name, rawAttribValue);\n      } else {\n        propMap.put(name, value);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCores#addCoreProperty(Map[String,String],SolrResourceLoader,Node,String,String,String).mjava","sourceNew":null,"sourceOld":"  private void addCoreProperty(Map<String,String> coreAttribs, SolrResourceLoader loader, Node node, String name,\n      String value, String defaultValue) {\n    \n    if (node == null) {\n      coreAttribs.put(name, value);\n      return;\n    }\n    \n    if (node != null) {\n      String rawAttribValue = DOMUtil.getAttr(node, name, null);\n\n      if (value == null) {\n        coreAttribs.put(name, rawAttribValue);\n        return;\n      }\n      if (rawAttribValue == null && defaultValue != null && value.equals(defaultValue)) {\n        return;\n      }\n      if (rawAttribValue != null && value.equals(DOMUtil.substituteProperty(rawAttribValue, loader.getCoreProperties()))){\n        coreAttribs.put(name, rawAttribValue);\n      } else {\n        coreAttribs.put(name, value);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc6e48afbb50ae0a22fa76e226f04fd585532938":["9409650933cc688e77e565092a25e58adfc2e18d"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["9409650933cc688e77e565092a25e58adfc2e18d","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"9409650933cc688e77e565092a25e58adfc2e18d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["dc6e48afbb50ae0a22fa76e226f04fd585532938"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"]},"commit2Childs":{"dc6e48afbb50ae0a22fa76e226f04fd585532938":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9409650933cc688e77e565092a25e58adfc2e18d":["dc6e48afbb50ae0a22fa76e226f04fd585532938","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9409650933cc688e77e565092a25e58adfc2e18d"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}