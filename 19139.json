{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter]).mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a NamedList respresentation of the given metric registry. Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param metricFilters a list of {@link MetricFilter} instances\n   * @return a {@link NamedList}\n   */\n  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> metricFilters) {\n    NamedList response = new NamedList();\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream().filter(s -> metricFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s)))).forEach(n -> {\n      Metric metric = metrics.get(n);\n      if (metric instanceof Counter) {\n        Counter counter = (Counter) metric;\n        response.add(n, counterToNamedList(counter));\n      } else if (metric instanceof Gauge) {\n        Gauge gauge = (Gauge) metric;\n        response.add(n, gaugeToNamedList(gauge));\n      } else if (metric instanceof Meter) {\n        Meter meter = (Meter) metric;\n        response.add(n, meterToNamedList(meter));\n      } else if (metric instanceof Timer) {\n        Timer timer = (Timer) metric;\n        response.add(n, timerToNamedList(timer));\n      } else if (metric instanceof Histogram) {\n        Histogram histogram = (Histogram) metric;\n        response.add(n, histogramToNamedList(histogram));\n      }\n    });\n    return response;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a NamedList respresentation of the given metric registry. Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param metricFilters a list of {@link MetricFilter} instances\n   * @return a {@link NamedList}\n   */\n  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> metricFilters) {\n    NamedList response = new NamedList();\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream().filter(s -> metricFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s)))).forEach(n -> {\n      Metric metric = metrics.get(n);\n      if (metric instanceof Counter) {\n        Counter counter = (Counter) metric;\n        response.add(n, counterToNamedList(counter));\n      } else if (metric instanceof Gauge) {\n        Gauge gauge = (Gauge) metric;\n        response.add(n, gaugeToNamedList(gauge));\n      } else if (metric instanceof Meter) {\n        Meter meter = (Meter) metric;\n        response.add(n, meterToNamedList(meter));\n      } else if (metric instanceof Timer) {\n        Timer timer = (Timer) metric;\n        response.add(n, timerToNamedList(timer));\n      } else if (metric instanceof Histogram) {\n        Histogram histogram = (Histogram) metric;\n        response.add(n, histogramToNamedList(histogram));\n      }\n    });\n    return response;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f7df713a0f1e310d18dd8da91c89a07a13f86f8","date":1483441921,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter]).mjava","sourceNew":"  /**\n   * Returns a NamedList representation of the given metric registry. Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param metricFilters a list of {@link MetricFilter} instances\n   * @return a {@link NamedList}\n   */\n  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> metricFilters) {\n    NamedList response = new NamedList();\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream().filter(s -> metricFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s)))).forEach(n -> {\n      Metric metric = metrics.get(n);\n      if (metric instanceof Counter) {\n        Counter counter = (Counter) metric;\n        response.add(n, counterToNamedList(counter));\n      } else if (metric instanceof Gauge) {\n        Gauge gauge = (Gauge) metric;\n        response.add(n, gaugeToNamedList(gauge));\n      } else if (metric instanceof Meter) {\n        Meter meter = (Meter) metric;\n        response.add(n, meterToNamedList(meter));\n      } else if (metric instanceof Timer) {\n        Timer timer = (Timer) metric;\n        response.add(n, timerToNamedList(timer));\n      } else if (metric instanceof Histogram) {\n        Histogram histogram = (Histogram) metric;\n        response.add(n, histogramToNamedList(histogram));\n      }\n    });\n    return response;\n  }\n\n","sourceOld":"  /**\n   * Returns a NamedList respresentation of the given metric registry. Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param metricFilters a list of {@link MetricFilter} instances\n   * @return a {@link NamedList}\n   */\n  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> metricFilters) {\n    NamedList response = new NamedList();\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream().filter(s -> metricFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s)))).forEach(n -> {\n      Metric metric = metrics.get(n);\n      if (metric instanceof Counter) {\n        Counter counter = (Counter) metric;\n        response.add(n, counterToNamedList(counter));\n      } else if (metric instanceof Gauge) {\n        Gauge gauge = (Gauge) metric;\n        response.add(n, gaugeToNamedList(gauge));\n      } else if (metric instanceof Meter) {\n        Meter meter = (Meter) metric;\n        response.add(n, meterToNamedList(meter));\n      } else if (metric instanceof Timer) {\n        Timer timer = (Timer) metric;\n        response.add(n, timerToNamedList(timer));\n      } else if (metric instanceof Histogram) {\n        Histogram histogram = (Histogram) metric;\n        response.add(n, histogramToNamedList(histogram));\n      }\n    });\n    return response;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter]).mjava","sourceNew":"  /**\n   * Returns a NamedList representation of the given metric registry. Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param metricFilters a list of {@link MetricFilter} instances\n   * @return a {@link NamedList}\n   */\n  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> metricFilters) {\n    NamedList response = new NamedList();\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream().filter(s -> metricFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s)))).forEach(n -> {\n      Metric metric = metrics.get(n);\n      if (metric instanceof Counter) {\n        Counter counter = (Counter) metric;\n        response.add(n, counterToNamedList(counter));\n      } else if (metric instanceof Gauge) {\n        Gauge gauge = (Gauge) metric;\n        response.add(n, gaugeToNamedList(gauge));\n      } else if (metric instanceof Meter) {\n        Meter meter = (Meter) metric;\n        response.add(n, meterToNamedList(meter));\n      } else if (metric instanceof Timer) {\n        Timer timer = (Timer) metric;\n        response.add(n, timerToNamedList(timer));\n      } else if (metric instanceof Histogram) {\n        Histogram histogram = (Histogram) metric;\n        response.add(n, histogramToNamedList(histogram));\n      }\n    });\n    return response;\n  }\n\n","sourceOld":"  /**\n   * Returns a NamedList respresentation of the given metric registry. Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param metricFilters a list of {@link MetricFilter} instances\n   * @return a {@link NamedList}\n   */\n  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> metricFilters) {\n    NamedList response = new NamedList();\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream().filter(s -> metricFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s)))).forEach(n -> {\n      Metric metric = metrics.get(n);\n      if (metric instanceof Counter) {\n        Counter counter = (Counter) metric;\n        response.add(n, counterToNamedList(counter));\n      } else if (metric instanceof Gauge) {\n        Gauge gauge = (Gauge) metric;\n        response.add(n, gaugeToNamedList(gauge));\n      } else if (metric instanceof Meter) {\n        Meter meter = (Meter) metric;\n        response.add(n, meterToNamedList(meter));\n      } else if (metric instanceof Timer) {\n        Timer timer = (Timer) metric;\n        response.add(n, timerToNamedList(timer));\n      } else if (metric instanceof Histogram) {\n        Histogram histogram = (Histogram) metric;\n        response.add(n, histogramToNamedList(histogram));\n      }\n    });\n    return response;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa3636f020dd2f593d4df8cf2a55798e984ae749","date":1483541265,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter],MetricFilter).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter]).mjava","sourceNew":"  /**\n   * Returns a NamedList representation of the given metric registry. Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param shouldMatchFilters a list of {@link MetricFilter} instances.\n   *                           A metric must match <em>any one</em> of the filters from this list to be\n   *                           included in the output\n   * @param mustMatchFilter a {@link MetricFilter}.\n   *                        A metric <em>must</em> match this filter to be included in the output.\n   * @return a {@link NamedList}\n   */\n  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> shouldMatchFilters, MetricFilter mustMatchFilter) {\n    NamedList response = new NamedList();\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n      Metric metric = metrics.get(n);\n      if (metric instanceof Counter) {\n        Counter counter = (Counter) metric;\n        response.add(n, counterToNamedList(counter));\n      } else if (metric instanceof Gauge) {\n        Gauge gauge = (Gauge) metric;\n        response.add(n, gaugeToNamedList(gauge));\n      } else if (metric instanceof Meter) {\n        Meter meter = (Meter) metric;\n        response.add(n, meterToNamedList(meter));\n      } else if (metric instanceof Timer) {\n        Timer timer = (Timer) metric;\n        response.add(n, timerToNamedList(timer));\n      } else if (metric instanceof Histogram) {\n        Histogram histogram = (Histogram) metric;\n        response.add(n, histogramToNamedList(histogram));\n      }\n    });\n    return response;\n  }\n\n","sourceOld":"  /**\n   * Returns a NamedList representation of the given metric registry. Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param metricFilters a list of {@link MetricFilter} instances\n   * @return a {@link NamedList}\n   */\n  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> metricFilters) {\n    NamedList response = new NamedList();\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream().filter(s -> metricFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s)))).forEach(n -> {\n      Metric metric = metrics.get(n);\n      if (metric instanceof Counter) {\n        Counter counter = (Counter) metric;\n        response.add(n, counterToNamedList(counter));\n      } else if (metric instanceof Gauge) {\n        Gauge gauge = (Gauge) metric;\n        response.add(n, gaugeToNamedList(gauge));\n      } else if (metric instanceof Meter) {\n        Meter meter = (Meter) metric;\n        response.add(n, meterToNamedList(meter));\n      } else if (metric instanceof Timer) {\n        Timer timer = (Timer) metric;\n        response.add(n, timerToNamedList(timer));\n      } else if (metric instanceof Histogram) {\n        Histogram histogram = (Histogram) metric;\n        response.add(n, histogramToNamedList(histogram));\n      }\n    });\n    return response;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter],MetricFilter).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter]).mjava","sourceNew":"  /**\n   * Returns a NamedList representation of the given metric registry. Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param shouldMatchFilters a list of {@link MetricFilter} instances.\n   *                           A metric must match <em>any one</em> of the filters from this list to be\n   *                           included in the output\n   * @param mustMatchFilter a {@link MetricFilter}.\n   *                        A metric <em>must</em> match this filter to be included in the output.\n   * @return a {@link NamedList}\n   */\n  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> shouldMatchFilters, MetricFilter mustMatchFilter) {\n    NamedList response = new NamedList();\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n      Metric metric = metrics.get(n);\n      if (metric instanceof Counter) {\n        Counter counter = (Counter) metric;\n        response.add(n, counterToNamedList(counter));\n      } else if (metric instanceof Gauge) {\n        Gauge gauge = (Gauge) metric;\n        response.add(n, gaugeToNamedList(gauge));\n      } else if (metric instanceof Meter) {\n        Meter meter = (Meter) metric;\n        response.add(n, meterToNamedList(meter));\n      } else if (metric instanceof Timer) {\n        Timer timer = (Timer) metric;\n        response.add(n, timerToNamedList(timer));\n      } else if (metric instanceof Histogram) {\n        Histogram histogram = (Histogram) metric;\n        response.add(n, histogramToNamedList(histogram));\n      }\n    });\n    return response;\n  }\n\n","sourceOld":"  /**\n   * Returns a NamedList representation of the given metric registry. Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param metricFilters a list of {@link MetricFilter} instances\n   * @return a {@link NamedList}\n   */\n  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> metricFilters) {\n    NamedList response = new NamedList();\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream().filter(s -> metricFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s)))).forEach(n -> {\n      Metric metric = metrics.get(n);\n      if (metric instanceof Counter) {\n        Counter counter = (Counter) metric;\n        response.add(n, counterToNamedList(counter));\n      } else if (metric instanceof Gauge) {\n        Gauge gauge = (Gauge) metric;\n        response.add(n, gaugeToNamedList(gauge));\n      } else if (metric instanceof Meter) {\n        Meter meter = (Meter) metric;\n        response.add(n, meterToNamedList(meter));\n      } else if (metric instanceof Timer) {\n        Timer timer = (Timer) metric;\n        response.add(n, timerToNamedList(timer));\n      } else if (metric instanceof Histogram) {\n        Histogram histogram = (Histogram) metric;\n        response.add(n, histogramToNamedList(histogram));\n      }\n    });\n    return response;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa3636f020dd2f593d4df8cf2a55798e984ae749":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["0265144286422ad99682a00904cc2536b79c8535"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa3636f020dd2f593d4df8cf2a55798e984ae749"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["f03e4bed5023ec3ef93a771b8888cae991cf448d","aa3636f020dd2f593d4df8cf2a55798e984ae749"]},"commit2Childs":{"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"aa3636f020dd2f593d4df8cf2a55798e984ae749":["cd5edd1f2b162a5cfa08efd17851a07373a96817","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["aa3636f020dd2f593d4df8cf2a55798e984ae749","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["491c9672ec42582fe43960452dbd37f1c80fe0f0"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}