{"path":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#sort(LeafReader).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#sort(LeafReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final FieldComparator<?> comparators[] = new FieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i);\n      comparators[i].setNextReader(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["86a0a50d2d14aaee1e635bbec914468551f7f9a2","86a0a50d2d14aaee1e635bbec914468551f7f9a2","86a0a50d2d14aaee1e635bbec914468551f7f9a2","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/Sorter#sort(LeafReader).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/Sorter#sort(LeafReader).mjava","sourceNew":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final FieldComparator<?> comparators[] = new FieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i);\n      comparators[i].setNextReader(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","sourceOld":"  /**\n   * Returns a mapping from the old document ID to its new location in the\n   * sorted index. Implementations can use the auxiliary\n   * {@link #sort(int, DocComparator)} to compute the old-to-new permutation\n   * given a list of documents and their corresponding values.\n   * <p>\n   * A return value of <tt>null</tt> is allowed and means that\n   * <code>reader</code> is already sorted.\n   * <p>\n   * <b>NOTE:</b> deleted documents are expected to appear in the mapping as\n   * well, they will however be marked as deleted in the sorted view.\n   */\n  DocMap sort(LeafReader reader) throws IOException {\n    SortField fields[] = sort.getSort();\n    final int reverseMul[] = new int[fields.length];\n    final FieldComparator<?> comparators[] = new FieldComparator[fields.length];\n    \n    for (int i = 0; i < fields.length; i++) {\n      reverseMul[i] = fields[i].getReverse() ? -1 : 1;\n      comparators[i] = fields[i].getComparator(1, i);\n      comparators[i].setNextReader(reader.getContext());\n      comparators[i].setScorer(FAKESCORER);\n    }\n    final DocComparator comparator = new DocComparator() {\n      @Override\n      public int compare(int docID1, int docID2) {\n        try {\n          for (int i = 0; i < comparators.length; i++) {\n            // TODO: would be better if copy() didnt cause a term lookup in TermOrdVal & co,\n            // the segments are always the same here...\n            comparators[i].copy(0, docID1);\n            comparators[i].setBottom(0);\n            int comp = reverseMul[i] * comparators[i].compareBottom(docID2);\n            if (comp != 0) {\n              return comp;\n            }\n          }\n          return Integer.compare(docID1, docID2); // docid order tiebreak\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    };\n    return sort(reader.maxDoc(), comparator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}