{"path":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testOverwriteWithTrust().mjava","commits":[{"id":"0709b256ed89906e7b5f558ba1a675826f0a858f","date":1600796219,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#testOverwriteWithTrust().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOverwriteWithTrust() throws Exception {\n    String configsetName = \"regular\";\n    String configsetSuffix = \"testOverwriteWithTrust-1\";\n    uploadConfigSetWithAssertions(configsetName, configsetSuffix, null);\n    try (SolrZkClient zkClient = new SolrZkClient(cluster.getZkServer().getZkAddress(),\n            AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      assertFalse(isTrusted(zkClient, configsetName, configsetSuffix));\n      int solrconfigZkVersion = getConfigZNodeVersion(zkClient, configsetName, configsetSuffix, \"solrconfig.xml\");\n      // Was untrusted, overwrite with untrusted\n      assertEquals(0, uploadConfigSet(configsetName, configsetSuffix, null, zkClient, true, false));\n      assertTrue(\"Expecting version bump\",\n              solrconfigZkVersion < getConfigZNodeVersion(zkClient, configsetName, configsetSuffix, \"solrconfig.xml\"));\n      assertFalse(isTrusted(zkClient, configsetName, configsetSuffix));\n      solrconfigZkVersion = getConfigZNodeVersion(zkClient, configsetName, configsetSuffix, \"solrconfig.xml\");\n\n      // Was untrusted, overwrite with trusted but no cleanup\n      assertEquals(0, uploadConfigSet(configsetName, configsetSuffix, \"solr\", zkClient, true, false));\n      assertTrue(\"Expecting version bump\",\n              solrconfigZkVersion < getConfigZNodeVersion(zkClient, configsetName, configsetSuffix, \"solrconfig.xml\"));\n      assertFalse(isTrusted(zkClient, configsetName, configsetSuffix));\n      solrconfigZkVersion = getConfigZNodeVersion(zkClient, configsetName, configsetSuffix, \"solrconfig.xml\");\n\n      // Was untrusted, overwrite with trusted with cleanup\n      assertEquals(0, uploadConfigSet(configsetName, configsetSuffix, \"solr\", zkClient, true, true));\n      assertTrue(\"Expecting version bump\",\n              solrconfigZkVersion < getConfigZNodeVersion(zkClient, configsetName, configsetSuffix, \"solrconfig.xml\"));\n      assertTrue(isTrusted(zkClient, configsetName, configsetSuffix));\n      solrconfigZkVersion = getConfigZNodeVersion(zkClient, configsetName, configsetSuffix, \"solrconfig.xml\");\n\n      // Was trusted, try to overwrite with untrusted with no cleanup\n      ignoreException(\"Trying to make an unstrusted ConfigSet update on a trusted configSet\");\n      assertEquals(\"Can't upload a trusted configset with an untrusted request\",\n              400, uploadConfigSet(configsetName, configsetSuffix, null, zkClient, true, false));\n      assertEquals(\"Expecting version to remain equal\",\n              solrconfigZkVersion, getConfigZNodeVersion(zkClient, configsetName, configsetSuffix, \"solrconfig.xml\"));\n      assertTrue(isTrusted(zkClient, configsetName, configsetSuffix));\n\n      // Was trusted, try to overwrite with untrusted with cleanup\n      ignoreException(\"Trying to make an unstrusted ConfigSet update on a trusted configSet\");\n      assertEquals(\"Can't upload a trusted configset with an untrusted request\",\n              400, uploadConfigSet(configsetName, configsetSuffix, null, zkClient, true, true));\n      assertEquals(\"Expecting version to remain equal\",\n              solrconfigZkVersion, getConfigZNodeVersion(zkClient, configsetName, configsetSuffix, \"solrconfig.xml\"));\n      assertTrue(isTrusted(zkClient, configsetName, configsetSuffix));\n      unIgnoreException(\"Trying to make an unstrusted ConfigSet update on a trusted configSet\");\n\n      // Was trusted, overwrite with trusted no cleanup\n      assertEquals(0, uploadConfigSet(configsetName, configsetSuffix, \"solr\", zkClient, true, false));\n      assertTrue(\"Expecting version bump\",\n              solrconfigZkVersion < getConfigZNodeVersion(zkClient, configsetName, configsetSuffix, \"solrconfig.xml\"));\n      assertTrue(isTrusted(zkClient, configsetName, configsetSuffix));\n      solrconfigZkVersion = getConfigZNodeVersion(zkClient, configsetName, configsetSuffix, \"solrconfig.xml\");\n\n      // Was trusted, overwrite with trusted with cleanup\n      assertEquals(0, uploadConfigSet(configsetName, configsetSuffix, \"solr\", zkClient, true, true));\n      assertTrue(\"Expecting version bump\",\n              solrconfigZkVersion < getConfigZNodeVersion(zkClient, configsetName, configsetSuffix, \"solrconfig.xml\"));\n      assertTrue(isTrusted(zkClient, configsetName, configsetSuffix));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0709b256ed89906e7b5f558ba1a675826f0a858f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0709b256ed89906e7b5f558ba1a675826f0a858f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0709b256ed89906e7b5f558ba1a675826f0a858f"],"0709b256ed89906e7b5f558ba1a675826f0a858f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}