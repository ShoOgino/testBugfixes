{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","sourceNew":"  protected AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","sourceOld":"  protected AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"081b68cb9e8f4b5405b40bfb223fd7c587171aa1","date":1360072766,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","sourceNew":null,"sourceOld":"  protected AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4d4ec39bf5396230748ca859ff05ab024b6fc5","date":1360112310,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getLeafContextForField(String).mjava","sourceNew":null,"sourceOld":"  protected AtomicReaderContext getLeafContextForField(String field) throws IOException {\n    if(wrapToCaching && !cachedTokenStream && !(tokenStream instanceof CachingTokenFilter)) {\n      tokenStream = new CachingTokenFilter(new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      cachedTokenStream = true;\n    }\n    AtomicReaderContext context = readers.get(field);\n    if (context == null) {\n      MemoryIndex indexer = new MemoryIndex();\n      indexer.addField(field, new OffsetLimitTokenFilter(tokenStream, maxDocCharsToAnalyze));\n      tokenStream.reset();\n      IndexSearcher searcher = indexer.createSearcher();\n      // MEM index has only atomic ctx\n      context = (AtomicReaderContext) searcher.getTopReaderContext();\n      readers.put(field, context);\n    }\n\n    return context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"081b68cb9e8f4b5405b40bfb223fd7c587171aa1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":["b89678825b68eccaf09e6ab71675fc0b0af1e099","081b68cb9e8f4b5405b40bfb223fd7c587171aa1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["081b68cb9e8f4b5405b40bfb223fd7c587171aa1"]},"commit2Childs":{"081b68cb9e8f4b5405b40bfb223fd7c587171aa1":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["081b68cb9e8f4b5405b40bfb223fd7c587171aa1","3e4d4ec39bf5396230748ca859ff05ab024b6fc5"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}