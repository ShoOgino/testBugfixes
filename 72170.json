{"path":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","commits":[{"id":"5ebb742ffd3fae76a577a68de595d711f43e6944","date":1305546231,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","pathOld":"/dev/null","sourceNew":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    Type[] values = Type.values();\n    Type type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"PreFlex\".equals(codecProvider.getFieldCodec(name)) || doc.getFieldable(name) != null)\n        return;\n    DocValuesField docValuesField = new DocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      final String randomUnicodeString = _TestUtil.randomUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case INTS:\n      docValuesField.setInt(random.nextInt());\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39d51e9acac1e629cffe47855e85dc6dedc4754d","date":1305711497,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","sourceNew":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    ValueType[] values = ValueType.values();\n    ValueType type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"PreFlex\".equals(codecProvider.getFieldCodec(name)) || doc.getFieldable(name) != null)\n        return;\n    DocValuesField docValuesField = new DocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      final String randomUnicodeString = _TestUtil.randomUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case INTS:\n      docValuesField.setInt(random.nextInt());\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","sourceOld":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    Type[] values = Type.values();\n    Type type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"PreFlex\".equals(codecProvider.getFieldCodec(name)) || doc.getFieldable(name) != null)\n        return;\n    DocValuesField docValuesField = new DocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      final String randomUnicodeString = _TestUtil.randomUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case INTS:\n      docValuesField.setInt(random.nextInt());\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"605b061fadf71aa6458c0005eaae83a98350c403","date":1307117658,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","sourceNew":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    ValueType[] values = ValueType.values();\n    ValueType type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"PreFlex\".equals(codecProvider.getFieldCodec(name)) || doc.getFieldable(name) != null)\n        return;\n    IndexDocValuesField docValuesField = new IndexDocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      final String randomUnicodeString = _TestUtil.randomUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case INTS:\n      docValuesField.setInt(random.nextInt());\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","sourceOld":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    ValueType[] values = ValueType.values();\n    ValueType type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"PreFlex\".equals(codecProvider.getFieldCodec(name)) || doc.getFieldable(name) != null)\n        return;\n    DocValuesField docValuesField = new DocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      final String randomUnicodeString = _TestUtil.randomUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case INTS:\n      docValuesField.setInt(random.nextInt());\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","pathOld":"/dev/null","sourceNew":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    ValueType[] values = ValueType.values();\n    ValueType type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"PreFlex\".equals(codecProvider.getFieldCodec(name)) || doc.getFieldable(name) != null)\n        return;\n    IndexDocValuesField docValuesField = new IndexDocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      final String randomUnicodeString = _TestUtil.randomUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case INTS:\n      docValuesField.setInt(random.nextInt());\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","pathOld":"/dev/null","sourceNew":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    ValueType[] values = ValueType.values();\n    ValueType type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"PreFlex\".equals(codecProvider.getFieldCodec(name)) || doc.getFieldable(name) != null)\n        return;\n    IndexDocValuesField docValuesField = new IndexDocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      final String randomUnicodeString = _TestUtil.randomUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case INTS:\n      docValuesField.setInt(random.nextInt());\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93c59ad5034eecd863f267bd75e1df7b8a51e427","date":1309162882,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","sourceNew":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    ValueType[] values = ValueType.values();\n    ValueType type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"PreFlex\".equals(codecProvider.getFieldCodec(name)) || doc.getFieldable(name) != null)\n        return;\n    IndexDocValuesField docValuesField = new IndexDocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      final String randomUnicodeString = _TestUtil.randomUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case VAR_INTS:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_16:\n      docValuesField.setInt(random.nextInt(Short.MAX_VALUE));\n      break;\n    case FIXED_INTS_32:\n      docValuesField.setInt(random.nextInt());\n      break;\n    case FIXED_INTS_64:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_8:\n      docValuesField.setInt(random.nextInt(128));\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","sourceOld":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    ValueType[] values = ValueType.values();\n    ValueType type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"PreFlex\".equals(codecProvider.getFieldCodec(name)) || doc.getFieldable(name) != null)\n        return;\n    IndexDocValuesField docValuesField = new IndexDocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      final String randomUnicodeString = _TestUtil.randomUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case INTS:\n      docValuesField.setInt(random.nextInt());\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","sourceNew":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    ValueType[] values = ValueType.values();\n    ValueType type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"PreFlex\".equals(codecProvider.getFieldCodec(name)) || doc.getFieldable(name) != null)\n        return;\n    IndexDocValuesField docValuesField = new IndexDocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      final String randomUnicodeString = _TestUtil.randomUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case VAR_INTS:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_16:\n      docValuesField.setInt(random.nextInt(Short.MAX_VALUE));\n      break;\n    case FIXED_INTS_32:\n      docValuesField.setInt(random.nextInt());\n      break;\n    case FIXED_INTS_64:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_8:\n      docValuesField.setInt(random.nextInt(128));\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","sourceOld":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    ValueType[] values = ValueType.values();\n    ValueType type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"PreFlex\".equals(codecProvider.getFieldCodec(name)) || doc.getFieldable(name) != null)\n        return;\n    IndexDocValuesField docValuesField = new IndexDocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      final String randomUnicodeString = _TestUtil.randomUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case INTS:\n      docValuesField.setInt(random.nextInt());\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","sourceNew":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    ValueType[] values = ValueType.values();\n    ValueType type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"PreFlex\".equals(codecProvider.getFieldCodec(name)) || doc.getFieldable(name) != null)\n        return;\n    IndexDocValuesField docValuesField = new IndexDocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      final String randomUnicodeString = _TestUtil.randomUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case VAR_INTS:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_16:\n      docValuesField.setInt(random.nextInt(Short.MAX_VALUE));\n      break;\n    case FIXED_INTS_32:\n      docValuesField.setInt(random.nextInt());\n      break;\n    case FIXED_INTS_64:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_8:\n      docValuesField.setInt(random.nextInt(128));\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","sourceOld":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    ValueType[] values = ValueType.values();\n    ValueType type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"PreFlex\".equals(codecProvider.getFieldCodec(name)) || doc.getFieldable(name) != null)\n        return;\n    IndexDocValuesField docValuesField = new IndexDocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      final String randomUnicodeString = _TestUtil.randomUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case INTS:\n      docValuesField.setInt(random.nextInt());\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","sourceNew":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    ValueType[] values = ValueType.values();\n    ValueType type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"PreFlex\".equals(codecProvider.getFieldCodec(name)) || doc.getField(name) != null)\n        return;\n    IndexDocValuesField docValuesField = new IndexDocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      final String randomUnicodeString = _TestUtil.randomUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case VAR_INTS:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_16:\n      docValuesField.setInt(random.nextInt(Short.MAX_VALUE));\n      break;\n    case FIXED_INTS_32:\n      docValuesField.setInt(random.nextInt());\n      break;\n    case FIXED_INTS_64:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_8:\n      docValuesField.setInt(random.nextInt(128));\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","sourceOld":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    ValueType[] values = ValueType.values();\n    ValueType type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"PreFlex\".equals(codecProvider.getFieldCodec(name)) || doc.getFieldable(name) != null)\n        return;\n    IndexDocValuesField docValuesField = new IndexDocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      final String randomUnicodeString = _TestUtil.randomUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case VAR_INTS:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_16:\n      docValuesField.setInt(random.nextInt(Short.MAX_VALUE));\n      break;\n    case FIXED_INTS_32:\n      docValuesField.setInt(random.nextInt());\n      break;\n    case FIXED_INTS_64:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_8:\n      docValuesField.setInt(random.nextInt(128));\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","sourceNew":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    ValueType[] values = ValueType.values();\n    ValueType type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"PreFlex\".equals(codecProvider.getFieldCodec(name)) || doc.getField(name) != null)\n        return;\n    IndexDocValuesField docValuesField = new IndexDocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n      final String randomUnicodeString = _TestUtil.randomUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_SORTED:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case VAR_INTS:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_16:\n      docValuesField.setInt(random.nextInt(Short.MAX_VALUE));\n      break;\n    case FIXED_INTS_32:\n      docValuesField.setInt(random.nextInt());\n      break;\n    case FIXED_INTS_64:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_8:\n      docValuesField.setInt(random.nextInt(128));\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","sourceOld":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    ValueType[] values = ValueType.values();\n    ValueType type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"PreFlex\".equals(codecProvider.getFieldCodec(name)) || doc.getField(name) != null)\n        return;\n    IndexDocValuesField docValuesField = new IndexDocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      final String randomUnicodeString = _TestUtil.randomUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case VAR_INTS:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_16:\n      docValuesField.setInt(random.nextInt(Short.MAX_VALUE));\n      break;\n    case FIXED_INTS_32:\n      docValuesField.setInt(random.nextInt());\n      break;\n    case FIXED_INTS_64:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_8:\n      docValuesField.setInt(random.nextInt(128));\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d029320c10aab40cea2379feb6389c36e43a1007","date":1318097035,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","sourceNew":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    ValueType[] values = ValueType.values();\n    ValueType type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"PreFlex\".equals(codecProvider.getFieldCodec(name)) || doc.getField(name) != null)\n        return;\n    IndexDocValuesField docValuesField = new IndexDocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n      //make sure we use a valid unicode string with a fixed size byte length\n      final String randomUnicodeString = _TestUtil.randomFixedByteLengthUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_SORTED:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case VAR_INTS:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_16:\n      docValuesField.setInt(random.nextInt(Short.MAX_VALUE));\n      break;\n    case FIXED_INTS_32:\n      docValuesField.setInt(random.nextInt());\n      break;\n    case FIXED_INTS_64:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_8:\n      docValuesField.setInt(random.nextInt(128));\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","sourceOld":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    ValueType[] values = ValueType.values();\n    ValueType type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"PreFlex\".equals(codecProvider.getFieldCodec(name)) || doc.getField(name) != null)\n        return;\n    IndexDocValuesField docValuesField = new IndexDocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n      final String randomUnicodeString = _TestUtil.randomUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_SORTED:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case VAR_INTS:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_16:\n      docValuesField.setInt(random.nextInt(Short.MAX_VALUE));\n      break;\n    case FIXED_INTS_32:\n      docValuesField.setInt(random.nextInt());\n      break;\n    case FIXED_INTS_64:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_8:\n      docValuesField.setInt(random.nextInt(128));\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#randomPerDocFieldValues(Random,Document).mjava","sourceNew":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    ValueType[] values = ValueType.values();\n    ValueType type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"Lucene3x\".equals(codec.getName()) || doc.getField(name) != null)\n        return;\n    IndexDocValuesField docValuesField = new IndexDocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n      //make sure we use a valid unicode string with a fixed size byte length\n      final String randomUnicodeString = _TestUtil.randomFixedByteLengthUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_SORTED:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case VAR_INTS:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_16:\n      docValuesField.setInt(random.nextInt(Short.MAX_VALUE));\n      break;\n    case FIXED_INTS_32:\n      docValuesField.setInt(random.nextInt());\n      break;\n    case FIXED_INTS_64:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_8:\n      docValuesField.setInt(random.nextInt(128));\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","sourceOld":"  private void randomPerDocFieldValues(Random random, Document doc) {\n    \n    ValueType[] values = ValueType.values();\n    ValueType type = values[random.nextInt(values.length)];\n    String name = \"random_\" + type.name() + \"\" + docValuesFieldPrefix;\n    if (\"PreFlex\".equals(codecProvider.getFieldCodec(name)) || doc.getField(name) != null)\n        return;\n    IndexDocValuesField docValuesField = new IndexDocValuesField(name);\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_FIXED_SORTED:\n      //make sure we use a valid unicode string with a fixed size byte length\n      final String randomUnicodeString = _TestUtil.randomFixedByteLengthUnicodeString(random, fixedBytesLength);\n      BytesRef fixedRef = new BytesRef(randomUnicodeString);\n      if (fixedRef.length > fixedBytesLength) {\n        fixedRef = new BytesRef(fixedRef.bytes, 0, fixedBytesLength);\n      } else {\n        fixedRef.grow(fixedBytesLength);\n        fixedRef.length = fixedBytesLength;\n      }\n      docValuesField.setBytes(fixedRef, type);\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_STRAIGHT:\n    case BYTES_VAR_SORTED:\n      BytesRef ref = new BytesRef(_TestUtil.randomUnicodeString(random, 200));\n      docValuesField.setBytes(ref, type);\n      break;\n    case FLOAT_32:\n      docValuesField.setFloat(random.nextFloat());\n      break;\n    case FLOAT_64:\n      docValuesField.setFloat(random.nextDouble());\n      break;\n    case VAR_INTS:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_16:\n      docValuesField.setInt(random.nextInt(Short.MAX_VALUE));\n      break;\n    case FIXED_INTS_32:\n      docValuesField.setInt(random.nextInt());\n      break;\n    case FIXED_INTS_64:\n      docValuesField.setInt(random.nextLong());\n      break;\n    case FIXED_INTS_8:\n      docValuesField.setInt(random.nextInt(128));\n      break;\n    default:\n      throw new IllegalArgumentException(\"no such type: \" + type);\n    }\n\n    doc.add(docValuesField);\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"d029320c10aab40cea2379feb6389c36e43a1007":["e128967bca58657bc0039d4bfe631e63e81f1977"],"7b91922b55d15444d554721b352861d028eb8278":["d029320c10aab40cea2379feb6389c36e43a1007"],"5ebb742ffd3fae76a577a68de595d711f43e6944":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","605b061fadf71aa6458c0005eaae83a98350c403"],"605b061fadf71aa6458c0005eaae83a98350c403":["39d51e9acac1e629cffe47855e85dc6dedc4754d"],"39d51e9acac1e629cffe47855e85dc6dedc4754d":["5ebb742ffd3fae76a577a68de595d711f43e6944"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["93c59ad5034eecd863f267bd75e1df7b8a51e427"],"e128967bca58657bc0039d4bfe631e63e81f1977":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"d029320c10aab40cea2379feb6389c36e43a1007":["7b91922b55d15444d554721b352861d028eb8278"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ebb742ffd3fae76a577a68de595d711f43e6944":["39d51e9acac1e629cffe47855e85dc6dedc4754d"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d083e83f225b11e5fdd900e83d26ddb385b6955c","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"605b061fadf71aa6458c0005eaae83a98350c403":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"39d51e9acac1e629cffe47855e85dc6dedc4754d":["605b061fadf71aa6458c0005eaae83a98350c403"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","5ebb742ffd3fae76a577a68de595d711f43e6944","2e8d7ba2175f47e280231533f7d3016249cea88b"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["e128967bca58657bc0039d4bfe631e63e81f1977"],"e128967bca58657bc0039d4bfe631e63e81f1977":["d029320c10aab40cea2379feb6389c36e43a1007"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}